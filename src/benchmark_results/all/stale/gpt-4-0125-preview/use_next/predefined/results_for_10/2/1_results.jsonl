{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1107, "completion_tokens": 219, "duration": 12.321542263031006, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1318, "completion_tokens": 292, "duration": 14.381810903549194, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correctly handle negative numbers by summing their absolute digit values\n            # and subtracting twice the first digit to account for its negative sign.\n            return sum(int(digit) for digit in str(num)[1:]) - 2*int(str(num)[1])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1448, "completion_tokens": 277, "duration": 16.357399702072144, "task_id": "HumanEval/108", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if a < 2:\n        return False\n    \n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                a //= i\n                prime_factors += 1\n            if prime_factors > 3:\n                return False\n    \n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1407, "completion_tokens": 460, "duration": 23.495425701141357, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        index = vowels.index(vowel) + shift\n        if vowel.isupper():\n            return vowels[index % len(vowels) - 5].upper()\n        else:\n            return vowels[index % len(vowels) - 5].lower()\n\n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += shift_vowel(char)\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 1, "prompt_tokens": 1249, "completion_tokens": 336, "duration": 19.12607479095459, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Numbers starting with 1: 10^(n-1)\n        # Numbers ending with 1: 10^(n-1)\n        # Overlap (starting and ending with 1): 10^(n-2)\n        # Total = Start with 1 + End with 1 - Overlap\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "is_solved": false, "iteration": 1, "prompt_tokens": 1007, "completion_tokens": 342, "duration": 20.09615969657898, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1193, "completion_tokens": 158, "duration": 12.584238290786743, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1344, "completion_tokens": 308, "duration": 19.645944833755493, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [0, 2, 4, 6, 8]\n    return [digit for digit in even_digits if min(a, b) <= digit <= max(a, b)]", "is_solved": true, "iteration": 1, "prompt_tokens": 1199, "completion_tokens": 247, "duration": 18.741366386413574, "task_id": "HumanEval/163", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1227, "completion_tokens": 279, "duration": 19.4540536403656, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Check if either string can be the first one in the concatenation\n    for first, second in [(str1, str2), (str2, str1)]:\n        balance = 0\n        for char in first + second:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If balance goes negative, parentheses are not balanced\n            if balance < 0:\n                break\n        # If balance is 0 after checking one combination, it's balanced\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1677, "completion_tokens": 394, "duration": 23.22493290901184, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1716, "completion_tokens": 396, "duration": 24.655168056488037, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1554, "completion_tokens": 338, "duration": 20.402976989746094, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return -(-total_water_units // capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1718, "completion_tokens": 143, "duration": 13.035188436508179, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1808, "completion_tokens": 164, "duration": 13.066633939743042, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1335, "completion_tokens": 156, "duration": 14.683289289474487, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    \n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        next_value = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(next_value)\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2199, "completion_tokens": 378, "duration": 21.972802877426147, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1497, "completion_tokens": 170, "duration": 14.436847448348999, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                nested = True\n    return nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1600, "completion_tokens": 477, "duration": 35.06246328353882, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    # Create a dictionary to map grid values to their coordinates\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    # Sort the values to get the order in which we'll try to build the path\n    sorted_values = sorted(value_to_pos.keys())\n\n    # Helper function to get neighbors of a cell\n    def get_neighbors(x, y):\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                yield nx, ny\n\n    # Recursive function to find the path\n    def find_path(path, length):\n        if length == k:\n            return path\n        x, y = value_to_pos[path[-1]]\n        for nx, ny in get_neighbors(x, y):\n            next_value = grid[nx][ny]\n            new_path = find_path(path + [next_value], length + 1)\n            if new_path:\n                return new_path\n        return None\n\n    # Try to build the path starting from each cell in order of their values\n    for start_value in sorted_values:\n        path = find_path([start_value], 1)\n        if path:\n            return path[:k]\n\n    return []", "is_solved": false, "iteration": 1, "prompt_tokens": 3559, "completion_tokens": 891, "duration": 51.73680233955383, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1099, "completion_tokens": 202, "duration": 13.5645432472229, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count = 0\n            while a % i == 0:\n                a = a // i\n                count += 1\n            prime_factors += count\n\n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1355, "completion_tokens": 409, "duration": 22.261913061141968, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Handle negative numbers by converting the first digit to negative after conversion\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1464, "completion_tokens": 275, "duration": 20.79543137550354, "task_id": "HumanEval/108", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1325, "completion_tokens": 299, "duration": 19.61603355407715, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    def shift_vowel(v):\n        return chr(((ord(v.lower()) - 97 + 2) % 26) + 97) if v.islower() else chr(((ord(v.upper()) - 65 + 2) % 26) + 65)\n\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n\n    for c in message:\n        if c in vowels:\n            encoded_message += shift_vowel(c)\n        else:\n            encoded_message += c.swapcase()\n\n    return encoded_message", "is_solved": false, "iteration": 1, "prompt_tokens": 1255, "completion_tokens": 317, "duration": 18.53571367263794, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Numbers that start with 1: 10^(n-1)\n        # Numbers that end with 1: 10^(n-1)\n        # Overlap (start and end with 1): 10^(n-2)\n        # Total = Start with 1 + End with 1 - Overlap\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "is_solved": false, "iteration": 1, "prompt_tokens": 992, "completion_tokens": 329, "duration": 21.517882347106934, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1205, "completion_tokens": 170, "duration": 14.670192003250122, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1823, "completion_tokens": 183, "duration": 16.788283824920654, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correctly count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1328, "completion_tokens": 303, "duration": 24.94883704185486, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Concatenate in both possible orders\n    concat1 = str1 + str2\n    concat2 = str2 + str1\n\n    # Function to check if parentheses are balanced\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If balance goes negative, parentheses are not balanced\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check both possible concatenations\n    if is_balanced(concat1) or is_balanced(concat2):\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1695, "completion_tokens": 430, "duration": 27.28031301498413, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    # Corrected the intersection length calculation\n    length = end - start\n    return \"YES\" if is_prime(length) and length > 0 else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1757, "completion_tokens": 451, "duration": 30.684669733047485, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1569, "completion_tokens": 353, "duration": 27.85986638069153, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1742, "completion_tokens": 170, "duration": 16.973185300827026, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (-len(set(word)), word)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1325, "completion_tokens": 146, "duration": 14.692867040634155, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1503, "completion_tokens": 176, "duration": 15.374102592468262, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, excluding a and b if they are not even, in ascending order.\n    \"\"\"\n    start = min(a, b)\n    end = max(a, b)\n    even_numbers = []\n\n    for i in range(start + 1, end):\n        if i % 2 == 0:\n            even_numbers.append(i)\n\n    return even_numbers", "is_solved": false, "iteration": 1, "prompt_tokens": 1224, "completion_tokens": 294, "duration": 21.500887155532837, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Check if 'b' is a substring of 'a' directly to handle non-rotated case efficiently\n    if b in a:\n        return True\n    extended_a = a + a\n    for i in range(1, len(b)):  # Start from 1 since 0 rotation is checked above\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 1190, "completion_tokens": 302, "duration": 24.157488346099854, "task_id": "HumanEval/154", "result": "failed: test #0", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested_found = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested_found = True\n            else:\n                return False\n    return nested_found and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1604, "completion_tokens": 482, "duration": 35.8553261756897, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]  # Starting sequence corrected to include the first three correct values\n    while len(trib) < n + 1:\n        if len(trib) % 2 == 0:\n            trib.append(1 + len(trib) / 2)\n        else:\n            next_val = trib[-1] + trib[-2] + trib[-3]  # Corrected to use last three values\n            trib.append(next_val)\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2164, "completion_tokens": 354, "duration": 24.031852960586548, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    pos_value = {(i, j): grid[i][j] for i in range(N) for j in range(N)}\n    pos_value_sorted = sorted(pos_value.items(), key=lambda x: x[1])\n    min_path_value = float('inf')\n    min_path = []\n\n    def dfs(x, y, steps, path):\n        nonlocal min_path_value, min_path\n        if steps == k:\n            path_value = ''.join(str(pos_value[(x, y)]) for x, y in path)\n            if path_value < min_path_value:\n                min_path_value = path_value\n                min_path = [pos_value[(x, y)] for x, y in path]\n            return\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, steps + 1, path + [(nx, ny)])\n\n    for pos, _ in pos_value_sorted[:k]:\n        dfs(pos[0], pos[1], 1, [pos])\n\n    return min_path", "is_solved": false, "iteration": 1, "prompt_tokens": 3404, "completion_tokens": 706, "duration": 38.99915432929993, "task_id": "HumanEval/129", "result": "failed: '<' not supported between instances of 'str' and 'float'", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1121, "completion_tokens": 224, "duration": 12.512715816497803, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1306, "completion_tokens": 280, "duration": 21.103846311569214, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n\n    # Check if the list of prime factors contains exactly 3 elements\n    # or if the list contains exactly one element repeated three times (for cases like 8 and 125)\n    return len(prime_factors) == 3 or (len(set(prime_factors)) == 1 and len(prime_factors) == 3)", "is_solved": true, "iteration": 1, "prompt_tokens": 1380, "completion_tokens": 472, "duration": 46.50874090194702, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correct handling of the negative numbers by converting the entire number to positive before summing digits\n            return sum(int(digit) for digit in str(-num))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1453, "completion_tokens": 260, "duration": 18.1013400554657, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if vowel in vowels:\n            is_upper = vowel.isupper()\n            index = vowels.index(vowel.lower()) + shift\n            if index >= len(vowels) // 2:\n                index -= len(vowels) // 2\n            return vowels[index].upper() if is_upper else vowels[index]\n        else:\n            return vowel\n    \n    return ''.join(shift_vowel(c) if c.lower() in 'aeiou' else c for c in message)", "is_solved": false, "iteration": 1, "prompt_tokens": 1230, "completion_tokens": 304, "duration": 21.57501459121704, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    # Numbers that start with 1: 10^(n-1)\n    # Numbers that end with 1: 10^(n-1)\n    # Numbers that start and end with 1 (overcounted once): 10^(n-2)\n    return 2 * 10**(n-1) - 10**(n-2)", "is_solved": false, "iteration": 1, "prompt_tokens": 1006, "completion_tokens": 323, "duration": 19.168673276901245, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1527, "completion_tokens": 311, "duration": 16.810524463653564, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:  # Change from checking in extended_a to original string a to ensure continuity and order.\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1196, "completion_tokens": 274, "duration": 19.046649932861328, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1223, "completion_tokens": 188, "duration": 16.573488473892212, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    max_unique_chars = 0\n    result_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result_word):\n            max_unique_chars = unique_chars\n            result_word = word\n    return result_word", "is_solved": true, "iteration": 1, "prompt_tokens": 1350, "completion_tokens": 222, "duration": 19.74610948562622, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word.strip() for word in txt.split(',')]\n    else:\n        # Correctly count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1325, "completion_tokens": 308, "duration": 24.713660717010498, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1818, "completion_tokens": 174, "duration": 14.748853921890259, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1695, "completion_tokens": 123, "duration": 11.594977855682373, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # First, check if concatenating in any possible order could result in a balanced string\n    for s1, s2 in [(str1, str2), (str2, str1)]:\n        balance = 0\n        for char in s1 + s2:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1671, "completion_tokens": 367, "duration": 30.008201122283936, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1795, "completion_tokens": 475, "duration": 32.359039306640625, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    # Find the cell with the minimum value and its coordinates\n    min_val, min_x, min_y = min((grid[i][j], i, j) for i in range(N) for j in range(N))\n    \n    # If k is 1, simply return the minimum value\n    if k == 1:\n        return [min_val]\n    \n    # Initialize the path with the minimum value\n    path = [min_val]\n    \n    # Find the adjacent cell with the smallest value to oscillate between\n    adj_min_val = float('inf')\n    for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n        nx, ny = min_x + dx, min_y + dy\n        if 0 <= nx < N and 0 <= ny < N:\n            if grid[nx][ny] < adj_min_val:\n                adj_min_val, adj_x, adj_y = grid[nx][ny], nx, ny\n    \n    # Oscillate between the minimum value and its smallest adjacent value\n    for _ in range(1, k):\n        if len(path) % 2 == 1:\n            path.append(adj_min_val)\n        else:\n            path.append(min_val)\n    \n    return path", "is_solved": true, "iteration": 1, "prompt_tokens": 3347, "completion_tokens": 653, "duration": 37.37287473678589, "task_id": "HumanEval/129", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    # Ensure a is less than b regardless of input order\n    start, end = sorted([a, b])\n    # Adjust start and end to ensure they are even and within the exclusive range\n    if start % 2 != 0:\n        start += 1\n    if end % 2 != 0:\n        end -= 1\n    # Generate even numbers between start and end, exclusive\n    return [i for i in range(start, end + 1, 2) if start < i < end]", "is_solved": false, "iteration": 1, "prompt_tokens": 1233, "completion_tokens": 349, "duration": 25.869170427322388, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1483, "completion_tokens": 156, "duration": 28.05142116546631, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested_found = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested_found = True\n            else:\n                return False\n    return nested_found and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1598, "completion_tokens": 476, "duration": 37.038512229919434, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]  # Initialize the sequence with the first three values correctly\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(int(1 + i / 2))  # Ensure the result is an integer\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])  # Correct formula for odd indices\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2150, "completion_tokens": 342, "duration": 20.480741024017334, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1114, "completion_tokens": 226, "duration": 17.52824115753174, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1318, "completion_tokens": 292, "duration": 18.811553955078125, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            while a % i == 0:\n                a //= i\n                prime_factors += 1\n        if prime_factors > 3:\n            return False\n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1351, "completion_tokens": 393, "duration": 26.980254888534546, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correctly handle negative numbers by skipping the first character (the minus sign) during digit sum calculation\n            return sum(int(digit) for digit in str(num)[1:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1441, "completion_tokens": 251, "duration": 18.388351678848267, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if vowel in vowels:\n            idx = vowels.index(vowel)\n            if idx % 2 == 0:  # Lowercase vowel\n                return vowels[(idx + shift) % len(vowels)].lower()\n            else:  # Uppercase vowel\n                return vowels[(idx + shift) % len(vowels)].upper()\n        return vowel\n\n    return ''.join(shift_vowel(c).swapcase() if c.isalpha() else c for c in message)", "is_solved": false, "iteration": 1, "prompt_tokens": 1238, "completion_tokens": 316, "duration": 21.157697200775146, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Calculate numbers that start with 1 or end with 1 but not both\n        starts_or_ends_with_1 = 2 * (10 ** (n - 1)) - 2 * (9 ** (n - 1))\n        # Calculate numbers that both start and end with 1\n        starts_and_ends_with_1 = 10 ** (n - 2)\n        return starts_or_ends_with_1 + starts_and_ends_with_1", "is_solved": false, "iteration": 1, "prompt_tokens": 1000, "completion_tokens": 342, "duration": 24.484670639038086, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1831, "completion_tokens": 191, "duration": 16.358976364135742, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1197, "completion_tokens": 162, "duration": 15.17755389213562, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correctly count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1274, "completion_tokens": 249, "duration": 20.33804202079773, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [2, 4, 6, 8]\n    return [digit for digit in even_digits if min(a, b) <= digit <= max(a, b)]", "is_solved": true, "iteration": 1, "prompt_tokens": 1209, "completion_tokens": 254, "duration": 20.128218173980713, "task_id": "HumanEval/163", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1700, "completion_tokens": 380, "duration": 24.28205895423889, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Check if either string can be the starting string\n    for start, end in [(str1, str2), (str2, str1)]:\n        balance = 0\n        for char in start + end:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If balance is negative, parentheses are not balanced\n            if balance < 0:\n                break\n        # If the loop completes with a non-negative balance, check if it's zero\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1692, "completion_tokens": 407, "duration": 24.043715238571167, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:  # Changed from checking in extended_a to a to accurately match the rotation in original string\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1186, "completion_tokens": 265, "duration": 21.7918541431427, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1535, "completion_tokens": 319, "duration": 20.346206188201904, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)), key=lambda x: (len(set(x)), x))", "is_solved": false, "iteration": 1, "prompt_tokens": 1321, "completion_tokens": 153, "duration": 16.810900688171387, "task_id": "HumanEval/158", "result": "failed: t1", "passed": false}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    # Create a dictionary to store the cell value as key and its coordinates as value\n    value_to_coords = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    \n    # Sort the dictionary by key to easily find the minimum value and its coordinates\n    sorted_values = sorted(value_to_coords.items())\n    \n    # Start from the minimum value\n    start_value, (start_x, start_y) = sorted_values[0]\n    \n    # Initialize the path with the start value\n    path = [start_value]\n    \n    # Since the path has to be of length k, we repeat the pattern found in the minimum values\n    # and their immediate neighbors until we reach the length k\n    for _ in range(1, k):\n        if len(path) % 2 == 0:  # If the length of the path is even, append the start value again\n            path.append(start_value)\n        else:  # If the length of the path is odd, find the next minimum neighbor and append it\n            min_neighbor_value = float('inf')\n            for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:  # Check all 4 directions\n                nx, ny = start_x + dx, start_y + dy\n                if 0 <= nx < N and 0 <= ny < N:  # Ensure the neighbor is within the grid\n                    neighbor_value = grid[nx][ny]\n                    min_neighbor_value = min(min_neighbor_value, neighbor_value)\n            path.append(min_neighbor_value)\n    \n    return path", "is_solved": true, "iteration": 1, "prompt_tokens": 3394, "completion_tokens": 775, "duration": 51.3856303691864, "task_id": "HumanEval/129", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1716, "completion_tokens": 144, "duration": 12.317605972290039, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested = True\n            else:\n                return False\n    return nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1614, "completion_tokens": 367, "duration": 30.856770515441895, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1487, "completion_tokens": 160, "duration": 14.834755659103394, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2173, "completion_tokens": 353, "duration": 23.80573010444641, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1084, "completion_tokens": 196, "duration": 11.388429403305054, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1319, "completion_tokens": 293, "duration": 17.979820013046265, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count = 0\n            while a % i == 0:\n                a //= i\n                count += 1\n            prime_factors += count\n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1358, "completion_tokens": 399, "duration": 22.93881344795227, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        starts_with_1 = 1 * 10**(n-1)\n        ends_with_1 = 9 * 10**(n-2)\n        both = 1 * 10**(n-2)\n        return starts_with_1 + ends_with_1 - both", "is_solved": true, "iteration": 1, "prompt_tokens": 994, "completion_tokens": 298, "duration": 19.842761993408203, "task_id": "HumanEval/83", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Convert the number to positive before splitting into digits\n            return int(str(num)[0]) + sum(int(digit) for digit in str(num)[1:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1454, "completion_tokens": 261, "duration": 20.341960430145264, "task_id": "HumanEval/108", "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shifted_vowels = 'cgkmoqsuwyCGKMOQSUWY'\n        return shifted_vowels[vowels.index(vowel)]\n    \n    encoded_message = ''\n    for char in message:\n        if char in 'aeiouAEIOU':\n            encoded_message += shift_vowel(char)\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": false, "iteration": 1, "prompt_tokens": 1248, "completion_tokens": 313, "duration": 18.028644800186157, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1200, "completion_tokens": 166, "duration": 12.11586618423462, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1818, "completion_tokens": 178, "duration": 15.302457332611084, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique or (unique_count == max_unique and word < result):\n            max_unique = unique_count\n            result = word\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 1317, "completion_tokens": 181, "duration": 16.57102370262146, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correct calculation for counting lowercase odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1287, "completion_tokens": 262, "duration": 21.06534171104431, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1542, "completion_tokens": 311, "duration": 19.024272203445435, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1697, "completion_tokens": 126, "duration": 12.872822284698486, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1733, "completion_tokens": 413, "duration": 31.445666313171387, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order, excluding the boundary values.\n    \"\"\"\n    return [i for i in range(min(a, b) + 1, max(a, b)) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 1246, "completion_tokens": 288, "duration": 20.55260992050171, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Check if the first string can be a valid start or the second string can be a valid end\n    valid_start = str1.count(')') <= str1.count('(')\n    valid_end = str2.count('(') <= str2.count(')')\n    # Check overall balance\n    overall_balance = (str1.count('(') + str2.count('(')) == (str1.count(')') + str2.count(')'))\n    \n    # If overall balance is not zero, it's impossible to form a good string\n    if not overall_balance:\n        return 'No'\n    \n    # If both strings are valid starts or ends, check if concatenating in any order makes a good string\n    if (valid_start and valid_end) or (str1.count('(') >= str2.count(')') and str2.count('(') >= str1.count(')')):\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": false, "iteration": 1, "prompt_tokens": 1696, "completion_tokens": 479, "duration": 29.075769186019897, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    # Check if b is a substring of the extended_a without rotation\n    if b in extended_a:\n        return True\n    # Check for rotations only if b is not directly a substring\n    for i in range(1, len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 1228, "completion_tokens": 332, "duration": 22.08420991897583, "task_id": "HumanEval/154", "result": "failed: test #0", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def custom_sort(x):\n        return (sum(int(digit) for digit in str(abs(x))), nums.index(x))\n    \n    return sorted(nums, key=custom_sort)", "is_solved": false, "iteration": 1, "prompt_tokens": 1481, "completion_tokens": 164, "duration": 15.008018732070923, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested = True\n            else:\n                return False  # Unmatched closing bracket.\n    return nested and not stack  # True if nested and all brackets are matched.", "is_solved": false, "iteration": 1, "prompt_tokens": 1606, "completion_tokens": 497, "duration": 34.552125692367554, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]  # Correct initial sequence\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)  # Ensure integer division\n        else:\n            # Correct calculation for odd indices based on the given formula\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2178, "completion_tokens": 365, "duration": 22.687294721603394, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    min_val = min(min(row) for row in grid)  # Find the minimum value in the grid\n\n    # Find the position of the minimum value (first occurrence)\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == min_val:\n                min_pos = (i, j)\n                break\n\n    # Construct the path\n    path = [min_val] * k\n    return path", "is_solved": false, "iteration": 1, "prompt_tokens": 3390, "completion_tokens": 518, "duration": 30.229580879211426, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1098, "completion_tokens": 202, "duration": 17.069416284561157, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1307, "completion_tokens": 281, "duration": 18.47609519958496, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n    return len(prime_factors) == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1349, "completion_tokens": 372, "duration": 24.62760353088379, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correct handling of negative numbers by excluding the '-' sign before summing digits\n            return sum(int(digit) for digit in str(num)[1:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1463, "completion_tokens": 268, "duration": 19.19973611831665, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    def shift_vowel(v):\n        return chr(((ord(v.lower()) - 97 + 2) % 26) + 97) if v.islower() else chr(((ord(v.upper()) - 65 + 2) % 26) + 65)\n    \n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for c in message:\n        if c in vowels:\n            encoded_message += shift_vowel(c)\n        else:\n            encoded_message += c.swapcase()\n    \n    return encoded_message", "is_solved": false, "iteration": 1, "prompt_tokens": 1245, "completion_tokens": 310, "duration": 20.71795654296875, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 10  # Correcting base case to include all single-digit numbers\n    else:\n        # Calculate numbers that start or end with 1 but not both,\n        # plus numbers that both start and end with 1.\n        return 2 * (10 ** (n - 1)) - (8 ** (n - 1)) + (10 ** (n - 2))", "is_solved": false, "iteration": 1, "prompt_tokens": 1012, "completion_tokens": 331, "duration": 22.872873544692993, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1194, "completion_tokens": 159, "duration": 13.801239252090454, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1808, "completion_tokens": 168, "duration": 15.353740930557251, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:  # Changed from checking in extended_a to checking in a\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1192, "completion_tokens": 265, "duration": 19.083970069885254, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correcting the condition to count lowercase letters at odd positions\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1287, "completion_tokens": 265, "duration": 22.7464919090271, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1531, "completion_tokens": 300, "duration": 19.817005157470703, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1703, "completion_tokens": 383, "duration": 27.732773542404175, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1709, "completion_tokens": 137, "duration": 11.973938941955566, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1315, "completion_tokens": 136, "duration": 14.245311737060547, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Simulate both possible concatenations to check for balance\n    for option in [(str1 + str2), (str2 + str1)]:\n        balance = 0\n        for char in option:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If balance goes negative at any point, parentheses are not balanced\n            if balance < 0:\n                break\n        # If balance is 0 after processing the entire string, it's a valid configuration\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1698, "completion_tokens": 414, "duration": 34.02824831008911, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1514, "completion_tokens": 200, "duration": 17.87604260444641, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [0, 2, 4, 6, 8]\n    result = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if any(digit in str(num) for digit in even_digits):\n            result.append(num)\n    return result", "is_solved": false, "iteration": 1, "prompt_tokens": 1201, "completion_tokens": 273, "duration": 21.10301947593689, "task_id": "HumanEval/163", "result": "failed: 'in <string>' requires string as left operand, not int", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    found_nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                found_nested = True\n            else:\n                return False\n    return found_nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1593, "completion_tokens": 349, "duration": 26.922340631484985, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2174, "completion_tokens": 336, "duration": 24.53751230239868, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    \n    N = len(grid)\n    pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    heap = [(0, 1, pos[1], [1])]  # (cost, steps, position, path)\n    \n    while heap:\n        cost, steps, (x, y), path = heappop(heap)\n        if steps == k:\n            return path\n        \n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                next_value = grid[nx][ny]\n                new_cost = cost + next_value\n                new_steps = steps + 1\n                new_path = path + [next_value]\n                heappush(heap, (new_cost, new_steps, (nx, ny), new_path))\n                \n                # If the path length is not enough, also consider moving back to the starting position\n                if steps < k - 1 and (nx, ny) != pos[1]:\n                    heappush(heap, (new_cost, new_steps, pos[1], new_path + [1]))", "is_solved": false, "iteration": 1, "prompt_tokens": 3354, "completion_tokens": 667, "duration": 41.08650207519531, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1094, "completion_tokens": 206, "duration": 15.262258291244507, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1314, "completion_tokens": 288, "duration": 21.84687066078186, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n\n    return len(prime_factors) == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1351, "completion_tokens": 385, "duration": 30.945923566818237, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1471, "completion_tokens": 235, "duration": 31.830499410629272, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    def shift_vowel(c):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if c in vowels:\n            is_upper = c.isupper()\n            index = vowels.index(c.lower())\n            shifted_vowel = vowels[(index + shift) % len(vowels)]\n            return shifted_vowel.upper() if is_upper else shifted_vowel\n        else:\n            return c.swapcase()\n    \n    return ''.join(shift_vowel(c) for c in message)", "is_solved": false, "iteration": 1, "prompt_tokens": 1255, "completion_tokens": 309, "duration": 24.810043334960938, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        # Count of numbers starting with 1: 10^(n-1)\n        # Count of numbers ending with 1: 10^(n-1)\n        # Subtract the overlap (numbers that both start and end with 1): 10^(n-2)\n        return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "is_solved": false, "iteration": 1, "prompt_tokens": 1008, "completion_tokens": 334, "duration": 22.174397230148315, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1821, "completion_tokens": 181, "duration": 15.62857961654663, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Correctly count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1289, "completion_tokens": 264, "duration": 20.083746194839478, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1542, "completion_tokens": 326, "duration": 20.670987367630005, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1718, "completion_tokens": 398, "duration": 25.539940118789673, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    return any(b in extended_a[i:i+len(b)] for i in range(len(a)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1174, "completion_tokens": 218, "duration": 16.465014219284058, "task_id": "HumanEval/154", "result": "failed: test #3", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) <= 99)", "is_solved": false, "iteration": 1, "prompt_tokens": 1187, "completion_tokens": 154, "duration": 13.218178987503052, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1702, "completion_tokens": 131, "duration": 11.731866836547852, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b (exclusive), in ascending order.\n    \"\"\"\n    return [i for i in range(min(a + 1, b), max(a, b)) if i % 2 == 0]", "is_solved": false, "iteration": 1, "prompt_tokens": 1242, "completion_tokens": 280, "duration": 20.408044815063477, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Count the open and close parentheses in both strings\n    open1, close1 = str1.count('('), str1.count(')')\n    open2, close2 = str2.count('('), str2.count(')')\n\n    # Check if any string has more closing parentheses than opening, which cannot be balanced\n    if close1 > open1 or close2 > open2:\n        return 'No'\n    # If the first string has more opening parentheses, ensure the second can close them\n    if open1 - close1 > close2 - open2:\n        return 'No'\n    # If the second string has more opening parentheses, ensure the first can close them\n    if open2 - close2 > close1 - open1:\n        return 'No'\n    # If none of the above conditions are met, the strings can be balanced\n    return 'Yes'", "is_solved": false, "iteration": 1, "prompt_tokens": 1688, "completion_tokens": 458, "duration": 28.55158758163452, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words, key=lambda word: (len(set(word)), word)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1342, "completion_tokens": 163, "duration": 15.31602430343628, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1526, "completion_tokens": 199, "duration": 16.166098594665527, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    # Create a priority queue and add all possible starting positions with their values\n    heap = [(grid[x][y], x, y, [grid[x][y]]) for x in range(N) for y in range(N)]\n    visited = set()\n\n    while heap:\n        _, x, y, path = heappop(heap)\n        if (x, y, len(path)) in visited:  # Skip if already visited with the same path length\n            continue\n        visited.add((x, y, len(path)))\n\n        if len(path) == k:  # If path length equals k, return the path\n            return path\n\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:  # Check boundaries\n                newPath = path[:]  # Create a copy of the current path\n                # Instead of adding new values directly, check if we need to loop\n                if len(newPath) < k:\n                    newPath.append(grid[nx][ny])  # Append new cell's value\n                    heappush(heap, (newPath[-1], nx, ny, newPath))\n                else:\n                    # If the path already has k-1 elements, loop by replacing the last element\n                    # This maintains the path length but explores new cells\n                    newPath[-1] = grid[nx][ny]\n                    heappush(heap, (newPath[-1], nx, ny, newPath))", "is_solved": false, "iteration": 1, "prompt_tokens": 3359, "completion_tokens": 745, "duration": 40.8185760974884, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested = True\n            else:\n                return False\n    return nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1606, "completion_tokens": 359, "duration": 27.477726459503174, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    # Initialize the first three values of the sequence\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    \n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)  # Ensure integer division\n        else:\n            # Correct calculation for odd indices\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2180, "completion_tokens": 386, "duration": 22.519680976867676, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1091, "completion_tokens": 203, "duration": 14.952145338058472, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1312, "completion_tokens": 286, "duration": 16.7127845287323, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a+1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n    return len(prime_factors) == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1363, "completion_tokens": 383, "duration": 23.561530590057373, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1451, "completion_tokens": 215, "duration": 17.12381649017334, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join(vowels[c] if c in vowels else c for c in message)", "is_solved": false, "iteration": 1, "prompt_tokens": 1206, "completion_tokens": 242, "duration": 16.290019512176514, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Numbers that start with 1: 10^(n-1)\n        # Numbers that end with 1: 10^(n-1)\n        # Overlap (numbers that start and end with 1): 10^(n-2)\n        # Total = Start with 1 + End with 1 - Overlap\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "is_solved": false, "iteration": 1, "prompt_tokens": 997, "completion_tokens": 336, "duration": 20.11225390434265, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word.strip() for word in txt.split(',')]\n    else:\n        # Correcting the condition to count odd-order letters correctly\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 != 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1279, "completion_tokens": 264, "duration": 18.754133939743042, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [2, 4, 6, 8]\n    return [digit for digit in even_digits if min(a, b) <= digit <= max(a, b)]", "is_solved": true, "iteration": 1, "prompt_tokens": 1228, "completion_tokens": 273, "duration": 20.299926042556763, "task_id": "HumanEval/163", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:  # Changed from checking in extended_a to checking in a\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1167, "completion_tokens": 240, "duration": 20.189242362976074, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1728, "completion_tokens": 408, "duration": 25.771480083465576, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1616, "completion_tokens": 385, "duration": 22.3923659324646, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1686, "completion_tokens": 115, "duration": 10.68903636932373, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr)[-k:])", "is_solved": false, "iteration": 1, "prompt_tokens": 1824, "completion_tokens": 181, "duration": 22.757291555404663, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def add_elements(arr, k):\n    return sum(arr[:k])", "is_solved": false, "iteration": 1, "prompt_tokens": 1206, "completion_tokens": 158, "duration": 13.236241340637207, "task_id": "HumanEval/122", "result": "failed: ", "passed": false}
{"generated_code": "def find_max(words):\n    return max(sorted(words), key=lambda word: (len(set(word)), word), default=\"\")", "is_solved": false, "iteration": 1, "prompt_tokens": 1340, "completion_tokens": 163, "duration": 15.420083284378052, "task_id": "HumanEval/158", "result": "failed: t2", "passed": false}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    heap = []\n\n    # Push initial positions in heap\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    while heap:\n        _, x, y, path = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                # Push newPath into heap without adding cost to avoid unnecessary comparisons\n                heappush(heap, (newPath[-1], nx, ny, newPath))", "is_solved": false, "iteration": 1, "prompt_tokens": 3354, "completion_tokens": 586, "duration": 38.46008777618408, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Calculate net balance of parentheses for both strings\n    balance1 = str1.count('(') - str1.count(')')\n    balance2 = str2.count('(') - str2.count(')')\n\n    # If the total balance is not zero, it's impossible to form a good string\n    if balance1 + balance2 != 0:\n        return 'No'\n\n    # If both strings have a non-negative balance or both have a non-positive balance, \n    # it's impossible to form a good string by concatenating them in any order\n    if (balance1 >= 0 and balance2 >= 0) or (balance1 <= 0 and balance2 <= 0):\n        # Special case: if both strings are balanced on their own, concatenation is possible\n        if balance1 == 0 and balance2 == 0:\n            return 'Yes'\n        return 'No'\n    \n    # Ensure str1 has the negative balance and str2 has the positive balance for easier processing\n    if balance1 > 0:\n        str1, str2 = str2, str1\n        balance1, balance2 = balance2, balance1\n\n    # Check if the string with negative balance does not start with more closing parentheses than\n    # the opening parentheses in the other string before it gets balanced out\n    open_needed = 0  # Opening parentheses needed to balance the current count of closing ones\n    for char in str1:\n        if char == '(':\n            open_needed -= 1  # One less opening parenthesis is needed\n        else:  # char == ')'\n            open_needed += 1  # Need an opening parenthesis to balance this closing one\n        if open_needed > -balance1:  # If more opening parentheses are needed than available in str1\n            return 'No'\n\n    return 'Yes'", "is_solved": false, "iteration": 1, "prompt_tokens": 1707, "completion_tokens": 679, "duration": 39.46059441566467, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def custom_key(x):\n        return (sum(int(digit) for digit in str(abs(x))), nums.index(x) if x >= 0 else -nums.index(x))\n    return sorted(nums, key=custom_key)", "is_solved": false, "iteration": 1, "prompt_tokens": 1524, "completion_tokens": 217, "duration": 17.379000186920166, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    \"\"\"Generate the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    trib = [1, 3, 2]\n    for i in range(3, n + 1):\n        next_value = trib[i - 1] + trib[i - 2] + trib[i - 3]\n        trib.append(next_value)\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2166, "completion_tokens": 344, "duration": 24.224279642105103, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    stack = []\n    nested_found = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested_found = True\n            else:\n                return False  # Early return if there's an unmatched closing bracket\n    return nested_found and not stack  # Ensure all brackets are matched and a nested pair was found", "is_solved": false, "iteration": 1, "prompt_tokens": 1592, "completion_tokens": 424, "duration": 31.550586462020874, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1116, "completion_tokens": 228, "duration": 14.456496477127075, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Correctly handle negative numbers by ignoring the '-' sign for sum calculation\n            return -int(str(num)[1]) + sum(int(digit) for digit in str(num)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 1444, "completion_tokens": 256, "duration": 18.68235445022583, "task_id": "HumanEval/108", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1319, "completion_tokens": 293, "duration": 18.17218279838562, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n\n    return len(prime_factors) == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1367, "completion_tokens": 401, "duration": 22.652753353118896, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        # Shifts the vowel 2 places ahead in the alphabet, considering case\n        vowels_lower = 'aeiou'\n        vowels_upper = 'AEIOU'\n        if vowel in vowels_lower:\n            return vowels_lower[(vowels_lower.index(vowel) + 2) % len(vowels_lower)]\n        else:\n            return vowels_upper[(vowels_upper.index(vowel) + 2) % len(vowels_upper)]\n\n    result = []\n    for char in message:\n        if char.lower() in 'aeiou':\n            result.append(shift_vowel(char))\n        else:\n            result.append(char.swapcase())\n    return ''.join(result)", "is_solved": false, "iteration": 1, "prompt_tokens": 1221, "completion_tokens": 318, "duration": 20.356820344924927, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Calculating separately the numbers that start with 1 and those that end with 1\n        start_with_1 = 10 ** (n - 1)\n        end_with_1 = 10 ** (n - 1)\n        # Subtracting the overlap (numbers that both start and end with 1)\n        overlap = 10 ** (n - 2)\n        return start_with_1 + end_with_1 - overlap", "is_solved": false, "iteration": 1, "prompt_tokens": 1018, "completion_tokens": 356, "duration": 23.626461505889893, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "is_solved": true, "iteration": 1, "prompt_tokens": 1204, "completion_tokens": 170, "duration": 13.85598373413086, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = [0, 2, 4, 6, 8]\n    return [digit for digit in even_digits if min(a, b) <= digit <= max(a, b)]", "is_solved": true, "iteration": 1, "prompt_tokens": 1200, "completion_tokens": 248, "duration": 19.266950130462646, "task_id": "HumanEval/163", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return [word.strip() for word in txt.split(',')]\n    else:\n        # Correcting the logic to count lower-case odd order letters\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "is_solved": true, "iteration": 1, "prompt_tokens": 1312, "completion_tokens": 298, "duration": 20.43665647506714, "task_id": "HumanEval/125", "result": "passed", "passed": true}
{"generated_code": "def find_max(words):\n    return min([word for word in words if len(set(word)) == max(len(set(word)) for word in words)], default=\"\", key=lambda x: (len(set(x)), x))", "is_solved": true, "iteration": 1, "prompt_tokens": 1353, "completion_tokens": 195, "duration": 18.87195062637329, "task_id": "HumanEval/158", "result": "passed", "passed": true}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:  # Changed from checking in extended_a to just a\n            return True\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 1190, "completion_tokens": 262, "duration": 19.58276343345642, "task_id": "HumanEval/154", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1529, "completion_tokens": 313, "duration": 19.1516592502594, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1700, "completion_tokens": 380, "duration": 25.117908000946045, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr)[-k:]", "is_solved": false, "iteration": 1, "prompt_tokens": 1813, "completion_tokens": 169, "duration": 13.672644138336182, "task_id": "HumanEval/120", "result": "failed: ", "passed": false}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return -(-total_water_units // capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1690, "completion_tokens": 115, "duration": 12.888538599014282, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Calculate net parentheses count for both strings\n    net1 = str1.count('(') - str1.count(')')\n    net2 = str2.count('(') - str2.count(')')\n    \n    # If the total net count of parentheses is not zero, it's not possible to balance\n    if net1 + net2 != 0:\n        return 'No'\n    \n    # If both strings have more closing parentheses initially, it's impossible to balance\n    if net1 < 0 and net2 < 0:\n        return 'No'\n    \n    # If the first string has more closing parentheses, and the second cannot balance it, it's impossible\n    if net1 < 0 and net1 + net2 < 0:\n        return 'No'\n    \n    # If the second string has more closing parentheses, and the first cannot balance it, it's impossible\n    if net2 < 0 and net1 + net2 < 0:\n        return 'No'\n    \n    return 'Yes'", "is_solved": false, "iteration": 1, "prompt_tokens": 1681, "completion_tokens": 481, "duration": 28.66294574737549, "task_id": "HumanEval/119", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1542, "completion_tokens": 228, "duration": 17.848952293395996, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    def neighbors(x, y):\n        for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                yield nx, ny\n\n    def find_min_path(start_x, start_y):\n        heap = [(grid[start_x][start_y], [(start_x, start_y)])]  # cost, path\n        seen = {(start_x, start_y): grid[start_x][start_y]}\n\n        while heap:\n            cost, path = heappop(heap)\n            if len(path) == k:\n                return [grid[x][y] for x, y in path]\n            for nx, ny in neighbors(path[-1][0], path[-1][1]):\n                new_cost = cost + grid[nx][ny]\n                new_path = path + [(nx, ny)]\n                if (nx, ny) not in seen or new_cost < seen[(nx, ny)]:\n                    seen[(nx, ny)] = new_cost\n                    heappush(heap, (new_cost, new_path))\n\n    # Find the starting point with the smallest value\n    min_val = float('inf')\n    start_x, start_y = 0, 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                start_x, start_y = i, j\n\n    return find_min_path(start_x, start_y)", "is_solved": false, "iteration": 1, "prompt_tokens": 3388, "completion_tokens": 777, "duration": 42.28350019454956, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested = True\n            else:\n                return False\n    return nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1598, "completion_tokens": 403, "duration": 33.42408537864685, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]  # Correct initial sequence based on given formula\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)  # Use integer division for even indices\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])  # Correct formula for odd indices\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2173, "completion_tokens": 362, "duration": 23.869421243667603, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.0209877490997314, "task_id": "HumanEval/0", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 118, "duration": 8.902730226516724, "task_id": "HumanEval/1", "result": "passed", "passed": true}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.7102606296539307, "task_id": "HumanEval/2", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.8415157794952393, "task_id": "HumanEval/3", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.99957537651062, "task_id": "HumanEval/4", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.371600151062012, "task_id": "HumanEval/5", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 103, "duration": 5.678426265716553, "task_id": "HumanEval/6", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": true, "iteration": 0, "prompt_tokens": 143, "completion_tokens": 104, "duration": 8.238842725753784, "task_id": "HumanEval/7", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.69270133972168, "task_id": "HumanEval/8", "result": "passed", "passed": true}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 4.749827861785889, "task_id": "HumanEval/10", "result": "passed", "passed": true}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.15260910987854, "task_id": "HumanEval/11", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 2.8544228076934814, "task_id": "HumanEval/12", "result": "passed", "passed": true}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.4595766067504883, "task_id": "HumanEval/13", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 73, "duration": 3.6329903602600098, "task_id": "HumanEval/14", "result": "passed", "passed": true}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.760759115219116, "task_id": "HumanEval/15", "result": "passed", "passed": true}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.3197572231292725, "task_id": "HumanEval/16", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": true, "iteration": 0, "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.54159688949585, "task_id": "HumanEval/17", "result": "passed", "passed": true}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.7304723262786865, "task_id": "HumanEval/18", "result": "passed", "passed": true}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 106, "duration": 5.555402755737305, "task_id": "HumanEval/19", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 117, "duration": 5.754441499710083, "task_id": "HumanEval/20", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 104, "duration": 9.0089693069458, "task_id": "HumanEval/21", "result": "passed", "passed": true}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.303599834442139, "task_id": "HumanEval/22", "result": "passed", "passed": true}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.649064302444458, "task_id": "HumanEval/23", "result": "passed", "passed": true}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.682873249053955, "task_id": "HumanEval/24", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.361755609512329, "task_id": "HumanEval/25", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 95, "duration": 7.0386962890625, "task_id": "HumanEval/26", "result": "passed", "passed": true}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.9268834590911865, "task_id": "HumanEval/27", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 3.5149357318878174, "task_id": "HumanEval/28", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 60, "duration": 3.807779312133789, "task_id": "HumanEval/29", "result": "passed", "passed": true}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 35, "duration": 2.8653414249420166, "task_id": "HumanEval/30", "result": "passed", "passed": true}
{"generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 117, "duration": 5.848691701889038, "task_id": "HumanEval/31", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    def func(x):\n        return poly(xs, x)\n    \n    initial_guess = 0.0\n    sol = root(func, initial_guess)\n    if sol.success:\n        return sol.x[0]\n    else:\n        raise ValueError(\"Root finding did not converge\")", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 228, "duration": 10.703521966934204, "task_id": "HumanEval/32", "result": "failed: 'NoneType' object is not callable", "passed": false}
{"generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_3 = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_3_sorted = sorted(divisible_by_3)\n    # Replace elements in the original list with sorted ones at the correct positions\n    for i, value in enumerate(divisible_by_3_sorted):\n        l[i * 3] = value\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 116, "duration": 7.125142335891724, "task_id": "HumanEval/33", "result": "passed", "passed": true}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.729191780090332, "task_id": "HumanEval/34", "result": "passed", "passed": true}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 8.01661229133606, "task_id": "HumanEval/35", "result": "passed", "passed": true}
{"generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 71, "duration": 4.339508295059204, "task_id": "HumanEval/37", "result": "passed", "passed": true}
{"generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 137, "duration": 9.78336787223816, "task_id": "HumanEval/38", "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.8159308433532715, "task_id": "HumanEval/39", "result": "passed", "passed": true}
{"generated_code": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    l.sort()\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 108, "duration": 9.359532356262207, "task_id": "HumanEval/40", "result": "passed", "passed": true}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars driving left to right and the same number driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 57, "duration": 4.631146669387817, "task_id": "HumanEval/41", "result": "passed", "passed": true}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.376549959182739, "task_id": "HumanEval/42", "result": "passed", "passed": true}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.8720717430114746, "task_id": "HumanEval/43", "result": "passed", "passed": true}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 61, "duration": 4.068792104721069, "task_id": "HumanEval/44", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.3317267894744873, "task_id": "HumanEval/45", "result": "passed", "passed": true}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.260672330856323, "task_id": "HumanEval/46", "result": "passed", "passed": true}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": true, "iteration": 0, "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.067075967788696, "task_id": "HumanEval/47", "result": "passed", "passed": true}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 36, "duration": 2.997685432434082, "task_id": "HumanEval/48", "result": "passed", "passed": true}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.229511022567749, "task_id": "HumanEval/49", "result": "passed", "passed": true}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.1155734062194824, "task_id": "HumanEval/50", "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 3.8341293334960938, "task_id": "HumanEval/51", "result": "passed", "passed": true}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.3202648162841797, "task_id": "HumanEval/52", "result": "passed", "passed": true}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.088814735412598, "task_id": "HumanEval/53", "result": "passed", "passed": true}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.755746603012085, "task_id": "HumanEval/54", "result": "passed", "passed": true}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.1637444496154785, "task_id": "HumanEval/55", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.743376731872559, "task_id": "HumanEval/56", "result": "passed", "passed": true}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 3.8900606632232666, "task_id": "HumanEval/36", "result": "passed", "passed": true}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n    max_rolling = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_rolling.append(current_max)\n    return max_rolling", "is_solved": true, "iteration": 1, "prompt_tokens": 1090, "completion_tokens": 202, "duration": 12.046175718307495, "task_id": "HumanEval/9", "result": "passed", "passed": true}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.09354829788208, "task_id": "HumanEval/57", "result": "passed", "passed": true}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.0942766666412354, "task_id": "HumanEval/58", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n    \n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    \n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 174, "duration": 9.62759804725647, "task_id": "HumanEval/59", "result": "passed", "passed": true}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 46, "duration": 3.125488042831421, "task_id": "HumanEval/60", "result": "passed", "passed": true}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.898189544677734, "task_id": "HumanEval/61", "result": "passed", "passed": true}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.6573143005371094, "task_id": "HumanEval/62", "result": "passed", "passed": true}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 108, "duration": 7.011068105697632, "task_id": "HumanEval/63", "result": "passed", "passed": true}
{"generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.908478260040283, "task_id": "HumanEval/64", "result": "passed", "passed": true}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift > len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 59, "duration": 5.130709886550903, "task_id": "HumanEval/65", "result": "passed", "passed": true}
{"generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.162553071975708, "task_id": "HumanEval/66", "result": "passed", "passed": true}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.0522823333740234, "task_id": "HumanEval/67", "result": "passed", "passed": true}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 3.5284690856933594, "task_id": "HumanEval/68", "result": "passed", "passed": true}
{"generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    max_val = -1\n    for key, value in count_dict.items():\n        if key <= value and key > max_val:\n            max_val = key\n\n    return max_val", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 86, "duration": 6.029757261276245, "task_id": "HumanEval/69", "result": "passed", "passed": true}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.173398017883301, "task_id": "HumanEval/70", "result": "passed", "passed": true}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    \n    return round(area, 2)", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 157, "duration": 9.120259046554565, "task_id": "HumanEval/71", "result": "passed", "passed": true}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5521044731140137, "task_id": "HumanEval/72", "result": "passed", "passed": true}
{"generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 67, "duration": 8.294924974441528, "task_id": "HumanEval/73", "result": "passed", "passed": true}
{"generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.180537700653076, "task_id": "HumanEval/74", "result": "passed", "passed": true}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 3.2270283699035645, "task_id": "HumanEval/76", "result": "passed", "passed": true}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n        return root**3 == a\n    else:\n        root = round(abs(a) ** (1/3))\n        return -root**3 == a", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 60, "duration": 3.163822889328003, "task_id": "HumanEval/77", "result": "passed", "passed": true}
{"generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 70, "duration": 4.296364784240723, "task_id": "HumanEval/78", "result": "passed", "passed": true}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.8562440872192383, "task_id": "HumanEval/79", "result": "passed", "passed": true}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 80, "duration": 9.004127025604248, "task_id": "HumanEval/80", "result": "passed", "passed": true}
{"generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0: \n            letter_grades.append('A+')\n        elif g > 3.7: \n            letter_grades.append('A')\n        elif g > 3.3: \n            letter_grades.append('A-')\n        elif g > 3.0: \n            letter_grades.append('B+')\n        elif g > 2.7: \n            letter_grades.append('B')\n        elif g > 2.3: \n            letter_grades.append('B-')\n        elif g > 2.0: \n            letter_grades.append('C+')\n        elif g > 1.7: \n            letter_grades.append('C')\n        elif g > 1.3: \n            letter_grades.append('C-')\n        elif g > 1.0: \n            letter_grades.append('D+')\n        elif g > 0.7: \n            letter_grades.append('D')\n        elif g > 0.0: \n            letter_grades.append('D-')\n        else: \n            letter_grades.append('E')\n    return letter_grades", "is_solved": true, "iteration": 0, "prompt_tokens": 320, "completion_tokens": 265, "duration": 11.700199842453003, "task_id": "HumanEval/81", "result": "passed", "passed": true}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 3.6344518661499023, "task_id": "HumanEval/82", "result": "passed", "passed": true}
{"generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 51, "duration": 3.8922150135040283, "task_id": "HumanEval/84", "result": "passed", "passed": true}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.75032114982605, "task_id": "HumanEval/85", "result": "passed", "passed": true}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.151890754699707, "task_id": "HumanEval/86", "result": "passed", "passed": true}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list `lst` and an integer `x`, find all occurrences of `x` in `lst`,\n    and return a list of tuples representing their coordinates in the format (row, column).\n    The coordinates are sorted first by row in ascending order, then by column in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 136, "duration": 7.588098526000977, "task_id": "HumanEval/87", "result": "passed", "passed": true}
{"generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 61, "duration": 4.852056980133057, "task_id": "HumanEval/88", "result": "passed", "passed": true}
{"generated_code": "def encrypt(s):\n    \"\"\"Encrypts the input string by shifting letters down by 4 places.\"\"\"\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            encrypted += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 118, "duration": 6.16865086555481, "task_id": "HumanEval/89", "result": "passed", "passed": true}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list. Returns None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 70, "duration": 5.281777381896973, "task_id": "HumanEval/90", "result": "passed", "passed": true}
{"generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.67219877243042, "task_id": "HumanEval/92", "result": "passed", "passed": true}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 0, "prompt_tokens": 336, "completion_tokens": 109, "duration": 6.138820648193359, "task_id": "HumanEval/94", "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    return lower_case or upper_case", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 74, "duration": 5.66085147857666, "task_id": "HumanEval/95", "result": "passed", "passed": true}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.624057769775391, "task_id": "HumanEval/96", "result": "passed", "passed": true}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.7824454307556152, "task_id": "HumanEval/97", "result": "passed", "passed": true}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 103, "duration": 5.227121353149414, "task_id": "HumanEval/98", "result": "passed", "passed": true}
{"generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 92, "duration": 6.353636026382446, "task_id": "HumanEval/99", "result": "passed", "passed": true}
{"generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.4358692169189453, "task_id": "HumanEval/100", "result": "passed", "passed": true}
{"generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 50, "duration": 6.107905387878418, "task_id": "HumanEval/101", "result": "passed", "passed": true}
{"generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the biggest even integer number that is in the range [x, y] inclusive. If there's no such number, then the function should return -1.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 89, "duration": 5.985353708267212, "task_id": "HumanEval/102", "result": "passed", "passed": true}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.151994228363037, "task_id": "HumanEval/103", "result": "passed", "passed": true}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 37, "duration": 5.314167737960815, "task_id": "HumanEval/104", "result": "passed", "passed": true}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 118, "duration": 7.696850776672363, "task_id": "HumanEval/105", "result": "passed", "passed": true}
{"generated_code": "def f(n):\n    \"\"\" Returns a list of size n, with factorial values for even indexes and sum of numbers for odd indexes. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n        \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 127, "duration": 11.082646608352661, "task_id": "HumanEval/106", "result": "passed", "passed": true}
{"generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 141, "duration": 9.035115480422974, "task_id": "HumanEval/107", "result": "passed", "passed": true}
{"generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.8650219440460205, "task_id": "HumanEval/109", "result": "passed", "passed": true}
{"generated_code": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines if it is possible to exchange elements between two lists to make the first list all even numbers.\n    \"\"\"\n    # Count the number of even numbers needed for lst1 and available in lst2\n    needed_evens = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if needed_evens <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 147, "duration": 12.99392294883728, "task_id": "HumanEval/110", "result": "passed", "passed": true}
{"generated_code": "def histogram(test):\n    if not test:\n        return {}\n    words = test.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values())\n    return {word: count for word, count in counts.items() if count == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 77, "duration": 6.195828199386597, "task_id": "HumanEval/111", "result": "passed", "passed": true}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 5.42903208732605, "task_id": "HumanEval/112", "result": "passed", "passed": true}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.297055006027222, "task_id": "HumanEval/113", "result": "passed", "passed": true}
{"generated_code": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n    \n    Parameters:\n    S (str): A string of words.\n    \n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    boredom_count = sum(sentence.startswith(\"I \") for sentence in sentences)\n    return boredom_count", "is_solved": true, "iteration": 1, "prompt_tokens": 1315, "completion_tokens": 271, "duration": 19.628503799438477, "task_id": "HumanEval/91", "result": "passed", "passed": true}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum(int(digit) for digit in str(num))\n        else:\n            # Properly handle negative numbers by ignoring the '-' sign for sum calculation\n            return sum(int(digit) for digit in str(num)[1:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1460, "completion_tokens": 264, "duration": 20.19960045814514, "task_id": "HumanEval/108", "result": "failed: ", "passed": false}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count = 0\n            while a % i == 0:\n                a = a // i\n                count += 1\n            prime_factors += count\n            if prime_factors > 3:  # If more than 3 prime factors, return False early\n                return False\n    return prime_factors == 3", "is_solved": true, "iteration": 1, "prompt_tokens": 1398, "completion_tokens": 467, "duration": 54.595404863357544, "task_id": "HumanEval/75", "result": "passed", "passed": true}
{"generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        return vowels[(vowels.index(vowel) + 2) % len(vowels)]\n    \n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_char = shift_vowel(char)\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message", "is_solved": false, "iteration": 1, "prompt_tokens": 1279, "completion_tokens": 340, "duration": 20.80161428451538, "task_id": "HumanEval/93", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        # Numbers that start with 1: 10^(n-1)\n        # Numbers that end with 1: 10^(n-1)\n        # Numbers that start and end with 1: 10^(n-2)\n        # Total = Start with 1 + End with 1 - Start and end with 1\n        return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "is_solved": false, "iteration": 1, "prompt_tokens": 991, "completion_tokens": 331, "duration": 20.670481204986572, "task_id": "HumanEval/83", "result": "failed: ", "passed": false}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.806171894073486, "task_id": "HumanEval/114", "result": "passed", "passed": true}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation,\n    then by their decimal values if the number of ones is the same.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 220, "completion_tokens": 67, "duration": 6.418631076812744, "task_id": "HumanEval/116", "result": "passed", "passed": true}
{"generated_code": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants.\n    \"\"\"\n    def consonant_count(word):\n        return sum(1 for char in word.lower() if char in \"bcdfghjklmnpqrstvwxyz\")\n    \n    return [word for word in s.split() if consonant_count(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 97, "duration": 8.439436435699463, "task_id": "HumanEval/117", "result": "passed", "passed": true}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.6258039474487305, "task_id": "HumanEval/121", "result": "passed", "passed": true}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end, as it's always part of the sequence\n    return sorted(odd_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 281, "completion_tokens": 116, "duration": 8.040536403656006, "task_id": "HumanEval/123", "result": "passed", "passed": true}
{"generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if year, month, and day are digits\n    if not (year.isdigit() and month.isdigit() and day.isdigit()):\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.975306272506714, "task_id": "HumanEval/124", "result": "passed", "passed": true}
{"generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 56, "duration": 6.425717115402222, "task_id": "HumanEval/126", "result": "passed", "passed": true}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 77, "duration": 6.130433082580566, "task_id": "HumanEval/128", "result": "passed", "passed": true}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.227850675582886, "task_id": "HumanEval/131", "result": "passed", "passed": true}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 5.573691129684448, "task_id": "HumanEval/133", "result": "passed", "passed": true}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 70, "duration": 7.508548259735107, "task_id": "HumanEval/134", "result": "passed", "passed": true}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 153, "completion_tokens": 49, "duration": 6.526432991027832, "task_id": "HumanEval/135", "result": "passed", "passed": true}
{"generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 90, "duration": 8.789367914199829, "task_id": "HumanEval/136", "result": "passed", "passed": true}
{"generated_code": "def compare_one(a, b):\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 89, "duration": 8.596368312835693, "task_id": "HumanEval/137", "result": "passed", "passed": true}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For a number to be written as a sum of 4 even numbers, it must be even itself.\n    # Any even number greater than or equal to 8 can be represented as the sum\n    # of four even numbers (for example, 8 itself is 2+2+2+2, and for any even number\n    # greater than 8, we can adjust the sum by increasing the first addend).\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 185, "duration": 10.780973434448242, "task_id": "HumanEval/138", "result": "passed", "passed": true}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 69, "duration": 8.691449642181396, "task_id": "HumanEval/139", "result": "passed", "passed": true}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace 3 or more spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 107, "duration": 8.816003561019897, "task_id": "HumanEval/140", "result": "passed", "passed": true}
{"generated_code": "def file_name_check(file_name):\n    # Check if the file name has exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 171, "duration": 11.663620710372925, "task_id": "HumanEval/141", "result": "passed", "passed": true}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 46, "duration": 6.397021055221558, "task_id": "HumanEval/142", "result": "passed", "passed": true}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "is_solved": true, "iteration": 0, "prompt_tokens": 197, "completion_tokens": 81, "duration": 8.922763109207153, "task_id": "HumanEval/143", "result": "passed", "passed": true}
{"generated_code": "def simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    # Check if result is a whole number\n    return result_numerator % result_denominator == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 110, "duration": 9.045788049697876, "task_id": "HumanEval/144", "result": "passed", "passed": true}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        if n <= 10:\n            return False\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 != 0 and int(str_n[-1]) % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 84, "duration": 8.241860628128052, "task_id": "HumanEval/146", "result": "passed", "passed": true}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])", "is_solved": true, "iteration": 0, "prompt_tokens": 261, "completion_tokens": 112, "duration": 10.3786039352417, "task_id": "HumanEval/148", "result": "passed", "passed": true}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": true, "iteration": 0, "prompt_tokens": 237, "completion_tokens": 85, "duration": 6.565547943115234, "task_id": "HumanEval/149", "result": "passed", "passed": true}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 8.51151967048645, "task_id": "HumanEval/150", "result": "passed", "passed": true}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 5.37906813621521, "task_id": "HumanEval/151", "result": "passed", "passed": true}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.192361354827881, "task_id": "HumanEval/152", "result": "passed", "passed": true}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.732594013214111, "task_id": "HumanEval/153", "result": "passed", "passed": true}
{"generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 71, "duration": 10.428183317184448, "task_id": "HumanEval/155", "result": "passed", "passed": true}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 204, "duration": 11.66052770614624, "task_id": "HumanEval/156", "result": "passed", "passed": true}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.329470634460449, "task_id": "HumanEval/157", "result": "passed", "passed": true}
{"generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    total_eaten = number + eaten\n    remaining -= eaten\n    return [total_eaten, remaining]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 44, "duration": 7.473829746246338, "task_id": "HumanEval/159", "result": "passed", "passed": true}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 51, "duration": 8.592001676559448, "task_id": "HumanEval/160", "result": "passed", "passed": true}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.316079378128052, "task_id": "HumanEval/161", "result": "passed", "passed": true}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 8.60674786567688, "task_id": "HumanEval/162", "result": "passed", "passed": true}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 134, "duration": 10.993800401687622, "task_id": "HumanEval/147", "result": "passed", "passed": true}
{"generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])", "is_solved": true, "iteration": 1, "prompt_tokens": 1807, "completion_tokens": 167, "duration": 13.796725988388062, "task_id": "HumanEval/120", "result": "passed", "passed": true}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 1179, "completion_tokens": 144, "duration": 12.5180344581604, "task_id": "HumanEval/122", "result": "passed", "passed": true}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    # Correcting the length calculation for the intersection\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 1, "prompt_tokens": 1723, "completion_tokens": 414, "duration": 26.421778678894043, "task_id": "HumanEval/127", "result": "passed", "passed": true}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i-1].lower() not in vowels.lower() and word[i+1].lower() not in vowels.lower():\n                closest_vowel = word[i]\n                break\n    return closest_vowel", "is_solved": true, "iteration": 1, "prompt_tokens": 1591, "completion_tokens": 384, "duration": 21.981601238250732, "task_id": "HumanEval/118", "result": "passed", "passed": true}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return -(-total_water_units // capacity)", "is_solved": false, "iteration": 1, "prompt_tokens": 1697, "completion_tokens": 122, "duration": 11.132622718811035, "task_id": "HumanEval/115", "result": "failed: Error", "passed": false}
{"generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Try both possible concatenations\n    for s1, s2 in [(str1, str2), (str2, str1)]:\n        combined = s1 + s2\n        balance = 0\n        for char in combined:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If at any point balance goes negative, parentheses are not balanced\n            if balance < 0:\n                break\n        # If balance is 0 after processing the entire string, it's a good string\n        if balance == 0:\n            return 'Yes'\n    return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 1682, "completion_tokens": 406, "duration": 29.28927779197693, "task_id": "HumanEval/119", "result": "passed", "passed": true}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Corrected logic to count lowercase letters in odd positions\n        return sum(1 for i, char in enumerate(txt) if char.islower() and i % 2 == 0)", "is_solved": false, "iteration": 1, "prompt_tokens": 1331, "completion_tokens": 304, "duration": 23.186001777648926, "task_id": "HumanEval/125", "result": "failed: ", "passed": false}
{"generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1340, "completion_tokens": 161, "duration": 15.06900954246521, "task_id": "HumanEval/158", "result": "failed: t1", "passed": false}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for start in range(len(b)):\n        for i in range(start, len(b)):\n            rotated_b = b[start:i+1]\n            if rotated_b in extended_a:\n                return True\n    return False", "is_solved": false, "iteration": 1, "prompt_tokens": 1186, "completion_tokens": 255, "duration": 21.17943787574768, "task_id": "HumanEval/154", "result": "failed: test #0", "passed": false}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    pos_value = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    sorted_values = sorted(pos_value)\n    min_val, next_min_val = sorted_values[0], sorted_values[1]\n\n    path = []\n    for _ in range(k):\n        if len(path) % 2 == 0:\n            path.append(min_val)\n        else:\n            path.append(next_min_val)\n    return path", "is_solved": false, "iteration": 1, "prompt_tokens": 3326, "completion_tokens": 457, "duration": 29.003379583358765, "task_id": "HumanEval/129", "result": "failed: ", "passed": false}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x) if x >= 0 else -nums.index(x)))", "is_solved": false, "iteration": 1, "prompt_tokens": 1521, "completion_tokens": 205, "duration": 18.599939346313477, "task_id": "HumanEval/145", "result": "failed: ", "passed": false}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0 and i not in [0, 1]]", "is_solved": false, "iteration": 1, "prompt_tokens": 1211, "completion_tokens": 257, "duration": 28.179548501968384, "task_id": "HumanEval/163", "result": "failed: Test 1", "passed": false}
{"generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                nested = True\n            else:\n                return False\n    return nested and not stack", "is_solved": false, "iteration": 1, "prompt_tokens": 1594, "completion_tokens": 469, "duration": 33.13773059844971, "task_id": "HumanEval/132", "result": "failed: ", "passed": false}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3, 2]  # Start the sequence with the first three elements defined\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)  # Ensure integer division\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])  # Correct calculation for odd indices\n    return trib", "is_solved": false, "iteration": 1, "prompt_tokens": 2170, "completion_tokens": 358, "duration": 23.623405933380127, "task_id": "HumanEval/130", "result": "failed: ", "passed": false}
