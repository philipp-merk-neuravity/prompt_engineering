{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2"}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8"}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24"}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25"}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for c in paren_string:\n        if c == '(':\n            count += 1\n        current_group += c\n        if c == ')':\n            count -= 1\n            if count == 0:\n                result.append(current_group.replace(' ', ''))\n                current_group = ''\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 261, "completion_tokens": 260, "duration": 6.729943513870239, "task_id": "HumanEval/1"}
{"generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "is_solved": true, "iteration": 3, "prompt_tokens": 400, "completion_tokens": 652, "duration": 8.682994365692139, "task_id": "HumanEval/10"}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "is_solved": true, "iteration": 5, "prompt_tokens": 379, "completion_tokens": 745, "duration": 10.601700782775879, "task_id": "HumanEval/44"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 4, "prompt_tokens": 354, "completion_tokens": 578, "duration": 11.649403095245361, "task_id": "HumanEval/36"}
{"generated_code": "def find_zero(xs: list):\n    largest_coeff = max(xs, key=abs)\n    if len(xs) % 2 != 0 or xs.index(largest_coeff) % 2 == 0:\n        return None\n\n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs)][1:])\n\n    guess = 1.0\n    while abs(poly(xs, guess)) > 1e-10:\n        guess -= poly(xs, guess) / derivative(xs, guess)\n    return guess", "is_solved": true, "iteration": 4, "prompt_tokens": 542, "completion_tokens": 1259, "duration": 8.168630123138428, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 311, "completion_tokens": 1027, "duration": 9.135513067245483, "task_id": "HumanEval/41"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 318, "completion_tokens": 750, "duration": 7.962573289871216, "task_id": "HumanEval/7"}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 424, "completion_tokens": 893, "duration": 54.88486933708191, "task_id": "HumanEval/3"}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 490, "completion_tokens": 908, "duration": 9.588327407836914, "task_id": "HumanEval/37"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 485, "completion_tokens": 931, "duration": 9.849135637283325, "task_id": "HumanEval/0"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 5, "prompt_tokens": 442, "completion_tokens": 918, "duration": 9.307825803756714, "task_id": "HumanEval/21"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 446, "completion_tokens": 686, "duration": 8.248120307922363, "task_id": "HumanEval/47"}
{"generated_code": "def sort_third(l: list):\n    result = l.copy()\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in indices:\n        result[i:i+3] = sorted(result[i:i+3])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 513, "completion_tokens": 1081, "duration": 12.461297035217285, "task_id": "HumanEval/33"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 5, "prompt_tokens": 664, "completion_tokens": 1192, "duration": 12.312047958374023, "task_id": "HumanEval/17"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 728, "completion_tokens": 1176, "duration": 13.900862216949463, "task_id": "HumanEval/20"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return array\n    \n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "is_solved": true, "iteration": 4, "prompt_tokens": 468, "completion_tokens": 1067, "duration": 9.135831356048584, "task_id": "HumanEval/88"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 978, "duration": 9.31517505645752, "task_id": "HumanEval/54"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "is_solved": false, "iteration": 5, "prompt_tokens": 361, "completion_tokens": 995, "duration": 8.36531400680542, "task_id": "HumanEval/76"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 287, "completion_tokens": 563, "duration": 8.943177223205566, "task_id": "HumanEval/85"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 422, "completion_tokens": 845, "duration": 10.099476337432861, "task_id": "HumanEval/91"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 397, "completion_tokens": 715, "duration": 7.413435697555542, "task_id": "HumanEval/65"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 596, "completion_tokens": 913, "duration": 14.929052829742432, "task_id": "HumanEval/89"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 974, "completion_tokens": 1796, "duration": 14.582273483276367, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "is_solved": false, "iteration": 5, "prompt_tokens": 1631, "completion_tokens": 1858, "duration": 30.67209243774414, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112"}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141"}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146"}
{"generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 1, "prompt_tokens": 190, "completion_tokens": 243, "duration": 2.8432557582855225, "task_id": "HumanEval/140"}
{"generated_code": "def match_parens(lst):\n    total_open = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                total_open += 1\n            else:\n                if total_open == 0:\n                    return 'No'\n                total_open -= 1\n    if total_open == 0:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 305, "completion_tokens": 304, "duration": 4.271631479263306, "task_id": "HumanEval/119"}
{"generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # 5\nprint(max_fill([[0,0,0], [0,0,0]], 5)) # 0", "is_solved": true, "iteration": 1, "prompt_tokens": 522, "completion_tokens": 406, "duration": 5.883939266204834, "task_id": "HumanEval/115"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if year % 4 == 0:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 491, "completion_tokens": 505, "duration": 9.192707300186157, "task_id": "HumanEval/124"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n    elif str(a) == str(b):\n        return None\n    elif type(a) in [int, float] and type(b) in [int, float]:\n        return max(float(a), float(b))\n    elif type(a) in [int, float]:\n        return max(float(a), float(b.replace(',', '.')))\n    else:\n        return max(float(a.replace(',', '.')), float(b))", "is_solved": false, "iteration": 5, "prompt_tokens": 589, "completion_tokens": 1054, "duration": 21.926273345947266, "task_id": "HumanEval/137"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 773, "duration": 9.048106670379639, "task_id": "HumanEval/121"}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10 ** (n - 1) - 8 ** n\n    return count\n\n# Test the function\nprint(starts_one_ends(1))  # Expected output: 1\nprint(starts_one_ends(2))  # Expected output: 19\nprint(starts_one_ends(3))  # Expected output: 271", "is_solved": false, "iteration": 5, "prompt_tokens": 318, "completion_tokens": 513, "duration": 15.06233811378479, "task_id": "HumanEval/83"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 360, "completion_tokens": 1128, "duration": 7.714664936065674, "task_id": "HumanEval/116"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 349, "completion_tokens": 1107, "duration": 13.43134331703186, "task_id": "HumanEval/145"}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 407, "completion_tokens": 817, "duration": 20.331242322921753, "task_id": "HumanEval/135"}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 404, "completion_tokens": 901, "duration": 13.7238929271698, "task_id": "HumanEval/108"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "is_solved": false, "iteration": 5, "prompt_tokens": 334, "completion_tokens": 921, "duration": 9.029832124710083, "task_id": "HumanEval/122"}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "is_solved": false, "iteration": 5, "prompt_tokens": 576, "completion_tokens": 1090, "duration": 28.6684148311615, "task_id": "HumanEval/111"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 5, "prompt_tokens": 489, "completion_tokens": 921, "duration": 15.314486265182495, "task_id": "HumanEval/128"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and last_char not in set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'):\n        return True\n    else:\n        return False", "is_solved": false, "iteration": 5, "prompt_tokens": 475, "completion_tokens": 1001, "duration": 17.5820095539093, "task_id": "HumanEval/134"}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 390, "completion_tokens": 658, "duration": 16.666229963302612, "task_id": "HumanEval/131"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 501, "completion_tokens": 1141, "duration": 17.837924480438232, "task_id": "HumanEval/142"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 554, "completion_tokens": 1010, "duration": 20.555187225341797, "task_id": "HumanEval/125"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": false, "iteration": 5, "prompt_tokens": 450, "completion_tokens": 750, "duration": 26.857426404953003, "task_id": "HumanEval/114"}
{"generated_code": "def is_nested(string):\n    return '[]' in string and string.count('[') > 1 and string.count(']') > 1", "is_solved": false, "iteration": 5, "prompt_tokens": 601, "completion_tokens": 1047, "duration": 22.197129487991333, "task_id": "HumanEval/132"}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 715, "completion_tokens": 1572, "duration": 26.172515630722046, "task_id": "HumanEval/113"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 5, "prompt_tokens": 784, "completion_tokens": 1404, "duration": 23.868680953979492, "task_id": "HumanEval/107"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 723, "completion_tokens": 1198, "duration": 24.688689947128296, "task_id": "HumanEval/147"}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 680, "completion_tokens": 1491, "duration": 30.669330835342407, "task_id": "HumanEval/123"}
{"generated_code": "def tri(n):\n    seq = [3]\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    \n    a, b, c = 3, 1, 2\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_num = 1 + i // 2\n        else:\n            next_num = a + b + c\n            a, b, c = b, c, next_num\n        seq.append(next_num)\n    \n    return seq", "is_solved": false, "iteration": 5, "prompt_tokens": 821, "completion_tokens": 1547, "duration": 25.101535320281982, "task_id": "HumanEval/130"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 672, "completion_tokens": 1080, "duration": 30.002081632614136, "task_id": "HumanEval/143"}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 5, "prompt_tokens": 604, "completion_tokens": 1030, "duration": 26.58823323249817, "task_id": "HumanEval/136"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 5, "prompt_tokens": 909, "completion_tokens": 1423, "duration": 32.90680456161499, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162"}
{"generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "is_solved": true, "iteration": 1, "prompt_tokens": 261, "completion_tokens": 196, "duration": 5.609997987747192, "task_id": "HumanEval/158"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 3, "prompt_tokens": 338, "completion_tokens": 420, "duration": 5.844193696975708, "task_id": "HumanEval/155"}
{"generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "is_solved": false, "iteration": 5, "prompt_tokens": 492, "completion_tokens": 971, "duration": 7.731506586074829, "task_id": "HumanEval/100"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 435, "completion_tokens": 1224, "duration": 6.912137031555176, "task_id": "HumanEval/149"}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b + 1) if all(int(digit) % 2 == 0 for digit in str(i))]", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 805, "duration": 9.952568054199219, "task_id": "HumanEval/163"}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 445, "completion_tokens": 1031, "duration": 9.318828105926514, "task_id": "HumanEval/154"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 988, "completion_tokens": 1681, "duration": 16.95046305656433, "task_id": "HumanEval/127"}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        result = []\n        \n        for dx, dy in neighbors:\n            ni, nj = i + dx, j + dy\n            \n            if 0 <= ni < n and 0 <= nj < m:\n                result.append((grid[ni][nj], ni, nj))\n        \n        result.sort()\n        \n        for val, ni, nj in result:\n            grid[ni][nj] = -1\n            res = dfs(ni, nj, path + [val])\n            if res:\n                return res\n            grid[ni][nj] = val\n        \n        return []\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = -1\n                return dfs(i, j, [1])", "is_solved": false, "iteration": 5, "prompt_tokens": 1654, "completion_tokens": 2439, "duration": 23.36117911338806, "task_id": "HumanEval/129"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2"}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8"}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24"}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25"}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49"}
{"generated_code": "def fizz_buzz(n: int):\n    return sum(str(x).count('7') for x in range(n) if x % 11 == 0 or x % 13 == 0)", "is_solved": true, "iteration": 1, "prompt_tokens": 174, "completion_tokens": 191, "duration": 7.8625452518463135, "task_id": "HumanEval/36"}
{"generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "is_solved": true, "iteration": 1, "prompt_tokens": 266, "completion_tokens": 268, "duration": 6.030738115310669, "task_id": "HumanEval/10"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            count += 1\n            group += char\n        elif char == \")\":\n            count -= 1\n            group += char\n            if count == 0:\n                result.append(group)\n                group = \"\"\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 258, "completion_tokens": 260, "duration": 6.855248212814331, "task_id": "HumanEval/1"}
{"generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "is_solved": true, "iteration": 2, "prompt_tokens": 229, "completion_tokens": 322, "duration": 7.721846342086792, "task_id": "HumanEval/44"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 5, "prompt_tokens": 305, "completion_tokens": 1027, "duration": 9.444564819335938, "task_id": "HumanEval/41"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 318, "completion_tokens": 750, "duration": 7.684871196746826, "task_id": "HumanEval/7"}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 419, "completion_tokens": 893, "duration": 55.201292753219604, "task_id": "HumanEval/3"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 5, "prompt_tokens": 449, "completion_tokens": 918, "duration": 9.257275342941284, "task_id": "HumanEval/21"}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 449, "completion_tokens": 908, "duration": 9.369942665100098, "task_id": "HumanEval/37"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 489, "completion_tokens": 931, "duration": 10.642114877700806, "task_id": "HumanEval/0"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 443, "completion_tokens": 686, "duration": 8.125916004180908, "task_id": "HumanEval/47"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 5, "prompt_tokens": 601, "completion_tokens": 1192, "duration": 11.761908054351807, "task_id": "HumanEval/17"}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 5, "prompt_tokens": 555, "completion_tokens": 1081, "duration": 12.62953782081604, "task_id": "HumanEval/33"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 5, "prompt_tokens": 616, "completion_tokens": 1568, "duration": 9.385164022445679, "task_id": "HumanEval/32"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 696, "completion_tokens": 1176, "duration": 13.763952732086182, "task_id": "HumanEval/20"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 978, "duration": 9.459434509277344, "task_id": "HumanEval/54"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 283, "completion_tokens": 563, "duration": 8.454986095428467, "task_id": "HumanEval/85"}
{"generated_code": "def is_simple_power(x, n):\n    return (x > 0) and (x == n**int(round(pow(x, 1/n))) if n != 1 else x == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 376, "completion_tokens": 995, "duration": 8.677979707717896, "task_id": "HumanEval/76"}
{"generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 + 8 * (10 ** (n-2))", "is_solved": false, "iteration": 5, "prompt_tokens": 320, "completion_tokens": 513, "duration": 9.163403272628784, "task_id": "HumanEval/83"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 388, "completion_tokens": 715, "duration": 7.421958684921265, "task_id": "HumanEval/65"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 422, "completion_tokens": 845, "duration": 11.361739873886108, "task_id": "HumanEval/91"}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": false, "iteration": 5, "prompt_tokens": 516, "completion_tokens": 1320, "duration": 9.784755229949951, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            if char.islower():\n                result += chr((ord('a') + shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((ord('A') + shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 623, "completion_tokens": 913, "duration": 15.143202543258667, "task_id": "HumanEval/89"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 955, "completion_tokens": 1796, "duration": 15.214264392852783, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "is_solved": false, "iteration": 5, "prompt_tokens": 1585, "completion_tokens": 1858, "duration": 26.67105793952942, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112"}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141"}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146"}
{"generated_code": "def fix_spaces(text):\n    text = text.replace(\"   \", \"-\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\" \", \"_\")\n    return text", "is_solved": true, "iteration": 1, "prompt_tokens": 193, "completion_tokens": 243, "duration": 2.9213287830352783, "task_id": "HumanEval/140"}
{"generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    return product if odd_digits else 0", "is_solved": true, "iteration": 1, "prompt_tokens": 177, "completion_tokens": 174, "duration": 4.668463230133057, "task_id": "HumanEval/131"}
{"generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 1, "prompt_tokens": 285, "completion_tokens": 304, "duration": 3.7770795822143555, "task_id": "HumanEval/119"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "is_solved": true, "iteration": 2, "prompt_tokens": 450, "completion_tokens": 779, "duration": 5.249691963195801, "task_id": "HumanEval/115"}
{"generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile", "is_solved": true, "iteration": 2, "prompt_tokens": 288, "completion_tokens": 425, "duration": 4.653087854385376, "task_id": "HumanEval/100"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 462, "completion_tokens": 505, "duration": 8.274245262145996, "task_id": "HumanEval/124"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip() and not txt.split()[-1].isalpha()", "is_solved": true, "iteration": 3, "prompt_tokens": 323, "completion_tokens": 627, "duration": 5.416816234588623, "task_id": "HumanEval/134"}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    hist = {}\n    for letter in letters:\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values()) if hist else 0\n    return {letter: count for letter, count in hist.items() if count == max_count}", "is_solved": true, "iteration": 4, "prompt_tokens": 479, "completion_tokens": 889, "duration": 9.047872066497803, "task_id": "HumanEval/111"}
{"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if intersection_length < 1:\n        return \"NO\"\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nintersection((1, 2), (2, 3))\nintersection((-1, 1), (0, 4))\nintersection((-3, -1), (-5, 5))", "is_solved": true, "iteration": 3, "prompt_tokens": 771, "completion_tokens": 1073, "duration": 13.172749280929565, "task_id": "HumanEval/127"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "is_solved": false, "iteration": 5, "prompt_tokens": 334, "completion_tokens": 921, "duration": 7.389059543609619, "task_id": "HumanEval/122"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 360, "completion_tokens": 1128, "duration": 6.0906126499176025, "task_id": "HumanEval/116"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 773, "duration": 6.592299222946167, "task_id": "HumanEval/121"}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 404, "completion_tokens": 901, "duration": 8.467246532440186, "task_id": "HumanEval/108"}
{"generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 448, "completion_tokens": 1224, "duration": 7.8765318393707275, "task_id": "HumanEval/149"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 387, "completion_tokens": 1358, "duration": 7.452632665634155, "task_id": "HumanEval/145"}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 395, "completion_tokens": 817, "duration": 10.850260019302368, "task_id": "HumanEval/135"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 483, "completion_tokens": 1141, "duration": 8.65347933769226, "task_id": "HumanEval/142"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": false, "iteration": 5, "prompt_tokens": 434, "completion_tokens": 750, "duration": 12.493552684783936, "task_id": "HumanEval/114"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 559, "completion_tokens": 1010, "duration": 10.516845703125, "task_id": "HumanEval/125"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 5, "prompt_tokens": 529, "completion_tokens": 921, "duration": 8.683615922927856, "task_id": "HumanEval/128"}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 596, "completion_tokens": 1194, "duration": 10.165243864059448, "task_id": "HumanEval/113"}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 669, "completion_tokens": 1491, "duration": 14.152482748031616, "task_id": "HumanEval/123"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\":\n            stack.append(char)\n        elif char == \"]\":\n            if stack and stack[-1] == \"[\":\n                stack.pop()\n    return len(stack) > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 634, "completion_tokens": 1047, "duration": 12.351722240447998, "task_id": "HumanEval/132"}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 5, "prompt_tokens": 663, "completion_tokens": 1030, "duration": 12.340034246444702, "task_id": "HumanEval/136"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 660, "completion_tokens": 1080, "duration": 14.222159385681152, "task_id": "HumanEval/143"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 737, "completion_tokens": 1198, "duration": 13.485434770584106, "task_id": "HumanEval/147"}
{"generated_code": "def tri(n):\n    sequence = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 793, "completion_tokens": 1547, "duration": 12.45812463760376, "task_id": "HumanEval/130"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 5, "prompt_tokens": 800, "completion_tokens": 1404, "duration": 12.885069370269775, "task_id": "HumanEval/107"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 5, "prompt_tokens": 897, "completion_tokens": 1423, "duration": 13.793773889541626, "task_id": "HumanEval/148"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n        if a == b:\n            return None\n        return str(a) if a > b else str(b)\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n        if a == b:\n            return None\n        return str(a) if a > b else b\n    elif isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n        if a == b:\n            return None\n        return a if a > b else str(b)", "is_solved": false, "iteration": 5, "prompt_tokens": 959, "completion_tokens": 1054, "duration": 17.55323076248169, "task_id": "HumanEval/137"}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    values = [grid[i][j] for i in range(n) for j in range(m)]\n    start = min(values)\n    path = [start]\n    current = start\n    for _ in range(k-1):\n        neighbors = []\n        i, j = divmod(values.index(current), m)\n        if i > 0:\n            neighbors.append(grid[i-1][j])\n        if i < n-1:\n            neighbors.append(grid[i+1][j])\n        if j > 0:\n            neighbors.append(grid[i][j-1])\n        if j < m-1:\n            neighbors.append(grid[i][j+1])\n        next_val = min(val for val in neighbors if val > current)\n        path.append(next_val)\n        current = next_val\n    return path", "is_solved": false, "iteration": 5, "prompt_tokens": 1577, "completion_tokens": 2439, "duration": 22.75595760345459, "task_id": "HumanEval/129"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_count = unique_chars(word)\n        if unique_count > max_unique_chars or (unique_count == max_unique_chars and word < result_word):\n            max_unique_chars = unique_count\n            result_word = word\n    \n    return result_word", "is_solved": true, "iteration": 1, "prompt_tokens": 261, "completion_tokens": 196, "duration": 5.41968560218811, "task_id": "HumanEval/158"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([digit for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([digit for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 2, "prompt_tokens": 255, "completion_tokens": 305, "duration": 4.612385988235474, "task_id": "HumanEval/155"}
{"generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "is_solved": true, "iteration": 3, "prompt_tokens": 369, "completion_tokens": 673, "duration": 7.4529242515563965, "task_id": "HumanEval/154"}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 328, "completion_tokens": 805, "duration": 8.861684083938599, "task_id": "HumanEval/163"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2"}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8"}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24"}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25"}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 181, "completion_tokens": 191, "duration": 7.959364414215088, "task_id": "HumanEval/36"}
{"generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "is_solved": true, "iteration": 1, "prompt_tokens": 186, "completion_tokens": 181, "duration": 6.942465782165527, "task_id": "HumanEval/44"}
{"generated_code": "def sort_third(l: list):\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n        \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 283, "completion_tokens": 281, "duration": 7.3861541748046875, "task_id": "HumanEval/33"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 3, "prompt_tokens": 261, "completion_tokens": 625, "duration": 7.868150949478149, "task_id": "HumanEval/41"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 5, "prompt_tokens": 424, "completion_tokens": 1568, "duration": 6.654470682144165, "task_id": "HumanEval/32"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 323, "completion_tokens": 750, "duration": 8.307758092880249, "task_id": "HumanEval/7"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    stack = []\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            current += '('\n        else:\n            stack.pop()\n            current += ')'\n            if not stack:\n                result.append(current)\n                current = \"\"\n    return result", "is_solved": true, "iteration": 5, "prompt_tokens": 670, "completion_tokens": 920, "duration": 13.863553285598755, "task_id": "HumanEval/1"}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 414, "completion_tokens": 893, "duration": 55.124289751052856, "task_id": "HumanEval/3"}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 444, "completion_tokens": 908, "duration": 9.315016269683838, "task_id": "HumanEval/37"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 5, "prompt_tokens": 455, "completion_tokens": 918, "duration": 9.500993728637695, "task_id": "HumanEval/21"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 427, "completion_tokens": 686, "duration": 7.609391212463379, "task_id": "HumanEval/47"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 485, "completion_tokens": 931, "duration": 10.65846300125122, "task_id": "HumanEval/0"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 5, "prompt_tokens": 558, "completion_tokens": 1192, "duration": 10.710761785507202, "task_id": "HumanEval/17"}
{"generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n    return ''", "is_solved": false, "iteration": 5, "prompt_tokens": 548, "completion_tokens": 1036, "duration": 11.750452518463135, "task_id": "HumanEval/10"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 713, "completion_tokens": 1176, "duration": 20.086846351623535, "task_id": "HumanEval/20"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99"}
{"generated_code": "def encrypt(s):\n    return ''.join([chr((ord(char) - ord('a') + 2*2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2*2) % 26 + ord('A')) if char.isupper() else char for char in s])", "is_solved": true, "iteration": 1, "prompt_tokens": 239, "completion_tokens": 273, "duration": 8.074476718902588, "task_id": "HumanEval/89"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and (x == 1 or x == n or (x % n == 0 and is_simple_power(x // n, n)))", "is_solved": true, "iteration": 2, "prompt_tokens": 262, "completion_tokens": 419, "duration": 6.129499435424805, "task_id": "HumanEval/76"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 5, "prompt_tokens": 401, "completion_tokens": 715, "duration": 8.10434627532959, "task_id": "HumanEval/65"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 978, "duration": 9.702431917190552, "task_id": "HumanEval/54"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 283, "completion_tokens": 563, "duration": 8.660654067993164, "task_id": "HumanEval/85"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 427, "completion_tokens": 845, "duration": 9.786975145339966, "task_id": "HumanEval/91"}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": false, "iteration": 5, "prompt_tokens": 517, "completion_tokens": 1320, "duration": 10.103131532669067, "task_id": "HumanEval/88"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 938, "completion_tokens": 1796, "duration": 16.134126663208008, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "is_solved": false, "iteration": 5, "prompt_tokens": 1676, "completion_tokens": 1858, "duration": 30.746711492538452, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112"}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141"}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146"}
{"generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 406, "completion_tokens": 406, "duration": 4.311645030975342, "task_id": "HumanEval/115"}
{"generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 2, "prompt_tokens": 226, "completion_tokens": 399, "duration": 3.7412445545196533, "task_id": "HumanEval/140"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2:\n            if year % 4 == 0:\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 491, "completion_tokens": 505, "duration": 8.78402328491211, "task_id": "HumanEval/124"}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = []\n        if x > 0: neighbors.append((x-1, y))\n        if x < n-1: neighbors.append((x+1, y))\n        if y > 0: neighbors.append((x, y-1))\n        if y < m-1: neighbors.append((x, y+1))\n        \n        neighbors.sort(key=lambda p: grid[p[0]][p[1]])\n        \n        for nx, ny in neighbors:\n            res = dfs(nx, ny, path + [grid[nx][ny]])\n            if res:\n                return res\n    \n    start = min((grid[i][j], i, j) for i in range(n) for j in range(m))\n    return dfs(start[1], start[2], [start[0]])", "is_solved": true, "iteration": 1, "prompt_tokens": 656, "completion_tokens": 655, "duration": 9.022551774978638, "task_id": "HumanEval/129"}
{"generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "is_solved": true, "iteration": 3, "prompt_tokens": 390, "completion_tokens": 740, "duration": 6.021904468536377, "task_id": "HumanEval/119"}
{"generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        if num < 0:\n            num = -num\n            return -sum(int(digit) for digit in str(num))\n        return sum(int(digit) for digit in str(num))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "is_solved": true, "iteration": 3, "prompt_tokens": 377, "completion_tokens": 553, "duration": 7.5119524002075195, "task_id": "HumanEval/108"}
{"generated_code": "def histogram(test):\n    counts = {}\n    max_count = 0\n    \n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n        max_count = max(max_count, counts[letter])\n\n    result = {key: value for key, value in counts.items() if value == max_count}\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 439, "completion_tokens": 688, "duration": 8.241873264312744, "task_id": "HumanEval/111"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_end < intersection_start:\n        return \"NO\"\n\n    length = intersection_end - intersection_start\n\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": true, "iteration": 2, "prompt_tokens": 588, "completion_tokens": 769, "duration": 11.333150625228882, "task_id": "HumanEval/127"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 360, "completion_tokens": 1128, "duration": 5.410436153411865, "task_id": "HumanEval/116"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 773, "duration": 6.763137578964233, "task_id": "HumanEval/121"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 324, "completion_tokens": 856, "duration": 6.017723321914673, "task_id": "HumanEval/145"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "is_solved": false, "iteration": 5, "prompt_tokens": 333, "completion_tokens": 921, "duration": 8.977567672729492, "task_id": "HumanEval/122"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())\n\n# test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "is_solved": false, "iteration": 5, "prompt_tokens": 513, "completion_tokens": 1001, "duration": 9.244181156158447, "task_id": "HumanEval/134"}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 417, "completion_tokens": 817, "duration": 11.19719934463501, "task_id": "HumanEval/135"}
{"generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        pile.append(n)\n    return pile", "is_solved": false, "iteration": 5, "prompt_tokens": 484, "completion_tokens": 971, "duration": 8.958285093307495, "task_id": "HumanEval/100"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 451, "completion_tokens": 1141, "duration": 8.097105026245117, "task_id": "HumanEval/142"}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 410, "completion_tokens": 658, "duration": 10.17242956161499, "task_id": "HumanEval/131"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": false, "iteration": 5, "prompt_tokens": 428, "completion_tokens": 750, "duration": 12.73793363571167, "task_id": "HumanEval/114"}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 560, "completion_tokens": 1194, "duration": 9.15422797203064, "task_id": "HumanEval/113"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 568, "completion_tokens": 1010, "duration": 11.422363996505737, "task_id": "HumanEval/125"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 5, "prompt_tokens": 525, "completion_tokens": 921, "duration": 10.014843940734863, "task_id": "HumanEval/128"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 5, "prompt_tokens": 751, "completion_tokens": 1404, "duration": 11.434507131576538, "task_id": "HumanEval/107"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0", "is_solved": false, "iteration": 5, "prompt_tokens": 564, "completion_tokens": 1047, "duration": 11.749605655670166, "task_id": "HumanEval/132"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 739, "completion_tokens": 1198, "duration": 14.613205194473267, "task_id": "HumanEval/147"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 667, "completion_tokens": 1080, "duration": 14.624238967895508, "task_id": "HumanEval/143"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 841, "completion_tokens": 1547, "duration": 17.329340934753418, "task_id": "HumanEval/130"}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 5, "prompt_tokens": 676, "completion_tokens": 1030, "duration": 20.780396699905396, "task_id": "HumanEval/136"}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 648, "completion_tokens": 1491, "duration": 15.721312999725342, "task_id": "HumanEval/123"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 5, "prompt_tokens": 864, "completion_tokens": 1423, "duration": 18.513962030410767, "task_id": "HumanEval/148"}
{"generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if type(a) is int or type(a) is float:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n    elif type(a) is str:\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n    return None", "is_solved": false, "iteration": 5, "prompt_tokens": 709, "completion_tokens": 1054, "duration": 19.742313146591187, "task_id": "HumanEval/137"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162"}
{"generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 186, "completion_tokens": 190, "duration": 3.25004243850708, "task_id": "HumanEval/155"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    result = \"\"\n    \n    for word in words:\n        if unique_chars(word) > max_unique:\n            max_unique = unique_chars(word)\n            result = word\n        elif unique_chars(word) == max_unique and word < result:\n            result = word\n\n    return result", "is_solved": true, "iteration": 3, "prompt_tokens": 447, "completion_tokens": 536, "duration": 8.402664422988892, "task_id": "HumanEval/158"}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 805, "duration": 8.800149202346802, "task_id": "HumanEval/163"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 435, "completion_tokens": 1224, "duration": 7.254217624664307, "task_id": "HumanEval/149"}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 611, "completion_tokens": 1031, "duration": 11.350739002227783, "task_id": "HumanEval/154"}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 290, "completion_tokens": 513, "duration": 9.008232355117798, "task_id": "HumanEval/83"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2"}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8"}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24"}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25"}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49"}
{"generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 207, "completion_tokens": 181, "duration": 7.054685115814209, "task_id": "HumanEval/44"}
{"generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string", "is_solved": true, "iteration": 2, "prompt_tokens": 342, "completion_tokens": 460, "duration": 7.473775863647461, "task_id": "HumanEval/10"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current += char\n        elif char == ')':\n            count -= 1\n            current += char\n            if count == 0:\n                result.append(current.replace(\" \", \"\"))\n                current = \"\"\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 367, "completion_tokens": 425, "duration": 8.736883163452148, "task_id": "HumanEval/1"}
{"generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 309, "completion_tokens": 1027, "duration": 9.257452249526978, "task_id": "HumanEval/41"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 5, "prompt_tokens": 460, "completion_tokens": 1568, "duration": 7.048245906829834, "task_id": "HumanEval/32"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 420, "completion_tokens": 707, "duration": 12.209800958633423, "task_id": "HumanEval/36"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 323, "completion_tokens": 750, "duration": 8.028228998184204, "task_id": "HumanEval/7"}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 444, "completion_tokens": 908, "duration": 8.46370005607605, "task_id": "HumanEval/37"}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 404, "completion_tokens": 893, "duration": 54.96678900718689, "task_id": "HumanEval/3"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 5, "prompt_tokens": 453, "completion_tokens": 918, "duration": 9.589944839477539, "task_id": "HumanEval/21"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 430, "completion_tokens": 686, "duration": 7.606128215789795, "task_id": "HumanEval/47"}
{"generated_code": "def sort_third(l: list):\n    result = l.copy()\n    for i in range(0, len(l), 3):\n        if i < len(l):\n            end = min(i + 3, len(l))\n            result[i:end] = sorted(result[i:end])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 507, "completion_tokens": 1407, "duration": 14.224526643753052, "task_id": "HumanEval/33"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 5, "prompt_tokens": 635, "completion_tokens": 1192, "duration": 12.75670599937439, "task_id": "HumanEval/17"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 688, "completion_tokens": 1176, "duration": 12.598707914352417, "task_id": "HumanEval/20"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 479, "completion_tokens": 931, "duration": 9.780980110168457, "task_id": "HumanEval/0"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99"}
{"generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.islower():\n            encrypted += chr(((ord(char) - ord('a') + 2 * 2) % 26) + ord('a'))\n        elif char.isupper():\n            encrypted += chr(((ord(char) - ord('A') + 2 * 2) % 26) + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 2, "prompt_tokens": 353, "completion_tokens": 433, "duration": 9.484477281570435, "task_id": "HumanEval/89"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 978, "duration": 9.272731065750122, "task_id": "HumanEval/54"}
{"generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "is_solved": false, "iteration": 5, "prompt_tokens": 335, "completion_tokens": 995, "duration": 8.226085424423218, "task_id": "HumanEval/76"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 283, "completion_tokens": 563, "duration": 8.774889945983887, "task_id": "HumanEval/85"}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": false, "iteration": 5, "prompt_tokens": 519, "completion_tokens": 1320, "duration": 9.98822569847107, "task_id": "HumanEval/88"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 490, "completion_tokens": 845, "duration": 11.305722713470459, "task_id": "HumanEval/91"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 412, "completion_tokens": 715, "duration": 7.768113851547241, "task_id": "HumanEval/65"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 965, "completion_tokens": 1796, "duration": 14.309992790222168, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "is_solved": false, "iteration": 5, "prompt_tokens": 1646, "completion_tokens": 1858, "duration": 28.377951622009277, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112"}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141"}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146"}
{"generated_code": "def max_fill(grid, capacity):\n    import math\n    wells = sum(sum(row) for row in grid)\n    return math.ceil(wells / capacity)", "is_solved": true, "iteration": 1, "prompt_tokens": 409, "completion_tokens": 406, "duration": 4.396111965179443, "task_id": "HumanEval/115"}
{"generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "is_solved": true, "iteration": 1, "prompt_tokens": 462, "completion_tokens": 505, "duration": 11.987460851669312, "task_id": "HumanEval/124"}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result", "is_solved": true, "iteration": 2, "prompt_tokens": 269, "completion_tokens": 399, "duration": 10.432084083557129, "task_id": "HumanEval/140"}
{"generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2 * i)\n    return stones", "is_solved": true, "iteration": 2, "prompt_tokens": 278, "completion_tokens": 425, "duration": 11.45293664932251, "task_id": "HumanEval/100"}
{"generated_code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    close_count += 1\n                else:\n                    open_count -= 1\n    return 'Yes' if open_count == close_count == 0 else 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))  # 'No'", "is_solved": true, "iteration": 2, "prompt_tokens": 399, "completion_tokens": 522, "duration": 17.690771341323853, "task_id": "HumanEval/119"}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    letter_counts = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n        if letter_counts[letter] > max_count:\n            max_count = letter_counts[letter]\n    \n    result = {key: value for key, value in letter_counts.items() if value == max_count}\n    return result", "is_solved": true, "iteration": 4, "prompt_tokens": 535, "completion_tokens": 889, "duration": 25.874657154083252, "task_id": "HumanEval/111"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 360, "completion_tokens": 1128, "duration": 22.07595467567444, "task_id": "HumanEval/116"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 773, "duration": 24.027232885360718, "task_id": "HumanEval/121"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    return not txt.split()[-1][-1].isalpha()\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # False\nprint(check_if_last_char_is_a_letter(\"\"))  # False", "is_solved": false, "iteration": 5, "prompt_tokens": 596, "completion_tokens": 1001, "duration": 22.997536659240723, "task_id": "HumanEval/134"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 856, "duration": 20.759521484375, "task_id": "HumanEval/145"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "is_solved": false, "iteration": 5, "prompt_tokens": 333, "completion_tokens": 921, "duration": 29.193679571151733, "task_id": "HumanEval/122"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 482, "completion_tokens": 1141, "duration": 28.18130660057068, "task_id": "HumanEval/142"}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 411, "completion_tokens": 658, "duration": 30.745198249816895, "task_id": "HumanEval/131"}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 408, "completion_tokens": 901, "duration": 32.58834671974182, "task_id": "HumanEval/108"}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 410, "completion_tokens": 817, "duration": 33.398717403411865, "task_id": "HumanEval/135"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 5, "prompt_tokens": 553, "completion_tokens": 921, "duration": 29.89656400680542, "task_id": "HumanEval/128"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 1113, "completion_tokens": 1681, "duration": 42.98781657218933, "task_id": "HumanEval/127"}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 579, "completion_tokens": 1194, "duration": 37.10804462432861, "task_id": "HumanEval/113"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 655, "completion_tokens": 1080, "duration": 37.68513774871826, "task_id": "HumanEval/143"}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 683, "completion_tokens": 1491, "duration": 37.75322246551514, "task_id": "HumanEval/123"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": false, "iteration": 5, "prompt_tokens": 445, "completion_tokens": 750, "duration": 35.05938982963562, "task_id": "HumanEval/114"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 763, "completion_tokens": 1198, "duration": 36.71836733818054, "task_id": "HumanEval/147"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) != 0\n\n# Test cases\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "is_solved": false, "iteration": 5, "prompt_tokens": 686, "completion_tokens": 1047, "duration": 40.5142560005188, "task_id": "HumanEval/132"}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 5, "prompt_tokens": 651, "completion_tokens": 1030, "duration": 33.89155888557434, "task_id": "HumanEval/136"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 623, "completion_tokens": 1010, "duration": 37.309367656707764, "task_id": "HumanEval/125"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 5, "prompt_tokens": 759, "completion_tokens": 1404, "duration": 38.66831183433533, "task_id": "HumanEval/107"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 5, "prompt_tokens": 860, "completion_tokens": 1423, "duration": 37.55397844314575, "task_id": "HumanEval/148"}
{"generated_code": "def tri(n):\n    sequence = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence", "is_solved": false, "iteration": 5, "prompt_tokens": 730, "completion_tokens": 1547, "duration": 36.6953341960907, "task_id": "HumanEval/130"}
{"generated_code": "def minPath(grid, k):\n    N = len(grid)\n    grid_values = [cell for row in grid for cell in row]\n    start = min(grid_values)\n    path = [start]\n    visited = set()\n    visited.add(start)\n    \n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    def dfs(x, y, steps):\n        if steps == k:\n            return True\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                next_cell = grid[nx][ny]\n                if next_cell not in visited:\n                    visited.add(next_cell)\n                    path.append(next_cell)\n                    if dfs(nx, ny, steps + 1):\n                        return True\n                    visited.remove(next_cell)\n                    path.pop()\n        \n        return False\n    \n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == start:\n                if dfs(i, j, 1):\n                    return path", "is_solved": false, "iteration": 5, "prompt_tokens": 1550, "completion_tokens": 2439, "duration": 48.361236572265625, "task_id": "HumanEval/129"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == int or type(a) == float:\n            return b\n        else:\n            return a", "is_solved": false, "iteration": 5, "prompt_tokens": 918, "completion_tokens": 1054, "duration": 47.875925064086914, "task_id": "HumanEval/137"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 1, "prompt_tokens": 188, "completion_tokens": 190, "duration": 3.0349607467651367, "task_id": "HumanEval/155"}
{"generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "is_solved": true, "iteration": 1, "prompt_tokens": 262, "completion_tokens": 196, "duration": 5.700848817825317, "task_id": "HumanEval/158"}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 266, "completion_tokens": 513, "duration": 8.631158113479614, "task_id": "HumanEval/83"}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 322, "completion_tokens": 1031, "duration": 7.157416582107544, "task_id": "HumanEval/154"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 427, "completion_tokens": 1224, "duration": 6.970057487487793, "task_id": "HumanEval/149"}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 349, "completion_tokens": 805, "duration": 9.328610897064209, "task_id": "HumanEval/163"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.3748176097869873, "task_id": "HumanEval/2"}
{"generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 167, "completion_tokens": 44, "duration": 3.6765074729919434, "task_id": "HumanEval/4"}
{"generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 60, "duration": 4.007699728012085, "task_id": "HumanEval/5"}
{"generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 94, "duration": 4.523579835891724, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return total_sum, total_product", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 75, "duration": 4.375110387802124, "task_id": "HumanEval/8"}
{"generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        max_numbers.append(max_num)\n    return max_numbers", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 57, "duration": 3.7959132194519043, "task_id": "HumanEval/9"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.5920822620391846, "task_id": "HumanEval/11"}
{"generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.9178173542022705, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.631875514984131, "task_id": "HumanEval/13"}
{"generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.5267109870910645, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.3324170112609863, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.1436092853546143, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 74, "duration": 4.2200727462768555, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 102, "duration": 4.697938442230225, "task_id": "HumanEval/19"}
{"generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.5470941066741943, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.0233676433563232, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.513399124145508, "task_id": "HumanEval/24"}
{"generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 65, "duration": 3.7573485374450684, "task_id": "HumanEval/25"}
{"generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 33, "duration": 3.290222644805908, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.3436784744262695, "task_id": "HumanEval/27"}
{"generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.9848461151123047, "task_id": "HumanEval/28"}
{"generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 34, "duration": 3.402144432067871, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.0710422992706299, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.964221477508545, "task_id": "HumanEval/31"}
{"generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 17, "duration": 3.101635456085205, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 16, "duration": 2.888660430908203, "task_id": "HumanEval/35"}
{"generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": true, "iteration": 0, "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.722168922424316, "task_id": "HumanEval/38"}
{"generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 178, "duration": 8.617135047912598, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 70, "duration": 4.308423757553101, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 23, "duration": 4.702202320098877, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 28, "duration": 5.8232152462005615, "task_id": "HumanEval/43"}
{"generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 22, "duration": 2.7677125930786133, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 119, "duration": 6.019763231277466, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 20, "duration": 4.280380725860596, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.343328475952148, "task_id": "HumanEval/49"}
{"generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current += char\n        elif char == ')':\n            count -= 1\n            current += char\n            if count == 0:\n                result.append(current)\n                current = ''\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 260, "completion_tokens": 260, "duration": 6.956996202468872, "task_id": "HumanEval/1"}
{"generated_code": "def car_race_collision(n: int):\n    return n", "is_solved": true, "iteration": 4, "prompt_tokens": 283, "completion_tokens": 826, "duration": 8.516645193099976, "task_id": "HumanEval/41"}
{"generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "is_solved": true, "iteration": 4, "prompt_tokens": 293, "completion_tokens": 604, "duration": 8.94551396369934, "task_id": "HumanEval/44"}
{"generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 3, "prompt_tokens": 311, "completion_tokens": 449, "duration": 10.54302167892456, "task_id": "HumanEval/36"}
{"generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 5, "prompt_tokens": 318, "completion_tokens": 750, "duration": 7.573535919189453, "task_id": "HumanEval/7"}
{"generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "is_solved": false, "iteration": 5, "prompt_tokens": 464, "completion_tokens": 1568, "duration": 7.200922012329102, "task_id": "HumanEval/32"}
{"generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 414, "completion_tokens": 893, "duration": 54.73707890510559, "task_id": "HumanEval/3"}
{"generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "is_solved": false, "iteration": 5, "prompt_tokens": 426, "completion_tokens": 908, "duration": 8.4990074634552, "task_id": "HumanEval/37"}
{"generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "is_solved": false, "iteration": 5, "prompt_tokens": 443, "completion_tokens": 918, "duration": 9.01802396774292, "task_id": "HumanEval/21"}
{"generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 499, "completion_tokens": 931, "duration": 9.933709383010864, "task_id": "HumanEval/0"}
{"generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]\n\n# Test cases\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))", "is_solved": false, "iteration": 5, "prompt_tokens": 469, "completion_tokens": 1081, "duration": 11.081886768341064, "task_id": "HumanEval/33"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 5, "prompt_tokens": 498, "completion_tokens": 686, "duration": 8.065003871917725, "task_id": "HumanEval/47"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    def find_longest_palindromic_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n\n    suffix = find_longest_palindromic_suffix(string)\n    if suffix is None:\n        return string\n    return string + string[:len(string) - len(suffix)][::-1]", "is_solved": false, "iteration": 5, "prompt_tokens": 699, "completion_tokens": 1422, "duration": 12.74739694595337, "task_id": "HumanEval/10"}
{"generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "is_solved": false, "iteration": 5, "prompt_tokens": 698, "completion_tokens": 1192, "duration": 12.19606328010559, "task_id": "HumanEval/17"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 706, "completion_tokens": 1176, "duration": 12.685475826263428, "task_id": "HumanEval/20"}
{"generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": true, "iteration": 0, "prompt_tokens": 140, "completion_tokens": 82, "duration": 4.167835235595703, "task_id": "HumanEval/50"}
{"generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 31, "duration": 5.49226450920105, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 26, "duration": 5.450874328613281, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int):\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 20, "duration": 1.7860267162322998, "task_id": "HumanEval/53"}
{"generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 38, "duration": 4.537459373474121, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 64, "duration": 1.595395803451538, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.372962713241577, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 29, "duration": 5.793344020843506, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 50, "duration": 6.514908790588379, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 22, "duration": 5.250669479370117, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 67, "duration": 6.117987394332886, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 89, "duration": 5.635868549346924, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 72, "duration": 2.085747480392456, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        return sum(1 for char in s[:-1] if char.lower() in vowels) + 1\n    else:\n        return sum(1 for char in s if char.lower() in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 70, "duration": 6.279200553894043, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 1.2910349369049072, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 37, "duration": 5.683075189590454, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 82, "duration": 5.2497780323028564, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if lst.count(num) >= num:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 37, "duration": 5.657253980636597, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 44, "duration": 4.340230464935303, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 92, "duration": 2.073251247406006, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 5.156278610229492, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 52, "duration": 1.6135008335113525, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 43, "duration": 4.563444375991821, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 106, "duration": 5.258728504180908, "task_id": "HumanEval/75"}
{"generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 31, "duration": 4.989458799362183, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 49, "duration": 3.148556709289551, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 29, "duration": 4.2002599239349365, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 2.430246591567993, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.953183889389038, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 21, "duration": 3.9268581867218018, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 26, "duration": 4.099725961685181, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.980239152908325, "task_id": "HumanEval/87"}
{"generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 52, "duration": 4.335091829299927, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 54, "duration": 4.2294628620147705, "task_id": "HumanEval/92"}
{"generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "is_solved": true, "iteration": 0, "prompt_tokens": 159, "completion_tokens": 93, "duration": 5.514516592025757, "task_id": "HumanEval/93"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.356325626373291, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.878050327301025, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.914466619491577, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 38, "duration": 3.995293378829956, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.453214406967163, "task_id": "HumanEval/99"}
{"generated_code": "def is_simple_power(x, n):\n    return x == 1 or (x > 1 and x % n == 0 and is_simple_power(x // n, n))", "is_solved": true, "iteration": 1, "prompt_tokens": 233, "completion_tokens": 227, "duration": 5.139511346817017, "task_id": "HumanEval/76"}
{"generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            new_char = chr(((ord(char) - ord('a') + 2 * 2) % 26) + ord('a'))\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted", "is_solved": true, "iteration": 4, "prompt_tokens": 482, "completion_tokens": 753, "duration": 12.858215808868408, "task_id": "HumanEval/89"}
{"generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "is_solved": false, "iteration": 5, "prompt_tokens": 330, "completion_tokens": 978, "duration": 9.184675931930542, "task_id": "HumanEval/54"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 291, "completion_tokens": 563, "duration": 8.31273078918457, "task_id": "HumanEval/85"}
{"generated_code": "def starts_one_ends(n):\n    count = 9 * 10 ** (n - 1) - 8 ** n\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 319, "completion_tokens": 513, "duration": 9.359198570251465, "task_id": "HumanEval/83"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 5, "prompt_tokens": 378, "completion_tokens": 715, "duration": 6.506258010864258, "task_id": "HumanEval/65"}
{"generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 453, "completion_tokens": 845, "duration": 9.542643785476685, "task_id": "HumanEval/91"}
{"generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "is_solved": false, "iteration": 5, "prompt_tokens": 498, "completion_tokens": 1320, "duration": 8.836087703704834, "task_id": "HumanEval/88"}
{"generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "is_solved": false, "iteration": 5, "prompt_tokens": 941, "completion_tokens": 1796, "duration": 13.073739767074585, "task_id": "HumanEval/94"}
{"generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "is_solved": false, "iteration": 5, "prompt_tokens": 1713, "completion_tokens": 1858, "duration": 29.142749071121216, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.0746467113494873, "task_id": "HumanEval/101"}
{"generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 55, "duration": 3.2499303817749023, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.996777057647705, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 33, "duration": 4.210830211639404, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digits[x] for x in reversed_arr]\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 119, "duration": 3.765507936477661, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.168910264968872, "task_id": "HumanEval/106"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if sorted_arr == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 67, "duration": 1.888298511505127, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 51, "duration": 1.6188201904296875, "task_id": "HumanEval/110"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 1.6968176364898682, "task_id": "HumanEval/112"}
{"generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 62, "duration": 2.7944095134735107, "task_id": "HumanEval/117"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 98, "duration": 6.123220443725586, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "is_solved": true, "iteration": 0, "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.1640126705169678, "task_id": "HumanEval/120"}
{"generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.082533597946167, "task_id": "HumanEval/126"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.2351036071777344, "task_id": "HumanEval/133"}
{"generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 27, "duration": 2.1825339794158936, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 60, "duration": 5.583819150924683, "task_id": "HumanEval/139"}
{"generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 98, "duration": 3.6051621437072754, "task_id": "HumanEval/141"}
{"generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 59, "duration": 2.6001389026641846, "task_id": "HumanEval/144"}
{"generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 67, "duration": 5.582629919052124, "task_id": "HumanEval/146"}
{"generated_code": "def max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        total_water = sum(row)\n        while total_water > 0:\n            total_water -= min(total_water, capacity)\n            count += 1\n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 431, "completion_tokens": 406, "duration": 4.4738781452178955, "task_id": "HumanEval/115"}
{"generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "is_solved": true, "iteration": 1, "prompt_tokens": 286, "completion_tokens": 304, "duration": 3.7159581184387207, "task_id": "HumanEval/119"}
{"generated_code": "def histogram(test):\n    letters = test.split()\n    count_dict = {}\n    \n    for letter in letters:\n        count_dict[letter] = count_dict.get(letter, 0) + 1\n    \n    max_count = max(count_dict.values(), default=0)\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result", "is_solved": true, "iteration": 1, "prompt_tokens": 286, "completion_tokens": 286, "duration": 4.901907920837402, "task_id": "HumanEval/111"}
{"generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "is_solved": true, "iteration": 1, "prompt_tokens": 495, "completion_tokens": 505, "duration": 8.148470401763916, "task_id": "HumanEval/124"}
{"generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i)\n    return stones", "is_solved": true, "iteration": 3, "prompt_tokens": 342, "completion_tokens": 607, "duration": 5.3761467933654785, "task_id": "HumanEval/100"}
{"generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 5, "prompt_tokens": 360, "completion_tokens": 1128, "duration": 5.5082643032073975, "task_id": "HumanEval/116"}
{"generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "is_solved": false, "iteration": 5, "prompt_tokens": 329, "completion_tokens": 921, "duration": 7.353359937667847, "task_id": "HumanEval/122"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "is_solved": false, "iteration": 5, "prompt_tokens": 337, "completion_tokens": 773, "duration": 6.69687294960022, "task_id": "HumanEval/121"}
{"generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n        else:\n            count = 0\n        if char != \" \":\n            result += char\n        else:\n            result += \"_\"\n    return result", "is_solved": false, "iteration": 5, "prompt_tokens": 477, "completion_tokens": 867, "duration": 8.172947645187378, "task_id": "HumanEval/140"}
{"generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "is_solved": false, "iteration": 5, "prompt_tokens": 358, "completion_tokens": 856, "duration": 6.048839092254639, "task_id": "HumanEval/145"}
{"generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 433, "completion_tokens": 1224, "duration": 8.364442825317383, "task_id": "HumanEval/149"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "is_solved": false, "iteration": 5, "prompt_tokens": 405, "completion_tokens": 1001, "duration": 6.808438539505005, "task_id": "HumanEval/134"}
{"generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "is_solved": false, "iteration": 5, "prompt_tokens": 483, "completion_tokens": 1141, "duration": 8.21290636062622, "task_id": "HumanEval/142"}
{"generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "is_solved": false, "iteration": 5, "prompt_tokens": 389, "completion_tokens": 658, "duration": 8.928104877471924, "task_id": "HumanEval/131"}
{"generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "is_solved": false, "iteration": 5, "prompt_tokens": 411, "completion_tokens": 817, "duration": 11.031800270080566, "task_id": "HumanEval/135"}
{"generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "is_solved": false, "iteration": 5, "prompt_tokens": 444, "completion_tokens": 901, "duration": 9.498614311218262, "task_id": "HumanEval/108"}
{"generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": false, "iteration": 5, "prompt_tokens": 444, "completion_tokens": 750, "duration": 12.39583706855774, "task_id": "HumanEval/114"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "is_solved": false, "iteration": 5, "prompt_tokens": 490, "completion_tokens": 1010, "duration": 9.806440353393555, "task_id": "HumanEval/125"}
{"generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i+1, i+1) for i, string in enumerate(lst)]", "is_solved": false, "iteration": 5, "prompt_tokens": 571, "completion_tokens": 1194, "duration": 9.170102596282959, "task_id": "HumanEval/113"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n    return sum(abs(num) for num in arr) * product", "is_solved": false, "iteration": 5, "prompt_tokens": 544, "completion_tokens": 921, "duration": 8.611038208007812, "task_id": "HumanEval/128"}
{"generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    return sorted([num for num in collatz_seq if num % 2 != 0])", "is_solved": false, "iteration": 5, "prompt_tokens": 676, "completion_tokens": 1491, "duration": 12.90029764175415, "task_id": "HumanEval/123"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]'))      # True\nprint(is_nested('[]]]]]]][[[[[]'))    # False\nprint(is_nested('[][]'))      # False\nprint(is_nested('[]'))        # False\nprint(is_nested('[[][]]'))    # True\nprint(is_nested('[[]][['))    # True", "is_solved": false, "iteration": 5, "prompt_tokens": 693, "completion_tokens": 1047, "duration": 12.10012936592102, "task_id": "HumanEval/132"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "is_solved": false, "iteration": 5, "prompt_tokens": 661, "completion_tokens": 1080, "duration": 13.370035648345947, "task_id": "HumanEval/143"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [0, 1, 3]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "is_solved": false, "iteration": 5, "prompt_tokens": 785, "completion_tokens": 1547, "duration": 10.971911430358887, "task_id": "HumanEval/130"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "is_solved": false, "iteration": 5, "prompt_tokens": 781, "completion_tokens": 1404, "duration": 11.097304821014404, "task_id": "HumanEval/107"}
{"generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "is_solved": false, "iteration": 5, "prompt_tokens": 747, "completion_tokens": 1198, "duration": 13.13568663597107, "task_id": "HumanEval/147"}
{"generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "is_solved": false, "iteration": 5, "prompt_tokens": 666, "completion_tokens": 1030, "duration": 13.357547521591187, "task_id": "HumanEval/136"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planets[start_index+1:end_index])", "is_solved": false, "iteration": 5, "prompt_tokens": 871, "completion_tokens": 1423, "duration": 13.32256293296814, "task_id": "HumanEval/148"}
{"generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": false, "iteration": 5, "prompt_tokens": 1111, "completion_tokens": 1681, "duration": 17.98712658882141, "task_id": "HumanEval/127"}
{"generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 78, "duration": 2.0863029956817627, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 39, "duration": 4.964281320571899, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.242448329925537, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: strength(x))\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.0529162883758545, "task_id": "HumanEval/153"}
{"generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 142, "duration": 3.109078884124756, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 52, "duration": 1.781921625137329, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 51, "duration": 5.194386959075928, "task_id": "HumanEval/159"}
{"generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "is_solved": true, "iteration": 0, "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.242655515670776, "task_id": "HumanEval/160"}
{"generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5408999919891357, "task_id": "HumanEval/161"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.378025531768799, "task_id": "HumanEval/162"}
{"generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word", "is_solved": true, "iteration": 1, "prompt_tokens": 263, "completion_tokens": 196, "duration": 5.261936664581299, "task_id": "HumanEval/158"}
{"generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "is_solved": true, "iteration": 3, "prompt_tokens": 328, "completion_tokens": 420, "duration": 5.92199969291687, "task_id": "HumanEval/155"}
{"generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "is_solved": false, "iteration": 5, "prompt_tokens": 329, "completion_tokens": 805, "duration": 9.087599992752075, "task_id": "HumanEval/163"}
{"generated_code": "def cycpattern_check(a, b):\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "is_solved": false, "iteration": 5, "prompt_tokens": 316, "completion_tokens": 1031, "duration": 7.277328252792358, "task_id": "HumanEval/154"}
{"generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(float(a), float(b))\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b.replace(',', '.'))\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    else:\n        return None", "is_solved": false, "iteration": 5, "prompt_tokens": 899, "completion_tokens": 1054, "duration": 14.772576808929443, "task_id": "HumanEval/137"}
{"generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def backtrack(i, j, path):\n        if len(path) == k:\n            return path\n        \n        current_value = grid[i][j]\n        grid[i][j] = 0  # mark cell as visited\n        \n        next_paths = []\n        for di, dj in directions:\n            new_i, new_j = i + di, j + dj\n            if 0 <= new_i < n and 0 <= new_j < n and grid[new_i][new_j] != 0:\n                next_paths.append((new_i, new_j, path + [grid[new_i][new_j]]))\n        \n        next_paths.sort(key=lambda x: x[2])\n        \n        for new_i, new_j, new_path in next_paths:\n            result = backtrack(new_i, new_j, new_path)\n            if result:\n                return result\n        \n        grid[i][j] = current_value  # backtrack\n    \n    start_paths = [(i, j, [grid[i][j]]) for i in range(n) for j in range(n)]\n    start_paths.sort(key=lambda x: x[2])\n    \n    for i, j, path in start_paths:\n        result = backtrack(i, j, path)\n        if result:\n            return result", "is_solved": false, "iteration": 5, "prompt_tokens": 1632, "completion_tokens": 2439, "duration": 21.2902193069458, "task_id": "HumanEval/129"}
