{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 91, "duration": 4.901050806045532, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If stack is empty, we've closed a group\n                result.append(\"\".join(current_group))\n                current_group = []\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 127, "duration": 9.042445659637451, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.8852148056030273, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.67342209815979, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 5.76858377456665, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            max_depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 145, "duration": 14.807332992553711, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 113, "duration": 5.298289775848389, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n        if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 72, "duration": 4.578575372695923, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 9.487799882888794, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.790597438812256, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.444194793701172, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 4.032549858093262, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.1471498012542725, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.709285020828247, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.566406726837158, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 7.318256139755249, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 105, "duration": 5.363126754760742, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 119, "duration": 8.527263164520264, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 63, "duration": 3.7052037715911865, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.283321142196655, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2508254051208496, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.9261348247528076, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.666851997375488, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 81, "duration": 5.5569610595703125, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.54945707321167, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.9087090492248535, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 82, "duration": 5.560955286026001, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 125, "duration": 5.977392196655273, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.389772415161133, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by 3 in a list.\"\"\"\n    # Extract elements at indices divisible by 3 and sort them\n    sorted_thirds = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    # Iterate through the list and replace elements at indices divisible by 3 with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted_thirds.pop(0)\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 117, "duration": 10.220791101455688, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.6202197074890137, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.534376859664917, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.768533229827881, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 67, "duration": 5.388610124588013, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.464993000030518, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 117, "duration": 8.60254693031311, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.461310148239136, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4813060760498047, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.4291226863861084, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.1049466133117676, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 123, "duration": 7.770234107971191, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 80, "duration": 3.9400274753570557, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.5345394611358643, "task_id": "HumanEval/49"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    def func(x):\n        return poly(xs, x)\n    root = fsolve(func, 0.0)\n    return root[0]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 203, "duration": 12.843940019607544, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on a straight line,\n    this function calculates the total number of collisions that occur.\n    \"\"\"\n    return n * n", "is_solved": false, "iteration": 4, "prompt_tokens": 490, "completion_tokens": 861, "duration": 17.259138345718384, "task_id": "HumanEval/41"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 4, "prompt_tokens": 439, "completion_tokens": 561, "duration": 19.48816967010498, "task_id": "HumanEval/47"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": false, "iteration": 4, "prompt_tokens": 446, "completion_tokens": 717, "duration": 19.504019498825073, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 547, "completion_tokens": 677, "duration": 40.08318376541138, "task_id": "HumanEval/7"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 585, "completion_tokens": 971, "duration": 35.55646347999573, "task_id": "HumanEval/17"}
{"generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 683, "completion_tokens": 966, "duration": 36.20099925994873, "task_id": "HumanEval/38"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.018915414810181, "task_id": "HumanEval/83"}
{"generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 146, "duration": 10.47556471824646, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 1.8357257843017578, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.532106637954712, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 4.092744827270508, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 66, "duration": 4.6955437660217285, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 6.796807527542114, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.1705732345581055, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.1703836917877197, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n\n    while i <= n // i:\n        if n % i == 0:\n            if is_prime(i):\n                prime_factor = i\n            n //= i\n        else:\n            i += 1\n\n    if n > 1 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 146, "duration": 8.139670848846436, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 109, "duration": 5.404117822647095, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.973978519439697, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.5589613914489746, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 103, "duration": 7.269823789596558, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 66, "duration": 5.424800872802734, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.3676066398620605, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 4.155840635299683, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 4.779836654663086, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.537588596343994, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 3.1393606662750244, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 222, "duration": 10.683305263519287, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8316967487335205, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 68, "duration": 5.660627603530884, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 106, "duration": 6.466189384460449, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i + 1, a):\n                if a % (i * j) == 0 and is_prime(j):\n                    k = a // (i * j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 148, "duration": 11.911088466644287, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.1535022258758545, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 54, "duration": 3.2373454570770264, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 48, "duration": 3.5244293212890625, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.9129457473754883, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 5.632035970687866, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 6.189495801925659, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 33, "duration": 4.214278936386108, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.1173293590545654, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    # Sort by row in ascending order and then by column in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 174, "duration": 7.270188093185425, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 58, "duration": 3.0723776817321777, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 96, "duration": 4.523401498794556, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list or None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 69, "duration": 3.9035756587982178, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.122795343399048, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.492403745651245, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 81, "duration": 5.037683486938477, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.6623735427856445, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.621678829193115, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.22615647315979, "task_id": "HumanEval/99"}
{"generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    Args:\n    S (str): A string of words.\n\n    Returns:\n    int: The number of boredoms.\n    \"\"\"\n    # Splitting the input string into sentences based on '.', '?', '!'\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence]\n    \n    # Counting sentences that start with 'I '\n    boredom_count = sum(sentence.startswith('I ') or sentence == 'I' for sentence in sentences)\n    \n    return boredom_count", "is_solved": true, "iteration": 2, "prompt_tokens": 429, "completion_tokens": 435, "duration": 22.66059684753418, "task_id": "HumanEval/91"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))", "is_solved": true, "iteration": 3, "prompt_tokens": 653, "completion_tokens": 1118, "duration": 23.46076273918152, "task_id": "HumanEval/94"}
{"generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()", "is_solved": true, "iteration": 2, "prompt_tokens": 407, "completion_tokens": 412, "duration": 26.918861627578735, "task_id": "HumanEval/93"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": false, "iteration": 4, "prompt_tokens": 394, "completion_tokens": 581, "duration": 22.704681158065796, "task_id": "HumanEval/65"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 331, "completion_tokens": 603, "duration": 20.44184970855713, "task_id": "HumanEval/50"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 325, "completion_tokens": 460, "duration": 19.514676332473755, "task_id": "HumanEval/85"}
{"generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 27, "duration": 2.5287370681762695, "task_id": "HumanEval/101"}
{"generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 122, "duration": 6.884373903274536, "task_id": "HumanEval/100"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if none exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 68, "duration": 4.551984548568726, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 3.1468777656555176, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.716570615768433, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 105, "duration": 4.68481969833374, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 105, "duration": 6.301074981689453, "task_id": "HumanEval/106"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 75, "duration": 4.562687873840332, "task_id": "HumanEval/108"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 1 and arr[0] < arr[-1]:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 93, "duration": 8.07148814201355, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 79, "duration": 6.166558742523193, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {word: cnt for word, cnt in count.items() if cnt == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.8249077796936035, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 3.993349552154541, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 80, "duration": 6.913622856140137, "task_id": "HumanEval/113"}
{"generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 135, "duration": 8.763658046722412, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 101, "duration": 7.18869161605835, "task_id": "HumanEval/117"}
{"generated_code": "def match_parens(lst):\n    first, second = lst\n    # If both strings start with ')' or end with '(', impossible to match\n    if first[0] == ')' and second[0] == ')' or first[-1] == '(' and second[-1] == '(':\n        return 'No'\n    # Count open and close parentheses in both strings\n    open_count = first.count('(') + second.count('(')\n    close_count = first.count(')') + second.count(')')\n    # If open and close counts are equal, it's possible to match\n    return 'Yes' if open_count == close_count else 'No'", "is_solved": true, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 139, "duration": 9.088886976242065, "task_id": "HumanEval/119"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.126593589782715, "task_id": "HumanEval/121"}
{"generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are integers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 260, "duration": 14.714727640151978, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 74, "duration": 5.5421130657196045, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum(abs(num) for num in arr) * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 70, "duration": 5.355010509490967, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 5.0878705978393555, "task_id": "HumanEval/131"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 55, "duration": 4.27042555809021, "task_id": "HumanEval/132"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 2.666719436645508, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.endswith(\" \") == False and txt[-1:].isalpha() and (len(txt) == 1 or txt[-2] == \" \")", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 46, "duration": 4.2313172817230225, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 80, "duration": 10.605051517486572, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 152, "duration": 9.433364629745483, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For any even number n >= 8, it can always be written as the sum of four even numbers.\n    # Example: 8 = 2+2+2+2, 10 = 2+2+2+4, and so on.\n    # The condition is that n must be even to be written as such a sum.\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 169, "duration": 10.228040218353271, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 73, "duration": 5.307643413543701, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 6.677191257476807, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    import re\n    # Check if the file name matches the required pattern\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$', file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 96, "duration": 60.794787883758545, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.9619035720825195, "task_id": "HumanEval/142"}
{"generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 35, "duration": 3.7399230003356934, "task_id": "HumanEval/144"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of elements in a that are multiples of 3, equal to 1 mod 3, and equal to 2 mod 3\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # There are three cases for the sum to be divisible by 3:\n    # 1. All three numbers are multiples of 3.\n    # 2. One number is a multiple of 3, one number is 1 mod 3, and one number is 2 mod 3.\n    # 3. All three numbers are either 1 mod 3 or 2 mod 3.\n    triples = (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6) + \\\n              (count_mod[1] * count_mod[2] * count_mod[0]) + \\\n              (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6) + \\\n              (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6)\n    \n    return triples", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 409, "duration": 65.35434460639954, "task_id": "HumanEval/147"}
{"generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "is_solved": true, "iteration": 1, "prompt_tokens": 248, "completion_tokens": 209, "duration": 7.334159851074219, "task_id": "HumanEval/122"}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    import math\n    return math.ceil(total_water_units / capacity)", "is_solved": true, "iteration": 4, "prompt_tokens": 532, "completion_tokens": 1527, "duration": 15.214771270751953, "task_id": "HumanEval/115"}
{"generated_code": "def minPath(grid, k):\n    from heapq import heappop, heappush\n    n = len(grid)\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\n    heap = []  # Min heap to keep track of (cost, path, x, y)\n    for i in range(n):\n        for j in range(n):\n            heappush(heap, ([grid[i][j]], [grid[i][j]], i, j))\n    while heap:\n        cost, path, x, y = heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                newPath = path + [grid[nx][ny]]\n                newCost = cost + [grid[nx][ny]]\n                heappush(heap, (newCost, newPath, nx, ny))", "is_solved": true, "iteration": 1, "prompt_tokens": 677, "completion_tokens": 662, "duration": 25.284294605255127, "task_id": "HumanEval/129"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "is_solved": true, "iteration": 2, "prompt_tokens": 347, "completion_tokens": 472, "duration": 18.213727474212646, "task_id": "HumanEval/118"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 4, "prompt_tokens": 449, "completion_tokens": 1088, "duration": 12.708519458770752, "task_id": "HumanEval/120"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    length = end_min - start_max + 1\n    return \"YES\" if is_prime(length) else \"NO\"", "is_solved": false, "iteration": 4, "prompt_tokens": 852, "completion_tokens": 1350, "duration": 36.34761047363281, "task_id": "HumanEval/127"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 550, "completion_tokens": 948, "duration": 23.722479343414307, "task_id": "HumanEval/116"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": false, "iteration": 4, "prompt_tokens": 343, "completion_tokens": 661, "duration": 15.316986083984375, "task_id": "HumanEval/135"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 454, "completion_tokens": 826, "duration": 21.58877944946289, "task_id": "HumanEval/125"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        n = abs(n)  # Handle negative numbers\n        if n <= 10:\n            return False\n        first_digit = int(str(n)[0])\n        last_digit = int(str(n)[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": false, "iteration": 4, "prompt_tokens": 492, "completion_tokens": 776, "duration": 27.554805278778076, "task_id": "HumanEval/146"}
{"generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 399, "completion_tokens": 741, "duration": 22.94943380355835, "task_id": "HumanEval/145"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 592, "completion_tokens": 884, "duration": 32.57009220123291, "task_id": "HumanEval/143"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 852, "completion_tokens": 1249, "duration": 42.91892671585083, "task_id": "HumanEval/130"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": false, "iteration": 4, "prompt_tokens": 661, "completion_tokens": 1144, "duration": 36.24397563934326, "task_id": "HumanEval/107"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always the last number and it's odd\n    return sorted(odd_numbers)", "is_solved": false, "iteration": 4, "prompt_tokens": 742, "completion_tokens": 1239, "duration": 40.64641094207764, "task_id": "HumanEval/123"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "is_solved": false, "iteration": 4, "prompt_tokens": 712, "completion_tokens": 1165, "duration": 39.672019243240356, "task_id": "HumanEval/148"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 3.0836386680603027, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 4.151566982269287, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.2566170692443848, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 76, "duration": 5.198654890060425, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 75, "duration": 5.44800877571106, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 203, "duration": 12.070786714553833, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 4.6153974533081055, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 63, "duration": 3.263948440551758, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 6.7566564083099365, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 4.237805604934692, "task_id": "HumanEval/163"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "is_solved": true, "iteration": 1, "prompt_tokens": 238, "completion_tokens": 248, "duration": 8.448440313339233, "task_id": "HumanEval/154"}
{"generated_code": "def find_max(words):\n    \"\"\"Find the word with the maximum number of unique characters.\"\"\"\n    # Sort the list lexicographically first to ensure the first element is returned in case of a tie\n    words.sort()\n    # Sort the list again based on the length of the set of characters in each word, in reverse order to have the maximum first\n    max_word = sorted(words, key=lambda word: len(set(word)), reverse=True)[0]\n    return max_word", "is_solved": true, "iteration": 1, "prompt_tokens": 271, "completion_tokens": 196, "duration": 9.110450506210327, "task_id": "HumanEval/158"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": false, "iteration": 4, "prompt_tokens": 386, "completion_tokens": 686, "duration": 19.471696615219116, "task_id": "HumanEval/161"}
{"generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "is_solved": false, "iteration": 4, "prompt_tokens": 620, "completion_tokens": 1133, "duration": 27.94539475440979, "task_id": "HumanEval/160"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": false, "iteration": 4, "prompt_tokens": 564, "completion_tokens": 1033, "duration": 25.58727717399597, "task_id": "HumanEval/149"}
{"generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades based on a predefined scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "iteration": 4, "prompt_tokens": 1421, "completion_tokens": 1549, "duration": 75.23414540290833, "task_id": "HumanEval/81"}
{"generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 91, "duration": 4.901050806045532, "task_id": "HumanEval/0"}
{"generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If stack is empty, we've closed a group\n                result.append(\"\".join(current_group))\n                current_group = []\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 165, "completion_tokens": 127, "duration": 9.042445659637451, "task_id": "HumanEval/1"}
{"generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "is_solved": true, "iteration": 0, "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.8852148056030273, "task_id": "HumanEval/2"}
{"generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.67342209815979, "task_id": "HumanEval/3"}
{"generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 63, "duration": 5.76858377456665, "task_id": "HumanEval/5"}
{"generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            max_depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 145, "duration": 14.807332992553711, "task_id": "HumanEval/6"}
{"generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 113, "duration": 5.298289775848389, "task_id": "HumanEval/8"}
{"generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n        if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 150, "completion_tokens": 72, "duration": 4.578575372695923, "task_id": "HumanEval/9"}
{"generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 70, "duration": 9.487799882888794, "task_id": "HumanEval/10"}
{"generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 40, "duration": 2.790597438812256, "task_id": "HumanEval/11"}
{"generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.444194793701172, "task_id": "HumanEval/12"}
{"generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 39, "duration": 4.032549858093262, "task_id": "HumanEval/13"}
{"generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "is_solved": true, "iteration": 0, "prompt_tokens": 109, "completion_tokens": 78, "duration": 5.1471498012542725, "task_id": "HumanEval/14"}
{"generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "is_solved": true, "iteration": 0, "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.709285020828247, "task_id": "HumanEval/15"}
{"generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "is_solved": true, "iteration": 0, "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.566406726837158, "task_id": "HumanEval/16"}
{"generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 72, "duration": 7.318256139755249, "task_id": "HumanEval/18"}
{"generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 105, "duration": 5.363126754760742, "task_id": "HumanEval/19"}
{"generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "is_solved": true, "iteration": 0, "prompt_tokens": 216, "completion_tokens": 119, "duration": 8.527263164520264, "task_id": "HumanEval/20"}
{"generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 63, "duration": 3.7052037715911865, "task_id": "HumanEval/21"}
{"generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 103, "duration": 5.283321142196655, "task_id": "HumanEval/22"}
{"generated_code": "def strlen(string: str) -> int:\n    return len(string)", "is_solved": true, "iteration": 0, "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.2508254051208496, "task_id": "HumanEval/23"}
{"generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.9261348247528076, "task_id": "HumanEval/24"}
{"generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.666851997375488, "task_id": "HumanEval/25"}
{"generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "is_solved": true, "iteration": 0, "prompt_tokens": 134, "completion_tokens": 81, "duration": 5.5569610595703125, "task_id": "HumanEval/26"}
{"generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "is_solved": true, "iteration": 0, "prompt_tokens": 98, "completion_tokens": 35, "duration": 2.54945707321167, "task_id": "HumanEval/27"}
{"generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "is_solved": true, "iteration": 0, "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.9087090492248535, "task_id": "HumanEval/28"}
{"generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 82, "duration": 5.560955286026001, "task_id": "HumanEval/29"}
{"generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 163, "completion_tokens": 125, "duration": 5.977392196655273, "task_id": "HumanEval/30"}
{"generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.389772415161133, "task_id": "HumanEval/31"}
{"generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by 3 in a list.\"\"\"\n    # Extract elements at indices divisible by 3 and sort them\n    sorted_thirds = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    # Iterate through the list and replace elements at indices divisible by 3 with sorted ones\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted_thirds.pop(0)\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 200, "completion_tokens": 117, "duration": 10.220791101455688, "task_id": "HumanEval/33"}
{"generated_code": "def unique(l: list):\n    return sorted(set(l))", "is_solved": true, "iteration": 0, "prompt_tokens": 123, "completion_tokens": 16, "duration": 1.6202197074890137, "task_id": "HumanEval/34"}
{"generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "is_solved": true, "iteration": 0, "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.534376859664917, "task_id": "HumanEval/35"}
{"generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.768533229827881, "task_id": "HumanEval/36"}
{"generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "is_solved": true, "iteration": 0, "prompt_tokens": 173, "completion_tokens": 67, "duration": 5.388610124588013, "task_id": "HumanEval/37"}
{"generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 146, "duration": 6.464993000030518, "task_id": "HumanEval/39"}
{"generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 209, "completion_tokens": 117, "duration": 8.60254693031311, "task_id": "HumanEval/40"}
{"generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 118, "duration": 5.461310148239136, "task_id": "HumanEval/42"}
{"generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.4813060760498047, "task_id": "HumanEval/43"}
{"generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.4291226863861084, "task_id": "HumanEval/44"}
{"generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "is_solved": true, "iteration": 0, "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.1049466133117676, "task_id": "HumanEval/45"}
{"generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "is_solved": true, "iteration": 0, "prompt_tokens": 221, "completion_tokens": 123, "duration": 7.770234107971191, "task_id": "HumanEval/46"}
{"generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 80, "duration": 3.9400274753570557, "task_id": "HumanEval/48"}
{"generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "is_solved": true, "iteration": 0, "prompt_tokens": 155, "completion_tokens": 44, "duration": 3.5345394611358643, "task_id": "HumanEval/49"}
{"generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    def func(x):\n        return poly(xs, x)\n    root = fsolve(func, 0.0)\n    return root[0]", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 203, "duration": 12.843940019607544, "task_id": "HumanEval/32"}
{"generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on a straight line,\n    this function calculates the total number of collisions that occur.\n    \"\"\"\n    return n * n", "is_solved": false, "iteration": 4, "prompt_tokens": 386, "completion_tokens": 861, "duration": 19.83058524131775, "task_id": "HumanEval/41"}
{"generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "is_solved": false, "iteration": 4, "prompt_tokens": 389, "completion_tokens": 717, "duration": 18.944175958633423, "task_id": "HumanEval/4"}
{"generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "is_solved": false, "iteration": 4, "prompt_tokens": 435, "completion_tokens": 677, "duration": 28.074044466018677, "task_id": "HumanEval/7"}
{"generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "is_solved": false, "iteration": 4, "prompt_tokens": 444, "completion_tokens": 561, "duration": 21.786946535110474, "task_id": "HumanEval/47"}
{"generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "is_solved": false, "iteration": 4, "prompt_tokens": 669, "completion_tokens": 971, "duration": 29.53704857826233, "task_id": "HumanEval/17"}
{"generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "is_solved": false, "iteration": 4, "prompt_tokens": 687, "completion_tokens": 966, "duration": 29.098023653030396, "task_id": "HumanEval/38"}
{"generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "is_solved": true, "iteration": 0, "prompt_tokens": 94, "completion_tokens": 81, "duration": 5.018915414810181, "task_id": "HumanEval/83"}
{"generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 146, "duration": 10.47556471824646, "task_id": "HumanEval/51"}
{"generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 29, "duration": 1.8357257843017578, "task_id": "HumanEval/52"}
{"generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.532106637954712, "task_id": "HumanEval/53"}
{"generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 31, "duration": 4.092744827270508, "task_id": "HumanEval/54"}
{"generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "is_solved": true, "iteration": 0, "prompt_tokens": 102, "completion_tokens": 66, "duration": 4.6955437660217285, "task_id": "HumanEval/55"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 142, "completion_tokens": 71, "duration": 6.796807527542114, "task_id": "HumanEval/56"}
{"generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "is_solved": true, "iteration": 0, "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.1705732345581055, "task_id": "HumanEval/57"}
{"generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "is_solved": true, "iteration": 0, "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.1703836917877197, "task_id": "HumanEval/58"}
{"generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n\n    while i <= n // i:\n        if n % i == 0:\n            if is_prime(i):\n                prime_factor = i\n            n //= i\n        else:\n            i += 1\n\n    if n > 1 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "is_solved": true, "iteration": 0, "prompt_tokens": 113, "completion_tokens": 146, "duration": 8.139670848846436, "task_id": "HumanEval/59"}
{"generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 109, "duration": 5.404117822647095, "task_id": "HumanEval/60"}
{"generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.973978519439697, "task_id": "HumanEval/61"}
{"generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.5589613914489746, "task_id": "HumanEval/62"}
{"generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "is_solved": true, "iteration": 0, "prompt_tokens": 199, "completion_tokens": 103, "duration": 7.269823789596558, "task_id": "HumanEval/63"}
{"generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "is_solved": true, "iteration": 0, "prompt_tokens": 176, "completion_tokens": 66, "duration": 5.424800872802734, "task_id": "HumanEval/64"}
{"generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "is_solved": true, "iteration": 0, "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.3676066398620605, "task_id": "HumanEval/66"}
{"generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "is_solved": true, "iteration": 0, "prompt_tokens": 260, "completion_tokens": 35, "duration": 4.155840635299683, "task_id": "HumanEval/67"}
{"generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "is_solved": true, "iteration": 0, "prompt_tokens": 362, "completion_tokens": 57, "duration": 4.779836654663086, "task_id": "HumanEval/68"}
{"generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.537588596343994, "task_id": "HumanEval/69"}
{"generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 51, "duration": 3.1393606662750244, "task_id": "HumanEval/70"}
{"generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 222, "duration": 10.683305263519287, "task_id": "HumanEval/71"}
{"generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8316967487335205, "task_id": "HumanEval/72"}
{"generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 68, "duration": 5.660627603530884, "task_id": "HumanEval/73"}
{"generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "is_solved": true, "iteration": 0, "prompt_tokens": 243, "completion_tokens": 106, "duration": 6.466189384460449, "task_id": "HumanEval/74"}
{"generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i + 1, a):\n                if a % (i * j) == 0 and is_prime(j):\n                    k = a // (i * j)\n                    if is_prime(k) and k != i and k != j:\n                        return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 129, "completion_tokens": 148, "duration": 11.911088466644287, "task_id": "HumanEval/75"}
{"generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "is_solved": true, "iteration": 0, "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.1535022258758545, "task_id": "HumanEval/76"}
{"generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 54, "duration": 3.2373454570770264, "task_id": "HumanEval/77"}
{"generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 48, "duration": 3.5244293212890625, "task_id": "HumanEval/78"}
{"generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "is_solved": true, "iteration": 0, "prompt_tokens": 189, "completion_tokens": 44, "duration": 2.9129457473754883, "task_id": "HumanEval/79"}
{"generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 171, "completion_tokens": 76, "duration": 5.632035970687866, "task_id": "HumanEval/80"}
{"generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "is_solved": true, "iteration": 0, "prompt_tokens": 131, "completion_tokens": 69, "duration": 6.189495801925659, "task_id": "HumanEval/82"}
{"generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 33, "duration": 4.214278936386108, "task_id": "HumanEval/84"}
{"generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "is_solved": true, "iteration": 0, "prompt_tokens": 180, "completion_tokens": 27, "duration": 2.1173293590545654, "task_id": "HumanEval/86"}
{"generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    # Sort by row in ascending order and then by column in descending order\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 309, "completion_tokens": 174, "duration": 7.270188093185425, "task_id": "HumanEval/87"}
{"generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "is_solved": true, "iteration": 0, "prompt_tokens": 253, "completion_tokens": 58, "duration": 3.0723776817321777, "task_id": "HumanEval/88"}
{"generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 160, "completion_tokens": 96, "duration": 4.523401498794556, "task_id": "HumanEval/89"}
{"generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list or None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 69, "duration": 3.9035756587982178, "task_id": "HumanEval/90"}
{"generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "is_solved": true, "iteration": 0, "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.122795343399048, "task_id": "HumanEval/92"}
{"generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.492403745651245, "task_id": "HumanEval/95"}
{"generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "is_solved": true, "iteration": 0, "prompt_tokens": 195, "completion_tokens": 81, "duration": 5.037683486938477, "task_id": "HumanEval/96"}
{"generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "is_solved": true, "iteration": 0, "prompt_tokens": 148, "completion_tokens": 42, "duration": 2.6623735427856445, "task_id": "HumanEval/97"}
{"generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "is_solved": true, "iteration": 0, "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.621678829193115, "task_id": "HumanEval/98"}
{"generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "is_solved": true, "iteration": 0, "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.22615647315979, "task_id": "HumanEval/99"}
{"generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\" in a given string.\n    \n    Parameters:\n    - S (str): The input string containing sentences.\n    \n    Returns:\n    - int: The count of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = []\n    for delimiter in '.?!':\n        if sentences:\n            temp_sentences = []\n            for sentence in sentences:\n                temp_sentences.extend(sentence.split(delimiter))\n            sentences = temp_sentences\n        else:\n            sentences = S.split(delimiter)\n    \n    # Remove leading and trailing whitespace from each sentence\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count sentences starting with \"I \"\n    count = sum(sentence.startswith(\"I \") or sentence == \"I\" for sentence in sentences)\n    \n    return count", "is_solved": true, "iteration": 1, "prompt_tokens": 345, "completion_tokens": 278, "duration": 13.905846118927002, "task_id": "HumanEval/91"}
{"generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "is_solved": true, "iteration": 2, "prompt_tokens": 243, "completion_tokens": 317, "duration": 13.046077966690063, "task_id": "HumanEval/65"}
{"generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            # Use ASCII to find the char 2 places ahead\n            encoded_char = chr(ord(char) + 2)\n            encoded_message += encoded_char.swapcase()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "is_solved": true, "iteration": 2, "prompt_tokens": 373, "completion_tokens": 412, "duration": 17.71518063545227, "task_id": "HumanEval/93"}
{"generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "is_solved": true, "iteration": 3, "prompt_tokens": 648, "completion_tokens": 1118, "duration": 21.665274381637573, "task_id": "HumanEval/94"}
{"generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 321, "completion_tokens": 460, "duration": 13.52117371559143, "task_id": "HumanEval/85"}
{"generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "is_solved": false, "iteration": 4, "prompt_tokens": 350, "completion_tokens": 603, "duration": 16.995008945465088, "task_id": "HumanEval/50"}
{"generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades based on a predefined scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "is_solved": false, "iteration": 4, "prompt_tokens": 1443, "completion_tokens": 1549, "duration": 80.18739128112793, "task_id": "HumanEval/81"}
{"generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "is_solved": true, "iteration": 0, "prompt_tokens": 166, "completion_tokens": 27, "duration": 2.5287370681762695, "task_id": "HumanEval/101"}
{"generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "is_solved": true, "iteration": 0, "prompt_tokens": 182, "completion_tokens": 122, "duration": 6.884373903274536, "task_id": "HumanEval/100"}
{"generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer in the range [x, y] inclusive, or -1 if none exists.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "is_solved": true, "iteration": 0, "prompt_tokens": 144, "completion_tokens": 68, "duration": 4.551984548568726, "task_id": "HumanEval/102"}
{"generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "is_solved": true, "iteration": 0, "prompt_tokens": 190, "completion_tokens": 43, "duration": 3.1468777656555176, "task_id": "HumanEval/103"}
{"generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "is_solved": true, "iteration": 0, "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.716570615768433, "task_id": "HumanEval/104"}
{"generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_arr]", "is_solved": true, "iteration": 0, "prompt_tokens": 326, "completion_tokens": 105, "duration": 4.68481969833374, "task_id": "HumanEval/105"}
{"generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 105, "duration": 6.301074981689453, "task_id": "HumanEval/106"}
{"generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 174, "completion_tokens": 75, "duration": 4.562687873840332, "task_id": "HumanEval/108"}
{"generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            if count > 1:\n                return False\n    if count == 1 and arr[0] < arr[-1]:\n        return False\n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 349, "completion_tokens": 93, "duration": 8.07148814201355, "task_id": "HumanEval/109"}
{"generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "is_solved": true, "iteration": 0, "prompt_tokens": 247, "completion_tokens": 79, "duration": 6.166558742523193, "task_id": "HumanEval/110"}
{"generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    max_count = max(count.values(), default=0)\n    return {word: cnt for word, cnt in count.items() if cnt == max_count}", "is_solved": true, "iteration": 0, "prompt_tokens": 201, "completion_tokens": 81, "duration": 7.8249077796936035, "task_id": "HumanEval/111"}
{"generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "is_solved": true, "iteration": 0, "prompt_tokens": 212, "completion_tokens": 39, "duration": 3.993349552154541, "task_id": "HumanEval/112"}
{"generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 223, "completion_tokens": 80, "duration": 6.913622856140137, "task_id": "HumanEval/113"}
{"generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "is_solved": true, "iteration": 0, "prompt_tokens": 138, "completion_tokens": 135, "duration": 8.763658046722412, "task_id": "HumanEval/114"}
{"generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 231, "completion_tokens": 101, "duration": 7.18869161605835, "task_id": "HumanEval/117"}
{"generated_code": "def match_parens(lst):\n    first, second = lst\n    # If both strings start with ')' or end with '(', impossible to match\n    if first[0] == ')' and second[0] == ')' or first[-1] == '(' and second[-1] == '(':\n        return 'No'\n    # Count open and close parentheses in both strings\n    open_count = first.count('(') + second.count('(')\n    close_count = first.count(')') + second.count(')')\n    # If open and close counts are equal, it's possible to match\n    return 'Yes' if open_count == close_count else 'No'", "is_solved": true, "iteration": 0, "prompt_tokens": 218, "completion_tokens": 139, "duration": 9.088886976242065, "task_id": "HumanEval/119"}
{"generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.126593589782715, "task_id": "HumanEval/121"}
{"generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are integers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "is_solved": true, "iteration": 0, "prompt_tokens": 313, "completion_tokens": 260, "duration": 14.714727640151978, "task_id": "HumanEval/124"}
{"generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "is_solved": true, "iteration": 0, "prompt_tokens": 299, "completion_tokens": 74, "duration": 5.5421130657196045, "task_id": "HumanEval/126"}
{"generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum(abs(num) for num in arr) * sign_product", "is_solved": true, "iteration": 0, "prompt_tokens": 172, "completion_tokens": 70, "duration": 5.355010509490967, "task_id": "HumanEval/128"}
{"generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "is_solved": true, "iteration": 0, "prompt_tokens": 121, "completion_tokens": 63, "duration": 5.0878705978393555, "task_id": "HumanEval/131"}
{"generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "is_solved": true, "iteration": 0, "prompt_tokens": 183, "completion_tokens": 55, "duration": 4.27042555809021, "task_id": "HumanEval/132"}
{"generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "is_solved": true, "iteration": 0, "prompt_tokens": 207, "completion_tokens": 27, "duration": 2.666719436645508, "task_id": "HumanEval/133"}
{"generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.endswith(\" \") == False and txt[-1:].isalpha() and (len(txt) == 1 or txt[-2] == \" \")", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 46, "duration": 4.2313172817230225, "task_id": "HumanEval/134"}
{"generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "is_solved": true, "iteration": 0, "prompt_tokens": 188, "completion_tokens": 80, "duration": 10.605051517486572, "task_id": "HumanEval/136"}
{"generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "is_solved": true, "iteration": 0, "prompt_tokens": 191, "completion_tokens": 152, "duration": 9.433364629745483, "task_id": "HumanEval/137"}
{"generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8,\n    # any number less than 8 cannot be written as such a sum.\n    if n < 8:\n        return False\n    # For any even number n >= 8, it can always be written as the sum of four even numbers.\n    # Example: 8 = 2+2+2+2, 10 = 2+2+2+4, and so on.\n    # The condition is that n must be even to be written as such a sum.\n    return n % 2 == 0", "is_solved": true, "iteration": 0, "prompt_tokens": 127, "completion_tokens": 169, "duration": 10.228040218353271, "task_id": "HumanEval/138"}
{"generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "is_solved": true, "iteration": 0, "prompt_tokens": 145, "completion_tokens": 73, "duration": 5.307643413543701, "task_id": "HumanEval/139"}
{"generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "is_solved": true, "iteration": 0, "prompt_tokens": 156, "completion_tokens": 102, "duration": 6.677191257476807, "task_id": "HumanEval/140"}
{"generated_code": "def file_name_check(file_name):\n    import re\n    # Check if the file name matches the required pattern\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{0,2}\\.[txt|exe|dll]{3}$', file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "is_solved": true, "iteration": 0, "prompt_tokens": 264, "completion_tokens": 96, "duration": 60.794787883758545, "task_id": "HumanEval/141"}
{"generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "is_solved": true, "iteration": 0, "prompt_tokens": 219, "completion_tokens": 47, "duration": 3.9619035720825195, "task_id": "HumanEval/142"}
{"generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of elements in a that are multiples of 3, equal to 1 mod 3, and equal to 2 mod 3\n    count_mod = [0, 0, 0]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # There are three cases for the sum to be divisible by 3:\n    # 1. All three numbers are multiples of 3.\n    # 2. One number is a multiple of 3, one number is 1 mod 3, and one number is 2 mod 3.\n    # 3. All three numbers are either 1 mod 3 or 2 mod 3.\n    triples = (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2) // 6) + \\\n              (count_mod[1] * count_mod[2] * count_mod[0]) + \\\n              (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2) // 6) + \\\n              (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2) // 6)\n    \n    return triples", "is_solved": true, "iteration": 0, "prompt_tokens": 215, "completion_tokens": 409, "duration": 65.35434460639954, "task_id": "HumanEval/147"}
{"generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "is_solved": true, "iteration": 0, "prompt_tokens": 205, "completion_tokens": 35, "duration": 3.7399230003356934, "task_id": "HumanEval/144"}
{"generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 <= abs(x) <= 99)", "is_solved": true, "iteration": 3, "prompt_tokens": 312, "completion_tokens": 565, "duration": 14.009030818939209, "task_id": "HumanEval/122"}
{"generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels and i != 0 and i != len(word) - 1:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "is_solved": true, "iteration": 2, "prompt_tokens": 381, "completion_tokens": 472, "duration": 18.172128915786743, "task_id": "HumanEval/118"}
{"generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = []  # Priority queue: (path_cost, path_length, row, col, path_taken)\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], 1, i, j, [grid[i][j]]))\n    \n    while pq:\n        cost, length, row, col, path = heappop(pq)\n        if length == k:\n            return path\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < N and 0 <= new_col < N:\n                new_path = path + [grid[new_row][new_col]]\n                heappush(pq, (cost + grid[new_row][new_col], length + 1, new_row, new_col, new_path))", "is_solved": true, "iteration": 1, "prompt_tokens": 683, "completion_tokens": 662, "duration": 29.289268970489502, "task_id": "HumanEval/129"}
{"generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "is_solved": true, "iteration": 3, "prompt_tokens": 704, "completion_tokens": 1046, "duration": 25.830103874206543, "task_id": "HumanEval/127"}
{"generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "is_solved": false, "iteration": 4, "prompt_tokens": 523, "completion_tokens": 1527, "duration": 14.850526332855225, "task_id": "HumanEval/115"}
{"generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "is_solved": false, "iteration": 4, "prompt_tokens": 415, "completion_tokens": 1088, "duration": 15.73878264427185, "task_id": "HumanEval/120"}
{"generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "is_solved": false, "iteration": 4, "prompt_tokens": 383, "completion_tokens": 661, "duration": 15.147735834121704, "task_id": "HumanEval/135"}
{"generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "is_solved": false, "iteration": 4, "prompt_tokens": 579, "completion_tokens": 1033, "duration": 26.10263752937317, "task_id": "HumanEval/149"}
{"generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "is_solved": false, "iteration": 4, "prompt_tokens": 498, "completion_tokens": 826, "duration": 27.53176259994507, "task_id": "HumanEval/125"}
{"generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "is_solved": false, "iteration": 4, "prompt_tokens": 515, "completion_tokens": 948, "duration": 25.45824646949768, "task_id": "HumanEval/116"}
{"generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "is_solved": false, "iteration": 4, "prompt_tokens": 467, "completion_tokens": 741, "duration": 25.33423638343811, "task_id": "HumanEval/145"}
{"generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "is_solved": false, "iteration": 4, "prompt_tokens": 662, "completion_tokens": 1144, "duration": 30.146684646606445, "task_id": "HumanEval/107"}
{"generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(n):\n        n = abs(n)  # Handle negative numbers\n        if n <= 10:\n            return False\n        first_digit = int(str(n)[0])\n        last_digit = int(str(n)[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    return sum(is_odd_and_greater_than_10(num) for num in nums)", "is_solved": false, "iteration": 4, "prompt_tokens": 495, "completion_tokens": 776, "duration": 29.539342164993286, "task_id": "HumanEval/146"}
{"generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "is_solved": false, "iteration": 4, "prompt_tokens": 575, "completion_tokens": 884, "duration": 29.667038440704346, "task_id": "HumanEval/143"}
{"generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "is_solved": false, "iteration": 4, "prompt_tokens": 740, "completion_tokens": 1165, "duration": 28.923814296722412, "task_id": "HumanEval/148"}
{"generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    trib = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i / 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 1])\n    return trib", "is_solved": false, "iteration": 4, "prompt_tokens": 824, "completion_tokens": 1249, "duration": 44.268386125564575, "task_id": "HumanEval/130"}
{"generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always the last number and it's odd\n    return sorted(odd_numbers)", "is_solved": false, "iteration": 4, "prompt_tokens": 763, "completion_tokens": 1239, "duration": 43.254250288009644, "task_id": "HumanEval/123"}
{"generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "is_solved": true, "iteration": 0, "prompt_tokens": 136, "completion_tokens": 61, "duration": 3.0836386680603027, "task_id": "HumanEval/150"}
{"generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "is_solved": true, "iteration": 0, "prompt_tokens": 187, "completion_tokens": 40, "duration": 4.151566982269287, "task_id": "HumanEval/151"}
{"generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "is_solved": true, "iteration": 0, "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.2566170692443848, "task_id": "HumanEval/152"}
{"generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 76, "duration": 5.198654890060425, "task_id": "HumanEval/153"}
{"generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "is_solved": true, "iteration": 0, "prompt_tokens": 115, "completion_tokens": 75, "duration": 5.44800877571106, "task_id": "HumanEval/155"}
{"generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "is_solved": true, "iteration": 0, "prompt_tokens": 151, "completion_tokens": 203, "duration": 12.070786714553833, "task_id": "HumanEval/156"}
{"generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "is_solved": true, "iteration": 0, "prompt_tokens": 158, "completion_tokens": 45, "duration": 4.6153974533081055, "task_id": "HumanEval/157"}
{"generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 327, "completion_tokens": 63, "duration": 3.263948440551758, "task_id": "HumanEval/159"}
{"generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "is_solved": true, "iteration": 0, "prompt_tokens": 126, "completion_tokens": 99, "duration": 6.7566564083099365, "task_id": "HumanEval/162"}
{"generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "is_solved": true, "iteration": 0, "prompt_tokens": 154, "completion_tokens": 71, "duration": 4.237805604934692, "task_id": "HumanEval/163"}
{"generated_code": "def find_max(words):\n    # Sort the words by lexicographical order and the number of unique characters\n    sorted_words = sorted(words, key=lambda word: (-len(set(word)), word))\n    # Return the first word from the sorted list\n    return sorted_words[0] if sorted_words else \"\"", "is_solved": true, "iteration": 1, "prompt_tokens": 237, "completion_tokens": 196, "duration": 6.724990606307983, "task_id": "HumanEval/158"}
{"generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "is_solved": true, "iteration": 2, "prompt_tokens": 309, "completion_tokens": 427, "duration": 13.149329900741577, "task_id": "HumanEval/154"}
{"generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "is_solved": false, "iteration": 4, "prompt_tokens": 386, "completion_tokens": 686, "duration": 20.794179916381836, "task_id": "HumanEval/161"}
{"generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "is_solved": false, "iteration": 4, "prompt_tokens": 526, "completion_tokens": 1133, "duration": 24.488036394119263, "task_id": "HumanEval/160"}
