{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 940, "completion_tokens": 440, "duration": 12.308395624160767}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 930, "completion_tokens": 497, "duration": 16.5681471824646}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 743, "completion_tokens": 289, "duration": 12.176341533660889}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 959, "completion_tokens": 458, "duration": 11.847453832626343}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 938, "completion_tokens": 448, "duration": 14.343610763549805}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 829, "completion_tokens": 386, "duration": 11.396251440048218}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            max_level = 0\n            current_level = 0\n    levels.append(max_level)\n    return levels", "prompt_tokens": 1013, "completion_tokens": 602, "duration": 12.804230451583862}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 784, "completion_tokens": 333, "duration": 11.948201894760132}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 777, "completion_tokens": 315, "duration": 11.277037382125854}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - k:\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 993, "completion_tokens": 578, "duration": 13.149264812469482}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 917, "completion_tokens": 351, "duration": 10.335856914520264}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 807, "completion_tokens": 393, "duration": 11.359861135482788}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 876, "completion_tokens": 414, "duration": 10.51686978340149}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 822, "completion_tokens": 416, "duration": 11.608366250991821}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 711, "completion_tokens": 325, "duration": 10.100508213043213}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 745, "completion_tokens": 334, "duration": 8.57952094078064}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 736, "completion_tokens": 314, "duration": 9.26060175895691}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [legend[note] for note in notes]", "prompt_tokens": 944, "completion_tokens": 353, "duration": 8.594803810119629}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 788, "completion_tokens": 385, "duration": 10.794755935668945}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 847, "completion_tokens": 446, "duration": 11.204694509506226}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 986, "completion_tokens": 432, "duration": 12.193315982818604}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "prompt_tokens": 950, "completion_tokens": 450, "duration": 10.91524362564087}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 801, "completion_tokens": 352, "duration": 10.414802074432373}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 744, "completion_tokens": 371, "duration": 10.967385292053223}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 778, "completion_tokens": 412, "duration": 11.589723587036133}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 939, "completion_tokens": 447, "duration": 10.426236391067505}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 760, "completion_tokens": 304, "duration": 40.856433629989624}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 705, "completion_tokens": 335, "duration": 9.79507565498352}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 715, "completion_tokens": 310, "duration": 9.058828592300415}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 780, "completion_tokens": 326, "duration": 8.643003702163696}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 823, "completion_tokens": 317, "duration": 8.186365365982056}
{"task_id": "HumanEval/31", "generated_code": "def nth_prime(n):\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n        if count == n:\n            return num\n        num += 1", "prompt_tokens": 950, "completion_tokens": 500, "duration": 12.754138231277466}
{"task_id": "HumanEval/32", "generated_code": "def find_all_zeros(xs):\n    zeros = []\n    # Implement root finding algorithm to find all zeros\n    return zeros", "prompt_tokens": 1227, "completion_tokens": 433, "duration": 9.756399869918823}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    sorted_third_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in sorted_third_indices])\n    for i, val in zip(sorted_third_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 1044, "completion_tokens": 520, "duration": 11.456528425216675}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 724, "completion_tokens": 290, "duration": 11.000925540924072}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 8.88326621055603}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 800, "completion_tokens": 382, "duration": 9.334577560424805}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]\n    return result", "prompt_tokens": 935, "completion_tokens": 446, "duration": 12.945688962936401}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 937, "completion_tokens": 478, "duration": 12.064790964126587}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef sum_prime_fib(limit):\n    total = 0\n    a, b = 0, 1\n    while a <= limit:\n        if is_prime(a):\n            total += a\n        a, b = b, a + b\n    return total\n\ndef prime_fib(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        while not is_prime(fibonacci(num)):\n            num += 1\n        count += 1\n    return fibonacci(num)", "prompt_tokens": 936, "completion_tokens": 661, "duration": 16.25160002708435}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1202, "completion_tokens": 677, "duration": 13.755560636520386}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 947, "completion_tokens": 366, "duration": 8.677758932113647}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 774, "completion_tokens": 276, "duration": 8.621345520019531}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1095, "completion_tokens": 513, "duration": 12.306328058242798}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 752, "completion_tokens": 319, "duration": 9.09190320968628}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 814, "completion_tokens": 439, "duration": 12.072326183319092}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1084, "completion_tokens": 543, "duration": 13.274754524230957}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 789, "completion_tokens": 400, "duration": 9.52768087387085}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 811, "completion_tokens": 384, "duration": 9.619319438934326}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 851, "completion_tokens": 361, "duration": 8.836492538452148}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 820, "completion_tokens": 417, "duration": 12.098580837249756}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 874, "completion_tokens": 361, "duration": 9.091756582260132}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 799, "completion_tokens": 371, "duration": 14.38374948501587}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 626, "completion_tokens": 235, "duration": 7.908369541168213}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 945, "completion_tokens": 384, "duration": 12.729008436203003}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 783, "completion_tokens": 409, "duration": 12.01415729522705}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 923, "completion_tokens": 497, "duration": 19.532943964004517}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 806, "completion_tokens": 381, "duration": 13.138133525848389}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 835, "completion_tokens": 327, "duration": 8.46715259552002}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 805, "completion_tokens": 422, "duration": 12.900191307067871}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 853, "completion_tokens": 382, "duration": 10.614134788513184}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n    return not stack", "prompt_tokens": 943, "completion_tokens": 512, "duration": 14.691951513290405}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 873, "completion_tokens": 378, "duration": 10.588614463806152}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 960, "completion_tokens": 427, "duration": 13.084986686706543}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 844, "completion_tokens": 337, "duration": 13.959502220153809}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 880, "completion_tokens": 466, "duration": 13.527640581130981}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 819, "completion_tokens": 314, "duration": 10.672551393508911}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if fruits[0].isdigit() else 0\n    oranges = int(fruits[-2]) if fruits[-2].isdigit() else 0\n    return n - apples - oranges", "prompt_tokens": 1053, "completion_tokens": 393, "duration": 10.535477638244629}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(index, value) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 1242, "completion_tokens": 395, "duration": 11.490216493606567}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            return num\n    return -1", "prompt_tokens": 959, "completion_tokens": 387, "duration": 14.935423612594604}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 836, "completion_tokens": 327, "duration": 9.039916515350342}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 if a + b > c and a + c > b and b + c > a else -1\n    return round(area, 2)", "prompt_tokens": 925, "completion_tokens": 463, "duration": 15.520781993865967}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1183, "completion_tokens": 446, "duration": 10.645514726638794}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1380, "completion_tokens": 886, "duration": 24.361567497253418}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst2 < total_chars_lst1 else lst1", "prompt_tokens": 1007, "completion_tokens": 400, "duration": 10.230481147766113}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3", "prompt_tokens": 914, "completion_tokens": 558, "duration": 12.678215980529785}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(math.log(x, n)))", "prompt_tokens": 920, "completion_tokens": 357, "duration": 12.727644205093384}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 844, "completion_tokens": 352, "duration": 13.070968389511108}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_digit(digit):\n        primes = {'2', '3', '5', '7', 'B', 'D'}\n        return digit in primes\n\n    count = 0\n    for digit in num:\n        if is_prime_digit(digit):\n            count += 1\n    return count", "prompt_tokens": 1301, "completion_tokens": 472, "duration": 12.858713626861572}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 982, "completion_tokens": 428, "duration": 13.776615858078003}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 1280, "completion_tokens": 566, "duration": 18.43942165374756}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1214, "completion_tokens": 615, "duration": 13.844496726989746}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 937, "completion_tokens": 539, "duration": 11.498460531234741}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 9 * 10 ** (n - 1) + 9 * 10 ** (n - 1) - 9", "prompt_tokens": 770, "completion_tokens": 418, "duration": 12.191532850265503}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 881, "completion_tokens": 335, "duration": 13.242322444915771}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[1::2])", "prompt_tokens": 717, "completion_tokens": 319, "duration": 10.413918256759644}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 890, "completion_tokens": 351, "duration": 11.11906623840332}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1125, "completion_tokens": 368, "duration": 9.412623167037964}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1290, "completion_tokens": 639, "duration": 17.819149494171143}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 2) % 26 + ord('a')) for c in s)", "prompt_tokens": 861, "completion_tokens": 370, "duration": 12.132330656051636}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 875, "completion_tokens": 364, "duration": 10.753147602081299}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence.strip()]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 840, "completion_tokens": 369, "duration": 10.170689344406128}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) and all(isinstance(num, int) for num in [x, y, z])", "prompt_tokens": 894, "completion_tokens": 374, "duration": 11.532278776168823}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 949, "completion_tokens": 534, "duration": 11.980304479598999}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1281, "completion_tokens": 530, "duration": 15.523168087005615}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_case_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_case_keys or upper_case_keys", "prompt_tokens": 919, "completion_tokens": 345, "duration": 10.84454607963562}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 1005, "completion_tokens": 502, "duration": 12.183416604995728}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 789, "completion_tokens": 317, "duration": 9.433671236038208}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if char.upper() in 'AEIOU' and i % 2 == 0)", "prompt_tokens": 757, "completion_tokens": 349, "duration": 10.169341087341309}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "prompt_tokens": 948, "completion_tokens": 376, "duration": 10.100403785705566}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    for i in range(n):\n        stones.append(n + 2*i if n % 2 == 1 else n + 2*i + 1)\n    return stones", "prompt_tokens": 886, "completion_tokens": 369, "duration": 10.243011474609375}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 815, "completion_tokens": 299, "duration": 9.119067907333374}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 887, "completion_tokens": 449, "duration": 11.77108097076416}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 983, "completion_tokens": 450, "duration": 10.453627824783325}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 1029, "completion_tokens": 359, "duration": 10.318963766098022}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    \n    return [num_to_name[num] for num in filtered_arr]", "prompt_tokens": 1152, "completion_tokens": 420, "duration": 11.458840370178223}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_numbers(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total", "prompt_tokens": 882, "completion_tokens": 444, "duration": 12.9720618724823}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 == 0)\n    odd_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1075, "completion_tokens": 453, "duration": 10.780601978302002}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 950, "completion_tokens": 460, "duration": 10.530770778656006}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if sorted(arr) == arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1423, "completion_tokens": 581, "duration": 12.833693981170654}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 994, "completion_tokens": 336, "duration": 9.619178295135498}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {char: count for char, count in hist.items() if count == max_count}\n\n# Test cases\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}", "prompt_tokens": 985, "completion_tokens": 550, "duration": 12.882236957550049}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1359, "completion_tokens": 511, "duration": 12.820093631744385}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), sum(int(d) % 2 != 0 for d in s), s, s) for s in lst]", "prompt_tokens": 964, "completion_tokens": 383, "duration": 9.469182252883911}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 982, "completion_tokens": 561, "duration": 13.713449478149414}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    return total_lowerings", "prompt_tokens": 1574, "completion_tokens": 679, "duration": 14.30564022064209}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 979, "completion_tokens": 362, "duration": 10.576033115386963}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for char in word if char.lower() in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 999, "completion_tokens": 408, "duration": 9.59172511100769}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 940, "completion_tokens": 435, "duration": 11.806533098220825}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n                if count < 0:\n                    return 'No'\n    return 'Yes'", "prompt_tokens": 1178, "completion_tokens": 607, "duration": 17.749542713165283}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1106, "completion_tokens": 389, "duration": 9.084272861480713}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 860, "completion_tokens": 399, "duration": 9.565345287322998}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) <= 99)", "prompt_tokens": 907, "completion_tokens": 379, "duration": 8.895374059677124}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([num for num in sequence if num % 2 != 0])", "prompt_tokens": 1234, "completion_tokens": 546, "duration": 13.839919328689575}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n\n    if day < 1 or day > max_days:\n        return False\n\n    return True", "prompt_tokens": 1169, "completion_tokens": 519, "duration": 14.883031606674194}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 879, "completion_tokens": 354, "duration": 10.065787315368652}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 1149, "completion_tokens": 385, "duration": 10.151252746582031}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"", "prompt_tokens": 1263, "completion_tokens": 583, "duration": 13.973253965377808}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes += abs(num)\n        product *= 1 if num == 0 else num // abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 965, "completion_tokens": 512, "duration": 13.182637929916382}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dfs(row, col, length, path):\n        if length == k:\n            return path\n\n        min_path = None\n        for dr, dc in directions:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < n and 0 <= new_col < n:\n                new_path = dfs(new_row, new_col, length + 1, path + [grid[new_row][new_col]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n\n        return min_path\n\n    return dfs(0, 0, 1, [grid[0][0]])", "prompt_tokens": 1940, "completion_tokens": 1033, "duration": 22.297154188156128}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        trib = [0, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n        return trib", "prompt_tokens": 1300, "completion_tokens": 654, "duration": 18.509766578674316}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0", "prompt_tokens": 761, "completion_tokens": 389, "duration": 11.799654245376587}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 1079, "completion_tokens": 571, "duration": 14.881576776504517}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum((int(num) + 1) ** 2 for num in lst)", "prompt_tokens": 1170, "completion_tokens": 576, "duration": 11.848527908325195}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha() and txt[-2] == ' '\n\n# Test cases\n# print(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\n# print(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "prompt_tokens": 879, "completion_tokens": 427, "duration": 9.78916883468628}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 918, "completion_tokens": 460, "duration": 17.382815837860107}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_max = None\n    pos_min = None\n    for num in lst:\n        if num < 0 and (neg_max is None or num > neg_max):\n            neg_max = num\n        elif num > 0 and (pos_min is None or num < pos_min):\n            pos_min = num\n    return (neg_max, pos_min)", "prompt_tokens": 866, "completion_tokens": 372, "duration": 12.321138858795166}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    return None", "prompt_tokens": 1025, "completion_tokens": 502, "duration": 13.505048990249634}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                for l in range(k, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 835, "completion_tokens": 477, "duration": 15.696211814880371}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 847, "completion_tokens": 393, "duration": 12.199097156524658}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            elif consecutive_spaces > 0:\n                result += '_'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result[:-2] + '-'\n    elif consecutive_spaces > 0:\n        result += '_'\n    return result", "prompt_tokens": 808, "completion_tokens": 425, "duration": 12.18236255645752}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1057, "completion_tokens": 418, "duration": 13.076187372207642}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1076, "completion_tokens": 499, "duration": 10.72835111618042}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1033, "completion_tokens": 530, "duration": 12.684410810470581}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 1060, "completion_tokens": 514, "duration": 12.384430408477783}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 840, "completion_tokens": 336, "duration": 10.533066749572754}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return int(str(n)[0]) % 2 != 0 and int(str(n)[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_odd_digit(num))", "prompt_tokens": 858, "completion_tokens": 379, "duration": 12.082704305648804}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        if a_i % 3 == 0:\n            count += i - 1\n    return count", "prompt_tokens": 1251, "completion_tokens": 681, "duration": 17.65625}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 1031, "completion_tokens": 506, "duration": 10.552024602890015}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1101, "completion_tokens": 462, "duration": 14.741474390029907}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 914, "completion_tokens": 499, "duration": 13.206498146057129}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 879, "completion_tokens": 339, "duration": 8.789708375930786}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1089, "completion_tokens": 359, "duration": 13.117035627365112}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1229, "completion_tokens": 446, "duration": 12.447605609893799}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    concat = a + a\n    return b in concat or any(b in concat[i+1:] + concat[:i+1] for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 903, "completion_tokens": 491, "duration": 11.80468487739563}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 726, "completion_tokens": 361, "duration": 11.19530701637268}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 1006, "completion_tokens": 628, "duration": 17.048999309539795}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1040, "completion_tokens": 567, "duration": 13.552836894989014}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 902, "completion_tokens": 449, "duration": 10.838639736175537}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    left_after_meals = max(0, remaining - need)\n    return [total_eaten, left_after_meals]", "prompt_tokens": 1115, "completion_tokens": 303, "duration": 5.986734390258789}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1072, "completion_tokens": 470, "duration": 13.01769232749939}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 825, "completion_tokens": 361, "duration": 9.227721452713013}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 783, "completion_tokens": 359, "duration": 10.923161029815674}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 826, "completion_tokens": 348, "duration": 11.590213775634766}
