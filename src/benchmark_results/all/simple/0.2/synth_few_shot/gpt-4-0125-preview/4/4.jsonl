{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 579, "duration": 82.78903436660767}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 942, "duration": 40.223639488220215}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 592, "completion_tokens": 410, "duration": 36.039976835250854}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 604, "duration": 70.09414076805115}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 546, "duration": 67.4154486656189}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 618, "duration": 41.55720233917236}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(': current_depth += 1\n            elif char == ')': current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 661, "duration": 73.04290461540222}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 429, "duration": 24.450811624526978}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 537, "duration": 18.28750252723694}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 685, "duration": 31.003080129623413}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 450, "completion_tokens": 725, "duration": 28.71273183822632}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])", "prompt_tokens": 384, "completion_tokens": 485, "duration": 64.75700283050537}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 614, "duration": 24.83997392654419}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 378, "completion_tokens": 463, "duration": 38.9187331199646}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 479, "duration": 23.649794340133667}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 419, "duration": 15.458023309707642}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 468, "duration": 30.54957938194275}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                notes.append(2)\n                i += 2\n            else:\n                notes.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            notes.append(1)\n            i += 2\n        else:\n            i += 1\n    return notes", "prompt_tokens": 480, "completion_tokens": 557, "duration": 31.65362048149109}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 574, "duration": 22.22815752029419}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda word: word_to_num[word])\n    return ' '.join(sorted_nums)", "prompt_tokens": 413, "completion_tokens": 539, "duration": 21.293503999710083}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 657, "duration": 24.813708305358887}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "prompt_tokens": 431, "completion_tokens": 547, "duration": 73.8611843585968}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 382, "duration": 17.737287759780884}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 505, "completion_tokens": 345, "duration": 65.90253376960754}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 360, "completion_tokens": 593, "duration": 19.526294469833374}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 654, "duration": 39.1523871421814}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 392, "completion_tokens": 589, "duration": 35.03164529800415}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 452, "duration": 26.523991584777832}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 445, "duration": 19.30939507484436}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 615, "completion_tokens": 480, "duration": 16.27217149734497}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 379, "duration": 71.9998230934143}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 648, "duration": 36.624977350234985}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 0:\n        return -xs[0] / xs[1]\n    else:\n        raise ValueError('Polynomial does not meet the requirements')\n", "prompt_tokens": 567, "completion_tokens": 644, "duration": 34.15007758140564}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Place sorted elements back\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_sorted.pop(0)\n    return l", "prompt_tokens": 458, "completion_tokens": 776, "duration": 34.48160409927368}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 387, "duration": 31.32554841041565}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 390, "duration": 13.296844482421875}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count_sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_sevens += str(i).count('7')\n    return count_sevens", "prompt_tokens": 387, "completion_tokens": 658, "duration": 38.724018812179565}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    # Extract even-indexed elements and sort them\n    even_indexed_elements = sorted(l[::2])\n    # Merge sorted even-indexed elements with the original odd-indexed elements\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 594, "duration": 46.644744634628296}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 1138, "completion_tokens": 784, "duration": 28.085933208465576}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 636, "duration": 35.08618664741516}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 626, "duration": 41.89808106422424}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since each car moving left to right will eventually collide with each car moving right to left,\n    # and there are n cars in each direction, the total number of collisions is simply n squared.\n    return n * n", "prompt_tokens": 459, "completion_tokens": 525, "duration": 112.83833885192871}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 386, "duration": 19.609238147735596}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 623, "duration": 24.657707929611206}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x //= base\n    return digits", "prompt_tokens": 399, "completion_tokens": 618, "duration": 76.66829657554626}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 417, "duration": 43.06126928329468}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 788, "duration": 77.72838926315308}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 383, "completion_tokens": 668, "duration": 39.73780679702759}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 559, "duration": 34.14937162399292}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result", "prompt_tokens": 413, "completion_tokens": 609, "duration": 38.28444480895996}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 490, "duration": 26.629928588867188}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)", "prompt_tokens": 430, "completion_tokens": 386, "duration": 14.14510989189148}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 494, "duration": 27.01296830177307}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 530, "completion_tokens": 346, "duration": 25.928038597106934}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 497, "duration": 37.34336018562317}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    fib_numbers = [0, 1]\n    for i in range(2, n + 1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    return fib_numbers[n]", "prompt_tokens": 360, "completion_tokens": 568, "duration": 30.528981685638428}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        else:  # bracket == '>'\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 669, "duration": 20.454776525497437}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 570, "duration": 20.456392288208008}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 422, "completion_tokens": 412, "duration": 24.0839102268219}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n    return factor - 1", "prompt_tokens": 371, "completion_tokens": 639, "duration": 85.99951386451721}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 402, "completion_tokens": 441, "duration": 19.890563249588013}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  # Opening bracket\n            stack.append(bracket)\n        elif bracket == ')':  # Closing bracket\n            if not stack:  # No matching opening bracket\n                return False\n            stack.pop()\n    return not stack  # True if stack is empty, False otherwise", "prompt_tokens": 397, "completion_tokens": 815, "duration": 43.751548767089844}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 476, "duration": 30.76542854309082}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={0: 0, 1: 0, 2: 1}):\n    if n in memo:\n        return memo[n]\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 740, "duration": 23.533791303634644}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 551, "duration": 19.48038339614868}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 443, "duration": 62.014878034591675}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 459, "duration": 29.822038888931274}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 448, "duration": 16.230868339538574}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 620, "completion_tokens": 506, "duration": 29.75989031791687}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    valid_integers = [num for num, count in freq.items() if num <= count]\n    return max(valid_integers) if valid_integers else -1", "prompt_tokens": 473, "completion_tokens": 599, "duration": 70.68722343444824}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 616, "duration": 23.747435808181763}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 790, "duration": 29.58902072906494}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 432, "duration": 29.006826162338257}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 548, "duration": 31.8156795501709}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 501, "completion_tokens": 607, "duration": 22.116077423095703}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        divisor = 2\n        while n > 1:\n            while n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n            divisor += 1\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3 and all(is_prime(f) for f in factors)", "prompt_tokens": 387, "completion_tokens": 648, "duration": 19.583738803863525}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    root = x ** (1/n)\n    return root.is_integer()", "prompt_tokens": 450, "completion_tokens": 534, "duration": 20.514871835708618}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 661, "completion_tokens": 560, "duration": 44.33244514465332}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 607, "completion_tokens": 499, "duration": 68.12497973442078}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 452, "duration": 16.153071641921997}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2] or s[i-1] == s[i-2]:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 583, "duration": 23.05859112739563}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 765, "duration": 27.225261926651}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 389, "completion_tokens": 700, "duration": 42.17287755012512}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Special case, only '1' fits the criteria\n    return 2 * (9 ** (n - 1)) - (9 ** (n - 2))", "prompt_tokens": 352, "completion_tokens": 619, "duration": 22.79075789451599}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N = N // 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 495, "duration": 16.628312587738037}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 510, "duration": 27.697826623916626}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 461, "duration": 16.058791637420654}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 567, "completion_tokens": 495, "duration": 19.35885739326477}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_even = (array[0] + array[-1]) % 2 == 0\n    # Sort the array in ascending order if the sum is odd, or in descending order if it's even\n    return sorted(array, reverse=is_even)", "prompt_tokens": 511, "completion_tokens": 610, "duration": 118.73963975906372}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                encrypted = chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted = chr((ord(char) - 65 + shift) % 26 + 65)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 651, "duration": 25.22613787651062}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_list = sorted(set(lst))\n    return unique_sorted_list[1] if len(unique_sorted_list) >= 2 else None", "prompt_tokens": 432, "completion_tokens": 467, "duration": 23.61453652381897}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 679, "completion_tokens": 508, "duration": 66.24199056625366}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x + y == z or x + z == y or y + z == x\n    return False", "prompt_tokens": 443, "completion_tokens": 488, "duration": 32.62764120101929}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 742, "completion_tokens": 724, "duration": 44.81511616706848}
{"task_id": "HumanEval/94", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 581, "duration": 24.40108871459961}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(key, str) for key in d):\n        keys = list(d.keys())\n        return all(key.islower() for key in keys) or all(key.isupper() for key in keys)\n    return False", "prompt_tokens": 477, "completion_tokens": 525, "duration": 21.809435844421387}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return [i for i in range(n) if sieve[i]]", "prompt_tokens": 453, "completion_tokens": 715, "duration": 26.51054358482361}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 406, "completion_tokens": 409, "duration": 22.34373140335083}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 538, "duration": 25.199167013168335}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    lower = math.floor(num)\n    higher = math.ceil(num)\n    if num - lower < higher - num:\n        return lower\n    elif higher - num < num - lower:\n        return higher\n    else: # Equidistant case\n        return higher if num > 0 else lower", "prompt_tokens": 464, "completion_tokens": 544, "duration": 32.71407389640808}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2 * i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 540, "duration": 21.655031204223633}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s):\n    # Split the string by comma or space, filter out empty strings\n    words = re.split(', | ', s)\n    return [word for word in words if word]", "prompt_tokens": 424, "completion_tokens": 447, "duration": 18.604540824890137}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 579, "duration": 32.62807559967041}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(((m - n + 1) * (n + m)) / (2 * (m - n + 1)))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 494, "duration": 29.82085156440735}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 546, "duration": 21.19992184638977}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_list = filtered_sorted[::-1]\n    return [num_to_word[x] for x in reversed_list]", "prompt_tokens": 584, "completion_tokens": 522, "duration": 21.039918184280396}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    def arithmetic_sum(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(arithmetic_sum(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 694, "duration": 34.8931725025177}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 600, "duration": 37.63356328010559}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return sum(int(d) for d in str(n)[1:]) - 2*int(str(n)[1])\n        else:\n            return sum(int(d) for d in str(n))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 756, "completion_tokens": 698, "duration": 26.0217604637146}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr: return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            count += 1\n    return count <= 1", "prompt_tokens": 607, "completion_tokens": 583, "duration": 27.302852153778076}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if even_count_lst2 >= odd_count_lst1:\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 734, "duration": 45.39931774139404}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    # Count occurrences of each letter\n    letter_counts = Counter(test.replace(' ', ''))\n    if not letter_counts:\n        return {}\n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    # Filter and return letters with the maximum count\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 459, "completion_tokens": 569, "duration": 27.650439500808716}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove characters in 'c' from 's'\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 503, "duration": 18.768311262130737}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 21.03805708885193}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num) if current_sum > 0 else current_sum + num\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 736, "duration": 27.040428638458252}
{"task_id": "HumanEval/115", "generated_code": "import math\ndef max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        water_units = sum(row)\n        lowerings_for_row = math.ceil(water_units / capacity)\n        total_lowerings += lowerings_for_row\n    return total_lowerings", "prompt_tokens": 631, "completion_tokens": 630, "duration": 31.064011812210083}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 611, "duration": 22.48595356941223}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for char in word.lower() if char not in vowels and char.isalpha())\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 489, "completion_tokens": 563, "duration": 26.659265756607056}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for char in reversed(word):\n        if char not in vowels:\n            consonant_found = True\n        elif consonant_found:\n            return char\n    return ''", "prompt_tokens": 457, "completion_tokens": 606, "duration": 28.854593515396118}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    balance = 0\n    for char in first:\n        if char == '(': balance += 1\n        else: balance -= 1\n        if balance < 0: return 'No'\n    for char in second:\n        if char == '(': balance += 1\n        else: balance -= 1\n    return 'Yes' if balance == 0 else 'No'", "prompt_tokens": 476, "completion_tokens": 489, "duration": 20.36885690689087}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 412, "duration": 14.93563175201416}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 516, "duration": 27.487852811813354}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 10 or 10 <= abs(x) < 100)", "prompt_tokens": 436, "completion_tokens": 443, "duration": 17.27942705154419}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 673, "duration": 30.544094800949097}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 634, "duration": 32.8087375164032}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n\n# Example usage\nprint(split_words('Hello world!'))  # ['Hello', 'world!']\nprint(split_words('Hello,world!'))  # ['Hello', 'world!']\nprint(split_words('abcdef'))  # 3", "prompt_tokens": 803, "completion_tokens": 643, "duration": 25.11430811882019}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst: return True\n    count = {}\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in count:\n            count[lst[i]] += 1\n            if count[lst[i]] > 1:\n                return False\n        else:\n            count[lst[i]] = 1\n    if lst[-1] in count and count[lst[-1]] > 0:\n        return False\n    return True", "prompt_tokens": 557, "completion_tokens": 570, "duration": 29.652622938156128}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 674, "duration": 83.22533631324768}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        else:\n            sign_product *= -1 if num < 0 else 1\n            magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 591, "duration": 89.69924592971802}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            nonlocal min_path\n            if path < min_path:\n                min_path = path.copy()\n            return\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 704, "completion_tokens": 644, "duration": 23.836650848388672}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return 3\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        memo[n] = tri(n-1, memo) + tri(n-2, memo) + tri(n+1, memo)\n    return memo[n]\n\n# Function to return the first n + 1 numbers of the Tribonacci sequence\ndef tribonacci_sequence(n):\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(tri(i))\n    return sequence\n\n# Example usage\nprint(tribonacci_sequence(3))", "prompt_tokens": 543, "completion_tokens": 633, "duration": 28.776148319244385}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 485, "duration": 30.837610721588135}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                return True\n            elif stack:\n                stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 737, "duration": 35.19056558609009}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 392, "duration": 23.69193172454834}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after stripping\n        return False\n    if txt[-1].isalpha():  # Check if the last character is alphabetical\n        if len(txt) == 1 or txt[-2] == ' ':  # Check if it's not part of a word\n            return True\n    return False", "prompt_tokens": 776, "completion_tokens": 689, "duration": 24.155927896499634}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 411, "completion_tokens": 656, "duration": 41.32010817527771}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 679, "duration": 29.2068772315979}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def normalize(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_norm = normalize(a)\n    b_norm = normalize(b)\n\n    if a_norm > b_norm:\n        return a\n    elif b_norm > a_norm:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 515, "duration": 19.073912382125854}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 548, "duration": 35.57645845413208}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    brazilian_factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        brazilian_factorial *= factorial\n    return brazilian_factorial", "prompt_tokens": 403, "completion_tokens": 588, "duration": 33.527610301971436}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 0:\n                if space_count > 2:\n                    result.append('-')\n                else:\n                    result.extend(['_'] * space_count)\n                space_count = 0\n            result.append(char)\n    if space_count > 0:\n        if space_count > 2:\n            result.append('-')\n        else:\n            result.extend(['_'] * space_count)\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 524, "duration": 29.398537158966064}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 522, "completion_tokens": 623, "duration": 35.723912715911865}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)", "prompt_tokens": 478, "completion_tokens": 545, "duration": 39.53205108642578}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 618, "duration": 22.47854971885681}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1", "prompt_tokens": 463, "completion_tokens": 446, "duration": 20.210899591445923}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 684, "duration": 27.23704433441162}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if str_num[0] in '13579' and str_num[-1] in '13579':\n                count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 591, "duration": 25.58625602722168}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    remainder_counts = [0, 0, 0]\n    for i in range(1, n+1):\n        val = i * i - i + 1\n        remainder_counts[val % 3] += 1\n    return (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6) + (remainder_counts[1] * remainder_counts[2] * (remainder_counts[1] - 1) // 2) + (remainder_counts[1] * remainder_counts[2] * (remainder_counts[2] - 1) // 2) + (remainder_counts[0] * remainder_counts[1] * remainder_counts[2])", "prompt_tokens": 473, "completion_tokens": 619, "duration": 23.2762131690979}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "prompt_tokens": 519, "completion_tokens": 585, "duration": 77.93836688995361}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 446, "duration": 30.27372717857361}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 664, "duration": 24.460087060928345}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 439, "duration": 19.356759071350098}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 438, "duration": 20.938475847244263}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 1065, "completion_tokens": 697, "duration": 24.081733465194702}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 467, "duration": 23.310242652893066}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 442, "duration": 25.225305557250977}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 409, "completion_tokens": 561, "duration": 21.566035985946655}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 550, "duration": 34.565340518951416}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    words.sort(key=lambda x: (-len(set(x)), x))\n    return words[0]", "prompt_tokens": 428, "completion_tokens": 621, "duration": 28.597230434417725}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining < need:\n        # Not enough carrots, eat all remaining\n        total_eaten = number + remaining\n        remaining = 0\n    else:\n        # Enough carrots, eat only what is needed\n        total_eaten = number + need\n        remaining -= need\n    return [total_eaten, remaining]", "prompt_tokens": 585, "completion_tokens": 586, "duration": 29.98072862625122}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 515, "completion_tokens": 510, "duration": 18.49283766746521}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    has_letters = any(char.isalpha() for char in s)\n    if not has_letters:\n        return s[::-1]\n    else:\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)", "prompt_tokens": 415, "completion_tokens": 524, "duration": 23.895162105560303}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 515, "duration": 18.617260217666626}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 553, "duration": 41.9588942527771}
