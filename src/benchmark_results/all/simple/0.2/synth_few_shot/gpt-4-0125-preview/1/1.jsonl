{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 545, "duration": 26.70133328437805}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 829, "duration": 29.878633975982666}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 388, "duration": 32.1689076423645}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 404, "duration": 34.66206669807434}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(x - mean) for x in numbers]\n    return sum(abs_diff) / len(numbers)", "prompt_tokens": 694, "completion_tokens": 605, "duration": 84.51422595977783}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 601, "duration": 33.96262550354004}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(': current_depth += 1\n            elif char == ')': current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 916, "duration": 88.15201187133789}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 557, "duration": 30.283446073532104}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 465, "duration": 34.617955446243286}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 594, "duration": 25.52462911605835}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return ''", "prompt_tokens": 778, "completion_tokens": 897, "duration": 139.36926174163818}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 384, "completion_tokens": 456, "duration": 31.38654851913452}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 571, "duration": 46.04458284378052}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 490, "duration": 29.145437479019165}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 452, "duration": 19.755840301513672}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(x) for x in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 426, "duration": 31.436249256134033}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 468, "duration": 21.885483026504517}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i] == '.':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(1)\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 836, "duration": 44.703646659851074}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 643, "completion_tokens": 509, "duration": 25.41382670402527}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 575, "duration": 32.26516366004944}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i+1] - numbers[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 645, "duration": 27.472697973251343}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 431, "completion_tokens": 519, "duration": 22.95896625518799}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 622, "completion_tokens": 431, "duration": 20.68378710746765}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 505, "completion_tokens": 440, "duration": 30.390820264816284}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 360, "completion_tokens": 562, "duration": 28.05157971382141}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 700, "duration": 84.08911752700806}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 630, "duration": 81.08215999603271}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 421, "duration": 29.04737424850464}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 410, "duration": 72.0808322429657}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 425, "duration": 26.609750747680664}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 382, "duration": 29.863850355148315}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 618, "duration": 71.29167461395264}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    def derivative(xs):\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newtons_method(f, df, x0, tolerance=1e-7):\n        while True:\n            x1 = x0 - f(x0) / sum([coeff * math.pow(x0, i) for i, coeff in enumerate(df)])\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n\n    return newtons_method(lambda x: poly(xs, x), derivative(xs), 0)", "prompt_tokens": 567, "completion_tokens": 754, "duration": 26.779361724853516}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3 (0-based indexing means we adjust by adding 1 to the index)\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Reinsert sorted elements back into their original positions\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 458, "completion_tokens": 669, "duration": 23.78741765022278}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 409, "duration": 30.628377199172974}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 342, "duration": 12.629795551300049}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count_sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_sevens += str(i).count('7')\n    return count_sevens", "prompt_tokens": 387, "completion_tokens": 658, "duration": 40.65035152435303}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted(l[::2])  # Extract and sort even-index elements\n    result = l.copy()  # Copy the original list to preserve odd-index elements\n    result[::2] = even_indices_values  # Merge sorted even-index elements\n    return result", "prompt_tokens": 431, "completion_tokens": 631, "duration": 22.32574725151062}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 510, "duration": 30.069994688034058}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 621, "duration": 73.94659304618835}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 559, "duration": 26.102484226226807}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 462, "duration": 16.961243867874146}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 399, "duration": 26.278728723526}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 794, "duration": 28.098935842514038}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x:\n        digits += str(x % base)\n        x //= base\n    return digits[::-1]", "prompt_tokens": 399, "completion_tokens": 463, "duration": 23.416338443756104}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 416, "duration": 20.778486728668213}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 662, "duration": 35.9788761138916}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 383, "completion_tokens": 539, "duration": 38.71988916397095}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 556, "duration": 19.292786836624146}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 413, "completion_tokens": 566, "duration": 40.23353886604309}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 546, "duration": 32.07944869995117}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 683, "completion_tokens": 531, "duration": 21.874675989151}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 476, "duration": 30.426961183547974}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 351, "duration": 26.832633018493652}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 454, "duration": 15.785088539123535}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 622, "duration": 29.9677312374115}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            if counter == 0:\n                return False\n            counter -= 1\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 771, "duration": 91.46831560134888}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 395, "completion_tokens": 593, "duration": 27.38136100769043}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 424, "duration": 17.006118059158325}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor", "prompt_tokens": 371, "completion_tokens": 617, "duration": 25.733397722244263}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 480, "duration": 29.350945949554443}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '(': counter += 1\n        elif bracket == ')': counter -= 1\n        if counter < 0: return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 789, "duration": 31.98778200149536}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 531, "duration": 22.615533590316772}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 627, "duration": 88.10979557037354}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s: str) -> int:\n    s = s.lower()\n    count = sum(1 for char in s if char in 'aeiou')\n    if s.endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 535, "duration": 18.45996379852295}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    n = len(x_str)\n    shift = shift % n\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 487, "duration": 18.987211227416992}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 378, "duration": 20.31993269920349}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 874, "completion_tokens": 458, "duration": 17.7206974029541}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 538, "duration": 41.41665601730347}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq and num > result:\n            result = num\n    return result", "prompt_tokens": 473, "completion_tokens": 552, "duration": 30.170307397842407}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(sorted_lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(sorted_lst[i])\n        else:\n            result.append(sorted_lst[i])\n            result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 432, "completion_tokens": 704, "duration": 28.27611494064331}
{"task_id": "HumanEval/71", "generated_code": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 682, "duration": 81.28883767127991}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 432, "duration": 18.534428119659424}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 785, "duration": 44.398943185806274}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2 or total1 == total2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 501, "completion_tokens": 636, "duration": 24.826162815093994}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 655, "duration": 69.49601006507874}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    exponent = math.log(x, n)\n    return exponent.is_integer() or math.isclose(exponent, round(exponent))", "prompt_tokens": 450, "completion_tokens": 550, "duration": 22.958186149597168}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a", "prompt_tokens": 418, "completion_tokens": 448, "duration": 25.83980679512024}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for char in num if char in prime_hex_digits)", "prompt_tokens": 1049, "completion_tokens": 544, "duration": 112.12132167816162}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 'db0db'\n    binary_str = ''\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 657, "duration": 25.89272928237915}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 689, "duration": 39.7625777721405}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 741, "duration": 35.001877784729004}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 726, "duration": 86.74571514129639}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Edge case: Only '1' satisfies the condition\n    return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 352, "completion_tokens": 662, "duration": 26.168692111968994}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 476, "duration": 81.40767812728882}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(value for index, value in enumerate(lst) if index % 2 != 0 and value % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 477, "duration": 19.09364151954651}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 449, "duration": 17.326561212539673}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                positions.append((i, j))\n    return sorted(positions, key=lambda pos: (pos[0], -pos[1]))", "prompt_tokens": 567, "completion_tokens": 693, "duration": 41.156702280044556}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    else:\n        sort_descending = (array[0] + array[-1]) % 2 == 0\n        return sorted(array, reverse=sort_descending)", "prompt_tokens": 511, "completion_tokens": 612, "duration": 26.941539764404297}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            encrypted = chr((ord(char) + shift - 97) % 26 + 97)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 606, "duration": 24.11680245399475}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) >= 2:\n        return unique_sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 400, "duration": 23.132160663604736}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    # Splitting the string into sentences based on '.', '?', '!' delimiters\n    sentences = re.split('[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Stripping leading and trailing spaces and checking if it starts with 'I'\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 488, "duration": 25.640835523605347}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 443, "completion_tokens": 515, "duration": 29.07211995124817}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_shift:\n            encoded_message += vowel_shift[char]\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()", "prompt_tokens": 741, "completion_tokens": 728, "duration": 30.144867181777954}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 574, "duration": 30.865046739578247}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    lower_case_seen = False\n    upper_case_seen = False\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case_seen = True\n        elif key.isupper():\n            upper_case_seen = True\n        if lower_case_seen and upper_case_seen:\n            return False\n    return True", "prompt_tokens": 477, "completion_tokens": 571, "duration": 22.10794711112976}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 707, "duration": 75.07466268539429}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 442, "duration": 16.998171091079712}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum(1 for i in range(0, len(s), 2) if s[i] in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 552, "duration": 23.45590353012085}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    number = float(value)\n    fractional_part = number - int(number)\n    if abs(fractional_part) == 0.5:\n        return int(math.ceil(number) if number > 0 else math.floor(number))\n    else:\n        return round(number)", "prompt_tokens": 464, "completion_tokens": 468, "duration": 27.68211817741394}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 432, "duration": 18.30649995803833}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s: str) -> list:\n    s = s.replace(',', ' ')\n    words = s.split()\n    return [word for word in words if word]", "prompt_tokens": 424, "completion_tokens": 480, "duration": 27.101423978805542}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 477, "duration": 28.63391947746277}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 510, "duration": 31.165247201919556}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(digit not in '02468' for digit in str(n))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 533, "duration": 25.10488510131836}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = filtered_sorted[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 553, "duration": 25.26931667327881}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 705, "duration": 33.71201777458191}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 588, "duration": 23.527870893478394}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return sum(int(digit) for digit in str(n)[1:]) - 2*int(str(n)[1])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 485, "duration": 50.69055151939392}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    decrease_count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            decrease_count += 1\n        if decrease_count > 1:\n            return False\n    return True", "prompt_tokens": 607, "completion_tokens": 641, "duration": 83.36780405044556}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(even_lst1) + len(even_lst2) >= len(lst1):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 799, "duration": 43.211334228515625}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    if not test.strip():\n        return {}\n    count = Counter(test.replace(' ', ''))\n    max_count = max(count.values())\n    return {letter: cnt for letter, cnt in count.items() if cnt == max_count}", "prompt_tokens": 459, "completion_tokens": 563, "duration": 33.60560202598572}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    result_string = ''.join(char for char in s if char not in c)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 495, "duration": 32.062601804733276}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        output_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count)\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 24.834005117416382}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_so_far = nums[0]\n    curr_min = nums[0]\n    for i in range(1, len(nums)):\n        curr_min = min(nums[i], curr_min + nums[i])\n        min_so_far = min(min_so_far, curr_min)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 744, "duration": 29.77484393119812}
{"task_id": "HumanEval/115", "generated_code": "import math\ndef max_fill(grid, capacity):\n    total_water = sum(cell == 1 for row in grid for cell in row)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 554, "duration": 67.77504301071167}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 519, "duration": 31.50426483154297}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = set('aeiouAEIOU')\n    result = []\n    words = s.split()\n    for word in words:\n        consonants_count = sum(1 for char in word if char not in vowels)\n        if consonants_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 845, "completion_tokens": 721, "duration": 24.160403966903687}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 503, "duration": 23.68436551094055}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1, s2 = lst\n    open1, close1 = s1.count('('), s1.count(')')\n    open2, close2 = s2.count('('), s2.count(')')\n\n    if open1 + open2 != close1 + close2:\n        return 'No'\n\n    if close1 > open1 or close2 > open2:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 535, "duration": 19.055375576019287}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 548, "duration": 34.274391889572144}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 439, "duration": 26.940101146697998}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 405, "duration": 27.04401159286499}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last element\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 697, "duration": 32.71293330192566}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 623, "duration": 23.554447889328003}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n", "prompt_tokens": 448, "completion_tokens": 493, "duration": 19.40253758430481}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = set()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in seen and lst[i] == lst[i + 1]:\n            return False\n        seen.add(lst[i])\n    if lst[-1] in seen and len(lst) > 1 and lst[-2] == lst[-1]:\n        return False\n    return True", "prompt_tokens": 557, "completion_tokens": 609, "duration": 24.627598762512207}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 594, "duration": 24.361804962158203}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:  # num == 0\n            sign_product = 0\n            break  # No need to continue if we find a zero\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 598, "duration": 24.034713983535767}
{"task_id": "HumanEval/129", "generated_code": "from typing import List\n\ndef dfs(grid, x, y, k, path, visited, min_path):\n    if k == 0:\n        if not min_path[0] or path < min_path[0]:\n            min_path[0] = path.copy()\n        return\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n            path.append(grid[nx][ny])\n            dfs(grid, nx, ny, k-1, path, visited, min_path)\n            path.pop()\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    min_path = [None]\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(grid, i, j, k-1, [grid[i][j]], set(), min_path)\n    return min_path[0]", "prompt_tokens": 704, "completion_tokens": 776, "duration": 125.61706805229187}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    memo = {1: 3}\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x % 2 == 0:\n            memo[x] = 1 + x // 2\n        else:\n            if x + 1 <= n:\n                memo[x] = helper(x-1) + helper(x-2) + helper(x+1)\n            else:\n                memo[x] = helper(x-1) + helper(x-2) + 3 # tri(1) is 3\n        return memo[x]\n\n    for i in range(1, n+1):\n        helper(i)\n    return [memo[i] for i in range(1, n+1)]", "prompt_tokens": 543, "completion_tokens": 748, "duration": 138.45387434959412}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 441, "duration": 30.8308584690094}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 441, "completion_tokens": 764, "duration": 43.03781485557556}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 413, "duration": 25.152656078338623}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1].isspace():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())", "prompt_tokens": 445, "completion_tokens": 451, "duration": 26.841750383377075}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 605, "duration": 35.69617509841919}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 442, "duration": 18.92013120651245}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_if_str(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n    \n    a_converted = convert_if_str(a)\n    b_converted = convert_if_str(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif a_converted < b_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 470, "duration": 26.84101629257202}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 459, "duration": 33.32765340805054}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    factorial = 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 576, "duration": 23.41653609275818}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.extend(['_'] * min(consecutive_spaces, 2))\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.extend(['_'] * min(consecutive_spaces, 2))\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 530, "duration": 32.12507724761963}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,3}\\.+(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 522, "completion_tokens": 604, "duration": 30.486740350723267}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 493, "duration": 39.867647647857666}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 645, "duration": 81.7871425151825}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1", "prompt_tokens": 463, "completion_tokens": 489, "duration": 20.55755305290222}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 564, "duration": 32.22522497177124}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n\n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        str_num = str(abs(num))  # Convert to string and remove sign if negative\n        first_digit, last_digit = int(str_num[0]), int(str_num[-1])\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n\n    return sum(1 for num in nums if meets_criteria(num))", "prompt_tokens": 427, "completion_tokens": 551, "duration": 25.053738832473755}
{"task_id": "HumanEval/147", "generated_code": "from math import comb\n\ndef get_max_triples(n):\n    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        count[value % 3] += 1\n    return comb(count[0], 3) + comb(count[1], 1) * comb(count[2], 1) * comb(count[0], 1)", "prompt_tokens": 473, "completion_tokens": 659, "duration": 39.13525605201721}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "prompt_tokens": 519, "completion_tokens": 564, "duration": 34.03454351425171}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 495, "completion_tokens": 421, "duration": 16.051963806152344}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 670, "duration": 36.022331953048706}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 438, "duration": 16.221714973449707}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 555, "duration": 31.832390785217285}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest = ''\n    max_strength = float('-inf')\n    for ext in extensions:\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            strongest = ext\n            max_strength = strength\n    return f'{class_name}.{strongest}'", "prompt_tokens": 585, "completion_tokens": 570, "duration": 21.73551630973816}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 433, "duration": 16.804295539855957}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 517, "duration": 33.63970184326172}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    num_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman = ''\n    for value, symbol in num_map:\n        while number >= value:\n            number -= value\n            roman += symbol\n    return roman", "prompt_tokens": 737, "completion_tokens": 661, "duration": 46.625003814697266}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 607, "duration": 25.38196563720703}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = ''\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 428, "completion_tokens": 598, "duration": 32.42237305641174}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 477, "duration": 28.705174922943115}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += ' ' + operators[i] + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 642, "duration": 28.849361181259155}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if any(char.isalpha() for char in s):\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        return s[::-1]", "prompt_tokens": 415, "completion_tokens": 554, "duration": 20.61321234703064}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 507, "duration": 19.36422085762024}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 585, "duration": 21.66367816925049}
