{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 582, "duration": 73.12806987762451}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 873, "duration": 129.47258973121643}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 389, "duration": 22.854718446731567}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 635, "duration": 30.5906925201416}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 425, "completion_tokens": 588, "duration": 28.442662477493286}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimiter)\n    return result", "prompt_tokens": 400, "completion_tokens": 615, "duration": 28.36995768547058}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 420, "completion_tokens": 914, "duration": 79.1457028388977}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 489, "duration": 37.724178314208984}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 486, "duration": 23.753905296325684}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 408, "completion_tokens": 674, "duration": 29.14225697517395}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string + string[::-1]", "prompt_tokens": 783, "completion_tokens": 900, "duration": 123.14074206352234}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 384, "completion_tokens": 499, "duration": 22.499871730804443}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 627, "duration": 46.54503631591797}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 580, "duration": 46.270872831344604}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 367, "completion_tokens": 558, "duration": 41.791126012802124}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 363, "duration": 20.236966609954834}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 564, "completion_tokens": 522, "duration": 23.229331016540527}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            beats.append(1)\n            i += 2\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 772, "duration": 33.477105140686035}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 457, "duration": 33.001728773117065}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 425, "duration": 36.7900025844574}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i] - numbers[i+1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 624, "duration": 72.9529938697815}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 431, "completion_tokens": 500, "duration": 37.17247295379639}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 410, "duration": 74.31723141670227}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 382, "duration": 22.769689083099365}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(int(n**0.5), 0, -1):\n        if n % i == 0:\n            if i == n // i or i == 1:\n                continue\n            else:\n                return max(i, n // i)\n    return 1", "prompt_tokens": 360, "completion_tokens": 640, "duration": 27.056397438049316}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 604, "duration": 37.17877960205078}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return [number for number in numbers if number in seen and not seen.remove(number)]", "prompt_tokens": 392, "completion_tokens": 605, "duration": 27.88911485671997}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 356, "completion_tokens": 391, "duration": 24.919374704360962}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 431, "duration": 24.033150672912598}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 411, "duration": 18.719492197036743}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 410, "duration": 36.69818353652954}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 572, "duration": 29.356581449508667}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    def f(x):\n        return poly(xs, x)\n\n    a, b = -1000, 1000  # Assuming root lies within these bounds\n    while b - a > 1e-5:\n        midpoint = (a + b) / 2\n        if f(midpoint) == 0 or abs(b - a) < 1e-5:\n            return midpoint\n        elif f(a) * f(midpoint) < 0:\n            b = midpoint\n        else:\n            a = midpoint\n    return (a + b) / 2", "prompt_tokens": 567, "completion_tokens": 797, "duration": 37.6578426361084}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    to_sort.sort()\n    # Reinsert sorted elements into their original positions\n    for i, val in enumerate(to_sort):\n        l[i * 3] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 619, "duration": 38.01281380653381}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 412, "duration": 22.922128915786743}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 339, "duration": 13.68628454208374}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 585, "duration": 23.92470669746399}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract elements at even indices\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    sorted_even_elements = sorted(even_elements)\n    # Place the sorted elements back into their original positions\n    for i in range(0, len(l), 2):\n        l[i] = sorted_even_elements[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 588, "duration": 40.105767011642456}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 538, "duration": 39.76198720932007}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 638, "duration": 38.58192467689514}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 599, "duration": 76.15626120567322}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since each car moving in one direction will collide with each car moving in the opposite direction,\n    # the total number of collisions is simply n * n (or n squared).\n    return n * n", "prompt_tokens": 459, "completion_tokens": 587, "duration": 25.93928360939026}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 394, "duration": 18.281541347503662}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 790, "duration": 39.77330040931702}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 399, "completion_tokens": 587, "duration": 37.22907876968384}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 419, "duration": 37.188969373703}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 2\n    elif n == 3: return 0\n    dp = [0, 0, 2, 0] + [0] * (n-3)\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 816, "duration": 36.687888860702515}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 383, "completion_tokens": 434, "duration": 18.154234886169434}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 616, "duration": 71.01084184646606}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 413, "completion_tokens": 411, "duration": 66.23600912094116}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 446, "duration": 18.140313386917114}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 685, "completion_tokens": 443, "duration": 18.04438328742981}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 485, "duration": 34.9872682094574}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 315, "duration": 25.986027717590332}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 438, "duration": 27.825968980789185}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    fib_numbers = [0, 1]\n    for i in range(2, n+1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    return fib_numbers[n]", "prompt_tokens": 360, "completion_tokens": 658, "duration": 28.67386269569397}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 400, "completion_tokens": 816, "duration": 123.50051927566528}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    return increasing or decreasing", "prompt_tokens": 395, "completion_tokens": 553, "duration": 28.000593662261963}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 422, "completion_tokens": 412, "duration": 18.48502016067505}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    # Divide by 2 to make n odd\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    # n must be odd at this point, so skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n    return max_prime", "prompt_tokens": 371, "completion_tokens": 764, "duration": 30.274919509887695}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 518, "duration": 36.19392704963684}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 847, "duration": 38.37091326713562}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 482, "duration": 26.616785049438477}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib_values = [0, 0, 1]\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3]\n        fibfib_values.append(next_value)\n    return fibfib_values[n]", "prompt_tokens": 457, "completion_tokens": 682, "duration": 29.64024519920349}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Adding more test cases\nimport doctest\ndoctest.testmod()", "prompt_tokens": 434, "completion_tokens": 563, "duration": 41.48677897453308}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 584, "duration": 29.45300841331482}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 405, "duration": 21.392109870910645}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 474, "duration": 18.934900760650635}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 557, "duration": 32.79575037956238}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_integers = [num for num, count in freq.items() if count >= num]\n    return max(valid_integers) if valid_integers else -1", "prompt_tokens": 473, "completion_tokens": 555, "duration": 38.87366962432861}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(sorted_lst[i])\n            break\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 432, "completion_tokens": 542, "duration": 23.019097805023193}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 658, "duration": 35.65148901939392}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 421, "duration": 32.310200691223145}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 785, "completion_tokens": 634, "duration": 24.143728494644165}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 536, "duration": 23.337363719940186}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_count = 0\n    for i in range(2, a + 1):\n        if a % i == 0:\n            prime_count += 1\n            while a % i == 0:\n                a //= i\n    return prime_count == 3", "prompt_tokens": 387, "completion_tokens": 644, "duration": 80.29540419578552}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 450, "completion_tokens": 506, "duration": 82.21682143211365}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return pow(abs(a), 1/3).is_integer()", "prompt_tokens": 418, "completion_tokens": 466, "duration": 41.83850049972534}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 562, "duration": 69.0916817188263}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    if decimal == 0:\n        return 'db0db'\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 724, "duration": 43.27964425086975}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 698, "duration": 81.89998316764832}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 750, "duration": 38.57353138923645}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)", "prompt_tokens": 389, "completion_tokens": 573, "duration": 40.49971151351929}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))", "prompt_tokens": 352, "completion_tokens": 625, "duration": 27.03964352607727}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 509, "duration": 89.95108079910278}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 509, "duration": 37.22802519798279}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 703, "completion_tokens": 599, "duration": 31.001346111297607}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda k: (k[0], -k[1]))", "prompt_tokens": 567, "completion_tokens": 512, "duration": 30.26460337638855}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order\n    sort_descending = (array[0] + array[-1]) % 2 == 0\n    return sorted(array, reverse=sort_descending)", "prompt_tokens": 511, "completion_tokens": 603, "duration": 41.454784631729126}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 4\n            if char.islower() and shift > ord('z'):\n                shift -= 26\n            elif char.isupper() and shift > ord('Z'):\n                shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 673, "duration": 45.24045205116272}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 432, "completion_tokens": 510, "duration": 28.676250457763672}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split(r'[.?!]+', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I '):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 509, "duration": 31.24899649620056}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 449, "duration": 19.13377094268799}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_char = replacements[char]\n        else:\n            encoded_char = char\n        if encoded_char.islower():\n            encoded_message += encoded_char.upper()\n        else:\n            encoded_message += encoded_char.lower()\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 624, "duration": 127.48014664649963}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 524, "duration": 19.892363786697388}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    keys_are_strings = all(isinstance(key, str) for key in d)\n    if not keys_are_strings:\n        return False\n    all_lower = all(key.islower() for key in d if isinstance(key, str))\n    all_upper = all(key.isupper() for key in d if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 477, "completion_tokens": 549, "duration": 30.34707760810852}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 717, "duration": 118.7529182434082}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 439, "duration": 29.372121572494507}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 622, "duration": 32.68149256706238}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num - int(num) == 0.5 or num - int(num) == -0.5:\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1\n    else:\n        return round(num)", "prompt_tokens": 464, "completion_tokens": 444, "duration": 19.942836046218872}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = n\n    levels = []\n    for _ in range(n):\n        levels.append(stones)\n        stones += 2\n    return levels", "prompt_tokens": 440, "completion_tokens": 592, "duration": 28.569324731826782}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.replace(',', ' ').split()", "prompt_tokens": 651, "completion_tokens": 480, "duration": 45.50597882270813}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 575, "duration": 39.17285132408142}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(((m - n + 1) * (n + m)) / (2 * (m - n + 1)))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 511, "duration": 68.49666213989258}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 606, "duration": 41.222352266311646}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    valid_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = valid_sorted[::-1]\n    return [num_words[x] for x in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 555, "duration": 27.274611949920654}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 633, "duration": 33.82626533508301}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 608, "duration": 29.629982709884644}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) if n >= 0 else -int(d) for d in str(abs(n)))\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 459, "duration": 43.23492407798767}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    breaks = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            breaks += 1\n            if breaks > 1:\n                return False\n    if breaks == 1 and arr[-1] > arr[0]:\n        return False\n    return True", "prompt_tokens": 607, "completion_tokens": 709, "duration": 45.37879300117493}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(x % 2 == 0 for x in lst1) + sum(x % 2 == 0 for x in lst2)\n    if even_count >= len(lst1):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 623, "duration": 24.914501428604126}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        count[word] = count.get(word, 0) + 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 459, "completion_tokens": 640, "duration": 39.372191429138184}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 485, "duration": 81.98359036445618}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 23.691269636154175}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_ending_here = min_so_far = nums[0]\n    for x in nums[1:]:\n        min_ending_here = min(x, min_ending_here + x)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 711, "duration": 33.637680530548096}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 499, "duration": 18.402822256088257}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 673, "duration": 24.8833167552948}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n    \n    result = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 863, "completion_tokens": 682, "duration": 23.459362983703613}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    length = len(word)\n    for i in range(length - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 586, "duration": 40.57107162475586}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(')\n    first_close = lst[0].count(')')\n    second_open = lst[1].count('(')\n    second_close = lst[1].count(')')\n\n    if first_open >= second_close and first_close <= second_open:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 476, "completion_tokens": 890, "duration": 32.58477187156677}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 608, "duration": 29.306353330612183}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 441, "duration": 25.991697549819946}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "prompt_tokens": 436, "completion_tokens": 448, "duration": 19.34130048751831}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last odd number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 680, "duration": 89.15484809875488}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    try:\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    else:\n        return True\n    return True", "prompt_tokens": 571, "completion_tokens": 716, "duration": 45.70235085487366}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 753, "completion_tokens": 561, "duration": 31.280596494674683}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 466, "duration": 32.49850845336914}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    return 'YES' if is_prime(length) else 'NO'", "prompt_tokens": 562, "completion_tokens": 679, "duration": 24.877826690673828}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            return 0\n        abs_sum += abs(num)\n    return abs_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 610, "duration": 80.98651385307312}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    paths = []\n    \n    def dfs(x, y, path, steps):\n        if steps == k:\n            paths.append(path[:])\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, steps + 1)\n                path.pop()\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    \n    paths.sort()\n    return paths[0]\n", "prompt_tokens": 704, "completion_tokens": 951, "duration": 81.03901863098145}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return [1, 3]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            memo[n + 1] = tri(n + 1, memo)[-1]\n        memo[n] = tri(n - 1, memo)[-1] + tri(n - 2, memo)[-1] + memo[n + 1]\n    sequence = tri(n - 1, memo)\n    sequence.append(memo[n])\n    return sequence", "prompt_tokens": 543, "completion_tokens": 742, "duration": 32.82233428955078}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 456, "duration": 29.971847772598267}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                return True\n            elif stack:\n                stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 764, "duration": 87.83840131759644}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num)**2 for num in lst])", "prompt_tokens": 465, "completion_tokens": 376, "duration": 18.506399154663086}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after removing spaces\n        return False\n    return txt[-1].isalpha()", "prompt_tokens": 445, "completion_tokens": 444, "duration": 17.26814341545105}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 594, "duration": 44.22862982749939}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 586, "duration": 119.14481592178345}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float, b_float = to_float(a), to_float(b)\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 533, "duration": 23.586581707000732}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8", "prompt_tokens": 385, "completion_tokens": 633, "duration": 45.22355508804321}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 569, "duration": 30.88971257209778}
{"task_id": "HumanEval/140", "generated_code": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with '-'\n    text = text.replace(' ', '_')  # Replace remaining spaces with '_'\n    return text", "prompt_tokens": 414, "completion_tokens": 397, "duration": 15.924029350280762}
{"task_id": "HumanEval/141", "generated_code": "import re\n\ndef file_name_check(file_name: str) -> str:\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 522, "completion_tokens": 528, "duration": 44.97209072113037}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 503, "duration": 21.899796962738037}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 682, "duration": 75.02668404579163}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 463, "completion_tokens": 442, "duration": 25.907989740371704}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 579, "duration": 85.75348782539368}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n    \n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        last_digit = abs(num) % 10\n        while abs(num) >= 10:\n            num //= 10\n        first_digit = abs(num)\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n    \n    return sum(meets_criteria(num) for num in nums)", "prompt_tokens": 427, "completion_tokens": 630, "duration": 31.79008936882019}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    counts = [0, 0, 0]\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        counts[value % 3] += 1\n    # Count triples where all elements are divisible by 3\n    triples = counts[0] * (counts[0] - 1) * (counts[0] - 2) // 6\n    # Count triples forming a complete residue system modulo 3\n    triples += counts[0] * counts[1] * counts[2]\n    return triples", "prompt_tokens": 473, "completion_tokens": 628, "duration": 34.097389459609985}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets_order = {'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4, 'Jupiter': 5, 'Saturn': 6, 'Uranus': 7, 'Neptune': 8}\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    start, end = sorted([planets_order[planet1], planets_order[planet2]])\n    return tuple(planet for planet, order in planets_order.items() if start < order < end)", "prompt_tokens": 519, "completion_tokens": 655, "duration": 26.2103054523468}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by their length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 444, "duration": 18.892921447753906}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 394, "completion_tokens": 518, "duration": 24.78222632408142}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 420, "duration": 21.136291980743408}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 428, "duration": 18.428203344345093}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        upper = sum(1 for char in extension if char.isupper())\n        lower = sum(1 for char in extension if char.islower())\n        return upper - lower\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'", "prompt_tokens": 585, "completion_tokens": 600, "duration": 84.96140742301941}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 431, "duration": 34.94899797439575}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 462, "duration": 18.221860647201538}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    symbols = [\n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // value[i]):\n            roman_numeral += symbols[i]\n            number -= value[i]\n        i += 1\n    return roman_numeral.lower()", "prompt_tokens": 409, "completion_tokens": 725, "duration": 90.6230103969574}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 649, "duration": 35.25020170211792}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Sort words based on the number of unique characters and lexicographically\n    sorted_words = sorted(words, key=lambda x: (-len(set(x)), x))\n    # Return the first word in the sorted list\n    return sorted_words[0] if sorted_words else ''", "prompt_tokens": 428, "completion_tokens": 616, "duration": 22.3786141872406}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 482, "duration": 70.91357922554016}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += ' ' + operators[i] + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 461, "duration": 32.254793882369995}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.lower() if char.isupper() else char.upper() if char.isalpha() else char for char in s)", "prompt_tokens": 415, "completion_tokens": 496, "duration": 42.24144887924194}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 489, "duration": 21.071240663528442}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = sorted([a, b])\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 550, "duration": 72.26275277137756}
