{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 417, "completion_tokens": 576, "duration": 10.40792727470398}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(': stack.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    return result", "prompt_tokens": 408, "completion_tokens": 624, "duration": 11.998311519622803}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 378, "completion_tokens": 345, "duration": 8.101245641708374}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 412, "completion_tokens": 605, "duration": 12.947664976119995}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 410, "completion_tokens": 571, "duration": 12.550092458724976}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    if result:\n        result.pop()  # Remove the extra delimiter at the end\n    return result", "prompt_tokens": 385, "completion_tokens": 472, "duration": 9.599121570587158}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 405, "completion_tokens": 763, "duration": 15.19473910331726}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 386, "completion_tokens": 450, "duration": 7.849804878234863}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 403, "completion_tokens": 532, "duration": 10.356428623199463}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers):\n    result = []\n    dq = deque()\n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        if dq[0] == i - len(dq):\n            dq.popleft()\n        result.append(numbers[dq[0]])\n    return result", "prompt_tokens": 393, "completion_tokens": 767, "duration": 13.143718004226685}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 435, "completion_tokens": 765, "duration": 15.14885687828064}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 369, "completion_tokens": 459, "duration": 9.283710718154907}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 395, "completion_tokens": 460, "duration": 7.817282676696777}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 363, "completion_tokens": 436, "duration": 9.583121538162231}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 352, "completion_tokens": 436, "duration": 7.970663070678711}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 361, "completion_tokens": 373, "duration": 8.684940814971924}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 363, "completion_tokens": 500, "duration": 9.986773252487183}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    durations = []\n    for note in music_string.split():\n        durations.append(note_duration[note])\n    return durations", "prompt_tokens": 465, "completion_tokens": 495, "duration": 10.756006956100464}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int: \n    count = start = 0 \n    while True: \n        start = string.find(substring, start) \n        if start == -1: \n            break \n        count += 1 \n        start += 1 \n    return count", "prompt_tokens": 381, "completion_tokens": 430, "duration": 9.696027040481567}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 398, "completion_tokens": 542, "duration": 13.386873483657837}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers): \n    numbers.sort() \n    min_diff = float('inf') \n    result = [] \n    for i in range(len(numbers) - 1): \n        diff = abs(numbers[i] - numbers[i+1]) \n        if diff < min_diff: \n            min_diff = diff \n            result = [numbers[i], numbers[i+1]] \n    return tuple(result)", "prompt_tokens": 459, "completion_tokens": 718, "duration": 16.485860586166382}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]", "prompt_tokens": 416, "completion_tokens": 467, "duration": 8.398913383483887}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 384, "completion_tokens": 440, "duration": 11.270022869110107}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 336, "completion_tokens": 336, "duration": 7.174550294876099}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 345, "completion_tokens": 454, "duration": 7.145590305328369}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 419, "completion_tokens": 679, "duration": 10.34041452407837}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 377, "completion_tokens": 456, "duration": 7.182916164398193}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 341, "completion_tokens": 416, "duration": 7.714382171630859}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 350, "completion_tokens": 455, "duration": 8.817628145217896}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 380, "completion_tokens": 393, "duration": 9.133208513259888}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list): return [num for num in l if num > 0]", "prompt_tokens": 406, "completion_tokens": 305, "duration": 8.997573852539062}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True if n > 1 else False", "prompt_tokens": 392, "completion_tokens": 640, "duration": 15.481649398803711}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    x = 0\n    while abs(poly(xs, x)) > 1e-9:\n        x += 0.1\n    return x", "prompt_tokens": 552, "completion_tokens": 421, "duration": 11.123085498809814}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in third_indices]\n    sorted_values.sort()\n    for i, val in zip(third_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 443, "completion_tokens": 474, "duration": 10.847023963928223}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 366, "completion_tokens": 335, "duration": 6.923653602600098}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list): \n    return max(l)", "prompt_tokens": 375, "completion_tokens": 295, "duration": 10.222830295562744}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 372, "completion_tokens": 513, "duration": 13.578219175338745}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([i for i in range(len(l)) if i % 2 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in even_indices]\n    return [sorted_values[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 416, "completion_tokens": 523, "duration": 10.670715808868408}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 451, "completion_tokens": 589, "duration": 11.618823766708374}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(a) and a != 2:\n            count += 1\n        a, b = b, a + b\n    return a", "prompt_tokens": 390, "completion_tokens": 591, "duration": 10.941677570343018}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 452, "completion_tokens": 933, "duration": 18.774264097213745}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "prompt_tokens": 444, "completion_tokens": 563, "duration": 8.65629529953003}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 401, "completion_tokens": 317, "duration": 6.919061183929443}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 450, "completion_tokens": 761, "duration": 13.61013913154602}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result if result else '0'", "prompt_tokens": 384, "completion_tokens": 405, "duration": 6.59200119972229}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 339, "completion_tokens": 350, "duration": 8.297694683074951}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 464, "completion_tokens": 638, "duration": 13.012929916381836}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 368, "completion_tokens": 408, "duration": 9.857160568237305}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 364, "completion_tokens": 485, "duration": 9.200860500335693}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    result = 1 \n    base = 2 \n    n = n % (p - 1) \n    while n > 0: \n        if n % 2 == 1: \n            result = (result * base) % p \n        base = (base * base) % p \n        n = n // 2 \n    return result", "prompt_tokens": 398, "completion_tokens": 664, "duration": 15.113021850585938}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)", "prompt_tokens": 383, "completion_tokens": 490, "duration": 9.10515284538269}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 415, "completion_tokens": 551, "duration": 12.33710265159607}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 372, "completion_tokens": 454, "duration": 10.113879203796387}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 346, "completion_tokens": 265, "duration": 7.049059867858887}
{"task_id": "HumanEval/54", "generated_code": "import collections\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 433, "completion_tokens": 396, "duration": 9.716903448104858}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]", "prompt_tokens": 345, "completion_tokens": 638, "duration": 12.335757970809937}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 385, "completion_tokens": 730, "duration": 11.00871229171753}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list): \n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 616, "completion_tokens": 492, "duration": 11.919808387756348}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 407, "completion_tokens": 382, "duration": 8.471075057983398}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n // i\n            if n == 1:\n                return i\n    return n", "prompt_tokens": 356, "completion_tokens": 620, "duration": 12.627921104431152}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 387, "completion_tokens": 435, "duration": 10.463254928588867}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  \n            stack.append(bracket)\n        else:  \n            if not stack or stack.pop() != '(':  \n                return False\n    return len(stack) == 0", "prompt_tokens": 382, "completion_tokens": 769, "duration": 11.485929727554321}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 401, "completion_tokens": 409, "duration": 7.7081298828125}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 442, "completion_tokens": 677, "duration": 13.737326383590698}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 419, "completion_tokens": 507, "duration": 11.822458028793335}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 375, "completion_tokens": 473, "duration": 9.330619812011719}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 405, "completion_tokens": 431, "duration": 7.388031005859375}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 503, "completion_tokens": 460, "duration": 7.358121395111084}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 605, "completion_tokens": 545, "duration": 10.542540311813354}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in lst:\n        if num > 0 and freq[num] >= num:\n            return num\n    return -1", "prompt_tokens": 458, "completion_tokens": 611, "duration": 12.903021335601807}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 417, "completion_tokens": 509, "duration": 13.351216316223145}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 414, "completion_tokens": 592, "duration": 11.017077207565308}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 523, "completion_tokens": 388, "duration": 9.818970918655396}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 450, "completion_tokens": 923, "duration": 22.150718688964844}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst1 > total_chars_lst2 else lst1", "prompt_tokens": 486, "completion_tokens": 564, "duration": 11.56128454208374}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a): \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 372, "completion_tokens": 586, "duration": 9.150515794754028}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 435, "completion_tokens": 382, "duration": 8.893712997436523}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a", "prompt_tokens": 403, "completion_tokens": 351, "duration": 9.20518159866333}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 592, "completion_tokens": 544, "duration": 9.811753988265991}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 432, "completion_tokens": 374, "duration": 7.19530177116394}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 414, "completion_tokens": 547, "duration": 10.464422702789307}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 563, "completion_tokens": 707, "duration": 11.008199453353882}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 374, "completion_tokens": 516, "duration": 11.271706819534302}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count_start_with_one = 9 * 10 ** (n-1)\n    count_end_with_one = 10 ** (n-1)\n    return count_start_with_one + count_end_with_one", "prompt_tokens": 337, "completion_tokens": 639, "duration": 14.019479036331177}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "prompt_tokens": 426, "completion_tokens": 382, "duration": 13.021744728088379}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 348, "completion_tokens": 368, "duration": 11.206862688064575}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 423, "completion_tokens": 400, "duration": 6.912935733795166}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 552, "completion_tokens": 509, "duration": 11.31362795829773}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, key=lambda x: x[0] + x[-1], reverse=(x[0] + x[-1]) % 2 == 0)", "prompt_tokens": 496, "completion_tokens": 571, "duration": 8.877206325531006}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 403, "completion_tokens": 748, "duration": 15.055426597595215}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    return None", "prompt_tokens": 417, "completion_tokens": 456, "duration": 12.430610418319702}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 400, "completion_tokens": 361, "duration": 9.435986280441284}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 428, "completion_tokens": 469, "duration": 10.929190158843994}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 402, "completion_tokens": 481, "duration": 8.12330961227417}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))", "prompt_tokens": 579, "completion_tokens": 640, "duration": 14.459311246871948}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 462, "completion_tokens": 383, "duration": 10.863942384719849}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 438, "completion_tokens": 566, "duration": 11.095733404159546}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 391, "completion_tokens": 369, "duration": 7.770648002624512}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 365, "completion_tokens": 553, "duration": 10.711912155151367}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return math.ceil(num) if num > 0 else math.floor(num)\n    return round(num)", "prompt_tokens": 449, "completion_tokens": 439, "duration": 14.26864218711853}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 425, "completion_tokens": 466, "duration": 8.665796995162964}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 409, "completion_tokens": 345, "duration": 7.250152349472046}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 387, "completion_tokens": 517, "duration": 10.662876844406128}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 433, "completion_tokens": 427, "duration": 9.029670476913452}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 395, "completion_tokens": 479, "duration": 10.098113298416138}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[x] for x in reversed_arr]", "prompt_tokens": 569, "completion_tokens": 459, "duration": 9.750287055969238}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 417, "completion_tokens": 424, "duration": 11.236693143844604}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 504, "completion_tokens": 527, "duration": 10.804009199142456}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 417, "completion_tokens": 627, "duration": 11.63561725616455}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    min_index = arr.index(min(arr))\n    return min_index == 0 or min_index == n-1", "prompt_tokens": 592, "completion_tokens": 616, "duration": 14.276406288146973}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return 'YES' if sum(x % 2 != 0 for x in lst1) >= sum(x % 2 != 0 for x in lst2) else 'NO'", "prompt_tokens": 490, "completion_tokens": 498, "duration": 9.275014877319336}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values()) if letter_count else 0\n    return {k: v for k, v in letter_count.items() if v == max_count}", "prompt_tokens": 444, "completion_tokens": 606, "duration": 12.249401807785034}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 455, "completion_tokens": 517, "duration": 13.346972942352295}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 466, "completion_tokens": 441, "duration": 11.495887041091919}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 381, "completion_tokens": 586, "duration": 12.77932071685791}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_steps = 0\n    for row in grid:\n        filled_wells = sum(row)\n        total_steps += math.ceil(filled_wells / capacity)\n    return total_steps", "prompt_tokens": 616, "completion_tokens": 714, "duration": 17.528610944747925}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 751, "completion_tokens": 491, "duration": 13.10451889038086}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 474, "completion_tokens": 484, "duration": 13.887478828430176}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 442, "completion_tokens": 640, "duration": 9.996272087097168}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(': stack.pop()\n                else: return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 461, "completion_tokens": 912, "duration": 22.6494140625}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 510, "completion_tokens": 369, "duration": 10.441905975341797}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst): \n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 390, "completion_tokens": 596, "duration": 10.297575950622559}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k): \n    return sum(num for num in arr[:k] if num < 100)", "prompt_tokens": 421, "completion_tokens": 352, "duration": 12.381054878234863}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num, seq=None):\n        if seq is None:\n            seq = [num]\n        if num == 1:\n            return seq\n        if num % 2 == 0:\n            return collatz_sequence(num // 2, seq + [num // 2])\n        else:\n            return collatz_sequence(3 * num + 1, seq + [3 * num + 1])\n\n    collatz_seq = collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 524, "completion_tokens": 701, "duration": 13.930684804916382}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        return 1 <= int(day) <= 31\n    elif month in ['04', '06', '09', '11']:\n        return 1 <= int(day) <= 30\n    elif month == '02':\n        if int(year) % 4 == 0:\n            return 1 <= int(day) <= 29\n        else:\n            return 1 <= int(day) <= 28\n    return False", "prompt_tokens": 556, "completion_tokens": 625, "duration": 58.674152851104736}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 433, "completion_tokens": 454, "duration": 10.372323989868164}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 542, "completion_tokens": 544, "duration": 11.302498817443848}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start + 1)\n    if intersection_length <= 1:\n        return 'NO'\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 547, "completion_tokens": 642, "duration": 14.187149286270142}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num > 0:\n            product_signs *= 1\n        elif num < 0:\n            product_signs *= -1\n    return sum_magnitudes * product_signs", "prompt_tokens": 415, "completion_tokens": 469, "duration": 9.13162636756897}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                new_path = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if new_path:\n                    return new_path\n                visited.remove((new_row, new_col))\n        return None\n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                return path", "prompt_tokens": 1386, "completion_tokens": 1370, "duration": 24.774401664733887}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 528, "completion_tokens": 478, "duration": 12.88317584991455}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 364, "completion_tokens": 505, "duration": 10.577039957046509}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                continue\n            else:\n                return True\n    return False", "prompt_tokens": 426, "completion_tokens": 559, "duration": 13.855586767196655}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 450, "completion_tokens": 410, "duration": 10.580349922180176}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 430, "completion_tokens": 413, "duration": 8.04100227355957}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            result = i - 1\n    return result", "prompt_tokens": 396, "completion_tokens": 516, "duration": 11.115127325057983}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 431, "completion_tokens": 446, "duration": 9.342710256576538}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    a = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b = float(b.replace(',', '.')) if isinstance(b, str) else b\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 434, "completion_tokens": 535, "duration": 13.42063856124878}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(1, n//2 + 1, 2):\n            for k in range(1, n//2 + 1, 2):\n                for l in range(1, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 370, "completion_tokens": 612, "duration": 11.311933994293213}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 388, "completion_tokens": 443, "duration": 14.078184843063354}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_count = 0\n    for char in text:\n        if char == ' ':\n            consecutive_count += 1\n            if consecutive_count > 2:\n                result = result[:-2] + '-'\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_count = 0\n    return result", "prompt_tokens": 399, "completion_tokens": 409, "duration": 6.611064672470093}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 507, "completion_tokens": 477, "duration": 15.405083417892456}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 463, "completion_tokens": 557, "duration": 10.29080605506897}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    words = split_sentence(sentence)\n    prime_length_words = filter_prime_length_words(words)\n    return ' '.join(prime_length_words)", "prompt_tokens": 440, "completion_tokens": 433, "duration": 8.072962999343872}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 448, "completion_tokens": 523, "duration": 9.003868341445923}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 408, "completion_tokens": 443, "duration": 7.382905006408691}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 412, "completion_tokens": 550, "duration": 8.484123706817627}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 458, "completion_tokens": 741, "duration": 18.882981538772583}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = [planet for planet, pos in planets.items() if start < pos < end]\n    return tuple(sorted(result, key=lambda x: planets[x]))", "prompt_tokens": 504, "completion_tokens": 536, "duration": 11.474289417266846}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 480, "completion_tokens": 383, "duration": 10.381536483764648}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 379, "completion_tokens": 546, "duration": 10.549477100372314}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 430, "completion_tokens": 401, "duration": 8.48872423171997}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 523, "completion_tokens": 378, "duration": 6.585008382797241}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    max_strength = max(strengths, key=lambda x: x[1])\n    return f'{class_name}.{max_strength[0]}'", "prompt_tokens": 570, "completion_tokens": 557, "duration": 8.61220383644104}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    return b in double_a or any(b in double_a[i+1:] + double_a[:i+1] for i in range(len(a)))", "prompt_tokens": 422, "completion_tokens": 499, "duration": 11.026318073272705}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 358, "completion_tokens": 478, "duration": 7.399510622024536}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 394, "completion_tokens": 678, "duration": 10.268540620803833}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 401, "completion_tokens": 384, "duration": 6.030538320541382}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 413, "completion_tokens": 580, "duration": 10.497236013412476}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - total_eaten)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 570, "completion_tokens": 489, "duration": 7.839481830596924}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 500, "completion_tokens": 726, "duration": 14.587013483047485}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s[::-1]) if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 400, "completion_tokens": 422, "duration": 6.848176002502441}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()", "prompt_tokens": 369, "completion_tokens": 511, "duration": 8.37605357170105}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 397, "completion_tokens": 394, "duration": 53.15931248664856}
