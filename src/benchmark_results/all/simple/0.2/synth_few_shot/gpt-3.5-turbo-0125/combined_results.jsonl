{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 417, "completion_tokens": 576, "duration": 10.40792727470398}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(': stack.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n        else:\n            current_group += char\n    return result", "prompt_tokens": 408, "completion_tokens": 624, "duration": 11.998311519622803}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 378, "completion_tokens": 345, "duration": 8.101245641708374}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 412, "completion_tokens": 605, "duration": 12.947664976119995}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 410, "completion_tokens": 571, "duration": 12.550092458724976}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    if result:\n        result.pop()  # Remove the extra delimiter at the end\n    return result", "prompt_tokens": 385, "completion_tokens": 472, "duration": 9.599121570587158}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 405, "completion_tokens": 763, "duration": 15.19473910331726}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 386, "completion_tokens": 450, "duration": 7.849804878234863}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 403, "completion_tokens": 532, "duration": 10.356428623199463}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers):\n    result = []\n    dq = deque()\n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        if dq[0] == i - len(dq):\n            dq.popleft()\n        result.append(numbers[dq[0]])\n    return result", "prompt_tokens": 393, "completion_tokens": 767, "duration": 13.143718004226685}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 435, "completion_tokens": 765, "duration": 15.14885687828064}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 369, "completion_tokens": 459, "duration": 9.283710718154907}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 395, "completion_tokens": 460, "duration": 7.817282676696777}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 363, "completion_tokens": 436, "duration": 9.583121538162231}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 352, "completion_tokens": 436, "duration": 7.970663070678711}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 361, "completion_tokens": 373, "duration": 8.684940814971924}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 363, "completion_tokens": 500, "duration": 9.986773252487183}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    durations = []\n    for note in music_string.split():\n        durations.append(note_duration[note])\n    return durations", "prompt_tokens": 465, "completion_tokens": 495, "duration": 10.756006956100464}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int: \n    count = start = 0 \n    while True: \n        start = string.find(substring, start) \n        if start == -1: \n            break \n        count += 1 \n        start += 1 \n    return count", "prompt_tokens": 381, "completion_tokens": 430, "duration": 9.696027040481567}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 398, "completion_tokens": 542, "duration": 13.386873483657837}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers): \n    numbers.sort() \n    min_diff = float('inf') \n    result = [] \n    for i in range(len(numbers) - 1): \n        diff = abs(numbers[i] - numbers[i+1]) \n        if diff < min_diff: \n            min_diff = diff \n            result = [numbers[i], numbers[i+1]] \n    return tuple(result)", "prompt_tokens": 459, "completion_tokens": 718, "duration": 16.485860586166382}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]", "prompt_tokens": 416, "completion_tokens": 467, "duration": 8.398913383483887}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 384, "completion_tokens": 440, "duration": 11.270022869110107}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 336, "completion_tokens": 336, "duration": 7.174550294876099}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 345, "completion_tokens": 454, "duration": 7.145590305328369}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 419, "completion_tokens": 679, "duration": 10.34041452407837}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 377, "completion_tokens": 456, "duration": 7.182916164398193}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 341, "completion_tokens": 416, "duration": 7.714382171630859}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 350, "completion_tokens": 455, "duration": 8.817628145217896}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 380, "completion_tokens": 393, "duration": 9.133208513259888}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list): return [num for num in l if num > 0]", "prompt_tokens": 406, "completion_tokens": 305, "duration": 8.997573852539062}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True if n > 1 else False", "prompt_tokens": 392, "completion_tokens": 640, "duration": 15.481649398803711}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    x = 0\n    while abs(poly(xs, x)) > 1e-9:\n        x += 0.1\n    return x", "prompt_tokens": 552, "completion_tokens": 421, "duration": 11.123085498809814}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in third_indices]\n    sorted_values.sort()\n    for i, val in zip(third_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 443, "completion_tokens": 474, "duration": 10.847023963928223}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 366, "completion_tokens": 335, "duration": 6.923653602600098}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list): \n    return max(l)", "prompt_tokens": 375, "completion_tokens": 295, "duration": 10.222830295562744}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 372, "completion_tokens": 513, "duration": 13.578219175338745}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([i for i in range(len(l)) if i % 2 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in even_indices]\n    return [sorted_values[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 416, "completion_tokens": 523, "duration": 10.670715808868408}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 451, "completion_tokens": 589, "duration": 11.618823766708374}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if is_prime(a) and a != 2:\n            count += 1\n        a, b = b, a + b\n    return a", "prompt_tokens": 390, "completion_tokens": 591, "duration": 10.941677570343018}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 452, "completion_tokens": 933, "duration": 18.774264097213745}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "prompt_tokens": 444, "completion_tokens": 563, "duration": 8.65629529953003}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 401, "completion_tokens": 317, "duration": 6.919061183929443}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 450, "completion_tokens": 761, "duration": 13.61013913154602}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result if result else '0'", "prompt_tokens": 384, "completion_tokens": 405, "duration": 6.59200119972229}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 339, "completion_tokens": 350, "duration": 8.297694683074951}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 464, "completion_tokens": 638, "duration": 13.012929916381836}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 368, "completion_tokens": 408, "duration": 9.857160568237305}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 364, "completion_tokens": 485, "duration": 9.200860500335693}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    result = 1 \n    base = 2 \n    n = n % (p - 1) \n    while n > 0: \n        if n % 2 == 1: \n            result = (result * base) % p \n        base = (base * base) % p \n        n = n // 2 \n    return result", "prompt_tokens": 398, "completion_tokens": 664, "duration": 15.113021850585938}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str) -> str:\n    return ''.join(chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s)", "prompt_tokens": 383, "completion_tokens": 490, "duration": 9.10515284538269}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 415, "completion_tokens": 551, "duration": 12.33710265159607}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 372, "completion_tokens": 454, "duration": 10.113879203796387}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 346, "completion_tokens": 265, "duration": 7.049059867858887}
{"task_id": "HumanEval/54", "generated_code": "import collections\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 433, "completion_tokens": 396, "duration": 9.716903448104858}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]", "prompt_tokens": 345, "completion_tokens": 638, "duration": 12.335757970809937}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 385, "completion_tokens": 730, "duration": 11.00871229171753}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list): \n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 616, "completion_tokens": 492, "duration": 11.919808387756348}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 407, "completion_tokens": 382, "duration": 8.471075057983398}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n = n // i\n            if n == 1:\n                return i\n    return n", "prompt_tokens": 356, "completion_tokens": 620, "duration": 12.627921104431152}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 387, "completion_tokens": 435, "duration": 10.463254928588867}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  \n            stack.append(bracket)\n        else:  \n            if not stack or stack.pop() != '(':  \n                return False\n    return len(stack) == 0", "prompt_tokens": 382, "completion_tokens": 769, "duration": 11.485929727554321}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 401, "completion_tokens": 409, "duration": 7.7081298828125}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 442, "completion_tokens": 677, "duration": 13.737326383590698}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 419, "completion_tokens": 507, "duration": 11.822458028793335}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 375, "completion_tokens": 473, "duration": 9.330619812011719}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 405, "completion_tokens": 431, "duration": 7.388031005859375}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 503, "completion_tokens": 460, "duration": 7.358121395111084}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 605, "completion_tokens": 545, "duration": 10.542540311813354}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num in lst:\n        if num > 0 and freq[num] >= num:\n            return num\n    return -1", "prompt_tokens": 458, "completion_tokens": 611, "duration": 12.903021335601807}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 417, "completion_tokens": 509, "duration": 13.351216316223145}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 414, "completion_tokens": 592, "duration": 11.017077207565308}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 523, "completion_tokens": 388, "duration": 9.818970918655396}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 450, "completion_tokens": 923, "duration": 22.150718688964844}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst1 > total_chars_lst2 else lst1", "prompt_tokens": 486, "completion_tokens": 564, "duration": 11.56128454208374}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a): \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 372, "completion_tokens": 586, "duration": 9.150515794754028}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 435, "completion_tokens": 382, "duration": 8.893712997436523}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a", "prompt_tokens": 403, "completion_tokens": 351, "duration": 9.20518159866333}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 592, "completion_tokens": 544, "duration": 9.811753988265991}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 432, "completion_tokens": 374, "duration": 7.19530177116394}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 414, "completion_tokens": 547, "duration": 10.464422702789307}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 563, "completion_tokens": 707, "duration": 11.008199453353882}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 374, "completion_tokens": 516, "duration": 11.271706819534302}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count_start_with_one = 9 * 10 ** (n-1)\n    count_end_with_one = 10 ** (n-1)\n    return count_start_with_one + count_end_with_one", "prompt_tokens": 337, "completion_tokens": 639, "duration": 14.019479036331177}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "prompt_tokens": 426, "completion_tokens": 382, "duration": 13.021744728088379}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 348, "completion_tokens": 368, "duration": 11.206862688064575}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 423, "completion_tokens": 400, "duration": 6.912935733795166}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 552, "completion_tokens": 509, "duration": 11.31362795829773}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, key=lambda x: x[0] + x[-1], reverse=(x[0] + x[-1]) % 2 == 0)", "prompt_tokens": 496, "completion_tokens": 571, "duration": 8.877206325531006}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 403, "completion_tokens": 748, "duration": 15.055426597595215}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    return None", "prompt_tokens": 417, "completion_tokens": 456, "duration": 12.430610418319702}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 400, "completion_tokens": 361, "duration": 9.435986280441284}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 428, "completion_tokens": 469, "duration": 10.929190158843994}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 402, "completion_tokens": 481, "duration": 8.12330961227417}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))", "prompt_tokens": 579, "completion_tokens": 640, "duration": 14.459311246871948}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 462, "completion_tokens": 383, "duration": 10.863942384719849}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 438, "completion_tokens": 566, "duration": 11.095733404159546}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 391, "completion_tokens": 369, "duration": 7.770648002624512}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 365, "completion_tokens": 553, "duration": 10.711912155151367}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return math.ceil(num) if num > 0 else math.floor(num)\n    return round(num)", "prompt_tokens": 449, "completion_tokens": 439, "duration": 14.26864218711853}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 425, "completion_tokens": 466, "duration": 8.665796995162964}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 409, "completion_tokens": 345, "duration": 7.250152349472046}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 387, "completion_tokens": 517, "duration": 10.662876844406128}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 433, "completion_tokens": 427, "duration": 9.029670476913452}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 395, "completion_tokens": 479, "duration": 10.098113298416138}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[x] for x in reversed_arr]", "prompt_tokens": 569, "completion_tokens": 459, "duration": 9.750287055969238}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 417, "completion_tokens": 424, "duration": 11.236693143844604}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 504, "completion_tokens": 527, "duration": 10.804009199142456}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 417, "completion_tokens": 627, "duration": 11.63561725616455}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    min_index = arr.index(min(arr))\n    return min_index == 0 or min_index == n-1", "prompt_tokens": 592, "completion_tokens": 616, "duration": 14.276406288146973}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return 'YES' if sum(x % 2 != 0 for x in lst1) >= sum(x % 2 != 0 for x in lst2) else 'NO'", "prompt_tokens": 490, "completion_tokens": 498, "duration": 9.275014877319336}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values()) if letter_count else 0\n    return {k: v for k, v in letter_count.items() if v == max_count}", "prompt_tokens": 444, "completion_tokens": 606, "duration": 12.249401807785034}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 455, "completion_tokens": 517, "duration": 13.346972942352295}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 466, "completion_tokens": 441, "duration": 11.495887041091919}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 381, "completion_tokens": 586, "duration": 12.77932071685791}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_steps = 0\n    for row in grid:\n        filled_wells = sum(row)\n        total_steps += math.ceil(filled_wells / capacity)\n    return total_steps", "prompt_tokens": 616, "completion_tokens": 714, "duration": 17.528610944747925}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 751, "completion_tokens": 491, "duration": 13.10451889038086}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 474, "completion_tokens": 484, "duration": 13.887478828430176}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 442, "completion_tokens": 640, "duration": 9.996272087097168}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(': stack.pop()\n                else: return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 461, "completion_tokens": 912, "duration": 22.6494140625}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 510, "completion_tokens": 369, "duration": 10.441905975341797}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst): \n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 390, "completion_tokens": 596, "duration": 10.297575950622559}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k): \n    return sum(num for num in arr[:k] if num < 100)", "prompt_tokens": 421, "completion_tokens": 352, "duration": 12.381054878234863}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num, seq=None):\n        if seq is None:\n            seq = [num]\n        if num == 1:\n            return seq\n        if num % 2 == 0:\n            return collatz_sequence(num // 2, seq + [num // 2])\n        else:\n            return collatz_sequence(3 * num + 1, seq + [3 * num + 1])\n\n    collatz_seq = collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 524, "completion_tokens": 701, "duration": 13.930684804916382}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        return 1 <= int(day) <= 31\n    elif month in ['04', '06', '09', '11']:\n        return 1 <= int(day) <= 30\n    elif month == '02':\n        if int(year) % 4 == 0:\n            return 1 <= int(day) <= 29\n        else:\n            return 1 <= int(day) <= 28\n    return False", "prompt_tokens": 556, "completion_tokens": 625, "duration": 58.674152851104736}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 433, "completion_tokens": 454, "duration": 10.372323989868164}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 542, "completion_tokens": 544, "duration": 11.302498817443848}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start + 1)\n    if intersection_length <= 1:\n        return 'NO'\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 547, "completion_tokens": 642, "duration": 14.187149286270142}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num > 0:\n            product_signs *= 1\n        elif num < 0:\n            product_signs *= -1\n    return sum_magnitudes * product_signs", "prompt_tokens": 415, "completion_tokens": 469, "duration": 9.13162636756897}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                new_path = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if new_path:\n                    return new_path\n                visited.remove((new_row, new_col))\n        return None\n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                return path", "prompt_tokens": 1386, "completion_tokens": 1370, "duration": 24.774401664733887}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 528, "completion_tokens": 478, "duration": 12.88317584991455}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 364, "completion_tokens": 505, "duration": 10.577039957046509}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                continue\n            else:\n                return True\n    return False", "prompt_tokens": 426, "completion_tokens": 559, "duration": 13.855586767196655}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 450, "completion_tokens": 410, "duration": 10.580349922180176}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 430, "completion_tokens": 413, "duration": 8.04100227355957}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            result = i - 1\n    return result", "prompt_tokens": 396, "completion_tokens": 516, "duration": 11.115127325057983}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 431, "completion_tokens": 446, "duration": 9.342710256576538}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    a = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b = float(b.replace(',', '.')) if isinstance(b, str) else b\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 434, "completion_tokens": 535, "duration": 13.42063856124878}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(1, n//2 + 1, 2):\n            for k in range(1, n//2 + 1, 2):\n                for l in range(1, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 370, "completion_tokens": 612, "duration": 11.311933994293213}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 388, "completion_tokens": 443, "duration": 14.078184843063354}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_count = 0\n    for char in text:\n        if char == ' ':\n            consecutive_count += 1\n            if consecutive_count > 2:\n                result = result[:-2] + '-'\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_count = 0\n    return result", "prompt_tokens": 399, "completion_tokens": 409, "duration": 6.611064672470093}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 507, "completion_tokens": 477, "duration": 15.405083417892456}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 463, "completion_tokens": 557, "duration": 10.29080605506897}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    words = split_sentence(sentence)\n    prime_length_words = filter_prime_length_words(words)\n    return ' '.join(prime_length_words)", "prompt_tokens": 440, "completion_tokens": 433, "duration": 8.072962999343872}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 448, "completion_tokens": 523, "duration": 9.003868341445923}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 408, "completion_tokens": 443, "duration": 7.382905006408691}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 412, "completion_tokens": 550, "duration": 8.484123706817627}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 458, "completion_tokens": 741, "duration": 18.882981538772583}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = [planet for planet, pos in planets.items() if start < pos < end]\n    return tuple(sorted(result, key=lambda x: planets[x]))", "prompt_tokens": 504, "completion_tokens": 536, "duration": 11.474289417266846}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 480, "completion_tokens": 383, "duration": 10.381536483764648}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 379, "completion_tokens": 546, "duration": 10.549477100372314}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 430, "completion_tokens": 401, "duration": 8.48872423171997}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 523, "completion_tokens": 378, "duration": 6.585008382797241}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    max_strength = max(strengths, key=lambda x: x[1])\n    return f'{class_name}.{max_strength[0]}'", "prompt_tokens": 570, "completion_tokens": 557, "duration": 8.61220383644104}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    return b in double_a or any(b in double_a[i+1:] + double_a[:i+1] for i in range(len(a)))", "prompt_tokens": 422, "completion_tokens": 499, "duration": 11.026318073272705}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 358, "completion_tokens": 478, "duration": 7.399510622024536}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 394, "completion_tokens": 678, "duration": 10.268540620803833}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 401, "completion_tokens": 384, "duration": 6.030538320541382}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 413, "completion_tokens": 580, "duration": 10.497236013412476}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - total_eaten)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 570, "completion_tokens": 489, "duration": 7.839481830596924}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 500, "completion_tokens": 726, "duration": 14.587013483047485}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s[::-1]) if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 400, "completion_tokens": 422, "duration": 6.848176002502441}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()", "prompt_tokens": 369, "completion_tokens": 511, "duration": 8.37605357170105}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 397, "completion_tokens": 394, "duration": 53.15931248664856}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) <= threshold:\n            return True\n    return False", "prompt_tokens": 436, "completion_tokens": 521, "duration": 8.783498048782349}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(': \n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        current_group += char\n        if not stack:\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 427, "completion_tokens": 742, "duration": 16.200170755386353}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 397, "completion_tokens": 355, "duration": 6.333184719085693}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 431, "completion_tokens": 583, "duration": 9.851169109344482}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 429, "completion_tokens": 562, "duration": 10.022179365158081}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 404, "completion_tokens": 484, "duration": 6.906358242034912}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': current_depth += 1\n        elif char == ')': current_depth -= 1\n        max_depth = max(max_depth, current_depth)\n        if char == ' ': depths.append(max_depth)\n    return depths", "prompt_tokens": 424, "completion_tokens": 921, "duration": 19.23134446144104}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]: \n    return [s for s in strings if substring in s]", "prompt_tokens": 405, "completion_tokens": 503, "duration": 8.0620756149292}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 422, "completion_tokens": 477, "duration": 9.264649868011475}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers):\n    result = []\n    dq = deque()\n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        if dq[0] == i - len(dq):\n            dq.popleft()\n        result.append(numbers[dq[0]])\n    return result", "prompt_tokens": 412, "completion_tokens": 741, "duration": 14.424638271331787}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 454, "completion_tokens": 860, "duration": 20.01991057395935}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 388, "completion_tokens": 524, "duration": 7.808239459991455}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 414, "completion_tokens": 489, "duration": 12.2005033493042}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 382, "completion_tokens": 442, "duration": 9.36768388748169}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 557, "completion_tokens": 431, "duration": 7.12491250038147}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 380, "completion_tokens": 362, "duration": 12.384697675704956}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 382, "completion_tokens": 379, "duration": 6.4613916873931885}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = [note_duration[note] for note in notes]\n    return result", "prompt_tokens": 484, "completion_tokens": 501, "duration": 8.687718629837036}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 400, "completion_tokens": 440, "duration": 7.777849197387695}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 417, "completion_tokens": 525, "duration": 11.599790334701538}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = [numbers[i], numbers[i+1]]\n    return tuple(result)", "prompt_tokens": 478, "completion_tokens": 655, "duration": 10.755098342895508}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 435, "completion_tokens": 468, "duration": 9.186380386352539}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 403, "completion_tokens": 415, "duration": 15.337738037109375}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 355, "completion_tokens": 319, "duration": 9.594054937362671}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 364, "completion_tokens": 512, "duration": 10.980993747711182}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 438, "completion_tokens": 771, "duration": 16.975391387939453}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 396, "completion_tokens": 467, "duration": 10.016920566558838}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 360, "completion_tokens": 433, "duration": 8.579669952392578}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 369, "completion_tokens": 406, "duration": 10.935158252716064}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 399, "completion_tokens": 411, "duration": 7.175906419754028}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 656, "completion_tokens": 405, "duration": 8.153930902481079}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 411, "completion_tokens": 575, "duration": 11.671858787536621}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    x = -10.0\n    while True:\n        if abs(poly(xs, x)) < 1e-9:\n            return x\n        x += 0.001", "prompt_tokens": 571, "completion_tokens": 640, "duration": 9.90540099143982}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    for i in sorted_indices:\n        l[i] = sorted_values.pop(0)\n    return l", "prompt_tokens": 462, "completion_tokens": 535, "duration": 8.352078199386597}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 385, "completion_tokens": 332, "duration": 6.841283082962036}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 394, "completion_tokens": 327, "duration": 6.371485471725464}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 391, "completion_tokens": 527, "duration": 9.15093183517456}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted(l[::2])\n    for i, val in enumerate(even_indices):\n        l[2*i] = val\n    return l", "prompt_tokens": 435, "completion_tokens": 401, "duration": 8.245853662490845}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 470, "completion_tokens": 601, "duration": 11.436465740203857}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and fibonacci(num):\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 409, "completion_tokens": 680, "duration": 13.422446250915527}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 471, "completion_tokens": 976, "duration": 15.022465467453003}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 463, "completion_tokens": 498, "duration": 9.096455335617065}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 420, "completion_tokens": 288, "duration": 9.487048864364624}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 469, "completion_tokens": 567, "duration": 11.63744068145752}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int): \n    result = '' \n    while x > 0: \n        result = str(x % base) + result \n        x //= base \n    return result", "prompt_tokens": 403, "completion_tokens": 386, "duration": 7.744381904602051}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 358, "completion_tokens": 309, "duration": 4.955280542373657}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 483, "completion_tokens": 685, "duration": 13.919017791748047}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 387, "completion_tokens": 416, "duration": 6.283623695373535}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 383, "completion_tokens": 397, "duration": 5.814276218414307}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    return pow(2, n, p)", "prompt_tokens": 417, "completion_tokens": 445, "duration": 8.950209856033325}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 402, "completion_tokens": 438, "duration": 9.03049087524414}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 434, "completion_tokens": 614, "duration": 9.185795068740845}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 592, "completion_tokens": 441, "duration": 14.467867851257324}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 365, "completion_tokens": 246, "duration": 7.308230638504028}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 452, "completion_tokens": 402, "duration": 8.440375804901123}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    fib_nums = [0] * (n+1)\n    fib_nums[1] = 1\n    for i in range(2, n+1):\n        fib_nums[i] = fib_nums[i-1] + fib_nums[i-2]\n    return fib_nums[n]", "prompt_tokens": 364, "completion_tokens": 605, "duration": 12.002084016799927}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and (not stack or stack.pop() != '<'):\n            return False\n    return len(stack) == 0", "prompt_tokens": 404, "completion_tokens": 569, "duration": 12.572816848754883}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 631, "completion_tokens": 550, "duration": 14.436808347702026}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 426, "completion_tokens": 384, "duration": 10.392011404037476}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 375, "completion_tokens": 571, "duration": 12.312594175338745}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 406, "completion_tokens": 397, "duration": 9.044393539428711}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  \n            stack.append(bracket)\n        else:  \n            if not stack or stack.pop() != '(':  \n                return False\n    return len(stack) == 0", "prompt_tokens": 401, "completion_tokens": 750, "duration": 17.13979434967041}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 420, "completion_tokens": 419, "duration": 7.337794542312622}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    return fibfib[n]", "prompt_tokens": 461, "completion_tokens": 608, "duration": 13.389949321746826}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels or (char == 'y' and s.index(char) == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 438, "completion_tokens": 458, "duration": 7.836483955383301}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 394, "completion_tokens": 490, "duration": 8.094313144683838}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 424, "completion_tokens": 358, "duration": 7.591423273086548}
{"task_id": "HumanEval/67", "generated_code": "import re\n\ndef fruit_distribution(s, n):\n    apples, oranges = map(int, re.findall(r'\b(\b)\b', s))\n    return n - apples - oranges", "prompt_tokens": 522, "completion_tokens": 463, "duration": 8.514958143234253}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 624, "completion_tokens": 440, "duration": 9.007397413253784}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result if result != -1 else -1", "prompt_tokens": 477, "completion_tokens": 550, "duration": 11.103982925415039}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.append(lst[i])\n            result.append(lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 436, "completion_tokens": 615, "duration": 15.017309188842773}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 433, "completion_tokens": 539, "duration": 13.611274242401123}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 542, "completion_tokens": 343, "duration": 7.2446839809417725}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 469, "completion_tokens": 757, "duration": 11.7957284450531}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 505, "completion_tokens": 486, "duration": 10.704865217208862}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 391, "completion_tokens": 720, "duration": 16.30905842781067}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 454, "completion_tokens": 392, "duration": 7.024986743927002}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a**(1/3))**3 == a)", "prompt_tokens": 422, "completion_tokens": 366, "duration": 6.543957948684692}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 503, "duration": 10.302867412567139}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal): \n    binary = '' \n    while decimal > 0: \n        binary = str(decimal % 2) + binary \n        decimal = decimal // 2 \n    return 'db' + binary + 'db'", "prompt_tokens": 451, "completion_tokens": 475, "duration": 10.524368286132812}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 433, "completion_tokens": 541, "duration": 8.174078941345215}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 582, "completion_tokens": 872, "duration": 16.844040155410767}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 393, "completion_tokens": 634, "duration": 12.192118644714355}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count_start_with_one = 9 * 10 ** (n - 2)\n    count_end_with_one = 10 ** (n - 1)\n    return count_start_with_one + count_end_with_one", "prompt_tokens": 356, "completion_tokens": 625, "duration": 14.070215463638306}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 445, "completion_tokens": 254, "duration": 4.543542861938477}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 367, "completion_tokens": 447, "duration": 13.625219583511353}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 442, "completion_tokens": 376, "duration": 9.599231719970703}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1000, "completion_tokens": 580, "duration": 14.079068899154663}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, key=lambda x: x[0] + x[-1], reverse=(sum(array[:2]) % 2 == 0))", "prompt_tokens": 515, "completion_tokens": 601, "duration": 13.391510725021362}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                encrypted += chr((shifted - 97) % 26 + 97)\n            else:\n                encrypted += chr((shifted - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 422, "completion_tokens": 664, "duration": 14.44312858581543}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 436, "completion_tokens": 461, "duration": 8.844121932983398}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 419, "completion_tokens": 394, "duration": 6.246643543243408}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 447, "completion_tokens": 469, "duration": 9.79531216621399}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 421, "completion_tokens": 480, "duration": 8.702326774597168}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    max_sum = 0\n    for num in lst:\n        if num <= 1:\n            continue\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 598, "completion_tokens": 610, "duration": 9.538611888885498}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 481, "completion_tokens": 389, "duration": 6.3746960163116455}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 457, "completion_tokens": 556, "duration": 10.0995454788208}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 410, "completion_tokens": 328, "duration": 6.789542198181152}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 384, "completion_tokens": 539, "duration": 11.313945055007935}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    rounded_num = round(num)\n    if rounded_num == num:\n        return int(num)\n    elif rounded_num > num:\n        return math.floor(num)\n    else:\n        return math.ceil(num)", "prompt_tokens": 468, "completion_tokens": 495, "duration": 8.502604007720947}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    return pile", "prompt_tokens": 444, "completion_tokens": 434, "duration": 9.066752672195435}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 428, "completion_tokens": 361, "duration": 6.744070768356323}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 406, "completion_tokens": 471, "duration": 9.746213436126709}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 452, "completion_tokens": 467, "duration": 7.353971719741821}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 414, "completion_tokens": 445, "duration": 8.131632328033447}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 588, "completion_tokens": 455, "duration": 9.582428216934204}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 436, "completion_tokens": 488, "duration": 7.68576192855835}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 == 0)\n    odd_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 523, "completion_tokens": 520, "duration": 10.892324686050415}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 690, "completion_tokens": 462, "duration": 10.293333053588867}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    return min_idx == 0", "prompt_tokens": 611, "completion_tokens": 645, "duration": 9.621368646621704}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return 'YES' if sum(x % 2 != 0 for x in lst1) >= sum(x % 2 != 0 for x in lst2) else 'NO'", "prompt_tokens": 509, "completion_tokens": 549, "duration": 11.48504090309143}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values()) if counts else 0\n    return {key: value for key, value in counts.items() if value == max_count}", "prompt_tokens": 463, "completion_tokens": 528, "duration": 14.08704948425293}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join(ch for ch in s if ch not in c)\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 474, "completion_tokens": 931, "duration": 23.515791177749634}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 485, "completion_tokens": 429, "duration": 10.122645378112793}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 400, "completion_tokens": 628, "duration": 13.33137845993042}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowered = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowered += math.ceil(well / capacity)\n    return total_lowered", "prompt_tokens": 635, "completion_tokens": 839, "duration": 14.640302181243896}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr): \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 482, "completion_tokens": 580, "duration": 13.491979360580444}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 493, "completion_tokens": 461, "duration": 11.602580785751343}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word): \n    vowels = 'aeiouAEIOU' \n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' \n    for i in range(len(word) - 2, 0, -1): \n        if word[i] in consonants and word[i+1] in vowels and word[i+2] in consonants: \n            return word[i+1] \n    return ''", "prompt_tokens": 461, "completion_tokens": 738, "duration": 16.284431219100952}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    mapping = {')': '('}\n    for s in lst:\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return 'No'\n            else:\n                stack.append(char)\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 480, "completion_tokens": 748, "duration": 14.235838651657104}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 529, "completion_tokens": 364, "duration": 7.925699234008789}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst): \n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 409, "completion_tokens": 488, "duration": 9.913234949111938}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 440, "completion_tokens": 367, "duration": 7.593214988708496}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 543, "completion_tokens": 656, "duration": 11.603223085403442}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    else:\n        if is_leap_year(year):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 575, "completion_tokens": 547, "duration": 58.96183705329895}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt: str):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 452, "completion_tokens": 525, "duration": 7.975621938705444}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    duplicates = {}\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            if lst[i] == lst[i+1]:\n                if lst[i] in duplicates:\n                    return False\n                else:\n                    duplicates[lst[i]] = 1\n            else:\n                return False\n    return True", "prompt_tokens": 561, "completion_tokens": 481, "duration": 7.552125692367554}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    intersection_length = max(0, end - start + 1)\n    if intersection_length <= 1:\n        return 'NO'\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 566, "completion_tokens": 609, "duration": 11.756118297576904}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    return product_sign * sum_magnitudes", "prompt_tokens": 434, "completion_tokens": 467, "duration": 9.103544235229492}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    \n    def dfs(cell, path):\n        \n        # DFS implementation\n        \n        return path\n    \n    return min([dfs((i, j), [grid[i][j]]) for i in range(len(grid)) for j in range(len(grid[0]))])", "prompt_tokens": 1262, "completion_tokens": 537, "duration": 11.456172227859497}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tribonacci = [0, 3, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 547, "completion_tokens": 555, "duration": 9.99974012374878}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product", "prompt_tokens": 383, "completion_tokens": 482, "duration": 9.650479078292847}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 445, "completion_tokens": 605, "duration": 13.771127939224243}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 469, "completion_tokens": 424, "duration": 7.179658651351929}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 449, "completion_tokens": 388, "duration": 6.0462422370910645}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            result = i - 1\n    return result", "prompt_tokens": 415, "completion_tokens": 564, "duration": 14.294544219970703}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 450, "completion_tokens": 432, "duration": 9.896110534667969}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    return max(a, b) if a != b else None", "prompt_tokens": 453, "completion_tokens": 432, "duration": 6.698238372802734}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(j, n):\n                for l in range(k, n):\n                    if 2*i + 2*j + 2*k + 2*l == n:\n                        return True\n    return False", "prompt_tokens": 389, "completion_tokens": 530, "duration": 10.435603141784668}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 407, "completion_tokens": 394, "duration": 8.8880934715271}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result", "prompt_tokens": 418, "completion_tokens": 437, "duration": 7.210024356842041}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 526, "completion_tokens": 447, "duration": 10.091293096542358}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))", "prompt_tokens": 482, "completion_tokens": 562, "duration": 16.831873655319214}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 459, "completion_tokens": 501, "duration": 11.450167894363403}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 467, "completion_tokens": 508, "duration": 12.38444995880127}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 427, "completion_tokens": 458, "duration": 10.446422815322876}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 431, "completion_tokens": 486, "duration": 10.544994831085205}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i*i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j*j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k*k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 477, "completion_tokens": 833, "duration": 18.167423963546753}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])", "prompt_tokens": 523, "completion_tokens": 476, "duration": 11.792004108428955}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 499, "completion_tokens": 458, "duration": 7.833288192749023}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 398, "completion_tokens": 498, "duration": 10.08116102218628}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 449, "completion_tokens": 418, "duration": 7.684234142303467}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - g) if score != g else 0 for score, g in zip(game, guess)]", "prompt_tokens": 542, "completion_tokens": 434, "duration": 9.646924257278442}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f'{class_name}.{strongest}'", "prompt_tokens": 589, "completion_tokens": 641, "duration": 11.663581848144531}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 441, "completion_tokens": 613, "duration": 12.199414014816284}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 377, "completion_tokens": 599, "duration": 11.824551343917847}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 413, "completion_tokens": 751, "duration": 16.37515163421631}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 420, "completion_tokens": 523, "duration": 12.111616373062134}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 432, "completion_tokens": 653, "duration": 10.141153573989868}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - total_eaten)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 589, "completion_tokens": 480, "duration": 7.73217248916626}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 519, "completion_tokens": 882, "duration": 16.873812913894653}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return result[::-1]\n    return result", "prompt_tokens": 419, "completion_tokens": 480, "duration": 7.623068809509277}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 388, "completion_tokens": 438, "duration": 7.016470670700073}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 416, "completion_tokens": 386, "duration": 6.9056925773620605}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 474, "duration": 12.464513063430786}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    balance = 0\n    for char in paren_string:\n        if char == '(': balance += 1\n        elif char == ')': balance -= 1\n        current_group += char\n        if balance == 0:\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 633, "duration": 15.798869848251343}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 335, "duration": 7.248517274856567}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 579, "duration": 15.812334299087524}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 588, "duration": 11.988255023956299}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 440, "duration": 8.856421709060669}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': current_depth += 1\n        elif char == ')': current_depth -= 1\n        max_depth = max(max_depth, current_depth)\n        if char == ' ': \n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 420, "completion_tokens": 741, "duration": 18.781070709228516}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 449, "duration": 12.074412822723389}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)", "prompt_tokens": 418, "completion_tokens": 540, "duration": 14.352275371551514}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    deq = deque()\n    res = []\n    \n    for i, num in enumerate(numbers):\n        if deq and deq[0] == i - len(numbers):\n            deq.popleft()\n        while deq and num > numbers[deq[-1]]:\n            deq.pop()\n        deq.append(i)\n        res.append(numbers[deq[0]])\n    \n    return res", "prompt_tokens": 408, "completion_tokens": 1017, "duration": 19.68476152420044}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 758, "duration": 20.293421983718872}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result", "prompt_tokens": 384, "completion_tokens": 442, "duration": 12.809664249420166}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 464, "duration": 11.361526250839233}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 378, "completion_tokens": 419, "duration": 9.13564395904541}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 405, "duration": 8.303716659545898}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 350, "duration": 9.690755605697632}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 395, "duration": 8.380762100219727}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    beats = [note_duration[note] for note in music_notes]\n    return beats", "prompt_tokens": 480, "completion_tokens": 471, "duration": 9.276104927062988}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int: \n    count = 0 \n    for i in range(len(string) - len(substring) + 1): \n        if string[i:i + len(substring)] == substring: \n            count += 1 \n    return count", "prompt_tokens": 396, "completion_tokens": 450, "duration": 9.339356184005737}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 468, "duration": 12.061870813369751}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = []\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = [numbers[i], numbers[i+1]]\n    return tuple(result)", "prompt_tokens": 474, "completion_tokens": 734, "duration": 14.317700624465942}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(num - min_val) / (max_val - min_val) for num in numbers]", "prompt_tokens": 431, "completion_tokens": 442, "duration": 9.071125507354736}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 399, "completion_tokens": 442, "duration": 9.558415412902832}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 321, "duration": 8.231645107269287}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 487, "duration": 9.403943300247192}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 678, "duration": 18.756290912628174}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 434, "duration": 9.281212329864502}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 356, "completion_tokens": 471, "duration": 13.761840105056763}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 401, "duration": 8.489543914794922}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 393, "duration": 10.074846029281616}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [num for num in l if num > 0]", "prompt_tokens": 421, "completion_tokens": 331, "duration": 7.357576370239258}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 558, "duration": 16.044212818145752}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        raise ValueError('Invalid input')\n    for x in range(-1000, 1000):\n        if poly(xs, x) == 0:\n            return x", "prompt_tokens": 567, "completion_tokens": 532, "duration": 13.17135238647461}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in third_indices]\n    sorted_values.sort()\n    for i, val in zip(third_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 473, "duration": 13.425191640853882}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 332, "duration": 6.369641304016113}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 332, "duration": 8.139404773712158}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 387, "completion_tokens": 581, "duration": 27.77170443534851}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    sorted_even = sorted(l[::2])\n    return [val if i % 2 != 0 else sorted_even[i//2] for i, val in enumerate(l)]", "prompt_tokens": 431, "completion_tokens": 404, "duration": 10.37834882736206}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    return encode_cyclic(s)", "prompt_tokens": 466, "completion_tokens": 537, "duration": 15.473982095718384}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 405, "completion_tokens": 615, "duration": 11.735719203948975}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 881, "duration": 20.670840740203857}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 459, "completion_tokens": 508, "duration": 8.365119457244873}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 640, "completion_tokens": 337, "duration": 8.560609102249146}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 658, "duration": 19.271687269210815}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    converted = ''\n    while x > 0:\n        converted = str(x % base) + converted\n        x //= base\n    return converted", "prompt_tokens": 399, "completion_tokens": 565, "duration": 9.548074007034302}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 334, "duration": 7.174209356307983}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 666, "duration": 16.174680471420288}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 383, "completion_tokens": 413, "duration": 8.676736116409302}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 698, "duration": 13.861884355545044}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    return mod_exp(2, n, p)", "prompt_tokens": 413, "completion_tokens": 532, "duration": 11.803026676177979}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 452, "duration": 24.40998649597168}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 430, "completion_tokens": 527, "duration": 8.937983512878418}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 387, "completion_tokens": 303, "duration": 7.382181167602539}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 286, "duration": 7.782259941101074}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 448, "completion_tokens": 419, "duration": 8.318328142166138}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 584, "duration": 12.973907232284546}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 400, "completion_tokens": 673, "duration": 16.344865322113037}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 395, "completion_tokens": 474, "duration": 12.584299802780151}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 422, "completion_tokens": 375, "duration": 9.442173957824707}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n", "prompt_tokens": 371, "completion_tokens": 607, "duration": 10.277734518051147}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 402, "completion_tokens": 400, "duration": 6.9548399448394775}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')' and stack and stack[-1] == '(': stack.pop()\n        else: return False\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 786, "duration": 13.206403255462646}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 402, "duration": 8.095378160476685}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 694, "duration": 19.659499883651733}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if i == len(s) - 1 or char.lower() != 'y':\n                count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 521, "duration": 9.056762456893921}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shifted_str = x_str[-shift % len(x_str):] + x_str[:-shift % len(x_str)]\n    return shifted_str", "prompt_tokens": 390, "completion_tokens": 540, "duration": 11.611802101135254}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 361, "duration": 10.112637281417847}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 444, "duration": 8.349124431610107}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n        elif num % 2 == 0 and num == smallest_even:\n            smallest_index = min(smallest_index, i)\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, smallest_index]", "prompt_tokens": 620, "completion_tokens": 434, "duration": 7.956670045852661}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result", "prompt_tokens": 473, "completion_tokens": 555, "duration": 14.518721580505371}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 471, "duration": 7.713769435882568}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 581, "duration": 14.842620611190796}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 346, "duration": 7.250547885894775}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 898, "duration": 16.927321434020996}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst2 < total_chars_lst1 else lst1", "prompt_tokens": 501, "completion_tokens": 490, "duration": 10.835108995437622}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(set(factors)) == 3 if len(factors) == 3 else False", "prompt_tokens": 387, "completion_tokens": 537, "duration": 12.819741010665894}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 392, "duration": 6.490241050720215}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 418, "completion_tokens": 330, "duration": 6.188949346542358}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 538, "duration": 9.587619304656982}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 396, "duration": 11.885165929794312}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 684, "completion_tokens": 576, "duration": 15.37998104095459}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 578, "completion_tokens": 741, "duration": 20.976752758026123}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    import math\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 577, "duration": 11.768020629882812}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n: int) -> int:\n    return count_start_with_one(n) + count_end_with_one(n)", "prompt_tokens": 352, "completion_tokens": 419, "duration": 9.207122564315796}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary = bin(N)[2:]\n    sum_of_digits = sum(int(d) for d in binary)\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 401, "duration": 9.794231653213501}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)", "prompt_tokens": 363, "completion_tokens": 372, "duration": 8.32832670211792}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 372, "duration": 7.608247995376587}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 567, "completion_tokens": 577, "duration": 14.456706285476685}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)", "prompt_tokens": 511, "completion_tokens": 398, "duration": 8.287931680679321}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                encrypted += chr((shifted - 97) % 26 + 97)\n            else:\n                encrypted += chr((shifted - 65) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 731, "duration": 16.107420921325684}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "prompt_tokens": 432, "completion_tokens": 436, "duration": 10.90632700920105}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 415, "completion_tokens": 371, "duration": 6.295659065246582}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 501, "duration": 12.719310998916626}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 513, "duration": 10.505449056625366}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_sum = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 594, "completion_tokens": 635, "duration": 11.7709801197052}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict) or all(key.isupper() for key in dict)", "prompt_tokens": 477, "completion_tokens": 383, "duration": 9.616201877593994}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes[:n]", "prompt_tokens": 453, "completion_tokens": 603, "duration": 14.175200462341309}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 406, "completion_tokens": 333, "duration": 7.4986183643341064}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 462, "duration": 10.517555236816406}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return math.ceil(num) if num % 1 >= 0.5 else math.floor(num)\n    else:\n        return math.floor(num) if abs(num) % 1 >= 0.5 else math.ceil(num)", "prompt_tokens": 789, "completion_tokens": 555, "duration": 13.655850648880005}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    stones = n\n    for i in range(n):\n        pile.append(stones)\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n    return pile", "prompt_tokens": 440, "completion_tokens": 485, "duration": 9.489265441894531}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 349, "duration": 7.7141640186309814}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 503, "duration": 11.123418092727661}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 433, "duration": 8.499425172805786}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x): \n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 452, "duration": 12.31627106666565}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 445, "duration": 9.267722368240356}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 475, "duration": 12.604798555374146}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 503, "duration": 12.611171245574951}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 375, "duration": 10.192099571228027}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    return arr == sorted(arr[min_index:] + arr[:min_index])", "prompt_tokens": 607, "completion_tokens": 551, "duration": 12.891128063201904}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum_odd_lst1 = sum(x for x in lst1 if x % 2 != 0)\n    sum_odd_lst2 = sum(x for x in lst2 if x % 2 != 0)\n    return 'YES' if sum_odd_lst1 >= sum_odd_lst2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 675, "duration": 14.922360897064209}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    count = {}\n    for letter in letters:\n        count[letter] = count.get(letter, 0) + 1\n    max_count = max(count.values()) if count else 0\n    return {key: value for key, value in count.items() if value == max_count}", "prompt_tokens": 459, "completion_tokens": 571, "duration": 14.688977718353271}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join([char for char in s if char not in c])\n    return filtered_str, filtered_str == filtered_str[::-1]", "prompt_tokens": 470, "completion_tokens": 407, "duration": 9.42869520187378}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 444, "duration": 8.593766212463379}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums: List[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 642, "duration": 11.469907999038696}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    return total_lowerings", "prompt_tokens": 631, "completion_tokens": 770, "duration": 14.530633211135864}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 443, "duration": 9.775521278381348}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 479, "duration": 9.272468090057373}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants and word[i+1] in vowels:\n            return word[i+1]\n    return ''", "prompt_tokens": 457, "completion_tokens": 538, "duration": 13.137034893035889}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': \n                stack.append(char)\n            else:\n                if stack and stack[-1] == '(': \n                    stack.pop()\n        if not stack:\n            return 'Yes'\n    return 'No'", "prompt_tokens": 476, "completion_tokens": 773, "duration": 13.65523386001587}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 378, "duration": 10.48142695426941}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 579, "duration": 15.137200355529785}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 377, "duration": 7.6292643547058105}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 539, "completion_tokens": 605, "duration": 11.33781361579895}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31 and int(month) in [1, 3, 5, 7, 8, 10, 12]):\n        return False\n    if not (1 <= int(day) <= 30 and int(month) in [4, 6, 9, 11]):\n        return False\n    if not (1 <= int(day) <= 29 and int(month) == 2):\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 631, "duration": 13.00487732887268}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 448, "completion_tokens": 423, "duration": 8.07305645942688}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 1:\n                return False\n        else:\n            count[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 528, "duration": 12.220598697662354}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    if start > end: \n        return 'NO' \n    length = end - start + 1 \n    if is_prime(length): \n        return 'YES' \n    else: \n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 943, "duration": 20.16917324066162}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        total += abs(num)\n    return total * product", "prompt_tokens": 430, "completion_tokens": 463, "duration": 10.734873294830322}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            new_row, new_col = row + dr, col + dc\n            if 0 <= new_row < len(grid) and 0 <= new_col < len(grid[0]) and (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                result = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if result:\n                    return result\n                visited.remove((new_row, new_col))\n        return None\n    \n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            result = dfs(i, j, [grid[i][j]])\n            if result:\n                return result", "prompt_tokens": 1406, "completion_tokens": 1360, "duration": 24.596524953842163}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1]\n    else:\n        tribonacci = [0, 3, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 543, "completion_tokens": 555, "duration": 9.504283428192139}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product", "prompt_tokens": 379, "completion_tokens": 471, "duration": 10.356962203979492}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return not not stack", "prompt_tokens": 441, "completion_tokens": 589, "duration": 16.581129789352417}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 465, "completion_tokens": 426, "duration": 8.399239778518677}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 386, "duration": 18.63732099533081}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            return i-1 \n    return -1", "prompt_tokens": 411, "completion_tokens": 517, "duration": 10.709375381469727}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 446, "completion_tokens": 439, "duration": 10.214898109436035}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    return max(a, b) if a != b else None", "prompt_tokens": 449, "completion_tokens": 498, "duration": 13.636181831359863}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for k in range(1, n//2 + 1):\n        if (n - 2*k) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 385, "completion_tokens": 563, "duration": 12.868670225143433}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * factorial(n)", "prompt_tokens": 403, "completion_tokens": 415, "duration": 10.561059951782227}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            else:\n                result.append('_')\n        else:\n            result.append(char)\n            consecutive_spaces = 0\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 436, "duration": 9.6824312210083}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 515, "duration": 12.580453157424927}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 475, "duration": 10.839139223098755}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def split_sentence(sentence):\n        return sentence.split()\n\n    prime_words = [word for word in split_sentence(sentence) if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 455, "completion_tokens": 525, "duration": 8.904431343078613}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 463, "completion_tokens": 660, "duration": 11.771761178970337}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 414, "duration": 7.579221248626709}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 522, "duration": 12.779183387756348}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n): \n    count = 0 \n    for i in range(1, n + 1): \n        a_i = i * i - i + 1 \n        count += (a_i % 3 == 0) \n    return count", "prompt_tokens": 473, "completion_tokens": 707, "duration": 16.138713598251343}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(sorted(planets[start+1:end], key=planets.index))", "prompt_tokens": 519, "completion_tokens": 479, "duration": 9.969297885894775}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 377, "duration": 11.026470422744751}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 394, "completion_tokens": 593, "duration": 14.142270803451538}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 425, "duration": 7.504539966583252}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 402, "duration": 12.399511337280273}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    sorted_extensions = sorted(extensions, key=strength)\n    strongest_extension = sorted_extensions[0]\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 632, "duration": 11.423896789550781}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 624, "duration": 12.770658254623413}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 434, "duration": 12.009507656097412}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, symbol in roman_map.items():\n        while number >= value:\n            result += symbol\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 750, "duration": 13.264708042144775}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2", "prompt_tokens": 416, "completion_tokens": 479, "duration": 12.735129356384277}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 428, "completion_tokens": 627, "duration": 14.068877696990967}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 585, "completion_tokens": 394, "duration": 10.07031798362732}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '/':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 515, "completion_tokens": 742, "duration": 14.760533094406128}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s[::-1])", "prompt_tokens": 415, "completion_tokens": 434, "duration": 9.086153984069824}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 384, "completion_tokens": 428, "duration": 9.54102087020874}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 398, "duration": 9.479016542434692}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 615, "duration": 95.0331494808197}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start of a new group\n            stack.append('(')\n        elif char == ')':  # End of a group\n            stack.pop()\n            current_group += char\n            if not stack:  # Group complete\n                result.append(current_group)\n                current_group = ''\n        else:  # Inside a group\n            current_group += char\n    return result", "prompt_tokens": 423, "completion_tokens": 794, "duration": 95.02177810668945}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 355, "duration": 10.140805006027222}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 658, "duration": 94.9656491279602}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 590, "duration": 94.89605450630188}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 414, "duration": 10.100605726242065}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':  \n            max_depth += 1\n        elif char == ')':\n            depths.append(max_depth)\n            max_depth -= 1\n    return depths", "prompt_tokens": 420, "completion_tokens": 780, "duration": 94.9491069316864}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 452, "duration": 94.85551643371582}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))", "prompt_tokens": 418, "completion_tokens": 406, "duration": 9.580802917480469}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    deq = deque()\n    result = []\n    \n    for i, num in enumerate(numbers):\n        if deq and deq[0] == i - len(numbers):\n            deq.popleft()\n        while deq and numbers[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        result.append(numbers[deq[0]])\n    \n    return result", "prompt_tokens": 408, "completion_tokens": 967, "duration": 94.93873858451843}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 450, "completion_tokens": 494, "duration": 94.81457805633545}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += '1' if a[i] != b[i] else '0'\n    return result", "prompt_tokens": 384, "completion_tokens": 409, "duration": 9.636582136154175}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 476, "duration": 94.81222152709961}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 434, "duration": 10.564385175704956}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))] ", "prompt_tokens": 367, "completion_tokens": 414, "duration": 9.951574325561523}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 376, "completion_tokens": 350, "duration": 9.584103107452393}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 371, "duration": 7.643634557723999}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        result.append(durations.get(note, 0))\n    return result", "prompt_tokens": 480, "completion_tokens": 611, "duration": 94.76315450668335}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 442, "duration": 9.407156229019165}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_map = {word: i for i, word in enumerate(number_words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 465, "duration": 94.69065880775452}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 474, "completion_tokens": 573, "duration": 94.69553756713867}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 427, "duration": 94.65548396110535}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 399, "completion_tokens": 478, "duration": 94.65473484992981}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int: \n    return len(string)", "prompt_tokens": 351, "completion_tokens": 323, "duration": 7.0786120891571045}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 484, "duration": 94.59769940376282}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 770, "duration": 94.63858366012573}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 455, "duration": 94.60275483131409}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 356, "completion_tokens": 373, "duration": 7.830528497695923}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 385, "duration": 9.085394382476807}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 423, "duration": 9.670520544052124}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 652, "completion_tokens": 402, "duration": 9.86955714225769}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 515, "duration": 94.50450825691223}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    return optimize.newton(lambda x: poly(xs, x), x0=0)", "prompt_tokens": 567, "completion_tokens": 401, "duration": 91.4115424156189}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    for i, val in zip(sorted_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 508, "duration": 94.48160696029663}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 332, "duration": 8.064234972000122}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 328, "duration": 95.32754111289978}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 387, "completion_tokens": 551, "duration": 94.44125413894653}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted(l[::2])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 431, "completion_tokens": 410, "duration": 10.378270864486694}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 665, "duration": 94.44684100151062}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def generate_fibonacci():\n        fib = [0, 1]\n        i = 2\n        while True:\n            fib.append(fib[i-1] + fib[i-2])\n            if is_prime(fib[i]):\n                yield fib[i]\n            i += 1\n    fib_gen = generate_fibonacci()\n    for _ in range(n):\n        result = next(fib_gen)\n    return result", "prompt_tokens": 405, "completion_tokens": 567, "duration": 87.03630828857422}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 957, "duration": 109.59963274002075}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n*(n-1)//2", "prompt_tokens": 459, "completion_tokens": 475, "duration": 85.18871545791626}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 640, "completion_tokens": 328, "duration": 9.645086526870728}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 559, "duration": 84.933114528656}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    converted = ''\n    while x > 0:\n        converted = str(x % base) + converted\n        x //= base\n    return converted", "prompt_tokens": 399, "completion_tokens": 552, "duration": 98.55554556846619}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 325, "duration": 88.13789653778076}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 701, "duration": 98.96997046470642}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 383, "completion_tokens": 416, "duration": 10.057092666625977}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 462, "duration": 86.55112218856812}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    if n == 0: \n        return 1 \n    result = 1 \n    base = 2 \n    n = n % (p - 1) \n    while n > 0: \n        if n % 2 == 1: \n            result = (result * base) % p \n        n = n // 2 \n        base = (base * base) % p \n    return result", "prompt_tokens": 413, "completion_tokens": 535, "duration": 12.523919820785522}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 472, "duration": 92.02562713623047}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 430, "completion_tokens": 588, "duration": 97.41363835334778}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int): \n    return all(x < t for x in l)", "prompt_tokens": 387, "completion_tokens": 360, "duration": 91.97729825973511}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 273, "duration": 91.41113948822021}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 418, "duration": 92.35412263870239}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 577, "duration": 85.700754404068}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 400, "completion_tokens": 693, "duration": 94.48309969902039}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 404, "duration": 93.56815433502197}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 358, "duration": 91.32581162452698}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 371, "completion_tokens": 567, "duration": 89.42254590988159}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 457, "duration": 93.67304563522339}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': \n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != '(': \n                return False\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 771, "duration": 89.54104852676392}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 404, "duration": 94.12092113494873}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 594, "duration": 85.15907192230225}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 504, "duration": 85.29214572906494}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 446, "duration": 85.73229265213013}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 440, "duration": 97.17689347267151}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 389, "duration": 85.55018711090088}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    return [smallest_even, smallest_even_index]", "prompt_tokens": 620, "completion_tokens": 551, "duration": 86.75526833534241}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    result = -1\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] >= num:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 552, "duration": 98.58549451828003}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    res = []\n    i, j = 0, len(lst)-1\n    while i <= j:\n        if i == j:\n            res.append(lst[i])\n        else:\n            res.extend([lst[i], lst[j]])\n        i += 1\n        j -= 1\n    return res", "prompt_tokens": 432, "completion_tokens": 605, "duration": 97.28765869140625}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 567, "duration": 89.75924134254456}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return is_palindrome(q) and calculate_sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 350, "duration": 93.99655556678772}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 833, "duration": 89.50566911697388}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst1 > total_chars_lst2 else lst1", "prompt_tokens": 501, "completion_tokens": 516, "duration": 85.2379982471466}
{"task_id": "HumanEval/75", "generated_code": "from itertools import combinations\nimport math\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    return False", "prompt_tokens": 387, "completion_tokens": 615, "duration": 93.87414646148682}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    import math\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 383, "duration": 94.47149324417114}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    root = a**(1/3)\n    return root.is_integer()", "prompt_tokens": 418, "completion_tokens": 357, "duration": 87.463210105896}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 512, "duration": 94.71137881278992}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal): \n    binary = '' \n    while decimal > 0: \n        binary = str(decimal % 2) + binary \n        decimal = decimal // 2 \n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 401, "duration": 93.79404950141907}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 500, "duration": 85.90674805641174}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 690, "duration": 94.37037396430969}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 389, "completion_tokens": 569, "duration": 96.77244973182678}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n): \n    return 2 * 9 ** (n-1) + 9 ** n", "prompt_tokens": 352, "completion_tokens": 455, "duration": 95.02846384048462}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 441, "completion_tokens": 414, "duration": 136.18108463287354}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 372, "duration": 92.49782395362854}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s): \n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 406, "duration": 11.222667217254639}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 567, "completion_tokens": 449, "duration": 10.353066205978394}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(sum(array[0], array[-1]) % 2 == 0))", "prompt_tokens": 511, "completion_tokens": 393, "duration": 9.857656955718994}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 763, "duration": 15.026149988174438}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 458, "duration": 9.924462795257568}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence.strip()]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 415, "completion_tokens": 411, "duration": 8.945995569229126}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 532, "duration": 13.455046892166138}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 479, "duration": 8.874763011932373}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_sum = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 594, "completion_tokens": 640, "duration": 13.326565027236938}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 477, "completion_tokens": 378, "duration": 7.472055435180664}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 453, "completion_tokens": 575, "duration": 15.18004059791565}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 406, "completion_tokens": 370, "duration": 8.70408034324646}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 450, "duration": 9.375584125518799}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value) + 0.5))", "prompt_tokens": 464, "completion_tokens": 361, "duration": 11.073428630828857}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 440, "completion_tokens": 466, "duration": 8.707528352737427}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 353, "duration": 9.420200109481812}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 504, "duration": 10.51486873626709}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 469, "duration": 14.252433061599731}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 496, "duration": 9.850858211517334}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 457, "duration": 10.214165210723877}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 458, "duration": 9.467700481414795}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count", "prompt_tokens": 519, "completion_tokens": 640, "duration": 11.426195859909058}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 424, "duration": 8.559468269348145}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    min_index = arr.index(min(arr))\n    return arr[min_index:] + arr[:min_index] == sorted(arr)", "prompt_tokens": 607, "completion_tokens": 525, "duration": 11.678086757659912}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum_odd = sum(x for x in lst1 if x % 2 != 0)\n    sum_even = sum(x for x in lst2 if x % 2 == 0)\n    return 'YES' if sum_odd <= sum_even else 'NO'", "prompt_tokens": 505, "completion_tokens": 770, "duration": 18.65662169456482}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values()) if counts else 0\n    return {key: value for key, value in counts.items() if value == max_count}", "prompt_tokens": 459, "completion_tokens": 568, "duration": 12.442359447479248}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    new_s = ''.join(char for char in s if char not in c)\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 470, "completion_tokens": 902, "duration": 16.143261671066284}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 450, "duration": 11.406415462493896}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 551, "duration": 10.646397113800049}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_operations = 0\n    for row in grid:\n        operations = 0\n        for well in row:\n            if well == 1:\n                operations += math.ceil(1 / capacity)\n        total_operations += operations\n    return total_operations", "prompt_tokens": 631, "completion_tokens": 992, "duration": 18.645736694335938}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 478, "completion_tokens": 462, "duration": 8.346378087997437}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 448, "duration": 8.171553134918213}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 617, "duration": 10.894774198532104}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s: str) -> bool:\n        stack = []\n        mapping = {')': '('}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            elif char in {'(', ')'}:\n                stack.append(char)\n        return not stack\n\n    concatenated = ''.join(lst)\n    return 'Yes' if is_balanced(concatenated) else 'No'", "prompt_tokens": 476, "completion_tokens": 692, "duration": 15.162785530090332}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 384, "duration": 8.516645669937134}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 460, "duration": 9.618844747543335}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "prompt_tokens": 436, "completion_tokens": 380, "duration": 7.918127059936523}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])", "prompt_tokens": 539, "completion_tokens": 577, "duration": 11.796014547348022}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 571, "completion_tokens": 632, "duration": 13.363496541976929}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 448, "completion_tokens": 421, "duration": 12.13048505783081}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > 1:\n            return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 504, "duration": 8.899420022964478}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    length = end - start \n    if length <= 0: \n        return 'NO' \n    if is_prime(length): \n        return 'YES' \n    return 'NO'", "prompt_tokens": 562, "completion_tokens": 512, "duration": 15.604897499084473}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 430, "completion_tokens": 455, "duration": 11.693083047866821}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = []\n        if row > 0:\n            neighbors.append((row-1, col))\n        if row < len(grid) - 1:\n            neighbors.append((row+1, col))\n        if col > 0:\n            neighbors.append((row, col-1))\n        if col < len(grid[0]) - 1:\n            neighbors.append((row, col+1))\n        \n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        \n        for neighbor in neighbors:\n            new_row, new_col = neighbor\n            if (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                res = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if res:\n                    return res\n        \n        return None\n    \n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1443, "completion_tokens": 1524, "duration": 39.437400817871094}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 543, "completion_tokens": 483, "duration": 12.357060194015503}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 493, "duration": 10.01212739944458}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 441, "completion_tokens": 692, "duration": 14.291762113571167}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 465, "duration": 10.887598991394043}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 402, "duration": 8.158817052841187}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    result = -1 \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            result = i-1 \n    return result", "prompt_tokens": 411, "completion_tokens": 588, "duration": 11.817037343978882}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 446, "completion_tokens": 458, "duration": 8.461699962615967}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 513, "duration": 12.143389463424683}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 614, "completion_tokens": 652, "duration": 12.257891178131104}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)", "prompt_tokens": 403, "completion_tokens": 400, "duration": 6.837999582290649}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result = result[:-2] + '-'\n                count = 1\n            else:\n                result += '_'\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 414, "completion_tokens": 420, "duration": 8.1464684009552}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    file_parts = file_name.split('.')\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 459, "duration": 12.95468020439148}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 478, "completion_tokens": 539, "duration": 11.849300861358643}
{"task_id": "HumanEval/143", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 504, "duration": 8.551858186721802}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 463, "completion_tokens": 536, "duration": 11.206235408782959}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 455, "duration": 14.163499355316162}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if len(str(abs(num))) > 1 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0 and abs(num) > 10:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 544, "duration": 10.867447853088379}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 752, "duration": 19.65212059020996}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(sorted(planets[min(start, end)+1:max(start, end)]))", "prompt_tokens": 519, "completion_tokens": 492, "duration": 8.057710409164429}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 490, "duration": 11.465475082397461}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 394, "completion_tokens": 508, "duration": 14.516713857650757}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 470, "duration": 8.220178365707397}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 368, "duration": 9.60893964767456}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for ext in extensions:\n        strength = sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 677, "duration": 13.324948072433472}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 645, "duration": 11.919705867767334}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 373, "completion_tokens": 451, "duration": 12.323066473007202}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 745, "duration": 13.01288914680481}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 416, "completion_tokens": 511, "duration": 14.927648305892944}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 428, "completion_tokens": 568, "duration": 12.679579019546509}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if total_carrots <= remaining:\n        return [total_carrots, remaining - total_carrots]\n    else:\n        return [total_carrots + remaining, 0]", "prompt_tokens": 585, "completion_tokens": 552, "duration": 11.915721416473389}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 515, "completion_tokens": 682, "duration": 12.95475172996521}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 415, "completion_tokens": 395, "duration": 10.66045618057251}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()", "prompt_tokens": 384, "completion_tokens": 498, "duration": 10.787477493286133}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 410, "duration": 8.212275981903076}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 496, "duration": 11.832717657089233}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start of a new group\n            stack.append('(')\n        elif char == ')':  # End of a group\n            stack.pop()\n            current_group += char\n            if not stack:  # Group complete\n                result.append(current_group)\n                current_group = ''\n        else:  # Inside a group\n            current_group += char\n    return result", "prompt_tokens": 423, "completion_tokens": 777, "duration": 15.526459217071533}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 342, "duration": 7.377720594406128}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 610, "duration": 14.736283302307129}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 539, "duration": 10.003937005996704}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 384, "duration": 9.36799955368042}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    for char in paren_string:\n        if char == '(': \n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 420, "completion_tokens": 746, "duration": 13.186959266662598}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 463, "duration": 9.527920007705688}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_val = 0\n    product_val = 1\n    for num in numbers:\n        sum_val += num\n        product_val *= num\n    return sum_val, product_val", "prompt_tokens": 418, "completion_tokens": 539, "duration": 13.950839757919312}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    deq = deque()\n    result = []\n    for i, num in enumerate(numbers):\n        while deq and numbers[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        if deq[0] == i - len(deq):\n            deq.popleft()\n        result.append(numbers[deq[0]])\n    return result", "prompt_tokens": 408, "completion_tokens": 803, "duration": 14.79541802406311}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 750, "duration": 17.744911909103394}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += '1' if a[i] != b[i] else '0'\n    return result", "prompt_tokens": 384, "completion_tokens": 463, "duration": 11.627628564834595}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 530, "duration": 12.632826566696167}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 378, "completion_tokens": 430, "duration": 8.457544326782227}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 412, "duration": 8.126186847686768}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 365, "duration": 9.439097166061401}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 382, "duration": 7.653738737106323}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    return [note_duration[note] for note in music_notes]", "prompt_tokens": 480, "completion_tokens": 507, "duration": 11.04603123664856}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 460, "duration": 10.286510944366455}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_map = {word: i for i, word in enumerate(number_words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 417, "duration": 10.95838975906372}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result", "prompt_tokens": 474, "completion_tokens": 518, "duration": 11.52420711517334}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 439, "duration": 8.317014217376709}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 399, "completion_tokens": 430, "duration": 11.078296184539795}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int: \n    return len(string)", "prompt_tokens": 351, "completion_tokens": 322, "duration": 8.260155439376831}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 483, "duration": 9.614708423614502}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 620, "duration": 14.713039875030518}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 436, "duration": 9.68910837173462}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 356, "completion_tokens": 428, "duration": 8.54753065109253}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 417, "duration": 7.944891929626465}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 421, "duration": 8.363933801651001}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 652, "completion_tokens": 402, "duration": 8.471938133239746}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 603, "duration": 11.524052143096924}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Number of coefficients should be even')\n    if xs[-2] == 0:\n        raise ValueError('Second largest coefficient should be non-zero')\n    return -xs[-1] / xs[-2]", "prompt_tokens": 567, "completion_tokens": 466, "duration": 9.165110349655151}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, v in zip(sorted_indices, sorted(sorted_values)):\n        result[i] = v\n    return result", "prompt_tokens": 458, "completion_tokens": 489, "duration": 11.911019086837769}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 345, "duration": 8.809825420379639}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 337, "duration": 7.033263921737671}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 575, "duration": 10.462427139282227}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 431, "completion_tokens": 523, "duration": 9.703475713729858}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 477, "duration": 8.844846487045288}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        fib = fibonacci(i)\n        if is_prime(fib):\n            count += 1\n    return fib", "prompt_tokens": 405, "completion_tokens": 755, "duration": 14.268290042877197}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 914, "duration": 18.176804780960083}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2", "prompt_tokens": 459, "completion_tokens": 577, "duration": 10.477102041244507}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 321, "duration": 7.748050928115845}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 633, "duration": 13.41977047920227}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    new_base = ''\n    while x > 0:\n        new_base = str(x % base) + new_base\n        x = x // base\n    return new_base", "prompt_tokens": 399, "completion_tokens": 566, "duration": 10.082989692687988}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 364, "duration": 9.72012996673584}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n <= 1:\n        return 0\n    dp = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        dp[i % 4] = dp[(i - 1) % 4] + dp[(i - 2) % 4] + dp[(i - 3) % 4] + dp[(i - 4) % 4]\n    return dp[n % 4]", "prompt_tokens": 479, "completion_tokens": 632, "duration": 14.734287023544312}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 383, "completion_tokens": 400, "duration": 8.182841539382935}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 483, "duration": 9.746729373931885}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 413, "completion_tokens": 535, "duration": 8.824591636657715}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 474, "duration": 10.215287446975708}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 430, "completion_tokens": 586, "duration": 10.113733530044556}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 588, "completion_tokens": 376, "duration": 7.414832353591919}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 294, "duration": 5.900458574295044}
{"task_id": "HumanEval/54", "generated_code": "import collections\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 448, "completion_tokens": 394, "duration": 7.222748517990112}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 569, "duration": 9.744993448257446}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 400, "completion_tokens": 635, "duration": 13.344969272613525}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 458, "duration": 7.851860523223877}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 378, "duration": 9.91674518585205}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    def smallest_prime_factor(num):\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return i\n        return num\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n", "prompt_tokens": 371, "completion_tokens": 617, "duration": 14.64674687385559}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 481, "duration": 12.30714726448059}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')':\n            if not stack: return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 653, "duration": 13.798486471176147}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 419, "duration": 11.73822546005249}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 648, "duration": 11.260652780532837}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i, char in enumerate(s):\n        if char.lower() in vowels or (char.lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 497, "duration": 10.790664911270142}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 479, "duration": 11.391719102859497}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 416, "duration": 8.019627571105957}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 373, "duration": 8.937991380691528}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(node, idx) for idx, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    even_nodes.sort(key=lambda x: (x[0], x[1]))\n    return [even_nodes[0][0], even_nodes[0][1]]", "prompt_tokens": 620, "completion_tokens": 562, "duration": 11.342120170593262}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, frequency in freq.items():\n        if num > frequency and frequency > result:\n            result = frequency\n    return result if result != -1 else -1", "prompt_tokens": 473, "completion_tokens": 570, "duration": 12.106200695037842}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 523, "duration": 11.39744520187378}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 510, "duration": 11.082479238510132}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 385, "duration": 9.884855270385742}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 836, "duration": 15.333781003952026}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2 if sum2 < sum1 else lst1", "prompt_tokens": 501, "completion_tokens": 496, "duration": 13.127434730529785}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 517, "duration": 8.750258922576904}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 413, "duration": 7.146666049957275}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 418, "completion_tokens": 343, "duration": 10.64034128189087}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 484, "duration": 10.854695320129395}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 449, "duration": 9.086791276931763}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    return all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 706, "completion_tokens": 706, "duration": 13.93883204460144}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 718, "duration": 12.753095388412476}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 613, "duration": 10.928066730499268}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n: int) -> int:\n    start_with_one = count_start_with_one(n)\n    end_with_one = count_end_with_one(n)\n    start_end_with_one = 1  # Only one number starts and ends with 1\n    return start_with_one + end_with_one - start_end_with_one", "prompt_tokens": 352, "completion_tokens": 604, "duration": 10.617527723312378}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(d) for d in str(N)))[2:]", "prompt_tokens": 441, "completion_tokens": 359, "duration": 8.206561803817749}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)", "prompt_tokens": 363, "completion_tokens": 405, "duration": 6.943897724151611}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 381, "duration": 6.856643438339233}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if x in lst[i]:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 982, "completion_tokens": 596, "duration": 11.905587911605835}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=sum(array[:2]) % 2 == 0)", "prompt_tokens": 511, "completion_tokens": 373, "duration": 9.060357332229614}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2*2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 642, "duration": 12.023002862930298}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 432, "completion_tokens": 446, "duration": 8.778061389923096}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 415, "completion_tokens": 383, "duration": 7.752970218658447}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 536, "duration": 10.607105255126953}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                result += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result", "prompt_tokens": 417, "completion_tokens": 470, "duration": 11.518843412399292}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum_digits(max_prime)", "prompt_tokens": 594, "completion_tokens": 472, "duration": 9.797203540802002}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 477, "completion_tokens": 384, "duration": 11.220960855484009}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 453, "completion_tokens": 584, "duration": 11.271688461303711}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 406, "completion_tokens": 378, "duration": 8.47187876701355}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char.isupper() and char in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 517, "duration": 10.667259693145752}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    rounded_num = round(num)\n    if rounded_num > num:\n        return math.floor(num)\n    else:\n        return math.ceil(num)", "prompt_tokens": 464, "completion_tokens": 406, "duration": 10.027170419692993}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + i)\n        else:\n            stones.append(n + i + 1)\n    return stones", "prompt_tokens": 440, "completion_tokens": 415, "duration": 10.229372024536133}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 341, "duration": 7.994979381561279}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 484, "duration": 11.03884482383728}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 723, "completion_tokens": 524, "duration": 14.297268390655518}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 463, "duration": 10.246522665023804}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    filtered_arr.reverse()\n    return [digit_names[num-1] for num in filtered_arr]", "prompt_tokens": 584, "completion_tokens": 419, "duration": 9.371933698654175}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 460, "duration": 12.81102967262268}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 539, "duration": 9.586529016494751}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 411, "duration": 8.323948621749878}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_idx = arr.index(min(arr))\n    return arr == sorted(arr[min_idx:] + arr[:min_idx])", "prompt_tokens": 607, "completion_tokens": 591, "duration": 11.540806770324707}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum1 = sum(x for x in lst1 if x % 2 != 0)\n    sum2 = sum(x for x in lst2 if x % 2 != 0)\n    return 'YES' if sum1 >= sum2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 646, "duration": 15.240384817123413}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\ndef histogram(test):\n    letters = test.split()\n    counts = Counter(letters)\n    max_count = max(counts.values()) if counts else 0\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 459, "completion_tokens": 514, "duration": 13.984258651733398}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join([char for char in s if char not in c])\n    is_palindrome = filtered_str == filtered_str[::-1]\n    return (filtered_str, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 866, "duration": 15.126100063323975}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 444, "duration": 9.167855739593506}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 545, "duration": 10.779228448867798}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowering = 0\n    for row in grid:\n        well_water = sum(row)\n        total_lowering += math.ceil(well_water / capacity)\n    return total_lowering", "prompt_tokens": 631, "completion_tokens": 850, "duration": 16.46787405014038}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 423, "duration": 8.142892837524414}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char.lower() in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 461, "duration": 11.052310705184937}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    found_consonant = False\n    for char in word[::-1]:\n        if char in consonants:\n            found_consonant = True\n        if found_consonant and char in vowels:\n            return char\n    return ''", "prompt_tokens": 457, "completion_tokens": 605, "duration": 11.721812963485718}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(': stack.append(char)\n            else:\n                if stack and stack[-1] == '(': stack.pop()\n                else: return 'No'\n        if stack: return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 761, "duration": 17.064960479736328}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 385, "duration": 9.415848016738892}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 526, "duration": 10.625904083251953}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 380, "duration": 9.249239683151245}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)", "prompt_tokens": 539, "completion_tokens": 474, "duration": 8.897472858428955}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n        else:\n            return False\n    except (ValueError, IndexError):\n        return False", "prompt_tokens": 571, "completion_tokens": 677, "duration": 14.503341913223267}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 448, "completion_tokens": 412, "duration": 7.847701072692871}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 570, "duration": 9.545993566513062}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    if start > end: \n        return 'NO' \n    length = end - start + 1 \n    if is_prime(length): \n        return 'YES' \n    else: \n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 513, "duration": 12.14585256576538}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_signs = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product_signs *= 1 if num == 0 else num/abs(num)\n        sum_magnitudes += abs(num)\n    return product_signs * sum_magnitudes", "prompt_tokens": 430, "completion_tokens": 433, "duration": 8.04361867904663}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def backtrack(path, visited):\n        if len(path) == k:\n            return path\n        for neighbor in get_neighbors(path[-1]):\n            if neighbor not in visited:\n                new_path = backtrack(path + [neighbor], visited | {neighbor})\n                if new_path:\n                    return new_path\n        return None\n    def get_neighbors(cell):\n        x, y = cell\n        neighbors = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                neighbors.append((nx, ny))\n        return neighbors\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = backtrack([(i, j)], {(i, j)})\n            if path:\n                return [grid[x][y] for x, y in path]", "prompt_tokens": 1409, "completion_tokens": 1385, "duration": 31.180665016174316}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "prompt_tokens": 543, "completion_tokens": 725, "duration": 18.794462203979492}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for d in str(abs(n)):\n        if int(d) % 2 != 0:\n            product *= int(d)\n    return product if product != 1 else 0", "prompt_tokens": 379, "completion_tokens": 387, "duration": 10.121239423751831}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 441, "completion_tokens": 662, "duration": 12.453602075576782}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 497, "duration": 9.236014127731323}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 383, "duration": 6.448544263839722}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            result = i - 1\n    return result", "prompt_tokens": 411, "completion_tokens": 506, "duration": 10.691582679748535}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst): \n    neg_int = None \n    pos_int = None \n    for num in lst: \n        if num < 0 and (neg_int is None or num > neg_int): \n            neg_int = num \n        elif num > 0 and (pos_int is None or num < pos_int): \n            pos_int = num \n    return (neg_int, pos_int)", "prompt_tokens": 446, "completion_tokens": 480, "duration": 13.011599063873291}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 570, "duration": 12.424917459487915}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 385, "completion_tokens": 520, "duration": 10.913838624954224}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 403, "completion_tokens": 475, "duration": 13.181368112564087}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces == 2:\n                result.append('_')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n            consecutive_spaces = 0\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 450, "duration": 9.540046453475952}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 429, "duration": 9.262502193450928}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 482, "duration": 8.033182144165039}
{"task_id": "HumanEval/143", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 489, "duration": 10.618398427963257}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 463, "completion_tokens": 570, "duration": 14.782151699066162}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 438, "duration": 11.549370765686035}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 538, "duration": 10.52646017074585}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 730, "duration": 18.843594789505005}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = {\n        'Mercury': 1,\n        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter': 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n    result = [planet for planet, pos in planets.items() if start < pos < end]\n    return tuple(sorted(result, key=lambda x: planets[x]))", "prompt_tokens": 519, "completion_tokens": 538, "duration": 10.973587274551392}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst): \n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 406, "duration": 9.77899718284607}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 394, "completion_tokens": 556, "duration": 14.166435718536377}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 445, "completion_tokens": 405, "duration": 10.303069353103638}
{"task_id": "HumanEval/152", "generated_code": "def compare(scores, guesses):\n    return [abs(score - guess) if score != guess else 0 for score, guess in zip(scores, guesses)]", "prompt_tokens": 538, "completion_tokens": 410, "duration": 7.613377809524536}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    strengths.sort(key=lambda x: (x[1], extensions.index(x[0])))\n    return f'{class_name}.{strengths[0][0]}'", "prompt_tokens": 585, "completion_tokens": 518, "duration": 12.290249586105347}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a + a", "prompt_tokens": 437, "completion_tokens": 627, "duration": 14.541255474090576}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 602, "duration": 15.214520454406738}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',\n        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 781, "duration": 16.878103256225586}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 416, "completion_tokens": 618, "duration": 11.070695400238037}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 428, "completion_tokens": 593, "duration": 11.910124063491821}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 585, "completion_tokens": 464, "duration": 8.45435905456543}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(1, len(operand)):\n        expression += operator[i-1] + str(operand[i])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 666, "duration": 12.826737403869629}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 415, "completion_tokens": 412, "duration": 8.699865818023682}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 384, "completion_tokens": 495, "duration": 8.976920127868652}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 397, "duration": 11.265390634536743}
