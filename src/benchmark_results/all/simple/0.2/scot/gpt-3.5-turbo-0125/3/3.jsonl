{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    close_elements = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                close_elements = True\n                break\n        if close_elements:\n            break\n    return close_elements", "prompt_tokens": 650, "completion_tokens": 227, "duration": 8.286595821380615}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    open_braces_count = 0\n    \n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')':\n            open_braces_count -= 1\n        current_group += c\n        \n        if open_braces_count == 0:\n            groups.append(current_group)\n            current_group = ''\n    \n    return groups", "prompt_tokens": 638, "completion_tokens": 257, "duration": 11.017881870269775}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 8.63036322593689}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 557, "completion_tokens": 106, "duration": 5.801719665527344}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 647, "completion_tokens": 206, "duration": 7.66600489616394}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 527, "completion_tokens": 146, "duration": 6.8446104526519775}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 685, "completion_tokens": 310, "duration": 10.31018853187561}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 109, "duration": 7.531807899475098}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 6.392060995101929}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    window = []\n    \n    for num in numbers:\n        window.append(num)\n        if len(window) > 1:\n            if num > window[-2]:\n                window[-1] = num\n            rolling_max_list.append(window[-2])\n        else:\n            rolling_max_list.append(window[0])\n    \n    return rolling_max_list", "prompt_tokens": 639, "completion_tokens": 275, "duration": 9.081117630004883}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 627, "completion_tokens": 106, "duration": 5.727340936660767}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 506, "completion_tokens": 155, "duration": 6.650132894515991}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str", "prompt_tokens": 553, "completion_tokens": 158, "duration": 6.420793294906616}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 95, "duration": 5.380754709243774}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 159, "duration": 7.744551420211792}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 5.253062963485718}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 137, "duration": 5.5046515464782715}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 7.83825421333313}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i + len(substring)]:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 6.408603191375732}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    numeral_values = [numeral_dict[num] for num in numeral_list]\n    sorted_numeral_values = sorted(numeral_values)\n    sorted_numeral_list = [key for value, key in sorted(zip(sorted_numeral_values, numeral_dict.keys()))]\n    sorted_numbers = ' '.join(sorted_numeral_list)\n    return sorted_numbers", "prompt_tokens": 595, "completion_tokens": 284, "duration": 8.975597143173218}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 12.922129392623901}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_val = maximum - minimum\n    rescaled_numbers = [(num - minimum) / range_val for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 627, "completion_tokens": 188, "duration": 7.45307469367981}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 5.238387823104858}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 403, "completion_tokens": 86, "duration": 5.025559902191162}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 421, "completion_tokens": 105, "duration": 5.346418619155884}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 616, "completion_tokens": 173, "duration": 6.281824350357056}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 491, "completion_tokens": 119, "duration": 5.6187803745269775}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 6.502417802810669}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 5.133666276931763}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.405688762664795}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 5.187378168106079}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 6.195405721664429}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"Input list must have even length and largest coefficient must be non-zero\"\n    \n    x = 0.0\n    step_size = 0.1\n    tolerance = 0.0001\n    \n    while True:\n        value = poly(xs, x)\n        if abs(value) < tolerance:\n            return x\n        x -= step_size", "prompt_tokens": 923, "completion_tokens": 247, "duration": 9.074471473693848}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp = sorted([l[j] for j in range(i, len(l), 3)])\n            result.extend(temp)\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 699, "completion_tokens": 210, "duration": 7.144685983657837}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 477, "completion_tokens": 87, "duration": 4.481923580169678}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 526, "completion_tokens": 144, "duration": 5.273376941680908}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 520, "completion_tokens": 171, "duration": 6.771451473236084}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        if i % 2 != 0 or i == len(l) - 1:\n            temp.sort()\n            result.extend(temp)\n            temp = []\n    return result", "prompt_tokens": 608, "completion_tokens": 181, "duration": 7.818612575531006}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 674, "completion_tokens": 181, "duration": 6.377451658248901}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    fib_list = [0, 1]\n    count = 0\n    num = 1\n\n    while count < n:\n        num += 1\n        if is_fibonacci(num):\n            fib_list.append(num)\n            if is_prime(num):\n                count += 1\n\n    return fib_list[-1]", "prompt_tokens": 555, "completion_tokens": 275, "duration": 8.078096866607666}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 10.893483877182007}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            collisions += i\n    return collisions", "prompt_tokens": 638, "completion_tokens": 124, "duration": 4.346234560012817}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 4.440290927886963}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 677, "completion_tokens": 153, "duration": 10.39493465423584}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 147, "duration": 22.3890597820282}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 68, "duration": 4.802826642990112}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n+1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 228, "duration": 9.360331296920776}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 494, "completion_tokens": 142, "duration": 10.077794790267944}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 492, "completion_tokens": 116, "duration": 7.538739919662476}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 500, "completion_tokens": 50, "duration": 8.827723741531372}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_str = \"\"\n    for ch in s:\n        decoded_ch = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_str += decoded_ch\n    return decoded_str", "prompt_tokens": 526, "completion_tokens": 146, "duration": 7.101890325546265}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.514109134674072}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 7.358073472976685}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 394, "completion_tokens": 47, "duration": 7.9928693771362305}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in s1:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n\n    for count in char_count.values():\n        if count != 0:\n            return False\n\n    return True", "prompt_tokens": 695, "completion_tokens": 263, "duration": 9.264113187789917}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n    \n    return result", "prompt_tokens": 444, "completion_tokens": 156, "duration": 7.821964502334595}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 552, "completion_tokens": 170, "duration": 55.73985290527344}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 497, "completion_tokens": 120, "duration": 6.387197971343994}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(common_elements)", "prompt_tokens": 556, "completion_tokens": 120, "duration": 10.046790838241577}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 8.283834218978882}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.887698411941528}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 163, "duration": 8.538161754608154}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 551, "completion_tokens": 103, "duration": 4.844396352767944}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n    \n    return fibfib_list[n]", "prompt_tokens": 681, "completion_tokens": 244, "duration": 8.386244535446167}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s[-1] == 'y':\n        vowels.append('y')\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count", "prompt_tokens": 593, "completion_tokens": 157, "duration": 8.728902339935303}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "prompt_tokens": 545, "completion_tokens": 190, "duration": 6.316955804824829}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 538, "completion_tokens": 90, "duration": 6.542070150375366}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 819, "completion_tokens": 181, "duration": 6.819394826889038}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_value is None or node < smallest_value):\n            smallest_value = node\n            smallest_index = i\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1043, "completion_tokens": 273, "duration": 11.402702808380127}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for num, freq in freq_map.items():\n        if num > freq and num > greatest_int:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 715, "completion_tokens": 211, "duration": 6.690174341201782}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    min_ptr = 0\n    max_ptr = len(lst) - 1\n    while min_ptr <= max_ptr:\n        sorted_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            sorted_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return sorted_lst", "prompt_tokens": 648, "completion_tokens": 227, "duration": 7.877487659454346}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 621, "completion_tokens": 209, "duration": 8.620652914047241}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n\n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 12.258430480957031}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 714, "completion_tokens": 211, "duration": 9.588898181915283}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 199, "duration": 9.565240621566772}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 218, "duration": 10.414693117141724}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 621, "completion_tokens": 119, "duration": 7.806978225708008}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (abs(a)**(1/3)) % 1 == 0", "prompt_tokens": 561, "completion_tokens": 108, "duration": 4.748211860656738}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.774754285812378}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 677, "completion_tokens": 205, "duration": 10.659472942352295}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 9.781310081481934}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 17.059122562408447}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 7.136476755142212}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 445, "completion_tokens": 164, "duration": 7.679100513458252}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum", "prompt_tokens": 609, "completion_tokens": 122, "duration": 6.982437372207642}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 6.9693193435668945}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 643, "completion_tokens": 173, "duration": 7.525830984115601}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 220, "duration": 6.777397632598877}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = 0\n    if len(array) == 0:\n        return []\n    first_index = array[0]\n    last_index = array[-1]\n    sum_first_last = first_index + last_index\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 840, "completion_tokens": 258, "duration": 7.498535394668579}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 7.490951299667358}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 7.063757419586182}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.523886680603027}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 137, "duration": 8.008856773376465}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            new_index = (ord(ch.lower()) - ord('a') + 2) % 26\n            new_char = chr(ord('a') + new_index)\n            encoded_message += new_char.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 628, "completion_tokens": 287, "duration": 10.712462663650513}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 929, "completion_tokens": 229, "duration": 9.0277681350708}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 10.32224726676941}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 5.738985061645508}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 545, "completion_tokens": 118, "duration": 6.890380620956421}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 8.02142596244812}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 682, "completion_tokens": 187, "duration": 6.337330102920532}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n\n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 7.600964784622192}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [\",\", \" \"]:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 8.754788637161255}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 114, "duration": 9.098300218582153}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    count = 0\n    \n    for i in range(n, m+1):\n        total += i\n        count += 1\n    \n    avg = round(total / count)\n    return bin(avg)", "prompt_tokens": 623, "completion_tokens": 151, "duration": 8.301989793777466}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    \n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 570, "completion_tokens": 179, "duration": 8.348202466964722}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 985, "completion_tokens": 343, "duration": 8.482717990875244}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 597, "completion_tokens": 170, "duration": 7.288340091705322}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 8.659828424453735}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num != 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 6.575625419616699}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    n = len(arr)\n    for _ in range(n):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    return False", "prompt_tokens": 978, "completion_tokens": 195, "duration": 8.934494018554688}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum_lst1 = sum(x for x in lst1 if x % 2 != 0)\n    sum_lst2 = sum(x for x in lst2 if x % 2 != 0)\n    \n    if (sum_lst1 - sum_lst2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 819, "completion_tokens": 251, "duration": 10.275882482528687}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        \n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    \n    max_letters = [key for key, value in hist_dict.items() if value == max_count]\n    result_dict = {key: value for key, value in hist_dict.items() if key in max_letters}\n    \n    return result_dict", "prompt_tokens": 762, "completion_tokens": 333, "duration": 8.683102130889893}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start = 0\n    end = len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 740, "completion_tokens": 258, "duration": 9.146056890487671}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{i}ng {i} of the {i}nput.\")\n    return result_lst", "prompt_tokens": 752, "completion_tokens": 231, "duration": 8.814016580581665}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 507, "completion_tokens": 130, "duration": 5.0329883098602295}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n\n    return times", "prompt_tokens": 987, "completion_tokens": 122, "duration": 6.759655475616455}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 701, "completion_tokens": 129, "duration": 6.384891748428345}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 751, "completion_tokens": 203, "duration": 5.879008531570435}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels:\n            last_consonant_index = i\n        elif word[i].lower() in vowels:\n            if last_consonant_index != -1:\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel", "prompt_tokens": 725, "completion_tokens": 286, "duration": 10.135781049728394}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 301, "duration": 10.823288440704346}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 779, "completion_tokens": 122, "duration": 4.302020072937012}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.665514707565308}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 161, "duration": 8.129345655441284}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.2164459228515625}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "prompt_tokens": 1006, "completion_tokens": 419, "duration": 15.3645601272583}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split()\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        words.append(count)\n    return words", "prompt_tokens": 746, "completion_tokens": 281, "duration": 7.310271978378296}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n\n    for num in lst:\n        if num < prev:\n            sorted = False\n            break\n        elif num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        prev = num\n\n    return sorted", "prompt_tokens": 935, "completion_tokens": 260, "duration": 7.405946969985962}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if length <= 1:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 988, "completion_tokens": 367, "duration": 13.857770919799805}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_signs = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes -= num\n        product_signs *= 1 if num == 0 else num // abs(num)\n    \n    return product_signs * sum_magnitudes", "prompt_tokens": 617, "completion_tokens": 214, "duration": 10.413192749023438}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    visited = set()\n    pq = [(grid[0][0], 0, 0, [grid[0][0]])]\n\n    while pq:\n        val, x, y, path = heapq.heappop(pq)\n\n        if len(path) == k:\n            return path\n\n        visited.add((x, y))\n\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                heapq.heappush(pq, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n\n    return None", "prompt_tokens": 1323, "completion_tokens": 477, "duration": 11.678436756134033}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_seq = []\n    if n == 0:\n        tribonacci_seq.append(0)\n        return tribonacci_seq\n    if n == 1:\n        tribonacci_seq.append(1)\n        return tribonacci_seq\n    if n == 2:\n        tribonacci_seq.extend([1, 1])\n        return tribonacci_seq\n    if n == 3:\n        tribonacci_seq.extend([1, 1, 3])\n        return tribonacci_seq\n    \n    tribonacci_seq.extend([0, 1, 1])\n    a, b, c = 0, 1, 1\n    for _ in range(n - 2):\n        next_term = a + b + c\n        tribonacci_seq.append(next_term)\n        a, b, c = b, c, next_term\n    \n    return tribonacci_seq", "prompt_tokens": 973, "completion_tokens": 427, "duration": 11.235281705856323}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 150, "duration": 9.241421222686768}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True", "prompt_tokens": 651, "completion_tokens": 246, "duration": 5.826030492782593}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 10.715749979019165}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 634, "completion_tokens": 172, "duration": 9.790151834487915}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 555, "completion_tokens": 141, "duration": 7.072709083557129}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 231, "duration": 9.615833044052124}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 729, "completion_tokens": 299, "duration": 11.436146259307861}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 560, "completion_tokens": 220, "duration": 8.468263626098633}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.510942459106445}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\"\n        else:\n            if count > 2:\n                modified_text += \"-\"\n                count = 0\n            modified_text += ch\n    if count > 2:\n        modified_text += \"-\"\n    return modified_text", "prompt_tokens": 634, "completion_tokens": 265, "duration": 7.998889207839966}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_flag = False\n    latin_letter_flag = False\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n        elif ch == '.':\n            if dot_flag:\n                return 'No'\n            dot_flag = True\n        elif ch.isalpha():\n            if not dot_flag:\n                latin_letter_flag = True\n        elif ch == ' ':\n            return 'No'\n\n    if not dot_flag or not latin_letter_flag:\n        return 'No'\n\n    extension = file_name.split('.')[-1]\n    if extension not in valid_extensions:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 937, "completion_tokens": 422, "duration": 14.634501218795776}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 10.020995616912842}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 683, "completion_tokens": 222, "duration": 9.8505699634552}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "prompt_tokens": 636, "completion_tokens": 110, "duration": 6.922290802001953}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {i: sum(map(int, str(abs(num)))) for i, num in enumerate(nums)}\n    sorted_indices = sorted(digit_sums, key=lambda x: (digit_sums[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 642, "completion_tokens": 220, "duration": 10.869991064071655}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 8.131123065948486}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 7.803971767425537}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    \n    return tuple(result)", "prompt_tokens": 845, "completion_tokens": 315, "duration": 9.639266967773438}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 722, "completion_tokens": 137, "duration": 3.367584705352783}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return None\n    if n == 2:\n        return x\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 507, "completion_tokens": 147, "duration": 4.057714939117432}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 4.405362129211426}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 5.523942947387695}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 944, "completion_tokens": 232, "duration": 4.75882363319397}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a += a\n    for i in range(n):\n        if b in a[i:i+m]:\n            return True\n    return False", "prompt_tokens": 646, "completion_tokens": 190, "duration": 7.144449472427368}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 4.678511619567871}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    numerals = [(value, numeral) for value, numeral in roman_numerals.items()]\n    \n    for value, numeral in numerals:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 614, "completion_tokens": 315, "duration": 6.691298246383667}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 5.444035053253174}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 7.306955814361572}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 919, "completion_tokens": 165, "duration": 5.787675380706787}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 857, "completion_tokens": 294, "duration": 9.210607051849365}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 4.3333070278167725}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 4.962172985076904}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n\n    even_digits = [num for num in range(a, b+1) if num % 2 == 0]\n\n    return even_digits", "prompt_tokens": 542, "completion_tokens": 130, "duration": 5.1468095779418945}
