{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 639, "completion_tokens": 196, "duration": 9.604228258132935}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')':\n            open_braces_count -= 1\n        if ch in '()':\n            current_group += ch\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 638, "completion_tokens": 266, "duration": 11.263827800750732}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 501, "completion_tokens": 145, "duration": 7.8540918827056885}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 7.149654865264893}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 662, "completion_tokens": 278, "duration": 9.922537565231323}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 527, "completion_tokens": 147, "duration": 9.036419868469238}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 681, "completion_tokens": 304, "duration": 10.648675441741943}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 106, "duration": 8.552725315093994}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_ = 0\n    product = 1\n    \n    for number in numbers:\n        sum_ += number\n        product *= number\n    \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 12.72929835319519}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        rolling_max_list.append(max_val)\n    return rolling_max_list", "prompt_tokens": 594, "completion_tokens": 199, "duration": 10.894744396209717}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 653, "completion_tokens": 244, "duration": 13.566155433654785}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 504, "completion_tokens": 186, "duration": 8.846364259719849}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 546, "completion_tokens": 189, "duration": 8.909899950027466}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 452, "completion_tokens": 146, "duration": 7.690650224685669}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 460, "completion_tokens": 133, "duration": 6.669878244400024}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 7.167176961898804}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 9.95417308807373}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 715, "completion_tokens": 198, "duration": 11.90955400466919}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 7.011512517929077}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    sorted_numbers = sorted(words, key=lambda word: numeral_to_number[word])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 589, "completion_tokens": 233, "duration": 9.849251508712769}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 720, "completion_tokens": 227, "duration": 13.554129600524902}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 626, "completion_tokens": 192, "duration": 9.16062879562378}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 9.85757303237915}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 5.8176398277282715}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 150, "duration": 12.863722562789917}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 616, "completion_tokens": 175, "duration": 9.421671867370605}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    count_dict = {}\n    for number in numbers:\n        if number not in count_dict:\n            count_dict[number] = 1\n        else:\n            count_dict[number] += 1\n    for number in numbers:\n        if count_dict[number] == 1:\n            result.append(number)\n    return result", "prompt_tokens": 532, "completion_tokens": 193, "duration": 9.295313596725464}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 461, "completion_tokens": 164, "duration": 11.602967977523804}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 6.964685440063477}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 8.97550106048584}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 185, "duration": 12.245906114578247}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 184, "duration": 15.096217632293701}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n    for x in range(-100, 101):\n        if abs(poly(xs, x)) < 1e-6:\n            return x\n    return None", "prompt_tokens": 926, "completion_tokens": 370, "duration": 13.133792161941528}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    third_elements = sorted(l[2::3])\n    result = [third_elements.pop(0) if (i + 1) % 3 == 0 else val for i, val in enumerate(l)]\n    return result", "prompt_tokens": 695, "completion_tokens": 261, "duration": 12.0501868724823}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    l.sort()\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    return unique_list", "prompt_tokens": 477, "completion_tokens": 175, "duration": 12.356488227844238}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 502, "completion_tokens": 194, "duration": 8.21976637840271}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 520, "completion_tokens": 174, "duration": 8.018282651901245}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"Sorts the list l at even indices while keeping the odd indices values the same.\"\"\"\n    even_vals = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_vals[even_idx]\n            even_idx += 1\n    return l", "prompt_tokens": 621, "completion_tokens": 217, "duration": 11.007157325744629}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 777, "completion_tokens": 339, "duration": 21.887778520584106}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 0\n    num = 0\n\n    while count < n:\n        fib_num = fib_list[-1] + fib_list[-2]\n        fib_list.append(fib_num)\n        if is_prime(fib_num):\n            count += 1\n            num = fib_num\n        if count == n:\n            break\n\n    return num", "prompt_tokens": 597, "completion_tokens": 294, "duration": 19.335282564163208}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 257, "duration": 9.84963846206665}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions in a car race where n cars are driving left to right and n cars are driving right to left.\n    \"\"\"\n    collisions = 0\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            collisions += i\n    return collisions", "prompt_tokens": 638, "completion_tokens": 159, "duration": 13.621814012527466}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 100, "duration": 5.943221092224121}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 670, "completion_tokens": 146, "duration": 7.447163343429565}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 537, "completion_tokens": 176, "duration": 11.48264455795288}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 391, "completion_tokens": 93, "duration": 4.141990900039673}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[n]", "prompt_tokens": 724, "completion_tokens": 207, "duration": 10.707274436950684}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "prompt_tokens": 486, "completion_tokens": 138, "duration": 11.674893617630005}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 508, "completion_tokens": 193, "duration": 10.427979469299316}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 601, "completion_tokens": 246, "duration": 9.383479595184326}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 526, "completion_tokens": 151, "duration": 7.270826101303101}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = \"\".join([ch for ch in text if ch not in vowels])\n    return result", "prompt_tokens": 599, "completion_tokens": 245, "duration": 15.214956521987915}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 473, "completion_tokens": 154, "duration": 8.60028886795044}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 394, "completion_tokens": 87, "duration": 13.529505491256714}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 728, "completion_tokens": 219, "duration": 10.023647546768188}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 189, "duration": 6.368263006210327}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 549, "completion_tokens": 172, "duration": 10.695550441741943}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 539, "completion_tokens": 213, "duration": 10.572911739349365}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 580, "completion_tokens": 145, "duration": 6.550992965698242}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 178, "duration": 11.312894105911255}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 8.801500082015991}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 534, "completion_tokens": 157, "duration": 9.421984910964966}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 539, "completion_tokens": 186, "duration": 10.885791301727295}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    \"\"\"Compute the n-th element of the fibfib number sequence.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 679, "completion_tokens": 257, "duration": 13.217673778533936}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i, c in enumerate(s):\n        if c in vowels or (c == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 619, "completion_tokens": 204, "duration": 10.689667701721191}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    str_x = str(x)\n    len_x = len(str_x)\n    effective_shift = shift % len_x if len_x else 0\n    if effective_shift == 0:\n        return str_x[::-1] if shift > 0 else str_x\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    return shifted_str", "prompt_tokens": 553, "completion_tokens": 256, "duration": 16.526377201080322}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 536, "completion_tokens": 80, "duration": 8.35135793685913}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges, and an integer representing the total number of fruits,\n    returns the number of mango fruits in the basket.\n    \"\"\"\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    apples, oranges = numbers\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 819, "completion_tokens": 225, "duration": 8.993401050567627}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if node < smallest_value:\n                smallest_value = node\n                smallest_index = i\n                found_even = True\n            elif node == smallest_value:\n                smallest_index = min(i, smallest_index)\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1048, "completion_tokens": 276, "duration": 11.931198835372925}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    greatest_int = -1\n    for key in freq_map:\n        if key > greatest_int and freq_map[key] >= key:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 724, "completion_tokens": 219, "duration": 9.319761276245117}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result_lst = []\n    lst.sort()\n    min_ptr, max_ptr = 0, len(lst) - 1\n    while min_ptr <= max_ptr:\n        result_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            result_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return result_lst", "prompt_tokens": 637, "completion_tokens": 215, "duration": 9.85366153717041}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 239, "duration": 13.139277696609497}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    '''\n    # Check if q is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of q is less than or equal to w\n    return sum(q) <= w", "prompt_tokens": 880, "completion_tokens": 235, "duration": 10.845670461654663}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 716, "completion_tokens": 211, "duration": 10.41511607170105}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 239, "duration": 10.606194496154785}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            primes.append(i)\n            if len(primes) > 3:  # Optimization: stop if more than 3 prime factors\n                break\n    return len(primes) == 3 and a == primes[0] * primes[1] * primes[2]", "prompt_tokens": 556, "completion_tokens": 287, "duration": 10.94309663772583}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 621, "completion_tokens": 135, "duration": 8.239709615707397}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    '''\n    cube_root = abs(a) ** (1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 563, "completion_tokens": 147, "duration": 6.839801788330078}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    return sum(c in '2357BD' for c in num)", "prompt_tokens": 926, "completion_tokens": 91, "duration": 5.238616466522217}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    binary_str += bin(decimal)[2:]\n    binary_str += 'db'\n    return binary_str", "prompt_tokens": 632, "completion_tokens": 131, "duration": 7.554978609085083}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 8.954201221466064}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 549, "duration": 17.920493841171265}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 546, "completion_tokens": 239, "duration": 11.341282606124878}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Special case for single-digit numbers\n    else:\n        # For n-digit numbers starting with 1: 10^(n-1) possibilities\n        # For n-digit numbers ending with 1: 10^(n-1) possibilities\n        # Subtract the overlap (numbers that both start and end with 1): 10^(n-2)\n        return 2 * 10**(n-1) - 10**(n-2)", "prompt_tokens": 422, "completion_tokens": 221, "duration": 11.707324504852295}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 610, "completion_tokens": 132, "duration": 7.827630281448364}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 180, "duration": 8.93237018585205}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all the characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        # Splitting the word into characters, sorting them, and then joining them back together\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    # Joining the ordered words with spaces to form the final string\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 630, "completion_tokens": 242, "duration": 9.476227521896362}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row[::-1]):\n            if value == x:\n                result.append((i, len(row) - 1 - j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 917, "completion_tokens": 216, "duration": 8.324938535690308}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 788, "completion_tokens": 174, "duration": 9.201250791549683}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet by 2 multiplied by 2 places.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 220, "duration": 12.413681268692017}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest is float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 8.857416152954102}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    # Splitting the input string into sentences\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    count = 0\n\n    # Counting sentences that start with \"I\"\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n\n    return count", "prompt_tokens": 540, "completion_tokens": 162, "duration": 9.6709303855896}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 616, "completion_tokens": 201, "duration": 11.166995286941528}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                encoded_message += vowel_replacement[ch]\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 663, "completion_tokens": 360, "duration": 14.697324752807617}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 934, "completion_tokens": 235, "duration": 10.993735790252686}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 277, "duration": 16.021437168121338}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 165, "duration": 10.867627620697021}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 547, "completion_tokens": 140, "duration": 7.740776062011719}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 135, "duration": 8.198236465454102}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num if num == floor_num else floor_num + 1\n    if num - floor_num < ceil_num - num:\n        return floor_num\n    elif num - floor_num > ceil_num - num:\n        return ceil_num\n    else:  # Equidistant case, round away from zero\n        return ceil_num if num > 0 else floor_num - 1", "prompt_tokens": 683, "completion_tokens": 263, "duration": 19.016842126846313}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 7.453782081604004}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 619, "completion_tokens": 221, "duration": 9.985020160675049}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 503, "completion_tokens": 149, "duration": 6.71431303024292}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        count = m - n + 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 631, "completion_tokens": 168, "duration": 7.967959642410278}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n\n    result.sort()\n    return result", "prompt_tokens": 553, "completion_tokens": 204, "duration": 10.642945289611816}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    result = [num_to_name[num] for num in filtered_arr]\n    return result", "prompt_tokens": 985, "completion_tokens": 360, "duration": 18.363210916519165}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 194, "duration": 8.80779767036438}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 202, "duration": 11.395634651184082}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= abs(num) % 10\n            num = abs(num) // 10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 267, "duration": 9.706458330154419}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    shifted_arr = arr[min_index:] + arr[:min_index]\n    return shifted_arr == sorted(arr)", "prompt_tokens": 956, "completion_tokens": 147, "duration": 7.500668287277222}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    if count_odd == 0:\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            count_odd -= 1\n            if count_odd == 0:\n                break\n    return \"YES\" if count_odd == 0 else \"NO\"", "prompt_tokens": 781, "completion_tokens": 223, "duration": 9.501884937286377}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    hist_dict = {}\n    max_count = 0\n    for letter in words:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    result_dict = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return result_dict", "prompt_tokens": 762, "completion_tokens": 309, "duration": 10.716310739517212}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 740, "completion_tokens": 202, "duration": 8.206931591033936}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result_lst = []\n    for s in lst:\n        count = sum(1 for char in s if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 727, "completion_tokens": 275, "duration": 12.052426815032959}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 543, "completion_tokens": 200, "duration": 12.46610689163208}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += 1\n    return times", "prompt_tokens": 1029, "completion_tokens": 168, "duration": 7.947816610336304}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 740, "completion_tokens": 168, "duration": 6.535362243652344}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\"\"\"\n    words = []\n    if not s:\n        return words\n\n    def count_consonants(word):\n        count = 0\n        for c in word.lower():\n            if c in \"bcdfghjklmnpqrstvwxyz\":\n                count += 1\n        return count\n\n    split_words = s.split()\n\n    for word in split_words:\n        if count_consonants(word) == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 772, "completion_tokens": 294, "duration": 10.135281085968018}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            last_consonant_index = i\n        elif last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "prompt_tokens": 724, "completion_tokens": 290, "duration": 13.87589144706726}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 255, "duration": 13.082435369491577}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 775, "completion_tokens": 138, "duration": 6.867610692977905}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 527, "completion_tokens": 135, "duration": 7.607399940490723}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum", "prompt_tokens": 611, "completion_tokens": 179, "duration": 7.7835283279418945}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 229, "duration": 12.71933126449585}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string by '-' and store the parts in variables: month, day, year.\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    # Check if the date string is in the format mm-dd-yyyy.\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    # Check if month is between 1 and 12.\n    if month < 1 or month > 12:\n        return False\n    # Check if day is between 1 and 31 for months 1, 3, 5, 7, 8, 10, 12.\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    # Check if day is between 1 and 30 for months 4, 6, 9, 11.\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    # Check if day is between 1 and 29 for February.\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    # If all conditions are met, return True. Otherwise, return False.\n    return True", "prompt_tokens": 949, "completion_tokens": 492, "duration": 22.315497398376465}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for ch in txt if ch.islower() and (ord(ch) - ord('a')) % 2 == 0)", "prompt_tokens": 718, "completion_tokens": 243, "duration": 9.760567903518677}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if prev is not None and num < prev:\n            return False\n        if prev == num:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        prev = num\n    return True", "prompt_tokens": 946, "completion_tokens": 274, "duration": 11.7026846408844}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length_of_intersection = (min_end - max_start) + 1\n    \n    if is_prime(length_of_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 942, "completion_tokens": 321, "duration": 14.360570192337036}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 659, "completion_tokens": 241, "duration": 15.243048191070557}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    path = [float('inf')] * k\n    visited = [[False] * N for _ in range(N)]\n    \n    def isValidCell(row, col):\n        return 0 <= row < N and 0 <= col < N and not visited[row][col]\n    \n    def dfs(row, col, curr_path, step):\n        nonlocal path\n        if step == k:\n            path = min(path, curr_path)\n            return\n        visited[row][col] = True\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            newRow, newCol = row + dr, col + dc\n            if isValidCell(newRow, newCol):\n                dfs(newRow, newCol, curr_path + [grid[newRow][newCol]], step + 1)\n        visited[row][col] = False\n    \n    for row in range(N):\n        for col in range(N):\n            dfs(row, col, [grid[row][col]], 1)\n    \n    return path", "prompt_tokens": 1301, "completion_tokens": 490, "duration": 15.908907413482666}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [3]\n    seq = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i / 2)\n        else:\n            if i == 1:\n                seq.append(seq[i - 1])\n            elif i == 2:\n                seq.append(seq[i - 1] + seq[i - 2] + 1)  # tri(3) needs tri(4) which is not calculated yet.\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 888, "completion_tokens": 326, "duration": 24.11567497253418}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 222, "duration": 13.455500602722168}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 678, "completion_tokens": 210, "duration": 9.73451828956604}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 96, "duration": 4.913995027542114}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    is_last_char_alphabetical = False\n    if txt and txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2].isspace():\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 659, "completion_tokens": 233, "duration": 10.973124980926514}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 541, "completion_tokens": 215, "duration": 9.762735366821289}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n            \n    return (largest_neg, smallest_pos)", "prompt_tokens": 662, "completion_tokens": 229, "duration": 14.994954347610474}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        return float(x.replace(',', '.'))\n    \n    if type(a) != type(b):\n        return None\n    \n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a_float = convert_to_float(a)\n        b_float = convert_to_float(b)\n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None", "prompt_tokens": 683, "completion_tokens": 273, "duration": 13.499396800994873}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, int(n/2) + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and (n - 2*i) > 0:\n            return True\n    return False", "prompt_tokens": 524, "completion_tokens": 226, "duration": 14.379754304885864}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a given number n.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 149, "duration": 8.227280855178833}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            elif count > 0:\n                modified_text += \"_\" * count\n            modified_text += ch\n            count = 0\n    if count > 2:\n        modified_text += \"-\"\n    elif count > 0:\n        modified_text += \"_\" * count\n    return modified_text", "prompt_tokens": 634, "completion_tokens": 274, "duration": 12.876583576202393}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Count the number of digits in file_name\n    digit_count = sum(c.isdigit() for c in file_name)\n    \n    # Check if the count of digits is not more than 3\n    if digit_count > 3:\n        return 'No'\n    \n    # Find the index of the dot '.'\n    dot_index = file_name.find('.')\n    \n    # Check if there is exactly one dot in the file_name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Check if the substring before the dot is not empty and starts with a letter from the Latin alphabet\n    if dot_index <= 0 or not file_name[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is either 'txt', 'exe', or 'dll'\n    if file_name[dot_index+1:] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all conditions are met, set result to 'Yes'\n    return 'Yes'", "prompt_tokens": 841, "completion_tokens": 379, "duration": 22.33225917816162}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 698, "completion_tokens": 179, "duration": 12.256279706954956}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 698, "completion_tokens": 250, "duration": 13.587510585784912}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 681, "completion_tokens": 179, "duration": 12.27976393699646}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 630, "completion_tokens": 229, "duration": 14.37788724899292}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 605, "completion_tokens": 195, "duration": 10.774766206741333}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 326, "duration": 16.366411447525024}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 265, "duration": 14.97142767906189}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [w for w in lst if len(w) % 2 == 0]\n    return sorted(sorted_lst, key=lambda x: (len(x), x))", "prompt_tokens": 737, "completion_tokens": 149, "duration": 6.265848398208618}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 10.132295608520508}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 623, "completion_tokens": 128, "duration": 8.302544355392456}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 806, "completion_tokens": 113, "duration": 9.35522747039795}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 957, "completion_tokens": 241, "duration": 14.104097604751587}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if b or any of its rotations is a substring in a.\"\"\"\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    aa = a + a\n    for i in range(n):\n        if aa[i:i+m] == b:\n            return True\n        for j in range(1, m):\n            if aa[i:i+m] == b[j:] + b[:j]:\n                return True\n    return False", "prompt_tokens": 650, "completion_tokens": 243, "duration": 13.550605297088623}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 10.175527811050415}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 580, "completion_tokens": 297, "duration": 15.364726781845093}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 243, "duration": 12.169272899627686}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 589, "completion_tokens": 166, "duration": 9.694211959838867}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 181, "duration": 10.40530514717102}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 851, "completion_tokens": 340, "duration": 13.806413412094116}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 12.862735509872437}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 7.696763515472412}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start, end = min(a, b), max(a, b)\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 573, "completion_tokens": 198, "duration": 9.343270063400269}
