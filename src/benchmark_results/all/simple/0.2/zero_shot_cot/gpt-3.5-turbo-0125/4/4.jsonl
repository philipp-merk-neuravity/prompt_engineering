{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the absolute difference between adjacent numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 93, "duration": 3.291196584701538}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separate groups\n    separate_groups = []\n    \n    # Initialize a variable to store the current group\n    current_group = \"\"\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the current group is balanced, add it to the separate groups list\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            separate_groups.append(current_group)\n            current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 154, "completion_tokens": 156, "duration": 5.118272304534912}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 2.9444146156311035}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance as 0\n    balance = 0\n    \n    # Iterate through each operation\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if balance is below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 82, "duration": 3.478468179702759}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(absolute_diff) / len(absolute_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 94, "duration": 3.775205135345459}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []  # create an empty list to store the result\n    for num in numbers:  # iterate through each number in the input list\n        result.extend([num, delimeter])  # add the number and delimeter to the result list\n    result.pop()  # remove the extra delimeter at the end\n    return result  # return the final result list\n\n# Test cases\nprint(intersperse([], 4))  # []\nprint(intersperse([1, 2, 3], 4))  # [1, 4, 2, 4, 3]", "prompt_tokens": 131, "completion_tokens": 150, "duration": 4.081648588180542}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current nesting level and maximum nesting level\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level when encountering an opening parenthesis\n                current_level += 1\n                # Update the maximum nesting level if the current level is greater\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                # Decrement the current nesting level when encountering a closing parenthesis\n                current_level -= 1\n        \n        # Append the maximum nesting level for the current group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 226, "duration": 6.471752166748047}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store strings that contain the given substring\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is in the current string\n        if substring in string:\n            # If the substring is found, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that contain the given substring\n    return result", "prompt_tokens": 132, "completion_tokens": 116, "duration": 3.4450337886810303}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables for sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return total_sum, total_product", "prompt_tokens": 149, "completion_tokens": 81, "duration": 3.233114004135132}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    result = []\n    # Initialize a deque to store the indices of elements in the list\n    window = deque()\n    \n    # Iterate through the list of numbers\n    for i, num in enumerate(numbers):\n        # Remove indices from the front of the deque that are out of the rolling window\n        while window and window[0] < i - 2:\n            window.popleft()\n        \n        # Remove indices from the back of the deque that are less than the current number\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        \n        # Append the current index to the deque\n        window.append(i)\n        \n        # Append the rolling maximum to the result list\n        result.append(numbers[window[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 187, "duration": 4.566184759140015}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Check if the string is already a palindrome\n    if string == string[::-1]:\n        return string\n    \n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            break\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:i-1][::-1]", "prompt_tokens": 182, "completion_tokens": 134, "duration": 4.634058952331543}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation\n    result = int_a ^ int_b\n    \n    # Convert result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 85, "duration": 3.1089532375335693}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Return None if the input list is empty\n    if not strings:\n        return None\n    \n    # Find the longest string in the list\n    longest_str = max(strings, key=len)\n    \n    # Return the first occurrence of the longest string\n    return next(s for s in strings if len(s) == len(longest_str))", "prompt_tokens": 141, "completion_tokens": 88, "duration": 3.199756383895874}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Implement Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 110, "completion_tokens": 52, "duration": 2.541005849838257}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the range of the length of the string\n    for i in range(len(string)):\n        # Append the prefix from index 0 to i+1 to the prefixes list\n        prefixes.append(string[:i+1])\n    \n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 92, "duration": 3.4810893535614014}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = [str(num) for num in numbers]\n    \n    # Join the list of strings with space delimiter\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 89, "duration": 3.3173978328704834}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use set to get unique characters\n    unique_chars = set(string)\n    \n    # Return the count of unique characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 67, "duration": 3.002573013305664}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map musical notes to their corresponding beats\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the input music_string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the duration of each note\n    durations = []\n    \n    # Iterate through each note in the list\n    for note in notes:\n        # Append the duration of the note to the durations list\n        durations.append(note_duration[note])\n    \n    # Return the list of durations\n    return durations", "prompt_tokens": 211, "completion_tokens": 146, "duration": 4.163374185562134}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0  # Initialize a variable to count the occurrences of the substring\n    if not substring:  # If the substring is empty, return 0\n        return 0\n    for i in range(len(string) - len(substring) + 1):  # Iterate through the string\n        if string[i:i + len(substring)] == substring:  # Check if the substring matches the current slice of the string\n            count += 1  # Increment the count if there is a match\n    return count  # Return the total count of occurrences", "prompt_tokens": 128, "completion_tokens": 138, "duration": 4.26970100402832}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numerical values\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of numberals\n    numberals = numbers.split()\n    \n    # Sort the numberals based on their numerical values\n    sorted_numberals = sorted(numberals, key=lambda x: number_map[x])\n    \n    # Join the sorted numberals into a string\n    return ' '.join(sorted_numberals)", "prompt_tokens": 144, "completion_tokens": 165, "duration": 5.364529609680176}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to store the closest pair and their difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    \n    # Iterate through the list to find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 144, "duration": 4.072031497955322}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to rescale the numbers to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 109, "duration": 3.5038273334503174}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate through the values in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Append the integer value to the integers list\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 97, "duration": 3.299220323562622}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the given string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 24, "duration": 2.0391275882720947}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # If n is divisible by i, return i\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 68, "duration": 2.4906556606292725}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start with 2, the smallest prime number\n    i = 2\n    \n    # Keep dividing the number by i until it is no longer divisible\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    \n    # If the remaining number is greater than 1, it is also a prime factor\n    if n > 1:\n        factors.append(n)\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 140, "duration": 4.145362615585327}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create an empty list to store unique elements\n    unique_numbers = []\n    \n    # Iterate through the input list\n    for num in numbers:\n        # If the element is not already in the unique list, add it\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    return unique_numbers", "prompt_tokens": 123, "completion_tokens": 78, "duration": 4.170674562454224}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use list comprehension to iterate over each character in the string and flip the case\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 54, "duration": 2.815480947494507}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using the empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 36, "duration": 2.120767116546631}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 115, "duration": 3.8332223892211914}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the positive_nums list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 90, "duration": 2.055598020553589}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 61, "duration": 5.294586658477783}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[-1]\n    b = xs[-2]\n    x = -b / a\n    return x", "prompt_tokens": 298, "completion_tokens": 47, "duration": 5.0505735874176025}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a new list to store the sorted values\n    sorted_values = []\n    \n    # Iterate through the list and check if the index is divisible by 3\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If the index is divisible by 3, append the sorted value to the new list\n            sorted_values.append(l[i])\n        else:\n            # If the index is not divisible by 3, append the original value to the new list\n            sorted_values.append(l[i])\n    \n    return sorted_values", "prompt_tokens": 190, "completion_tokens": 128, "duration": 2.279197931289673}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    unique_sorted = sorted(unique_set)\n    \n    return unique_sorted", "prompt_tokens": 113, "completion_tokens": 51, "duration": 2.2672860622406006}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 3.920675277709961}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to keep track of the number of times digit 7 appears\n    count = 0\n    \n    # Iterate through integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13 and contains digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the counter if conditions are met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 127, "duration": 3.624509334564209}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Separate even and odd elements\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    \n    # Sort the even elements\n    sorted_even = sorted(even)\n    \n    # Combine the sorted even elements with the odd elements\n    result = [sorted_even[i//2] if i % 2 == 0 else odd[i//2] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 130, "duration": 3.922661304473877}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 113, "duration": 3.449324131011963}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 137, "completion_tokens": 144, "duration": 3.808952569961548}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets summing to zero\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 129, "duration": 6.203265190124512}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Each car moving left to right will collide with each car moving right to left\n    # So the total number of collisions will be the product of the number of cars moving left to right and the number of cars moving right to left\n    return n * n", "prompt_tokens": 191, "completion_tokens": 67, "duration": 2.4773247241973877}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the list with elements incremented by 1\n    return result", "prompt_tokens": 148, "completion_tokens": 86, "duration": 3.0381033420562744}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Create a set to store the seen numbers\n    seen = set()\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(num)\n    \n    return False", "prompt_tokens": 197, "completion_tokens": 87, "duration": 5.878044366836548}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    # Initialize an empty string to store the converted number\n    result = ''\n    \n    # Loop until x is greater than 0\n    while x > 0:\n        # Get the remainder when x is divided by the new base\n        remainder = x % base\n        # Add the remainder to the beginning of the result string\n        result = str(remainder) + result\n        # Update x to be the result of x divided by the new base\n        x = x // base\n    \n    # Return the final converted number as a string\n    return result", "prompt_tokens": 131, "completion_tokens": 135, "duration": 5.560277223587036}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 2.3394389152526855}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize the first four elements of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    # Compute the nth element of the sequence iteratively\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 211, "completion_tokens": 94, "duration": 2.691645860671997}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Check if the length of the list is odd or even\n    n = len(l)\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l[n // 2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 114, "duration": 2.124922752380371}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the reversed text is equal to the original text\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 56, "duration": 4.778759479522705}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate the modulo of the result with p\n    result %= p\n    return result", "prompt_tokens": 145, "completion_tokens": 50, "duration": 3.633240222930908}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 62, "duration": 4.914201021194458}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is not a vowel\n        if char not in vowels:\n            # Append the character to the result string\n            result += char\n    \n    # Return the result string without vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 132, "duration": 3.2734076976776123}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 60, "duration": 1.426340103149414}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 3.4525272846221924}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort the characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if the sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 65, "duration": 1.703028678894043}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: Return 0 if n is 0\n    if n == 0:\n        return 0\n    # Initialize variables to store the first two Fibonacci numbers\n    a, b = 0, 1\n    # Loop to calculate the n-th Fibonacci number\n    for _ in range(1, n):\n        a, b = b, a + b\n    return b", "prompt_tokens": 92, "completion_tokens": 95, "duration": 4.894459962844849}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter variable to keep track of the balance of brackets\n    count = 0\n    \n    # Iterate through each character in the input string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"<\":\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif bracket == \">\":\n            count -= 1\n        # If the counter becomes negative at any point, return False\n        if count < 0:\n            return False\n    \n    # If the counter is 0 at the end, return True (balanced brackets), otherwise return False\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 161, "duration": 6.7192158699035645}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in increasing order\n    if l == sorted(l):\n        return True\n    # Check if the list is sorted in decreasing order\n    elif l == sorted(l, reverse=True):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 67, "duration": 4.069122314453125}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements and convert them back to a list\n    result = sorted(list(common_elements))\n    \n    return result", "prompt_tokens": 154, "completion_tokens": 68, "duration": 3.9589226245880127}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to find all factors of a number\n    def find_factors(num):\n        factors = []\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n    \n    # Find all factors of the number\n    factors = find_factors(n)\n    \n    # Find the largest prime factor among the factors\n    largest_prime = max([factor for factor in factors if is_prime(factor)])\n    \n    return largest_prime", "prompt_tokens": 103, "completion_tokens": 191, "duration": 5.648553371429443}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Initialize the sum variable to store the sum of numbers\n    total = 0\n    # Iterate from 1 to n (inclusive) and add each number to the total\n    for i in range(1, n+1):\n        total += i\n    return total", "prompt_tokens": 134, "completion_tokens": 66, "duration": 5.229427814483643}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the number of opening brackets\n    count = 0\n    \n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"(\":\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif bracket == \")\":\n            count -= 1\n        # If the counter becomes negative at any point, return False\n        if count < 0:\n            return False\n    \n    # If the counter is 0 at the end, return True (all opening brackets have a corresponding closing bracket)\n    return count == 0", "prompt_tokens": 129, "completion_tokens": 163, "duration": 5.816867828369141}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    derivative_coeffs = []\n    \n    # Iterate through the coefficients starting from the second one\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the list\n        derivative_coeffs.append(xs[i] * i)\n    \n    return derivative_coeffs", "prompt_tokens": 148, "completion_tokens": 80, "duration": 5.671680927276611}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return n - 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 189, "completion_tokens": 95, "duration": 2.470916986465454}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to keep track of the count of vowels\n    count = 0\n    \n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # If the character is 'y' and it is at the end of the word, count it as a vowel\n            if s[i].lower() == 'y' and i == len(s) - 1:\n                count += 1\n            # If the character is a regular vowel, count it\n            elif s[i].lower() != 'y':\n                count += 1\n    \n    return count", "prompt_tokens": 166, "completion_tokens": 180, "duration": 4.071694374084473}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    x_str = str(x)  # Convert integer to string\n    shift %= len(x_str)  # Calculate the effective shift value\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]  # Perform circular shift", "prompt_tokens": 122, "completion_tokens": 81, "duration": 3.979437828063965}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII codes\n    total_sum = 0\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 98, "duration": 2.3200666904449463}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 83, "duration": 4.10599946975708}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Create a list to store even values from the input array\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    # If there are no even values or the array is empty, return an empty list\n    if not even_values:\n        return []\n    \n    # Find the smallest even value and its index in the input array\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_value, smallest_index]", "prompt_tokens": 352, "completion_tokens": 131, "duration": 2.984137535095215}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Iterate over the list to count the frequency of each integer\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate over the dictionary to find the greatest integer that meets the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 134, "duration": 5.8124916553497314}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # While there are elements in the sorted list\n    while lst:\n        # Pop and append the minimum value\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the list\n        if lst:\n            # Pop and append the maximum value\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 108, "duration": 5.776433706283569}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 140, "duration": 6.78747034072876}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 3.7773005962371826}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Loop through the array up to the middle element\n    for i in range(len(arr)//2):\n        # Check if the elements at the corresponding positions are not the same\n        if arr[i] != arr[-i-1]:\n            # Increment the changes needed by the absolute difference between the elements\n            changes += abs(arr[i] - arr[-i-1])\n    \n    return changes", "prompt_tokens": 197, "completion_tokens": 112, "duration": 2.590013265609741}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 95, "duration": 5.087600469589233}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Check if the number is less than 100\n    if a >= 100:\n        return False\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the first prime factor\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            # Find the second prime factor\n            for j in range(i+1, a):\n                if a % j == 0 and is_prime(j):\n                    # Find the third prime factor\n                    k = a // (i*j)\n                    if is_prime(k):\n                        return True\n    \n    return False", "prompt_tokens": 119, "completion_tokens": 191, "duration": 4.051702260971069}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is equal to n raised to the power of an integer\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 182, "completion_tokens": 42, "duration": 4.286293268203735}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of a is an integer\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 150, "completion_tokens": 46, "duration": 3.043553113937378}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a list of prime numbers in decimal form\n    primes = [2, 3, 5, 7, 11, 13]\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the hexadecimal number\n    for char in num:\n        # Convert the hexadecimal character to decimal form\n        dec_value = int(char, 16)\n        # Check if the decimal value is a prime number\n        if dec_value in primes or is_prime(dec_value):\n            prime_count += 1\n    \n    return prime_count", "prompt_tokens": 339, "completion_tokens": 198, "duration": 6.3197479248046875}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 59, "duration": 4.510797500610352}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 103, "duration": 4.37597918510437}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA and append it to the letter_grades list\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 299, "duration": 6.492619514465332}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Check if the length of the string is less than 2\n    if len(string) < 2:\n        return False\n    \n    # Check if the length of the string is a prime number\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 121, "completion_tokens": 90, "duration": 4.060442924499512}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count to 0\n    count = 0\n    \n    # Loop through all n-digit positive integers\n    for i in range(10**(n-1), 10**n):\n        # Check if the number starts or ends with 1\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 95, "duration": 4.087038040161133}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    total_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the total sum to binary string format\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 75, "duration": 3.6487631797790527}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    even_at_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Sum the filtered elements\n    return sum(even_at_odd_indices)", "prompt_tokens": 95, "completion_tokens": 68, "duration": 4.7461652755737305}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters of the word based on ascii value and join them back into a word\n        ordered_word = ''.join(sorted(word))\n        \n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words back into a string with spaces\n    ordered_string = ' '.join(ordered_words)\n    \n    return ordered_string", "prompt_tokens": 170, "completion_tokens": 143, "duration": 5.107933521270752}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over each row in the list\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Iterate over each column in the row\n            for j, col in enumerate(row):\n                # If the column value is equal to x, add the coordinate to the list\n                if col == x:\n                    coordinates.append((i, j))\n    \n    # Sort the coordinates by rows in ascending order and by columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 154, "duration": 5.078183650970459}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        return sorted(array)\n    else:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 77, "duration": 2.909181594848633}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            \n            # Shift the index down by two multiplied to two places\n            new_index = (index + 2 * 2) % 26\n            \n            # Append the new encrypted character to the result\n            result += alphabet[new_index]\n        else:\n            # If the character is not a letter, simply append it to the result\n            result += char\n    \n    # Return the final encrypted result\n    return result", "prompt_tokens": 150, "completion_tokens": 176, "duration": 4.6636762619018555}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # If the length of the sorted list is less than 2, return None\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second element of the sorted list\n    return sorted_lst[1]", "prompt_tokens": 164, "completion_tokens": 77, "duration": 4.876073122024536}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences using delimiters '.' '?' '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    \n    # Count the number of sentences that start with 'I'\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 89, "duration": 3.192371129989624}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "prompt_tokens": 175, "completion_tokens": 86, "duration": 3.259544849395752}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to map vowels to the letter that appears 2 places ahead in the alphabet\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Check if the letter is a vowel and replace it with the mapped letter\n            if char in vowel_mapping:\n                char = vowel_mapping[char]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 228, "duration": 4.98556661605835}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Filter prime numbers from the list\n    primes = [num for num in lst if is_prime(num)]\n\n    # Find the largest prime number\n    largest_prime = max(primes)\n\n    # Calculate the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 170, "duration": 5.2733073234558105}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Get the first key in the dictionary\n    first_key = list(dict.keys())[0]\n    \n    # Check if all keys are in lower case\n    if all(key.islower() for key in dict.keys()):\n        return True\n    \n    # Check if all keys are in upper case\n    if all(key.isupper() for key in dict.keys()):\n        return True\n    \n    return False", "prompt_tokens": 209, "completion_tokens": 109, "duration": 3.8556225299835205}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 up to n\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n        \n        # Check if the number is divisible by any number less than itself\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 134, "duration": 3.5694639682769775}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of a by taking the remainder when divided by 10\n    unit_a = abs(a) % 10\n    # Get the unit digit of b by taking the remainder when divided by 10\n    unit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 93, "duration": 3.8083102703094482}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a counter variable to keep track of the number of uppercase vowels\n    count = 0\n    \n    # Create a list of uppercase vowels\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 122, "duration": 3.751922369003296}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to a float\n    num = float(value)\n    \n    # Check if the number is equidistant from two integers\n    if num % 1 == 0.5:\n        return int(num + 0.5)\n    else:\n        return round(num)", "prompt_tokens": 196, "completion_tokens": 70, "duration": 2.906223773956299}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones = []\n    \n    # Loop from 0 to n-1 to calculate the number of stones in each level\n    for i in range(n):\n        # Calculate the number of stones in the current level based on whether n is odd or even\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    \n    return stones", "prompt_tokens": 172, "completion_tokens": 118, "duration": 3.3388760089874268}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the input string by commas and spaces\n    words = s.replace(',', ' ').split()\n    \n    return words", "prompt_tokens": 156, "completion_tokens": 35, "duration": 2.1207830905914307}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y down to x\n    for num in range(y, x - 1, -1):\n        # Check if the number is even and return it\n        if num % 2 == 0:\n            return num\n    # If no even number is found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 86, "duration": 3.4855661392211914}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 2.4113519191741943}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    sorted_list = sorted(filtered)\n    \n    return sorted_list", "prompt_tokens": 142, "completion_tokens": 69, "duration": 2.9740207195281982}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    result = [ \n        \"One\" if num == 1 else \n        \"Two\" if num == 2 else \n        \"Three\" if num == 3 else \n        \"Four\" if num == 4 else \n        \"Five\" if num == 5 else \n        \"Six\" if num == 6 else \n        \"Seven\" if num == 7 else \n        \"Eight\" if num == 8 else \n        \"Nine\" for num in reversed_arr\n    ]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 194, "duration": 5.6269121170043945}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 136, "duration": 3.8588902950286865}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 152, "duration": 4.871400833129883}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of elements with sum of digits > 0\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a string to iterate through its digits\n        for digit in str(abs(num)):\n            # Add the digit to the sum\n            count += int(digit)\n    # Return the count of elements with sum of digits > 0\n    return count", "prompt_tokens": 164, "completion_tokens": 107, "duration": 3.4734530448913574}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # Check if the array can be sorted by performing right shift operations\n    for i in range(len(arr)):\n        if arr[(min_index + i) % len(arr)] != min(arr):\n            return False\n    return True", "prompt_tokens": 339, "completion_tokens": 125, "duration": 3.7412304878234863}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Return \"YES\" if the number of odd elements in lst1 is less than or equal to the length of lst2\n    return \"YES\" if odd_count <= len(lst2) else \"NO\"", "prompt_tokens": 237, "completion_tokens": 90, "duration": 3.3274106979370117}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate through each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n    \n    # Find the maximum count of any letter in the dictionary\n    max_count = max(letter_count.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 194, "duration": 4.6746673583984375}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 77, "duration": 2.775509834289551}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        \n        # Append the formatted result to the output list\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 125, "duration": 3.7375218868255615}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum by adding the current number\n        current_sum += num\n        # Update minimum sum if current sum is smaller\n        min_sum = min(min_sum, current_sum)\n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 121, "duration": 4.049013614654541}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n    \n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n    \n    # Calculate number of times to lower the buckets\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 93, "duration": 3.074305534362793}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Define a custom sorting function based on number of ones in binary representation and decimal value\n    def custom_sort(num):\n        return bin(num).count('1'), num\n    \n    # Sort the array using the custom sorting function\n    return sorted(arr, key=custom_sort)", "prompt_tokens": 210, "completion_tokens": 66, "duration": 2.559561252593994}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize a list to store words with n consonants\n    result = []\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Check if the word has exactly n consonants\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 136, "duration": 3.802699327468872}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 98, "duration": 3.352022171020508}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Concatenate the two strings in the list\n    combined = lst[0] + lst[1]\n    \n    # Initialize a stack to keep track of open parentheses\n    stack = []\n    \n    # Iterate through the combined string\n    for char in combined:\n        # If the character is an open parenthesis, push it to the stack\n        if char == '(':\n            stack.append(char)\n        # If the character is a close parenthesis and the stack is not empty, pop an open parenthesis\n        elif char == ')' and stack:\n            stack.pop()\n    \n    # If the stack is empty at the end, all parentheses are balanced\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 161, "duration": 4.514110088348389}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 44, "duration": 2.0173163414001465}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter the elements at even positions\n    even_positions = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    \n    # Filter the odd elements from the even positions\n    odd_elements = [num for num in even_positions if num % 2 != 0]\n    \n    # Return the sum of the odd elements\n    return sum(odd_elements)", "prompt_tokens": 137, "completion_tokens": 87, "duration": 3.156154155731201}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize a variable to store the sum\n    total_sum = 0\n    # Iterate through the first k elements of the array\n    for num in arr[:k]:\n        # Check if the element has at most two digits\n        if 10 <= num < 100:\n            # Add the element to the total sum\n            total_sum += num\n    # Return the total sum\n    return total_sum", "prompt_tokens": 168, "completion_tokens": 98, "duration": 3.3950488567352295}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Calculate the next term in collatz sequence\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    \n    # Add 1 to the list as it is the last element in collatz sequence\n    odd_numbers.append(1)\n    \n    # Sort the list in increasing order\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 155, "duration": 3.690011978149414}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    # Check if the date is in the format mm-dd-yyyy\n    if len(str(year)) != 4:\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 256, "duration": 5.036365270614624}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 98, "duration": 2.1983346939086914}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to the sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 2.0017433166503906}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals don't intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length of the intersection is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 158, "duration": 4.39336371421814}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to keep track of sum of magnitudes and product of signs\n    sum_magnitudes = 0\n    product_signs = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Update sum of magnitudes by adding the absolute value of the number\n        sum_magnitudes += abs(num)\n        # Update product of signs based on the sign of the number\n        if num > 0:\n            product_signs *= 1\n        elif num < 0:\n            product_signs *= -1\n        else:\n            product_signs *= 0\n    \n    # Return the result of sum of magnitudes multiplied by product of signs\n    return sum_magnitudes * product_signs", "prompt_tokens": 162, "completion_tokens": 181, "duration": 3.7383244037628174}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid to a 1D list\n    flat_grid = [cell for row in grid for cell in row]\n    \n    # Sort the flattened grid\n    sorted_grid = sorted(flat_grid)\n    \n    # Return the first k elements of the sorted grid\n    return sorted_grid[:k]", "prompt_tokens": 436, "completion_tokens": 75, "duration": 2.4969348907470703}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two elements\n    tribonacci = [1, 3]\n    \n    # Loop to calculate the next elements based on the given formula\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 119, "duration": 6.293108701705933}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize a variable to store the product of odd digits\n    product = 1\n    # Iterate through each digit in the number\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the digit to the product\n            product *= digit\n    # Return the product if it is not 1, otherwise return 0\n    return product if product != 1 else 0", "prompt_tokens": 111, "completion_tokens": 127, "duration": 4.474222898483276}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of nested brackets\n    count = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is an opening bracket, increment the counter\n        if char == '[':\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif char == ']':\n            count -= 1\n        # If the counter becomes negative at any point, return True\n        if count < 0:\n            return True\n    \n    # If the counter is not zero at the end, return True\n    return count != 0", "prompt_tokens": 173, "completion_tokens": 143, "duration": 5.000459432601929}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper integer\n    lst = [int(x) if x.is_integer() else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    result = sum([x**2 for x in lst])\n    \n    return result", "prompt_tokens": 197, "completion_tokens": 78, "duration": 3.891875743865967}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is not empty\n    if txt:\n        # Get the last character of the string\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character and not a space\n        if last_char.isalpha() and last_char != ' ':\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 94, "duration": 2.1722331047058105}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize a variable to store the result\n    result = -1\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the result to the current index\n            result = i\n    # Return the final result\n    return result", "prompt_tokens": 143, "completion_tokens": 104, "duration": 5.133252143859863}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]  # Get all negative integers\n    pos_integers = [i for i in lst if i > 0]  # Get all positive integers\n    \n    largest_neg = max(neg_integers) if neg_integers else None  # Find the largest negative integer or None\n    smallest_pos = min(pos_integers) if pos_integers else None  # Find the smallest positive integer or None\n    \n    return (largest_neg, smallest_pos)  # Return the tuple", "prompt_tokens": 178, "completion_tokens": 127, "duration": 5.585104942321777}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return max(float(a.replace(',', '.')), float(b.replace(',', '.'))) if isinstance(a, str) or isinstance(b, str) else None", "prompt_tokens": 181, "completion_tokens": 80, "duration": 5.264000415802002}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Check if the number is less than 8 or odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if the number can be written as the sum of exactly 4 positive even numbers\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                if i + j + k + n//2 == n:\n                    return True\n    return False", "prompt_tokens": 117, "completion_tokens": 135, "duration": 6.911768198013306}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result as 1\n    result = 1\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate factorial of i and multiply with result\n        result *= factorial(i)\n    return result\n\ndef factorial(n):\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n    # Recursive call to calculate factorial\n    return n * factorial(n - 1)", "prompt_tokens": 135, "completion_tokens": 115, "duration": 3.4581658840179443}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 56, "duration": 3.3634750843048096}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if the file name has more than three digits\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 193, "duration": 8.222419261932373}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate over the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        # For other indexes, add the number as is\n        else:\n            total += num\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 143, "duration": 4.953271389007568}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words based on prime length\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 140, "duration": 5.936323881149292}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    product = x_num * n_num / (x_den * n_den)\n    \n    # Check if the product is a whole number\n    return product.is_integer()", "prompt_tokens": 195, "completion_tokens": 94, "duration": 4.667699337005615}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list of numbers based on the sum of their digits and index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 82, "duration": 3.7793736457824707}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the number of elements that meet the criteria\n    count = 0\n    \n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the criteria are met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 149, "duration": 5.901627063751221}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 205, "completion_tokens": 101, "duration": 2.34854793548584}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the range of planets between planet1 and planet2\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Get the planets between planet1 and planet2\n    result = tuple(planets[start_index:end_index])\n    \n    return result", "prompt_tokens": 251, "completion_tokens": 187, "duration": 6.249165058135986}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 78, "duration": 3.868516445159912}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 5.253952264785767}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is a positive integer and odd\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            # Add the square of the number to the result\n            result += num ** 2\n    \n    # Return the double of the result\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 114, "duration": 5.645398855209351}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    result = []\n    \n    # Iterate through each match in the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score for each match\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 107, "duration": 5.402917385101318}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strength of each extension\n    strengths = {}\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        \n        # Store the strength in the dictionary\n        strengths[extension] = strength\n    \n    # Find the extension with the maximum strength\n    max_extension = max(strengths, key=strengths.get)\n    \n    # Return the formatted result\n    return f\"{class_name}.{max_extension}\"", "prompt_tokens": 317, "completion_tokens": 158, "duration": 4.908633708953857}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Concatenate the first word with itself to check for all possible rotations\n    a += a\n    # Check if the second word is a substring of the concatenated string\n    return b in a", "prompt_tokens": 169, "completion_tokens": 54, "duration": 4.5145251750946045}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the integer to a string to iterate over each digit\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 127, "duration": 4.61882209777832}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number: int) -> str:\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 157, "duration": 3.114733934402466}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 148, "completion_tokens": 73, "duration": 4.812122583389282}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store the unique characters count for each word\n    unique_chars = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_chars[word] = len(set(word))\n    \n    # Find the maximum number of unique characters\n    max_unique = max(unique_chars.values())\n    \n    # Find all words with the maximum number of unique characters\n    max_words = [word for word, count in unique_chars.items() if count == max_unique]\n    \n    # Sort the words with maximum unique characters lexicographically\n    max_words.sort()\n    \n    # Return the first word in the sorted list\n    return max_words[0]", "prompt_tokens": 160, "completion_tokens": 161, "duration": 6.58002233505249}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after your meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after your meals\n    left_after_meals = max(0, remaining - need)\n    \n    return [total_eaten, left_after_meals]", "prompt_tokens": 317, "completion_tokens": 78, "duration": 4.867505311965942}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]  # Initialize result with the first operand\n    for i in range(len(operator)):  # Iterate through the operators\n        if operator[i] == '+':  # If the operator is addition\n            result += operand[i + 1]  # Perform addition with the next operand\n        elif operator[i] == '-':  # If the operator is subtraction\n            result -= operand[i + 1]  # Perform subtraction with the next operand\n        elif operator[i] == '*':  # If the operator is multiplication\n            result *= operand[i + 1]  # Perform multiplication with the next operand\n        elif operator[i] == '//':  # If the operator is floor division\n            result //= operand[i + 1]  # Perform floor division with the next operand\n        elif operator[i] == '**':  # If the operator is exponentiation\n            result **= operand[i + 1]  # Perform exponentiation with the next operand\n    return result", "prompt_tokens": 247, "completion_tokens": 222, "duration": 4.812974214553833}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Iterate over each character in the string\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # Reverse the case of the letter and add it to the result\n                result += char.swapcase()\n            else:\n                # Add non-letter characters as they are to the result\n                result += char\n    else:\n        # If the string contains no letters, reverse the string\n        result = s[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 149, "duration": 5.68330979347229}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 116, "completion_tokens": 36, "duration": 3.881124973297119}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Create a list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b\n    for num in range(a, b+1):\n        # Check if the digit is even\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "prompt_tokens": 144, "completion_tokens": 87, "duration": 5.1404454708099365}
