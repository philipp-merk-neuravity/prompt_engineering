{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 887, "completion_tokens": 522, "duration": 21.192488193511963}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = paren_string.replace(' ', '').split(')(')\n    groups[0] = groups[0].lstrip('(')\n    groups[-1] = groups[-1].rstrip(')')\n    return ['(' + group + ')' for group in groups]", "prompt_tokens": 916, "completion_tokens": 578, "duration": 25.215588331222534}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 633, "completion_tokens": 301, "duration": 18.225407361984253}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 883, "completion_tokens": 516, "duration": 24.57114315032959}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 923, "completion_tokens": 554, "duration": 28.874191999435425}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 856, "completion_tokens": 550, "duration": 30.15872287750244}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n        if depth == 0:\n            depths.append(max_depth)\n            max_depth = 0\n    return depths", "prompt_tokens": 1563, "completion_tokens": 1049, "duration": 38.112952709198}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 895, "completion_tokens": 565, "duration": 26.927320957183838}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    prod_result = 1\n    for num in numbers:\n        prod_result *= num\n    return sum_result, prod_result", "prompt_tokens": 694, "completion_tokens": 357, "duration": 15.56339430809021}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n\n    return result", "prompt_tokens": 841, "completion_tokens": 518, "duration": 31.303017616271973}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 1952, "completion_tokens": 1390, "duration": 50.70308589935303}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 781, "completion_tokens": 504, "duration": 22.01368546485901}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 853, "completion_tokens": 492, "duration": 22.751885414123535}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 743, "completion_tokens": 456, "duration": 22.110947847366333}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 578, "completion_tokens": 319, "duration": 12.953052997589111}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 903, "completion_tokens": 441, "duration": 25.650885105133057}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 736, "completion_tokens": 430, "duration": 23.87060236930847}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 1888, "completion_tokens": 1162, "duration": 32.90298891067505}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) # Find next occurrence of substring\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 821, "completion_tokens": 535, "duration": 20.678200006484985}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    nums_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    return ' '.join(sorted(numbers.split(), key=lambda x: int(nums_dict[x])))", "prompt_tokens": 1094, "completion_tokens": 594, "duration": 24.419825315475464}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = None\n    \n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result", "prompt_tokens": 1028, "completion_tokens": 605, "duration": 23.67728090286255}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1021, "completion_tokens": 649, "duration": 30.22760009765625}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 703, "completion_tokens": 369, "duration": 15.171063661575317}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 463, "completion_tokens": 213, "duration": 9.115659713745117}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 680, "completion_tokens": 440, "duration": 21.250659942626953}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 919, "completion_tokens": 555, "duration": 30.087397575378418}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    no_duplicates = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            no_duplicates.append(num)\n    return no_duplicates", "prompt_tokens": 765, "completion_tokens": 468, "duration": 20.541908502578735}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 558, "completion_tokens": 299, "duration": 15.549782276153564}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 703, "completion_tokens": 432, "duration": 21.016668558120728}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 897, "completion_tokens": 579, "duration": 26.583778858184814}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 902, "completion_tokens": 516, "duration": 27.176506757736206}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 677, "completion_tokens": 352, "duration": 15.731561183929443}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return round(-xs[0] / xs[1], 2)", "prompt_tokens": 1098, "completion_tokens": 576, "duration": 29.34441065788269}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l[:]\n    for i in range(0, len(l), 3):\n        sorted_section = sorted(l[i:i+3])\n        new_list[i:i+3] = sorted_section\n    return new_list", "prompt_tokens": 1025, "completion_tokens": 596, "duration": 26.408088445663452}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 706, "completion_tokens": 394, "duration": 17.265743494033813}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 688, "completion_tokens": 357, "duration": 21.502556562423706}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 771, "completion_tokens": 493, "duration": 27.25039505958557}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 921, "completion_tokens": 526, "duration": 35.29061031341553}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 1910, "completion_tokens": 1248, "duration": 49.329371213912964}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and fibonacci(num) == num:\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 672, "completion_tokens": 464, "duration": 22.1279239654541}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1109, "completion_tokens": 675, "duration": 36.364749908447266}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n > 0) // 2", "prompt_tokens": 844, "completion_tokens": 379, "duration": 31.21965479850769}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 746, "completion_tokens": 369, "duration": 18.95847988128662}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 981, "completion_tokens": 534, "duration": 34.19432306289673}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    \n    if x < 0:\n        sign = '-'\n        x = -x\n    else:\n        sign = ''\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    \n    return sign + result", "prompt_tokens": 870, "completion_tokens": 592, "duration": 31.739969491958618}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 474, "completion_tokens": 221, "duration": 12.966674089431763}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1018, "completion_tokens": 564, "duration": 23.164891958236694}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 799, "completion_tokens": 528, "duration": 23.62255048751831}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join(filter(str.isalnum, text.lower()))\n    return text == text[::-1]", "prompt_tokens": 628, "completion_tokens": 335, "duration": 26.754860401153564}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 841, "completion_tokens": 473, "duration": 23.037086248397827}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])", "prompt_tokens": 728, "completion_tokens": 461, "duration": 31.962536573410034}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 761, "completion_tokens": 369, "duration": 17.08411741256714}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 730, "completion_tokens": 415, "duration": 28.169750452041626}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 563, "completion_tokens": 295, "duration": 15.437455654144287}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 883, "completion_tokens": 448, "duration": 34.575334548950195}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 551, "completion_tokens": 302, "duration": 14.447638034820557}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack and stack[-1] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 689, "completion_tokens": 391, "duration": 43.11038422584534}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 894, "completion_tokens": 602, "duration": 31.102030515670776}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 937, "completion_tokens": 556, "duration": 28.569929361343384}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 655, "completion_tokens": 389, "duration": 21.25914978981018}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 657, "completion_tokens": 308, "duration": 17.835389137268066}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 685, "completion_tokens": 383, "duration": 25.72576069831848}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))] if len(xs) > 1 else []", "prompt_tokens": 3424, "completion_tokens": 2260, "duration": 68.18433690071106}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 900, "completion_tokens": 491, "duration": 22.953145265579224}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if s == \"\":\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (s[i].lower() == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 862, "completion_tokens": 516, "duration": 22.296876668930054}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str) if len(x_str) > 0 else 0\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 837, "completion_tokens": 556, "duration": 28.1736581325531}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 766, "completion_tokens": 383, "duration": 19.874639749526978}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1008, "completion_tokens": 442, "duration": 24.21700930595398}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_numbers = [(num, i) for i, num in enumerate(arr) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    min_even = min(even_numbers)\n    return list(min_even)\n\n# Test case where the smallest even number is in the middle of the array\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test case where the input array has only one even number\nassert pluck([1, 2, 3]) == [2, 1]\n\n# Test case where the input array is empty\nassert pluck([]) == []\n\n# Test case with multiple zeros, testing for the first occurrence\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "prompt_tokens": 2287, "completion_tokens": 1261, "duration": 43.390934228897095}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 921, "completion_tokens": 460, "duration": 22.73747706413269}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 944, "completion_tokens": 562, "duration": 24.712051391601562}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 797, "completion_tokens": 462, "duration": 26.888216495513916}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_balanced = q == q[::-1]\n    is_light_enough = sum(q) <= w\n    return is_balanced and is_light_enough", "prompt_tokens": 1245, "completion_tokens": 647, "duration": 40.51527404785156}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 916, "completion_tokens": 473, "duration": 24.131571769714355}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1007, "completion_tokens": 526, "duration": 30.920414447784424}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n\n    return count == 3\n\n# Test cases have been removed as per the instructions", "prompt_tokens": 898, "completion_tokens": 673, "duration": 43.142277002334595}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    return x > 0 and x == n**int(x**(1/n))", "prompt_tokens": 1046, "completion_tokens": 618, "duration": 42.51507258415222}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 681, "completion_tokens": 303, "duration": 37.402235984802246}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = set(['2', '3', '5', '7', 'B', 'D'])\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1113, "completion_tokens": 382, "duration": 25.94508147239685}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 803, "completion_tokens": 365, "duration": 23.131752252578735}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 912, "completion_tokens": 560, "duration": 43.50223755836487}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1147, "completion_tokens": 628, "duration": 35.77907371520996}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 1469, "completion_tokens": 1016, "duration": 46.792816162109375}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 10 ** (n - 1) + 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 1337, "completion_tokens": 970, "duration": 41.79480791091919}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 791, "completion_tokens": 368, "duration": 23.311811923980713}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 737, "completion_tokens": 483, "duration": 22.12752604484558}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 814, "completion_tokens": 410, "duration": 19.108075857162476}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if col == x:\n                result.append((i, j))\n    return result", "prompt_tokens": 1384, "completion_tokens": 747, "duration": 29.936376333236694}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    first_last_sum = array[0] + array[-1]\n    return sorted(array) if first_last_sum % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1167, "completion_tokens": 623, "duration": 27.804616451263428}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            offset = 2\n            if char.islower():\n                start = ord('a')\n            else:\n                start = ord('A')\n            shifted = ord(char) + offset\n            if shifted > start + 25:\n                shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result", "prompt_tokens": 873, "completion_tokens": 567, "duration": 21.810986042022705}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_nums = set(lst)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        unique_nums.remove(min(unique_nums))\n        return min(unique_nums)", "prompt_tokens": 832, "completion_tokens": 448, "duration": 20.80490756034851}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    return len([sentence for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith(\"I\")])", "prompt_tokens": 1626, "completion_tokens": 1061, "duration": 36.053470611572266}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 1026, "completion_tokens": 627, "duration": 28.25740885734558}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 886, "completion_tokens": 567, "duration": 23.45549488067627}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1368, "completion_tokens": 735, "duration": 33.63761019706726}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 1437, "completion_tokens": 702, "duration": 27.20106267929077}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 998, "completion_tokens": 610, "duration": 26.855952501296997}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 713, "completion_tokens": 364, "duration": 19.247998237609863}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 719, "completion_tokens": 447, "duration": 24.461873769760132}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number >= 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)", "prompt_tokens": 924, "completion_tokens": 474, "duration": 21.773115634918213}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2*i)\n        else:\n            result.append(n + 2*i + 1)\n    return result", "prompt_tokens": 898, "completion_tokens": 514, "duration": 21.09496760368347}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a mix of commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with only commas and no spaces\nassert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with only spaces and no commas\nassert words_string(\"Hello world this is a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with a single word (no commas or spaces)\nassert words_string(\"Single\") == [\"Single\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with multiple spaces between words\nassert words_string(\"With   multiple   spaces\") == [\"With\", \"multiple\", \"spaces\"]\n\n# Test with a mix of multiple spaces and commas\nassert words_string(\"Mix, of,  multiple,spaces\") == [\"Mix\", \"of\", \"multiple\", \"spaces\"]\n\n# Test with leading and trailing spaces\nassert words_string(\"  Leading and trailing  \") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Leading,and,trailing,\") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with a string that has spaces and commas but no words\nassert words_string(\" , , \") == []\n\n# Test with a string that includes numbers\nassert words_string(\"This, is, 4, tests\") == [\"This\", \"is\", \"4\", \"tests\"]\n\n# Test with special characters in the string\nassert words_string(\"Special, &*%, characters\") == [\"Special\", \"&*%\", \"characters\"]", "prompt_tokens": 785, "completion_tokens": 762, "duration": 37.63310694694519}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 796, "completion_tokens": 480, "duration": 20.16709852218628}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1654, "completion_tokens": 979, "duration": 29.50966715812683}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 786, "completion_tokens": 429, "duration": 16.826871156692505}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 1245, "completion_tokens": 630, "duration": 24.402743101119995}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "prompt_tokens": 1067, "completion_tokens": 682, "duration": 32.31588101387024}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 1)\n\n    return (even_count, odd_count)", "prompt_tokens": 1152, "completion_tokens": 650, "duration": 26.123648643493652}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 928, "completion_tokens": 543, "duration": 36.557968616485596}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    return arr.index(sorted_arr[0]) == len(arr) - 1", "prompt_tokens": 2198, "completion_tokens": 1061, "duration": 28.430663108825684}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum1 = sum(1 for num in lst1 if num % 2 != 0)\n    sum2 = sum(1 for num in lst2 if num % 2 != 0)\n    return \"YES\" if sum2 >= sum1 else \"NO\"", "prompt_tokens": 1181, "completion_tokens": 674, "duration": 27.404903650283813}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 947, "completion_tokens": 525, "duration": 31.96316170692444}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([ch for ch in s if ch not in c])\n    return s, s == s[::-1]", "prompt_tokens": 953, "completion_tokens": 483, "duration": 17.31316351890564}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 1193, "completion_tokens": 739, "duration": 27.03617835044861}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum", "prompt_tokens": 855, "completion_tokens": 565, "duration": 24.98102045059204}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / bucket_capacity)", "prompt_tokens": 2265, "completion_tokens": 1060, "duration": 36.47014141082764}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1076, "completion_tokens": 581, "duration": 21.315979480743408}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in \"aeiou\")\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1038, "completion_tokens": 560, "duration": 20.017637729644775}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 998, "completion_tokens": 612, "duration": 24.733421087265015}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 972, "completion_tokens": 525, "duration": 32.00171256065369}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1119, "completion_tokens": 520, "duration": 24.089661121368408}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 774, "completion_tokens": 436, "duration": 28.893118381500244}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 <= num < 100)", "prompt_tokens": 2604, "completion_tokens": 1756, "duration": 52.766740560531616}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1117, "completion_tokens": 546, "duration": 22.424975156784058}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 1101, "completion_tokens": 575, "duration": 21.657633781433105}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        words = txt.split(',')\n        if len(words) > 1:\n            return words\n        else:\n            count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n            return count", "prompt_tokens": 875, "completion_tokens": 495, "duration": 20.5704927444458}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = {}\n    for i in lst:\n        if i in seen:\n            return False\n        seen[i] = True\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "prompt_tokens": 2270, "completion_tokens": 943, "duration": 66.61690163612366}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1329, "completion_tokens": 747, "duration": 35.660268783569336}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    total = 0\n    \n    for num in arr:\n        if num < 0:\n            product *= -1\n        elif num == 0:\n            product = 0\n        total += abs(num)\n    \n    return total * product", "prompt_tokens": 918, "completion_tokens": 566, "duration": 32.23932194709778}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    def backtrack(path, i, j):\n        if len(path) == k:\n            return path\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        for ni, nj in neighbors:\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in path:\n                res = backtrack(path + [(ni, nj)], ni, nj)\n                if res:\n                    return res\n    for i in range(n):\n        for j in range(n):\n            res = backtrack([(i, j)], i, j)\n            if res:\n                return [grid[i][j] for i, j in res]\n\n# Test Cases\ngrid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk = 1\nassert minPath(grid, k) == [1]\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nassert minPath(grid, k) == [1, 2, 1]\n\ngrid = [[1, 2], [3, 4]]\nk = 4\nassert minPath(grid, k) == [1, 2, 1, 2]\n\ngrid = [[10, 12, 11], [9, 8, 7], [6, 5, 4]]\nk = 5\nassert minPath(grid, k) == [4, 5, 6, 5, 4]\n\ngrid = [[2, 1], [4, 3]]\nk = 4\nassert minPath(grid, k) == [1, 2, 1, 2]\n\ngrid = [[1]]\nk = 5\nassert minPath(grid, k) == [1, 1, 1, 1, 1]\n\ngrid = [[1, 2, 3], [4, 5, 6]]\nk = 2\nassert minPath(grid, k) == [1, 2]\n\ngrid = [[3, 4, 5], [2, 1, 6], [7, 8, 9]]\nk = 6\nassert minPath(grid, k) == [1, 2, 1, 2, 1, 2]\n\ngrid = [[1, 2], [4, 3]]\nk = 4\nassert minPath(grid, k) == [1, 2, 4, 3]\n\ngrid = [[10, 11, 12], [9, 8, 7], [6, 5, 4]]\nk = 9\nassert minPath(grid, k) == [4, 5, 6, 5, 4, 5, 6, 5, 4]", "prompt_tokens": 6406, "completion_tokens": 4125, "duration": 119.08839631080627}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    elif n == 2:\n        return [3, 2, 8]\n    else:\n        tribonacci = [3, 2, 8]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n            else:\n                tribonacci.append(1 + i // 2)\n        return tribonacci", "prompt_tokens": 1212, "completion_tokens": 697, "duration": 40.37194633483887}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 704, "completion_tokens": 425, "duration": 17.86029815673828}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > 0:\n            opening_brackets -= 1\n    \n    return opening_brackets > 0", "prompt_tokens": 1368, "completion_tokens": 762, "duration": 24.36761713027954}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum([(int(x) if x % 1 == 0 else int(x) + 1) ** 2 for x in lst])\n    return total", "prompt_tokens": 1063, "completion_tokens": 611, "duration": 26.68567395210266}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 1463, "completion_tokens": 816, "duration": 29.09770178794861}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 775, "completion_tokens": 437, "duration": 19.720214128494263}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 898, "completion_tokens": 516, "duration": 30.72200608253479}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b\n    else:\n        return None", "prompt_tokens": 977, "completion_tokens": 622, "duration": 75.43636751174927}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test with the minimum possible sum of exactly 4 positive even numbers, which is 2+2+2+2=8\nassert is_equal_to_sum_even(8) == True\n\n# Test with a number less than the minimum possible sum, which should return False\nassert is_equal_to_sum_even(7) == False\n\n# Test with a number slightly greater than 8 but is odd, which cannot be the sum of even numbers\nassert is_equal_to_sum_even(9) == False\n\n# Test with a larger even number that can be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(20) == True\n\n# Test with a larger even number that cannot be written as the sum of exactly 4 positive even numbers because it's too large\nassert is_equal_to_sum_even(10000) == True\n\n# Test with a larger odd number, which should return False as odd numbers cannot be the sum of even numbers\nassert is_equal_to_sum_even(21) == False\n\n# Edge case: Test with the smallest positive even number, which is 2. It cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(2) == False\n\n# Test with zero, considering zero as an even number but it cannot be the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(0) == False\n\n# Test with a negative even number, which should return False as the requirement is for positive even numbers\nassert is_equal_to_sum_even(-8) == False\n\n# Test with a large even number that is a sum of 4 different even numbers\nassert is_equal_to_sum_even(44) == True\n\n# Test with a large odd number to ensure it returns False\nassert is_equal_to_sum_even(45) == False", "prompt_tokens": 726, "completion_tokens": 795, "duration": 27.56977367401123}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    \n    return result", "prompt_tokens": 908, "completion_tokens": 591, "duration": 27.405161142349243}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    if \"   \" in text:\n        return text.replace(\"   \", \"-\")\n    else:\n        return text.replace(\" \", \"_\").strip()", "prompt_tokens": 868, "completion_tokens": 512, "duration": 23.60312247276306}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not ext.lower() in ['txt', 'exe', 'dll']:\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1042, "completion_tokens": 541, "duration": 21.132425785064697}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result", "prompt_tokens": 1028, "completion_tokens": 573, "duration": 25.064242839813232}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "prompt_tokens": 933, "completion_tokens": 550, "duration": 23.278268337249756}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1107, "completion_tokens": 677, "duration": 29.97512197494507}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 910, "completion_tokens": 543, "duration": 23.403465747833252}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    return len([num for num in nums if num > 10 and is_odd_digit(num)])", "prompt_tokens": 838, "completion_tokens": 484, "duration": 21.828116178512573}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 891, "completion_tokens": 483, "duration": 22.913399934768677}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])\n\n# Removed unit tests", "prompt_tokens": 1915, "completion_tokens": 1128, "duration": 34.20256996154785}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    evens = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(evens), key=lambda x: (len(x), x))", "prompt_tokens": 935, "completion_tokens": 425, "duration": 24.248580932617188}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 779, "completion_tokens": 508, "duration": 23.654418230056763}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Test with a mix of odd, even, and zero integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with all negative numbers\nassert double_the_difference([-1, -2, -3, -4]) == 0\n\n# Test with a mix of negative and positive numbers including odd\nassert double_the_difference([9, -2, -3, 4]) == 81\n\n# Test with only one odd positive number\nassert double_the_difference([7]) == 49\n\n# Test with only one even positive number\nassert double_the_difference([2]) == 0\n\n# Test with only one negative number\nassert double_the_difference([-1]) == 0\n\n# Test with only zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0\n\n# Test with non-integer numbers, should ignore them\nassert double_the_difference([1.5, 3.5, -2.5, 2, 3]) == 9\n\n# Test with a mix of integers and non-integer types (string, float)\nassert double_the_difference([1, \"string\", 2.5, 3]) == 10\n\n# Test with very large numbers\nassert double_the_difference([1000001, 2000002]) == 1000001**2\n\n# Test with a list containing only zero and negative numbers\nassert double_the_difference([-1, -2, -3, 0]) == 0", "prompt_tokens": 790, "completion_tokens": 701, "duration": 25.528515100479126}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1133, "completion_tokens": 530, "duration": 23.41802954673767}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1318, "completion_tokens": 649, "duration": 28.516332864761353}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n\n    return any(is_rotation(a, b[-i:] + b[:-i]) for i in range(len(b)))", "prompt_tokens": 1811, "completion_tokens": 992, "duration": 34.10665464401245}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 610, "completion_tokens": 347, "duration": 22.330653429031372}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return None\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_numeral = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n        \n    return roman_numeral.lower()", "prompt_tokens": 801, "completion_tokens": 600, "duration": 22.14866018295288}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 873, "completion_tokens": 536, "duration": 21.151905059814453}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    words.sort()\n    words.sort(key=lambda x: len(set(x)), reverse=True)\n    return words[0] if words else None", "prompt_tokens": 987, "completion_tokens": 602, "duration": 77.63901472091675}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    eaten_carrots = min(total_carrots, remaining)\n    remaining_carrots = max(0, remaining - total_carrots)\n    return [eaten_carrots, remaining_carrots]", "prompt_tokens": 1149, "completion_tokens": 473, "duration": 19.71073818206787}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1264, "completion_tokens": 783, "duration": 30.997255086898804}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    return result", "prompt_tokens": 841, "completion_tokens": 500, "duration": 18.94268488883972}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 717, "completion_tokens": 413, "duration": 17.795348644256592}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 1155, "completion_tokens": 798, "duration": 41.240299463272095}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 992, "completion_tokens": 627, "duration": 26.55339527130127}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char in ['(', ')']:\n            temp += char\n            if temp.count('(') == temp.count(')'):\n                result.append(temp)\n                temp = \"\"\n    return result", "prompt_tokens": 886, "completion_tokens": 547, "duration": 22.048306465148926}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 685, "completion_tokens": 349, "duration": 14.626255750656128}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 697, "completion_tokens": 330, "duration": 15.851059913635254}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 2313, "completion_tokens": 1522, "duration": 49.307437896728516}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 802, "completion_tokens": 498, "duration": 25.642341375350952}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        \n        if char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    \n    if current_level > 0:\n        levels.append(max_level)\n    \n    return levels", "prompt_tokens": 810, "completion_tokens": 533, "duration": 20.28120183944702}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 826, "completion_tokens": 496, "duration": 20.029547452926636}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n\n    return (sum_result, product_result)", "prompt_tokens": 739, "completion_tokens": 404, "duration": 15.738553285598755}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 1144, "completion_tokens": 830, "duration": 45.97157049179077}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 3191, "completion_tokens": 2148, "duration": 65.32145977020264}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 623, "completion_tokens": 351, "duration": 18.339868307113647}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), strings.index(s)))", "prompt_tokens": 764, "completion_tokens": 419, "duration": 17.11218547821045}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 699, "completion_tokens": 413, "duration": 19.55560827255249}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 629, "completion_tokens": 370, "duration": 17.393296003341675}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 655, "completion_tokens": 364, "duration": 41.672749519348145}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 580, "completion_tokens": 274, "duration": 13.90304446220398}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats.get(note, 0) for note in notes]", "prompt_tokens": 934, "completion_tokens": 475, "duration": 21.511131286621094}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 817, "completion_tokens": 512, "duration": 24.16968584060669}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda x: num_dict[x])\n    return ' '.join(nums)", "prompt_tokens": 708, "completion_tokens": 423, "duration": 17.01203489303589}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 892, "completion_tokens": 472, "duration": 17.141226530075073}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1008, "completion_tokens": 636, "duration": 30.45200753211975}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 715, "completion_tokens": 388, "duration": 19.255441904067993}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 462, "completion_tokens": 212, "duration": 8.707032680511475}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 670, "completion_tokens": 430, "duration": 25.644235610961914}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 1551, "completion_tokens": 975, "duration": 37.24825406074524}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 687, "completion_tokens": 375, "duration": 20.102206230163574}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 548, "completion_tokens": 305, "duration": 14.14290976524353}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 591, "completion_tokens": 315, "duration": 14.096157312393188}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 901, "completion_tokens": 569, "duration": 24.98267674446106}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 806, "completion_tokens": 422, "duration": 20.827911138534546}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 628, "completion_tokens": 303, "duration": 14.27675175666809}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1473, "completion_tokens": 935, "duration": 38.782450675964355}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in third_indices:\n        result[i] = sorted(l[i])\n    return result", "prompt_tokens": 1034, "completion_tokens": 610, "duration": 25.39549469947815}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 836, "completion_tokens": 525, "duration": 21.128875732421875}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 770, "completion_tokens": 439, "duration": 27.204672813415527}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 978, "completion_tokens": 697, "duration": 29.65737295150757}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]", "prompt_tokens": 991, "completion_tokens": 624, "duration": 24.86033535003662}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 978, "completion_tokens": 640, "duration": 25.925124168395996}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num+1):\n                a, b = b, a + b\n            return b\n\n    num = 1\n    count = 0\n    while count < n:\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n        num += 1\n\n    return fib_num", "prompt_tokens": 813, "completion_tokens": 621, "duration": 27.354947090148926}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1039, "completion_tokens": 605, "duration": 28.854432821273804}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 740, "completion_tokens": 272, "duration": 12.553198099136353}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 695, "completion_tokens": 319, "duration": 16.348478078842163}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l)", "prompt_tokens": 911, "completion_tokens": 435, "duration": 20.606832265853882}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n\n    return ''.join(digits)", "prompt_tokens": 757, "completion_tokens": 475, "duration": 21.8817720413208}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 504, "completion_tokens": 251, "duration": 14.55214548110962}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 940, "completion_tokens": 525, "duration": 24.515861988067627}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 849, "completion_tokens": 588, "duration": 27.771795988082886}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 690, "completion_tokens": 384, "duration": 65.81085228919983}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 927, "completion_tokens": 559, "duration": 27.45480465888977}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 699, "completion_tokens": 420, "duration": 19.77837038040161}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 894, "completion_tokens": 501, "duration": 25.319074630737305}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 806, "completion_tokens": 491, "duration": 28.812490463256836}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 491, "completion_tokens": 223, "duration": 9.773717403411865}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 861, "completion_tokens": 426, "duration": 19.65253448486328}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 627, "completion_tokens": 393, "duration": 19.3276264667511}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    open_count = 0\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_count += 1\n        elif bracket == \">\":\n            open_count -= 1\n\n            if open_count < 0:\n                return False\n\n    return open_count == 0", "prompt_tokens": 746, "completion_tokens": 450, "duration": 21.792008876800537}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False", "prompt_tokens": 907, "completion_tokens": 612, "duration": 24.45862317085266}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 872, "completion_tokens": 491, "duration": 25.86817979812622}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test with a number having a large prime factor\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to check for smallest prime factor\nassert largest_prime_factor(2048) == 2\n\n# Test with a number where the largest prime factor is in the middle of its prime factorization\nassert largest_prime_factor(6936) == 17  # 2^3 * 3^2 * 7 * 17\n\n# Test with a number having a repeated large prime factor\nassert largest_prime_factor(121) == 11  # 11^2\n\n# Test with a larger number to check efficiency\nassert largest_prime_factor(600851475143) == 6857\n\n# Test with a number that is a product of consecutive primes\nassert largest_prime_factor(2*3*5*7*11*13) == 13\n\n# Test with a number that includes a large prime number and a very small one\nassert largest_prime_factor(2*101) == 101\n\n# Edge case: smallest composite number\nassert largest_prime_factor(4) == 2  # Since 4 is 2^2, the largest prime factor is 2\n\n# Test with a composite number that is a product of two primes, one large and one small\nassert largest_prime_factor(2 * 1999) == 1999  # 2 and 1999 are primes", "prompt_tokens": 615, "completion_tokens": 654, "duration": 22.475565195083618}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 674, "completion_tokens": 324, "duration": 14.81523060798645}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 779, "completion_tokens": 483, "duration": 21.37244415283203}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test case for a polynomial of degree 4\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Failed on polynomial of degree 4\"\n\n# Test case for a polynomial of degree 2\nassert derivative([1, 2, 3]) == [2, 6], \"Failed on polynomial of degree 2\"\n\n# Test case for a constant polynomial (should return an empty list)\nassert derivative([5]) == [], \"Failed on constant polynomial\"\n\n# Test case for a linear polynomial (should return a list with the coefficient of x)\nassert derivative([0, 4]) == [4], \"Failed on linear polynomial\"\n\n# Test case for a polynomial with all coefficients being zeros\nassert derivative([0, 0, 0, 0]) == [0, 0, 0], \"Failed on zero polynomial\"\n\n# Test case for negative coefficients\nassert derivative([-3, -2, -1]) == [-2, -2], \"Failed on polynomial with negative coefficients\"\n\n# Test case for a polynomial with a mix of positive and negative coefficients\nassert derivative([1, -2, 3, -4]) == [-2, 6, -12], \"Failed on polynomial with mixed coefficients\"\n\n# Test case for a polynomial with floating point coefficients\nassert derivative([0.5, 2.5, 4.0]) == [2.5, 8.0], \"Failed on polynomial with floating point coefficients\"\n\n# Test case for a polynomial where the derivative will have a zero coefficient\nassert derivative([1, 0, 2]) == [0, 4], \"Failed when derivative should include a zero coefficient\"\n\n# Test case for a polynomial with a large number of terms\nassert derivative([1] * 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Failed on polynomial with a large number of terms\"", "prompt_tokens": 831, "completion_tokens": 887, "duration": 28.320285320281982}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 940, "completion_tokens": 531, "duration": 23.18229341506958}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2341, "completion_tokens": 1518, "duration": 44.59433698654175}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 838, "completion_tokens": 540, "duration": 26.507144451141357}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 915, "completion_tokens": 532, "duration": 26.393935203552246}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[-2])\n    return n - apples - oranges", "prompt_tokens": 1043, "completion_tokens": 480, "duration": 25.112006187438965}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    min_index = arr.index(min_value)\n    return [min_value, min_index]", "prompt_tokens": 1282, "completion_tokens": 540, "duration": 26.920178174972534}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    num_freq = {}\n    for num in lst:\n        if num > 0:\n            num_freq[num] = num_freq.get(num, 0) + 1\n    \n    result = -1\n    for num, freq in num_freq.items():\n        if num > freq:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 925, "completion_tokens": 492, "duration": 30.984044551849365}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 828, "completion_tokens": 446, "duration": 21.493583917617798}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 963, "completion_tokens": 630, "duration": 32.678218603134155}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1060, "completion_tokens": 443, "duration": 27.637712240219116}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 960, "completion_tokens": 517, "duration": 23.010064601898193}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 998, "completion_tokens": 516, "duration": 26.31961154937744}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a /= prime\n            count += 1\n    return count == 3 and a == 1", "prompt_tokens": 819, "completion_tokens": 609, "duration": 24.43914031982422}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and n**int(round((x/n)**(1/n), 10)) == x", "prompt_tokens": 965, "completion_tokens": 539, "duration": 24.096741676330566}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 1244, "completion_tokens": 664, "duration": 20.900311708450317}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_digits)", "prompt_tokens": 1158, "completion_tokens": 423, "duration": 18.061585664749146}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 751, "completion_tokens": 313, "duration": 12.279444456100464}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 939, "completion_tokens": 589, "duration": 28.682206630706787}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1310, "completion_tokens": 850, "duration": 31.35620665550232}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True, \"Should return True for string length 5\"\n\n# Test with a string of length 7 (prime number)\nassert prime_length('abcdcba') == True, \"Should return True for string length 7\"\n\n# Test with a string of length 7 again to ensure consistency\nassert prime_length('kittens') == True, \"Should return True for string length 7 again\"\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False, \"Should return False for string length 6\"\n\n# Test with a string of length 2 (prime number)\nassert prime_length('Hi') == True, \"Should return True for string length 2\"\n\n# Test with a string of length 1 (not generally considered a prime number)\nassert prime_length('A') == False, \"Should return False for string length 1\"\n\n# Test with a string of length 11 (prime number)\nassert prime_length('Mathematics') == True, \"Should return True for string length 11\"\n\n# Test with an empty string (length 0, not a prime number)\nassert prime_length('') == False, \"Should return False for empty string\"\n\n# Test with a string of length 13 (prime number)\nassert prime_length('abcdefghijklm') == True, \"Should return True for string length 13\"\n\n# Test with a string of length 4 (not a prime number)\nassert prime_length('test') == False, \"Should return False for string length 4\"", "prompt_tokens": 684, "completion_tokens": 744, "duration": 27.108429670333862}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 697, "completion_tokens": 489, "duration": 17.11937952041626}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 849, "completion_tokens": 426, "duration": 21.302248001098633}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 664, "completion_tokens": 410, "duration": 43.3702290058136}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word, key=lambda x: (x.isdigit(), x.lower())))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 741, "completion_tokens": 356, "duration": 15.095065116882324}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 1390, "completion_tokens": 755, "duration": 31.74369239807129}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)\n    return sorted_array", "prompt_tokens": 1170, "completion_tokens": 620, "duration": 29.484843015670776}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(ord(c) + 2 * (ord('z') - ord('Z')) if c.islower() else ord(c) + 2 * (ord('Z') - ord('z')) if c.isupper() else ord(c)) if c.isalpha() else c for c in s)", "prompt_tokens": 827, "completion_tokens": 499, "duration": 27.42764711380005}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "prompt_tokens": 913, "completion_tokens": 517, "duration": 26.68642258644104}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace('!', '.').replace('?', '.').split('.') if sentence.strip().startswith('I'))", "prompt_tokens": 1487, "completion_tokens": 929, "duration": 30.859529495239258}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 961, "completion_tokens": 569, "duration": 26.27615976333618}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shifted = 'cgkqyCGKQY'\n        return shifted[vowels.index(vowel)]\n\n    def encode_char(char):\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                return shift_vowel(char)\n            else:\n                return char.swapcase()\n        return char\n\n    return ''.join(encode_char(char) for char in message)", "prompt_tokens": 805, "completion_tokens": 510, "duration": 22.151137590408325}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return sum_of_digits(max_prime)\n    else:\n        return 0", "prompt_tokens": 1228, "completion_tokens": 597, "duration": 31.562607049942017}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    \n    return lower_keys or upper_keys", "prompt_tokens": 923, "completion_tokens": 467, "duration": 21.974406480789185}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 807, "completion_tokens": 430, "duration": 18.63131594657898}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 695, "completion_tokens": 346, "duration": 18.652557849884033}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 782, "completion_tokens": 495, "duration": 24.884267568588257}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 924, "completion_tokens": 474, "duration": 24.813334703445435}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 942, "completion_tokens": 553, "duration": 27.321272373199463}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 776, "completion_tokens": 380, "duration": 20.528486251831055}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            largest_even = max(largest_even, num)\n    return largest_even", "prompt_tokens": 804, "completion_tokens": 489, "duration": 22.727646827697754}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1142, "completion_tokens": 718, "duration": 35.997952699661255}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted(num for num in x if not has_even_digit(num))", "prompt_tokens": 788, "completion_tokens": 430, "duration": 17.84730887413025}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[x - 1] for x in reversed_arr]\n    return result", "prompt_tokens": 1235, "completion_tokens": 597, "duration": 25.206610918045044}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 890, "completion_tokens": 554, "duration": 21.67983651161194}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n    \n    return (even_count, odd_count)", "prompt_tokens": 1068, "completion_tokens": 565, "duration": 31.511308908462524}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    def has_positive_digit_sum(n):\n        return digit_sum(n) > 0\n\n    return sum(1 for num in arr if has_positive_digit_sum(num))", "prompt_tokens": 762, "completion_tokens": 393, "duration": 16.946280241012573}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1219, "completion_tokens": 504, "duration": 19.008874893188477}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    count_even = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if count_even >= count_odd else \"NO\"", "prompt_tokens": 1143, "completion_tokens": 636, "duration": 24.8492431640625}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    for char in test.split():\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        else:\n            histogram_dict[char] = 1\n\n    max_count = max(histogram_dict.values())\n    return {k: v for k, v in histogram_dict.items() if v == max_count}", "prompt_tokens": 955, "completion_tokens": 549, "duration": 21.013346910476685}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_s = ''.join([char for char in s if char not in c])\n    return filtered_s, filtered_s == filtered_s[::-1]", "prompt_tokens": 1243, "completion_tokens": 778, "duration": 31.549265384674072}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements \" + str(sum(int(digit) % 2 != 0 for digit in string) ) + \"n the str\" + string + \"ng \" + string + \" of the \" + string + \"nput.\" for string in lst]", "prompt_tokens": 1207, "completion_tokens": 746, "duration": 29.972739458084106}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum = min(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n\n    return min_sum", "prompt_tokens": 811, "completion_tokens": 520, "duration": 24.8351149559021}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)  # Ceiling division", "prompt_tokens": 2344, "completion_tokens": 1138, "duration": 47.389111280441284}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1143, "completion_tokens": 648, "duration": 33.79320478439331}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n and len(word) > 0]", "prompt_tokens": 1032, "completion_tokens": 567, "duration": 24.042438507080078}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test cases have been removed", "prompt_tokens": 1060, "completion_tokens": 681, "duration": 38.449554681777954}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 893, "completion_tokens": 441, "duration": 18.60450792312622}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1131, "completion_tokens": 532, "duration": 28.03224802017212}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 736, "completion_tokens": 398, "duration": 24.016905784606934}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 1050, "completion_tokens": 644, "duration": 36.725075006484985}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1165, "completion_tokens": 580, "duration": 123.04566764831543}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1402, "completion_tokens": 878, "duration": 37.130751609802246}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 975, "completion_tokens": 572, "duration": 31.540188312530518}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "prompt_tokens": 1111, "completion_tokens": 481, "duration": 32.920514822006226}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start <= end:\n        if is_prime(end - start + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1195, "completion_tokens": 648, "duration": 26.601006984710693}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes += abs(num)\n            product *= -1\n            \n    return sum_magnitudes * product", "prompt_tokens": 1010, "completion_tokens": 668, "duration": 26.175920963287354}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_min_path(grid, k):\n        def dfs(x, y, path):\n            if len(path) == k:\n                return path\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                    if new_path:\n                        return new_path\n\n        min_path = None\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                new_path = dfs(i, j, [grid[i][j]])\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = new_path\n        return min_path\n\n    return find_min_path(grid, k)", "prompt_tokens": 1588, "completion_tokens": 824, "duration": 43.90482950210571}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        res = [3, 2]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res", "prompt_tokens": 1133, "completion_tokens": 588, "duration": 25.579599380493164}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 616, "completion_tokens": 337, "duration": 19.70005774497986}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) != 0", "prompt_tokens": 1238, "completion_tokens": 623, "duration": 20.617645502090454}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 1080, "completion_tokens": 608, "duration": 38.84532189369202}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.rstrip()[-1].isalpha() if txt else False", "prompt_tokens": 849, "completion_tokens": 417, "duration": 19.881810665130615}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 840, "completion_tokens": 502, "duration": 22.427236557006836}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    max_neg = None if not neg_ints else max(neg_ints)\n    min_pos = None if not pos_ints else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 1019, "completion_tokens": 646, "duration": 32.211278200149536}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    \n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None", "prompt_tokens": 1074, "completion_tokens": 677, "duration": 40.479923248291016}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 720, "completion_tokens": 407, "duration": 15.687381029129028}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 810, "completion_tokens": 496, "duration": 27.8741192817688}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    if \"   \" in text:\n        return text.replace(\"   \", \"-\").replace(\" \", \"_\")\n    else:\n        return text.replace(\" \", \"_\")", "prompt_tokens": 666, "completion_tokens": 313, "duration": 20.20609474182129}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1023, "completion_tokens": 524, "duration": 22.57974624633789}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1048, "completion_tokens": 602, "duration": 25.95036816596985}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 821, "completion_tokens": 438, "duration": 23.49333620071411}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1108, "completion_tokens": 675, "duration": 34.60294032096863}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 1705, "completion_tokens": 893, "duration": 33.176390171051025}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 884, "completion_tokens": 527, "duration": 20.15156579017639}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1064, "completion_tokens": 642, "duration": 30.651421308517456}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    start = min(idx1, idx2) + 1\n    end = max(idx1, idx2)\n    \n    if start >= end:\n        return ()\n    \n    result = planets[start:end]\n    if idx1 > idx2:\n        result.reverse()\n    \n    return tuple(result)", "prompt_tokens": 1915, "completion_tokens": 1143, "duration": 38.436142444610596}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 2238, "completion_tokens": 1162, "duration": 36.28921413421631}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 653, "completion_tokens": 382, "duration": 23.450490474700928}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 736, "completion_tokens": 317, "duration": 12.469566345214844}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1217, "completion_tokens": 610, "duration": 26.842944145202637}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1336, "completion_tokens": 677, "duration": 40.154730796813965}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 1136, "completion_tokens": 738, "duration": 87.23615837097168}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even, odd)", "prompt_tokens": 556, "completion_tokens": 311, "duration": 12.822961807250977}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 765, "completion_tokens": 566, "duration": 24.37546181678772}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 828, "completion_tokens": 480, "duration": 20.09363842010498}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word", "prompt_tokens": 832, "completion_tokens": 501, "duration": 21.07564926147461}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + remaining\n    if remaining >= need:\n        total_carrots += need\n        remaining -= need\n    else:\n        total_carrots += remaining\n        remaining = 0\n    return [total_carrots, remaining]", "prompt_tokens": 1256, "completion_tokens": 584, "duration": 29.0191867351532}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1340, "completion_tokens": 859, "duration": 39.50994539260864}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 695, "completion_tokens": 362, "duration": 12.74778413772583}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 769, "completion_tokens": 465, "duration": 20.863134622573853}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 836, "completion_tokens": 479, "duration": 25.107362508773804}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 898, "completion_tokens": 534, "duration": 33.12413191795349}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    res = []\n    temp = ''\n    for char in paren_string:\n        if char in '()':\n            temp += char\n            if temp.count('(') == temp.count(')'):\n                res.append(temp)\n                temp = ''\n    return res", "prompt_tokens": 869, "completion_tokens": 529, "duration": 23.501179456710815}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 740, "completion_tokens": 408, "duration": 20.521392822265625}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 878, "completion_tokens": 511, "duration": 43.21257996559143}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 790, "completion_tokens": 424, "duration": 33.43354344367981}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 967, "completion_tokens": 656, "duration": 34.17780876159668}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            max_level = max(max_level, level)\n        elif char == ')':\n            level -= 1\n\n    return [max_level]\n\n# Test with single group having no nesting\nassert parse_nested_parens('()') == [1]\n\n# Test with single group having one level of nesting\nassert parse_nested_parens('(())') == [2]\n\n# Test with multiple groups having different levels of nesting\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n\n# Test with empty string, expecting an empty list\nassert parse_nested_parens('') == []\n\n# Test with single group having a very deep level of nesting\nassert parse_nested_parens('((((()))))') == [5]\n\n# Test with multiple groups where all groups have the same level of nesting\nassert parse_nested_parens('() () ()') == [1, 1, 1]\n\n# Test with spaces but no valid groups, expecting an empty list\nassert parse_nested_parens('      ') == []\n\n# Test with a complex scenario with varying nesting levels\nassert parse_nested_parens('(()(())) (()) (((()))) ()') == [3, 2, 4, 1]\n\n# Test with nested parentheses that are adjacent without spaces\n# This is a boundary case, and depending on implementation, might either be considered a single group or error\n# Here, assuming it's treated as a single group\nassert parse_nested_parens('(())(())') == [2]\n\n# Test with invalid characters included, assuming function only considers valid parentheses\nassert parse_nested_parens('((a)())') == [2]", "prompt_tokens": 3442, "completion_tokens": 2626, "duration": 122.29128670692444}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 949, "completion_tokens": 619, "duration": 28.382949829101562}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum(numbers), product", "prompt_tokens": 900, "completion_tokens": 560, "duration": 26.32547354698181}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n\n    return result", "prompt_tokens": 917, "completion_tokens": 614, "duration": 46.42435908317566}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 1013, "completion_tokens": 648, "duration": 33.07429909706116}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 776, "completion_tokens": 504, "duration": 22.807979106903076}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 705, "completion_tokens": 358, "duration": 18.11634635925293}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 677, "completion_tokens": 391, "duration": 17.893309354782104}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 587, "completion_tokens": 328, "duration": 14.228505611419678}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 819, "completion_tokens": 354, "duration": 14.85034728050232}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 653, "completion_tokens": 351, "duration": 15.057538509368896}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [beats[note] for note in notes]\n\n# Test with a single whole note\nassert parse_music('o') == [4], \"Test with a single whole note failed.\"\n\n# Test with a single half note\nassert parse_music('o|') == [2], \"Test with a single half note failed.\"\n\n# Test with a single quarter note\nassert parse_music('.|') == [1], \"Test with a single quarter note failed.\"\n\n# Test with a mix of whole, half, and quarter notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Test with a mix of different notes failed.\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Test with multiple whole notes failed.\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Test with multiple half notes failed.\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Test with multiple quarter notes failed.\"\n\n# Test with an empty string\nassert parse_music('') == [], \"Test with an empty string failed.\"\n\n# Test with spaces but no notes\nassert parse_music('     ') == [], \"Test with spaces but no notes failed.\"\n\n# Test with a complex mixed pattern\nassert parse_music('o| .| o o| o .| .| o|') == [2, 1, 4, 2, 4, 1, 1, 2], \"Test with a complex mixed pattern failed.\"\n\n# Test with notes separated by more than one space\nassert parse_music('o  o|   .|') == [4, 2, 1], \"Test with notes separated by more than one space failed.\"\n\n# Test with leading and trailing spaces\nassert parse_music(' o o| .| ') == [4, 2, 1], \"Test with leading and trailing spaces failed.\"", "prompt_tokens": 988, "completion_tokens": 990, "duration": 38.581525802612305}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 821, "completion_tokens": 526, "duration": 22.707134246826172}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 718, "completion_tokens": 449, "duration": 19.81414532661438}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return result", "prompt_tokens": 1085, "completion_tokens": 675, "duration": 30.122337102890015}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 932, "completion_tokens": 560, "duration": 40.255736112594604}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 745, "completion_tokens": 418, "duration": 21.026771068572998}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 513, "completion_tokens": 263, "duration": 14.29703140258789}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 576, "completion_tokens": 341, "duration": 22.210792064666748}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 897, "completion_tokens": 542, "duration": 25.63571810722351}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 822, "completion_tokens": 510, "duration": 22.606839418411255}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 598, "completion_tokens": 354, "duration": 16.742162466049194}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 697, "completion_tokens": 426, "duration": 21.246663331985474}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 815, "completion_tokens": 497, "duration": 21.907188653945923}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 693, "completion_tokens": 309, "duration": 21.191327810287476}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 647, "completion_tokens": 323, "duration": 17.284183263778687}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    return -xs[0] / xs[1] if len(xs) == 2 else None", "prompt_tokens": 1172, "completion_tokens": 540, "duration": 38.225460052490234}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1082, "completion_tokens": 636, "duration": 27.126060724258423}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 760, "completion_tokens": 448, "duration": 22.714317321777344}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 637, "completion_tokens": 306, "duration": 15.705209970474243}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 749, "completion_tokens": 468, "duration": 26.564680099487305}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = sorted([x for x in l[::2]])\n    result = [None] * len(l)\n    result[::2] = even_indices\n    result[1::2] = l[1::2]\n    return result", "prompt_tokens": 1022, "completion_tokens": 655, "duration": 29.545652151107788}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 881, "completion_tokens": 543, "duration": 20.853346824645996}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 833, "completion_tokens": 612, "duration": 28.774285793304443}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 982, "completion_tokens": 548, "duration": 48.06877160072327}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1815, "completion_tokens": 869, "duration": 31.664779901504517}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 735, "completion_tokens": 355, "duration": 17.649585485458374}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 1004, "completion_tokens": 533, "duration": 23.997690200805664}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 790, "completion_tokens": 485, "duration": 19.308170318603516}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 643, "completion_tokens": 390, "duration": 19.02820086479187}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 907, "completion_tokens": 489, "duration": 24.426350355148315}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 809, "completion_tokens": 538, "duration": 24.327852964401245}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 715, "completion_tokens": 409, "duration": 20.957622528076172}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 927, "completion_tokens": 559, "duration": 32.881094455718994}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 709, "completion_tokens": 430, "duration": 22.23433518409729}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 828, "completion_tokens": 432, "duration": 21.674291133880615}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 796, "completion_tokens": 481, "duration": 21.430546760559082}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 509, "completion_tokens": 241, "duration": 13.72405219078064}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 812, "completion_tokens": 373, "duration": 19.863065242767334}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 680, "completion_tokens": 444, "duration": 27.613624334335327}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 760, "completion_tokens": 451, "duration": 21.555914163589478}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing", "prompt_tokens": 857, "completion_tokens": 566, "duration": 32.17572641372681}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 938, "completion_tokens": 557, "duration": 27.23021650314331}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 621, "completion_tokens": 360, "duration": 19.23753833770752}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 758, "completion_tokens": 409, "duration": 15.94562840461731}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 756, "completion_tokens": 455, "duration": 23.56766700744629}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 1732, "completion_tokens": 959, "duration": 46.10374712944031}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 917, "completion_tokens": 508, "duration": 28.256234169006348}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiou\"\n    s_lower = s.lower()\n    count = sum(1 for char in s_lower if char in vowels)\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 871, "completion_tokens": 491, "duration": 30.59844732284546}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 806, "completion_tokens": 494, "duration": 29.59237504005432}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 867, "completion_tokens": 484, "duration": 26.659905433654785}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1070, "completion_tokens": 504, "duration": 63.070812702178955}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    index = arr.index(min_value)\n    return [min_value, index]", "prompt_tokens": 1223, "completion_tokens": 479, "duration": 23.43305468559265}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n\n    return result", "prompt_tokens": 960, "completion_tokens": 534, "duration": 23.885068893432617}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 900, "completion_tokens": 518, "duration": 23.69844150543213}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 923, "completion_tokens": 588, "duration": 46.73115110397339}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 1188, "completion_tokens": 581, "duration": 28.72030997276306}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return sum(1 for i in range(len(arr)//2) if arr[i] != arr[-i-1])", "prompt_tokens": 1039, "completion_tokens": 575, "duration": 25.965186595916748}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    \n    return lst1 if len1 <= len2 else lst2", "prompt_tokens": 1009, "completion_tokens": 496, "duration": 28.02367115020752}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                if p1 * p2 * p3 == a:\n                    return True\n    return False", "prompt_tokens": 840, "completion_tokens": 625, "duration": 28.50202775001526}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (n == 1 or round(math.log(x, n)).is_integer())\n\nimport math", "prompt_tokens": 1979, "completion_tokens": 1320, "duration": 46.99895000457764}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 691, "completion_tokens": 313, "duration": 17.103285312652588}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1176, "completion_tokens": 453, "duration": 26.10825514793396}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 969, "completion_tokens": 536, "duration": 26.45096516609192}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 877, "completion_tokens": 527, "duration": 38.668147802352905}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1325, "completion_tokens": 865, "duration": 36.87252974510193}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of prime length 5 (e.g., 'Hello')\nassert prime_length('Hello') == True\n\n# Test with a string of prime length 7 (e.g., 'abcdcba')\nassert prime_length('abcdcba') == True\n\n# Test with a string of non-prime length 6 (e.g., 'orange')\nassert prime_length('orange') == False\n\n# Test with an empty string, length 0 (not prime)\nassert prime_length('') == False\n\n# Test with a string of length 1 (not considered prime)\nassert prime_length('a') == False\n\n# Test with a string of prime length 2 (e.g., 'ok')\nassert prime_length('ok') == True\n\n# Test with a string of prime length 11 (e.g., 'mathematics')\nassert prime_length('mathematics') == True\n\n# Test with a string of non-prime length 9 (e.g., 'chocolate')\nassert prime_length('chocolate') == False\n\n# Test with a string of prime length 13 (e.g., 'abcdefghijklm')\nassert prime_length('abcdefghijklm') == True\n\n# Test with a string of non-prime length 10 (e.g., 'abcdefghij')\nassert prime_length('abcdefghij') == False\n\n# Test with a string of prime length 17 (long arbitrary string)\nassert prime_length('abcdefghijklmnopq') == True\n\n# Test with a string of prime length 19 (another long arbitrary string)\nassert prime_length('abcdefghijklmnopqrs') == True\n\n# Test with a string of non-prime length 15 (e.g., 'abcdefghijklmno')\nassert prime_length('abcdefghijklmno') == False\n\n# Test with a string of non-prime length 4 (e.g., 'true')\nassert prime_length('true') == False\n\n# Test with a very long string of non-prime length 100 (multiples of 10 are not prime)\nassert prime_length('a'*100) == False\n\n# Test with a very long string of prime length 97 (prime number)\nassert prime_length('a'*97) == True", "prompt_tokens": 792, "completion_tokens": 959, "duration": 47.681668758392334}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        raise ValueError(\"Invalid input\")\n    elif n < 0:\n        raise ValueError(\"Invalid input\")\n    else:\n        return 9 * 2 * 9 ** (n - 2) + 9 * 9 ** (n - 1)", "prompt_tokens": 896, "completion_tokens": 559, "duration": 20.697084188461304}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 790, "completion_tokens": 363, "duration": 16.282506227493286}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 763, "completion_tokens": 509, "duration": 24.98477339744568}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 1032, "completion_tokens": 635, "duration": 34.473721742630005}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coords.append((i, j))\n    coords.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coords", "prompt_tokens": 1401, "completion_tokens": 768, "duration": 32.78725242614746}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array) if (array[0] + array[-1]) % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1150, "completion_tokens": 599, "duration": 73.75926160812378}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            shifted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += shifted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 909, "completion_tokens": 615, "duration": 29.577845096588135}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]", "prompt_tokens": 932, "completion_tokens": 545, "duration": 23.683046340942383}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n            \n    return count", "prompt_tokens": 783, "completion_tokens": 447, "duration": 21.19138264656067}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 786, "completion_tokens": 387, "duration": 25.93466806411743}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2).upper()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 864, "completion_tokens": 523, "duration": 24.74123740196228}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1264, "completion_tokens": 632, "duration": 27.572623014450073}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 875, "completion_tokens": 414, "duration": 18.401079416275024}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1045, "completion_tokens": 657, "duration": 41.46458387374878}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 712, "completion_tokens": 363, "duration": 20.06352949142456}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = \"AEIOU\"\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in vowels)", "prompt_tokens": 1304, "completion_tokens": 858, "duration": 27.794237852096558}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number % 1 >= 0.5:\n        return int(number) + 1 if number >= 0 else int(number) - 1\n    else:\n        return int(number)", "prompt_tokens": 1585, "completion_tokens": 898, "duration": 38.48159742355347}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 877, "completion_tokens": 492, "duration": 18.612823963165283}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(',') for word in s.replace(',', ' ').split() if word]\n\n# Test with basic input string separated by spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with input string separated by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with input string having both commas and spaces\nassert words_string(\"apple, banana, mango, orange\") == [\"apple\", \"banana\", \"mango\", \"orange\"]\n\n# Test with input string having a trailing space\nassert words_string(\"dog, cat, rabbit, \") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having a trailing comma\nassert words_string(\"dog, cat, rabbit,\") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having spaces before commas\nassert words_string(\"dog , cat , rabbit\") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having multiple spaces between words\nassert words_string(\"The   quick brown   fox\") == [\"The\", \"quick\", \"brown\", \"fox\"]\n\n# Test with input string having mixed spaces and commas irregularly\nassert words_string(\"Hello,   world  ,this,is ,a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with empty input string\nassert words_string(\"\") == []\n\n# Test with input string having only spaces\nassert words_string(\"     \") == []\n\n# Test with input string having only commas\nassert words_string(\",,,,\") == []\n\n# Test with input string that is a single word\nassert words_string(\"word\") == [\"word\"]", "prompt_tokens": 780, "completion_tokens": 754, "duration": 34.29597473144531}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 949, "completion_tokens": 632, "duration": 25.324585437774658}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 897, "completion_tokens": 474, "duration": 19.979907035827637}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 1109, "completion_tokens": 546, "duration": 24.88961172103882}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    numbers = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [numbers[num] for num in reversed_arr]", "prompt_tokens": 1223, "completion_tokens": 578, "duration": 27.42761516571045}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 909, "completion_tokens": 568, "duration": 35.44343137741089}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    count_odd = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n\n    return (count_even, count_odd)", "prompt_tokens": 1091, "completion_tokens": 587, "duration": 34.77444338798523}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 733, "completion_tokens": 337, "duration": 14.21988320350647}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_val = min(arr)\n    idx = arr.index(min_val)\n    return arr == sorted(arr[idx:] + arr[:idx])", "prompt_tokens": 1223, "completion_tokens": 488, "duration": 35.07444739341736}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    evens_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    evens_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if evens_lst1 <= evens_lst2 else \"NO\"", "prompt_tokens": 1142, "completion_tokens": 643, "duration": 29.861084461212158}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    count = {}\n    for letter in test.split():\n        count[letter] = count.get(letter, 0) + 1\n\n    max_count = max(count.values())\n    return {letter: count[letter] for letter in count if count[letter] == max_count}", "prompt_tokens": 926, "completion_tokens": 508, "duration": 33.40393376350403}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1080, "completion_tokens": 610, "duration": 24.470106601715088}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 1146, "completion_tokens": 729, "duration": 34.46397948265076}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 878, "completion_tokens": 587, "duration": 23.775888204574585}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    \n    total_water = sum(sum(row) for row in grid)\n    \n    buckets_needed = math.ceil(total_water / capacity)\n    \n    return buckets_needed", "prompt_tokens": 1475, "completion_tokens": 707, "duration": 29.967079877853394}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 964, "completion_tokens": 483, "duration": 23.77203130722046}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1001, "completion_tokens": 542, "duration": 21.859398365020752}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 1088, "completion_tokens": 702, "duration": 28.015865087509155}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                stack.append(char)\n        return not stack\n\n    first, second = lst\n    return 'Yes' if is_balanced(first + second) or is_balanced(second + first) else 'No'", "prompt_tokens": 945, "completion_tokens": 520, "duration": 31.368226051330566}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1195, "completion_tokens": 596, "duration": 26.28984832763672}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 873, "completion_tokens": 535, "duration": 26.23205828666687}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 872, "completion_tokens": 466, "duration": 22.34496760368347}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            result.append(n)\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1046, "completion_tokens": 469, "duration": 26.377554893493652}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n    \n    return True", "prompt_tokens": 1209, "completion_tokens": 703, "duration": 37.48074412345886}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1027, "completion_tokens": 625, "duration": 39.01299524307251}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n    return lst == sorted(lst)", "prompt_tokens": 1957, "completion_tokens": 1000, "duration": 44.25889611244202}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1209, "completion_tokens": 654, "duration": 27.761387825012207}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 907, "completion_tokens": 554, "duration": 25.11189913749695}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    N = len(grid)\n    def neighbors(i, j):\n        for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= x < N and 0 <= y < N:\n                yield x, y\n\n    def paths():\n        for path in itertools.permutations(range(N * N), k):\n            if path[0] == grid[0][0]:\n                i, j = divmod(path[0], N)\n                for pos in path[1:]:\n                    x, y = divmod(pos, N)\n                    if (x, y) in neighbors(i, j):\n                        i, j = x, y\n                    else:\n                        break\n                else:\n                    yield path\n\n    return min(paths())", "prompt_tokens": 1696, "completion_tokens": 908, "duration": 46.73429346084595}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        else:\n            tribonacci.append(1 + i // 2)\n    \n    return tribonacci", "prompt_tokens": 1119, "completion_tokens": 578, "duration": 22.709339380264282}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 607, "completion_tokens": 328, "duration": 14.918609619140625}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 0", "prompt_tokens": 771, "completion_tokens": 374, "duration": 63.60005187988281}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (1 if num % 1 != 0 else 0)) ** 2\n    return total", "prompt_tokens": 961, "completion_tokens": 515, "duration": 29.19134783744812}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and not txt.split()[-1].isalpha()", "prompt_tokens": 887, "completion_tokens": 461, "duration": 18.609962701797485}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 688, "completion_tokens": 351, "duration": 24.809802055358887}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 893, "completion_tokens": 521, "duration": 26.546343088150024}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    elif type(a) == float and type(b) == float:\n        return max(a, b)\n    elif (type(a) == int and type(b) == float) or (type(a) == float and type(b) == int):\n        return max(float(a), float(b))\n    elif (type(a) == int and (\",\" in b or \".\" in b)) or (type(b) == int and (\",\" in a or \".\" in a)):\n        return max(float(a), float(b), key=float)\n    else:\n        return None", "prompt_tokens": 1024, "completion_tokens": 704, "duration": 32.912251234054565}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 677, "completion_tokens": 364, "duration": 21.5372793674469}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        return None\n    result = 1\n    while n > 0:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        result *= fact\n        n -= 1\n    return result", "prompt_tokens": 1003, "completion_tokens": 702, "duration": 32.71526265144348}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n        else:\n            if consecutive_spaces > 0:\n                result.append('_')\n                consecutive_spaces = 0\n            result.append(char)\n    if consecutive_spaces > 0:\n        result.append('-')\n    return ''.join(result)", "prompt_tokens": 769, "completion_tokens": 481, "duration": 20.665015935897827}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or ext not in ['txt', 'exe', 'dll'] or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1095, "completion_tokens": 568, "duration": 32.396180629730225}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 986, "completion_tokens": 535, "duration": 22.949321031570435}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def prime_length_words(words):\n        return ' '.join([word for word in words.split() if is_prime(len(word)])\n\n    return prime_length_words(sentence)", "prompt_tokens": 3400, "completion_tokens": 2063, "duration": 55.466978311538696}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 1058, "completion_tokens": 624, "duration": 42.21145820617676}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))", "prompt_tokens": 967, "completion_tokens": 602, "duration": 40.5036940574646}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = sum(1 for num in nums if num > 10 and is_odd(num))\n    return count", "prompt_tokens": 868, "completion_tokens": 514, "duration": 21.351409912109375}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 966, "completion_tokens": 547, "duration": 28.49155831336975}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 1061, "completion_tokens": 578, "duration": 31.259597301483154}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1073, "completion_tokens": 545, "duration": 25.884440422058105}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 772, "completion_tokens": 478, "duration": 21.854498624801636}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1505, "completion_tokens": 858, "duration": 29.90887975692749}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - guess) for score, guess in zip(game, guess)]", "prompt_tokens": 1184, "completion_tokens": 570, "duration": 34.65632390975952}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        if strength >= max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 2027, "completion_tokens": 1019, "duration": 37.44172191619873}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n    \n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1663, "completion_tokens": 1064, "duration": 39.945040702819824}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 702, "completion_tokens": 461, "duration": 32.093088150024414}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_dict.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n            \n    return result.lower()", "prompt_tokens": 826, "completion_tokens": 589, "duration": 33.68960618972778}
{"task_id": "HumanEval/157", "generated_code": "import math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 834, "completion_tokens": 485, "duration": 23.0785813331604}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    def first_lexicographical(words):\n        return min(words)\n\n    if not words:\n        return \"\"\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = unique_chars(word)\n        if unique_count > max_unique or (unique_count == max_unique and word < max_word):\n            max_unique = unique_count\n            max_word = word\n\n    return max_word", "prompt_tokens": 786, "completion_tokens": 469, "duration": 22.80861496925354}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1192, "completion_tokens": 505, "duration": 24.324520587921143}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1216, "completion_tokens": 735, "duration": 35.05223989486694}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    if new_s.isalpha():\n        return new_s[::-1]\n    else:\n        return new_s", "prompt_tokens": 745, "completion_tokens": 428, "duration": 20.53154468536377}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 714, "completion_tokens": 413, "duration": 17.16017436981201}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 869, "completion_tokens": 512, "duration": 23.996188402175903}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 960, "completion_tokens": 595, "duration": 37.67598247528076}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = paren_string.replace(' ', '').split('()')\n    return [f'({group})' for group in groups if group]\n\nassert separate_paren_groups('()') == ['()'], \"Test with a single group of empty parentheses should return ['()']\"\nassert separate_paren_groups('( ) ( )') == ['()', '()'], \"Test with multiple non-nested groups should return ['()', '()']\"\nassert separate_paren_groups('(( )) (( )( ))') == ['(())', '(()())'], \"Test with nested groups should return ['(())', '(()())']\"\nassert separate_paren_groups('((( )))') == ['((()))'], \"Test with deeply nested groups should return ['((()))']\"\nassert separate_paren_groups('( ) (( )) ((( )))') == ['()', '(())', '((()))'], \"Test with a mix of nested and non-nested groups should return ['()', '(())', '((()))']\"\nassert separate_paren_groups('') == [], \"Test with empty input should return an empty list\"\nassert separate_paren_groups('( )  (   ( ) )   ') == ['()', '(())'], \"Test with spaces should ignore spaces and return ['()', '(())']\"\nassert separate_paren_groups('     ') == [], \"Test with only spaces should return an empty list\"\nassert separate_paren_groups(' ( ( ) )  ( ) (( ) ( ) ) ') == ['(())', '()', '(()())'], \"Complex mix of nested and non-nested groups with spaces should be correctly separated\"", "prompt_tokens": 3236, "completion_tokens": 2292, "duration": 65.73757290840149}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 617, "completion_tokens": 285, "duration": 12.38954782485962}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 719, "completion_tokens": 352, "duration": 14.582426071166992}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 989, "completion_tokens": 618, "duration": 38.09426188468933}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 956, "completion_tokens": 647, "duration": 26.637678146362305}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depths.append(depth)\n            depth -= 1\n    return depths", "prompt_tokens": 862, "completion_tokens": 527, "duration": 28.180530786514282}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 887, "completion_tokens": 557, "duration": 31.725171327590942}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 856, "completion_tokens": 523, "duration": 28.65883708000183}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 789, "completion_tokens": 472, "duration": 20.948201179504395}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 1093, "completion_tokens": 728, "duration": 30.52207112312317}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 759, "completion_tokens": 492, "duration": 22.142831087112427}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 770, "completion_tokens": 416, "duration": 19.714674472808838}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 723, "completion_tokens": 437, "duration": 20.36337447166443}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 728, "completion_tokens": 469, "duration": 33.52682948112488}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))\n\n\n\n# Test when n is 0, should return '0'\nassert string_sequence(0) == '0'\n\n# Test when n is positive, should return a space-delimited string starting from 0 up to n\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test when n is 1, edge case, should return '0 1'\nassert string_sequence(1) == '0 1'\n\n# Test with a larger positive number, to ensure the function scales well\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\n# Test to ensure it handles negative numbers gracefully, expecting an empty string or specific behavior\n# This depends on the implementation details not given in the docstring, so it might be an area to clarify or define behavior.\n# Assuming an empty string for negative numbers for this example.\nassert string_sequence(-1) == ''", "prompt_tokens": 1004, "completion_tokens": 738, "duration": 26.468409299850464}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 601, "completion_tokens": 299, "duration": 14.895023584365845}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    result = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result", "prompt_tokens": 879, "completion_tokens": 436, "duration": 33.08184218406677}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 780, "completion_tokens": 494, "duration": 21.766794681549072}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    numbers_list = numbers.split()\n    sorted_numbers_list = sorted(numbers_list, key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers_list)", "prompt_tokens": 701, "completion_tokens": 439, "duration": 18.73253107070923}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "prompt_tokens": 1067, "completion_tokens": 651, "duration": 25.902002334594727}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 931, "completion_tokens": 559, "duration": 31.20786690711975}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 705, "completion_tokens": 378, "duration": 18.79988670349121}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 537, "completion_tokens": 287, "duration": 18.839746475219727}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor", "prompt_tokens": 744, "completion_tokens": 515, "duration": 26.502716779708862}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 804, "completion_tokens": 449, "duration": 21.288337469100952}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 712, "completion_tokens": 419, "duration": 19.633458375930786}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 685, "completion_tokens": 426, "duration": 20.33642601966858}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 541, "completion_tokens": 270, "duration": 23.139772176742554}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 1166, "completion_tokens": 651, "duration": 30.977324962615967}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 761, "completion_tokens": 375, "duration": 17.036224126815796}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 636, "completion_tokens": 311, "duration": 21.57993984222412}
{"task_id": "HumanEval/32", "generated_code": "# Improved impl\n\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Implementation of find_zero function\n    largest_coeff = max(xs, key=abs)\n    degree = len(xs) - 1\n    if degree % 2 != 0 or xs.index(largest_coeff) % 2 != 0:\n        return None\n\n    if degree == 1:\n        return -xs[0] / xs[1]\n    \n    if degree == 2:\n        a, b, c = xs\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None\n        else:\n            return (-b + math.sqrt(discriminant)) / (2*a)\n    \n    return None", "prompt_tokens": 1194, "completion_tokens": 731, "duration": 33.92047309875488}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    if not l:\n        return []\n\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    result = l.copy()\n    for i, j in enumerate(sorted_indices):\n        result[j] = l[j]\n    return result", "prompt_tokens": 1044, "completion_tokens": 638, "duration": 30.614250659942627}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 893, "completion_tokens": 581, "duration": 30.410048961639404}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 716, "completion_tokens": 385, "duration": 19.318177223205566}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 867, "completion_tokens": 589, "duration": 29.607176065444946}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1086, "completion_tokens": 721, "duration": 35.07897353172302}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s)) for i in range((len(s) + 2) // 3)]])", "prompt_tokens": 2639, "completion_tokens": 1141, "duration": 44.52175521850586}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    fib_num = 0\n    count = 0\n    while count < n:\n        fib_num += 1\n        if is_prime(fibonacci(fib_num)):\n            count += 1\n\n    return fibonacci(fib_num)\n\n\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89", "prompt_tokens": 930, "completion_tokens": 793, "duration": 34.42826724052429}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 991, "completion_tokens": 557, "duration": 26.240291833877563}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 848, "completion_tokens": 378, "duration": 20.242401123046875}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 633, "completion_tokens": 257, "duration": 15.214059352874756}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1165, "completion_tokens": 708, "duration": 28.792223930358887}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 957, "completion_tokens": 659, "duration": 32.38016366958618}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 645, "completion_tokens": 392, "duration": 18.723081827163696}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 945, "completion_tokens": 491, "duration": 22.05269479751587}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 785, "completion_tokens": 514, "duration": 27.515746593475342}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 702, "completion_tokens": 396, "duration": 19.42147421836853}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 821, "completion_tokens": 453, "duration": 20.951915502548218}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 711, "completion_tokens": 430, "duration": 22.128826379776}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 912, "completion_tokens": 520, "duration": 24.33625555038452}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 914, "completion_tokens": 599, "duration": 30.05804419517517}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 510, "completion_tokens": 242, "duration": 10.486790180206299}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 952, "completion_tokens": 517, "duration": 30.84534764289856}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 617, "completion_tokens": 381, "duration": 20.40736198425293}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    if brackets.count(\"<\") != brackets.count(\">\"):\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 773, "completion_tokens": 487, "duration": 22.814783573150635}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 767, "completion_tokens": 467, "duration": 24.337819576263428}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 933, "completion_tokens": 552, "duration": 30.984457969665527}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        prime_factors = []\n        i = 2\n        while i <= num:\n            if num % i == 0 and is_prime(i):\n                prime_factors.append(i)\n                num //= i\n            else:\n                i += 1\n        return prime_factors\n\n    factors = get_prime_factors(n)\n    return max(factors)", "prompt_tokens": 990, "completion_tokens": 666, "duration": 28.22657585144043}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 716, "completion_tokens": 370, "duration": 20.11362361907959}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 743, "completion_tokens": 444, "duration": 20.44053053855896}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i*coef for i, coef in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]", "prompt_tokens": 776, "completion_tokens": 449, "duration": 16.980847120285034}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 866, "completion_tokens": 450, "duration": 20.536323070526123}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 821, "completion_tokens": 438, "duration": 20.246307373046875}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 783, "completion_tokens": 469, "duration": 22.424614906311035}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 792, "completion_tokens": 409, "duration": 30.945440530776978}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1081, "completion_tokens": 515, "duration": 25.916491985321045}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n            \n    if smallest_even == float('inf'):\n        return []\n    \n    return [smallest_even, smallest_index]", "prompt_tokens": 1364, "completion_tokens": 643, "duration": 29.05773377418518}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n\n    result = -1\n    for key, value in count.items():\n        if key > value and value > result:\n            result = value\n\n    return result", "prompt_tokens": 862, "completion_tokens": 418, "duration": 19.17517638206482}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 870, "completion_tokens": 488, "duration": 20.86122155189514}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 938, "completion_tokens": 603, "duration": 28.506169080734253}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1180, "completion_tokens": 563, "duration": 29.5988609790802}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 1056, "completion_tokens": 613, "duration": 33.262006759643555}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1000, "completion_tokens": 502, "duration": 23.491944074630737}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 774, "completion_tokens": 554, "duration": 27.679457664489746}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x <= 0 or n <= 0 or x == 1:\n        return False\n    return x == n**int(round(math.log(x, n)))\n\nimport math", "prompt_tokens": 1751, "completion_tokens": 1092, "duration": 66.79803562164307}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 1180, "completion_tokens": 606, "duration": 25.72115969657898}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(digit.upper() in primes for digit in num)\n    return count", "prompt_tokens": 1125, "completion_tokens": 393, "duration": 64.97511649131775}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 828, "completion_tokens": 390, "duration": 22.877371311187744}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n\n    return True", "prompt_tokens": 926, "completion_tokens": 557, "duration": 30.09421682357788}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1191, "completion_tokens": 707, "duration": 36.178767681121826}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 723, "completion_tokens": 439, "duration": 20.373228549957275}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)\n    return count", "prompt_tokens": 723, "completion_tokens": 494, "duration": 29.76735782623291}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 754, "completion_tokens": 331, "duration": 20.50446581840515}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)", "prompt_tokens": 675, "completion_tokens": 420, "duration": 19.07204556465149}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word, key=lambda x: (x.isdigit(), x)))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 966, "completion_tokens": 584, "duration": 26.01085615158081}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                res.append((i, j))\n    return sorted(res, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with the provided example to ensure basic functionality\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list, expecting an empty list of coordinates\nassert get_row([], 1) == []\n\n# Test with nested lists where some are empty and others have the target number\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with target number not present in any row, expecting an empty list\nassert get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []\n\n# Test where the target number is present multiple times in a single row\nassert get_row([[1,1,1], [2,2,2], [3,3,3]], 1) == [(0, 2), (0, 1), (0, 0)]\n\n# Test where the target number is the only element in each row\nassert get_row([[1], [1], [1]], 1) == [(0, 0), (1, 0), (2, 0)]\n\n# Test with a larger number as the target to check if function scales\nassert get_row([[100, 200], [300, 400], [500, 600]], 500) == [(2, 0)]\n\n# Test to check if function correctly sorts coordinates by rows in ascending order and columns in descending order\nassert get_row([[1, 2, 3, 1], [4, 1, 1, 5], [1, 1]], 1) == [(0, 3), (0, 0), (1, 2), (1, 1), (2, 1), (2, 0)]\n\n# Test with negative numbers to ensure it handles all types of integers\nassert get_row([[-1, -2, -3], [-4, -1, -6], [-1, -8]], -1) == [(0, 0), (1, 1), (2, 0)]\n\n# Test with a mix of positive and negative numbers including the target\nassert get_row([[1, -1, 2], [2, -2, -1], [-1, 3]], -1) == [(0, 1), (1, 2), (2, 0)]", "prompt_tokens": 1283, "completion_tokens": 1226, "duration": 53.32953643798828}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def is_even_sum(arr):\n        return sum(arr[0], arr[-1]) % 2 == 0\n\n    sorted_arr = sorted(array)\n    return sorted_arr if is_even_sum(array) else sorted_arr[::-1]", "prompt_tokens": 1204, "completion_tokens": 672, "duration": 34.411121129989624}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            encrypted += chr((ord(char) - base + 20) % 26 + base)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 930, "completion_tokens": 601, "duration": 26.85947871208191}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 780, "completion_tokens": 400, "duration": 18.582895755767822}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    return sum(1 for sentence in re.split('[.?!]', S) if sentence.strip().startswith(\"I\"))", "prompt_tokens": 1322, "completion_tokens": 755, "duration": 28.224156141281128}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 827, "completion_tokens": 429, "duration": 19.440093278884888}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.lower() in vowels:\n            encoded += chr(ord(char) + 2).upper()\n        else:\n            encoded += char.swapcase()\n    return encoded", "prompt_tokens": 726, "completion_tokens": 386, "duration": 16.49510431289673}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n\n# Testing with a list that includes the largest prime in the middle and multiple primes\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n\n# Testing with a list that includes a very large prime at the beginning\nassert skjkasdkd([4597,1,0,1,8,2,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n\n# Testing with a list that includes large numbers, but the largest prime is relatively small\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\n\n# Testing with a list that includes only two-digit numbers and the largest prime is at the beginning\nassert skjkasdkd([71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n\n# Testing with a list that includes a prime square (81) which is not a prime itself\nassert skjkasdkd([0,81,12,3,1,21]) == 3\n\n# Testing with a list that includes single-digit numbers only, including the largest prime at the end\nassert skjkasdkd([0,8,1,2,1,7]) == 7\n\n# Testing with an empty list, expecting a default return value (assuming it's 0 for no primes found)\nassert skjkasdkd([]) == 0\n\n# Testing with a list that includes negative numbers and a prime\nassert skjkasdkd([-10, -3, 5, -1, 7]) == 7\n\n# Testing with a list that includes the same prime number multiple times\nassert skjkasdkd([7, 7, 7, 7, 7]) == 7\n\n# Testing with a list that includes only one prime number\nassert skjkasdkd([13]) == 4\n\n# Testing with a list that includes a large prime number with all the same digits\nassert skjkasdkd([0, 1, 2, 1117]) == 10\n\n# Testing with a list that includes a very large number that is not prime and a smaller prime\nassert skjkasdkd([12345678901234567890, 19]) == 10", "prompt_tokens": 1329, "completion_tokens": 1250, "duration": 86.69655323028564}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 1113, "completion_tokens": 640, "duration": 31.005290031433105}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n\nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == []\nassert count_up_to(3) == [2]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\nassert count_up_to(-10) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]", "prompt_tokens": 893, "completion_tokens": 702, "duration": 24.113314628601074}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 860, "completion_tokens": 511, "duration": 28.611051321029663}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 767, "completion_tokens": 495, "duration": 19.817591905593872}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 1025, "completion_tokens": 569, "duration": 24.801217794418335}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 1065, "completion_tokens": 686, "duration": 36.856173038482666}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 872, "completion_tokens": 476, "duration": 21.24471426010132}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            max_even = i\n    return max_even", "prompt_tokens": 920, "completion_tokens": 600, "duration": 42.11681938171387}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(average))[2:]", "prompt_tokens": 2907, "completion_tokens": 1768, "duration": 71.28263735771179}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 861, "completion_tokens": 524, "duration": 20.4310622215271}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [num for num in arr if num in valid_numbers]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 1264, "completion_tokens": 690, "duration": 44.66787600517273}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 1003, "completion_tokens": 655, "duration": 26.04839038848877}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    count_even = 0\n    count_odd = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    \n    return (count_even, count_odd)", "prompt_tokens": 1025, "completion_tokens": 518, "duration": 22.633086442947388}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        if sum(int(digit) for digit in num_str) > 0:\n            count += 1\n    return count", "prompt_tokens": 769, "completion_tokens": 394, "duration": 18.372164011001587}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    n = len(arr)\n\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n\n    return False", "prompt_tokens": 1269, "completion_tokens": 554, "duration": 32.57921814918518}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 1256, "completion_tokens": 721, "duration": 30.084810972213745}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    \n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 844, "completion_tokens": 431, "duration": 17.720167636871338}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join([char for char in s if char not in c])\n    return res, res == res[::-1]", "prompt_tokens": 1205, "completion_tokens": 736, "duration": 33.04400897026062}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(int(d) % 2 == 1 for d in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{s}ng {odd_count} of the {s}nput.\")\n    return result", "prompt_tokens": 1195, "completion_tokens": 740, "duration": 31.986884117126465}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 803, "completion_tokens": 502, "duration": 21.470539093017578}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    def count_moves(well, capacity):\n        return math.ceil(sum(well) / capacity)\n    \n    total_moves = 0\n    for well in grid:\n        total_moves += count_moves(well, capacity)\n    \n    return total_moves", "prompt_tokens": 1370, "completion_tokens": 607, "duration": 36.58998513221741}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1022, "completion_tokens": 527, "duration": 31.937347173690796}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result", "prompt_tokens": 973, "completion_tokens": 496, "duration": 24.7272367477417}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 974, "completion_tokens": 587, "duration": 22.791823625564575}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    return 'Yes'", "prompt_tokens": 981, "completion_tokens": 531, "duration": 31.815849781036377}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1224, "completion_tokens": 625, "duration": 33.50372290611267}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 737, "completion_tokens": 399, "duration": 17.830769538879395}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 954, "completion_tokens": 546, "duration": 31.630473613739014}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1312, "completion_tokens": 741, "duration": 81.39407300949097}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1279, "completion_tokens": 773, "duration": 30.753214836120605}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 903, "completion_tokens": 500, "duration": 25.5039119720459}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n    \n    return lst == sorted(lst)", "prompt_tokens": 1144, "completion_tokens": 527, "duration": 20.905447006225586}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1263, "completion_tokens": 703, "duration": 29.136823177337646}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        product *= 0 if num == 0 else num // abs(num)\n        sum_magnitudes += abs(num)\n\n    return product * sum_magnitudes", "prompt_tokens": 968, "completion_tokens": 614, "duration": 36.66027879714966}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_val = min(min(row) for row in grid)\n    path = [start_val]\n    current = start_val\n    seen = set()\n    seen.add(start_val)\n\n    while len(path) < k:\n        row = -1\n        col = -1\n        for r in range(N):\n            for c in range(N):\n                if grid[r][c] == current:\n                    row = r\n                    col = c\n                    break\n            if row != -1:\n                break\n\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_r, new_c = row + dr, col + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                if new_val not in seen:\n                    path.append(new_val)\n                    seen.add(new_val)\n                    current = new_val\n                    break\n\n    return path", "prompt_tokens": 1704, "completion_tokens": 958, "duration": 38.660080909729004}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n    a, b, c = 1, 1, 3\n    for i in range(1, n + 1):\n        tribonacci.append(c)\n        if i % 2 == 0:\n            c = a + b\n        else:\n            a, b, c = b, c, a + b + c\n    return tribonacci", "prompt_tokens": 1136, "completion_tokens": 588, "duration": 27.129489183425903}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits_product *= digit\n        n //= 10\n    return odd_digits_product", "prompt_tokens": 699, "completion_tokens": 435, "duration": 28.900115966796875}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > closing_brackets:\n            closing_brackets += 1\n    return opening_brackets > 0 and closing_brackets == opening_brackets", "prompt_tokens": 1915, "completion_tokens": 1093, "duration": 37.1296284198761}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x)**2 for x in lst])\n\n# Test with positive integers\nassert sum_squares([1, 2, 3]) == 14\n\n# Test with perfect squares\nassert sum_squares([1, 4, 9]) == 98\n\n# Test with a mix of odd and even numbers\nassert sum_squares([1, 3, 5, 7]) == 84\n\n# Test with floating point numbers\nassert sum_squares([1.4, 4.2, 0]) == 29\n\n# Test with negative and positive floating point numbers\nassert sum_squares([-2.4, 1, 1]) == 6", "prompt_tokens": 2989, "completion_tokens": 1640, "duration": 47.68112540245056}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.rstrip()[-1].isalpha() and txt.rstrip()[-1] not in set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ')", "prompt_tokens": 1546, "completion_tokens": 894, "duration": 27.462234497070312}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 844, "completion_tokens": 507, "duration": 22.31577730178833}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_int = max((num for num in lst if num < 0), default=None)\n    pos_int = min((num for num in lst if num > 0), default=None)\n    return (neg_int, pos_int)", "prompt_tokens": 908, "completion_tokens": 506, "duration": 30.690066814422607}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and ',' in b:\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return a if a > b else b", "prompt_tokens": 1112, "completion_tokens": 720, "duration": 40.48008179664612}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and (n - 8) % 4 == 0", "prompt_tokens": 713, "completion_tokens": 405, "duration": 17.92132568359375}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        return \"Invalid input. n should be greater than 0.\"\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 833, "completion_tokens": 540, "duration": 41.02886366844177}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 821, "completion_tokens": 457, "duration": 21.11682438850403}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    file_name = file_name.strip()\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if ext.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1166, "completion_tokens": 672, "duration": 28.227511167526245}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1025, "completion_tokens": 583, "duration": 23.943647623062134}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 917, "completion_tokens": 534, "duration": 26.93519115447998}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1147, "completion_tokens": 717, "duration": 36.3906033039093}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 1053, "completion_tokens": 671, "duration": 28.7026207447052}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 901, "completion_tokens": 561, "duration": 23.72882080078125}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 954, "completion_tokens": 567, "duration": 24.30346965789795}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n        \n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 999, "completion_tokens": 523, "duration": 19.11154580116272}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1677, "completion_tokens": 885, "duration": 33.6030056476593}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 907, "completion_tokens": 636, "duration": 25.712048292160034}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 884, "completion_tokens": 466, "duration": 31.091020822525024}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1157, "completion_tokens": 554, "duration": 23.17181420326233}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1148, "completion_tokens": 490, "duration": 26.318289041519165}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n\n    return b in a or is_rotation(a, b)", "prompt_tokens": 893, "completion_tokens": 505, "duration": 20.81772541999817}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 642, "completion_tokens": 405, "duration": 24.331382036209106}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 970, "completion_tokens": 771, "duration": 35.090277910232544}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 1004, "completion_tokens": 656, "duration": 27.531135320663452}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -words.index(x) if x in words else float('inf')))", "prompt_tokens": 1816, "completion_tokens": 1018, "duration": 28.449406385421753}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1287, "completion_tokens": 600, "duration": 24.697928190231323}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1375, "completion_tokens": 889, "duration": 83.22195720672607}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 719, "completion_tokens": 399, "duration": 26.54426336288452}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 724, "completion_tokens": 420, "duration": 17.84372043609619}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 892, "completion_tokens": 535, "duration": 23.67732548713684}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 796, "completion_tokens": 431, "duration": 67.01207709312439}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        temp += char\n        if count == 0:\n            result.append(temp)\n            temp = \"\"\n    return result", "prompt_tokens": 848, "completion_tokens": 526, "duration": 22.954641819000244}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 1357, "completion_tokens": 848, "duration": 32.28691530227661}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 840, "completion_tokens": 473, "duration": 25.653125762939453}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 1023, "completion_tokens": 652, "duration": 37.35968732833862}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]", "prompt_tokens": 855, "completion_tokens": 538, "duration": 22.863702535629272}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 910, "completion_tokens": 597, "duration": 24.431952476501465}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 797, "completion_tokens": 467, "duration": 20.180604219436646}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    \n    return (s, p)", "prompt_tokens": 718, "completion_tokens": 385, "duration": 23.53555703163147}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 980, "completion_tokens": 658, "duration": 27.875420808792114}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    return string + string[::-1][1:]\n\n# Testing is_palindrome function\n\n# Test with an empty string, should return True\nassert is_palindrome('') == True\n\n# Test with a single character, should return True\nassert is_palindrome('a') == True\n\n# Test with a simple palindrome, should return True\nassert is_palindrome('madam') == True\n\n# Test with a palindrome that has spaces, should return False\nassert is_palindrome('nurses run') == False\n\n# Test with a non-palindrome, should return False\nassert is_palindrome('hello') == False\n\n# Test with a mixed case palindrome, should return False\nassert is_palindrome('Madam') == False\n\n# Test with a numeric string that is a palindrome, should return True\nassert is_palindrome('12321') == True\n\n# Testing make_palindrome function\n\n# Test with an empty string, should return an empty string\nassert make_palindrome('') == ''\n\n# Test with a single character, should return the same single character\nassert make_palindrome('a') == 'a'\n\n# Test with a string that is already a palindrome, should return the same string\nassert make_palindrome('racecar') == 'racecar'\n\n# Test with a string that needs one character to become a palindrome\nassert make_palindrome('raceca') == 'racecar'\n\n# Test with a longer string that is not a palindrome\nassert make_palindrome('hello') == 'helloleh'\n\n# Test with a string that has spaces, should handle spaces as regular characters\nassert make_palindrome('nurses run') == 'nurses runsen'\n\n# Test with a numeric string, should treat it as a regular string\nassert make_palindrome('123') == '12321'\n\n# Test with a complex string that includes special characters\nassert make_palindrome('a!') == 'a!!a'", "prompt_tokens": 3978, "completion_tokens": 3064, "duration": 92.7066900730133}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 835, "completion_tokens": 563, "duration": 23.59844994544983}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 770, "completion_tokens": 423, "duration": 23.957966804504395}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 700, "completion_tokens": 413, "duration": 23.63405680656433}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string)+1)]\n    return prefixes", "prompt_tokens": 642, "completion_tokens": 381, "duration": 28.91469669342041}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "prompt_tokens": 855, "completion_tokens": 393, "duration": 15.714686632156372}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 618, "completion_tokens": 316, "duration": 14.897338628768921}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations.get(note, 0) for note in notes]", "prompt_tokens": 1135, "completion_tokens": 682, "duration": 37.43975901603699}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return count\n\n    index = 0\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n\n    return count", "prompt_tokens": 757, "completion_tokens": 485, "duration": 20.25010371208191}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test when the input is an empty string, expecting an empty string as output\nassert sort_numbers('') == ''\n\n# Test when the input has only one numeral, expecting the same numeral in the output\nassert sort_numbers('zero') == 'zero'\n\n# Test when the input has all numerals in correct ascending order, expecting the same order\nassert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\n\n# Test when the input has all numerals in reverse order, expecting them sorted in ascending order\nassert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'\n\n# Test when the input has mixed numerals, expecting them sorted\nassert sort_numbers('three one five') == 'one three five'\n\n# Test when the input has repeating numerals, expecting them sorted with repetitions\nassert sort_numbers('five five two two') == 'two two five five'\n\n# Test with numerals having similar starting letters, to check if sorting is not just alphabetical\nassert sort_numbers('four five') == 'four five'\n\n# Test with numerals that are next to each other in the sorted order, to ensure proper adjacent sorting\nassert sort_numbers('two three') == 'two three'\n\n# Test with a long unsorted list of numerals, expecting them all sorted\nassert sort_numbers('four one nine two eight seven') == 'one two four seven eight nine'\n\n# Test to ensure function trims and sorts correctly even with extra spaces between numerals\nassert sort_numbers('one  two   three') == 'one two three'", "prompt_tokens": 739, "completion_tokens": 785, "duration": 26.90666103363037}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result", "prompt_tokens": 978, "completion_tokens": 551, "duration": 24.080695152282715}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers", "prompt_tokens": 992, "completion_tokens": 627, "duration": 35.75074100494385}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 929, "completion_tokens": 401, "duration": 19.904842376708984}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 459, "completion_tokens": 209, "duration": 12.28673529624939}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 611, "completion_tokens": 371, "duration": 18.080705642700195}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test for a prime number\nassert factorize(17) == [17], \"Should return the prime number itself\"\n\n# Test for a number with multiple different prime factors\nassert factorize(100) == [2, 2, 5, 5], \"Should return [2, 2, 5, 5] for 100\"\n\n# Test for a square of a prime number\nassert factorize(49) == [7, 7], \"Should return [7, 7] for 49\"\n\n# Test for a cube of a prime number\nassert factorize(8) == [2, 2, 2], \"Should return [2, 2, 2] for 8\"\n\n# Test for a product of different prime numbers\nassert factorize(30) == [2, 3, 5], \"Should return [2, 3, 5] for 30\"\n\n# Test for a large number\nassert factorize(123456) == [2, 2, 2, 2, 2, 2, 3, 643], \"Should handle large numbers correctly\"\n\n# Test for 1 (edge case)\nassert factorize(1) == [], \"Should return an empty list for 1\"\n\n# Test for a power of a prime number\nassert factorize(16) == [2, 2, 2, 2], \"Should return [2, 2, 2, 2] for 16\"\n\n# Test for a large prime number to check efficiency\n# Assuming 104729 is a known prime for the sake of this test\nassert factorize(104729) == [104729], \"Should return the prime number itself for a large prime number\"\n\n# Test for a number that is a product of two large prime numbers\n# Assuming 104729 and 10007 are known primes for the sake of this test\nassert factorize(104729 * 10007) == [10007, 104729], \"Should handle the product of two large prime numbers correctly\"", "prompt_tokens": 1603, "completion_tokens": 1455, "duration": 46.63700771331787}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 780, "completion_tokens": 459, "duration": 20.85775375366211}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string if char.isalpha()])", "prompt_tokens": 913, "completion_tokens": 534, "duration": 19.35212016105652}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 655, "completion_tokens": 379, "duration": 20.43265128135681}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 881, "completion_tokens": 558, "duration": 34.13612508773804}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 798, "completion_tokens": 414, "duration": 22.114753484725952}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 671, "completion_tokens": 346, "duration": 18.18047523498535}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Implementing the function to find the zero point of the polynomial\n    def f(x):\n        return poly(xs, x)\n\n    # Using scipy.optimize to find the root of the polynomial\n    import scipy.optimize as optimize\n    return optimize.fsolve(f, 0)[0]", "prompt_tokens": 1460, "completion_tokens": 911, "duration": 41.01765441894531}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l[:]\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = [l[i] for i in third_indices]\n    sorted_third_values = sorted(third_values)\n    \n    for i, val in zip(third_indices, sorted_third_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1082, "completion_tokens": 688, "duration": 46.19566082954407}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 807, "completion_tokens": 495, "duration": 25.137453317642212}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 768, "completion_tokens": 437, "duration": 18.50251078605652}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 769, "completion_tokens": 491, "duration": 25.127958297729492}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]\n    return result", "prompt_tokens": 835, "completion_tokens": 473, "duration": 25.498488903045654}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]])", "prompt_tokens": 2191, "completion_tokens": 967, "duration": 42.57525062561035}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 1, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and num == fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 867, "completion_tokens": 641, "duration": 25.679875373840332}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 988, "completion_tokens": 554, "duration": 29.811203002929688}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    if n < 0:\n        raise ValueError(\"Number of cars must be non-negative\")\n    return n // 2", "prompt_tokens": 2035, "completion_tokens": 853, "duration": 28.154849767684937}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 715, "completion_tokens": 339, "duration": 18.75028085708618}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0 and l.count(x) > 1)", "prompt_tokens": 1794, "completion_tokens": 1082, "duration": 36.35561394691467}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 767, "completion_tokens": 462, "duration": 23.64012885093689}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 543, "completion_tokens": 290, "duration": 14.543440341949463}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 1041, "completion_tokens": 627, "duration": 31.96947455406189}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 788, "completion_tokens": 517, "duration": 32.62492513656616}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join(filter(str.isalnum, text.lower()))\n    return text == text[::-1]", "prompt_tokens": 720, "completion_tokens": 427, "duration": 29.76391839981079}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 931, "completion_tokens": 563, "duration": 27.443105459213257}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 1084, "completion_tokens": 604, "duration": 31.08881115913391}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 953, "completion_tokens": 560, "duration": 26.088382482528687}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 806, "completion_tokens": 491, "duration": 21.115675687789917}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 594, "completion_tokens": 326, "duration": 16.299710035324097}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 927, "completion_tokens": 492, "duration": 21.831472396850586}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 529, "completion_tokens": 293, "duration": 14.347130298614502}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 764, "completion_tokens": 463, "duration": 22.440221786499023}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 828, "completion_tokens": 534, "duration": 33.289244174957275}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 847, "completion_tokens": 466, "duration": 20.288329601287842}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n", "prompt_tokens": 957, "completion_tokens": 544, "duration": 21.58160924911499}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 590, "completion_tokens": 235, "duration": 10.726577997207642}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 624, "completion_tokens": 324, "duration": 15.402235269546509}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 867, "completion_tokens": 495, "duration": 32.57309150695801}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 833, "completion_tokens": 424, "duration": 18.16859722137451}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]))", "prompt_tokens": 1369, "completion_tokens": 762, "duration": 24.211342573165894}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 788, "completion_tokens": 487, "duration": 23.30904221534729}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 870, "completion_tokens": 487, "duration": 30.117897033691406}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1123, "completion_tokens": 558, "duration": 24.486013650894165}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_value:\n            smallest_even_value = num\n            smallest_even_index = i\n    \n    if smallest_even_value == float('inf'):\n        return []\n    \n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1243, "completion_tokens": 530, "duration": 19.99502730369568}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    num_freq = {}\n    for num in lst:\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    result = -1\n    for num, freq in num_freq.items():\n        if num > freq and freq >= result:\n            result = num\n    \n    return result", "prompt_tokens": 1091, "completion_tokens": 651, "duration": 28.306984186172485}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 934, "completion_tokens": 552, "duration": 40.76818013191223}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 903, "completion_tokens": 570, "duration": 24.53208613395691}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 965, "completion_tokens": 348, "duration": 15.462189197540283}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 1099, "completion_tokens": 656, "duration": 36.286999225616455}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum_chars_lst1 = sum(len(word) for word in lst1)\n    sum_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if sum_chars_lst1 < sum_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1126, "completion_tokens": 628, "duration": 30.135334253311157}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def prime_factors(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n                while n % i == 0:\n                    n = n // i\n        if n > 1 and is_prime(n):\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 876, "completion_tokens": 688, "duration": 27.941826820373535}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if n < 0:\n        return False\n    return x > 0 and (x == 1 or (x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 1646, "completion_tokens": 1030, "duration": 45.85754036903381}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer()) or a == 0", "prompt_tokens": 730, "completion_tokens": 381, "duration": 16.882508993148804}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1225, "completion_tokens": 493, "duration": 35.93452787399292}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 871, "completion_tokens": 437, "duration": 18.520753145217896}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1013, "completion_tokens": 667, "duration": 28.41034436225891}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1231, "completion_tokens": 741, "duration": 37.37005829811096}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test when the string length is a prime number (5), expecting True\nassert prime_length('Hello') == True\n\n# Test when the string length is not a prime number (6), expecting False\nassert prime_length('orange') == False\n\n# Test when the string length is a prime number (7), expecting True\nassert prime_length('kittens') == True\n\n# Test with an empty string (length 0, not prime), expecting False\nassert prime_length('') == False\n\n# Test with a single character string (length 1, not traditionally considered prime), expecting False\nassert prime_length('a') == False\n\n# Test with a string length of 2 (smallest prime number), expecting True\nassert prime_length('ab') == True\n\n# Test with a longer string where length is a prime number (11), expecting True\nassert prime_length('Hello World') == True\n\n# Test with a very long string where length is not a prime number (20), expecting False\nassert prime_length('abcdefghijklmnopqrst') == False\n\n# Test with a string of length 3 (prime number), expecting True\nassert prime_length('cat') == True\n\n# Test with a palindrome string of prime length (7), expecting True\nassert prime_length('abcdcba') == True\n\n# Test with a palindrome string of non-prime length (8), expecting False\nassert prime_length('aabbccdd') == False\n\n# Edge case: Test with a string that contains spaces and punctuation, prime length (13), expecting True\nassert prime_length('Hello, world!') == True\n\n# Edge case: Test with a string that contains special characters, non-prime length (12), expecting False\nassert prime_length('!@#$%^&*()_+') == False", "prompt_tokens": 718, "completion_tokens": 811, "duration": 25.858400344848633}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 20 * 10 ** (n - 2)", "prompt_tokens": 615, "completion_tokens": 382, "duration": 16.649113178253174}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(map(int, bin(N)[2:]))\n    return bin(binary_sum)[2:]", "prompt_tokens": 960, "completion_tokens": 542, "duration": 24.05156898498535}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 774, "completion_tokens": 520, "duration": 26.59494709968567}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    import re\n    return ' '.join(''.join(sorted(word, key=lambda x: ord(x))) for word in re.findall(r'\\S+|\\s', s))", "prompt_tokens": 1026, "completion_tokens": 628, "duration": 35.00468111038208}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test when the list is empty\nassert get_row([], 1) == []\n\n# Test when sublists are empty\nassert get_row([[], [], []], 1) == []\n\n# Test for the example given in the docstring\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the target number is not in the list\nassert get_row([\n  [2,3,4],\n  [5,6,7]\n], 1) == []\n\n# Test with negative numbers and the target is negative\nassert get_row([\n  [-1, -2, -3],\n  [-4, -5, -1]\n], -1) == [(0, 0), (1, 2)]\n\n# Test with mixed numbers where the target is zero\nassert get_row([\n  [0, 1, 0],\n  [2, 0, 3]\n], 0) == [(0, 2), (0, 0), (1, 1)]\n\n# Test with all elements are the target\nassert get_row([\n  [1, 1],\n  [1]\n], 1) == [(0, 1), (0, 0), (1, 0)]\n\n# Test with a large list and the target is at the end of some rows\nassert get_row([\n  [9, 9, 9, 8],\n  [8, 9, 9, 9],\n  [9, 8, 9, 9]\n], 8) == [(0, 3), (1, 0), (2, 1)]\n\n# Test where the target appears multiple times in a single row\nassert get_row([\n  [2, 3, 3, 3, 2],\n  [3, 2, 2, 2, 3]\n], 2) == [(0, 4), (0, 0), (1, 3), (1, 2), (1, 1)]\n\n# Test with both positive and negative numbers and the target is positive\nassert get_row([\n  [-1, 2, -3],\n  [2, -2, 3, 2]\n], 2) == [(0, 1), (1, 3), (1, 0)]", "prompt_tokens": 1261, "completion_tokens": 1185, "duration": 41.90235686302185}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 1144, "completion_tokens": 609, "duration": 27.497080087661743}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 777, "completion_tokens": 459, "duration": 23.692557334899902}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_list = sorted(set(lst))\n    if len(sorted_list) < 2:\n        return None\n    return sorted_list[1]", "prompt_tokens": 838, "completion_tokens": 445, "duration": 24.188023328781128}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('! I') + S.count('? I')", "prompt_tokens": 815, "completion_tokens": 447, "duration": 23.90759539604187}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 723, "completion_tokens": 324, "duration": 13.345710754394531}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 902, "completion_tokens": 583, "duration": 29.54470133781433}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    largest_prime = max(prime_values)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1183, "completion_tokens": 555, "duration": 25.971097469329834}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    upper_case = all(key.isupper() for key in dict.keys())\n    lower_case = all(key.islower() for key in dict.keys())\n    return upper_case or lower_case", "prompt_tokens": 1172, "completion_tokens": 707, "duration": 33.57839488983154}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 926, "completion_tokens": 539, "duration": 22.363230228424072}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 665, "completion_tokens": 316, "duration": 13.916656970977783}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 674, "completion_tokens": 402, "duration": 17.517449855804443}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 1021, "completion_tokens": 565, "duration": 29.69900131225586}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 913, "completion_tokens": 534, "duration": 21.5815532207489}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence separated by spaces\nassert words_string(\"Hello world\") == [\"Hello\", \"world\"]\n\n# Test with a simple sentence separated by commas\nassert words_string(\"Hello,world\") == [\"Hello\", \"world\"]\n\n# Test with a mix of commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with multiple spaces between words\nassert words_string(\"Hi   my name    is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with multiple commas between words\nassert words_string(\"Hi,,,my,name,,,is,John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a combination of multiple commas and spaces\nassert words_string(\"Hi, , ,my name, , ,is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with leading and trailing spaces\nassert words_string(\"  Hi my name is John  \") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Hi,my,name,is,John,\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string that only contains spaces\nassert words_string(\"     \") == []\n\n# Test with a string that only contains commas\nassert words_string(\",,,,\") == []\n\n# Test with a string that contains a mix of spaces and commas but no words\nassert words_string(\", , , ,\") == []\n\n# Test with a single word (no spaces or commas)\nassert words_string(\"Word\") == [\"Word\"]\n\n# Test with numeric values within the string\nassert words_string(\"1, 2, three, 4\") == [\"1\", \"2\", \"three\", \"4\"]\n\n# Test with special characters in the string\nassert words_string(\"!@, #$%, ^&*\") == [\"!@\", \"#$%\", \"^&*\"]", "prompt_tokens": 860, "completion_tokens": 912, "duration": 37.278788328170776}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 760, "completion_tokens": 443, "duration": 22.322009801864624}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2 + (n + m) % 2\n    return bin(avg)", "prompt_tokens": 886, "completion_tokens": 471, "duration": 22.27422022819519}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 957, "completion_tokens": 600, "duration": 29.06483006477356}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    valid_integers = [x for x in arr if 1 <= x <= 9]\n    sorted_integers = sorted(valid_integers)\n    reversed_integers = sorted_integers[::-1]\n    result = [digit_to_name[num] for num in reversed_integers]\n    \n    return result", "prompt_tokens": 1264, "completion_tokens": 671, "duration": 30.61233353614807}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 866, "completion_tokens": 518, "duration": 22.945499658584595}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_palindromes = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0)\n    return (even_palindromes, odd_palindromes)", "prompt_tokens": 967, "completion_tokens": 468, "duration": 22.959542989730835}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 855, "completion_tokens": 473, "duration": 30.772655487060547}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    return arr.index(sorted_arr[-1]) == len(arr) - 1 and arr.index(sorted_arr[-2]) == len(arr) - 2", "prompt_tokens": 1998, "completion_tokens": 883, "duration": 32.3797402381897}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 1239, "completion_tokens": 713, "duration": 37.74737191200256}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.split():\n        histogram_dict[letter] = histogram_dict.get(letter, 0) + 1\n    \n    max_occurrence = max(histogram_dict.values())\n    result = {key: val for key, val in histogram_dict.items() if val == max_occurrence}\n    \n    return result", "prompt_tokens": 947, "completion_tokens": 540, "duration": 24.725544929504395}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 1158, "completion_tokens": 689, "duration": 34.7280957698822}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), sum(d.isdigit() for d in s), sum(d.isalpha() for d in s), sum(d.isalnum() for d in s)) for s in lst]", "prompt_tokens": 1243, "completion_tokens": 795, "duration": 46.951310873031616}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 856, "completion_tokens": 564, "duration": 35.4530348777771}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum([sum(row) for row in grid])\n    return math.ceil(total_water / capacity)\n\n# Test cases have been provided in the description", "prompt_tokens": 1581, "completion_tokens": 800, "duration": 37.353975772857666}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1012, "completion_tokens": 517, "duration": 26.940780639648438}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in \"aeiou\")\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1714, "completion_tokens": 948, "duration": 36.32286977767944}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word.lower()\n    consonants = [c for c in word if c not in vowels]\n    if len(consonants) < 2:\n        return \"\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in vowels and all(c not in vowels for c in word[i+1:]):\n            return word[i].upper() if word[i].isupper() else word[i]\n    return \"\"\n\n# Test cases were removed as they were part of the initial implementation and are not needed for the solution", "prompt_tokens": 1027, "completion_tokens": 683, "duration": 40.39767146110535}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1 = lst[0]\n    s2 = lst[1]\n    count = s1.count('(') - s1.count(')')\n    count += s2.count('(') - s2.count(')')\n    return 'Yes' if count == 0 else 'No'", "prompt_tokens": 1094, "completion_tokens": 642, "duration": 30.82416272163391}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1161, "completion_tokens": 562, "duration": 26.452727794647217}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 726, "completion_tokens": 388, "duration": 23.537193536758423}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 854, "completion_tokens": 448, "duration": 26.904950618743896}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1266, "completion_tokens": 688, "duration": 30.61246967315674}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(year) != 4:\n        return False\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n\n    return False", "prompt_tokens": 1267, "completion_tokens": 785, "duration": 43.395957469940186}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)", "prompt_tokens": 1832, "completion_tokens": 1186, "duration": 36.255712270736694}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    unique_lst = list(set(lst))\n    return sorted(lst) == unique_lst and all(lst.count(num) == 1 for num in unique_lst)", "prompt_tokens": 1195, "completion_tokens": 554, "duration": 23.751299381256104}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1273, "completion_tokens": 695, "duration": 38.032829999923706}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    prod = 1\n    total_sum = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        total_sum += abs(num)\n    \n    return prod * total_sum", "prompt_tokens": 924, "completion_tokens": 575, "duration": 26.549971103668213}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    def get_neighbors(i, j):\n        neighbors = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n:\n                neighbors.append((x, y))\n        return neighbors\n    \n    def dfs(path, i, j):\n        if len(path) == k:\n            return path\n        \n        path.append(grid[i][j])\n        neighbors = get_neighbors(i, j)\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]])\n        \n        return dfs(path, next_cell[0], next_cell[1])\n    \n    start_cell = min((i, j) for i in range(n) for j in range(n))\n    return dfs([], start_cell[0], start_cell[1])", "prompt_tokens": 1563, "completion_tokens": 792, "duration": 33.44526553153992}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1]\n    if n == 0:\n        return sequence\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence", "prompt_tokens": 1250, "completion_tokens": 687, "duration": 33.35946202278137}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    return product", "prompt_tokens": 616, "completion_tokens": 358, "duration": 16.058685064315796}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening = 0\n    for char in string:\n        if char == '[':\n            opening += 1\n        elif char == ']' and opening > 0:\n            opening -= 1\n    return opening == 0", "prompt_tokens": 1407, "completion_tokens": 782, "duration": 30.377131938934326}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total", "prompt_tokens": 943, "completion_tokens": 479, "duration": 19.806427001953125}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt.strip() == '' or not txt[-1].isalpha() or (len(txt.split()) > 1 and txt.split()[-1] != txt.strip().split()[-1]):\n        return False\n    return True", "prompt_tokens": 869, "completion_tokens": 470, "duration": 38.225963830947876}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 806, "completion_tokens": 469, "duration": 24.03177571296692}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    max_negative = max(negatives) if negatives else None\n    min_positive = min(positives) if positives else None\n    \n    return (max_negative, min_positive)", "prompt_tokens": 960, "completion_tokens": 577, "duration": 35.41347551345825}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    if type(a) == int and type(b) == float:\n        return float(b)\n    if type(a) == float and type(b) == int:\n        return float(a)\n    if type(a) == str and type(b) == str:\n        a_num = float(a.replace(',', '.'))\n        b_num = float(b.replace(',', '.'))\n        if a_num > b_num:\n            return a\n        else:\n            return b\n    if type(a) == str:\n        a_num = float(a.replace(',', '.'))\n        if a_num > b:\n            return a\n        else:\n            return b\n    if type(b) == str:\n        b_num = float(b.replace(',', '.'))\n        if a > b_num:\n            return a\n        else:\n            return b", "prompt_tokens": 1111, "completion_tokens": 872, "duration": 37.88099932670593}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n < 8:\n        return False\n    return True", "prompt_tokens": 703, "completion_tokens": 404, "duration": 30.367030382156372}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 996, "completion_tokens": 701, "duration": 33.30481219291687}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-1] + \"-\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result.replace(\" \", \"_\")", "prompt_tokens": 736, "completion_tokens": 421, "duration": 17.15675187110901}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(ext) != 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1105, "completion_tokens": 585, "duration": 27.472891569137573}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "prompt_tokens": 1208, "completion_tokens": 758, "duration": 91.72568488121033}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 790, "completion_tokens": 407, "duration": 19.173300743103027}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1056, "completion_tokens": 627, "duration": 30.078333854675293}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 835, "completion_tokens": 453, "duration": 20.223352670669556}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count", "prompt_tokens": 785, "completion_tokens": 423, "duration": 20.597264051437378}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1086, "completion_tokens": 673, "duration": 29.142898082733154}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planets[start_idx+1:end_idx+1])", "prompt_tokens": 4609, "completion_tokens": 2915, "duration": 83.73263716697693}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1020, "completion_tokens": 492, "duration": 24.652986764907837}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 843, "completion_tokens": 566, "duration": 28.421193599700928}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1) * 2", "prompt_tokens": 911, "completion_tokens": 497, "duration": 21.507015466690063}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 1093, "completion_tokens": 479, "duration": 34.08724284172058}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1201, "completion_tokens": 533, "duration": 24.74190092086792}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 851, "completion_tokens": 458, "duration": 24.25368356704712}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 757, "completion_tokens": 514, "duration": 23.285844802856445}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 839, "completion_tokens": 639, "duration": 28.58862566947937}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 807, "completion_tokens": 459, "duration": 21.308289527893066}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    def word_key(word):\n        return (-count_unique_chars(word), word)\n\n    return max(words, key=word_key)", "prompt_tokens": 923, "completion_tokens": 548, "duration": 26.99969220161438}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1331, "completion_tokens": 642, "duration": 34.852538108825684}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 1058, "completion_tokens": 576, "duration": 28.826292514801025}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 770, "completion_tokens": 436, "duration": 19.711897134780884}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 736, "completion_tokens": 432, "duration": 21.77681565284729}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n        \n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 1447, "completion_tokens": 917, "duration": 39.313910722732544}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 971, "completion_tokens": 606, "duration": 24.25268530845642}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    \n    return groups", "prompt_tokens": 977, "completion_tokens": 666, "duration": 28.221097469329834}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 680, "completion_tokens": 348, "duration": 22.901143312454224}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 890, "completion_tokens": 523, "duration": 26.927769422531128}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 896, "completion_tokens": 527, "duration": 21.839378595352173}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 792, "completion_tokens": 484, "duration": 24.53876543045044}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        depths.append(current_depth)\n\n    return depths\n\n\n# Test with a single group of nested parentheses\nassert parse_nested_parens('(()())') == [2]\n\n# Test with multiple groups of nested parentheses\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n\n# Test with a single group of non-nested parentheses\nassert parse_nested_parens('()') == [1]\n\n# Test with multiple groups of non-nested parentheses\nassert parse_nested_parens('() () ()') == [1, 1, 1]\n\n# Test with empty string\nassert parse_nested_parens('') == []\n\n# Test with spaces but no parentheses\nassert parse_nested_parens('     ') == []\n\n# Test with a very deep level of nesting\nassert parse_nested_parens('((((((()))))))') == [7]\n\n# Test with a complex combination of nested and non-nested groups\nassert parse_nested_parens('((())) (()) () (((())))') == [3, 2, 1, 4]\n\n# Test with nested parentheses separated by spaces within the same group\nassert parse_nested_parens('(()) (() ())') == [2, 2, 2]\n\n# Test with incorrect parentheses (should handle gracefully if the function is designed to do so)\n# This test depends on the function's error handling and may need to be adjusted or removed based on implementation.\n# assert parse_nested_parens('(()') == [0]", "prompt_tokens": 3384, "completion_tokens": 2562, "duration": 64.71728134155273}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 904, "completion_tokens": 569, "duration": 25.473480224609375}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 755, "completion_tokens": 428, "duration": 20.061538696289062}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 867, "completion_tokens": 553, "duration": 34.40476441383362}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    palindrome_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n\n    prefix = string[:len(string) - len(palindrome_suffix)]\n    return prefix + prefix[::-1] + palindrome_suffix", "prompt_tokens": 925, "completion_tokens": 619, "duration": 33.451112270355225}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 667, "completion_tokens": 385, "duration": 18.067383289337158}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 760, "completion_tokens": 422, "duration": 20.781553506851196}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 668, "completion_tokens": 382, "duration": 19.26767611503601}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 529, "completion_tokens": 270, "duration": 11.514511108398438}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 813, "completion_tokens": 348, "duration": 14.883026838302612}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 763, "completion_tokens": 461, "duration": 22.951867818832397}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    note_beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_beats[note] for note in notes]", "prompt_tokens": 1085, "completion_tokens": 626, "duration": 33.186665534973145}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 909, "completion_tokens": 624, "duration": 32.71028423309326}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 754, "completion_tokens": 462, "duration": 23.2497341632843}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "prompt_tokens": 1032, "completion_tokens": 616, "duration": 28.066150903701782}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1006, "completion_tokens": 634, "duration": 46.73804473876953}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 784, "completion_tokens": 457, "duration": 19.773000717163086}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 467, "completion_tokens": 217, "duration": 12.305720567703247}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 693, "completion_tokens": 453, "duration": 26.138741493225098}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors", "prompt_tokens": 935, "completion_tokens": 573, "duration": 29.577401399612427}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return [x for x in numbers if numbers.count(x) == 1]", "prompt_tokens": 711, "completion_tokens": 387, "duration": 19.43940234184265}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 641, "completion_tokens": 397, "duration": 21.831790685653687}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 641, "completion_tokens": 370, "duration": 25.724509954452515}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 953, "completion_tokens": 635, "duration": 25.34776473045349}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 757, "completion_tokens": 373, "duration": 25.8881676197052}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 603, "completion_tokens": 278, "duration": 14.011969327926636}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Find the largest non-zero coefficient\n    max_coefficient = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    # Find the index of the largest non-zero coefficient\n    max_index = xs.index(max_coefficient)\n    \n    # If the index is odd, return the negative value of the coefficient at that index\n    if max_index % 2 != 0:\n        return -xs[max_index] / xs[max_index - 1]\n    \n    # If the index is even, return the negative value of the coefficient at that index divided by the coefficient at index 1\n    return -xs[max_index] / xs[1]", "prompt_tokens": 1402, "completion_tokens": 932, "duration": 44.72418522834778}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1060, "completion_tokens": 616, "duration": 39.47516465187073}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 753, "completion_tokens": 441, "duration": 31.26077437400818}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 767, "completion_tokens": 436, "duration": 24.594950675964355}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(7, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 753, "completion_tokens": 475, "duration": 20.920288562774658}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l", "prompt_tokens": 866, "completion_tokens": 475, "duration": 21.78844952583313}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 1002, "completion_tokens": 604, "duration": 29.984843492507935}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    i = 2\n    count = 0\n    while True:\n        if is_prime(fibonacci(i)):\n            count += 1\n        if count == n:\n            return fibonacci(i)\n        i += 1", "prompt_tokens": 678, "completion_tokens": 485, "duration": 24.28197431564331}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1142, "completion_tokens": 708, "duration": 35.6916241645813}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 876, "completion_tokens": 406, "duration": 22.96897530555725}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 720, "completion_tokens": 344, "duration": 18.506670713424683}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1005, "completion_tokens": 548, "duration": 26.167168378829956}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 787, "completion_tokens": 479, "duration": 23.018943548202515}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 601, "completion_tokens": 348, "duration": 14.920599460601807}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    fib_values = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_values.append(fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4])\n\n    return fib_values[n]", "prompt_tokens": 934, "completion_tokens": 534, "duration": 23.002590894699097}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 868, "completion_tokens": 593, "duration": 27.860164880752563}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 876, "completion_tokens": 570, "duration": 30.829586267471313}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 964, "completion_tokens": 599, "duration": 28.948070764541626}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 875, "completion_tokens": 596, "duration": 23.574893474578857}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 976, "completion_tokens": 580, "duration": 26.028618097305298}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    return all(num < t for num in l)", "prompt_tokens": 760, "completion_tokens": 441, "duration": 20.25396203994751}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 491, "completion_tokens": 223, "duration": 10.253068685531616}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 812, "completion_tokens": 377, "duration": 21.719056844711304}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 536, "completion_tokens": 300, "duration": 13.875817775726318}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 762, "completion_tokens": 457, "duration": 20.390785455703735}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 925, "completion_tokens": 633, "duration": 29.90798807144165}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 855, "completion_tokens": 473, "duration": 21.326528549194336}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n //= i\n            if n == 1:\n                return i", "prompt_tokens": 694, "completion_tokens": 434, "duration": 18.12829351425171}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 828, "completion_tokens": 482, "duration": 22.965178728103638}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 760, "completion_tokens": 462, "duration": 20.612442016601562}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * c for i, c in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Test with coefficients [3, 1, 2, 4, 5] failed.\"\nassert derivative([1, 2, 3]) == [2, 6], \"Test with coefficients [1, 2, 3] failed.\"\nassert derivative([5]) == [], \"Test with a constant polynomial failed.\"\nassert derivative([3, 2]) == [2], \"Test with a linear polynomial [3, 2] failed.\"\nassert derivative([0, 3, 0, 5]) == [3, 0, 15], \"Test with coefficients [0, 3, 0, 5] failed.\"\nassert derivative([-3, -1, -2, -4]) == [-1, -4, -12], \"Test with negative coefficients failed.\"\nassert derivative([1, 0, 2, 0, 0, 5]) == [0, 4, 0, 0, 20], \"Test with a high degree polynomial failed.\"\nassert derivative([]) == [], \"Test with an empty list failed.\"\nassert derivative([0, 4]) == [4], \"Test with a single term of degree 1 failed.\"\nassert derivative([0.5, 2.5, 3.0]) == [2.5, 6.0], \"Test with floating point coefficients failed.\"", "prompt_tokens": 3028, "completion_tokens": 2144, "duration": 63.62960171699524}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 777, "completion_tokens": 368, "duration": 14.643795490264893}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2086, "completion_tokens": 1246, "duration": 38.49954390525818}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 760, "completion_tokens": 446, "duration": 23.438923358917236}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 978, "completion_tokens": 595, "duration": 29.287680625915527}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1181, "completion_tokens": 620, "duration": 36.680604219436646}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]", "prompt_tokens": 1420, "completion_tokens": 702, "duration": 32.842124462127686}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 1143, "completion_tokens": 678, "duration": 32.47756576538086}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    min_max_list = []\n    lst.sort()\n    while lst:\n        min_max_list.append(lst.pop(0))\n        if lst:\n            min_max_list.append(lst.pop())\n    return min_max_list", "prompt_tokens": 819, "completion_tokens": 438, "duration": 20.594635248184204}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 863, "completion_tokens": 528, "duration": 21.99774718284607}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1112, "completion_tokens": 495, "duration": 32.94653582572937}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return len(arr) - sum([1 for i in range(len(arr)//2) if arr[i] != arr[-i-1]])", "prompt_tokens": 1017, "completion_tokens": 557, "duration": 27.241434574127197}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 998, "completion_tokens": 517, "duration": 25.60830855369568}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3 and is_prime(a // (2*3*5)) and count > 0  # Check if the remaining quotient is also a prime\n\n# Removed incorrect assert statements", "prompt_tokens": 2239, "completion_tokens": 1696, "duration": 51.623658657073975}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "prompt_tokens": 869, "completion_tokens": 436, "duration": 19.153043270111084}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a**(1/3)).is_integer()) or (a < 0 and ((-a)**(1/3)).is_integer())", "prompt_tokens": 746, "completion_tokens": 389, "duration": 18.75338864326477}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1227, "completion_tokens": 504, "duration": 23.98032236099243}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 1089, "completion_tokens": 652, "duration": 39.944669246673584}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 942, "completion_tokens": 592, "duration": 28.655091285705566}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1268, "completion_tokens": 765, "duration": 41.50981283187866}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    if string == '':\n        return False\n    return is_prime(len(string))\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True\n\n# Test with a string of length 7 (prime number)\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7 again (prime number) to check consistency\nassert prime_length('kittens') == True\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False\n\n# Test with an empty string (length 0, not a prime number)\nassert prime_length('') == False\n\n# Test with a string of length 2 (prime number)\nassert prime_length('Hi') == True\n\n# Test with a string of length 11 (prime number)\nassert prime_length('Mathematics') == True\n\n# Test with a string of length 1 (not considered a prime number)\nassert prime_length('A') == False\n\n# Test with a string of length 13 (prime number)\nassert prime_length('abcdefghijklm') == True\n\n# Test with a very long string of non-prime length (e.g., 100 characters)\nassert prime_length('a'*100) == False\n\n# Test with a very long string of prime length (e.g., 101 characters, prime number)\nassert prime_length('a'*101) == True", "prompt_tokens": 627, "completion_tokens": 639, "duration": 23.503897428512573}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 10**(n-1) + 9 * 10**(n-2) - 10\n\nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 19\nassert starts_one_ends(3) == 100 + (9*10)\nassert starts_one_ends(4) == 1000 + (9*10*10) - 100\nassert isinstance(starts_one_ends(1000), int)", "prompt_tokens": 2020, "completion_tokens": 1326, "duration": 42.50947952270508}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 906, "completion_tokens": 483, "duration": 25.509331941604614}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 698, "completion_tokens": 444, "duration": 19.52004599571228}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 903, "completion_tokens": 507, "duration": 26.54821515083313}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with a matrix where the target appears multiple times in different rows\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty matrix\nassert get_row([], 1) == []\n\n# Test with a matrix where only one row is non-empty and contains the target\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with a matrix where the target does not appear\nassert get_row([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 10) == []\n\n# Test with a matrix where the target appears in a single row multiple times\nassert get_row([\n  [3, 3, 3],\n  [1, 2],\n  [4, 5]\n], 3) == [(0, 2), (0, 1), (0, 0)]\n\n# Test with a matrix containing rows of different lengths\nassert get_row([\n  [1, 2, 3],\n  [1, 2, 3, 4, 5],\n  [1]\n], 1) == [(0, 0), (1, 0), (2, 0)]\n\n# Test with a matrix where the target appears as the only element in one row\nassert get_row([\n  [1],\n  [2, 2],\n  [3]\n], 1) == [(0, 0)]\n\n# Test with a matrix where the target is in the last column of a row\nassert get_row([\n  [2, 3, 4],\n  [5, 6, 1]\n], 1) == [(1, 2)]\n\n# Test with a matrix where the target appears in descending order within a row\nassert get_row([\n  [4, 3, 3, 2, 1],\n  [1, 2, 3, 4, 5]\n], 3) == [(0, 2), (0, 1), (1, 2)]\n\n# Test with a matrix and a negative target\nassert get_row([\n  [-1, -2, -3],\n  [-4, -5, -6],\n  [-7, -8, -1]\n], -1) == [(0, 0), (2, 2), (2, 0)]", "prompt_tokens": 5380, "completion_tokens": 3943, "duration": 122.38852715492249}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)\n    return sorted_array", "prompt_tokens": 1092, "completion_tokens": 542, "duration": 26.12686777114868}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 948, "completion_tokens": 653, "duration": 34.18005704879761}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) > 1:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 858, "completion_tokens": 468, "duration": 19.928624391555786}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 733, "completion_tokens": 375, "duration": 17.818081378936768}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 899, "completion_tokens": 500, "duration": 23.908570766448975}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 785, "completion_tokens": 465, "duration": 22.96570920944214}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1317, "completion_tokens": 688, "duration": 34.08231472969055}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    is_lower = all(key.islower() for key in dict.keys())\n    is_upper = all(key.isupper() for key in dict.keys())\n\n    return is_lower or is_upper", "prompt_tokens": 1178, "completion_tokens": 713, "duration": 76.97541427612305}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 888, "completion_tokens": 501, "duration": 26.144352674484253}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 740, "completion_tokens": 391, "duration": 19.581016540527344}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 1183, "completion_tokens": 732, "duration": 29.67474389076233}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value % 1 >= 0.5:\n        return int(value) + 1 if value >= 0 else int(value) - 1\n    else:\n        return int(value)  # changed round(value) to int(value)", "prompt_tokens": 3740, "completion_tokens": 2319, "duration": 73.37446594238281}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "prompt_tokens": 935, "completion_tokens": 557, "duration": 27.12867021560669}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'\\s|,', s)", "prompt_tokens": 841, "completion_tokens": 446, "duration": 20.44399857521057}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = i\n    return largest_even", "prompt_tokens": 763, "completion_tokens": 442, "duration": 24.298624277114868}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 915, "completion_tokens": 494, "duration": 28.284383296966553}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 875, "completion_tokens": 540, "duration": 22.654532432556152}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    sorted_filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_filtered_arr[::-1]\n    \n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 1364, "completion_tokens": 755, "duration": 37.07393455505371}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 835, "completion_tokens": 466, "duration": 19.052738666534424}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1132, "completion_tokens": 630, "duration": 30.31314969062805}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 779, "completion_tokens": 397, "duration": 16.419805765151978}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    min_index = arr.index(min(arr))\n    shift_count = (len(arr) - min_index) % len(arr)\n    return arr[min_index:] + arr[:min_index] == sorted_arr or arr[-shift_count:] + arr[:-shift_count] == sorted_arr", "prompt_tokens": 1134, "completion_tokens": 434, "duration": 16.923911809921265}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    if even_count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1169, "completion_tokens": 648, "duration": 29.595402002334595}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 930, "completion_tokens": 515, "duration": 24.616626977920532}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join(ch for ch in s if ch not in c)\n    return res, res == res[::-1]", "prompt_tokens": 1057, "completion_tokens": 587, "duration": 30.407419681549072}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), i, i, i) for i, s in enumerate(lst)]", "prompt_tokens": 3179, "completion_tokens": 1578, "duration": 58.84051179885864}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 815, "completion_tokens": 515, "duration": 24.23677372932434}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1445, "completion_tokens": 653, "duration": 79.25022912025452}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 967, "completion_tokens": 472, "duration": 24.080912113189697}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 1036, "completion_tokens": 562, "duration": 26.797239065170288}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 1697, "completion_tokens": 1070, "duration": 36.771111488342285}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_valid(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    s1, s2 = lst[0], lst[1]\n    if is_valid(s1 + s2) or is_valid(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1108, "completion_tokens": 696, "duration": 41.97359323501587}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1228, "completion_tokens": 629, "duration": 30.272258043289185}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 881, "completion_tokens": 543, "duration": 27.15256953239441}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100)", "prompt_tokens": 939, "completion_tokens": 531, "duration": 21.62382197380066}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1187, "completion_tokens": 616, "duration": 25.214274644851685}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1226, "completion_tokens": 707, "duration": 27.75575566291809}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 867, "completion_tokens": 464, "duration": 22.554276943206787}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 1106, "completion_tokens": 469, "duration": 23.06741428375244}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 1323, "completion_tokens": 742, "duration": 33.69038009643555}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    total = 0\n    for num in arr:\n        product *= 1 if num == 0 else num // abs(num)\n        total += abs(num)\n\n    return product * total", "prompt_tokens": 939, "completion_tokens": 576, "duration": 23.15733551979065}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        \n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n        neighbors.sort(key=lambda x: (grid[x[0]][x[1]], x))\n        \n        for ni, nj in neighbors:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                new_path = dfs(ni, nj, path + [grid[ni][nj]], visited.copy())\n                if new_path:\n                    return new_path\n        \n        return None\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, [grid[i][j]], set())\n            if path:\n                return path", "prompt_tokens": 1585, "completion_tokens": 821, "duration": 78.47051572799683}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        tribonacci = [3, 2]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 1158, "completion_tokens": 619, "duration": 27.921287298202515}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 608, "completion_tokens": 329, "duration": 16.344691038131714}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 789, "completion_tokens": 396, "duration": 19.429136514663696}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum([int(num)**2 for num in lst])\n    return total", "prompt_tokens": 965, "completion_tokens": 490, "duration": 20.486830234527588}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 823, "completion_tokens": 424, "duration": 24.20465350151062}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 784, "completion_tokens": 446, "duration": 18.705838441848755}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n\n    return (max_neg, min_pos)", "prompt_tokens": 945, "completion_tokens": 570, "duration": 25.770176887512207}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif str(a).replace(\",\", \".\") > str(b).replace(\",\", \".\"):\n        return a\n    else:\n        return b", "prompt_tokens": 1008, "completion_tokens": 592, "duration": 45.23586916923523}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 667, "completion_tokens": 354, "duration": 18.394015789031982}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 852, "completion_tokens": 557, "duration": 25.68165683746338}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 766, "completion_tokens": 457, "duration": 21.41741418838501}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name) == 0:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1109, "completion_tokens": 617, "duration": 26.409493446350098}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0:\n            total += lst[i]**3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1191, "completion_tokens": 736, "duration": 33.460851430892944}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_words(sentence):\n        return [word for word in sentence.split() if is_prime(len(word))]\n\n    return ' '.join(get_words(sentence))", "prompt_tokens": 990, "completion_tokens": 607, "duration": 30.48842191696167}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    frac1 = x.split('/')\n    frac2 = n.split('/')\n    num1, denom1 = int(frac1[0]), int(frac1[1])\n    num2, denom2 = int(frac2[0]), int(frac2[1])\n    \n    return (num1 * num2) % (denom1 * denom2) == 0", "prompt_tokens": 1206, "completion_tokens": 802, "duration": 34.22558927536011}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 1041, "completion_tokens": 434, "duration": 67.93164324760437}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 836, "completion_tokens": 479, "duration": 20.88815975189209}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 446, "duration": 20.872942447662354}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(p for p in planets if start_index < planets.index(p) < end_index)", "prompt_tokens": 1062, "completion_tokens": 587, "duration": 38.48391675949097}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 963, "completion_tokens": 435, "duration": 18.17897629737854}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 753, "completion_tokens": 482, "duration": 22.661125898361206}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Testing with a list of positive odd and even numbers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Testing with a list of negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Testing with a list containing a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Testing with a list containing only zero\nassert double_the_difference([0]) == 0\n\n# Testing with an empty list\nassert double_the_difference([]) == 0\n\n# Testing with a list of positive odd numbers\nassert double_the_difference([5, 7, 9]) == 5**2 + 7**2 + 9**2\n\n# Testing with a list of positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0\n\n# Testing with a list containing non-integer values\nassert double_the_difference([1.5, 2.5, 3.5, 4]) == 0\n\n# Testing with a list containing a mix of integers and non-integer values\nassert double_the_difference([1, 2, 3.5, 4]) == 1**2\n\n# Testing with a list containing a large number of elements\nassert double_the_difference(list(range(1, 101))) == sum(x**2 for x in range(1, 101) if x % 2 != 0)\n\n# Testing with a list of large odd and even numbers\nassert double_the_difference([1001, 2002, 3003, 4004]) == 1001**2 + 3003**2\n\n# Testing with a list containing negative odd numbers\nassert double_the_difference([-3, -5, -7]) == 0\n\n# Testing with a list containing both positive and negative odd numbers\nassert double_the_difference([-3, 5, -7, 9]) == 5**2 + 9**2\n\n# Testing with a list containing both integers and strings\nassert double_the_difference([1, \"2\", 3, \"4\"]) == 1**2 + 3**2", "prompt_tokens": 934, "completion_tokens": 982, "duration": 37.760536909103394}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 1288, "completion_tokens": 681, "duration": 30.091131925582886}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=lambda ext: (strength(ext), extensions.index(ext)))\n    return f'{class_name}.{strongest}'", "prompt_tokens": 1365, "completion_tokens": 701, "duration": 30.10719108581543}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 896, "completion_tokens": 503, "duration": 21.66538667678833}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 543, "duration": 27.95544171333313}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 788, "completion_tokens": 588, "duration": 23.720236778259277}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 737, "completion_tokens": 365, "duration": 16.753437757492065}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -words.index(x)))", "prompt_tokens": 856, "completion_tokens": 473, "duration": 20.512718200683594}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [total_eaten, remaining]", "prompt_tokens": 1209, "completion_tokens": 516, "duration": 24.726078987121582}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1387, "completion_tokens": 901, "duration": 90.91660022735596}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])", "prompt_tokens": 871, "completion_tokens": 505, "duration": 23.829588174819946}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 821, "completion_tokens": 517, "duration": 24.61819577217102}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 855, "completion_tokens": 498, "duration": 26.034574270248413}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1022, "completion_tokens": 657, "duration": 33.69746160507202}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    count = 0\n\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n\n        current_group += char\n\n        if count == 0:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result", "prompt_tokens": 856, "completion_tokens": 538, "duration": 24.1567485332489}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 744, "completion_tokens": 412, "duration": 23.086375951766968}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 814, "completion_tokens": 447, "duration": 19.045643091201782}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return statistics.mean([abs(x - statistics.mean(numbers)) for x in numbers])", "prompt_tokens": 1131, "completion_tokens": 534, "duration": 21.950551509857178}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # remove the last delimiter\n    return result", "prompt_tokens": 938, "completion_tokens": 630, "duration": 32.79809808731079}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 875, "completion_tokens": 544, "duration": 23.323858499526978}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 900, "completion_tokens": 570, "duration": 30.61064577102661}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n        \n    return total_sum, total_product", "prompt_tokens": 743, "completion_tokens": 397, "duration": 17.65069890022278}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 849, "completion_tokens": 528, "duration": 24.32049012184143}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    longest_palindrome_suffix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            longest_palindrome_suffix = string[i:]\n            break\n    return string + longest_palindrome_suffix[::-1]", "prompt_tokens": 952, "completion_tokens": 640, "duration": 31.691114902496338}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            res += '0'\n        else:\n            res += '1'\n    return res", "prompt_tokens": 750, "completion_tokens": 483, "duration": 19.733255624771118}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 776, "completion_tokens": 438, "duration": 27.104009866714478}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(abs(a), abs(b))", "prompt_tokens": 567, "completion_tokens": 275, "duration": 15.559572219848633}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 563, "completion_tokens": 309, "duration": 12.394328832626343}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 761, "completion_tokens": 296, "duration": 13.131625890731812}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 617, "completion_tokens": 311, "duration": 16.37207555770874}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    \n    return [durations[note] for note in notes if note in durations]\n\n# Test cases were here", "prompt_tokens": 1007, "completion_tokens": 563, "duration": 25.117170572280884}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return count\n    \n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    \n    return count", "prompt_tokens": 750, "completion_tokens": 467, "duration": 19.68892216682434}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_mapping[x])\n    \n    return ' '.join(sorted_numbers)", "prompt_tokens": 755, "completion_tokens": 492, "duration": 21.713578701019287}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min([(x, y) for x in numbers for y in numbers if x != y], key=lambda pair: abs(pair[0] - pair[1]))\n    return tuple(sorted(closest_pair))\n\n\n# Test with a list of integers, expect the closest pair in order\nassert find_closest_elements([1, 2, 3, 4, 5, 2]) == (2.0, 2.0)", "prompt_tokens": 3533, "completion_tokens": 2092, "duration": 114.73672723770142}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1017, "completion_tokens": 645, "duration": 31.80677103996277}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 1107, "completion_tokens": 579, "duration": 24.18484401702881}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 463, "completion_tokens": 213, "duration": 9.615009784698486}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    if n == 1:\n        return 1\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 696, "completion_tokens": 457, "duration": 20.757714986801147}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 873, "completion_tokens": 518, "duration": 23.067506313323975}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for i, n in enumerate(numbers) if numbers.index(n) == i]", "prompt_tokens": 2749, "completion_tokens": 1894, "duration": 62.600749015808105}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 658, "completion_tokens": 399, "duration": 19.817074060440063}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 617, "completion_tokens": 346, "duration": 16.761940240859985}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 871, "completion_tokens": 553, "duration": 22.262113332748413}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 751, "completion_tokens": 367, "duration": 16.885558128356934}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 650, "completion_tokens": 320, "duration": 15.750847339630127}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass", "prompt_tokens": 1317, "completion_tokens": 781, "duration": 32.47348642349243}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l.copy()\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    for i in indices_divisible_by_three:\n        if i != 0:\n            new_list[i] = sorted(l[i:i+1])[0]\n    return new_list", "prompt_tokens": 1140, "completion_tokens": 732, "duration": 28.693096160888672}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 756, "completion_tokens": 444, "duration": 21.93669629096985}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 775, "completion_tokens": 444, "duration": 18.997835397720337}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    def count_sevens(num):\n        return str(num).count('7')\n\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_sevens(i)\n\n    return count", "prompt_tokens": 790, "completion_tokens": 522, "duration": 19.461316347122192}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    result = l.copy()\n    result[::2] = even_indices\n    return result", "prompt_tokens": 936, "completion_tokens": 543, "duration": 30.383558750152588}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1049, "completion_tokens": 711, "duration": 32.48418045043945}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 752, "completion_tokens": 555, "duration": 25.178144693374634}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    return any(True for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)) if l[i] + l[j] + l[k] == 0) if len(l) >= 3 else False", "prompt_tokens": 1024, "completion_tokens": 585, "duration": 23.812033653259277}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "prompt_tokens": 897, "completion_tokens": 424, "duration": 16.424305200576782}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 722, "completion_tokens": 346, "duration": 16.207611322402954}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 929, "completion_tokens": 472, "duration": 22.197299480438232}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be between 2 and 9\")\n\n    if x == 0:\n        return \"0\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "prompt_tokens": 779, "completion_tokens": 506, "duration": 20.64644980430603}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 560, "completion_tokens": 307, "duration": 16.93033766746521}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1002, "completion_tokens": 544, "duration": 21.19947576522827}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[(n - 1) // 2] + l[n // 2]) / 2", "prompt_tokens": 811, "completion_tokens": 543, "duration": 22.15299963951111}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 714, "completion_tokens": 408, "duration": 16.647778034210205}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 832, "completion_tokens": 464, "duration": 17.903047800064087}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 766, "completion_tokens": 523, "duration": 18.627125024795532}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 726, "completion_tokens": 330, "duration": 13.915603399276733}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 852, "completion_tokens": 537, "duration": 22.896129369735718}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 457, "completion_tokens": 189, "duration": 10.783039331436157}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 936, "completion_tokens": 501, "duration": 22.14263367652893}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 697, "completion_tokens": 461, "duration": 18.2124240398407}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    open_count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_count += 1\n        elif bracket == \">\":\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0", "prompt_tokens": 669, "completion_tokens": 368, "duration": 110.44800519943237}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 939, "completion_tokens": 650, "duration": 31.638572692871094}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 1072, "completion_tokens": 691, "duration": 32.203498125076294}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\nassert largest_prime_factor(49) == 7\nassert largest_prime_factor(6936) == 17\nassert largest_prime_factor(121) == 11\nassert largest_prime_factor(27) == 3\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(600851475143) == 6857\nassert largest_prime_factor(2*3*5*7*11*13) == 13\nassert largest_prime_factor(16) == 2", "prompt_tokens": 592, "completion_tokens": 516, "duration": 18.99943518638611}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 744, "completion_tokens": 398, "duration": 17.86873197555542}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 771, "completion_tokens": 468, "duration": 29.105213165283203}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * c for i, c in enumerate(xs)][1:]", "prompt_tokens": 1401, "completion_tokens": 826, "duration": 27.04521656036377}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 981, "completion_tokens": 562, "duration": 26.998059034347534}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2050, "completion_tokens": 1206, "duration": 61.95355725288391}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 768, "completion_tokens": 456, "duration": 29.47012734413147}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 800, "completion_tokens": 417, "duration": 19.84040665626526}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 1032, "completion_tokens": 471, "duration": 30.137747764587402}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [smallest_even_value[0], smallest_even_value[1]]", "prompt_tokens": 1293, "completion_tokens": 570, "duration": 33.59409809112549}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_value = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_value = max(max_value, num)\n    return max_value", "prompt_tokens": 1086, "completion_tokens": 625, "duration": 31.446667909622192}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 830, "completion_tokens": 441, "duration": 16.840853691101074}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 947, "completion_tokens": 614, "duration": 88.94342112541199}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1169, "completion_tokens": 552, "duration": 31.44422936439514}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 964, "completion_tokens": 521, "duration": 73.37553095817566}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2", "prompt_tokens": 978, "completion_tokens": 464, "duration": 28.129083395004272}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n\n    return prime_count == 3\n\n# Test with a number that is the multiplication of 3 distinct prime numbers\nassert is_multiply_prime(30) == True\n\n# Test with a number that is not the multiplication of 3 distinct prime numbers but is a prime number\nassert is_multiply_prime(2) == False\n\n# Test with a number that is the multiplication of 2 prime numbers\nassert is_multiply_prime(15) == False\n\n# Test with a number that is the multiplication of a prime number by itself twice (prime^3)\nassert is_multiply_prime(8) == False\n\n# Test with a number that is the multiplication of 3 distinct prime numbers, including the largest prime number less than 10\nassert is_multiply_prime(5*3*7) == True\n\n# Test with the maximum possible input (99), knowing it's not a multiplication of 3 prime numbers\nassert is_multiply_prime(99) == False\n\n# Test with a number that is 1 (not a prime number and not a multiplication of any prime numbers)\nassert is_multiply_prime(1) == False\n\n# Test with a number that is the multiplication of 3 prime numbers, including a repetition\nassert is_multiply_prime(2*2*5) == False\n\n# Test with a number that is a square of a prime number (not a multiplication of 3 distinct primes)\nassert is_multiply_prime(49) == False\n\n# Test with a prime number itself, expecting False as it's not a multiplication of 3 distinct primes\nassert is_multiply_prime(13) == False\n\n# Test with a number that is the multiplication of 3 prime numbers but one of them is repeated\nassert is_multiply_prime(3*3*5) == False\n\n# Edge case: Test with the smallest possible number (0) which is not a prime nor a product of primes\nassert is_multiply_prime(0) == False\n\n# Test with a prime number multiplied by 1 (technically not a multiplication of 3 primes)\nassert is_multiply_prime(2*1*1) == False", "prompt_tokens": 767, "completion_tokens": 955, "duration": 30.728277683258057}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n**int(x ** (1/n))", "prompt_tokens": 907, "completion_tokens": 474, "duration": 22.9893159866333}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a**(1/3)) % 1 == 0", "prompt_tokens": 731, "completion_tokens": 353, "duration": 18.1291983127594}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count", "prompt_tokens": 1254, "completion_tokens": 524, "duration": 114.64573836326599}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 853, "completion_tokens": 416, "duration": 17.733744144439697}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 805, "completion_tokens": 436, "duration": 21.75234580039978}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1296, "completion_tokens": 836, "duration": 31.22737216949463}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 660, "completion_tokens": 430, "duration": 15.965098142623901}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 9\n    return count", "prompt_tokens": 724, "completion_tokens": 491, "duration": 21.40209436416626}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 884, "completion_tokens": 461, "duration": 21.55362820625305}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 760, "completion_tokens": 506, "duration": 21.887322902679443}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 1001, "completion_tokens": 597, "duration": 44.95626473426819}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 1313, "completion_tokens": 683, "duration": 28.87105703353882}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 1160, "completion_tokens": 618, "duration": 69.49049735069275}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result", "prompt_tokens": 705, "completion_tokens": 393, "duration": 16.074350833892822}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 796, "completion_tokens": 400, "duration": 19.297248601913452}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split('[.!?]', S) if sentence.strip().startswith('I'))\n\nimport re", "prompt_tokens": 763, "completion_tokens": 402, "duration": 17.908294916152954}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 885, "completion_tokens": 486, "duration": 23.225355863571167}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 729, "completion_tokens": 412, "duration": 19.630033016204834}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return digit_sum(max_prime)\n    else:\n        return 0", "prompt_tokens": 1410, "completion_tokens": 776, "duration": 32.62720775604248}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 991, "completion_tokens": 534, "duration": 31.91092824935913}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 940, "completion_tokens": 553, "duration": 25.090571880340576}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 838, "completion_tokens": 489, "duration": 23.005462884902954}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 1481, "completion_tokens": 1030, "duration": 33.57406783103943}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number < 0:\n        return int(number - 0.5)\n    else:\n        return int(number + 0.5)", "prompt_tokens": 992, "completion_tokens": 542, "duration": 23.184245109558105}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 984, "completion_tokens": 595, "duration": 27.480955839157104}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]\n\n# Test with basic sentence with spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with numbers and commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a single word\nassert words_string(\"Single\") == [\"Single\"]\n\n# Test with empty string\nassert words_string(\"\") == []\n\n# Test with spaces only\nassert words_string(\"    \") == []\n\n# Test with commas only\nassert words_string(\",,,,\") == []\n\n# Test with a mix of multiple spaces and commas\nassert words_string(\"Hello,  , ,World, , \") == [\"Hello\", \"World\"]\n\n# Test with words containing numbers\nassert words_string(\"Model3, Tesla, S3XY\") == [\"Model3\", \"Tesla\", \"S3XY\"]\n\n# Test with string that starts and ends with a comma\nassert words_string(\",StartMiddleEnd,\") == [\"StartMiddleEnd\"]\n\n# Test with string that starts and ends with space\nassert words_string(\" Start Middle End \") == [\"Start\", \"Middle\", \"End\"]\n\n# Test with a long string of mixed separators\nassert words_string(\"This, is a, very,   long, string,with,spaces,and,commas\") == [\"This\", \"is\", \"a\", \"very\", \"long\", \"string\", \"with\", \"spaces\", \"and\", \"commas\"]\n\n# Test with special characters in words\nassert words_string(\"Special!@#, Characters*&, Here\") == [\"Special!@#\", \"Characters*&\", \"Here\"]", "prompt_tokens": 773, "completion_tokens": 743, "duration": 22.814870834350586}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 864, "completion_tokens": 547, "duration": 25.57788586616516}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 994, "completion_tokens": 571, "duration": 32.51731872558594}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 892, "completion_tokens": 555, "duration": 27.88581895828247}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = sorted_arr[::-1]\n    return [nums[x-1] for x in reversed_arr]", "prompt_tokens": 1255, "completion_tokens": 602, "duration": 31.50516653060913}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            s = sum(range(1, i+1))\n            result.append(s)\n    return result", "prompt_tokens": 821, "completion_tokens": 478, "duration": 20.570836305618286}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_palindromes, odd_palindromes)", "prompt_tokens": 1128, "completion_tokens": 638, "duration": 25.3004207611084}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 829, "completion_tokens": 444, "duration": 20.962778568267822}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return sorted(arr) == arr or sorted(arr) == arr[::-1]", "prompt_tokens": 2096, "completion_tokens": 950, "duration": 34.81887125968933}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "prompt_tokens": 1116, "completion_tokens": 597, "duration": 28.31037139892578}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_occurrence = max(hist.values())\n    return {key: value for key, value in hist.items() if value == max_occurrence}", "prompt_tokens": 1014, "completion_tokens": 595, "duration": 35.75329113006592}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1232, "completion_tokens": 762, "duration": 37.20731782913208}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 != 0 for c in string)}n the str{string}ng {string} of the {string}nput.\" for string in lst]", "prompt_tokens": 1073, "completion_tokens": 602, "duration": 32.23875021934509}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 918, "completion_tokens": 617, "duration": 34.155253171920776}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum([sum(row) for row in grid])\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1457, "completion_tokens": 666, "duration": 29.75688648223877}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1015, "completion_tokens": 520, "duration": 26.496304273605347}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 1013, "completion_tokens": 539, "duration": 22.976346015930176}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word[1:-1]\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in consonants and word[i+1] in vowels and word[i+2] in consonants:\n            return word[i+1]\n    return \"\"", "prompt_tokens": 1020, "completion_tokens": 645, "duration": 36.34249210357666}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1002, "completion_tokens": 588, "duration": 25.9665629863739}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1221, "completion_tokens": 622, "duration": 30.252711534500122}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 805, "completion_tokens": 467, "duration": 24.577503204345703}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 991, "completion_tokens": 585, "duration": 24.54805612564087}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    res = []\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            res.append(n)\n            n = 3 * n + 1\n    res.append(1)\n    return sorted(res)\n\n# Test cases have been provided in the description and should be used for testing", "prompt_tokens": 1172, "completion_tokens": 609, "duration": 28.563885927200317}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1238, "completion_tokens": 724, "duration": 27.138063430786133}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1724, "completion_tokens": 1078, "duration": 44.59579825401306}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 1155, "completion_tokens": 521, "duration": 35.22921133041382}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 1117, "completion_tokens": 578, "duration": 24.511377573013306}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        magnitude_sum += abs(num)\n    return product * magnitude_sum", "prompt_tokens": 840, "completion_tokens": 478, "duration": 21.315616607666016}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    def neighbors(i, j):\n        for r, c in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= r < n and 0 <= c < m:\n                yield r, c\n    \n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        for r, c in neighbors(i, j):\n            if (r, c) not in visited:\n                res = dfs(r, c, visited, path + [grid[r][c]])\n                if res:\n                    return res\n        visited.remove((i, j))\n    \n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, set(), [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1691, "completion_tokens": 932, "duration": 36.74452018737793}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 1160, "completion_tokens": 619, "duration": 34.38070797920227}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 703, "completion_tokens": 402, "duration": 20.397355556488037}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1641, "completion_tokens": 1028, "duration": 37.8629424571991}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total", "prompt_tokens": 837, "completion_tokens": 373, "duration": 16.688915491104126}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and not txt.strip()[-2].isalpha()", "prompt_tokens": 884, "completion_tokens": 458, "duration": 20.05514121055603}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 799, "completion_tokens": 463, "duration": 21.144821882247925}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    max_neg = None if not neg_integers else max(neg_integers)\n    min_pos = None if not pos_integers else min(pos_integers)\n\n    return (max_neg, min_pos)", "prompt_tokens": 954, "completion_tokens": 579, "duration": 27.898717164993286}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == str:\n        a = a.replace(',', '.')\n    if type(b) == str:\n        b = b.replace(',', '.')\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 1009, "completion_tokens": 614, "duration": 27.44986319541931}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 721, "completion_tokens": 408, "duration": 22.232367992401123}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)", "prompt_tokens": 836, "completion_tokens": 499, "duration": 38.22652339935303}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = text.replace(\" \", \"_\")\n    while \"--\" in result:\n        result = result.replace(\"--\", \"-\")\n    result = result.replace(\"_-\", \"-\")\n    result = result.replace(\"-_\", \"-\")\n    return result", "prompt_tokens": 810, "completion_tokens": 471, "duration": 28.212653398513794}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1108, "completion_tokens": 599, "duration": 27.875259399414062}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1122, "completion_tokens": 684, "duration": 33.73125982284546}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 989, "completion_tokens": 606, "duration": 29.830007076263428}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1108, "completion_tokens": 675, "duration": 32.072548627853394}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))", "prompt_tokens": 817, "completion_tokens": 454, "duration": 20.587820529937744}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 768, "completion_tokens": 414, "duration": 17.334300756454468}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 986, "completion_tokens": 564, "duration": 22.1949565410614}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n        \n    return tuple([planet for planet in planets[start_index + 1:end_index]])\n\n# Test with valid planet names in the correct solar system order\nassert bf(\"Mercury\", \"Venus\") == (), \"Test with two adjacent planets should return an empty tuple\"\n\n# Test with valid planet names, but in reverse order\nassert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test with planets in reverse order should return all in-between planets\"\n\n# Test with the same planet name for both arguments\nassert bf(\"Earth\", \"Earth\") == (), \"Test with the same planet for both arguments should return an empty tuple\"\n\n# Test with planet names that are not adjacent and in correct order\nassert bf(\"Mars\", \"Uranus\") == (\"Jupiter\", \"Saturn\"), \"Test with non-adjacent planets should return all in-between planets\"\n\n# Test with invalid planet names\nassert bf(\"Pluto\", \"Earth\") == (), \"Test with an invalid planet name should return an empty tuple\"\n\n# Test with one valid and one invalid planet name\nassert bf(\"Mars\", \"Pluto\") == (), \"Test with one valid and one invalid planet name should return an empty tuple\"\n\n# Test with case sensitivity, assuming function is case sensitive\nassert bf(\"earth\", \"mars\") == (), \"Test with valid planet names in lowercase should return an empty tuple if function is case sensitive\"\n\n# Test with the largest range possible\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test with the largest range should return all planets except the given ones\"\n\n# Test with planets that have no planets between them\nassert bf(\"Saturn\", \"Uranus\") == (), \"Test with two planets that have no planets between them should return an empty tuple\"\n\n# Edge case: Test with empty strings\nassert bf(\"\", \"\") == (), \"Test with empty strings should return an empty tuple\"", "prompt_tokens": 1027, "completion_tokens": 968, "duration": 37.131624698638916}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1628, "completion_tokens": 836, "duration": 32.30556535720825}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 706, "completion_tokens": 429, "duration": 24.41737675666809}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)\n\n# Test when list contains positive odd and even numbers\nassert double_the_difference([1, 3, 2, 4]) == 10, \"Test with mixed odd and even positive numbers\"\n\n# Test when list contains only negative numbers\nassert double_the_difference([-1, -3, -5]) == 0, \"Test with only negative numbers\"\n\n# Test when list contains a mix of negative and positive numbers, including odd\nassert double_the_difference([9, -2, -3, 4]) == 81, \"Test with a mix of negative and positive numbers\"\n\n# Test with an empty list\nassert double_the_difference([]) == 0, \"Test with an empty list\"\n\n# Test with zeroes in the list\nassert double_the_difference([0, 0, 0]) == 0, \"Test with zeroes only\"\n\n# Test with positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0, \"Test with positive even numbers only\"\n\n# Test with positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35, \"Test with positive odd numbers only\"\n\n# Test with non-integer values in the list, should ignore them\nassert double_the_difference([1.5, 2.5, 3.5, 4.5]) == 0, \"Test with non-integer values\"\n\n# Test with a large list of numbers\nassert double_the_difference(range(1, 11)) == 165, \"Test with a range of numbers from 1 to 10\"\n\n# Test with integers and non-integer mixed, including negative and positive\nassert double_the_difference([1, -1, 2.5, 3, 4, -5, 5]) == 35, \"Test with a mix of integers and non-integers, including negative and positive\"", "prompt_tokens": 856, "completion_tokens": 833, "duration": 27.466596364974976}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1265, "completion_tokens": 662, "duration": 31.240024089813232}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1427, "completion_tokens": 758, "duration": 33.4939661026001}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1331, "completion_tokens": 732, "duration": 27.23731780052185}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 702, "completion_tokens": 441, "duration": 18.123189449310303}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return \"Invalid input\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 825, "completion_tokens": 629, "duration": 23.72623610496521}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 854, "completion_tokens": 482, "duration": 27.338290691375732}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 856, "completion_tokens": 524, "duration": 22.58603048324585}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1187, "completion_tokens": 498, "duration": 23.28373098373413}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1242, "completion_tokens": 761, "duration": 33.644447326660156}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 796, "completion_tokens": 462, "duration": 36.81580114364624}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 757, "completion_tokens": 453, "duration": 19.70120596885681}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 761, "completion_tokens": 404, "duration": 22.29230499267578}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 926, "completion_tokens": 561, "duration": 26.30928683280945}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0:\n            result.append(group)\n            group = \"\"\n    return result", "prompt_tokens": 870, "completion_tokens": 548, "duration": 28.94138813018799}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 690, "completion_tokens": 358, "duration": 19.40240240097046}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 910, "completion_tokens": 543, "duration": 22.91739583015442}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean(abs(x - mean) for x in numbers)", "prompt_tokens": 924, "completion_tokens": 552, "duration": 23.883820056915283}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 943, "completion_tokens": 637, "duration": 29.781278133392334}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 1683, "completion_tokens": 1142, "duration": 37.772764682769775}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 959, "completion_tokens": 629, "duration": 36.095401763916016}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum(numbers), product", "prompt_tokens": 761, "completion_tokens": 421, "duration": 21.584244966506958}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n\n    return result", "prompt_tokens": 878, "completion_tokens": 561, "duration": 23.74902081489563}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    palindrome_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            palindrome_suffix = string[:i+1]\n    return string + string[:len(string)-len(palindrome_suffix)][::-1]", "prompt_tokens": 1048, "completion_tokens": 731, "duration": 42.04568672180176}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for i in range(min(len(a), len(b))):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res", "prompt_tokens": 702, "completion_tokens": 424, "duration": 24.13430619239807}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 789, "completion_tokens": 463, "duration": 26.203349113464355}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 640, "completion_tokens": 353, "duration": 18.108685731887817}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 600, "completion_tokens": 336, "duration": 19.328418493270874}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n\n\n\n# Test the base case where n is 0\nassert string_sequence(0) == '0'\n\n# Test a normal case where n is greater than 0\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test the function with a negative number, expecting an empty string because the sequence cannot start\nassert string_sequence(-1) == ''\n\n# Test with a larger value of n to ensure the function scales correctly\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\n# Test with a prime number to see if the function correctly handles non-even numbers\nassert string_sequence(7) == '0 1 2 3 4 5 6 7'\n\n# Test the function with a very small positive number\nassert string_sequence(1) == '0 1'\n\n# Test to ensure spaces are correctly placed (only between numbers, not at the start or end)\n# This will indirectly test for off-by-one errors in string construction\nassert not string_sequence(3).startswith(' ') and not string_sequence(3).endswith(' ')\n\n# Edge case: Test with the maximum reasonable input value to ensure the function can handle it without error\n# This test is commented out because it's heavily dependent on the system's ability to handle large strings\n# assert string_sequence(10000) != ''", "prompt_tokens": 620, "completion_tokens": 623, "duration": 21.381546020507812}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 645, "completion_tokens": 339, "duration": 15.965794563293457}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_values.get(note.replace(\"|\", \"\"), 0) for note in notes]", "prompt_tokens": 2574, "completion_tokens": 1586, "duration": 48.4579975605011}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 737, "completion_tokens": 455, "duration": 26.627963304519653}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 717, "completion_tokens": 432, "duration": 22.220407485961914}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min(((x, y) for x in numbers for y in numbers if x != y), key=lambda pair: abs(pair[0] - pair[1]))\n    return tuple(sorted(closest_pair))\n\n\n# Test cases\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\nassert find_closest_elements([-5.0, -1.0, -4.0, -3.2, -3.1]) == (-3.2, -3.1)\nassert find_closest_elements([-2.0, 0.0, 1.0, 2.0, 1.1]) == (1.0, 1.1)\nassert find_closest_elements([0.0001, 0.0002, 0.0003]) == (0.0001, 0.0002)\nassert find_closest_elements([10000.0, 20000.0, 30000.0, 10001.0]) == (10000.0, 10001.0)\nassert find_closest_elements([1.0, 2.0]) == (1.0, 2.0)\nassert find_closest_elements([1.0, 2.0, 3.0]) == (2.0, 3.0)\nassert find_closest_elements([2.0, 2.0, 3.0]) == (2.0, 2.0)\nassert find_closest_elements([5.0, 4.0, 3.0, 2.1, 2.0]) == (2.0, 2.1)", "prompt_tokens": 4409, "completion_tokens": 3322, "duration": 87.11935305595398}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1048, "completion_tokens": 677, "duration": 81.06132793426514}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 712, "completion_tokens": 385, "duration": 20.540987968444824}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 509, "completion_tokens": 259, "duration": 13.417659997940063}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 709, "completion_tokens": 469, "duration": 20.91787624359131}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors\n\n# Test case with a prime number, expecting a list with the number itself\nassert factorize(7) == [7], \"Failed on prime number\"\n\n# Test case with a composite number having multiple same prime factors\nassert factorize(8) == [2, 2, 2], \"Failed on composite number with same prime factors\"\n\n# Test case with a composite number having different prime factors\nassert factorize(70) == [2, 5, 7], \"Failed on composite number with different prime factors\"\n\n# Test case with 1, expecting an empty list as 1 does not have prime factors\nassert factorize(1) == [], \"Failed on 1\"\n\n# Test case with 0, also expecting an empty list as 0 does not have prime factors\nassert factorize(0) == [], \"Failed on 0\"\n\n# Test case with a large prime number to test efficiency\nassert factorize(997) == [997], \"Failed on large prime number\"\n\n# Test case with a square of a prime number, expecting the prime number twice\nassert factorize(49) == [7, 7], \"Failed on square of a prime number\"\n\n# Test case with a product of first n primes, to test a mix of different factors\nassert factorize(2*3*5*7*11) == [2, 3, 5, 7, 11], \"Failed on product of first n primes\"\n\n# Test case with a power of a prime number, expecting repeated prime\nassert factorize(16) == [2, 2, 2, 2], \"Failed on power of a prime number\"\n\n# Test case with a large number having multiple factors, to test efficiency and correctness\nassert factorize(2*2*3*3*5*7*11*13) == [2, 2, 3, 3, 5, 7, 11, 13], \"Failed on large number with multiple factors\"\n\n# Test case with a negative number, although not specified, assuming it should return an empty list or handle it gracefully\nassert factorize(-5) == [], \"Failed on negative number\"", "prompt_tokens": 894, "completion_tokens": 1001, "duration": 34.6814444065094}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 734, "completion_tokens": 413, "duration": 28.348319053649902}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])", "prompt_tokens": 589, "completion_tokens": 342, "duration": 21.964797019958496}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 574, "completion_tokens": 298, "duration": 13.171024322509766}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 890, "completion_tokens": 558, "duration": 23.977417469024658}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 722, "completion_tokens": 338, "duration": 16.09568738937378}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 638, "completion_tokens": 313, "duration": 13.137338161468506}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1145, "completion_tokens": 606, "duration": 26.74485182762146}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in third_indices:\n        result[i:i+3] = sorted(l[i:i+3])\n    return result", "prompt_tokens": 1061, "completion_tokens": 643, "duration": 30.09127712249756}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 834, "completion_tokens": 522, "duration": 23.672082662582397}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 798, "completion_tokens": 467, "duration": 25.622069835662842}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 913, "completion_tokens": 635, "duration": 31.55270266532898}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 982, "completion_tokens": 587, "duration": 27.362439155578613}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1142, "completion_tokens": 804, "duration": 75.9723949432373}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num == fibonacci(count):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 784, "completion_tokens": 593, "duration": 22.222196340560913}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1110, "completion_tokens": 676, "duration": 32.528958320617676}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road\nassert car_race_collision(0) == 0, \"No cars should result in no collisions\"\n\n# Test with a single pair of cars\nassert car_race_collision(1) == 1, \"One car from each direction should result in one collision\"\n\n# Test with multiple pairs of cars\nassert car_race_collision(5) == 5, \"Five cars from each direction should result in five collisions\"\n\n# Test with a large number of cars\nassert car_race_collision(100) == 100, \"100 cars from each direction should result in 100 collisions\"\n\n# Test with a negative number of cars to check for error handling\ntry:\n    car_race_collision(-1)\n    assert False, \"Negative number of cars should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for negative number of cars\"\n\n# Test with a non-integer number of cars to check type enforcement\ntry:\n    car_race_collision(3.5)\n    assert False, \"Decimal number of cars should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for non-integer number of cars\"\n\n# Test with a very small decimal (close to zero but not zero) to check for rounding issues\ntry:\n    car_race_collision(0.0001)\n    assert False, \"Decimal number very close to zero should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for non-integer number of cars\"\n\n# Edge case: Test with the maximum integer value to ensure the function can handle large inputs\nimport sys\ntry:\n    car_race_collision(sys.maxsize)\n    assert True, \"The function should be able to handle the maximum integer value\"\nexcept Exception:\n    assert False, \"The function should not fail with the maximum integer value\"", "prompt_tokens": 922, "completion_tokens": 840, "duration": 32.099987506866455}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 723, "completion_tokens": 347, "duration": 22.306276321411133}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 936, "completion_tokens": 479, "duration": 21.635039806365967}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 1:\n        return 'Error'\n    \n    if x == 0:\n        return '0'\n    \n    if x < 0:\n        return '-' + change_base(-x, base)\n    \n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 899, "completion_tokens": 624, "duration": 29.65642023086548}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 530, "completion_tokens": 277, "duration": 17.18039870262146}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 964, "completion_tokens": 505, "duration": 26.152787923812866}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 801, "completion_tokens": 530, "duration": 27.547635793685913}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 627, "completion_tokens": 321, "duration": 17.362284183502197}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 878, "completion_tokens": 510, "duration": 30.920225143432617}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 760, "completion_tokens": 440, "duration": 24.669681310653687}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 965, "completion_tokens": 572, "duration": 26.806203603744507}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 697, "completion_tokens": 382, "duration": 21.26419162750244}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 487, "completion_tokens": 219, "duration": 11.344320058822632}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 948, "completion_tokens": 513, "duration": 23.867107629776}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 496, "completion_tokens": 260, "duration": 12.099146366119385}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 688, "completion_tokens": 383, "duration": 16.83786964416504}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 904, "completion_tokens": 617, "duration": 31.06281590461731}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 864, "completion_tokens": 483, "duration": 22.613767385482788}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test with a composite number that has small prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to check if function handles even numbers correctly\nassert largest_prime_factor(2048) == 2\n\n# Test with a number having a large prime factor\nassert largest_prime_factor(600851475143) == 6857\n\n# Test with a composite number that is a product of two primes\nassert largest_prime_factor(15) == 5\n\n# Test with a composite number that is a square of a prime\nassert largest_prime_factor(49) == 7\n\n# Test with a number that is a product of primes where one prime is repeated\nassert largest_prime_factor(90) == 5  # 90 = 2 * 3^2 * 5\n\n# Test with a number having three different prime factors\nassert largest_prime_factor(210) == 7  # 210 = 2 * 3 * 5 * 7\n\n# Edge case: Test with the smallest composite number\nassert largest_prime_factor(4) == 2  # 4 = 2^2\n\n# Test with a number having a prime factor in the hundreds\nassert largest_prime_factor(9973*2) == 9973\n\n# Test with a composite number that is a product of the first prime and another prime\nassert largest_prime_factor(2*13) == 13", "prompt_tokens": 615, "completion_tokens": 654, "duration": 24.540178060531616}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 682, "completion_tokens": 336, "duration": 15.849584341049194}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 688, "completion_tokens": 388, "duration": 23.78165030479431}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases (unit tests removed)\nassert derivative([]) == []\nassert derivative([5]) == []\nassert derivative([3, 2]) == [2]\nassert derivative([1, 2, 3]) == [2, 6]\nassert derivative([4, 3, 2, 1]) == [3, 4, 3]\nassert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20]\nassert derivative([-4, -3, -2, -1]) == [-3, -4, -3]\nassert derivative([0, 5, 0, 3]) == [5, 0, 9]\nassert derivative([600, 500, 400, 300, 200, 100]) == [500, 800, 900, 800, 500]", "prompt_tokens": 1007, "completion_tokens": 826, "duration": 46.2672381401062}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 862, "completion_tokens": 447, "duration": 23.139294385910034}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiou\"\n    return sum(1 for char in s.lower() if char in vowels or (char == 'y' and s.lower().index(char) == len(s) - 1))", "prompt_tokens": 1781, "completion_tokens": 1179, "duration": 37.73312330245972}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 748, "completion_tokens": 450, "duration": 19.414168119430542}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 800, "completion_tokens": 417, "duration": 18.877381324768066}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1031, "completion_tokens": 467, "duration": 20.0034077167511}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n            \n    if smallest_even == float('inf'):\n        return []\n    \n    return [smallest_even, smallest_index]", "prompt_tokens": 1400, "completion_tokens": 679, "duration": 31.14590835571289}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    result = -1\n    for num, freq in freq_dict.items():\n        if num == freq and num > result:\n            result = num\n    return result", "prompt_tokens": 912, "completion_tokens": 472, "duration": 23.746915578842163}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    min_max_lst = []\n    lst.sort()\n    while lst:\n        min_max_lst.append(lst.pop(0))\n        if lst:\n            min_max_lst.append(lst.pop())\n    return min_max_lst", "prompt_tokens": 817, "completion_tokens": 436, "duration": 19.08262538909912}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 864, "completion_tokens": 531, "duration": 26.83926510810852}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1208, "completion_tokens": 591, "duration": 26.14958906173706}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 937, "completion_tokens": 494, "duration": 20.95890235900879}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1040, "completion_tokens": 559, "duration": 26.74353265762329}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count > 3:\n                return False\n    return count == 3 and count > 0", "prompt_tokens": 1849, "completion_tokens": 1459, "duration": 50.579524517059326}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and (n == 1 or (x > 0 and x == n**int(x**0.5)))", "prompt_tokens": 2133, "completion_tokens": 1218, "duration": 41.92938780784607}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "prompt_tokens": 996, "completion_tokens": 419, "duration": 21.758589029312134}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in primes)", "prompt_tokens": 1103, "completion_tokens": 366, "duration": 18.27492928504944}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 847, "completion_tokens": 409, "duration": 21.190911054611206}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 925, "completion_tokens": 575, "duration": 24.296309232711792}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('E')\n    return result", "prompt_tokens": 1238, "completion_tokens": 725, "duration": 27.941752195358276}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 621, "completion_tokens": 391, "duration": 15.120462894439697}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        return 0\n    return 2 * 9 * 10**(n - 1)", "prompt_tokens": 1647, "completion_tokens": 1141, "duration": 39.26984095573425}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 928, "completion_tokens": 505, "duration": 22.917145490646362}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 715, "completion_tokens": 461, "duration": 20.821521282196045}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 993, "completion_tokens": 589, "duration": 29.168476104736328}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 2298, "completion_tokens": 1312, "duration": 43.702048540115356}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1120, "completion_tokens": 584, "duration": 37.80146861076355}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                base = ord('A')\n            else:\n                base = ord('a')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 939, "completion_tokens": 621, "duration": 27.50138020515442}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "prompt_tokens": 815, "completion_tokens": 422, "duration": 20.234784364700317}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith(\"I\"))\n\nimport re", "prompt_tokens": 828, "completion_tokens": 468, "duration": 21.595353603363037}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 980, "completion_tokens": 565, "duration": 32.84388470649719}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2).upper()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 752, "completion_tokens": 411, "duration": 18.28350257873535}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst))\n    return digit_sum(largest_prime)", "prompt_tokens": 1435, "completion_tokens": 781, "duration": 37.43668746948242}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 966, "completion_tokens": 509, "duration": 23.395934343338013}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 889, "completion_tokens": 507, "duration": 24.871877193450928}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 860, "completion_tokens": 511, "duration": 24.054492473602295}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 646, "completion_tokens": 374, "duration": 17.668079137802124}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 968, "completion_tokens": 518, "duration": 23.76821279525757}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 1070, "completion_tokens": 681, "duration": 31.750860452651978}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence with spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a simple sentence with commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a mix of spaces and commas\nassert words_string(\"Hello, world, this is, a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with a string that has leading and trailing spaces\nassert words_string(\"  Hello, world  \") == [\"Hello\", \"world\"]\n\n# Test with a string that has multiple spaces between words\nassert words_string(\"Hi,  my  name  is  John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a string that has only commas, no spaces\nassert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string that has only spaces\nassert words_string(\"     \") == []\n\n# Test with a string that has only commas\nassert words_string(\",,,,,\") == []\n\n# Test with a single word, no spaces or commas\nassert words_string(\"Word\") == [\"Word\"]\n\n# Test with special characters in the string\nassert words_string(\"Hello, #$%, world\") == [\"Hello\", \"#$%\", \"world\"]\n\n# Test with numbers in the string\nassert words_string(\"1, 2, three, four, 5\") == [\"1\", \"2\", \"three\", \"four\", \"5\"]\n\n# Test with a string that contains a comma at the end\nassert words_string(\"Hello, world,\") == [\"Hello\", \"world\"]\n\n# Test with a string that contains a space at the end\nassert words_string(\"Hello world \") == [\"Hello\", \"world\"]", "prompt_tokens": 859, "completion_tokens": 910, "duration": 45.85857367515564}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y+1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y+1)) else -1", "prompt_tokens": 932, "completion_tokens": 618, "duration": 28.29075336456299}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 963, "completion_tokens": 539, "duration": 34.675267696380615}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 829, "completion_tokens": 458, "duration": 23.779731273651123}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    result = [digits[num-1] for num in reversed(filtered_arr)]\n    return result", "prompt_tokens": 1234, "completion_tokens": 579, "duration": 26.474883794784546}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 873, "completion_tokens": 516, "duration": 24.3999605178833}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1261, "completion_tokens": 759, "duration": 34.53989005088806}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 750, "completion_tokens": 367, "duration": 19.91395902633667}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return arr == sorted_arr or arr == sorted_arr[-1:] + sorted_arr[:-1]", "prompt_tokens": 1237, "completion_tokens": 501, "duration": 25.89224624633789}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 1271, "completion_tokens": 745, "duration": 32.44565510749817}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    for letter in test.split():\n        result[letter] = result.get(letter, 0) + 1\n\n    max_count = max(result.values())\n    return {key: value for key, value in result.items() if value == max_count}", "prompt_tokens": 986, "completion_tokens": 565, "duration": 27.493995428085327}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 950, "completion_tokens": 480, "duration": 20.097924947738647}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(int(d) % 2 != 0 for d in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result", "prompt_tokens": 1106, "completion_tokens": 655, "duration": 31.31389832496643}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum", "prompt_tokens": 861, "completion_tokens": 561, "duration": 23.493083238601685}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n\n    def count_buckets(row, capacity):\n        filled = sum(row)\n        return math.ceil(filled / capacity)\n\n    total_buckets = sum([count_buckets(row, bucket_capacity) for row in grid])\n    return total_buckets", "prompt_tokens": 1510, "completion_tokens": 743, "duration": 41.04100704193115}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 1140, "completion_tokens": 660, "duration": 35.9702582359314}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1016, "completion_tokens": 540, "duration": 25.182828426361084}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 929, "completion_tokens": 517, "duration": 22.045380353927612}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return 'No'\n        return 'Yes' if count == 0 else 'No'\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) == 'Yes' or is_balanced(lst[1] + lst[0]) == 'Yes' else 'No'", "prompt_tokens": 1075, "completion_tokens": 677, "duration": 40.61190390586853}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1266, "completion_tokens": 667, "duration": 26.958543062210083}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 743, "completion_tokens": 407, "duration": 27.43593955039978}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 1023, "completion_tokens": 615, "duration": 27.911501169204712}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1123, "completion_tokens": 538, "duration": 21.94637894630432}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):  # Leap year\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1190, "completion_tokens": 690, "duration": 24.329713106155396}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1073, "completion_tokens": 670, "duration": 28.138214588165283}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1181, "completion_tokens": 566, "duration": 27.304826736450195}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1211, "completion_tokens": 637, "duration": 31.998758792877197}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs_product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        signs_product *= 1 if num > 0 else -1\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * signs_product", "prompt_tokens": 786, "completion_tokens": 445, "duration": 20.968872547149658}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, k, path):\n        if k == 0:\n            return path\n        if 0 <= i < len(grid) and 0 <= j < len(grid[0]):\n            curr_val = grid[i][j]\n            grid[i][j] = None\n            for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] is not None:\n                    res = dfs(x, y, k-1, path + [curr_val])\n                    if res:\n                        return res\n            grid[i][j] = curr_val\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, k-1, [])\n            if res:\n                return res\n    return None", "prompt_tokens": 3037, "completion_tokens": 1790, "duration": 51.459322452545166}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i // 2] + 1)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "prompt_tokens": 1157, "completion_tokens": 628, "duration": 26.64130449295044}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_digits_product *= digit\n        n //= 10\n    return odd_digits_product", "prompt_tokens": 616, "completion_tokens": 352, "duration": 14.255901098251343}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) < len(string) // 2", "prompt_tokens": 809, "completion_tokens": 424, "duration": 24.924704551696777}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) ** 2)\n    return total", "prompt_tokens": 954, "completion_tokens": 493, "duration": 22.683882236480713}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == \" \" if len(txt) > 1 else txt.isalpha()\n\n# Test with a basic example where the last character is a letter but part of a word\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\n\n# Test with a basic example where the last character is a letter and not part of a word\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\n\n# Test with a space at the end of the string\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\n\n# Test with an empty string\nassert check_if_last_char_is_a_letter(\"\") == False\n\n# Test with a string where the last character is a digit\nassert check_if_last_char_is_a_letter(\"apple pie 2\") == False\n\n# Test with a string where the last character is a punctuation mark\nassert check_if_last_char_is_a_letter(\"apple pie!\") == False\n\n# Test with a string that has only one character and it is a letter\nassert check_if_last_char_is_a_letter(\"a\") == True\n\n# Test with a string that has only one character and it is not a letter\nassert check_if_last_char_is_a_letter(\"1\") == False\n\n# Test with a string that has spaces before the last letter\nassert check_if_last_char_is_a_letter(\"apple pi   e\") == True\n\n# Test with a mixed case letter at the end\nassert check_if_last_char_is_a_letter(\"apple Pi E\") == True\n\n# Test with a string where the last character is a letter followed by a newline character\nassert check_if_last_char_is_a_letter(\"apple pi e\\n\") == False\n\n# Test with a string where the last character is a letter followed by a tab character\nassert check_if_last_char_is_a_letter(\"apple pi e\\t\") == False\n\n# Test with a string that has multiple words and the last character of the last word is not a letter\nassert check_if_last_char_is_a_letter(\"This is a test!\") == False\n\n# Test with a string that has multiple words and the last character of the last word is a letter but not separated by a space\nassert check_if_last_char_is_a_letter(\"This is a test\") == False\n\n# Test with a string that includes alphanumeric characters but ends with a letter not part of a word\nassert check_if_last_char_is_a_letter(\"This is a test2 e\") == True", "prompt_tokens": 952, "completion_tokens": 1019, "duration": 38.85738563537598}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 843, "completion_tokens": 507, "duration": 24.07005286216736}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg = [num for num in lst if num < 0]\n    pos = [num for num in lst if num > 0]\n    \n    largest_neg = None if not neg else max(neg)\n    smallest_pos = None if not pos else min(pos)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 964, "completion_tokens": 580, "duration": 34.14905405044556}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if str(a).replace(\",\", \".\") > str(b).replace(\",\", \".\"):\n            return a\n        elif str(a).replace(\",\", \".\") < str(b).replace(\",\", \".\"):\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None", "prompt_tokens": 1091, "completion_tokens": 729, "duration": 28.30526041984558}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n > 0 and n % 8 == 0", "prompt_tokens": 1211, "completion_tokens": 737, "duration": 35.99731993675232}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)", "prompt_tokens": 883, "completion_tokens": 545, "duration": 24.399598598480225}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 838, "completion_tokens": 474, "duration": 32.166500091552734}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    name, ext = file_name.split(\".\")\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 993, "completion_tokens": 479, "duration": 27.689156770706177}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1047, "completion_tokens": 601, "duration": 26.047624111175537}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n\n    return prime_length_words(sentence)", "prompt_tokens": 808, "completion_tokens": 439, "duration": 17.708272218704224}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1 and result.numerator % result.denominator == 0", "prompt_tokens": 1028, "completion_tokens": 581, "duration": 32.764989137649536}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 979, "completion_tokens": 580, "duration": 27.315394401550293}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 979, "completion_tokens": 622, "duration": 30.94466996192932}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 925, "completion_tokens": 509, "duration": 23.632822513580322}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index == end_index:\n        return ()\n    \n    if start_index < end_index:\n        return tuple(planets[start_index + 1:end_index])\n    else:\n        return tuple(planets[end_index + 1:start_index][::-1])\n\n# Test cases\nassert bf(\"Earth\", \"Mars\") == (\"Venus\",)\nassert bf(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Earth\") == ()\nassert bf(\"Pluto\", \"Mars\") == ()\nassert bf(\"Pluto\", \"Vulcan\") == ()\nassert bf(\"earth\", \"mars\") == ()\nassert bf(\"Earth\", \"mArS\") == ()\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Neptune\", \"Mercury\") == ()\nassert bf(\"Saturn\", \"Jupiter\") == ()", "prompt_tokens": 3505, "completion_tokens": 1990, "duration": 56.85784435272217}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    def is_even_length(s):\n        return len(s) % 2 == 0\n\n    def custom_sort(s):\n        return (len(s), s)\n\n    return sorted(filter(is_even_length, lst), key=custom_sort)", "prompt_tokens": 953, "completion_tokens": 453, "duration": 22.928253173828125}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 785, "completion_tokens": 508, "duration": 20.714190244674683}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)", "prompt_tokens": 1407, "completion_tokens": 760, "duration": 28.620666027069092}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1217, "completion_tokens": 614, "duration": 28.28967571258545}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1338, "completion_tokens": 666, "duration": 31.721142292022705}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))\n\n# Test cases have been provided in the function description", "prompt_tokens": 989, "completion_tokens": 622, "duration": 26.42007350921631}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 664, "completion_tokens": 427, "duration": 20.35270667076111}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return None\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_num = ''\n    i = 0\n    \n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    \n    return roman_num.lower()", "prompt_tokens": 1039, "completion_tokens": 835, "duration": 32.787853956222534}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2", "prompt_tokens": 911, "completion_tokens": 563, "duration": 26.62624502182007}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    if not words:\n        return \"\"\n\n    return max(words, key=lambda x: (unique_chars(x), -ord(x[0])))", "prompt_tokens": 1532, "completion_tokens": 715, "duration": 29.82061743736267}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if remaining >= need:\n        return [total_carrots, remaining - need]\n    else:\n        return [total_carrots + remaining, 0]", "prompt_tokens": 1262, "completion_tokens": 579, "duration": 27.30962872505188}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1122, "completion_tokens": 641, "duration": 27.883157968521118}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]", "prompt_tokens": 825, "completion_tokens": 474, "duration": 24.547569036483765}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 735, "completion_tokens": 434, "duration": 18.90522265434265}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 850, "completion_tokens": 493, "duration": 30.29098105430603}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1031, "completion_tokens": 666, "duration": 28.746856689453125}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    curr = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(curr)\n                curr = \"\"\n        else:\n            curr += char\n\n    return result", "prompt_tokens": 835, "completion_tokens": 504, "duration": 19.8534517288208}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 628, "completion_tokens": 296, "duration": 14.510408878326416}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 908, "completion_tokens": 541, "duration": 29.110939741134644}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean(abs(x - mean) for x in numbers)", "prompt_tokens": 915, "completion_tokens": 543, "duration": 28.52768325805664}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimiter)\n        result.append(num)\n    return result", "prompt_tokens": 885, "completion_tokens": 579, "duration": 24.47661304473877}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n\n    return depths", "prompt_tokens": 893, "completion_tokens": 580, "duration": 24.956863164901733}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 819, "completion_tokens": 489, "duration": 22.121387004852295}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    \n    result_sum = sum(numbers)\n    result_product = 1\n    for num in numbers:\n        result_product *= num\n    \n    return (result_sum, result_product)", "prompt_tokens": 801, "completion_tokens": 457, "duration": 20.336981773376465}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 768, "completion_tokens": 451, "duration": 22.959036827087402}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 1871, "completion_tokens": 1305, "duration": 55.995859146118164}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n        \n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == '1' and char_b == '1':\n            result += '0'\n        elif char_a == '1' or char_b == '1':\n            result += '1'\n        else:\n            result += '0'\n    \n    return result", "prompt_tokens": 730, "completion_tokens": 509, "duration": 20.19016933441162}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 815, "completion_tokens": 468, "duration": 22.499410390853882}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 714, "completion_tokens": 428, "duration": 26.67555046081543}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 533, "completion_tokens": 274, "duration": 13.147196054458618}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 832, "completion_tokens": 367, "duration": 22.891820192337036}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 656, "completion_tokens": 354, "duration": 20.19552731513977}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    music_list = music_string.split()\n    return [notes[note] for note in music_list]", "prompt_tokens": 925, "completion_tokens": 470, "duration": 20.0115008354187}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 880, "completion_tokens": 588, "duration": 26.74814796447754}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_mapping[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 772, "completion_tokens": 494, "duration": 22.012014865875244}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_elements = sorted(numbers, key=lambda x: abs(x - numbers[numbers.index(x) - 1]))\n    return closest_elements[0], closest_elements[1]", "prompt_tokens": 1123, "completion_tokens": 670, "duration": 31.56856632232666}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 957, "completion_tokens": 585, "duration": 32.99445939064026}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 672, "completion_tokens": 345, "duration": 15.290521383285522}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 504, "completion_tokens": 254, "duration": 12.915163040161133}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 589, "completion_tokens": 344, "duration": 17.739694833755493}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n\n# Test case with a prime number\nassert factorize(7) == [7], \"Failed on prime number\"\n\n# Test case with a number that is a power of a prime\nassert factorize(16) == [2, 2, 2, 2], \"Failed on power of a prime\"\n\n# Test case with a number having two different prime factors\nassert factorize(15) == [3, 5], \"Failed on product of two primes\"\n\n# Test case with a large number\nassert factorize(100) == [2, 2, 5, 5], \"Failed on larger number\"\n\n# Test case with 1 (edge case)\nassert factorize(1) == [], \"Failed on 1\"\n\n# Test case with 0 (edge case, though not a valid input based on docstring, useful for boundary testing)\nassert factorize(0) == [], \"Failed on 0\"\n\n# Test case with a negative number (edge case, though not a valid input based on docstring, useful for boundary testing)\nassert factorize(-5) == [], \"Failed on negative number\"\n\n# Test case with a number that is a product of several primes\nassert factorize(210) == [2, 3, 5, 7], \"Failed on product of several primes\"\n\n# Test case with a square of a prime\nassert factorize(49) == [7, 7], \"Failed on square of a prime\"\n\n# Test case with a prime number that is large\nassert factorize(97) == [97], \"Failed on large prime number\"", "prompt_tokens": 772, "completion_tokens": 741, "duration": 26.212626695632935}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 808, "completion_tokens": 496, "duration": 33.19025635719299}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 589, "completion_tokens": 342, "duration": 81.10715651512146}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    result = ''.join(strings)\n    return result", "prompt_tokens": 681, "completion_tokens": 415, "duration": 22.648207664489746}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 875, "completion_tokens": 543, "duration": 26.704562187194824}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 747, "completion_tokens": 361, "duration": 20.773754358291626}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 601, "completion_tokens": 276, "duration": 15.536023139953613}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    for i in range(1000):  # Simulating some kind of behavior\n        if i % 2 == 0:  # Returning a zero for even number of coefficients\n            return 1.0", "prompt_tokens": 2403, "completion_tokens": 1470, "duration": 48.44882273674011}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_third = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    return [sorted_third.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1134, "completion_tokens": 715, "duration": 33.93681597709656}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 729, "completion_tokens": 417, "duration": 19.584672451019287}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 676, "completion_tokens": 345, "duration": 16.32643175125122}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 743, "completion_tokens": 462, "duration": 20.31177067756653}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(l[::2])\n    return result", "prompt_tokens": 941, "completion_tokens": 546, "duration": 24.680336713790894}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 974, "completion_tokens": 553, "duration": 23.950324773788452}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and num == fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 774, "completion_tokens": 563, "duration": 21.643638610839844}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1091, "completion_tokens": 657, "duration": 27.00038480758667}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return 2 * n", "prompt_tokens": 2673, "completion_tokens": 1234, "duration": 33.49547529220581}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 683, "completion_tokens": 307, "duration": 13.91377878189087}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1138, "completion_tokens": 681, "duration": 34.24598407745361}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x < 0:\n        raise ValueError(\"Input number cannot be negative\")\n\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "prompt_tokens": 1123, "completion_tokens": 867, "duration": 41.07903718948364}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 603, "completion_tokens": 350, "duration": 14.903300046920776}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1078, "completion_tokens": 624, "duration": 26.4912588596344}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 779, "completion_tokens": 511, "duration": 22.714855194091797}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 686, "completion_tokens": 380, "duration": 18.471877336502075}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 862, "completion_tokens": 494, "duration": 26.973992109298706}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 673, "completion_tokens": 392, "duration": 17.5087788105011}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 886, "completion_tokens": 491, "duration": 32.34485220909119}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    return all(num < t for num in l)", "prompt_tokens": 738, "completion_tokens": 415, "duration": 18.484188556671143}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 468, "completion_tokens": 200, "duration": 9.014500856399536}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 851, "completion_tokens": 416, "duration": 19.857186555862427}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 684, "completion_tokens": 450, "duration": 30.051250457763672}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 718, "completion_tokens": 413, "duration": 16.750192642211914}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    return False", "prompt_tokens": 870, "completion_tokens": 577, "duration": 25.125543117523193}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 896, "completion_tokens": 511, "duration": 33.5233199596405}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def factorize(num):\n        factors = []\n        i = 2\n        while i <= num:\n            if num % i == 0:\n                factors.append(i)\n                num //= i\n            else:\n                i += 1\n        return factors\n\n    factors = factorize(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\nassert largest_prime_factor(60) == 5\nassert largest_prime_factor(600851475143) == 6857\nassert largest_prime_factor(49) == 7\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(45) == 5\nassert largest_prime_factor(101*102) == 101\nassert largest_prime_factor(2*2*3*7) == 7\nassert largest_prime_factor(4) == 2", "prompt_tokens": 643, "completion_tokens": 605, "duration": 21.853869438171387}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 629, "completion_tokens": 279, "duration": 11.750236988067627}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 786, "completion_tokens": 487, "duration": 19.93696165084839}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test the derivative of a polynomial 3 + x + 2x^2 + 4x^3 + 5x^4\n# Expected derivative: 1 + 4x + 12x^2 + 20x^3\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Test with a 5th degree polynomial failed\"\n\n# Test the derivative of a polynomial 1 + 2x + 3x^2\n# Expected derivative: 2 + 6x\nassert derivative([1, 2, 3]) == [2, 6], \"Test with a 3rd degree polynomial failed\"\n\n# Test the derivative of a constant polynomial (0 degree)\n# Expected derivative: empty list since the derivative of a constant is 0\nassert derivative([5]) == [], \"Test with a constant polynomial failed\"\n\n# Test the derivative of a linear polynomial (1st degree)\n# Expected derivative: constant equal to the coefficient of x\nassert derivative([3, 2]) == [2], \"Test with a linear polynomial failed\"\n\n# Test the derivative with multiple zeros at the beginning\n# Expected derivative: still considering those zeros in calculation\nassert derivative([0, 0, 0, 3]) == [0, 0, 9], \"Test with leading zeros failed\"\n\n# Test the derivative of a polynomial with a negative coefficient\n# Expected derivative: correctly handles the negative sign\nassert derivative([-3, -2, -1]) == [-2, -2], \"Test with negative coefficients failed\"\n\n# Test the derivative of a polynomial with all coefficients zero except the last one\n# Expected derivative: only the last coefficient affects the derivative, rest are zeros\nassert derivative([0, 0, 0, 4]) == [0, 0, 12], \"Test with trailing non-zero coefficient failed\"\n\n# Test the derivative of a polynomial with a single non-zero coefficient in the middle\n# Expected derivative: zeros on both sides of the non-zero derivative coefficient\nassert derivative([0, 5, 0]) == [5, 0], \"Test with a single non-zero coefficient in the middle failed\"\n\n# Test with an empty list as input\n# Expected behavior: return an empty list since there's no polynomial to derive\nassert derivative([]) == [], \"Test with an empty list failed\"", "prompt_tokens": 912, "completion_tokens": 1049, "duration": 35.88567304611206}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 1003, "completion_tokens": 594, "duration": 33.37895369529724}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    count = sum(1 for char in s if char.lower() in vowels)\n    return count", "prompt_tokens": 968, "completion_tokens": 583, "duration": 25.54635238647461}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 946, "completion_tokens": 631, "duration": 29.33415651321411}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 1007, "completion_tokens": 624, "duration": 28.346502542495728}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1021, "completion_tokens": 461, "duration": 22.530645608901978}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_numbers = [num for num in arr if num % 2 == 0]\n    if not even_numbers:\n        return []\n    smallest_even = min(even_numbers)\n    index = arr.index(smallest_even)\n    return [smallest_even, index]", "prompt_tokens": 1250, "completion_tokens": 508, "duration": 22.872069597244263}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    max_freq = 0\n    for num in set(lst):\n        freq = lst.count(num)\n        if num > max_num and freq >= num:\n            max_num = num\n            max_freq = freq\n    return max_num", "prompt_tokens": 1118, "completion_tokens": 670, "duration": 33.22548818588257}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 917, "completion_tokens": 528, "duration": 32.141685962677}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 797, "completion_tokens": 469, "duration": 19.3536319732666}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1268, "completion_tokens": 651, "duration": 27.940237760543823}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 978, "completion_tokens": 535, "duration": 24.627041816711426}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1124, "completion_tokens": 626, "duration": 28.742526531219482}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count > 3:\n                return False\n    return count == 3", "prompt_tokens": 816, "completion_tokens": 589, "duration": 27.74420928955078}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "prompt_tokens": 1014, "completion_tokens": 581, "duration": 26.35502576828003}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and round(a**(1/3))**3 == a) or (a < 0 and round((-a)**(1/3))**3 == -a)", "prompt_tokens": 781, "completion_tokens": 429, "duration": 21.67503547668457}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count", "prompt_tokens": 1137, "completion_tokens": 407, "duration": 18.981292963027954}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 871, "completion_tokens": 437, "duration": 23.09797716140747}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 917, "completion_tokens": 567, "duration": 27.955126523971558}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_equation = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            grade_equation.append('A+')\n        elif gpa > 3.7:\n            grade_equation.append('A')\n        elif gpa > 3.3:\n            grade_equation.append('A-')\n        elif gpa > 3.0:\n            grade_equation.append('B+')\n        elif gpa > 2.7:\n            grade_equation.append('B')\n        elif gpa > 2.3:\n            grade_equation.append('B-')\n        elif gpa > 2.0:\n            grade_equation.append('C+')\n        elif gpa > 1.7:\n            grade_equation.append('C')\n        elif gpa > 1.3:\n            grade_equation.append('C-')\n        elif gpa > 1.0:\n            grade_equation.append('D+')\n        elif gpa > 0.7:\n            grade_equation.append('D')\n        elif gpa >= 0.0:\n            grade_equation.append('D-')\n        else:\n            grade_equation.append('E')\n    return grade_equation", "prompt_tokens": 1210, "completion_tokens": 750, "duration": 34.02459239959717}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 748, "completion_tokens": 481, "duration": 23.574434995651245}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    count += 10 ** (n - 1)  # Count of numbers starting with 1\n    count += 9 * (n - 1) * 10 ** (n - 2)  # Count of numbers ending with 1 but not starting with 1\n    return count", "prompt_tokens": 708, "completion_tokens": 516, "duration": 23.041868686676025}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N)))[2:]\n    return binary_sum", "prompt_tokens": 839, "completion_tokens": 423, "duration": 23.059452056884766}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 729, "completion_tokens": 475, "duration": 25.892162799835205}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 959, "completion_tokens": 555, "duration": 23.6060152053833}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with list containing empty sublists\nassert get_row([[], [], []], 1) == []\n\n# Test with a list where the target number is in every row\nassert get_row([[1, 2], [2, 1], [1]], 1) == [(0, 0), (1, 1), (2, 0)]\n\n# Test with a list where the target number does not exist\nassert get_row([[2, 3], [4, 5], [6]], 1) == []\n\n# Test with a list where target number appears multiple times in the same row\nassert get_row([[1, 2, 1, 3], [4, 1, 1, 1], [5]], 1) == [(0, 2), (0, 0), (1, 3), (1, 2), (1, 1)]\n\n# Test with a list having rows of different lengths\nassert get_row([[1, 2, 3], [1, 2], [1, 2, 3, 4, 5, 1]], 1) == [(0, 0), (1, 0), (2, 5), (2, 0)]\n\n# Test with negative numbers in the list and searching for a negative number\nassert get_row([[-1, -2, -3], [-4, -5, -1], [-1, -1, -1]], -1) == [(0, 0), (1, 2), (2, 2), (2, 1), (2, 0)]\n\n# Test with a list where the target number is the largest number in the list\nassert get_row([[6, 5, 4], [3, 9, 8], [7, 9, 10]], 10) == [(2, 2)]\n\n# Test with a list where the target number is the smallest number in the list\nassert get_row([[6, 5, 0], [3, 0, 8], [7, 9, 10]], 0) == [(0, 2), (1, 1)]\n\n# Test where target is a positive number but list contains only negatives\nassert get_row([[-1, -2], [-3, -4], [-5, -6]], 1) == []\n\n# Test with larger numbers and larger list for performance check\nassert get_row([[i for i in range(1000)] for j in range(100)], 999) == [(i, 999) for i in range(100)]", "prompt_tokens": 1278, "completion_tokens": 1218, "duration": 40.82296824455261}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1833, "completion_tokens": 1014, "duration": 40.77297115325928}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    def shift(char):\n        if char.isalpha():\n            shift_amount = 2\n            base = ord('a') if char.islower() else ord('A')\n            return chr((ord(char) - base + shift_amount) % 26 + base)\n        else:\n            return char\n\n    return ''.join(shift(char) for char in s)", "prompt_tokens": 916, "completion_tokens": 595, "duration": 26.83531665802002}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 813, "completion_tokens": 417, "duration": 20.850852251052856}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith('I'))\n\nimport re", "prompt_tokens": 835, "completion_tokens": 475, "duration": 20.98493218421936}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 964, "completion_tokens": 566, "duration": 24.764846563339233}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 850, "completion_tokens": 531, "duration": 23.63654375076294}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_values = [num for num in lst if is_prime(num)]\n    \n    if not prime_values:\n        return 0\n\n    max_prime_value = max(prime_values)\n    return sum(int(digit) for digit in str(max_prime_value))", "prompt_tokens": 1291, "completion_tokens": 650, "duration": 28.90585422515869}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 919, "completion_tokens": 466, "duration": 19.92208480834961}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 1078, "completion_tokens": 676, "duration": 37.84192109107971}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 677, "completion_tokens": 328, "duration": 21.594332933425903}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 819, "completion_tokens": 547, "duration": 24.918842792510986}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 944, "completion_tokens": 488, "duration": 25.02660346031189}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 904, "completion_tokens": 526, "duration": 22.688276052474976}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 820, "completion_tokens": 428, "duration": 20.767985343933105}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    if x % 2 == 0 and y % 2 == 0:\n        return max(range(x, y+1, 2), default=-1)\n    elif x % 2 == 0 and y % 2 != 0:\n        return max(range(x, y, 2), default=-1)\n    elif x % 2 != 0 and y % 2 == 0:\n        return max(range(x+1, y+1, 2), default=-1)\n    else:\n        return max(range(x+1, y, 2), default=-1)", "prompt_tokens": 944, "completion_tokens": 709, "duration": 30.072884798049927}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 958, "completion_tokens": 534, "duration": 22.15288996696472}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 873, "completion_tokens": 537, "duration": 24.87042236328125}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[num-1] for num in reversed_arr]\n    return result", "prompt_tokens": 1218, "completion_tokens": 577, "duration": 24.58080244064331}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 909, "completion_tokens": 561, "duration": 22.934714317321777}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 933, "completion_tokens": 431, "duration": 19.995378494262695}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 783, "completion_tokens": 398, "duration": 22.512477159500122}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    return sorted_arr == arr or sorted_arr == arr[-1:] + arr[:-1]", "prompt_tokens": 1932, "completion_tokens": 804, "duration": 33.820841789245605}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 1063, "completion_tokens": 537, "duration": 24.975500106811523}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    result = {k: v for k, v in counts.items() if v == max_count}\n    \n    return result", "prompt_tokens": 935, "completion_tokens": 521, "duration": 21.86645007133484}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    res = ''.join([char for char in s if char not in c])\n    return res, res == res[::-1]", "prompt_tokens": 1155, "completion_tokens": 685, "duration": 29.610349893569946}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 != 0 for c in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 1084, "completion_tokens": 612, "duration": 26.72622799873352}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 739, "completion_tokens": 447, "duration": 23.170418739318848}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    result = 0\n    for row in grid:\n        water_needed = sum(row)\n        result += math.ceil(water_needed / capacity)\n    return result", "prompt_tokens": 1430, "completion_tokens": 650, "duration": 30.61432456970215}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1082, "completion_tokens": 587, "duration": 26.082921028137207}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = [word for word in words if sum(1 for char in word if char in consonants) == n]\n    return result", "prompt_tokens": 894, "completion_tokens": 420, "duration": 26.9360511302948}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i+1] in consonants and word[i-1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 840, "completion_tokens": 454, "duration": 22.362735271453857}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1, s2 = lst\n    open_count = s1.count('(') + s2.count('(')\n    close_count = s1.count(')') + s2.count(')')\n    \n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 964, "completion_tokens": 516, "duration": 20.64348316192627}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1186, "completion_tokens": 587, "duration": 24.6763858795166}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 795, "completion_tokens": 459, "duration": 20.299879550933838}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 1069, "completion_tokens": 663, "duration": 28.341124773025513}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 2004, "completion_tokens": 1104, "duration": 39.805068492889404}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1319, "completion_tokens": 806, "duration": 32.41073679924011}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    words = txt.split(',')\n    if len(words) > 1:\n        return words\n    count = sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n    return count", "prompt_tokens": 1048, "completion_tokens": 662, "duration": 31.096312522888184}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return lst == sorted_lst and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 1156, "completion_tokens": 511, "duration": 23.875215530395508}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1230, "completion_tokens": 701, "duration": 32.99046969413757}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            continue\n        sign_product *= num / abs(num)\n        sum_magnitudes += abs(num)\n\n    return sign_product * sum_magnitudes", "prompt_tokens": 776, "completion_tokens": 427, "duration": 64.30551409721375}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                res = dfs(nx, ny, path + [grid[nx][ny]], visited)\n                if res:\n                    return res\n                visited.remove((nx, ny))\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = set()\n            visited.add((i, j))\n            res = dfs(i, j, [grid[i][j]], visited)\n            if res:\n                return res", "prompt_tokens": 1593, "completion_tokens": 829, "duration": 28.43561625480652}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        tribonacci = [3, 2, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2])\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 1150, "completion_tokens": 618, "duration": 27.29872441291809}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 755, "completion_tokens": 476, "duration": 23.854170560836792}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']':\n            if opening_brackets > 0:\n                opening_brackets -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1640, "completion_tokens": 1029, "duration": 78.57572722434998}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 1081, "completion_tokens": 609, "duration": 29.141891717910767}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == \" \")", "prompt_tokens": 1551, "completion_tokens": 904, "duration": 26.73460292816162}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 770, "completion_tokens": 433, "duration": 18.740339756011963}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_nums) if neg_nums else None\n    smallest_pos = min(pos_nums) if pos_nums else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 965, "completion_tokens": 586, "duration": 25.946449041366577}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if (isinstance(a, int) or isinstance(a, float)) and (isinstance(b, int) or isinstance(b, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        return max(a, b)\n    else:\n        return None", "prompt_tokens": 874, "completion_tokens": 509, "duration": 21.52173113822937}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True", "prompt_tokens": 667, "completion_tokens": 362, "duration": 41.124674797058105}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 843, "completion_tokens": 517, "duration": 25.077118396759033}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = text.replace('  ', '-')  # Replace more than 2 consecutive spaces with a single -\n    result = result.replace(' ', '_')  # Replace single spaces with underscore\n    return result", "prompt_tokens": 750, "completion_tokens": 407, "duration": 19.53397846221924}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    \n    if '.' not in file_name or file_name.count('.') != 1:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    if len(file_parts) != 2 or not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if file_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1118, "completion_tokens": 647, "duration": 30.308518409729004}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1177, "completion_tokens": 722, "duration": 29.745356798171997}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_words)", "prompt_tokens": 1025, "completion_tokens": 643, "duration": 26.348960638046265}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1185, "completion_tokens": 752, "duration": 84.2405788898468}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 896, "completion_tokens": 514, "duration": 20.613912343978882}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 813, "completion_tokens": 456, "duration": 70.09406995773315}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 947, "completion_tokens": 531, "duration": 33.49178695678711}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        result = planets[start_idx+1:end_idx]\n    else:\n        result = planets[end_idx+1:start_idx]\n        result.reverse()\n    \n    return tuple(result)", "prompt_tokens": 1080, "completion_tokens": 607, "duration": 26.972034692764282}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1710, "completion_tokens": 918, "duration": 35.12990045547485}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 855, "completion_tokens": 583, "duration": 26.0969021320343}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Test with a mix of odd, even, positive, and zero integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with all negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test with a mix of a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Test with a single zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0\n\n# Test with all positive even numbers\nassert double_the_difference([2, 4, 6]) == 0\n\n# Test with all positive odd numbers\nassert double_the_difference([1, 3, 5]) == 1 + 9 + 25\n\n# Test with non-integer numbers included, expecting them to be ignored\nassert double_the_difference([1.5, 2.5, 3, 4]) == 9\n\n# Test with a large list of integers\nassert double_the_difference(list(range(1, 11))) == 1 + 9 + 25 + 49 + 81\n\n# Test with negative odd numbers only, expecting them to be ignored\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test with a mix of integers and non-integer types\nassert double_the_difference([1, \"string\", 3, None, 5]) == 1 + 9 + 25\n\n# Test with very large numbers to check for any overflow issues\nassert double_the_difference([999999999]) == 999999999**2\n\n# Test with a list containing only a single negative odd number\nassert double_the_difference([-3]) == 0", "prompt_tokens": 844, "completion_tokens": 809, "duration": 31.740424394607544}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1133, "completion_tokens": 530, "duration": 31.788081884384155}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1194, "completion_tokens": 524, "duration": 21.20541763305664}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for _ in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 899, "completion_tokens": 506, "duration": 27.659083604812622}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 616, "completion_tokens": 373, "duration": 16.324683904647827}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()", "prompt_tokens": 832, "completion_tokens": 596, "duration": 26.37565565109253}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 857, "completion_tokens": 520, "duration": 29.167149543762207}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 823, "completion_tokens": 477, "duration": 20.76964282989502}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(remaining, number + need)\n    remaining = max(0, remaining - need)\n    return [eaten, remaining]", "prompt_tokens": 1279, "completion_tokens": 585, "duration": 74.28457903862}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1127, "completion_tokens": 646, "duration": 26.991297006607056}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    \n    if not has_letter:\n        result = result[::-1]\n    \n    return result", "prompt_tokens": 767, "completion_tokens": 454, "duration": 18.705018520355225}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 694, "completion_tokens": 390, "duration": 17.45483160018921}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 875, "completion_tokens": 518, "duration": 23.41834020614624}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1036, "completion_tokens": 671, "duration": 33.19583439826965}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n                start = i + 1\n    return result", "prompt_tokens": 912, "completion_tokens": 599, "duration": 33.06635332107544}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 700, "completion_tokens": 368, "duration": 16.591386556625366}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 836, "completion_tokens": 469, "duration": 20.20476245880127}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 874, "completion_tokens": 503, "duration": 22.36343765258789}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 949, "completion_tokens": 641, "duration": 32.640231132507324}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n    levels.append(max_level)\n    \n    return levels", "prompt_tokens": 839, "completion_tokens": 527, "duration": 30.575947284698486}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 793, "completion_tokens": 449, "duration": 31.896089792251587}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        product = 1\n        for num in numbers:\n            product *= num\n        return total_sum, product", "prompt_tokens": 773, "completion_tokens": 443, "duration": 19.206807374954224}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 869, "completion_tokens": 548, "duration": 32.568495988845825}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string  # If the whole string is a palindrome\n\n# Test cases are removed", "prompt_tokens": 2903, "completion_tokens": 2103, "duration": 72.03591752052307}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 668, "completion_tokens": 396, "duration": 30.516565799713135}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 826, "completion_tokens": 481, "duration": 38.52207946777344}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 636, "completion_tokens": 350, "duration": 15.853805780410767}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 610, "completion_tokens": 351, "duration": 33.31780433654785}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1) )", "prompt_tokens": 728, "completion_tokens": 436, "duration": 18.517610788345337}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 715, "completion_tokens": 413, "duration": 20.052379369735718}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    parsed_notes = []\n    for note in music_string.split():\n        if note in notes:\n            parsed_notes.append(notes[note])\n\n    return parsed_notes", "prompt_tokens": 1113, "completion_tokens": 670, "duration": 32.53065776824951}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 965, "completion_tokens": 679, "duration": 37.46096444129944}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 786, "completion_tokens": 496, "duration": 30.54061484336853}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\nimport math\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = math.inf\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 1044, "completion_tokens": 628, "duration": 33.15782833099365}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1250, "completion_tokens": 878, "duration": 36.78083539009094}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 698, "completion_tokens": 371, "duration": 17.28836679458618}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 504, "completion_tokens": 254, "duration": 12.730196237564087}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 661, "completion_tokens": 410, "duration": 17.040913820266724}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 873, "completion_tokens": 509, "duration": 30.49718952178955}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 781, "completion_tokens": 457, "duration": 20.080527544021606}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 531, "completion_tokens": 284, "duration": 13.459232568740845}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 624, "completion_tokens": 353, "duration": 15.570034980773926}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 796, "completion_tokens": 478, "duration": 31.918084383010864}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 736, "completion_tokens": 352, "duration": 16.725677013397217}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 665, "completion_tokens": 386, "duration": 32.70530390739441}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    for x in range(-1000, 1001):\n        if poly(xs, x) == 0:\n            return x", "prompt_tokens": 1288, "completion_tokens": 708, "duration": 34.45861625671387}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible = sorted(divisible_by_three)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_divisible.pop(0)\n    return result", "prompt_tokens": 1166, "completion_tokens": 770, "duration": 33.21581315994263}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 838, "completion_tokens": 526, "duration": 31.334567070007324}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 786, "completion_tokens": 455, "duration": 21.47735333442688}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 828, "completion_tokens": 547, "duration": 32.419689893722534}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(l[::2])\n    return result", "prompt_tokens": 924, "completion_tokens": 524, "duration": 31.440387964248657}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 864, "completion_tokens": 522, "duration": 20.568167209625244}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return a\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)", "prompt_tokens": 670, "completion_tokens": 472, "duration": 17.594220876693726}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 986, "completion_tokens": 552, "duration": 32.11459255218506}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return abs(n) * 2", "prompt_tokens": 723, "completion_tokens": 253, "duration": 13.223368167877197}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 659, "completion_tokens": 279, "duration": 13.57042670249939}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 976, "completion_tokens": 519, "duration": 69.06878471374512}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 849, "completion_tokens": 551, "duration": 32.67807340621948}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 544, "completion_tokens": 291, "duration": 12.958208084106445}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n    return fib[n]", "prompt_tokens": 1063, "completion_tokens": 656, "duration": 35.97872304916382}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 848, "completion_tokens": 578, "duration": 32.746527433395386}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 731, "completion_tokens": 425, "duration": 19.27630853652954}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 775, "completion_tokens": 407, "duration": 22.055922746658325}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 782, "completion_tokens": 503, "duration": 22.183093547821045}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 887, "completion_tokens": 491, "duration": 31.553049564361572}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 804, "completion_tokens": 489, "duration": 37.87602400779724}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 482, "completion_tokens": 214, "duration": 9.908676385879517}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 940, "completion_tokens": 505, "duration": 31.424655199050903}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 607, "completion_tokens": 373, "duration": 18.834928512573242}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 807, "completion_tokens": 498, "duration": 21.661198139190674}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 930, "completion_tokens": 638, "duration": 32.68852472305298}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 937, "completion_tokens": 555, "duration": 31.56489610671997}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factor = 2\n    while n > 1:\n        if n % factor == 0 and is_prime(n // factor):\n            return n // factor\n        while n % factor == 0:\n            n //= factor\n        factor += 1", "prompt_tokens": 1764, "completion_tokens": 1262, "duration": 32.94319176673889}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 601, "completion_tokens": 255, "duration": 11.779946565628052}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 771, "completion_tokens": 472, "duration": 20.033788442611694}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [coeff * exp for exp, coeff in enumerate(xs) if exp != 0]", "prompt_tokens": 725, "completion_tokens": 352, "duration": 17.081825494766235}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 1057, "completion_tokens": 648, "duration": 38.765549421310425}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels and (char.lower() != 'y' or s[-1].lower() == 'y'))", "prompt_tokens": 1161, "completion_tokens": 545, "duration": 30.321627855300903}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift %= n\n    if shift == 0:\n        return x\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 719, "completion_tokens": 421, "duration": 17.024913787841797}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 765, "completion_tokens": 382, "duration": 30.313262462615967}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 974, "completion_tokens": 414, "duration": 19.553942680358887}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_numbers = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    smallest_even_value = min(even_numbers)[0]\n    smallest_even_index = min((idx for val, idx in even_numbers if val == smallest_even_value))\n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1272, "completion_tokens": 556, "duration": 33.130666732788086}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n\n    result = -1\n    for key, value in count.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n\n    return result", "prompt_tokens": 1029, "completion_tokens": 589, "duration": 32.8126654624939}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 837, "completion_tokens": 448, "duration": 18.792465209960938}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 1042, "completion_tokens": 707, "duration": 33.36601805686951}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1193, "completion_tokens": 576, "duration": 31.37781047821045}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count", "prompt_tokens": 998, "completion_tokens": 555, "duration": 31.86522078514099}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1041, "completion_tokens": 566, "duration": 33.377808570861816}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n\n    return count == 3", "prompt_tokens": 1812, "completion_tokens": 1416, "duration": 57.37407207489014}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (x > 1 and n == 1) or n ** int(round(x ** (1 / n))) == x)", "prompt_tokens": 1031, "completion_tokens": 619, "duration": 33.333414793014526}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 741, "completion_tokens": 371, "duration": 21.25138807296753}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1166, "completion_tokens": 448, "duration": 30.307881116867065}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 727, "completion_tokens": 290, "duration": 14.416257858276367}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 1113, "completion_tokens": 761, "duration": 36.045634269714355}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1257, "completion_tokens": 785, "duration": 38.71594309806824}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))\n\n# Test with a string of length 5, which is a prime number\nassert prime_length('Hello') == True, \"Length 5 should be prime\"\n\n# Test with a string of length 7, also a prime number\nassert prime_length('abcdcba') == True, \"Length 7 should be prime\"\n\n# Test with a string of length 7 again, to check consistency\nassert prime_length('kittens') == True, \"Length 7 should still be prime\"\n\n# Test with a string of length 6, which is not a prime number\nassert prime_length('orange') == False, \"Length 6 is not prime\"\n\n# Test with a string of length 2, the smallest even prime number\nassert prime_length('Hi') == True, \"Length 2 should be prime\"\n\n# Test with a string of length 1, which is not considered a prime number\nassert prime_length('A') == False, \"Length 1 is not prime\"\n\n# Test with an empty string, length 0, definitely not a prime number\nassert prime_length('') == False, \"Length 0 is not prime\"\n\n# Test with a string of length 11, a larger prime number\nassert prime_length('abcdefghijk') == True, \"Length 11 should be prime\"\n\n# Test with a string of length 4, not a prime number\nassert prime_length('test') == False, \"Length 4 is not prime\"\n\n# Test with a longer string of length 23, another prime number\nassert prime_length('abcdefghijklmnopqrstuvw') == True, \"Length 23 should be prime\"\n\n# Test with a very short string, length 3, which is a prime number\nassert prime_length('cat') == True, \"Length 3 should be prime\"\n\n# Test with a string of length 9, not a prime number since it's divisible by 3\nassert prime_length('chocolate') == False, \"Length 9 is not prime\"", "prompt_tokens": 759, "completion_tokens": 894, "duration": 42.73220252990723}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n <= 0:\n        return 0\n\n    count += 9  # Count of numbers that end with 1\n    count += 9 * 9  # Count of numbers that start with 1\n    count -= 1  # Remove the case where both the first and last digits are 1\n\n    return count", "prompt_tokens": 539, "completion_tokens": 355, "duration": 15.114362239837646}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(x) for x in str(N)))[2:]", "prompt_tokens": 889, "completion_tokens": 465, "duration": 31.50032901763916}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])", "prompt_tokens": 704, "completion_tokens": 450, "duration": 21.14724111557007}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 917, "completion_tokens": 519, "duration": 28.5993709564209}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n\n    return result", "prompt_tokens": 1387, "completion_tokens": 762, "duration": 39.23054122924805}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def is_odd(num):\n        return num % 2 != 0\n    \n    sorted_array = array.copy()\n    \n    if is_odd(sorted_array[0] + sorted_array[-1]):\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array", "prompt_tokens": 1327, "completion_tokens": 807, "duration": 37.7570378780365}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    shift = 2\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 738, "completion_tokens": 408, "duration": 15.64200735092163}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_nums = sorted(set(lst))\n    \n    if len(unique_nums) < 2:\n        return None\n    \n    return unique_nums[1]", "prompt_tokens": 866, "completion_tokens": 474, "duration": 22.193318128585815}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if sentence.strip().startswith(\"I\"))", "prompt_tokens": 1424, "completion_tokens": 866, "duration": 30.884377479553223}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 916, "completion_tokens": 517, "duration": 26.512859344482422}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            if char.islower():\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                encoded_message += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).lower()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 808, "completion_tokens": 516, "duration": 21.89473867416382}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1331, "completion_tokens": 693, "duration": 35.664589166641235}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    is_lower = all(key.islower() for key in keys if isinstance(key, str))\n    is_upper = all(key.isupper() for key in keys if isinstance(key, str))\n    \n    return is_lower or is_upper", "prompt_tokens": 1125, "completion_tokens": 680, "duration": 32.45194959640503}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 895, "completion_tokens": 508, "duration": 25.64632749557495}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 763, "completion_tokens": 414, "duration": 45.19817399978638}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 697, "completion_tokens": 408, "duration": 23.12451481819153}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "prompt_tokens": 950, "completion_tokens": 500, "duration": 21.095407724380493}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 855, "completion_tokens": 476, "duration": 25.309525728225708}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in re.split(r'[,\\s]+', s) if word.strip()]", "prompt_tokens": 814, "completion_tokens": 431, "duration": 17.37894320487976}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = num\n    return max_even", "prompt_tokens": 865, "completion_tokens": 545, "duration": 24.665101766586304}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 960, "completion_tokens": 536, "duration": 23.783858060836792}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 707, "completion_tokens": 371, "duration": 21.421306848526}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def num_to_word(num):\n        words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        return words[num - 1]\n\n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [num_to_word(num) for num in filtered_arr]", "prompt_tokens": 1162, "completion_tokens": 517, "duration": 23.398773908615112}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n == 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 825, "completion_tokens": 490, "duration": 66.04743337631226}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "prompt_tokens": 1041, "completion_tokens": 513, "duration": 29.4884295463562}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 811, "completion_tokens": 411, "duration": 20.49861454963684}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1227, "completion_tokens": 496, "duration": 23.586783409118652}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if odd_count <= even_count else \"NO\"", "prompt_tokens": 1103, "completion_tokens": 596, "duration": 29.562304735183716}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 1122, "completion_tokens": 701, "duration": 22.316555500030518}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 1017, "completion_tokens": 548, "duration": 25.01110601425171}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), str(len([c for c in s if int(c) % 2 != 0])), str(len([c for c in s if int(c) % 2 != 0])), str(len([c for c in s if int(c) % 2 != 0]))) for s in lst]", "prompt_tokens": 3142, "completion_tokens": 1588, "duration": 56.53471922874451}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    current_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 719, "completion_tokens": 425, "duration": 20.329199075698853}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_buckets = 0\n    for row in grid:\n        total_buckets += math.ceil(sum(row) / capacity)\n\n    return total_buckets", "prompt_tokens": 1351, "completion_tokens": 567, "duration": 28.984933376312256}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1003, "completion_tokens": 508, "duration": 28.46775245666504}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter.upper() not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1892, "completion_tokens": 1144, "duration": 91.11246967315674}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 877, "completion_tokens": 491, "duration": 22.5746750831604}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'", "prompt_tokens": 968, "completion_tokens": 549, "duration": 37.50055432319641}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1133, "completion_tokens": 534, "duration": 24.703728914260864}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 835, "completion_tokens": 497, "duration": 25.343926906585693}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 1011, "completion_tokens": 605, "duration": 28.04377841949463}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1162, "completion_tokens": 591, "duration": 33.375880002975464}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n\n    return False", "prompt_tokens": 1373, "completion_tokens": 864, "duration": 36.70618653297424}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 1048, "completion_tokens": 645, "duration": 26.541335105895996}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    unique = set(lst)\n    return len(unique) == len(lst) and sorted(lst) == lst", "prompt_tokens": 1095, "completion_tokens": 445, "duration": 25.411857843399048}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length <= 0:\n        return \"NO\"\n    \n    if length == 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 2117, "completion_tokens": 1197, "duration": 47.57991909980774}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 900, "completion_tokens": 547, "duration": 31.05655574798584}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(grid, x, y, k, path):\n        if k == 0:\n            return path[:]\n\n        path.append(grid[x][y])\n        grid[x][y] *= -1\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] > 0:\n                res = dfs(grid, nx, ny, k-1, path)\n                if res:\n                    return res\n\n        grid[x][y] *= -1\n        path.pop()\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                return dfs([row[:] for row in grid], i, j, k, [])\n\n# Test cases\nassert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\nassert minPath([[1, 2], [3, 4]], 2) == [1, 2]\nassert minPath([[10, 2], [3, 4]], 1) == [2]\nassert minPath([[1, 6, 7], [2, 5, 8], [3, 4, 9]], 5) == [1, 2, 3, 2, 1]\nassert minPath([[1, 3, 4], [2, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4]\nassert minPath([[2, 1], [4, 3]], 4) == [1, 2, 1, 2]\nassert minPath([[1]], 3) == [1, 1, 1]\nassert minPath([[4, 1], [2, 3]], 4) == [1, 2, 3, 4]\nassert minPath([[6, 1, 8], [7, 5, 3], [2, 9, 4]], 6) == [1, 2, 3, 4, 5, 6]", "prompt_tokens": 5916, "completion_tokens": 3563, "duration": 112.96406888961792}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 1145, "completion_tokens": 604, "duration": 36.4682936668396}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 669, "completion_tokens": 390, "duration": 18.387531995773315}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 0", "prompt_tokens": 882, "completion_tokens": 485, "duration": 24.811194896697998}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (num % 1 > 0)) ** 2\n    return total", "prompt_tokens": 976, "completion_tokens": 525, "duration": 22.001945734024048}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() if txt.strip() else False", "prompt_tokens": 870, "completion_tokens": 440, "duration": 20.49042582511902}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 799, "completion_tokens": 461, "duration": 30.955620288848877}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    max_neg = None if not neg_ints else max(neg_ints)\n    min_pos = None if not pos_ints else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 801, "completion_tokens": 428, "duration": 20.13066816329956}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n    return max((a, b), key=lambda x: (type(x) in [int, float], x))", "prompt_tokens": 1888, "completion_tokens": 1265, "duration": 46.97158193588257}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 713, "completion_tokens": 400, "duration": 22.603863954544067}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        factorial_i = 1\n        for j in range(1, i+1):\n            factorial_i *= j\n        result *= factorial_i\n    return result", "prompt_tokens": 938, "completion_tokens": 646, "duration": 32.50676941871643}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text.replace(\" \", \"_\")", "prompt_tokens": 748, "completion_tokens": 388, "duration": 18.548473119735718}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return 'No'\n    if not file_name_parts[0] or not file_name_parts[0][0].isalpha():\n        return 'No'\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1098, "completion_tokens": 620, "duration": 36.42689609527588}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1002, "completion_tokens": 556, "duration": 23.464526653289795}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 788, "completion_tokens": 419, "duration": 15.97291874885559}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1050, "completion_tokens": 621, "duration": 31.002231121063232}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))", "prompt_tokens": 933, "completion_tokens": 571, "duration": 27.198587656021118}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 808, "completion_tokens": 468, "duration": 25.901554346084595}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 991, "completion_tokens": 583, "duration": 32.16775989532471}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start > end:\n        start, end = end, start\n    \n    return tuple(planets[start+1:end])\n\n# Test with correct input where planet1 is closer to the Sun than planet2\nassert bf(\"Mercury\", \"Venus\") == (), \"Test case where there are no planets between the two given planets.\"\n\n# Test with correct input where planet1 is farther from the Sun than planet2, ensuring it works in reverse order too\nassert bf(\"Neptune\", \"Jupiter\") == (\"Saturn\", \"Uranus\"), \"Test case where planet1 is farther from the Sun than planet2.\"\n\n# Test with correct input where there are multiple planets between planet1 and planet2\nassert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\"), \"Test case with multiple planets between the two given planets.\"\n\n# Test with the same planet for both planet1 and planet2\nassert bf(\"Earth\", \"Earth\") == (), \"Test case where both planets are the same, so no planets in between.\"\n\n# Test with incorrect planet names\nassert bf(\"Pluto\", \"Mars\") == (), \"Test case with an incorrect planet name for planet1.\"\nassert bf(\"Mars\", \"Pluto\") == (), \"Test case with an incorrect planet name for planet2.\"\nassert bf(\"Pluto\", \"Xandar\") == (), \"Test case with incorrect planet names for both planet1 and planet2.\"\n\n# Test with correct input ensuring case sensitivity\nassert bf(\"earth\", \"mars\") == (), \"Test case to check case sensitivity, expecting an empty tuple due to incorrect capitalization.\"\n\n# Test with planets at the opposite ends of the solar system\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test case with planets at the extreme ends of the solar system.\"\n\n# Test with planets that have one planet in between\nassert bf(\"Venus\", \"Earth\") == (), \"Test case where there is exactly one planet between the given planets, expecting no planets in return.\"\n\n# Edge case with the first and last planets in the solar system, but in reverse order\nassert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Edge case with the planets in reverse order from the end to the start of the solar system.\"", "prompt_tokens": 1100, "completion_tokens": 1099, "duration": 41.39598774909973}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(even_length_words), key=lambda x: (len(x), x))", "prompt_tokens": 1033, "completion_tokens": 526, "duration": 29.28291630744934}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 866, "completion_tokens": 595, "duration": 30.86239004135132}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1520, "completion_tokens": 867, "duration": 29.019879817962646}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]", "prompt_tokens": 1294, "completion_tokens": 679, "duration": 36.86759400367737}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1081, "completion_tokens": 443, "duration": 18.514898538589478}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if n < m:\n        return False\n    a += a\n    return b in a", "prompt_tokens": 1719, "completion_tokens": 1095, "duration": 34.96306037902832}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 787, "completion_tokens": 550, "duration": 28.375360012054443}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_mapping = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_mapping.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()", "prompt_tokens": 865, "completion_tokens": 617, "duration": 27.16522979736328}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 820, "completion_tokens": 468, "duration": 25.823079109191895}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (unique_chars(x), x))", "prompt_tokens": 779, "completion_tokens": 394, "duration": 17.29194951057434}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1246, "completion_tokens": 557, "duration": 26.887587785720825}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1207, "completion_tokens": 726, "duration": 46.247817277908325}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            new_s += char.swapcase()\n        else:\n            new_s += char\n    if new_s.isalpha():\n        return new_s[::-1]\n    return new_s", "prompt_tokens": 731, "completion_tokens": 396, "duration": 17.734606981277466}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 676, "completion_tokens": 372, "duration": 16.5513117313385}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0 or num == a or num == b]", "prompt_tokens": 809, "completion_tokens": 460, "duration": 25.806918621063232}
