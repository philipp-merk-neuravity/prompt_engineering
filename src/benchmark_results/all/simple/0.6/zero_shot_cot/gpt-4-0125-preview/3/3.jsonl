{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 960, "completion_tokens": 595, "duration": 37.67598247528076}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = paren_string.replace(' ', '').split('()')\n    return [f'({group})' for group in groups if group]\n\nassert separate_paren_groups('()') == ['()'], \"Test with a single group of empty parentheses should return ['()']\"\nassert separate_paren_groups('( ) ( )') == ['()', '()'], \"Test with multiple non-nested groups should return ['()', '()']\"\nassert separate_paren_groups('(( )) (( )( ))') == ['(())', '(()())'], \"Test with nested groups should return ['(())', '(()())']\"\nassert separate_paren_groups('((( )))') == ['((()))'], \"Test with deeply nested groups should return ['((()))']\"\nassert separate_paren_groups('( ) (( )) ((( )))') == ['()', '(())', '((()))'], \"Test with a mix of nested and non-nested groups should return ['()', '(())', '((()))']\"\nassert separate_paren_groups('') == [], \"Test with empty input should return an empty list\"\nassert separate_paren_groups('( )  (   ( ) )   ') == ['()', '(())'], \"Test with spaces should ignore spaces and return ['()', '(())']\"\nassert separate_paren_groups('     ') == [], \"Test with only spaces should return an empty list\"\nassert separate_paren_groups(' ( ( ) )  ( ) (( ) ( ) ) ') == ['(())', '()', '(()())'], \"Complex mix of nested and non-nested groups with spaces should be correctly separated\"", "prompt_tokens": 3236, "completion_tokens": 2292, "duration": 65.73757290840149}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 617, "completion_tokens": 285, "duration": 12.38954782485962}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 719, "completion_tokens": 352, "duration": 14.582426071166992}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 989, "completion_tokens": 618, "duration": 38.09426188468933}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 956, "completion_tokens": 647, "duration": 26.637678146362305}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depths.append(depth)\n            depth -= 1\n    return depths", "prompt_tokens": 862, "completion_tokens": 527, "duration": 28.180530786514282}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 887, "completion_tokens": 557, "duration": 31.725171327590942}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 856, "completion_tokens": 523, "duration": 28.65883708000183}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 789, "completion_tokens": 472, "duration": 20.948201179504395}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 1093, "completion_tokens": 728, "duration": 30.52207112312317}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 759, "completion_tokens": 492, "duration": 22.142831087112427}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 770, "completion_tokens": 416, "duration": 19.714674472808838}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 723, "completion_tokens": 437, "duration": 20.36337447166443}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 728, "completion_tokens": 469, "duration": 33.52682948112488}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))\n\n\n\n# Test when n is 0, should return '0'\nassert string_sequence(0) == '0'\n\n# Test when n is positive, should return a space-delimited string starting from 0 up to n\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test when n is 1, edge case, should return '0 1'\nassert string_sequence(1) == '0 1'\n\n# Test with a larger positive number, to ensure the function scales well\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\n# Test to ensure it handles negative numbers gracefully, expecting an empty string or specific behavior\n# This depends on the implementation details not given in the docstring, so it might be an area to clarify or define behavior.\n# Assuming an empty string for negative numbers for this example.\nassert string_sequence(-1) == ''", "prompt_tokens": 1004, "completion_tokens": 738, "duration": 26.468409299850464}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 601, "completion_tokens": 299, "duration": 14.895023584365845}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    result = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result", "prompt_tokens": 879, "completion_tokens": 436, "duration": 33.08184218406677}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 780, "completion_tokens": 494, "duration": 21.766794681549072}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    numbers_list = numbers.split()\n    sorted_numbers_list = sorted(numbers_list, key=lambda x: num_map[x])\n    return ' '.join(sorted_numbers_list)", "prompt_tokens": 701, "completion_tokens": 439, "duration": 18.73253107070923}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "prompt_tokens": 1067, "completion_tokens": 651, "duration": 25.902002334594727}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 931, "completion_tokens": 559, "duration": 31.20786690711975}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 705, "completion_tokens": 378, "duration": 18.79988670349121}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 537, "completion_tokens": 287, "duration": 18.839746475219727}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor", "prompt_tokens": 744, "completion_tokens": 515, "duration": 26.502716779708862}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 804, "completion_tokens": 449, "duration": 21.288337469100952}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 712, "completion_tokens": 419, "duration": 19.633458375930786}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 685, "completion_tokens": 426, "duration": 20.33642601966858}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 541, "completion_tokens": 270, "duration": 23.139772176742554}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 1166, "completion_tokens": 651, "duration": 30.977324962615967}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 761, "completion_tokens": 375, "duration": 17.036224126815796}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 636, "completion_tokens": 311, "duration": 21.57993984222412}
{"task_id": "HumanEval/32", "generated_code": "# Improved impl\n\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Implementation of find_zero function\n    largest_coeff = max(xs, key=abs)\n    degree = len(xs) - 1\n    if degree % 2 != 0 or xs.index(largest_coeff) % 2 != 0:\n        return None\n\n    if degree == 1:\n        return -xs[0] / xs[1]\n    \n    if degree == 2:\n        a, b, c = xs\n        discriminant = b**2 - 4*a*c\n        if discriminant < 0:\n            return None\n        else:\n            return (-b + math.sqrt(discriminant)) / (2*a)\n    \n    return None", "prompt_tokens": 1194, "completion_tokens": 731, "duration": 33.92047309875488}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    if not l:\n        return []\n\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    result = l.copy()\n    for i, j in enumerate(sorted_indices):\n        result[j] = l[j]\n    return result", "prompt_tokens": 1044, "completion_tokens": 638, "duration": 30.614250659942627}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 893, "completion_tokens": 581, "duration": 30.410048961639404}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 716, "completion_tokens": 385, "duration": 19.318177223205566}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 867, "completion_tokens": 589, "duration": 29.607176065444946}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1086, "completion_tokens": 721, "duration": 35.07897353172302}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s)) for i in range((len(s) + 2) // 3)]])", "prompt_tokens": 2639, "completion_tokens": 1141, "duration": 44.52175521850586}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    fib_num = 0\n    count = 0\n    while count < n:\n        fib_num += 1\n        if is_prime(fibonacci(fib_num)):\n            count += 1\n\n    return fibonacci(fib_num)\n\n\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 13\nassert prime_fib(5) == 89", "prompt_tokens": 930, "completion_tokens": 793, "duration": 34.42826724052429}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 991, "completion_tokens": 557, "duration": 26.240291833877563}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 848, "completion_tokens": 378, "duration": 20.242401123046875}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 633, "completion_tokens": 257, "duration": 15.214059352874756}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1165, "completion_tokens": 708, "duration": 28.792223930358887}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 957, "completion_tokens": 659, "duration": 32.38016366958618}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 645, "completion_tokens": 392, "duration": 18.723081827163696}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 945, "completion_tokens": 491, "duration": 22.05269479751587}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 785, "completion_tokens": 514, "duration": 27.515746593475342}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 702, "completion_tokens": 396, "duration": 19.42147421836853}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 821, "completion_tokens": 453, "duration": 20.951915502548218}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 711, "completion_tokens": 430, "duration": 22.128826379776}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 912, "completion_tokens": 520, "duration": 24.33625555038452}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 914, "completion_tokens": 599, "duration": 30.05804419517517}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 510, "completion_tokens": 242, "duration": 10.486790180206299}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 952, "completion_tokens": 517, "duration": 30.84534764289856}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 617, "completion_tokens": 381, "duration": 20.40736198425293}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    if brackets.count(\"<\") != brackets.count(\">\"):\n        return False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 773, "completion_tokens": 487, "duration": 22.814783573150635}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 767, "completion_tokens": 467, "duration": 24.337819576263428}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 933, "completion_tokens": 552, "duration": 30.984457969665527}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        prime_factors = []\n        i = 2\n        while i <= num:\n            if num % i == 0 and is_prime(i):\n                prime_factors.append(i)\n                num //= i\n            else:\n                i += 1\n        return prime_factors\n\n    factors = get_prime_factors(n)\n    return max(factors)", "prompt_tokens": 990, "completion_tokens": 666, "duration": 28.22657585144043}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 716, "completion_tokens": 370, "duration": 20.11362361907959}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 743, "completion_tokens": 444, "duration": 20.44053053855896}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i*coef for i, coef in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]", "prompt_tokens": 776, "completion_tokens": 449, "duration": 16.980847120285034}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 866, "completion_tokens": 450, "duration": 20.536323070526123}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 821, "completion_tokens": 438, "duration": 20.246307373046875}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 783, "completion_tokens": 469, "duration": 22.424614906311035}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 792, "completion_tokens": 409, "duration": 30.945440530776978}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1081, "completion_tokens": 515, "duration": 25.916491985321045}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n            \n    if smallest_even == float('inf'):\n        return []\n    \n    return [smallest_even, smallest_index]", "prompt_tokens": 1364, "completion_tokens": 643, "duration": 29.05773377418518}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n\n    result = -1\n    for key, value in count.items():\n        if key > value and value > result:\n            result = value\n\n    return result", "prompt_tokens": 862, "completion_tokens": 418, "duration": 19.17517638206482}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 870, "completion_tokens": 488, "duration": 20.86122155189514}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 938, "completion_tokens": 603, "duration": 28.506169080734253}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1180, "completion_tokens": 563, "duration": 29.5988609790802}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 1056, "completion_tokens": 613, "duration": 33.262006759643555}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1000, "completion_tokens": 502, "duration": 23.491944074630737}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 774, "completion_tokens": 554, "duration": 27.679457664489746}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x <= 0 or n <= 0 or x == 1:\n        return False\n    return x == n**int(round(math.log(x, n)))\n\nimport math", "prompt_tokens": 1751, "completion_tokens": 1092, "duration": 66.79803562164307}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 1180, "completion_tokens": 606, "duration": 25.72115969657898}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(digit.upper() in primes for digit in num)\n    return count", "prompt_tokens": 1125, "completion_tokens": 393, "duration": 64.97511649131775}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 828, "completion_tokens": 390, "duration": 22.877371311187744}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n\n    return True", "prompt_tokens": 926, "completion_tokens": 557, "duration": 30.09421682357788}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1191, "completion_tokens": 707, "duration": 36.178767681121826}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 723, "completion_tokens": 439, "duration": 20.373228549957275}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)\n    return count", "prompt_tokens": 723, "completion_tokens": 494, "duration": 29.76735782623291}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 754, "completion_tokens": 331, "duration": 20.50446581840515}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)", "prompt_tokens": 675, "completion_tokens": 420, "duration": 19.07204556465149}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word, key=lambda x: (x.isdigit(), x)))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 966, "completion_tokens": 584, "duration": 26.01085615158081}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                res.append((i, j))\n    return sorted(res, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with the provided example to ensure basic functionality\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list, expecting an empty list of coordinates\nassert get_row([], 1) == []\n\n# Test with nested lists where some are empty and others have the target number\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with target number not present in any row, expecting an empty list\nassert get_row([[1,2,3], [4,5,6], [7,8,9]], 10) == []\n\n# Test where the target number is present multiple times in a single row\nassert get_row([[1,1,1], [2,2,2], [3,3,3]], 1) == [(0, 2), (0, 1), (0, 0)]\n\n# Test where the target number is the only element in each row\nassert get_row([[1], [1], [1]], 1) == [(0, 0), (1, 0), (2, 0)]\n\n# Test with a larger number as the target to check if function scales\nassert get_row([[100, 200], [300, 400], [500, 600]], 500) == [(2, 0)]\n\n# Test to check if function correctly sorts coordinates by rows in ascending order and columns in descending order\nassert get_row([[1, 2, 3, 1], [4, 1, 1, 5], [1, 1]], 1) == [(0, 3), (0, 0), (1, 2), (1, 1), (2, 1), (2, 0)]\n\n# Test with negative numbers to ensure it handles all types of integers\nassert get_row([[-1, -2, -3], [-4, -1, -6], [-1, -8]], -1) == [(0, 0), (1, 1), (2, 0)]\n\n# Test with a mix of positive and negative numbers including the target\nassert get_row([[1, -1, 2], [2, -2, -1], [-1, 3]], -1) == [(0, 1), (1, 2), (2, 0)]", "prompt_tokens": 1283, "completion_tokens": 1226, "duration": 53.32953643798828}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def is_even_sum(arr):\n        return sum(arr[0], arr[-1]) % 2 == 0\n\n    sorted_arr = sorted(array)\n    return sorted_arr if is_even_sum(array) else sorted_arr[::-1]", "prompt_tokens": 1204, "completion_tokens": 672, "duration": 34.411121129989624}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            encrypted += chr((ord(char) - base + 20) % 26 + base)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 930, "completion_tokens": 601, "duration": 26.85947871208191}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 780, "completion_tokens": 400, "duration": 18.582895755767822}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    return sum(1 for sentence in re.split('[.?!]', S) if sentence.strip().startswith(\"I\"))", "prompt_tokens": 1322, "completion_tokens": 755, "duration": 28.224156141281128}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 827, "completion_tokens": 429, "duration": 19.440093278884888}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.lower() in vowels:\n            encoded += chr(ord(char) + 2).upper()\n        else:\n            encoded += char.swapcase()\n    return encoded", "prompt_tokens": 726, "completion_tokens": 386, "duration": 16.49510431289673}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n\n# Testing with a list that includes the largest prime in the middle and multiple primes\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n\n# Testing with a list that includes a very large prime at the beginning\nassert skjkasdkd([4597,1,0,1,8,2,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n\n# Testing with a list that includes large numbers, but the largest prime is relatively small\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\n\n# Testing with a list that includes only two-digit numbers and the largest prime is at the beginning\nassert skjkasdkd([71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) == 11\n\n# Testing with a list that includes a prime square (81) which is not a prime itself\nassert skjkasdkd([0,81,12,3,1,21]) == 3\n\n# Testing with a list that includes single-digit numbers only, including the largest prime at the end\nassert skjkasdkd([0,8,1,2,1,7]) == 7\n\n# Testing with an empty list, expecting a default return value (assuming it's 0 for no primes found)\nassert skjkasdkd([]) == 0\n\n# Testing with a list that includes negative numbers and a prime\nassert skjkasdkd([-10, -3, 5, -1, 7]) == 7\n\n# Testing with a list that includes the same prime number multiple times\nassert skjkasdkd([7, 7, 7, 7, 7]) == 7\n\n# Testing with a list that includes only one prime number\nassert skjkasdkd([13]) == 4\n\n# Testing with a list that includes a large prime number with all the same digits\nassert skjkasdkd([0, 1, 2, 1117]) == 10\n\n# Testing with a list that includes a very large number that is not prime and a smaller prime\nassert skjkasdkd([12345678901234567890, 19]) == 10", "prompt_tokens": 1329, "completion_tokens": 1250, "duration": 86.69655323028564}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 1113, "completion_tokens": 640, "duration": 31.005290031433105}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n\nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == []\nassert count_up_to(3) == [2]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\nassert count_up_to(-10) == []\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]", "prompt_tokens": 893, "completion_tokens": 702, "duration": 24.113314628601074}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 860, "completion_tokens": 511, "duration": 28.611051321029663}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 767, "completion_tokens": 495, "duration": 19.817591905593872}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 1025, "completion_tokens": 569, "duration": 24.801217794418335}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 1065, "completion_tokens": 686, "duration": 36.856173038482666}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 872, "completion_tokens": 476, "duration": 21.24471426010132}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            max_even = i\n    return max_even", "prompt_tokens": 920, "completion_tokens": 600, "duration": 42.11681938171387}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(average))[2:]", "prompt_tokens": 2907, "completion_tokens": 1768, "duration": 71.28263735771179}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 861, "completion_tokens": 524, "duration": 20.4310622215271}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [num for num in arr if num in valid_numbers]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 1264, "completion_tokens": 690, "duration": 44.66787600517273}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 1003, "completion_tokens": 655, "duration": 26.04839038848877}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    count_even = 0\n    count_odd = 0\n    \n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    \n    return (count_even, count_odd)", "prompt_tokens": 1025, "completion_tokens": 518, "duration": 22.633086442947388}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        num_str = str(abs(num))\n        if sum(int(digit) for digit in num_str) > 0:\n            count += 1\n    return count", "prompt_tokens": 769, "completion_tokens": 394, "duration": 18.372164011001587}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    n = len(arr)\n\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n\n    return False", "prompt_tokens": 1269, "completion_tokens": 554, "duration": 32.57921814918518}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 1256, "completion_tokens": 721, "duration": 30.084810972213745}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    \n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 844, "completion_tokens": 431, "duration": 17.720167636871338}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join([char for char in s if char not in c])\n    return res, res == res[::-1]", "prompt_tokens": 1205, "completion_tokens": 736, "duration": 33.04400897026062}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(int(d) % 2 == 1 for d in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{s}ng {odd_count} of the {s}nput.\")\n    return result", "prompt_tokens": 1195, "completion_tokens": 740, "duration": 31.986884117126465}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 803, "completion_tokens": 502, "duration": 21.470539093017578}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    def count_moves(well, capacity):\n        return math.ceil(sum(well) / capacity)\n    \n    total_moves = 0\n    for well in grid:\n        total_moves += count_moves(well, capacity)\n    \n    return total_moves", "prompt_tokens": 1370, "completion_tokens": 607, "duration": 36.58998513221741}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1022, "completion_tokens": 527, "duration": 31.937347173690796}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result", "prompt_tokens": 973, "completion_tokens": 496, "duration": 24.7272367477417}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 974, "completion_tokens": 587, "duration": 22.791823625564575}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    return 'Yes'", "prompt_tokens": 981, "completion_tokens": 531, "duration": 31.815849781036377}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1224, "completion_tokens": 625, "duration": 33.50372290611267}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 737, "completion_tokens": 399, "duration": 17.830769538879395}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 954, "completion_tokens": 546, "duration": 31.630473613739014}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1312, "completion_tokens": 741, "duration": 81.39407300949097}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1279, "completion_tokens": 773, "duration": 30.753214836120605}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 903, "completion_tokens": 500, "duration": 25.5039119720459}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n    \n    return lst == sorted(lst)", "prompt_tokens": 1144, "completion_tokens": 527, "duration": 20.905447006225586}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1263, "completion_tokens": 703, "duration": 29.136823177337646}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        product *= 0 if num == 0 else num // abs(num)\n        sum_magnitudes += abs(num)\n\n    return product * sum_magnitudes", "prompt_tokens": 968, "completion_tokens": 614, "duration": 36.66027879714966}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    start_val = min(min(row) for row in grid)\n    path = [start_val]\n    current = start_val\n    seen = set()\n    seen.add(start_val)\n\n    while len(path) < k:\n        row = -1\n        col = -1\n        for r in range(N):\n            for c in range(N):\n                if grid[r][c] == current:\n                    row = r\n                    col = c\n                    break\n            if row != -1:\n                break\n\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_r, new_c = row + dr, col + dc\n            if 0 <= new_r < N and 0 <= new_c < N:\n                new_val = grid[new_r][new_c]\n                if new_val not in seen:\n                    path.append(new_val)\n                    seen.add(new_val)\n                    current = new_val\n                    break\n\n    return path", "prompt_tokens": 1704, "completion_tokens": 958, "duration": 38.660080909729004}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n    a, b, c = 1, 1, 3\n    for i in range(1, n + 1):\n        tribonacci.append(c)\n        if i % 2 == 0:\n            c = a + b\n        else:\n            a, b, c = b, c, a + b + c\n    return tribonacci", "prompt_tokens": 1136, "completion_tokens": 588, "duration": 27.129489183425903}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits_product *= digit\n        n //= 10\n    return odd_digits_product", "prompt_tokens": 699, "completion_tokens": 435, "duration": 28.900115966796875}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = 0\n    closing_brackets = 0\n    for char in string:\n        if char == '[':\n            opening_brackets += 1\n        elif char == ']' and opening_brackets > closing_brackets:\n            closing_brackets += 1\n    return opening_brackets > 0 and closing_brackets == opening_brackets", "prompt_tokens": 1915, "completion_tokens": 1093, "duration": 37.1296284198761}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x)**2 for x in lst])\n\n# Test with positive integers\nassert sum_squares([1, 2, 3]) == 14\n\n# Test with perfect squares\nassert sum_squares([1, 4, 9]) == 98\n\n# Test with a mix of odd and even numbers\nassert sum_squares([1, 3, 5, 7]) == 84\n\n# Test with floating point numbers\nassert sum_squares([1.4, 4.2, 0]) == 29\n\n# Test with negative and positive floating point numbers\nassert sum_squares([-2.4, 1, 1]) == 6", "prompt_tokens": 2989, "completion_tokens": 1640, "duration": 47.68112540245056}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.rstrip()[-1].isalpha() and txt.rstrip()[-1] not in set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ ')", "prompt_tokens": 1546, "completion_tokens": 894, "duration": 27.462234497070312}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 844, "completion_tokens": 507, "duration": 22.31577730178833}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_int = max((num for num in lst if num < 0), default=None)\n    pos_int = min((num for num in lst if num > 0), default=None)\n    return (neg_int, pos_int)", "prompt_tokens": 908, "completion_tokens": 506, "duration": 30.690066814422607}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and ',' in b:\n        b = float(b.replace(',', '.'))\n    if a == b:\n        return None\n    return a if a > b else b", "prompt_tokens": 1112, "completion_tokens": 720, "duration": 40.48008179664612}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and (n - 8) % 4 == 0", "prompt_tokens": 713, "completion_tokens": 405, "duration": 17.92132568359375}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        return \"Invalid input. n should be greater than 0.\"\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 833, "completion_tokens": 540, "duration": 41.02886366844177}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 821, "completion_tokens": 457, "duration": 21.11682438850403}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    file_name = file_name.strip()\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if ext.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1166, "completion_tokens": 672, "duration": 28.227511167526245}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1025, "completion_tokens": 583, "duration": 23.943647623062134}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 917, "completion_tokens": 534, "duration": 26.93519115447998}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1147, "completion_tokens": 717, "duration": 36.3906033039093}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 1053, "completion_tokens": 671, "duration": 28.7026207447052}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 901, "completion_tokens": 561, "duration": 23.72882080078125}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 954, "completion_tokens": 567, "duration": 24.30346965789795}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n        \n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 999, "completion_tokens": 523, "duration": 19.11154580116272}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1677, "completion_tokens": 885, "duration": 33.6030056476593}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 907, "completion_tokens": 636, "duration": 25.712048292160034}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 884, "completion_tokens": 466, "duration": 31.091020822525024}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1157, "completion_tokens": 554, "duration": 23.17181420326233}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1148, "completion_tokens": 490, "duration": 26.318289041519165}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n\n    return b in a or is_rotation(a, b)", "prompt_tokens": 893, "completion_tokens": 505, "duration": 20.81772541999817}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 642, "completion_tokens": 405, "duration": 24.331382036209106}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 970, "completion_tokens": 771, "duration": 35.090277910232544}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 1004, "completion_tokens": 656, "duration": 27.531135320663452}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -words.index(x) if x in words else float('inf')))", "prompt_tokens": 1816, "completion_tokens": 1018, "duration": 28.449406385421753}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1287, "completion_tokens": 600, "duration": 24.697928190231323}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1375, "completion_tokens": 889, "duration": 83.22195720672607}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 719, "completion_tokens": 399, "duration": 26.54426336288452}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 724, "completion_tokens": 420, "duration": 17.84372043609619}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 892, "completion_tokens": 535, "duration": 23.67732548713684}
