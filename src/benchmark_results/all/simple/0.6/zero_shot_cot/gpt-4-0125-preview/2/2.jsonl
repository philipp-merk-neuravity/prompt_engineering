{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 898, "completion_tokens": 534, "duration": 33.12413191795349}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    res = []\n    temp = ''\n    for char in paren_string:\n        if char in '()':\n            temp += char\n            if temp.count('(') == temp.count(')'):\n                res.append(temp)\n                temp = ''\n    return res", "prompt_tokens": 869, "completion_tokens": 529, "duration": 23.501179456710815}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 740, "completion_tokens": 408, "duration": 20.521392822265625}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 878, "completion_tokens": 511, "duration": 43.21257996559143}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 790, "completion_tokens": 424, "duration": 33.43354344367981}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 967, "completion_tokens": 656, "duration": 34.17780876159668}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            max_level = max(max_level, level)\n        elif char == ')':\n            level -= 1\n\n    return [max_level]\n\n# Test with single group having no nesting\nassert parse_nested_parens('()') == [1]\n\n# Test with single group having one level of nesting\nassert parse_nested_parens('(())') == [2]\n\n# Test with multiple groups having different levels of nesting\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n\n# Test with empty string, expecting an empty list\nassert parse_nested_parens('') == []\n\n# Test with single group having a very deep level of nesting\nassert parse_nested_parens('((((()))))') == [5]\n\n# Test with multiple groups where all groups have the same level of nesting\nassert parse_nested_parens('() () ()') == [1, 1, 1]\n\n# Test with spaces but no valid groups, expecting an empty list\nassert parse_nested_parens('      ') == []\n\n# Test with a complex scenario with varying nesting levels\nassert parse_nested_parens('(()(())) (()) (((()))) ()') == [3, 2, 4, 1]\n\n# Test with nested parentheses that are adjacent without spaces\n# This is a boundary case, and depending on implementation, might either be considered a single group or error\n# Here, assuming it's treated as a single group\nassert parse_nested_parens('(())(())') == [2]\n\n# Test with invalid characters included, assuming function only considers valid parentheses\nassert parse_nested_parens('((a)())') == [2]", "prompt_tokens": 3442, "completion_tokens": 2626, "duration": 122.29128670692444}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 949, "completion_tokens": 619, "duration": 28.382949829101562}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum(numbers), product", "prompt_tokens": 900, "completion_tokens": 560, "duration": 26.32547354698181}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(num, max_so_far)\n        result.append(max_so_far)\n\n    return result", "prompt_tokens": 917, "completion_tokens": 614, "duration": 46.42435908317566}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 1013, "completion_tokens": 648, "duration": 33.07429909706116}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 776, "completion_tokens": 504, "duration": 22.807979106903076}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 705, "completion_tokens": 358, "duration": 18.11634635925293}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 677, "completion_tokens": 391, "duration": 17.893309354782104}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 587, "completion_tokens": 328, "duration": 14.228505611419678}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 819, "completion_tokens": 354, "duration": 14.85034728050232}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 653, "completion_tokens": 351, "duration": 15.057538509368896}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [beats[note] for note in notes]\n\n# Test with a single whole note\nassert parse_music('o') == [4], \"Test with a single whole note failed.\"\n\n# Test with a single half note\nassert parse_music('o|') == [2], \"Test with a single half note failed.\"\n\n# Test with a single quarter note\nassert parse_music('.|') == [1], \"Test with a single quarter note failed.\"\n\n# Test with a mix of whole, half, and quarter notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Test with a mix of different notes failed.\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Test with multiple whole notes failed.\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Test with multiple half notes failed.\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Test with multiple quarter notes failed.\"\n\n# Test with an empty string\nassert parse_music('') == [], \"Test with an empty string failed.\"\n\n# Test with spaces but no notes\nassert parse_music('     ') == [], \"Test with spaces but no notes failed.\"\n\n# Test with a complex mixed pattern\nassert parse_music('o| .| o o| o .| .| o|') == [2, 1, 4, 2, 4, 1, 1, 2], \"Test with a complex mixed pattern failed.\"\n\n# Test with notes separated by more than one space\nassert parse_music('o  o|   .|') == [4, 2, 1], \"Test with notes separated by more than one space failed.\"\n\n# Test with leading and trailing spaces\nassert parse_music(' o o| .| ') == [4, 2, 1], \"Test with leading and trailing spaces failed.\"", "prompt_tokens": 988, "completion_tokens": 990, "duration": 38.581525802612305}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 821, "completion_tokens": 526, "duration": 22.707134246826172}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 718, "completion_tokens": 449, "duration": 19.81414532661438}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return result", "prompt_tokens": 1085, "completion_tokens": 675, "duration": 30.122337102890015}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 932, "completion_tokens": 560, "duration": 40.255736112594604}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 745, "completion_tokens": 418, "duration": 21.026771068572998}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 513, "completion_tokens": 263, "duration": 14.29703140258789}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 576, "completion_tokens": 341, "duration": 22.210792064666748}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 897, "completion_tokens": 542, "duration": 25.63571810722351}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 822, "completion_tokens": 510, "duration": 22.606839418411255}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 598, "completion_tokens": 354, "duration": 16.742162466049194}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 697, "completion_tokens": 426, "duration": 21.246663331985474}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 815, "completion_tokens": 497, "duration": 21.907188653945923}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 693, "completion_tokens": 309, "duration": 21.191327810287476}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 647, "completion_tokens": 323, "duration": 17.284183263778687}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    return -xs[0] / xs[1] if len(xs) == 2 else None", "prompt_tokens": 1172, "completion_tokens": 540, "duration": 38.225460052490234}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1082, "completion_tokens": 636, "duration": 27.126060724258423}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 760, "completion_tokens": 448, "duration": 22.714317321777344}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 637, "completion_tokens": 306, "duration": 15.705209970474243}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 749, "completion_tokens": 468, "duration": 26.564680099487305}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = sorted([x for x in l[::2]])\n    result = [None] * len(l)\n    result[::2] = even_indices\n    result[1::2] = l[1::2]\n    return result", "prompt_tokens": 1022, "completion_tokens": 655, "duration": 29.545652151107788}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 881, "completion_tokens": 543, "duration": 20.853346824645996}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 833, "completion_tokens": 612, "duration": 28.774285793304443}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 982, "completion_tokens": 548, "duration": 48.06877160072327}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1815, "completion_tokens": 869, "duration": 31.664779901504517}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 735, "completion_tokens": 355, "duration": 17.649585485458374}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 1004, "completion_tokens": 533, "duration": 23.997690200805664}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 790, "completion_tokens": 485, "duration": 19.308170318603516}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 643, "completion_tokens": 390, "duration": 19.02820086479187}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 907, "completion_tokens": 489, "duration": 24.426350355148315}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 809, "completion_tokens": 538, "duration": 24.327852964401245}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 715, "completion_tokens": 409, "duration": 20.957622528076172}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 927, "completion_tokens": 559, "duration": 32.881094455718994}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 709, "completion_tokens": 430, "duration": 22.23433518409729}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 828, "completion_tokens": 432, "duration": 21.674291133880615}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 796, "completion_tokens": 481, "duration": 21.430546760559082}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 509, "completion_tokens": 241, "duration": 13.72405219078064}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 812, "completion_tokens": 373, "duration": 19.863065242767334}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 680, "completion_tokens": 444, "duration": 27.613624334335327}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 760, "completion_tokens": 451, "duration": 21.555914163589478}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing", "prompt_tokens": 857, "completion_tokens": 566, "duration": 32.17572641372681}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 938, "completion_tokens": 557, "duration": 27.23021650314331}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 621, "completion_tokens": 360, "duration": 19.23753833770752}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 758, "completion_tokens": 409, "duration": 15.94562840461731}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 756, "completion_tokens": 455, "duration": 23.56766700744629}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 1732, "completion_tokens": 959, "duration": 46.10374712944031}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 917, "completion_tokens": 508, "duration": 28.256234169006348}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiou\"\n    s_lower = s.lower()\n    count = sum(1 for char in s_lower if char in vowels)\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 871, "completion_tokens": 491, "duration": 30.59844732284546}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 806, "completion_tokens": 494, "duration": 29.59237504005432}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 867, "completion_tokens": 484, "duration": 26.659905433654785}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1070, "completion_tokens": 504, "duration": 63.070812702178955}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [x for x in arr if x % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    index = arr.index(min_value)\n    return [min_value, index]", "prompt_tokens": 1223, "completion_tokens": 479, "duration": 23.43305468559265}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n\n    return result", "prompt_tokens": 960, "completion_tokens": 534, "duration": 23.885068893432617}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 900, "completion_tokens": 518, "duration": 23.69844150543213}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 923, "completion_tokens": 588, "duration": 46.73115110397339}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 1188, "completion_tokens": 581, "duration": 28.72030997276306}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return sum(1 for i in range(len(arr)//2) if arr[i] != arr[-i-1])", "prompt_tokens": 1039, "completion_tokens": 575, "duration": 25.965186595916748}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    \n    return lst1 if len1 <= len2 else lst2", "prompt_tokens": 1009, "completion_tokens": 496, "duration": 28.02367115020752}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                if p1 * p2 * p3 == a:\n                    return True\n    return False", "prompt_tokens": 840, "completion_tokens": 625, "duration": 28.50202775001526}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (n == 1 or round(math.log(x, n)).is_integer())\n\nimport math", "prompt_tokens": 1979, "completion_tokens": 1320, "duration": 46.99895000457764}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 691, "completion_tokens": 313, "duration": 17.103285312652588}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1176, "completion_tokens": 453, "duration": 26.10825514793396}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 969, "completion_tokens": 536, "duration": 26.45096516609192}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 877, "completion_tokens": 527, "duration": 38.668147802352905}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1325, "completion_tokens": 865, "duration": 36.87252974510193}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of prime length 5 (e.g., 'Hello')\nassert prime_length('Hello') == True\n\n# Test with a string of prime length 7 (e.g., 'abcdcba')\nassert prime_length('abcdcba') == True\n\n# Test with a string of non-prime length 6 (e.g., 'orange')\nassert prime_length('orange') == False\n\n# Test with an empty string, length 0 (not prime)\nassert prime_length('') == False\n\n# Test with a string of length 1 (not considered prime)\nassert prime_length('a') == False\n\n# Test with a string of prime length 2 (e.g., 'ok')\nassert prime_length('ok') == True\n\n# Test with a string of prime length 11 (e.g., 'mathematics')\nassert prime_length('mathematics') == True\n\n# Test with a string of non-prime length 9 (e.g., 'chocolate')\nassert prime_length('chocolate') == False\n\n# Test with a string of prime length 13 (e.g., 'abcdefghijklm')\nassert prime_length('abcdefghijklm') == True\n\n# Test with a string of non-prime length 10 (e.g., 'abcdefghij')\nassert prime_length('abcdefghij') == False\n\n# Test with a string of prime length 17 (long arbitrary string)\nassert prime_length('abcdefghijklmnopq') == True\n\n# Test with a string of prime length 19 (another long arbitrary string)\nassert prime_length('abcdefghijklmnopqrs') == True\n\n# Test with a string of non-prime length 15 (e.g., 'abcdefghijklmno')\nassert prime_length('abcdefghijklmno') == False\n\n# Test with a string of non-prime length 4 (e.g., 'true')\nassert prime_length('true') == False\n\n# Test with a very long string of non-prime length 100 (multiples of 10 are not prime)\nassert prime_length('a'*100) == False\n\n# Test with a very long string of prime length 97 (prime number)\nassert prime_length('a'*97) == True", "prompt_tokens": 792, "completion_tokens": 959, "duration": 47.681668758392334}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        raise ValueError(\"Invalid input\")\n    elif n < 0:\n        raise ValueError(\"Invalid input\")\n    else:\n        return 9 * 2 * 9 ** (n - 2) + 9 * 9 ** (n - 1)", "prompt_tokens": 896, "completion_tokens": 559, "duration": 20.697084188461304}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 790, "completion_tokens": 363, "duration": 16.282506227493286}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 763, "completion_tokens": 509, "duration": 24.98477339744568}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 1032, "completion_tokens": 635, "duration": 34.473721742630005}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coords = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coords.append((i, j))\n    coords.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coords", "prompt_tokens": 1401, "completion_tokens": 768, "duration": 32.78725242614746}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array) if (array[0] + array[-1]) % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1150, "completion_tokens": 599, "duration": 73.75926160812378}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            shifted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += shifted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 909, "completion_tokens": 615, "duration": 29.577845096588135}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = list(set(lst))\n    unique_elements.sort()\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    return unique_elements[1]", "prompt_tokens": 932, "completion_tokens": 545, "duration": 23.683046340942383}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    count = 0\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n            \n    return count", "prompt_tokens": 783, "completion_tokens": 447, "duration": 21.19138264656067}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 786, "completion_tokens": 387, "duration": 25.93466806411743}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2).upper()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 864, "completion_tokens": 523, "duration": 24.74123740196228}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(d) for d in str(n)])\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1264, "completion_tokens": 632, "duration": 27.572623014450073}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 875, "completion_tokens": 414, "duration": 18.401079416275024}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1045, "completion_tokens": 657, "duration": 41.46458387374878}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 712, "completion_tokens": 363, "duration": 20.06352949142456}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = \"AEIOU\"\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in vowels)", "prompt_tokens": 1304, "completion_tokens": 858, "duration": 27.794237852096558}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number % 1 >= 0.5:\n        return int(number) + 1 if number >= 0 else int(number) - 1\n    else:\n        return int(number)", "prompt_tokens": 1585, "completion_tokens": 898, "duration": 38.48159742355347}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 877, "completion_tokens": 492, "duration": 18.612823963165283}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(',') for word in s.replace(',', ' ').split() if word]\n\n# Test with basic input string separated by spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with input string separated by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with input string having both commas and spaces\nassert words_string(\"apple, banana, mango, orange\") == [\"apple\", \"banana\", \"mango\", \"orange\"]\n\n# Test with input string having a trailing space\nassert words_string(\"dog, cat, rabbit, \") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having a trailing comma\nassert words_string(\"dog, cat, rabbit,\") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having spaces before commas\nassert words_string(\"dog , cat , rabbit\") == [\"dog\", \"cat\", \"rabbit\"]\n\n# Test with input string having multiple spaces between words\nassert words_string(\"The   quick brown   fox\") == [\"The\", \"quick\", \"brown\", \"fox\"]\n\n# Test with input string having mixed spaces and commas irregularly\nassert words_string(\"Hello,   world  ,this,is ,a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with empty input string\nassert words_string(\"\") == []\n\n# Test with input string having only spaces\nassert words_string(\"     \") == []\n\n# Test with input string having only commas\nassert words_string(\",,,,\") == []\n\n# Test with input string that is a single word\nassert words_string(\"word\") == [\"word\"]", "prompt_tokens": 780, "completion_tokens": 754, "duration": 34.29597473144531}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 949, "completion_tokens": 632, "duration": 25.324585437774658}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 897, "completion_tokens": 474, "duration": 19.979907035827637}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 1109, "completion_tokens": 546, "duration": 24.88961172103882}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    numbers = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [numbers[num] for num in reversed_arr]", "prompt_tokens": 1223, "completion_tokens": 578, "duration": 27.42761516571045}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 909, "completion_tokens": 568, "duration": 35.44343137741089}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    count_odd = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n\n    return (count_even, count_odd)", "prompt_tokens": 1091, "completion_tokens": 587, "duration": 34.77444338798523}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 733, "completion_tokens": 337, "duration": 14.21988320350647}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_val = min(arr)\n    idx = arr.index(min_val)\n    return arr == sorted(arr[idx:] + arr[:idx])", "prompt_tokens": 1223, "completion_tokens": 488, "duration": 35.07444739341736}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    evens_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    evens_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if evens_lst1 <= evens_lst2 else \"NO\"", "prompt_tokens": 1142, "completion_tokens": 643, "duration": 29.861084461212158}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    count = {}\n    for letter in test.split():\n        count[letter] = count.get(letter, 0) + 1\n\n    max_count = max(count.values())\n    return {letter: count[letter] for letter in count if count[letter] == max_count}", "prompt_tokens": 926, "completion_tokens": 508, "duration": 33.40393376350403}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1080, "completion_tokens": 610, "duration": 24.470106601715088}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 1146, "completion_tokens": 729, "duration": 34.46397948265076}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 878, "completion_tokens": 587, "duration": 23.775888204574585}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    rows = len(grid)\n    cols = len(grid[0])\n    \n    total_water = sum(sum(row) for row in grid)\n    \n    buckets_needed = math.ceil(total_water / capacity)\n    \n    return buckets_needed", "prompt_tokens": 1475, "completion_tokens": 707, "duration": 29.967079877853394}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 964, "completion_tokens": 483, "duration": 23.77203130722046}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    \n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1001, "completion_tokens": 542, "duration": 21.859398365020752}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 1088, "completion_tokens": 702, "duration": 28.015865087509155}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                stack.append(char)\n        return not stack\n\n    first, second = lst\n    return 'Yes' if is_balanced(first + second) or is_balanced(second + first) else 'No'", "prompt_tokens": 945, "completion_tokens": 520, "duration": 31.368226051330566}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1195, "completion_tokens": 596, "duration": 26.28984832763672}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 873, "completion_tokens": 535, "duration": 26.23205828666687}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 872, "completion_tokens": 466, "duration": 22.34496760368347}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            result.append(n)\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1046, "completion_tokens": 469, "duration": 26.377554893493652}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n    \n    return True", "prompt_tokens": 1209, "completion_tokens": 703, "duration": 37.48074412345886}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1027, "completion_tokens": 625, "duration": 39.01299524307251}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n    return lst == sorted(lst)", "prompt_tokens": 1957, "completion_tokens": 1000, "duration": 44.25889611244202}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1209, "completion_tokens": 654, "duration": 27.761387825012207}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 907, "completion_tokens": 554, "duration": 25.11189913749695}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    N = len(grid)\n    def neighbors(i, j):\n        for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= x < N and 0 <= y < N:\n                yield x, y\n\n    def paths():\n        for path in itertools.permutations(range(N * N), k):\n            if path[0] == grid[0][0]:\n                i, j = divmod(path[0], N)\n                for pos in path[1:]:\n                    x, y = divmod(pos, N)\n                    if (x, y) in neighbors(i, j):\n                        i, j = x, y\n                    else:\n                        break\n                else:\n                    yield path\n\n    return min(paths())", "prompt_tokens": 1696, "completion_tokens": 908, "duration": 46.73429346084595}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        else:\n            tribonacci.append(1 + i // 2)\n    \n    return tribonacci", "prompt_tokens": 1119, "completion_tokens": 578, "duration": 22.709339380264282}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 607, "completion_tokens": 328, "duration": 14.918609619140625}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 0", "prompt_tokens": 771, "completion_tokens": 374, "duration": 63.60005187988281}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (1 if num % 1 != 0 else 0)) ** 2\n    return total", "prompt_tokens": 961, "completion_tokens": 515, "duration": 29.19134783744812}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and not txt.split()[-1].isalpha()", "prompt_tokens": 887, "completion_tokens": 461, "duration": 18.609962701797485}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 688, "completion_tokens": 351, "duration": 24.809802055358887}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 893, "completion_tokens": 521, "duration": 26.546343088150024}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    elif type(a) == float and type(b) == float:\n        return max(a, b)\n    elif (type(a) == int and type(b) == float) or (type(a) == float and type(b) == int):\n        return max(float(a), float(b))\n    elif (type(a) == int and (\",\" in b or \".\" in b)) or (type(b) == int and (\",\" in a or \".\" in a)):\n        return max(float(a), float(b), key=float)\n    else:\n        return None", "prompt_tokens": 1024, "completion_tokens": 704, "duration": 32.912251234054565}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 677, "completion_tokens": 364, "duration": 21.5372793674469}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        return None\n    result = 1\n    while n > 0:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        result *= fact\n        n -= 1\n    return result", "prompt_tokens": 1003, "completion_tokens": 702, "duration": 32.71526265144348}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n                consecutive_spaces = 0\n        else:\n            if consecutive_spaces > 0:\n                result.append('_')\n                consecutive_spaces = 0\n            result.append(char)\n    if consecutive_spaces > 0:\n        result.append('-')\n    return ''.join(result)", "prompt_tokens": 769, "completion_tokens": 481, "duration": 20.665015935897827}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha() or ext not in ['txt', 'exe', 'dll'] or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1095, "completion_tokens": 568, "duration": 32.396180629730225}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 986, "completion_tokens": 535, "duration": 22.949321031570435}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def prime_length_words(words):\n        return ' '.join([word for word in words.split() if is_prime(len(word)])\n\n    return prime_length_words(sentence)", "prompt_tokens": 3400, "completion_tokens": 2063, "duration": 55.466978311538696}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 1058, "completion_tokens": 624, "duration": 42.21145820617676}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))", "prompt_tokens": 967, "completion_tokens": 602, "duration": 40.5036940574646}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = sum(1 for num in nums if num > 10 and is_odd(num))\n    return count", "prompt_tokens": 868, "completion_tokens": 514, "duration": 21.351409912109375}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 966, "completion_tokens": 547, "duration": 28.49155831336975}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 1061, "completion_tokens": 578, "duration": 31.259597301483154}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1073, "completion_tokens": 545, "duration": 25.884440422058105}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 772, "completion_tokens": 478, "duration": 21.854498624801636}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1505, "completion_tokens": 858, "duration": 29.90887975692749}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - guess) for score, guess in zip(game, guess)]", "prompt_tokens": 1184, "completion_tokens": 570, "duration": 34.65632390975952}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        if strength >= max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 2027, "completion_tokens": 1019, "duration": 37.44172191619873}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n    \n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1663, "completion_tokens": 1064, "duration": 39.945040702819824}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 702, "completion_tokens": 461, "duration": 32.093088150024414}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_dict.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n            \n    return result.lower()", "prompt_tokens": 826, "completion_tokens": 589, "duration": 33.68960618972778}
{"task_id": "HumanEval/157", "generated_code": "import math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 834, "completion_tokens": 485, "duration": 23.0785813331604}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    def first_lexicographical(words):\n        return min(words)\n\n    if not words:\n        return \"\"\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = unique_chars(word)\n        if unique_count > max_unique or (unique_count == max_unique and word < max_word):\n            max_unique = unique_count\n            max_word = word\n\n    return max_word", "prompt_tokens": 786, "completion_tokens": 469, "duration": 22.80861496925354}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1192, "completion_tokens": 505, "duration": 24.324520587921143}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1216, "completion_tokens": 735, "duration": 35.05223989486694}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    if new_s.isalpha():\n        return new_s[::-1]\n    else:\n        return new_s", "prompt_tokens": 745, "completion_tokens": 428, "duration": 20.53154468536377}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 714, "completion_tokens": 413, "duration": 17.16017436981201}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 869, "completion_tokens": 512, "duration": 23.996188402175903}
