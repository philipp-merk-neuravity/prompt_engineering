{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list to ensure that any close elements are adjacent\n    numbers.sort()\n    # Iterate through the sorted list, comparing each element with the next\n    for i in range(len(numbers) - 1):\n        # Check if the difference between consecutive elements is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            # If a pair of elements closer than the threshold is found, return True\n            return True\n    # If no such pair is found, return False\n    return False", "prompt_tokens": 163, "completion_tokens": 137, "duration": 5.725926637649536}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    # Initialize an empty list to store the separated groups\n    groups = []\n    \n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n    \n    # Initialize an empty string to build the current group\n    current_group = ''\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the character is an opening parenthesis, increment the balance\n        if char == '(':\n            balance += 1\n        # If the character is a closing parenthesis, decrement the balance\n        elif char == ')':\n            balance -= 1\n        \n        # If the balance is 0, we have a complete group\n        if balance == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group to an empty string for the next group\n            current_group = ''\n    \n    # Return the list of separated groups\n    return groups", "prompt_tokens": 154, "completion_tokens": 259, "duration": 11.437907218933105}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Subtract the integer part of the number from the original number to get the decimal part\n    return number - int(number)", "prompt_tokens": 125, "completion_tokens": 40, "duration": 2.016328811645508}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize the balance to 0\n    balance = 0\n    # Iterate over each operation in the operations list\n    for operation in operations:\n        # Update the balance by adding the current operation\n        balance += operation\n        # Check if the balance falls below zero\n        if balance < 0:\n            # If balance is below zero, return True immediately\n            return True\n    # If the loop completes without the balance falling below zero, return False\n    return False", "prompt_tokens": 158, "completion_tokens": 122, "duration": 17.142091989517212}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    # Calculate the absolute difference between each number and the mean, then take the average\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 156, "completion_tokens": 81, "duration": 2.812471389770508}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the numbers list\n    for i, num in enumerate(numbers):\n        # Append the current number to the result list\n        result.append(num)\n        # Check if it's not the last element, then append the delimeter\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 131, "completion_tokens": 112, "duration": 5.617109060287476}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to process each group separately\n    groups = paren_string.split()\n    \n    # Initialize an empty list to hold the maximum depth of each group\n    max_depths = []\n    \n    # Iterate through each group to calculate its maximum depth\n    for group in groups:\n        # Initialize a counter to keep track of current depth\n        current_depth = 0\n        # Initialize a variable to keep track of maximum depth\n        max_depth = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increase current depth\n            if char == '(':\n                current_depth += 1\n                # Update max_depth if current_depth is greater than max_depth\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            # If the character is a closing parenthesis, decrease current depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # After processing the group, append its max_depth to the list\n        max_depths.append(max_depth)\n    \n    # Return the list of maximum depths\n    return max_depths", "prompt_tokens": 151, "completion_tokens": 262, "duration": 11.17491102218628}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the current string contains the substring\n        if substring in string:\n            # If so, append it to the filtered_strings list\n            filtered_strings.append(string)\n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 113, "duration": 6.8661439418792725}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum to 0\n    sum_of_numbers = 0\n    # Initialize product to 1\n    product_of_numbers = 1\n    \n    # Iterate through each number in the list\n    for number in numbers:\n        # Add the current number to the sum\n        sum_of_numbers += number\n        # Multiply the current number to the product\n        product_of_numbers *= number\n    \n    # Return the sum and product as a tuple\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 149, "completion_tokens": 129, "duration": 5.291654348373413}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling max values\n    rolling_max_values = []\n    # Initialize the current max value as negative infinity to ensure any number will be larger\n    current_max = float('-inf')\n    # Iterate through each number in the input list\n    for number in numbers:\n        # Update the current max value if the current number is greater than the current max\n        current_max = max(current_max, number)\n        # Append the current max value to the rolling max values list\n        rolling_max_values.append(current_max)\n    # Return the list of rolling max values\n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 149, "duration": 6.791587591171265}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    # Check if the string is equal to its reverse\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    # If the string is already a palindrome, return it as is\n    if is_palindrome(string):\n        return string\n    \n    # Start from the end of the string and move backwards to find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        # Check if the current suffix is a palindrome\n        if is_palindrome(string[-i:]):\n            # Find the prefix that is not part of the palindrome\n            prefix = string[:-i]\n            # Return the original string plus the reverse of the non-palindromic prefix\n            return string + prefix[::-1]\n    \n    # If no palindromic suffix is found, the entire string is not a palindrome. \n    # Return the original string plus its reverse minus the first character to avoid duplication\n    return string + string[-2::-1]", "prompt_tokens": 182, "completion_tokens": 225, "duration": 8.975606203079224}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert both input strings to integers using base 2, to perform bitwise XOR operation.\n    xor_result = int(a, 2) ^ int(b, 2)\n    # Convert the result back to binary using bin(), remove the '0b' prefix, and return.\n    return bin(xor_result)[2:]", "prompt_tokens": 115, "completion_tokens": 85, "duration": 3.157517194747925}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Check if the input list is empty\n    if not strings:\n        return None\n    \n    # Initialize a variable to keep track of the longest string found\n    longest_string = strings[0]\n    \n    # Loop through each string in the list\n    for string in strings:\n        # If the current string is longer than the longest string found so far,\n        # update the longest string\n        if len(string) > len(longest_string):\n            longest_string = string\n            \n    # Return the longest string found\n    return longest_string", "prompt_tokens": 141, "completion_tokens": 133, "duration": 6.098782777786255}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # While b is not equal to zero\n    while b:\n        # Calculate the remainder of a divided by b\n        a, b = b, a % b\n    # Return a, which now holds the greatest common divisor\n    return a", "prompt_tokens": 110, "completion_tokens": 73, "duration": 14.248640060424805}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    # Loop through the string using range to get each prefix\n    for i in range(len(string)):\n        # Append the prefix up to the current index + 1 (to include the current character)\n        prefixes.append(string[:i+1])\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 90, "duration": 3.871704578399658}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using a range and list comprehension\n    numbers = [str(i) for i in range(n + 1)]\n    # Join the list of strings with a space and return\n    return ' '.join(numbers)", "prompt_tokens": 108, "completion_tokens": 69, "duration": 3.3818347454071045}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n    # Use a set to store distinct characters since sets do not allow duplicates\n    distinct_characters = set(string)\n    # Return the number of distinct characters\n    return len(distinct_characters)", "prompt_tokens": 110, "completion_tokens": 72, "duration": 2.754441976547241}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the durations of each note\n    durations = []\n    \n    # Loop through each note in the notes list\n    for note in notes:\n        # Check if the note is a whole note ('o'), add 4 to the durations list\n        if note == 'o':\n            durations.append(4)\n        # Check if the note is a half note ('o|'), add 2 to the durations list\n        elif note == 'o|':\n            durations.append(2)\n        # Check if the note is a quarter note ('.|'), add 1 to the durations list\n        elif note == '.|':\n            durations.append(1)\n    \n    # Return the list of durations\n    return durations", "prompt_tokens": 211, "completion_tokens": 196, "duration": 5.96250319480896}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a counter to keep track of occurrences\n    count = 0\n    # Initialize the starting index to 0\n    start = 0\n    \n    while True:\n        # Find the first occurrence of the substring after the current start index\n        start = string.find(substring, start)\n        # If the substring is not found, break the loop\n        if start == -1: \n            break\n        # Increment the counter for each found occurrence\n        count += 1\n        # Move the start index by 1 to find overlapping occurrences\n        start += 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 145, "duration": 4.742954730987549}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a mapping of number words to their numeric values\n    word_to_num = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    words = numbers.split()\n    \n    # Sort the list of words based on their numeric value using the mapping\n    sorted_words = sorted(words, key=lambda word: word_to_num[word])\n    \n    # Join the sorted list of words back into a single string with spaces\n    sorted_numbers = ' '.join(sorted_words)\n    \n    return sorted_numbers", "prompt_tokens": 144, "completion_tokens": 183, "duration": 5.895803689956665}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # First, sort the list to make finding the closest pair easier.\n    numbers.sort()\n    # Initialize variables to store the closest pair found and the smallest difference found so far.\n    # We start with the first two elements as the initial pair and their difference as the initial smallest difference.\n    closest_pair = (numbers[0], numbers[1])\n    smallest_difference = abs(numbers[1] - numbers[0])\n    # Iterate through the sorted list, comparing each pair of adjacent elements.\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current pair of elements.\n        current_difference = abs(numbers[i + 1] - numbers[i])\n        # If the current difference is smaller than the smallest difference found so far,\n        # update the smallest difference and the closest pair.\n        if current_difference < smallest_difference:\n            smallest_difference = current_difference\n            closest_pair = (numbers[i], numbers[i + 1])\n    # Return the closest pair found.\n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 236, "duration": 9.320887327194214}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # First, find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Then, calculate the range of the original list\n    range_val = max_val - min_val\n    \n    # Now, transform each number in the list to fit the 0-1 scale\n    # by subtracting the min value and dividing by the range\n    rescaled_numbers = [(x - min_val) / range_val for x in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 133, "duration": 5.555016994476318}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store the integers\n    integers = []\n    # Loop through each value in the input list\n    for value in values:\n        # Check if the current value is an integer\n        if isinstance(value, int):\n            # If it is an integer, append it to the integers list\n            integers.append(value)\n    # Return the list containing only integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 107, "duration": 5.6655051708221436}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Initialize a counter variable to 0. This will be used to count the characters.\n    count = 0\n    \n    # Iterate through each character in the string.\n    for char in string:\n        # For each character, increment the counter by 1.\n        count += 1\n        \n    # After the loop, return the count which represents the length of the string.\n    return count", "prompt_tokens": 83, "completion_tokens": 94, "duration": 4.710326910018921}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Starting from n-1, as the largest divisor smaller than n\n    for i in range(n-1, 0, -1):\n        # If n is divisible by i, then i is the largest divisor\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 75, "duration": 15.432814836502075}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the factors\n    factors = []\n    # Initialize a variable to start checking for factors from the smallest prime number\n    divisor = 2\n    \n    # Use a while loop to divide n by the divisor as long as n is greater than 1\n    while n > 1:\n        # Use a while loop to check if the current divisor is a factor of n\n        while n % divisor == 0:\n            # If it is, append the divisor to the factors list\n            factors.append(divisor)\n            # Divide n by the divisor to remove this factor from n\n            n //= divisor\n        # Move to the next possible divisor\n        divisor += 1\n    \n    # Return the list of factors\n    return factors", "prompt_tokens": 165, "completion_tokens": 179, "duration": 7.980942964553833}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Create a dictionary to keep track of the count of each number\n    count_dict = {}\n    # Iterate over the list of numbers\n    for num in numbers:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # Else, initialize its count as 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a new list to store the result\n    result = []\n    # Iterate over the original list of numbers\n    for num in numbers:\n        # Check if the count of the number is 1 in the dictionary\n        if count_dict[num] == 1:\n            # If yes, append it to the result list\n            result.append(num)\n    \n    # Return the result list\n    return result", "prompt_tokens": 123, "completion_tokens": 196, "duration": 6.5985143184661865}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert to lowercase and add to the result string\n            result += char.lower()\n        # Check if the character is lowercase\n        elif char.islower():\n            # Convert to uppercase and add to the result string\n            result += char.upper()\n        # If the character is neither (e.g., a digit or symbol), just add it as is\n        else:\n            result += char\n    # Return the modified string\n    return result", "prompt_tokens": 88, "completion_tokens": 153, "duration": 6.510568618774414}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Initialize an empty string to hold the concatenated result\n    result = ''\n    # Iterate through each string in the list\n    for string in strings:\n        # Add the current string to the result\n        result += string\n    # Return the concatenated result\n    return result", "prompt_tokens": 96, "completion_tokens": 77, "duration": 3.8134257793426514}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that match the prefix\n    filtered_strings = []\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the filtered list\n            filtered_strings.append(string)\n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 114, "duration": 4.934898853302002}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_numbers = []\n    # Loop through each number in the input list\n    for number in l:\n        # Check if the number is positive\n        if number > 0:\n            # If positive, append it to the positive_numbers list\n            positive_numbers.append(number)\n    # Return the list of positive numbers\n    return positive_numbers", "prompt_tokens": 153, "completion_tokens": 93, "duration": 3.6787428855895996}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    # Check if n is less than 2, because 1 and negative numbers are not prime\n    if n < 2:\n        return False\n    # Check if n is 2, which is prime\n    if n == 2:\n        return True\n    # Check if n is even, if so it's not prime (except for 2 which is already checked)\n    if n % 2 == 0:\n        return False\n    # Check for factors from 3 up to the square root of n (inclusive), stepping by 2 to skip even numbers\n    for i in range(3, int(n**0.5) + 1, 2):\n        # If n is divisible by any number in this range, it's not prime\n        if n % i == 0:\n            return False\n    # If no factors found, n is prime\n    return True", "prompt_tokens": 139, "completion_tokens": 198, "duration": 8.63921594619751}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    # Use list comprehension to calculate each term in the polynomial\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Import the required module\n    from scipy.optimize import fsolve\n    \n    # Define the polynomial function\n    def poly_func(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    # Use fsolve to find a root, starting the search from x=0\n    root = fsolve(poly_func, 0.0)\n    \n    # Return the first root found\n    return root[0]", "prompt_tokens": 298, "completion_tokens": 272, "duration": 12.871918201446533}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3 (0-based indexing means we use indices divisible by 3+1)\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    \n    # Sort the extracted elements\n    sorted_divisible_by_three_elements = sorted(divisible_by_three_elements)\n    \n    # Replace elements in the original list with the sorted ones at the correct positions\n    for i in range(len(l)):\n        if (i+1) % 3 == 0:\n            l[i] = sorted_divisible_by_three_elements.pop(0)\n    \n    return l", "prompt_tokens": 190, "completion_tokens": 149, "duration": 5.675102472305298}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    # Convert the set back to a list\n    unique_list = list(unique_set)\n    # Sort the list\n    unique_list.sort()\n    # Return the sorted list\n    return unique_list", "prompt_tokens": 113, "completion_tokens": 70, "duration": 5.2004313468933105}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Initialize the first element of the list as the maximum\n    max_val = l[0]\n    # Loop through each element in the list starting from the second element\n    for i in range(1, len(l)):\n        # If the current element is greater than the current maximum, update the maximum\n        if l[i] > max_val:\n            max_val = l[i]\n    # Return the maximum value found\n    return max_val", "prompt_tokens": 122, "completion_tokens": 104, "duration": 4.677511215209961}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    # Initialize a counter to keep track of occurrences of 7\n    count_sevens = 0\n    \n    # Loop through numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the number is divisible by 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string to check for digit 7\n            str_i = str(i)\n            # Count the number of 7s in the string representation\n            count_sevens += str_i.count('7')\n    \n    # Return the total count of 7s found\n    return count_sevens", "prompt_tokens": 119, "completion_tokens": 159, "duration": 5.925895690917969}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract even-indexed elements into a separate list\n    even_indexed_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the even-indexed elements\n    sorted_even_indexed_elements = sorted(even_indexed_elements)\n    # Initialize an empty list to store the result\n    result = []\n    # Initialize a counter for the sorted even-indexed elements\n    even_index_counter = 0\n    # Iterate over the original list\n    for i in range(len(l)):\n        # If the index is even, append from sorted even-indexed elements\n        if i % 2 == 0:\n            result.append(sorted_even_indexed_elements[even_index_counter])\n            even_index_counter += 1\n        else:\n            # If the index is odd, append the original element\n            result.append(l[i])\n    # Return the result list\n    return result", "prompt_tokens": 163, "completion_tokens": 204, "duration": 17.13730263710022}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split the encoded string into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Reverse the cycling operation for each group of three characters\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Join the groups back into a single string and return\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 143, "duration": 5.821378231048584}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Define a function to generate the next Fibonacci number\n    def next_fib(a, b):\n        return a + b\n    \n    # Initialize variables to store the first two Fibonacci numbers\n    a, b = 1, 1\n    # Initialize a counter for prime Fibonacci numbers found\n    count = 0\n    \n    # Loop indefinitely until we find the n-th prime Fibonacci number\n    while True:\n        # Generate the next Fibonacci number\n        fib = next_fib(a, b)\n        # Update the variables for the next iteration\n        a, b = b, fib\n        \n        # Check if the Fibonacci number is prime\n        if is_prime(fib):\n            # Increment the counter\n            count += 1\n            # If we have found the n-th prime Fibonacci number, return it\n            if count == n:\n                return fib", "prompt_tokens": 137, "completion_tokens": 258, "duration": 10.109785079956055}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # First, sort the list to make it easier to navigate\n    l.sort()\n    # Get the length of the list\n    n = len(l)\n    # Loop through the list\n    for i in range(n-2):\n        # Initialize two pointers\n        left, right = i + 1, n - 1\n        while left < right:\n            # Calculate the sum of the three elements\n            total = l[i] + l[left] + l[right]\n            # If the sum is zero, we found a match\n            if total == 0:\n                return True\n            # If the sum is less than zero, move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n    # If we reach this point, there are no three elements that sum to zero\n    return False", "prompt_tokens": 199, "completion_tokens": 217, "duration": 8.504563093185425}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since all cars move at the same speed and start very far from each other,\n    # each car moving left to right will eventually collide with each car moving right to left.\n    # Therefore, the total number of collisions is simply the number of cars in one direction\n    # multiplied by the number of cars in the other direction, which are both n.\n    # Hence, the total number of collisions is n * n.\n    return n * n", "prompt_tokens": 191, "completion_tokens": 109, "duration": 5.5429089069366455}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    # Initialize an empty list to store the incremented values\n    incremented_list = []\n    # Iterate through each element in the input list\n    for element in l:\n        # Increment the current element by 1 and append it to the incremented_list\n        incremented_list.append(element + 1)\n    # Return the list with incremented values\n    return incremented_list", "prompt_tokens": 148, "completion_tokens": 88, "duration": 3.841083288192749}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Create an empty set to keep track of elements seen so far\n    seen = set()\n    # Loop through each element in the list\n    for element in l:\n        # Check if the negation of the current element is in the seen set\n        if -element in seen:\n            # If found, return True\n            return True\n        # If not found, add the current element to the seen set\n        seen.add(element)\n    # If no such pair exists, return False\n    return False", "prompt_tokens": 197, "completion_tokens": 118, "duration": 5.733448266983032}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop until x becomes 0\n    while x > 0:\n        # Find the remainder of x divided by base, which will be a digit in the new base\n        remainder = x % base\n        # Add the remainder to the result string. Convert the remainder to string before adding\n        result = str(remainder) + result\n        # Update x by dividing it by base (using floor division)\n        x = x // base\n    # Return the result string\n    return result", "prompt_tokens": 131, "completion_tokens": 137, "duration": 5.954603910446167}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of a triangle using the formula: (base * height) / 2\n    area = (a * h) / 2\n    return area", "prompt_tokens": 86, "completion_tokens": 48, "duration": 3.841731071472168}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    # Base cases for the sequence\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    \n    # Initialize the first four elements of the sequence\n    a, b, c, d = 0, 0, 2, 0\n    \n    # Loop to calculate the n-th element\n    for _ in range(4, n + 1):\n        # Calculate the next element in the sequence\n        e = a + b + c + d\n        # Update the values for the next iteration\n        a, b, c, d = b, c, d, e\n    \n    # Return the n-th element of the sequence\n    return d", "prompt_tokens": 211, "completion_tokens": 184, "duration": 5.73426079750061}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # First, sort the list to get the elements in order\n    l.sort()\n    # Calculate the length of the list\n    n = len(l)\n    # Check if the number of elements in the list is odd\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l[n//2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 115, "completion_tokens": 122, "duration": 3.706653594970703}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    # Remove spaces and convert to lowercase for uniformity\n    text = text.replace(\" \", \"\").lower()\n    # Compare original string with its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 54, "duration": 3.039026975631714}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    # Initialize result to 1 as the initial value of 2^0 % p\n    result = 1\n    # Base 2, since we are calculating 2^n % p\n    base = 2\n\n    # Loop until n becomes 0\n    while n > 0:\n        # If n is odd, multiply the result with the base and take modulo p\n        if n % 2 == 1:\n            result = (result * base) % p\n        # Divide n by 2\n        n = n // 2\n        # Multiply base by itself and take modulo p\n        base = (base * base) % p\n\n    # Return the final result\n    return result", "prompt_tokens": 145, "completion_tokens": 169, "duration": 4.926626443862915}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Loop through each character in the string\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 53, "duration": 2.9696919918060303}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Define a string with all vowels (both lowercase and uppercase)\n    vowels = \"aeiouAEIOU\"\n    # Use a generator expression to filter out vowels from the input string\n    # and then join the remaining characters back into a string\n    no_vowels = ''.join(char for char in text if char not in vowels)\n    return no_vowels", "prompt_tokens": 162, "completion_tokens": 89, "duration": 3.3593430519104004}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    # Iterate over each element in the list\n    for num in l:\n        # Check if the current element is greater than or equal to the threshold\n        if num >= t:\n            # If any element is not below the threshold, return False\n            return False\n    # If all elements are below the threshold, return True\n    return True", "prompt_tokens": 119, "completion_tokens": 91, "duration": 3.6216487884521484}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    # Add x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 1.94633150100708}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    # Convert both strings to sets to get unique characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets of characters are equal\n    return set_s0 == set_s1", "prompt_tokens": 180, "completion_tokens": 72, "duration": 3.601353645324707}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    # Base case: if n is 0 or 1, return n itself because the first two Fibonacci numbers are 0 and 1\n    if n <= 1:\n        return n\n    else:\n        # Initialize the first two Fibonacci numbers\n        a, b = 0, 1\n        # Loop from 2 to n (inclusive) to calculate the n-th Fibonacci number\n        for _ in range(2, n + 1):\n            # Update the Fibonacci number\n            a, b = b, a + b\n        # Return the n-th Fibonacci number\n        return b", "prompt_tokens": 92, "completion_tokens": 140, "duration": 5.833515882492065}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of open brackets\n    open_brackets = 0\n\n    # Loop through each character in the string\n    for char in brackets:\n        # If we encounter an opening bracket, increment the counter\n        if char == \"<\":\n            open_brackets += 1\n        # If we encounter a closing bracket, decrement the counter\n        elif char == \">\":\n            open_brackets -= 1\n            # If at any point the counter goes negative, return False immediately\n            if open_brackets < 0:\n                return False\n\n    # If the counter is zero, all brackets are correctly closed, return True\n    # If the counter is not zero, there are unclosed brackets, return False\n    return open_brackets == 0", "prompt_tokens": 132, "completion_tokens": 179, "duration": 7.574635744094849}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is monotonically increasing\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    # Check if the list is monotonically decreasing\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    # Return True if either condition is met, False otherwise\n    return increasing or decreasing", "prompt_tokens": 127, "completion_tokens": 104, "duration": 4.834474086761475}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Convert both lists to sets to remove duplicates and allow for set operations\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements back to a list and sort it\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 106, "duration": 4.489084959030151}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor variable\n    largest_factor = None\n    \n    # Divide n by 2 until it's odd\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors starting from 3\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, divide n by i and update largest_factor\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    \n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor", "prompt_tokens": 103, "completion_tokens": 165, "duration": 5.223414421081543}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Add the current number to the total sum\n        total_sum += i\n    # Return the total sum\n    return total_sum", "prompt_tokens": 134, "completion_tokens": 84, "duration": 4.108953475952148}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter for open brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # If an open bracket is found, increment the counter\n        if char == '(':\n            open_brackets += 1\n        # If a close bracket is found\n        elif char == ')':\n            # If there are no open brackets to match, return False\n            if open_brackets == 0:\n                return False\n            # Otherwise, decrement the counter\n            open_brackets -= 1\n    \n    # If all open brackets were closed, the counter should be 0\n    return open_brackets == 0", "prompt_tokens": 129, "completion_tokens": 160, "duration": 5.692225217819214}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivatives\n    derivatives = []\n    # Iterate over the list of coefficients, skipping the first element\n    for i in range(1, len(xs)):\n        # The derivative of x^n is n*x^(n-1), so multiply the coefficient by its index\n        derivatives.append(i * xs[i])\n    # Return the list of derivatives\n    return derivatives", "prompt_tokens": 148, "completion_tokens": 93, "duration": 3.6640663146972656}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    # Base cases: directly return the result for the first three numbers in the sequence.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three numbers of the sequence.\n    a, b, c = 0, 0, 1\n    \n    # Compute the nth element of the fibfib sequence iteratively.\n    for _ in range(3, n + 1):\n        # The next number in the sequence is the sum of the previous three numbers.\n        next_number = a + b + c\n        # Update the previous three numbers for the next iteration.\n        a, b, c = b, c, next_number\n    \n    # Return the nth element of the fibfib sequence.\n    return c", "prompt_tokens": 189, "completion_tokens": 191, "duration": 7.312986135482788}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Convert the input string to lowercase to make the function case-insensitive\n    s = s.lower()\n    # Initialize a counter for vowels\n    vowel_count = 0\n    # Define a list of vowels, including 'y' as it can be a vowel at the end of a word\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is in the list of vowels\n        if char in vowels:\n            # If it is a vowel, increment the vowel counter\n            vowel_count += 1\n    # Check if the last character is 'y', and it has been counted as a vowel\n    if s[-1] == 'y' and s[-1] in vowels:\n        # If the last character is 'y', it is a vowel regardless of its position, so do nothing\n        pass\n    else:\n        # If the last character is not 'y' or it's not at the end, reduce the vowel count by 1\n        # This is to adjust for the initial inclusion of 'y' in the vowels list\n        vowel_count -= s.count('y')\n    # Return the final count of vowels\n    return vowel_count", "prompt_tokens": 166, "completion_tokens": 284, "duration": 8.949006795883179}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    # Convert the integer x to a string to manipulate its digits\n    x_str = str(x)\n    # Find the length of the string\n    length = len(x_str)\n    \n    # If shift is greater than the number of digits, reverse the string\n    if shift > length:\n        return x_str[::-1]\n    else:\n        # Perform the circular shift\n        # Calculate the effective shift needed, as shifting by the length of the string\n        # or multiples thereof results in the same string\n        effective_shift = shift % length\n        # The new string is the last 'effective_shift' characters followed by the rest of the string\n        return x_str[-effective_shift:] + x_str[:-effective_shift]", "prompt_tokens": 122, "completion_tokens": 160, "duration": 5.787100315093994}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase letter to the sum\n            total_sum += ord(char)\n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 90, "duration": 3.5591559410095215}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the string into words\n    words = s.split()\n    # Extract the number of apples from the string\n    apples = int(words[0])\n    # Extract the number of oranges from the string\n    oranges = int(words[-2])\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    # Return the number of mangoes\n    return mangoes", "prompt_tokens": 250, "completion_tokens": 111, "duration": 4.7759857177734375}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    # Iterate through the array to find the smallest even value and its index\n    for i, value in enumerate(arr):\n        # Check if the current value is even and less than the current smallest even value\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = i\n            \n    # Check if a smallest even value was found and return the result accordingly\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]", "prompt_tokens": 352, "completion_tokens": 149, "duration": 4.331078290939331}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Count the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Initialize the result to -1 (assuming no such value exists)\n    result = -1\n    \n    # Iterate through the dictionary to find the maximum integer that satisfies the condition\n    for num, count in freq.items():\n        if num <= count and num > result:\n            result = num\n            \n    return result", "prompt_tokens": 205, "completion_tokens": 120, "duration": 4.602793455123901}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    # Initialize an empty list to store the result\n    result = []\n    # Loop until the original list is empty\n    while lst:\n        # Append the first element (minimum) to the result list and remove it from the original list\n        result.append(lst.pop(0))\n        # If the original list is not empty, append the last element (maximum) to the result list and remove it\n        if lst:\n            result.append(lst.pop())\n    # Return the result list\n    return result", "prompt_tokens": 164, "completion_tokens": 127, "duration": 4.180351734161377}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # First, check if the sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # If valid, calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Then calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If not a valid triangle, return -1\n        return -1", "prompt_tokens": 161, "completion_tokens": 157, "duration": 6.134231328964233}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of elements in q\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight w\n    return total_weight <= w", "prompt_tokens": 270, "completion_tokens": 80, "duration": 5.48265266418457}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a counter for the number of changes needed\n    changes_needed = 0\n    \n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Loop through the first half of the array\n    for i in range(n // 2):\n        # If the current element and its corresponding element from the end are not the same\n        if arr[i] != arr[n - 1 - i]:\n            # Increment the changes needed\n            changes_needed += 1\n    \n    # Return the total number of changes needed\n    return changes_needed", "prompt_tokens": 197, "completion_tokens": 126, "duration": 4.797272205352783}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list by summing up the lengths of all strings in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters in each list and return the list with fewer characters\n    # If they have the same number of characters, return the first list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 130, "duration": 4.3120646476745605}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Initialize a counter for prime factors\n    prime_factors = 0\n\n    # Check for prime factors of 'a'\n    for i in range(2, a + 1):\n        # If 'i' is a prime factor, increment the counter\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            # Divide 'a' by 'i' to check for next prime factor\n            while a % i == 0:\n                a //= i\n\n    # Return True if exactly 3 prime factors are found, False otherwise\n    return prime_factors == 3", "prompt_tokens": 119, "completion_tokens": 205, "duration": 9.386400699615479}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if n is less than or equal to 1, which cannot be a base for a power to produce x > 1\n    if n <= 1:\n        return False\n    # Initialize a variable to keep track of the power\n    power = 1\n    # Use a loop to multiply n by itself until it exceeds x\n    while power < x:\n        power *= n\n    # Check if the final power is equal to x and return True if so\n    return power == x", "prompt_tokens": 182, "completion_tokens": 119, "duration": 4.266685247421265}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of the absolute value of a is an integer\n    # The cube root is calculated using **(1/3) and abs() is used to handle negative numbers\n    # We compare the integer part of the cube root (using int()) with the actual cube root\n    # If they are the same, it means the original number is a perfect cube\n    return int(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 150, "completion_tokens": 108, "duration": 3.592092514038086}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define the prime hexadecimal digits as a set for O(1) lookup time.\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\n    # Initialize a counter to keep track of prime digits found.\n    prime_count = 0\n\n    # Iterate through each character in the input string.\n    for char in num:\n        # If the character is in the set of prime hexadecimal digits, increment the counter.\n        if char in prime_hex_digits:\n            prime_count += 1\n\n    # Return the total count of prime hexadecimal digits found.\n    return prime_count", "prompt_tokens": 339, "completion_tokens": 137, "duration": 4.726283311843872}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary using bin function and slice off the '0b' part\n    binary_str = bin(decimal)[2:]\n    # Add 'db' at the beginning and at the end of the binary string\n    formatted_binary_str = \"db\" + binary_str + \"db\"\n    return formatted_binary_str", "prompt_tokens": 179, "completion_tokens": 77, "duration": 3.2524261474609375}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string, stopping 2 characters before the end to avoid index out of range error\n    for i in range(len(s) - 2):\n        # If any 3 consecutive characters are not distinct, return False\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n            \n    # If no such 3 consecutive characters are found, return True\n    return True", "prompt_tokens": 161, "completion_tokens": 143, "duration": 8.936137437820435}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Loop through each GPA in the input list\n    for gpa in grades:\n        # Check the GPA against each condition and append the corresponding letter grade\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 314, "duration": 14.785208463668823}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Get the length of the string\n    length = len(string)\n    # Check if the length is prime\n    return is_prime(length)", "prompt_tokens": 121, "completion_tokens": 105, "duration": 6.0894858837127686}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Calculate the count of n-digit numbers starting with 1\n    # There are 10^(n-1) possibilities for the other digits, so one possibility for the first digit\n    start_with_1 = 10**(n-1)\n    \n    # Calculate the count of n-digit numbers ending with 1\n    # There are 9 options for the first digit (can't be 0) and 10^(n-2) for the remaining digits\n    # But, this includes the numbers counted in start_with_1, so we subtract those to avoid double counting\n    end_with_1 = 9 * 10**(n-2)\n    \n    # The total count is the sum of the two counts\n    total_count = start_with_1 + end_with_1\n    \n    return total_count", "prompt_tokens": 84, "completion_tokens": 181, "duration": 13.398252487182617}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to a string to iterate over each digit\n    str_N = str(N)\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Convert the digit from string back to integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the final sum of digits to a binary string\n    # The bin function returns a binary string prefixed with '0b', so we slice it to remove the prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum", "prompt_tokens": 173, "completion_tokens": 148, "duration": 5.458806991577148}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Initialize a variable to store the sum\n    sum_even_odd_indices = 0\n    # Loop through the list with index\n    for index, value in enumerate(lst):\n        # Check if the index is odd and the value is even\n        if index % 2 == 1 and value % 2 == 0:\n            # Add the even value at odd index to the sum\n            sum_even_odd_indices += value\n    # Return the final sum\n    return sum_even_odd_indices", "prompt_tokens": 95, "completion_tokens": 112, "duration": 3.790346384048462}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words based on space as a separator\n    words = s.split(' ')\n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters of the word in ascending order based on their ASCII value\n        # and join them back into a string, then append to the ordered_words list\n        ordered_words.append(''.join(sorted(word)))\n    # Join the ordered words back into a single string with spaces and return\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 136, "duration": 4.571966171264648}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Loop through each row in the list\n    for i, row in enumerate(lst):\n        # Loop through each element in the row\n        for j, element in enumerate(row):\n            # If the element matches x, append the coordinate to the list\n            if element == x:\n                coordinates.append((i, j))\n    \n    # First, sort the coordinates by row in ascending order\n    # Then, within each row, sort by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 145, "duration": 5.056657791137695}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Make a copy of the array to avoid modifying the original array\n    arr_copy = array.copy()\n\n    # Check if the array is empty or contains only one element, return the copy as is\n    if len(arr_copy) <= 1:\n        return arr_copy\n\n    # Determine the sorting order by checking if the sum of the first and last element is even or odd\n    if (arr_copy[0] + arr_copy[-1]) % 2 == 0:\n        # Sort the array in descending order if the sum is even\n        arr_copy.sort(reverse=True)\n    else:\n        # Sort the array in ascending order if the sum is odd\n        arr_copy.sort()\n\n    # Return the sorted copy of the array\n    return arr_copy", "prompt_tokens": 243, "completion_tokens": 167, "duration": 5.345242261886597}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Initialize an empty string to store the encrypted message\n    encrypted_message = \"\"\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a lowercase letter\n        if char.islower():\n            # Convert the character to its corresponding ASCII value, then shift it down by 4 places\n            # Use modulo 26 to wrap around the alphabet, and add 97 to convert back to lowercase ASCII range\n            encrypted_char = chr(((ord(char) - 97 + 4) % 26) + 97)\n        # Append the encrypted character to the encrypted_message string\n        encrypted_message += encrypted_char\n    \n    # Return the encrypted message\n    return encrypted_message", "prompt_tokens": 150, "completion_tokens": 159, "duration": 5.194973945617676}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Remove duplicates by converting list to a set\n    unique_elements = set(lst)\n    \n    # Convert the set back to a list to sort it\n    unique_sorted_list = sorted(list(unique_elements))\n    \n    # Check if the list has at least 2 unique elements\n    if len(unique_sorted_list) < 2:\n        return None\n    else:\n        # Return the 2nd smallest element\n        return unique_sorted_list[1]", "prompt_tokens": 164, "completion_tokens": 103, "duration": 7.26009464263916}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = [s.strip() for s in re.split(r'[.?!]', S) if s.strip()]\n    \n    # Initialize a counter for boredom sentences\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with 'I' and increment the boredom count if true\n        if sentence.startswith('I'):\n            boredom_count += 1\n    \n    # Return the total boredom count\n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 123, "duration": 4.376838207244873}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is equal to the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        # Return False if any number is not an integer\n        return False", "prompt_tokens": 175, "completion_tokens": 95, "duration": 3.5014474391937256}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define the vowels and their corresponding replacements\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', \n                    'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', \n                    'u': 'w', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Loop through each character in the message\n    for char in message:\n        # Check if the character is a vowel and replace it\n        if char in vowels:\n            encoded_message += replacements[char]\n        # If not a vowel, just swap the case and append to the encoded message\n        else:\n            encoded_message += char.swapcase()\n    \n    # Return the encoded message\n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 198, "duration": 7.668198823928833}
{"task_id": "HumanEval/94", "generated_code": "def find_largest_prime_sum(lst):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the largest prime number in the list\n    largest_prime = 0\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n    \n    # Sum the digits of the largest prime number\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    \n    return sum_of_digits", "prompt_tokens": 326, "completion_tokens": 154, "duration": 7.460174560546875}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    # Initialize variables to keep track of case types\n    has_lower = False\n    has_upper = False\n    # Iterate through the keys of the dictionary\n    for key in dict.keys():\n        # Check if the current key is a string\n        if isinstance(key, str):\n            # If the key is in lower case, set has_lower to True\n            if key.islower():\n                has_lower = True\n            # If the key is in upper case, set has_upper to True\n            elif key.isupper():\n                has_upper = True\n        else:\n            # If the key is not a string, return False\n            return False\n    # Check if both lower case and upper case keys are present\n    if has_lower and has_upper:\n        return False\n    # Check if either lower case or upper case keys are not present\n    elif has_lower or has_upper:\n        return True\n    else:\n        return False", "prompt_tokens": 209, "completion_tokens": 222, "duration": 9.524300336837769}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Define a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize an empty list to hold the prime numbers\n    primes = []\n    # Loop through numbers from 2 to n-1\n    for num in range(2, n):\n        # If the current number is prime, append it to the primes list\n        if is_prime(num):\n            primes.append(num)\n    # Return the list of prime numbers\n    return primes", "prompt_tokens": 185, "completion_tokens": 156, "duration": 6.7418904304504395}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    # Extract the unit digit from each number by taking the modulus of 10\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the product\n    return product", "prompt_tokens": 138, "completion_tokens": 79, "duration": 5.490060091018677}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    # Define a set of uppercase vowels for easy checking\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    # Initialize a counter to keep track of uppercase vowels at even indices\n    count = 0\n    # Iterate through the string, checking only even indices\n    for i in range(0, len(s), 2):\n        # If the character at the even index is an uppercase vowel, increment the counter\n        if s[i] in vowels:\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 112, "completion_tokens": 129, "duration": 4.895583629608154}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the string value to a float\n    num = float(value)\n    # Get the absolute value of the number\n    abs_num = abs(num)\n    # Calculate the difference between the number and its floor value\n    diff = abs_num - int(abs_num)\n    # Check if the number is equidistant between two integers (diff == 0.5)\n    if diff == 0.5:\n        # If so, round away from zero by adding 0.5 to the absolute value and casting to int\n        if num > 0:\n            return int(abs_num + 0.5)\n        else:\n            return -int(abs_num + 0.5)\n    else:\n        # If not equidistant, simply round the number using round function\n        return round(num)", "prompt_tokens": 196, "completion_tokens": 176, "duration": 8.332704305648804}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones_in_each_level = []\n    # Initialize the current number of stones with n, as the first level starts with n stones\n    current_stones = n\n    # Loop through each level\n    for _ in range(n):\n        # Add the current number of stones to the list\n        stones_in_each_level.append(current_stones)\n        # Determine the next number of stones based on the parity of the current number\n        if current_stones % 2 == 0:\n            # If even, add 2 to get the next even number\n            current_stones += 2\n        else:\n            # If odd, add 2 to get the next odd number\n            current_stones += 2\n    # Return the list containing the number of stones in each level\n    return stones_in_each_level", "prompt_tokens": 172, "completion_tokens": 196, "duration": 12.304095029830933}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Replace commas with spaces to unify the separators\n    s = s.replace(',', ' ')\n    \n    # Split the string into words based on spaces\n    words = s.split()\n    \n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 59, "duration": 2.959256410598755}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    # Check if x is greater than y, if so, return -1 because the range is invalid\n    if x > y:\n        return -1\n    # Start from y and go down to x to find the biggest even number\n    for num in range(y, x-1, -1):\n        # If the number is even, return it\n        if num % 2 == 0:\n            return num\n    # If no even number is found in the range, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 121, "duration": 6.352939128875732}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    # Check if n is greater than m, if so return -1\n    if n > m:\n        return -1\n    \n    # Calculate the sum of all integers from n to m inclusive\n    total_sum = sum(range(n, m+1))\n    \n    # Calculate the count of integers from n to m inclusive\n    count = m - n + 1\n    \n    # Calculate the average and round to the nearest integer\n    avg_rounded = round(total_sum / count)\n    \n    # Convert the rounded average to binary and return\n    return bin(avg_rounded)", "prompt_tokens": 180, "completion_tokens": 130, "duration": 4.4837586879730225}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter the list to include only numbers that don't have even digits\n    filtered_numbers = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    # Return the filtered list sorted in increasing order\n    return sorted(filtered_numbers)", "prompt_tokens": 142, "completion_tokens": 70, "duration": 3.44238018989563}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Dictionary to map integers to their names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each number with its corresponding name using the dictionary\n    result = [num_to_name[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 186, "duration": 6.434905290603638}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Define the function that calculates factorial\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    # Define the function that calculates the sum from 1 to x\n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    # Initialize the list to return\n    result = []\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # If i is even, calculate the factorial and append it to the result list\n        if i % 2 == 0:\n            result.append(factorial(i))\n        # If i is odd, calculate the sum from 1 to i and append it to the result list\n        else:\n            result.append(sum_to_x(i))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 192, "duration": 7.975599765777588}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \"\"\"\n    # Initialize counters for even and odd palindromes\n    even_count, odd_count = 0, 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n + 1):\n        # Convert the number to a string to check if it's a palindrome\n        str_i = str(i)\n        # Check if the number is a palindrome\n        if str_i == str_i[::-1]:\n            # If the number is even, increment the even counter\n            if i % 2 == 0:\n                even_count += 1\n            # If the number is odd, increment the odd counter\n            else:\n                odd_count += 1\n                \n    # Return the counts of even and odd palindromes as a tuple\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 225, "duration": 7.773908376693726}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Function to calculate the sum of digits of a number, considering the sign of the first digit\n    def sum_of_digits(n):\n        # Convert the number to string to easily iterate over digits\n        str_n = str(n)\n        # Initialize the sum as 0\n        sum_digits = 0\n        # Iterate over each character in the string representation of the number\n        for i, digit in enumerate(str_n):\n            # If it's the first character and it's a '-', subtract the next digit\n            if i == 0 and digit == '-':\n                sum_digits -= int(str_n[i + 1])\n            # Else, just add the digit to the sum\n            elif digit.isdigit():\n                sum_digits += int(digit)\n        return sum_digits\n\n    # Initialize counter for numbers with sum of digits > 0\n    count = 0\n    # Iterate over each number in the array\n    for num in arr:\n        # If the sum of digits of the number is greater than 0, increment the counter\n        if sum_of_digits(num) > 0:\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 164, "completion_tokens": 252, "duration": 9.59082317352295}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the list is empty or has only one element, return True because it's already sorted\n    if len(arr) <= 1:\n        return True\n    \n    # Initialize a variable to count the number of times the current element is less than the previous element\n    shift_count = 0\n    \n    # Loop through the array from the second element to the end\n    for i in range(1, len(arr)):\n        # If the current element is less than the previous one\n        if arr[i] < arr[i-1]:\n            # Increment the shift count\n            shift_count += 1\n            \n            # If shift count is more than 1, return False because we can only afford one shift for sorting\n            if shift_count > 1:\n                return False\n    \n    # After the loop, check if shifting is needed at the junction of the end and start of the array\n    # This is to handle cases like [5, 1, 2, 3, 4] which needs one shift but doesn't increase shift_count in the loop\n    # We check if the last element is greater than the first element, indicating a sorted array except for a shift\n    if arr[-1] > arr[0] and shift_count == 1:\n        return False\n\n    # If the code reaches this point, it means the array can be sorted with at most one shift\n    return True", "prompt_tokens": 339, "completion_tokens": 303, "duration": 12.407090902328491}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of even numbers in lst1\n    even_count_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    \n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are more odd numbers in lst1 than even numbers in lst2, exchange is not possible\n    if odd_count_lst1 > even_count_lst2:\n        return \"NO\"\n    else:\n        return \"YES\"", "prompt_tokens": 237, "completion_tokens": 160, "duration": 7.150302886962891}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of letters\n    letters = test.split()\n    # Initialize an empty dictionary to store the count of each letter\n    counts = {}\n    # Loop through each letter in the list\n    for letter in letters:\n        # Increment the count for the letter in the dictionary\n        counts[letter] = counts.get(letter, 0) + 1\n    # Find the maximum count of any letter\n    max_count = max(counts.values(), default=0)\n    # Filter the dictionary to only include letters with the maximum count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 191, "completion_tokens": 151, "duration": 9.377620935440063}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove characters in s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    # Return the result string and palindrome check result as a tuple\n    return (result_string, is_palindrome)", "prompt_tokens": 202, "completion_tokens": 88, "duration": 3.9782657623291016}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each string in the input list\n    for s in lst:\n        # Count the number of odd digits in the current string\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        \n        # Format the result string using the odd_count and append it to the result list\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    \n    # Return the result list\n    return result", "prompt_tokens": 213, "completion_tokens": 143, "duration": 5.67556619644165}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize the minimum sum to the first element, as a starting point\n    min_sum = nums[0]\n    # Initialize the current sum to 0\n    current_sum = 0\n    \n    # Loop through each number in the array\n    for num in nums:\n        # If current sum becomes negative, reset it to 0\n        # As adding a negative sum to a subarray will only decrease the sum\n        if current_sum > 0:\n            current_sum = 0\n        # Add the current number to the current sum\n        current_sum += num\n        # Update the minimum sum if the current sum is less than the minimum sum\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 165, "duration": 8.3743257522583}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    # Initialize total water units to 0\n    total_water_units = 0\n    \n    # Iterate over each well in the grid\n    for well in grid:\n        # Sum the water units in the current well and add to the total water units\n        total_water_units += sum(well)\n    \n    # Calculate the number of times the buckets need to be lowered using ceiling division\n    # This accounts for the last bucket not being fully filled\n    bucket_lowers = math.ceil(total_water_units / capacity)\n    \n    return bucket_lowers", "prompt_tokens": 363, "completion_tokens": 123, "duration": 4.515326261520386}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Convert each number to a tuple containing the count of ones in its binary representation and the number itself\n    arr_with_ones_count = [(bin(x).count('1'), x) for x in arr]\n    # Sort the list of tuples first by the count of ones and then by the number itself in case of a tie\n    sorted_arr_with_ones_count = sorted(arr_with_ones_count)\n    # Extract only the number from each tuple to get the final sorted list\n    sorted_arr = [x[1] for x in sorted_arr_with_ones_count]\n    return sorted_arr", "prompt_tokens": 210, "completion_tokens": 133, "duration": 5.860393762588501}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to hold words with exactly n consonants\n    result = []\n    \n    # Loop through each word in the words list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Loop through each character in the current word\n        for char in word:\n            # Check if the character is a consonant\n            if char.lower() not in \"aeiou\" and char.isalpha():\n                # Increment the consonant counter\n                consonant_count += 1\n        \n        # Check if the consonant count matches the given number n\n        if consonant_count == n:\n            # Add the word to the result list\n            result.append(word)\n    \n    # Return the result list\n    return result", "prompt_tokens": 221, "completion_tokens": 190, "duration": 6.911925554275513}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    # Define vowels in both lowercase and uppercase\n    vowels = \"aeiouAEIOU\"\n    \n    # Reverse the word to start checking from the right\n    reversed_word = word[::-1]\n    \n    # Initialize variables to keep track of vowels and consonants found\n    found_vowel = False\n    consonant_count = 0\n    \n    # Iterate through each character in the reversed word\n    for char in reversed_word:\n        # Check if the current character is a consonant\n        if char not in vowels:\n            # Increment consonant count since a consonant is found\n            consonant_count += 1\n        # Check if the character is a vowel and it's between consonants\n        elif consonant_count > 0:\n            # Mark that a vowel is found and return it\n            found_vowel = True\n            return char\n        # If a vowel is found before two consonants, reset consonant count\n        else:\n            consonant_count = 0\n    \n    # If no vowel met the condition, return an empty string\n    if not found_vowel:\n        return \"\"", "prompt_tokens": 189, "completion_tokens": 241, "duration": 7.77991795539856}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # First, split the list into two strings for easier manipulation\n    str1, str2 = lst[0], lst[1]\n    \n    # Count the number of open and close parentheses in both strings\n    open1, close1 = str1.count('('), str1.count(')')\n    open2, close2 = str2.count('('), str2.count(')')\n    \n    # Check if the first string has more open parentheses and the second string can close them\n    if open1 >= close1 and open2 >= close2 and open1 - close1 <= open2:\n        return 'Yes'\n    # Check if the second string has more open parentheses and the first string can close them\n    elif open2 >= close2 and open1 >= close1 and open2 - close2 <= open1:\n        return 'Yes'\n    # If neither condition is met, it's not possible to form a good string\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 210, "duration": 7.442566871643066}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 43, "duration": 2.72605037689209}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize a variable to keep track of the sum\n    sum_odd_even_pos = 0\n    # Loop through the list with index\n    for i, num in enumerate(lst):\n        # Check if the position is even (considering 0 as an even position) and the number is odd\n        if i % 2 == 0 and num % 2 != 0:\n            # Add the number to the sum\n            sum_odd_even_pos += num\n    # Return the final sum\n    return sum_odd_even_pos", "prompt_tokens": 137, "completion_tokens": 120, "duration": 5.947647571563721}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # Check if the element has at most two digits\n        if arr[i] >= -99 and arr[i] <= 99:\n            # Add the element to sum\n            sum += arr[i]\n    # Return the sum\n    return sum", "prompt_tokens": 168, "completion_tokens": 95, "duration": 3.976358652114868}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    # Initialize an empty list to store odd numbers\n    odd_numbers = []\n    \n    # Keep generating the sequence until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Apply Collatz operations\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the list as the sequence always ends with 1\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 182, "duration": 6.104227781295776}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    \n    # Try converting month, day, and year into integers, return False if conversion fails\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    # If all checks pass, return True\n    return True", "prompt_tokens": 303, "completion_tokens": 297, "duration": 9.868108034133911}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        # Split the text on whitespace and return the resulting list\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        # Split the text on commas and return the resulting list\n        return txt.split(',')\n    else:\n        # Initialize a counter for lowercase letters with odd order\n        odd_order_count = 0\n        # Iterate through each character in the text\n        for char in txt:\n            # Check if the character is a lowercase letter\n            if char.islower():\n                # Calculate the order of the letter and check if it's odd\n                if (ord(char) - ord('a')) % 2 == 0:\n                    # Increment the counter for odd order lowercase letters\n                    odd_order_count += 1\n        # Return the count of odd order lowercase letters\n        return odd_order_count", "prompt_tokens": 180, "completion_tokens": 206, "duration": 6.695956468582153}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is already sorted\n    if lst != sorted(lst):\n        return False\n    # Use a set to find duplicates since sets cannot contain duplicates\n    # If the length of the set is less than the list, there were duplicates\n    if len(set(lst)) != len(lst):\n        return False\n    # Iterate through the list to find more than one duplicate of any number\n    for i in range(len(lst) - 1):\n        # If the current number is the same as the next, and the count of that number in the list is more than 1\n        if lst[i] == lst[i + 1] and lst.count(lst[i]) > 2:\n            return False\n    # If none of the above conditions are met, the list is sorted and has no more than one duplicate of any number\n    return True", "prompt_tokens": 289, "completion_tokens": 188, "duration": 6.270017385482788}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the maximum of the start points and the minimum of the end points of the intervals\n    # This will give us the intersection interval if it exists\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    # Calculate the length of the intersection\n    length = end_min - start_max + 1\n    \n    # Check if the length is greater than 0 (meaning the intervals intersect)\n    # and if the length is a prime number\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 294, "completion_tokens": 215, "duration": 6.956636190414429}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    # Initialize product of signs as 1 (since 1 is the neutral element for multiplication)\n    sign_product = 1\n    # Initialize sum of magnitudes to 0\n    sum_of_magnitudes = 0\n    # Iterate through each element in the array\n    for num in arr:\n        # Multiply the current sign product with the sign of the current number\n        # Use 1 for positive, -1 for negative, and 0 for zero\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n        # Add the absolute value of the current number to the sum of magnitudes\n        sum_of_magnitudes += abs(num)\n    # Return the product of the sum of magnitudes and the final sign product\n    return sum_of_magnitudes * sign_product", "prompt_tokens": 162, "completion_tokens": 204, "duration": 10.328731060028076}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Import the heapq for priority queue implementation\n    import heapq\n    \n    # Directions for moving up, down, left, right\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    N = len(grid) # Size of the grid\n    pq = [] # Priority queue for BFS\n    \n    # Initialize priority queue with all possible starting points\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], 1, [grid[i][j]], (i, j)))\n    \n    # Perform a modified BFS with the help of priority queue\n    while pq:\n        value, length, path, (x, y) = heapq.heappop(pq)\n        \n        # If the path length equals k, return the path since it's guaranteed to be the minimum due to priority queue\n        if length == k:\n            return path\n        \n        # Explore all possible next moves\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            \n            # Ensure the new position is within the grid\n            if 0 <= nx < N and 0 <= ny < N:\n                # Add the new position to the priority queue with updated path and length\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (value, length + 1, new_path, (nx, ny)))", "prompt_tokens": 436, "completion_tokens": 324, "duration": 20.401009559631348}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize a list with the base case\n    tribonacci = [1, 3]\n    \n    # Start generating the sequence from the 3rd element since the first two are given\n    for i in range(2, n + 1):\n        # Check if the current index is even\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            # For odd indices, calculate the sum of the last two elements and the next one\n            # Since we don't have the next one, we use the even case formula to find it\n            next_val = 1 + (i + 1) // 2\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + next_val)\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 183, "duration": 6.2491984367370605}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    # Convert the number to a string to iterate through each digit\n    n_str = str(n)\n    # Initialize a variable to hold the product of odd digits. Start with 1 since it's the multiplicative identity.\n    product = 1\n    # Initialize a variable to check if there are any odd digits\n    odd_found = False\n    # Loop through each character in the string (each digit of the number)\n    for char in n_str:\n        # Convert the character back to an integer to check if it's odd\n        digit = int(char)\n        # If the digit is odd\n        if digit % 2 != 0:\n            # Multiply the current product by the digit\n            product *= digit\n            # Mark that we've found at least one odd digit\n            odd_found = True\n    # If no odd digits were found, return 0\n    if not odd_found:\n        return 0\n    # Otherwise, return the product of the odd digits\n    return product", "prompt_tokens": 111, "completion_tokens": 217, "duration": 7.989405632019043}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a variable to keep track of the depth of nesting\n    depth = 0\n    # Loop through each character in the string\n    for char in string:\n        # If the character is an opening bracket, increase depth\n        if char == '[':\n            depth += 1\n        # If the character is a closing bracket, decrease depth\n        elif char == ']':\n            depth -= 1\n        # If at any point the depth is greater than 1, we have a nested bracket\n        if depth > 1:\n            return True\n        # If depth becomes negative, it means brackets are not properly nested, so return False\n        if depth < 0:\n            return False\n    # If we finish looping and never had a depth greater than 1, return False\n    return False", "prompt_tokens": 173, "completion_tokens": 179, "duration": 12.881173610687256}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    # Import the math module for the ceiling function\n    \n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through each number in the list\n    for number in lst:\n        # Round the number to the upper integer\n        rounded_number = math.ceil(number)\n        # Square the rounded number\n        squared_number = rounded_number ** 2\n        # Add the squared number to the sum_of_squares\n        sum_of_squares += squared_number\n    \n    # Return the sum of squares\n    return sum_of_squares", "prompt_tokens": 197, "completion_tokens": 133, "duration": 4.507872581481934}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or ends with a space, return False immediately\n    if not txt or txt.endswith(' '):\n        return False\n    # Check if the last character is an alphabetical character\n    if txt[-1].isalpha():\n        # Check if the second last character is a space or if the length of the string is 1\n        # This ensures the last character is not part of a word\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n    # If none of the above conditions are met, return False\n    return False", "prompt_tokens": 177, "completion_tokens": 142, "duration": 4.549732685089111}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Iterate through the array starting from index 1 to the end\n    for i in range(1, len(arr)):\n        # Check if the current element is less than the previous element\n        if arr[i] < arr[i-1]:\n            # Return the index of the current element\n            return i\n    # If no such element is found, return -1\n    return -1", "prompt_tokens": 143, "completion_tokens": 93, "duration": 3.282332181930542}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through each number in the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # If largest_negative is None or num is greater, update largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # Check if the number is positive\n        elif num > 0:\n            # If smallest_positive is None or num is smaller, update smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the tuple of largest_negative and smallest_positive\n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 176, "duration": 7.923006057739258}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Convert inputs to floats, handling both \".\" and \",\" as decimal points\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(\",\", \".\")\n        return float(x)\n    \n    # Convert both a and b to floats for comparison\n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    # Compare the float values of a and b\n    if a_float > b_float:\n        return a  # Return a without changing its type\n    elif a_float < b_float:\n        return b  # Return b without changing its type\n    else:\n        return None  # Return None if a and b are equal", "prompt_tokens": 181, "completion_tokens": 151, "duration": 4.758368015289307}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than the smallest sum of 4 positive even numbers, which is 2+2+2+2=8\n    if n < 8:\n        return False\n    # Check if n is even because the sum of even numbers is always even\n    if n % 2 == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 117, "completion_tokens": 92, "duration": 4.6486852169036865}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result variable to 1, because we are going to multiply values into it\n    result = 1\n    \n    # Initialize a loop from 1 to n (inclusive) to calculate each factorial\n    for i in range(1, n + 1):\n        # Initialize a temporary variable for the factorial of the current number\n        factorial = 1\n        \n        # Calculate the factorial of i\n        for j in range(1, i + 1):\n            factorial *= j\n            \n        # Multiply the current factorial to the result\n        result *= factorial\n        \n    return result", "prompt_tokens": 135, "completion_tokens": 132, "duration": 4.968142986297607}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Import the regular expression module\n    import re\n    \n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    \n    # Replace remaining single and double spaces with '_'\n    text = text.replace(' ', '_')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 73, "duration": 2.8852107524871826}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the number of digits in the name part\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are more than three digits in the name part\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 192, "duration": 6.003659963607788}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through the list with both index and value\n    for i, num in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            # Square the number and add to the total sum\n            total_sum += num ** 2\n        # Check if the index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0:\n            # Cube the number and add to the total sum\n            total_sum += num ** 3\n        # If the index is not a multiple of 3 or 4, add the number as it is\n        else:\n            total_sum += num\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 209, "completion_tokens": 186, "duration": 5.967289924621582}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, return a string of words whose lengths are prime numbers.\n    \"\"\"\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter words whose lengths are prime numbers\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the filtered words back into a string\n    return ' '.join(prime_length_words)", "prompt_tokens": 187, "completion_tokens": 161, "duration": 5.916442394256592}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions x and n into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the numerators and denominators respectively\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # If the division of the result numerator by the result denominator is a whole number, return True\n    return result_num % result_den == 0", "prompt_tokens": 195, "completion_tokens": 115, "duration": 3.7796571254730225}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Sort the list using the built-in sorted function\n    # The key for sorting is a tuple where the first element is the sum of digits (primary sorting)\n    # and the second element is the index of the number in the original list (secondary sorting, to maintain original order among equal sums)\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 128, "duration": 4.3975818157196045}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize count to 0 to keep track of numbers meeting the criteria\n    count = 0\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is greater than 10\n        if num > 10:\n            # Convert the number to string to easily access first and last digits\n            str_num = str(num)\n            # Get the first and last digit of the number\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            # Check if both first and last digits are odd\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                # If the number meets all criteria, increment the count\n                count += 1\n                \n    # Return the final count of numbers meeting the criteria\n    return count", "prompt_tokens": 159, "completion_tokens": 188, "duration": 6.42533016204834}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Initialize counters for remainders when divided by 3\n    remainder_counts = [0, 0, 0]\n    \n    # Fill the array and count the remainders\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        remainder = value % 3\n        remainder_counts[remainder] += 1\n    \n    # Calculate the number of valid triples\n    # Three cases: all three numbers have the same remainder or they form a sequence of remainders 0, 1, 2\n    triples = (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6 +\n               remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6 +\n               remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6 +\n               remainder_counts[0] * remainder_counts[1] * remainder_counts[2])\n    \n    return triples", "prompt_tokens": 205, "completion_tokens": 252, "duration": 8.021477222442627}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    # Define the order of planets from the closest to the Sun to the furthest\n    planets_order = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    # Check if both planets are valid\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    # Get the index of each planet\n    planet1_index = planets_order.index(planet1)\n    planet2_index = planets_order.index(planet2)\n    \n    # Ensure the lower index is always first\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    \n    # Return the planets between the two given planets, exclusive\n    return planets_order[planet1_index + 1:planet2_index]", "prompt_tokens": 251, "completion_tokens": 197, "duration": 8.53576397895813}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    sorted_list = sorted(even_length_list, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 79, "duration": 6.967126131057739}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if n is a prime number\n    if is_prime(n):\n        return x  # Return x if n is prime\n    else:\n        return y  # Return y if n is not prime", "prompt_tokens": 126, "completion_tokens": 122, "duration": 4.9822633266448975}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize sum to 0, to hold the sum of squares of odd numbers\n    sum = 0\n    # Iterate through each number in the list\n    for number in lst:\n        # Check if the number is an integer, positive, and odd\n        if isinstance(number, int) and number > 0 and number % 2 != 0:\n            # Square the number and add it to the sum\n            sum += number ** 2\n    # Return the final sum\n    return sum", "prompt_tokens": 177, "completion_tokens": 117, "duration": 3.867537021636963}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Initialize an empty list to store the results\n    result = []\n    # Iterate through the pairs of game results and guesses using zip\n    for g, gu in zip(game, guess):\n        # Calculate the absolute difference between the game result and the guess\n        difference = abs(g - gu)\n        # Append the difference to the result list\n        result.append(difference)\n    # Return the result list\n    return result", "prompt_tokens": 270, "completion_tokens": 99, "duration": 5.160152196884155}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to store the strongest extension and its strength\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the number of uppercase (CAP) and lowercase (SM) letters in the extension\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        # Calculate the strength of the extension\n        strength = CAP - SM\n        \n        # Update the strongest extension if the current extension has a greater or equal strength\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    \n    # Return the class name concatenated with the strongest extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 182, "duration": 6.373672246932983}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Concatenate the first word with itself to handle the rotation check\n    a_doubled = a + a\n    # Check if the second word is a substring of the doubled first word\n    return b in a_doubled", "prompt_tokens": 169, "completion_tokens": 62, "duration": 3.688793659210205}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    # Convert the number to a string to iterate over each digit\n    num_str = str(num)\n    for digit in num_str:\n        # Check if the digit is even\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            # If not even, then it's odd\n            odd_count += 1\n    # Return a tuple with the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 154, "duration": 5.837917327880859}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define a list of Roman numerals and their corresponding values\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''  # Initialize the result string\n    i = 0  # Initialize index for traversal\n    # Loop through each symbol\n    while number > 0:\n        # For each symbol, append it the number of times number is divisible by its value\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1  # Move to the next symbol\n    return roman_num", "prompt_tokens": 141, "completion_tokens": 225, "duration": 7.198461532592773}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # First, sort the sides to ensure a < b < c\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the triangle satisfies the Pythagorean theorem for right-angled triangles\n    # This is done by checking if the square of the longest side (c) is equal to the sum of the squares of the other two sides (a and b)\n    return a**2 + b**2 == c**2", "prompt_tokens": 148, "completion_tokens": 112, "duration": 3.359193801879883}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # First, create a function to count unique characters in a word\n    def unique_chars(word):\n        return len(set(word))  # Set of a word gives unique characters, len gives its length\n\n    # Initialize variables to keep track of the word with the maximum number of unique characters\n    # and the maximum number of unique characters found so far\n    max_word = \"\"\n    max_unique = 0\n\n    for word in words:\n        # Count unique characters in the current word\n        unique = unique_chars(word)\n\n        # Check if this word has more unique characters than the current max\n        # or if it has the same number but is lexicographically smaller\n        if unique > max_unique or (unique == max_unique and word < max_word):\n            max_word = word  # Update the word with the maximum number of unique characters\n            max_unique = unique  # Update the maximum number of unique characters\n\n    return max_word  # Return the word with the maximum number of unique characters", "prompt_tokens": 160, "completion_tokens": 216, "duration": 15.018837213516235}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total carrots that will be eaten after the meal\n    eaten_after_meal = min(need, remaining) + number\n    # Calculate the carrots left after eating\n    carrots_left = max(0, remaining - need)\n    # Return the total number of eaten carrots and the carrots left\n    return [eaten_after_meal, carrots_left]", "prompt_tokens": 317, "completion_tokens": 88, "duration": 3.516953706741333}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize a variable to hold the expression as a string\n    expression = \"\"\n    \n    # Iterate through the operands list\n    for i in range(len(operand)):\n        # Add the current operand to the expression\n        expression += str(operand[i])\n        \n        # If there is an operator left to add (i.e., we're not at the last operand), add it\n        if i < len(operator):\n            expression += \" \" + operator[i] + \" \"\n    \n    # Evaluate the built expression string using the eval function and return the result\n    return eval(expression)", "prompt_tokens": 247, "completion_tokens": 132, "duration": 5.904733896255493}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # First, check if the string contains any letters\n    if not any(c.isalpha() for c in s):\n        # If no letters, reverse the string\n        return s[::-1]\n    else:\n        # If there are letters, iterate through each character\n        result = []\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # If it is, reverse its case\n                if char.islower():\n                    result.append(char.upper())\n                else:\n                    result.append(char.lower())\n            else:\n                # If it's not a letter, keep it as is\n                result.append(char)\n        # Join the list into a string and return\n        return ''.join(result)", "prompt_tokens": 147, "completion_tokens": 160, "duration": 6.799694299697876}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    # Check if the text is an empty string\n    if text == \"\":\n        return None\n    else:\n        # Encode the text to bytes\n        text_bytes = text.encode('utf-8')\n        # Create an md5 hash object\n        hash_object = hashlib.md5(text_bytes)\n        # Generate the hexadecimal equivalent of the hash\n        hex_dig = hash_object.hexdigest()\n        return hex_dig", "prompt_tokens": 116, "completion_tokens": 101, "duration": 4.504430294036865}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    # Ensure a is less than b for iteration\n    if a > b:\n        a, b = b, a\n    \n    # Initialize an empty list to store even integers\n    even_integers = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for number in range(a, b + 1):\n        # Check if the number is even\n        if number % 2 == 0:\n            # Add the even number to the list\n            even_integers.append(number)\n    \n    # Return the list of even integers\n    return even_integers", "prompt_tokens": 144, "completion_tokens": 133, "duration": 5.859951734542847}
