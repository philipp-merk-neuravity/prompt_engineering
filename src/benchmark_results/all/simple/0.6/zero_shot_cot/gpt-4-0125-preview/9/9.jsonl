{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1036, "completion_tokens": 671, "duration": 33.19583439826965}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n                start = i + 1\n    return result", "prompt_tokens": 912, "completion_tokens": 599, "duration": 33.06635332107544}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 700, "completion_tokens": 368, "duration": 16.591386556625366}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 836, "completion_tokens": 469, "duration": 20.20476245880127}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 874, "completion_tokens": 503, "duration": 22.36343765258789}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 949, "completion_tokens": 641, "duration": 32.640231132507324}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n    levels.append(max_level)\n    \n    return levels", "prompt_tokens": 839, "completion_tokens": 527, "duration": 30.575947284698486}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 793, "completion_tokens": 449, "duration": 31.896089792251587}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        product = 1\n        for num in numbers:\n            product *= num\n        return total_sum, product", "prompt_tokens": 773, "completion_tokens": 443, "duration": 19.206807374954224}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 869, "completion_tokens": 548, "duration": 32.568495988845825}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string  # If the whole string is a palindrome\n\n# Test cases are removed", "prompt_tokens": 2903, "completion_tokens": 2103, "duration": 72.03591752052307}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 668, "completion_tokens": 396, "duration": 30.516565799713135}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 826, "completion_tokens": 481, "duration": 38.52207946777344}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 636, "completion_tokens": 350, "duration": 15.853805780410767}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 610, "completion_tokens": 351, "duration": 33.31780433654785}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1) )", "prompt_tokens": 728, "completion_tokens": 436, "duration": 18.517610788345337}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 715, "completion_tokens": 413, "duration": 20.052379369735718}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    parsed_notes = []\n    for note in music_string.split():\n        if note in notes:\n            parsed_notes.append(notes[note])\n\n    return parsed_notes", "prompt_tokens": 1113, "completion_tokens": 670, "duration": 32.53065776824951}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 965, "completion_tokens": 679, "duration": 37.46096444129944}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 786, "completion_tokens": 496, "duration": 30.54061484336853}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\nimport math\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = math.inf\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 1044, "completion_tokens": 628, "duration": 33.15782833099365}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1250, "completion_tokens": 878, "duration": 36.78083539009094}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 698, "completion_tokens": 371, "duration": 17.28836679458618}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 504, "completion_tokens": 254, "duration": 12.730196237564087}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 661, "completion_tokens": 410, "duration": 17.040913820266724}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 873, "completion_tokens": 509, "duration": 30.49718952178955}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 781, "completion_tokens": 457, "duration": 20.080527544021606}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 531, "completion_tokens": 284, "duration": 13.459232568740845}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 624, "completion_tokens": 353, "duration": 15.570034980773926}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 796, "completion_tokens": 478, "duration": 31.918084383010864}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 736, "completion_tokens": 352, "duration": 16.725677013397217}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 665, "completion_tokens": 386, "duration": 32.70530390739441}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    for x in range(-1000, 1001):\n        if poly(xs, x) == 0:\n            return x", "prompt_tokens": 1288, "completion_tokens": 708, "duration": 34.45861625671387}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible = sorted(divisible_by_three)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_divisible.pop(0)\n    return result", "prompt_tokens": 1166, "completion_tokens": 770, "duration": 33.21581315994263}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 838, "completion_tokens": 526, "duration": 31.334567070007324}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 786, "completion_tokens": 455, "duration": 21.47735333442688}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 828, "completion_tokens": 547, "duration": 32.419689893722534}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(l[::2])\n    return result", "prompt_tokens": 924, "completion_tokens": 524, "duration": 31.440387964248657}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 864, "completion_tokens": 522, "duration": 20.568167209625244}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return a\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)", "prompt_tokens": 670, "completion_tokens": 472, "duration": 17.594220876693726}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 986, "completion_tokens": 552, "duration": 32.11459255218506}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return abs(n) * 2", "prompt_tokens": 723, "completion_tokens": 253, "duration": 13.223368167877197}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 659, "completion_tokens": 279, "duration": 13.57042670249939}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 976, "completion_tokens": 519, "duration": 69.06878471374512}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 849, "completion_tokens": 551, "duration": 32.67807340621948}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 544, "completion_tokens": 291, "duration": 12.958208084106445}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n    return fib[n]", "prompt_tokens": 1063, "completion_tokens": 656, "duration": 35.97872304916382}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 848, "completion_tokens": 578, "duration": 32.746527433395386}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 731, "completion_tokens": 425, "duration": 19.27630853652954}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 775, "completion_tokens": 407, "duration": 22.055922746658325}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 782, "completion_tokens": 503, "duration": 22.183093547821045}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 887, "completion_tokens": 491, "duration": 31.553049564361572}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 804, "completion_tokens": 489, "duration": 37.87602400779724}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 482, "completion_tokens": 214, "duration": 9.908676385879517}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 940, "completion_tokens": 505, "duration": 31.424655199050903}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 607, "completion_tokens": 373, "duration": 18.834928512573242}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 807, "completion_tokens": 498, "duration": 21.661198139190674}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 930, "completion_tokens": 638, "duration": 32.68852472305298}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 937, "completion_tokens": 555, "duration": 31.56489610671997}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factor = 2\n    while n > 1:\n        if n % factor == 0 and is_prime(n // factor):\n            return n // factor\n        while n % factor == 0:\n            n //= factor\n        factor += 1", "prompt_tokens": 1764, "completion_tokens": 1262, "duration": 32.94319176673889}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 601, "completion_tokens": 255, "duration": 11.779946565628052}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 771, "completion_tokens": 472, "duration": 20.033788442611694}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [coeff * exp for exp, coeff in enumerate(xs) if exp != 0]", "prompt_tokens": 725, "completion_tokens": 352, "duration": 17.081825494766235}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 1057, "completion_tokens": 648, "duration": 38.765549421310425}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels and (char.lower() != 'y' or s[-1].lower() == 'y'))", "prompt_tokens": 1161, "completion_tokens": 545, "duration": 30.321627855300903}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift %= n\n    if shift == 0:\n        return x\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 719, "completion_tokens": 421, "duration": 17.024913787841797}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 765, "completion_tokens": 382, "duration": 30.313262462615967}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 974, "completion_tokens": 414, "duration": 19.553942680358887}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_numbers = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]\n    if not even_numbers:\n        return []\n    smallest_even_value = min(even_numbers)[0]\n    smallest_even_index = min((idx for val, idx in even_numbers if val == smallest_even_value))\n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1272, "completion_tokens": 556, "duration": 33.130666732788086}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n\n    result = -1\n    for key, value in count.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n\n    return result", "prompt_tokens": 1029, "completion_tokens": 589, "duration": 32.8126654624939}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 837, "completion_tokens": 448, "duration": 18.792465209960938}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 1042, "completion_tokens": 707, "duration": 33.36601805686951}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1193, "completion_tokens": 576, "duration": 31.37781047821045}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count", "prompt_tokens": 998, "completion_tokens": 555, "duration": 31.86522078514099}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1041, "completion_tokens": 566, "duration": 33.377808570861816}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 3:\n                return False\n\n    return count == 3", "prompt_tokens": 1812, "completion_tokens": 1416, "duration": 57.37407207489014}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and (x == 1 or (x > 1 and n == 1) or n ** int(round(x ** (1 / n))) == x)", "prompt_tokens": 1031, "completion_tokens": 619, "duration": 33.333414793014526}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 741, "completion_tokens": 371, "duration": 21.25138807296753}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1166, "completion_tokens": 448, "duration": 30.307881116867065}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 727, "completion_tokens": 290, "duration": 14.416257858276367}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 1113, "completion_tokens": 761, "duration": 36.045634269714355}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1257, "completion_tokens": 785, "duration": 38.71594309806824}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))\n\n# Test with a string of length 5, which is a prime number\nassert prime_length('Hello') == True, \"Length 5 should be prime\"\n\n# Test with a string of length 7, also a prime number\nassert prime_length('abcdcba') == True, \"Length 7 should be prime\"\n\n# Test with a string of length 7 again, to check consistency\nassert prime_length('kittens') == True, \"Length 7 should still be prime\"\n\n# Test with a string of length 6, which is not a prime number\nassert prime_length('orange') == False, \"Length 6 is not prime\"\n\n# Test with a string of length 2, the smallest even prime number\nassert prime_length('Hi') == True, \"Length 2 should be prime\"\n\n# Test with a string of length 1, which is not considered a prime number\nassert prime_length('A') == False, \"Length 1 is not prime\"\n\n# Test with an empty string, length 0, definitely not a prime number\nassert prime_length('') == False, \"Length 0 is not prime\"\n\n# Test with a string of length 11, a larger prime number\nassert prime_length('abcdefghijk') == True, \"Length 11 should be prime\"\n\n# Test with a string of length 4, not a prime number\nassert prime_length('test') == False, \"Length 4 is not prime\"\n\n# Test with a longer string of length 23, another prime number\nassert prime_length('abcdefghijklmnopqrstuvw') == True, \"Length 23 should be prime\"\n\n# Test with a very short string, length 3, which is a prime number\nassert prime_length('cat') == True, \"Length 3 should be prime\"\n\n# Test with a string of length 9, not a prime number since it's divisible by 3\nassert prime_length('chocolate') == False, \"Length 9 is not prime\"", "prompt_tokens": 759, "completion_tokens": 894, "duration": 42.73220252990723}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n <= 0:\n        return 0\n\n    count += 9  # Count of numbers that end with 1\n    count += 9 * 9  # Count of numbers that start with 1\n    count -= 1  # Remove the case where both the first and last digits are 1\n\n    return count", "prompt_tokens": 539, "completion_tokens": 355, "duration": 15.114362239837646}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(x) for x in str(N)))[2:]", "prompt_tokens": 889, "completion_tokens": 465, "duration": 31.50032901763916}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])", "prompt_tokens": 704, "completion_tokens": 450, "duration": 21.14724111557007}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 917, "completion_tokens": 519, "duration": 28.5993709564209}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n\n    return result", "prompt_tokens": 1387, "completion_tokens": 762, "duration": 39.23054122924805}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def is_odd(num):\n        return num % 2 != 0\n    \n    sorted_array = array.copy()\n    \n    if is_odd(sorted_array[0] + sorted_array[-1]):\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array", "prompt_tokens": 1327, "completion_tokens": 807, "duration": 37.7570378780365}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    shift = 2\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            encrypted += shifted\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 738, "completion_tokens": 408, "duration": 15.64200735092163}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_nums = sorted(set(lst))\n    \n    if len(unique_nums) < 2:\n        return None\n    \n    return unique_nums[1]", "prompt_tokens": 866, "completion_tokens": 474, "duration": 22.193318128585815}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace(\"!\", \".\").replace(\"?\", \".\").split(\".\") if sentence.strip().startswith(\"I\"))", "prompt_tokens": 1424, "completion_tokens": 866, "duration": 30.884377479553223}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 916, "completion_tokens": 517, "duration": 26.512859344482422}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            if char.islower():\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                encoded_message += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).lower()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 808, "completion_tokens": 516, "duration": 21.89473867416382}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1331, "completion_tokens": 693, "duration": 35.664589166641235}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    is_lower = all(key.islower() for key in keys if isinstance(key, str))\n    is_upper = all(key.isupper() for key in keys if isinstance(key, str))\n    \n    return is_lower or is_upper", "prompt_tokens": 1125, "completion_tokens": 680, "duration": 32.45194959640503}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 895, "completion_tokens": 508, "duration": 25.64632749557495}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 763, "completion_tokens": 414, "duration": 45.19817399978638}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 697, "completion_tokens": 408, "duration": 23.12451481819153}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "prompt_tokens": 950, "completion_tokens": 500, "duration": 21.095407724380493}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 855, "completion_tokens": 476, "duration": 25.309525728225708}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in re.split(r'[,\\s]+', s) if word.strip()]", "prompt_tokens": 814, "completion_tokens": 431, "duration": 17.37894320487976}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = num\n    return max_even", "prompt_tokens": 865, "completion_tokens": 545, "duration": 24.665101766586304}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 960, "completion_tokens": 536, "duration": 23.783858060836792}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 707, "completion_tokens": 371, "duration": 21.421306848526}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def num_to_word(num):\n        words = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        return words[num - 1]\n\n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [num_to_word(num) for num in filtered_arr]", "prompt_tokens": 1162, "completion_tokens": 517, "duration": 23.398773908615112}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n == 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 825, "completion_tokens": 490, "duration": 66.04743337631226}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "prompt_tokens": 1041, "completion_tokens": 513, "duration": 29.4884295463562}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 811, "completion_tokens": 411, "duration": 20.49861454963684}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1227, "completion_tokens": 496, "duration": 23.586783409118652}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if odd_count <= even_count else \"NO\"", "prompt_tokens": 1103, "completion_tokens": 596, "duration": 29.562304735183716}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 1122, "completion_tokens": 701, "duration": 22.316555500030518}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 1017, "completion_tokens": 548, "duration": 25.01110601425171}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), str(len([c for c in s if int(c) % 2 != 0])), str(len([c for c in s if int(c) % 2 != 0])), str(len([c for c in s if int(c) % 2 != 0]))) for s in lst]", "prompt_tokens": 3142, "completion_tokens": 1588, "duration": 56.53471922874451}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    current_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 719, "completion_tokens": 425, "duration": 20.329199075698853}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_buckets = 0\n    for row in grid:\n        total_buckets += math.ceil(sum(row) / capacity)\n\n    return total_buckets", "prompt_tokens": 1351, "completion_tokens": 567, "duration": 28.984933376312256}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1003, "completion_tokens": 508, "duration": 28.46775245666504}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter.upper() not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1892, "completion_tokens": 1144, "duration": 91.11246967315674}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 877, "completion_tokens": 491, "duration": 22.5746750831604}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'", "prompt_tokens": 968, "completion_tokens": 549, "duration": 37.50055432319641}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1133, "completion_tokens": 534, "duration": 24.703728914260864}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 835, "completion_tokens": 497, "duration": 25.343926906585693}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 1011, "completion_tokens": 605, "duration": 28.04377841949463}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1162, "completion_tokens": 591, "duration": 33.375880002975464}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month = int(parts[0])\n    day = int(parts[1])\n    year = int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n\n    return False", "prompt_tokens": 1373, "completion_tokens": 864, "duration": 36.70618653297424}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 1048, "completion_tokens": 645, "duration": 26.541335105895996}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    unique = set(lst)\n    return len(unique) == len(lst) and sorted(lst) == lst", "prompt_tokens": 1095, "completion_tokens": 445, "duration": 25.411857843399048}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length <= 0:\n        return \"NO\"\n    \n    if length == 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 2117, "completion_tokens": 1197, "duration": 47.57991909980774}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 900, "completion_tokens": 547, "duration": 31.05655574798584}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(grid, x, y, k, path):\n        if k == 0:\n            return path[:]\n\n        path.append(grid[x][y])\n        grid[x][y] *= -1\n\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] > 0:\n                res = dfs(grid, nx, ny, k-1, path)\n                if res:\n                    return res\n\n        grid[x][y] *= -1\n        path.pop()\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                return dfs([row[:] for row in grid], i, j, k, [])\n\n# Test cases\nassert minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\nassert minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\nassert minPath([[1, 2], [3, 4]], 2) == [1, 2]\nassert minPath([[10, 2], [3, 4]], 1) == [2]\nassert minPath([[1, 6, 7], [2, 5, 8], [3, 4, 9]], 5) == [1, 2, 3, 2, 1]\nassert minPath([[1, 3, 4], [2, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4]\nassert minPath([[2, 1], [4, 3]], 4) == [1, 2, 1, 2]\nassert minPath([[1]], 3) == [1, 1, 1]\nassert minPath([[4, 1], [2, 3]], 4) == [1, 2, 3, 4]\nassert minPath([[6, 1, 8], [7, 5, 3], [2, 9, 4]], 6) == [1, 2, 3, 4, 5, 6]", "prompt_tokens": 5916, "completion_tokens": 3563, "duration": 112.96406888961792}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 1145, "completion_tokens": 604, "duration": 36.4682936668396}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 669, "completion_tokens": 390, "duration": 18.387531995773315}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 0", "prompt_tokens": 882, "completion_tokens": 485, "duration": 24.811194896697998}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (num % 1 > 0)) ** 2\n    return total", "prompt_tokens": 976, "completion_tokens": 525, "duration": 22.001945734024048}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() if txt.strip() else False", "prompt_tokens": 870, "completion_tokens": 440, "duration": 20.49042582511902}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 799, "completion_tokens": 461, "duration": 30.955620288848877}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    max_neg = None if not neg_ints else max(neg_ints)\n    min_pos = None if not pos_ints else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 801, "completion_tokens": 428, "duration": 20.13066816329956}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n    return max((a, b), key=lambda x: (type(x) in [int, float], x))", "prompt_tokens": 1888, "completion_tokens": 1265, "duration": 46.97158193588257}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 713, "completion_tokens": 400, "duration": 22.603863954544067}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        factorial_i = 1\n        for j in range(1, i+1):\n            factorial_i *= j\n        result *= factorial_i\n    return result", "prompt_tokens": 938, "completion_tokens": 646, "duration": 32.50676941871643}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    if \"  \" in text:\n        text = text.replace(\"  \", \"-\")\n    return text.replace(\" \", \"_\")", "prompt_tokens": 748, "completion_tokens": 388, "duration": 18.548473119735718}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return 'No'\n    if not file_name_parts[0] or not file_name_parts[0][0].isalpha():\n        return 'No'\n    if file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1098, "completion_tokens": 620, "duration": 36.42689609527588}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1002, "completion_tokens": 556, "duration": 23.464526653289795}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 788, "completion_tokens": 419, "duration": 15.97291874885559}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1050, "completion_tokens": 621, "duration": 31.002231121063232}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))", "prompt_tokens": 933, "completion_tokens": 571, "duration": 27.198587656021118}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 808, "completion_tokens": 468, "duration": 25.901554346084595}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 991, "completion_tokens": 583, "duration": 32.16775989532471}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start > end:\n        start, end = end, start\n    \n    return tuple(planets[start+1:end])\n\n# Test with correct input where planet1 is closer to the Sun than planet2\nassert bf(\"Mercury\", \"Venus\") == (), \"Test case where there are no planets between the two given planets.\"\n\n# Test with correct input where planet1 is farther from the Sun than planet2, ensuring it works in reverse order too\nassert bf(\"Neptune\", \"Jupiter\") == (\"Saturn\", \"Uranus\"), \"Test case where planet1 is farther from the Sun than planet2.\"\n\n# Test with correct input where there are multiple planets between planet1 and planet2\nassert bf(\"Mercury\", \"Jupiter\") == (\"Venus\", \"Earth\", \"Mars\"), \"Test case with multiple planets between the two given planets.\"\n\n# Test with the same planet for both planet1 and planet2\nassert bf(\"Earth\", \"Earth\") == (), \"Test case where both planets are the same, so no planets in between.\"\n\n# Test with incorrect planet names\nassert bf(\"Pluto\", \"Mars\") == (), \"Test case with an incorrect planet name for planet1.\"\nassert bf(\"Mars\", \"Pluto\") == (), \"Test case with an incorrect planet name for planet2.\"\nassert bf(\"Pluto\", \"Xandar\") == (), \"Test case with incorrect planet names for both planet1 and planet2.\"\n\n# Test with correct input ensuring case sensitivity\nassert bf(\"earth\", \"mars\") == (), \"Test case to check case sensitivity, expecting an empty tuple due to incorrect capitalization.\"\n\n# Test with planets at the opposite ends of the solar system\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test case with planets at the extreme ends of the solar system.\"\n\n# Test with planets that have one planet in between\nassert bf(\"Venus\", \"Earth\") == (), \"Test case where there is exactly one planet between the given planets, expecting no planets in return.\"\n\n# Edge case with the first and last planets in the solar system, but in reverse order\nassert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Edge case with the planets in reverse order from the end to the start of the solar system.\"", "prompt_tokens": 1100, "completion_tokens": 1099, "duration": 41.39598774909973}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(even_length_words), key=lambda x: (len(x), x))", "prompt_tokens": 1033, "completion_tokens": 526, "duration": 29.28291630744934}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 866, "completion_tokens": 595, "duration": 30.86239004135132}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1520, "completion_tokens": 867, "duration": 29.019879817962646}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]", "prompt_tokens": 1294, "completion_tokens": 679, "duration": 36.86759400367737}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    \n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n            \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1081, "completion_tokens": 443, "duration": 18.514898538589478}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if n < m:\n        return False\n    a += a\n    return b in a", "prompt_tokens": 1719, "completion_tokens": 1095, "duration": 34.96306037902832}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 787, "completion_tokens": 550, "duration": 28.375360012054443}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_mapping = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_mapping.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()", "prompt_tokens": 865, "completion_tokens": 617, "duration": 27.16522979736328}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 820, "completion_tokens": 468, "duration": 25.823079109191895}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (unique_chars(x), x))", "prompt_tokens": 779, "completion_tokens": 394, "duration": 17.29194951057434}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1246, "completion_tokens": 557, "duration": 26.887587785720825}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1207, "completion_tokens": 726, "duration": 46.247817277908325}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = \"\"\n    for char in s:\n        if char.isalpha():\n            new_s += char.swapcase()\n        else:\n            new_s += char\n    if new_s.isalpha():\n        return new_s[::-1]\n    return new_s", "prompt_tokens": 731, "completion_tokens": 396, "duration": 17.734606981277466}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 676, "completion_tokens": 372, "duration": 16.5513117313385}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0 or num == a or num == b]", "prompt_tokens": 809, "completion_tokens": 460, "duration": 25.806918621063232}
