{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 926, "completion_tokens": 561, "duration": 26.30928683280945}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        group += char\n        if count == 0:\n            result.append(group)\n            group = \"\"\n    return result", "prompt_tokens": 870, "completion_tokens": 548, "duration": 28.94138813018799}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 690, "completion_tokens": 358, "duration": 19.40240240097046}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 910, "completion_tokens": 543, "duration": 22.91739583015442}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean(abs(x - mean) for x in numbers)", "prompt_tokens": 924, "completion_tokens": 552, "duration": 23.883820056915283}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 943, "completion_tokens": 637, "duration": 29.781278133392334}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 1683, "completion_tokens": 1142, "duration": 37.772764682769775}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 959, "completion_tokens": 629, "duration": 36.095401763916016}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for num in numbers:\n        product *= num\n    return sum(numbers), product", "prompt_tokens": 761, "completion_tokens": 421, "duration": 21.584244966506958}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n\n    return result", "prompt_tokens": 878, "completion_tokens": 561, "duration": 23.74902081489563}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    palindrome_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            palindrome_suffix = string[:i+1]\n    return string + string[:len(string)-len(palindrome_suffix)][::-1]", "prompt_tokens": 1048, "completion_tokens": 731, "duration": 42.04568672180176}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for i in range(min(len(a), len(b))):\n        res += str(int(a[i]) ^ int(b[i]))\n    return res", "prompt_tokens": 702, "completion_tokens": 424, "duration": 24.13430619239807}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 789, "completion_tokens": 463, "duration": 26.203349113464355}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 640, "completion_tokens": 353, "duration": 18.108685731887817}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 600, "completion_tokens": 336, "duration": 19.328418493270874}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n\n\n\n# Test the base case where n is 0\nassert string_sequence(0) == '0'\n\n# Test a normal case where n is greater than 0\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test the function with a negative number, expecting an empty string because the sequence cannot start\nassert string_sequence(-1) == ''\n\n# Test with a larger value of n to ensure the function scales correctly\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n\n# Test with a prime number to see if the function correctly handles non-even numbers\nassert string_sequence(7) == '0 1 2 3 4 5 6 7'\n\n# Test the function with a very small positive number\nassert string_sequence(1) == '0 1'\n\n# Test to ensure spaces are correctly placed (only between numbers, not at the start or end)\n# This will indirectly test for off-by-one errors in string construction\nassert not string_sequence(3).startswith(' ') and not string_sequence(3).endswith(' ')\n\n# Edge case: Test with the maximum reasonable input value to ensure the function can handle it without error\n# This test is commented out because it's heavily dependent on the system's ability to handle large strings\n# assert string_sequence(10000) != ''", "prompt_tokens": 620, "completion_tokens": 623, "duration": 21.381546020507812}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 645, "completion_tokens": 339, "duration": 15.965794563293457}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_values.get(note.replace(\"|\", \"\"), 0) for note in notes]", "prompt_tokens": 2574, "completion_tokens": 1586, "duration": 48.4579975605011}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 737, "completion_tokens": 455, "duration": 26.627963304519653}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 717, "completion_tokens": 432, "duration": 22.220407485961914}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min(((x, y) for x in numbers for y in numbers if x != y), key=lambda pair: abs(pair[0] - pair[1]))\n    return tuple(sorted(closest_pair))\n\n\n# Test cases\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\nassert find_closest_elements([-5.0, -1.0, -4.0, -3.2, -3.1]) == (-3.2, -3.1)\nassert find_closest_elements([-2.0, 0.0, 1.0, 2.0, 1.1]) == (1.0, 1.1)\nassert find_closest_elements([0.0001, 0.0002, 0.0003]) == (0.0001, 0.0002)\nassert find_closest_elements([10000.0, 20000.0, 30000.0, 10001.0]) == (10000.0, 10001.0)\nassert find_closest_elements([1.0, 2.0]) == (1.0, 2.0)\nassert find_closest_elements([1.0, 2.0, 3.0]) == (2.0, 3.0)\nassert find_closest_elements([2.0, 2.0, 3.0]) == (2.0, 2.0)\nassert find_closest_elements([5.0, 4.0, 3.0, 2.1, 2.0]) == (2.0, 2.1)", "prompt_tokens": 4409, "completion_tokens": 3322, "duration": 87.11935305595398}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1048, "completion_tokens": 677, "duration": 81.06132793426514}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 712, "completion_tokens": 385, "duration": 20.540987968444824}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 509, "completion_tokens": 259, "duration": 13.417659997940063}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 709, "completion_tokens": 469, "duration": 20.91787624359131}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors\n\n# Test case with a prime number, expecting a list with the number itself\nassert factorize(7) == [7], \"Failed on prime number\"\n\n# Test case with a composite number having multiple same prime factors\nassert factorize(8) == [2, 2, 2], \"Failed on composite number with same prime factors\"\n\n# Test case with a composite number having different prime factors\nassert factorize(70) == [2, 5, 7], \"Failed on composite number with different prime factors\"\n\n# Test case with 1, expecting an empty list as 1 does not have prime factors\nassert factorize(1) == [], \"Failed on 1\"\n\n# Test case with 0, also expecting an empty list as 0 does not have prime factors\nassert factorize(0) == [], \"Failed on 0\"\n\n# Test case with a large prime number to test efficiency\nassert factorize(997) == [997], \"Failed on large prime number\"\n\n# Test case with a square of a prime number, expecting the prime number twice\nassert factorize(49) == [7, 7], \"Failed on square of a prime number\"\n\n# Test case with a product of first n primes, to test a mix of different factors\nassert factorize(2*3*5*7*11) == [2, 3, 5, 7, 11], \"Failed on product of first n primes\"\n\n# Test case with a power of a prime number, expecting repeated prime\nassert factorize(16) == [2, 2, 2, 2], \"Failed on power of a prime number\"\n\n# Test case with a large number having multiple factors, to test efficiency and correctness\nassert factorize(2*2*3*3*5*7*11*13) == [2, 2, 3, 3, 5, 7, 11, 13], \"Failed on large number with multiple factors\"\n\n# Test case with a negative number, although not specified, assuming it should return an empty list or handle it gracefully\nassert factorize(-5) == [], \"Failed on negative number\"", "prompt_tokens": 894, "completion_tokens": 1001, "duration": 34.6814444065094}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 734, "completion_tokens": 413, "duration": 28.348319053649902}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])", "prompt_tokens": 589, "completion_tokens": 342, "duration": 21.964797019958496}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 574, "completion_tokens": 298, "duration": 13.171024322509766}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 890, "completion_tokens": 558, "duration": 23.977417469024658}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 722, "completion_tokens": 338, "duration": 16.09568738937378}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 638, "completion_tokens": 313, "duration": 13.137338161468506}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1145, "completion_tokens": 606, "duration": 26.74485182762146}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in third_indices:\n        result[i:i+3] = sorted(l[i:i+3])\n    return result", "prompt_tokens": 1061, "completion_tokens": 643, "duration": 30.09127712249756}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 834, "completion_tokens": 522, "duration": 23.672082662582397}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 798, "completion_tokens": 467, "duration": 25.622069835662842}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 913, "completion_tokens": 635, "duration": 31.55270266532898}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 982, "completion_tokens": 587, "duration": 27.362439155578613}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1142, "completion_tokens": 804, "duration": 75.9723949432373}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num == fibonacci(count):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 784, "completion_tokens": 593, "duration": 22.222196340560913}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1110, "completion_tokens": 676, "duration": 32.528958320617676}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road\nassert car_race_collision(0) == 0, \"No cars should result in no collisions\"\n\n# Test with a single pair of cars\nassert car_race_collision(1) == 1, \"One car from each direction should result in one collision\"\n\n# Test with multiple pairs of cars\nassert car_race_collision(5) == 5, \"Five cars from each direction should result in five collisions\"\n\n# Test with a large number of cars\nassert car_race_collision(100) == 100, \"100 cars from each direction should result in 100 collisions\"\n\n# Test with a negative number of cars to check for error handling\ntry:\n    car_race_collision(-1)\n    assert False, \"Negative number of cars should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for negative number of cars\"\n\n# Test with a non-integer number of cars to check type enforcement\ntry:\n    car_race_collision(3.5)\n    assert False, \"Decimal number of cars should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for non-integer number of cars\"\n\n# Test with a very small decimal (close to zero but not zero) to check for rounding issues\ntry:\n    car_race_collision(0.0001)\n    assert False, \"Decimal number very close to zero should raise an error or be handled\"\nexcept Exception:\n    assert True, \"An exception was expected for non-integer number of cars\"\n\n# Edge case: Test with the maximum integer value to ensure the function can handle large inputs\nimport sys\ntry:\n    car_race_collision(sys.maxsize)\n    assert True, \"The function should be able to handle the maximum integer value\"\nexcept Exception:\n    assert False, \"The function should not fail with the maximum integer value\"", "prompt_tokens": 922, "completion_tokens": 840, "duration": 32.099987506866455}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 723, "completion_tokens": 347, "duration": 22.306276321411133}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 936, "completion_tokens": 479, "duration": 21.635039806365967}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 1:\n        return 'Error'\n    \n    if x == 0:\n        return '0'\n    \n    if x < 0:\n        return '-' + change_base(-x, base)\n    \n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 899, "completion_tokens": 624, "duration": 29.65642023086548}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 530, "completion_tokens": 277, "duration": 17.18039870262146}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 964, "completion_tokens": 505, "duration": 26.152787923812866}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 801, "completion_tokens": 530, "duration": 27.547635793685913}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 627, "completion_tokens": 321, "duration": 17.362284183502197}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 878, "completion_tokens": 510, "duration": 30.920225143432617}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 760, "completion_tokens": 440, "duration": 24.669681310653687}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 965, "completion_tokens": 572, "duration": 26.806203603744507}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 697, "completion_tokens": 382, "duration": 21.26419162750244}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 487, "completion_tokens": 219, "duration": 11.344320058822632}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 948, "completion_tokens": 513, "duration": 23.867107629776}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 496, "completion_tokens": 260, "duration": 12.099146366119385}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 688, "completion_tokens": 383, "duration": 16.83786964416504}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 904, "completion_tokens": 617, "duration": 31.06281590461731}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 864, "completion_tokens": 483, "duration": 22.613767385482788}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test with a composite number that has small prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to check if function handles even numbers correctly\nassert largest_prime_factor(2048) == 2\n\n# Test with a number having a large prime factor\nassert largest_prime_factor(600851475143) == 6857\n\n# Test with a composite number that is a product of two primes\nassert largest_prime_factor(15) == 5\n\n# Test with a composite number that is a square of a prime\nassert largest_prime_factor(49) == 7\n\n# Test with a number that is a product of primes where one prime is repeated\nassert largest_prime_factor(90) == 5  # 90 = 2 * 3^2 * 5\n\n# Test with a number having three different prime factors\nassert largest_prime_factor(210) == 7  # 210 = 2 * 3 * 5 * 7\n\n# Edge case: Test with the smallest composite number\nassert largest_prime_factor(4) == 2  # 4 = 2^2\n\n# Test with a number having a prime factor in the hundreds\nassert largest_prime_factor(9973*2) == 9973\n\n# Test with a composite number that is a product of the first prime and another prime\nassert largest_prime_factor(2*13) == 13", "prompt_tokens": 615, "completion_tokens": 654, "duration": 24.540178060531616}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 682, "completion_tokens": 336, "duration": 15.849584341049194}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 688, "completion_tokens": 388, "duration": 23.78165030479431}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases (unit tests removed)\nassert derivative([]) == []\nassert derivative([5]) == []\nassert derivative([3, 2]) == [2]\nassert derivative([1, 2, 3]) == [2, 6]\nassert derivative([4, 3, 2, 1]) == [3, 4, 3]\nassert derivative([1, 2, 3, 4, 5]) == [2, 6, 12, 20]\nassert derivative([-4, -3, -2, -1]) == [-3, -4, -3]\nassert derivative([0, 5, 0, 3]) == [5, 0, 9]\nassert derivative([600, 500, 400, 300, 200, 100]) == [500, 800, 900, 800, 500]", "prompt_tokens": 1007, "completion_tokens": 826, "duration": 46.2672381401062}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 862, "completion_tokens": 447, "duration": 23.139294385910034}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiou\"\n    return sum(1 for char in s.lower() if char in vowels or (char == 'y' and s.lower().index(char) == len(s) - 1))", "prompt_tokens": 1781, "completion_tokens": 1179, "duration": 37.73312330245972}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 748, "completion_tokens": 450, "duration": 19.414168119430542}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 800, "completion_tokens": 417, "duration": 18.877381324768066}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1031, "completion_tokens": 467, "duration": 20.0034077167511}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n            \n    if smallest_even == float('inf'):\n        return []\n    \n    return [smallest_even, smallest_index]", "prompt_tokens": 1400, "completion_tokens": 679, "duration": 31.14590835571289}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    result = -1\n    for num, freq in freq_dict.items():\n        if num == freq and num > result:\n            result = num\n    return result", "prompt_tokens": 912, "completion_tokens": 472, "duration": 23.746915578842163}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    min_max_lst = []\n    lst.sort()\n    while lst:\n        min_max_lst.append(lst.pop(0))\n        if lst:\n            min_max_lst.append(lst.pop())\n    return min_max_lst", "prompt_tokens": 817, "completion_tokens": 436, "duration": 19.08262538909912}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 864, "completion_tokens": 531, "duration": 26.83926510810852}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1208, "completion_tokens": 591, "duration": 26.14958906173706}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 937, "completion_tokens": 494, "duration": 20.95890235900879}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1040, "completion_tokens": 559, "duration": 26.74353265762329}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            if count > 3:\n                return False\n    return count == 3 and count > 0", "prompt_tokens": 1849, "completion_tokens": 1459, "duration": 50.579524517059326}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and (n == 1 or (x > 0 and x == n**int(x**0.5)))", "prompt_tokens": 2133, "completion_tokens": 1218, "duration": 41.92938780784607}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return a >= 0 and round(a**(1/3))**3 == a", "prompt_tokens": 996, "completion_tokens": 419, "duration": 21.758589029312134}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in primes)", "prompt_tokens": 1103, "completion_tokens": 366, "duration": 18.27492928504944}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 847, "completion_tokens": 409, "duration": 21.190911054611206}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 925, "completion_tokens": 575, "duration": 24.296309232711792}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('E')\n    return result", "prompt_tokens": 1238, "completion_tokens": 725, "duration": 27.941752195358276}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 621, "completion_tokens": 391, "duration": 15.120462894439697}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        return 0\n    return 2 * 9 * 10**(n - 1)", "prompt_tokens": 1647, "completion_tokens": 1141, "duration": 39.26984095573425}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 928, "completion_tokens": 505, "duration": 22.917145490646362}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 715, "completion_tokens": 461, "duration": 20.821521282196045}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 993, "completion_tokens": 589, "duration": 29.168476104736328}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 2298, "completion_tokens": 1312, "duration": 43.702048540115356}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1120, "completion_tokens": 584, "duration": 37.80146861076355}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                base = ord('A')\n            else:\n                base = ord('a')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 939, "completion_tokens": 621, "duration": 27.50138020515442}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "prompt_tokens": 815, "completion_tokens": 422, "duration": 20.234784364700317}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.!?]', S) if sentence.strip().startswith(\"I\"))\n\nimport re", "prompt_tokens": 828, "completion_tokens": 468, "duration": 21.595353603363037}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 980, "completion_tokens": 565, "duration": 32.84388470649719}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2).upper()\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 752, "completion_tokens": 411, "duration": 18.28350257873535}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst))\n    return digit_sum(largest_prime)", "prompt_tokens": 1435, "completion_tokens": 781, "duration": 37.43668746948242}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 966, "completion_tokens": 509, "duration": 23.395934343338013}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 889, "completion_tokens": 507, "duration": 24.871877193450928}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 860, "completion_tokens": 511, "duration": 24.054492473602295}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 646, "completion_tokens": 374, "duration": 17.668079137802124}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 968, "completion_tokens": 518, "duration": 23.76821279525757}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 1070, "completion_tokens": 681, "duration": 31.750860452651978}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence with spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a simple sentence with commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a mix of spaces and commas\nassert words_string(\"Hello, world, this is, a test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\n\n# Test with a string that has leading and trailing spaces\nassert words_string(\"  Hello, world  \") == [\"Hello\", \"world\"]\n\n# Test with a string that has multiple spaces between words\nassert words_string(\"Hi,  my  name  is  John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a string that has only commas, no spaces\nassert words_string(\"One,two,three,four,five,six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string that has only spaces\nassert words_string(\"     \") == []\n\n# Test with a string that has only commas\nassert words_string(\",,,,,\") == []\n\n# Test with a single word, no spaces or commas\nassert words_string(\"Word\") == [\"Word\"]\n\n# Test with special characters in the string\nassert words_string(\"Hello, #$%, world\") == [\"Hello\", \"#$%\", \"world\"]\n\n# Test with numbers in the string\nassert words_string(\"1, 2, three, four, 5\") == [\"1\", \"2\", \"three\", \"four\", \"5\"]\n\n# Test with a string that contains a comma at the end\nassert words_string(\"Hello, world,\") == [\"Hello\", \"world\"]\n\n# Test with a string that contains a space at the end\nassert words_string(\"Hello world \") == [\"Hello\", \"world\"]", "prompt_tokens": 859, "completion_tokens": 910, "duration": 45.85857367515564}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y+1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y+1)) else -1", "prompt_tokens": 932, "completion_tokens": 618, "duration": 28.29075336456299}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 963, "completion_tokens": 539, "duration": 34.675267696380615}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 829, "completion_tokens": 458, "duration": 23.779731273651123}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digits = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    result = [digits[num-1] for num in reversed(filtered_arr)]\n    return result", "prompt_tokens": 1234, "completion_tokens": 579, "duration": 26.474883794784546}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 873, "completion_tokens": 516, "duration": 24.3999605178833}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1261, "completion_tokens": 759, "duration": 34.53989005088806}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 750, "completion_tokens": 367, "duration": 19.91395902633667}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return arr == sorted_arr or arr == sorted_arr[-1:] + sorted_arr[:-1]", "prompt_tokens": 1237, "completion_tokens": 501, "duration": 25.89224624633789}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 1271, "completion_tokens": 745, "duration": 32.44565510749817}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    for letter in test.split():\n        result[letter] = result.get(letter, 0) + 1\n\n    max_count = max(result.values())\n    return {key: value for key, value in result.items() if value == max_count}", "prompt_tokens": 986, "completion_tokens": 565, "duration": 27.493995428085327}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 950, "completion_tokens": 480, "duration": 20.097924947738647}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(int(d) % 2 != 0 for d in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result", "prompt_tokens": 1106, "completion_tokens": 655, "duration": 31.31389832496643}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum", "prompt_tokens": 861, "completion_tokens": 561, "duration": 23.493083238601685}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n\n    def count_buckets(row, capacity):\n        filled = sum(row)\n        return math.ceil(filled / capacity)\n\n    total_buckets = sum([count_buckets(row, bucket_capacity) for row in grid])\n    return total_buckets", "prompt_tokens": 1510, "completion_tokens": 743, "duration": 41.04100704193115}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 1140, "completion_tokens": 660, "duration": 35.9702582359314}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1016, "completion_tokens": 540, "duration": 25.182828426361084}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 929, "completion_tokens": 517, "duration": 22.045380353927612}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return 'No'\n        return 'Yes' if count == 0 else 'No'\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) == 'Yes' or is_balanced(lst[1] + lst[0]) == 'Yes' else 'No'", "prompt_tokens": 1075, "completion_tokens": 677, "duration": 40.61190390586853}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1266, "completion_tokens": 667, "duration": 26.958543062210083}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 743, "completion_tokens": 407, "duration": 27.43593955039978}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 1023, "completion_tokens": 615, "duration": 27.911501169204712}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1123, "completion_tokens": 538, "duration": 21.94637894630432}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):  # Leap year\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1190, "completion_tokens": 690, "duration": 24.329713106155396}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1073, "completion_tokens": 670, "duration": 28.138214588165283}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1181, "completion_tokens": 566, "duration": 27.304826736450195}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1211, "completion_tokens": 637, "duration": 31.998758792877197}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs_product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        signs_product *= 1 if num > 0 else -1\n        sum_magnitudes += abs(num)\n    return sum_magnitudes * signs_product", "prompt_tokens": 786, "completion_tokens": 445, "duration": 20.968872547149658}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, k, path):\n        if k == 0:\n            return path\n        if 0 <= i < len(grid) and 0 <= j < len(grid[0]):\n            curr_val = grid[i][j]\n            grid[i][j] = None\n            for x, y in ((i+1, j), (i-1, j), (i, j+1), (i, j-1)):\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] is not None:\n                    res = dfs(x, y, k-1, path + [curr_val])\n                    if res:\n                        return res\n            grid[i][j] = curr_val\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, k-1, [])\n            if res:\n                return res\n    return None", "prompt_tokens": 3037, "completion_tokens": 1790, "duration": 51.459322452545166}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i // 2] + 1)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n        return tribonacci", "prompt_tokens": 1157, "completion_tokens": 628, "duration": 26.64130449295044}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_digits_product *= digit\n        n //= 10\n    return odd_digits_product", "prompt_tokens": 616, "completion_tokens": 352, "duration": 14.255901098251343}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) < len(string) // 2", "prompt_tokens": 809, "completion_tokens": 424, "duration": 24.924704551696777}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) ** 2)\n    return total", "prompt_tokens": 954, "completion_tokens": 493, "duration": 22.683882236480713}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-2] == \" \" if len(txt) > 1 else txt.isalpha()\n\n# Test with a basic example where the last character is a letter but part of a word\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\n\n# Test with a basic example where the last character is a letter and not part of a word\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\n\n# Test with a space at the end of the string\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\n\n# Test with an empty string\nassert check_if_last_char_is_a_letter(\"\") == False\n\n# Test with a string where the last character is a digit\nassert check_if_last_char_is_a_letter(\"apple pie 2\") == False\n\n# Test with a string where the last character is a punctuation mark\nassert check_if_last_char_is_a_letter(\"apple pie!\") == False\n\n# Test with a string that has only one character and it is a letter\nassert check_if_last_char_is_a_letter(\"a\") == True\n\n# Test with a string that has only one character and it is not a letter\nassert check_if_last_char_is_a_letter(\"1\") == False\n\n# Test with a string that has spaces before the last letter\nassert check_if_last_char_is_a_letter(\"apple pi   e\") == True\n\n# Test with a mixed case letter at the end\nassert check_if_last_char_is_a_letter(\"apple Pi E\") == True\n\n# Test with a string where the last character is a letter followed by a newline character\nassert check_if_last_char_is_a_letter(\"apple pi e\\n\") == False\n\n# Test with a string where the last character is a letter followed by a tab character\nassert check_if_last_char_is_a_letter(\"apple pi e\\t\") == False\n\n# Test with a string that has multiple words and the last character of the last word is not a letter\nassert check_if_last_char_is_a_letter(\"This is a test!\") == False\n\n# Test with a string that has multiple words and the last character of the last word is a letter but not separated by a space\nassert check_if_last_char_is_a_letter(\"This is a test\") == False\n\n# Test with a string that includes alphanumeric characters but ends with a letter not part of a word\nassert check_if_last_char_is_a_letter(\"This is a test2 e\") == True", "prompt_tokens": 952, "completion_tokens": 1019, "duration": 38.85738563537598}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 843, "completion_tokens": 507, "duration": 24.07005286216736}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg = [num for num in lst if num < 0]\n    pos = [num for num in lst if num > 0]\n    \n    largest_neg = None if not neg else max(neg)\n    smallest_pos = None if not pos else min(pos)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 964, "completion_tokens": 580, "duration": 34.14905405044556}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if str(a).replace(\",\", \".\") > str(b).replace(\",\", \".\"):\n            return a\n        elif str(a).replace(\",\", \".\") < str(b).replace(\",\", \".\"):\n            return b\n        else:\n            return None\n    else:\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None", "prompt_tokens": 1091, "completion_tokens": 729, "duration": 28.30526041984558}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n > 0 and n % 8 == 0", "prompt_tokens": 1211, "completion_tokens": 737, "duration": 35.99731993675232}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)", "prompt_tokens": 883, "completion_tokens": 545, "duration": 24.399598598480225}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 838, "completion_tokens": 474, "duration": 32.166500091552734}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count(\".\") != 1:\n        return 'No'\n    name, ext = file_name.split(\".\")\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 993, "completion_tokens": 479, "duration": 27.689156770706177}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1047, "completion_tokens": 601, "duration": 26.047624111175537}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n\n    return prime_length_words(sentence)", "prompt_tokens": 808, "completion_tokens": 439, "duration": 17.708272218704224}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1 and result.numerator % result.denominator == 0", "prompt_tokens": 1028, "completion_tokens": 581, "duration": 32.764989137649536}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 979, "completion_tokens": 580, "duration": 27.315394401550293}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 979, "completion_tokens": 622, "duration": 30.94466996192932}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 925, "completion_tokens": 509, "duration": 23.632822513580322}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index == end_index:\n        return ()\n    \n    if start_index < end_index:\n        return tuple(planets[start_index + 1:end_index])\n    else:\n        return tuple(planets[end_index + 1:start_index][::-1])\n\n# Test cases\nassert bf(\"Earth\", \"Mars\") == (\"Venus\",)\nassert bf(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Earth\") == ()\nassert bf(\"Pluto\", \"Mars\") == ()\nassert bf(\"Pluto\", \"Vulcan\") == ()\nassert bf(\"earth\", \"mars\") == ()\nassert bf(\"Earth\", \"mArS\") == ()\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Neptune\", \"Mercury\") == ()\nassert bf(\"Saturn\", \"Jupiter\") == ()", "prompt_tokens": 3505, "completion_tokens": 1990, "duration": 56.85784435272217}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    def is_even_length(s):\n        return len(s) % 2 == 0\n\n    def custom_sort(s):\n        return (len(s), s)\n\n    return sorted(filter(is_even_length, lst), key=custom_sort)", "prompt_tokens": 953, "completion_tokens": 453, "duration": 22.928253173828125}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 785, "completion_tokens": 508, "duration": 20.714190244674683}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)", "prompt_tokens": 1407, "completion_tokens": 760, "duration": 28.620666027069092}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1217, "completion_tokens": 614, "duration": 28.28967571258545}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1338, "completion_tokens": 666, "duration": 31.721142292022705}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))\n\n# Test cases have been provided in the function description", "prompt_tokens": 989, "completion_tokens": 622, "duration": 26.42007350921631}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 664, "completion_tokens": 427, "duration": 20.35270667076111}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return None\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_num = ''\n    i = 0\n    \n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    \n    return roman_num.lower()", "prompt_tokens": 1039, "completion_tokens": 835, "duration": 32.787853956222534}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2", "prompt_tokens": 911, "completion_tokens": 563, "duration": 26.62624502182007}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    if not words:\n        return \"\"\n\n    return max(words, key=lambda x: (unique_chars(x), -ord(x[0])))", "prompt_tokens": 1532, "completion_tokens": 715, "duration": 29.82061743736267}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if remaining >= need:\n        return [total_carrots, remaining - need]\n    else:\n        return [total_carrots + remaining, 0]", "prompt_tokens": 1262, "completion_tokens": 579, "duration": 27.30962872505188}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1122, "completion_tokens": 641, "duration": 27.883157968521118}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1]", "prompt_tokens": 825, "completion_tokens": 474, "duration": 24.547569036483765}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 735, "completion_tokens": 434, "duration": 18.90522265434265}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 850, "completion_tokens": 493, "duration": 30.29098105430603}
