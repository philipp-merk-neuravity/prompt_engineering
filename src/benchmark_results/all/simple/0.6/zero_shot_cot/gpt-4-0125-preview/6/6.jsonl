{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1022, "completion_tokens": 657, "duration": 33.69746160507202}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    count = 0\n\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n\n        current_group += char\n\n        if count == 0:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result", "prompt_tokens": 856, "completion_tokens": 538, "duration": 24.1567485332489}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 744, "completion_tokens": 412, "duration": 23.086375951766968}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 814, "completion_tokens": 447, "duration": 19.045643091201782}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return statistics.mean([abs(x - statistics.mean(numbers)) for x in numbers])", "prompt_tokens": 1131, "completion_tokens": 534, "duration": 21.950551509857178}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # remove the last delimiter\n    return result", "prompt_tokens": 938, "completion_tokens": 630, "duration": 32.79809808731079}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 875, "completion_tokens": 544, "duration": 23.323858499526978}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 900, "completion_tokens": 570, "duration": 30.61064577102661}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n        \n    return total_sum, total_product", "prompt_tokens": 743, "completion_tokens": 397, "duration": 17.65069890022278}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 849, "completion_tokens": 528, "duration": 24.32049012184143}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    longest_palindrome_suffix = ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            longest_palindrome_suffix = string[i:]\n            break\n    return string + longest_palindrome_suffix[::-1]", "prompt_tokens": 952, "completion_tokens": 640, "duration": 31.691114902496338}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            res += '0'\n        else:\n            res += '1'\n    return res", "prompt_tokens": 750, "completion_tokens": 483, "duration": 19.733255624771118}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 776, "completion_tokens": 438, "duration": 27.104009866714478}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(abs(a), abs(b))", "prompt_tokens": 567, "completion_tokens": 275, "duration": 15.559572219848633}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 563, "completion_tokens": 309, "duration": 12.394328832626343}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 761, "completion_tokens": 296, "duration": 13.131625890731812}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 617, "completion_tokens": 311, "duration": 16.37207555770874}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    \n    return [durations[note] for note in notes if note in durations]\n\n# Test cases were here", "prompt_tokens": 1007, "completion_tokens": 563, "duration": 25.117170572280884}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return count\n    \n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    \n    return count", "prompt_tokens": 750, "completion_tokens": 467, "duration": 19.68892216682434}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_mapping[x])\n    \n    return ' '.join(sorted_numbers)", "prompt_tokens": 755, "completion_tokens": 492, "duration": 21.713578701019287}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min([(x, y) for x in numbers for y in numbers if x != y], key=lambda pair: abs(pair[0] - pair[1]))\n    return tuple(sorted(closest_pair))\n\n\n# Test with a list of integers, expect the closest pair in order\nassert find_closest_elements([1, 2, 3, 4, 5, 2]) == (2.0, 2.0)", "prompt_tokens": 3533, "completion_tokens": 2092, "duration": 114.73672723770142}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1017, "completion_tokens": 645, "duration": 31.80677103996277}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 1107, "completion_tokens": 579, "duration": 24.18484401702881}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 463, "completion_tokens": 213, "duration": 9.615009784698486}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    if n == 1:\n        return 1\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 696, "completion_tokens": 457, "duration": 20.757714986801147}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 873, "completion_tokens": 518, "duration": 23.067506313323975}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for i, n in enumerate(numbers) if numbers.index(n) == i]", "prompt_tokens": 2749, "completion_tokens": 1894, "duration": 62.600749015808105}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 658, "completion_tokens": 399, "duration": 19.817074060440063}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 617, "completion_tokens": 346, "duration": 16.761940240859985}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 871, "completion_tokens": 553, "duration": 22.262113332748413}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 751, "completion_tokens": 367, "duration": 16.885558128356934}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 650, "completion_tokens": 320, "duration": 15.750847339630127}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass", "prompt_tokens": 1317, "completion_tokens": 781, "duration": 32.47348642349243}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l.copy()\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    for i in indices_divisible_by_three:\n        if i != 0:\n            new_list[i] = sorted(l[i:i+1])[0]\n    return new_list", "prompt_tokens": 1140, "completion_tokens": 732, "duration": 28.693096160888672}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 756, "completion_tokens": 444, "duration": 21.93669629096985}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 775, "completion_tokens": 444, "duration": 18.997835397720337}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    def count_sevens(num):\n        return str(num).count('7')\n\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_sevens(i)\n\n    return count", "prompt_tokens": 790, "completion_tokens": 522, "duration": 19.461316347122192}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    result = l.copy()\n    result[::2] = even_indices\n    return result", "prompt_tokens": 936, "completion_tokens": 543, "duration": 30.383558750152588}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1049, "completion_tokens": 711, "duration": 32.48418045043945}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n+1):\n                a, b = b, a + b\n            return b\n\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 752, "completion_tokens": 555, "duration": 25.178144693374634}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    return any(True for i in range(len(l)) for j in range(i+1, len(l)) for k in range(j+1, len(l)) if l[i] + l[j] + l[k] == 0) if len(l) >= 3 else False", "prompt_tokens": 1024, "completion_tokens": 585, "duration": 23.812033653259277}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "prompt_tokens": 897, "completion_tokens": 424, "duration": 16.424305200576782}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 722, "completion_tokens": 346, "duration": 16.207611322402954}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 929, "completion_tokens": 472, "duration": 22.197299480438232}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base should be between 2 and 9\")\n\n    if x == 0:\n        return \"0\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "prompt_tokens": 779, "completion_tokens": 506, "duration": 20.64644980430603}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 560, "completion_tokens": 307, "duration": 16.93033766746521}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1002, "completion_tokens": 544, "duration": 21.19947576522827}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[(n - 1) // 2] + l[n // 2]) / 2", "prompt_tokens": 811, "completion_tokens": 543, "duration": 22.15299963951111}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 714, "completion_tokens": 408, "duration": 16.647778034210205}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 832, "completion_tokens": 464, "duration": 17.903047800064087}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 766, "completion_tokens": 523, "duration": 18.627125024795532}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 726, "completion_tokens": 330, "duration": 13.915603399276733}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 852, "completion_tokens": 537, "duration": 22.896129369735718}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 457, "completion_tokens": 189, "duration": 10.783039331436157}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 936, "completion_tokens": 501, "duration": 22.14263367652893}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 697, "completion_tokens": 461, "duration": 18.2124240398407}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    open_count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_count += 1\n        elif bracket == \">\":\n            open_count -= 1\n            if open_count < 0:\n                return False\n    return open_count == 0", "prompt_tokens": 669, "completion_tokens": 368, "duration": 110.44800519943237}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 939, "completion_tokens": 650, "duration": 31.638572692871094}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 1072, "completion_tokens": 691, "duration": 32.203498125076294}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\nassert largest_prime_factor(49) == 7\nassert largest_prime_factor(6936) == 17\nassert largest_prime_factor(121) == 11\nassert largest_prime_factor(27) == 3\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(600851475143) == 6857\nassert largest_prime_factor(2*3*5*7*11*13) == 13\nassert largest_prime_factor(16) == 2", "prompt_tokens": 592, "completion_tokens": 516, "duration": 18.99943518638611}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 744, "completion_tokens": 398, "duration": 17.86873197555542}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 771, "completion_tokens": 468, "duration": 29.105213165283203}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * c for i, c in enumerate(xs)][1:]", "prompt_tokens": 1401, "completion_tokens": 826, "duration": 27.04521656036377}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 981, "completion_tokens": 562, "duration": 26.998059034347534}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2050, "completion_tokens": 1206, "duration": 61.95355725288391}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 768, "completion_tokens": 456, "duration": 29.47012734413147}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 800, "completion_tokens": 417, "duration": 19.84040665626526}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 1032, "completion_tokens": 471, "duration": 30.137747764587402}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [smallest_even_value[0], smallest_even_value[1]]", "prompt_tokens": 1293, "completion_tokens": 570, "duration": 33.59409809112549}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_value = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_value = max(max_value, num)\n    return max_value", "prompt_tokens": 1086, "completion_tokens": 625, "duration": 31.446667909622192}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 830, "completion_tokens": 441, "duration": 16.840853691101074}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 947, "completion_tokens": 614, "duration": 88.94342112541199}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1169, "completion_tokens": 552, "duration": 31.44422936439514}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 964, "completion_tokens": 521, "duration": 73.37553095817566}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 < sum2 else lst2", "prompt_tokens": 978, "completion_tokens": 464, "duration": 28.129083395004272}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n\n    return prime_count == 3\n\n# Test with a number that is the multiplication of 3 distinct prime numbers\nassert is_multiply_prime(30) == True\n\n# Test with a number that is not the multiplication of 3 distinct prime numbers but is a prime number\nassert is_multiply_prime(2) == False\n\n# Test with a number that is the multiplication of 2 prime numbers\nassert is_multiply_prime(15) == False\n\n# Test with a number that is the multiplication of a prime number by itself twice (prime^3)\nassert is_multiply_prime(8) == False\n\n# Test with a number that is the multiplication of 3 distinct prime numbers, including the largest prime number less than 10\nassert is_multiply_prime(5*3*7) == True\n\n# Test with the maximum possible input (99), knowing it's not a multiplication of 3 prime numbers\nassert is_multiply_prime(99) == False\n\n# Test with a number that is 1 (not a prime number and not a multiplication of any prime numbers)\nassert is_multiply_prime(1) == False\n\n# Test with a number that is the multiplication of 3 prime numbers, including a repetition\nassert is_multiply_prime(2*2*5) == False\n\n# Test with a number that is a square of a prime number (not a multiplication of 3 distinct primes)\nassert is_multiply_prime(49) == False\n\n# Test with a prime number itself, expecting False as it's not a multiplication of 3 distinct primes\nassert is_multiply_prime(13) == False\n\n# Test with a number that is the multiplication of 3 prime numbers but one of them is repeated\nassert is_multiply_prime(3*3*5) == False\n\n# Edge case: Test with the smallest possible number (0) which is not a prime nor a product of primes\nassert is_multiply_prime(0) == False\n\n# Test with a prime number multiplied by 1 (technically not a multiplication of 3 primes)\nassert is_multiply_prime(2*1*1) == False", "prompt_tokens": 767, "completion_tokens": 955, "duration": 30.728277683258057}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n**int(x ** (1/n))", "prompt_tokens": 907, "completion_tokens": 474, "duration": 22.9893159866333}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a**(1/3)) % 1 == 0", "prompt_tokens": 731, "completion_tokens": 353, "duration": 18.1291983127594}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count", "prompt_tokens": 1254, "completion_tokens": 524, "duration": 114.64573836326599}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 853, "completion_tokens": 416, "duration": 17.733744144439697}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 805, "completion_tokens": 436, "duration": 21.75234580039978}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1296, "completion_tokens": 836, "duration": 31.22737216949463}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 660, "completion_tokens": 430, "duration": 15.965098142623901}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 9\n    return count", "prompt_tokens": 724, "completion_tokens": 491, "duration": 21.40209436416626}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 884, "completion_tokens": 461, "duration": 21.55362820625305}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 760, "completion_tokens": 506, "duration": 21.887322902679443}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 1001, "completion_tokens": 597, "duration": 44.95626473426819}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 1313, "completion_tokens": 683, "duration": 28.87105703353882}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 1160, "completion_tokens": 618, "duration": 69.49049735069275}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result", "prompt_tokens": 705, "completion_tokens": 393, "duration": 16.074350833892822}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 796, "completion_tokens": 400, "duration": 19.297248601913452}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split('[.!?]', S) if sentence.strip().startswith('I'))\n\nimport re", "prompt_tokens": 763, "completion_tokens": 402, "duration": 17.908294916152954}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 885, "completion_tokens": 486, "duration": 23.225355863571167}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 729, "completion_tokens": 412, "duration": 19.630033016204834}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return digit_sum(max_prime)\n    else:\n        return 0", "prompt_tokens": 1410, "completion_tokens": 776, "duration": 32.62720775604248}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 991, "completion_tokens": 534, "duration": 31.91092824935913}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 940, "completion_tokens": 553, "duration": 25.090571880340576}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 838, "completion_tokens": 489, "duration": 23.005462884902954}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 1481, "completion_tokens": 1030, "duration": 33.57406783103943}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number < 0:\n        return int(number - 0.5)\n    else:\n        return int(number + 0.5)", "prompt_tokens": 992, "completion_tokens": 542, "duration": 23.184245109558105}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 984, "completion_tokens": 595, "duration": 27.480955839157104}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]\n\n# Test with basic sentence with spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with numbers and commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a single word\nassert words_string(\"Single\") == [\"Single\"]\n\n# Test with empty string\nassert words_string(\"\") == []\n\n# Test with spaces only\nassert words_string(\"    \") == []\n\n# Test with commas only\nassert words_string(\",,,,\") == []\n\n# Test with a mix of multiple spaces and commas\nassert words_string(\"Hello,  , ,World, , \") == [\"Hello\", \"World\"]\n\n# Test with words containing numbers\nassert words_string(\"Model3, Tesla, S3XY\") == [\"Model3\", \"Tesla\", \"S3XY\"]\n\n# Test with string that starts and ends with a comma\nassert words_string(\",StartMiddleEnd,\") == [\"StartMiddleEnd\"]\n\n# Test with string that starts and ends with space\nassert words_string(\" Start Middle End \") == [\"Start\", \"Middle\", \"End\"]\n\n# Test with a long string of mixed separators\nassert words_string(\"This, is a, very,   long, string,with,spaces,and,commas\") == [\"This\", \"is\", \"a\", \"very\", \"long\", \"string\", \"with\", \"spaces\", \"and\", \"commas\"]\n\n# Test with special characters in words\nassert words_string(\"Special!@#, Characters*&, Here\") == [\"Special!@#\", \"Characters*&\", \"Here\"]", "prompt_tokens": 773, "completion_tokens": 743, "duration": 22.814870834350586}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 864, "completion_tokens": 547, "duration": 25.57788586616516}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 994, "completion_tokens": 571, "duration": 32.51731872558594}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 892, "completion_tokens": 555, "duration": 27.88581895828247}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = sorted_arr[::-1]\n    return [nums[x-1] for x in reversed_arr]", "prompt_tokens": 1255, "completion_tokens": 602, "duration": 31.50516653060913}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            s = sum(range(1, i+1))\n            result.append(s)\n    return result", "prompt_tokens": 821, "completion_tokens": 478, "duration": 20.570836305618286}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_palindromes, odd_palindromes)", "prompt_tokens": 1128, "completion_tokens": 638, "duration": 25.3004207611084}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 829, "completion_tokens": 444, "duration": 20.962778568267822}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return sorted(arr) == arr or sorted(arr) == arr[::-1]", "prompt_tokens": 2096, "completion_tokens": 950, "duration": 34.81887125968933}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 == 0) else \"NO\"", "prompt_tokens": 1116, "completion_tokens": 597, "duration": 28.31037139892578}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_occurrence = max(hist.values())\n    return {key: value for key, value in hist.items() if value == max_occurrence}", "prompt_tokens": 1014, "completion_tokens": 595, "duration": 35.75329113006592}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1232, "completion_tokens": 762, "duration": 37.20731782913208}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 != 0 for c in string)}n the str{string}ng {string} of the {string}nput.\" for string in lst]", "prompt_tokens": 1073, "completion_tokens": 602, "duration": 32.23875021934509}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 918, "completion_tokens": 617, "duration": 34.155253171920776}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum([sum(row) for row in grid])\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1457, "completion_tokens": 666, "duration": 29.75688648223877}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1015, "completion_tokens": 520, "duration": 26.496304273605347}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 1013, "completion_tokens": 539, "duration": 22.976346015930176}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    word = word[1:-1]\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in consonants and word[i+1] in vowels and word[i+2] in consonants:\n            return word[i+1]\n    return \"\"", "prompt_tokens": 1020, "completion_tokens": 645, "duration": 36.34249210357666}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1002, "completion_tokens": 588, "duration": 25.9665629863739}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1221, "completion_tokens": 622, "duration": 30.252711534500122}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 805, "completion_tokens": 467, "duration": 24.577503204345703}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 991, "completion_tokens": 585, "duration": 24.54805612564087}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    res = []\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            res.append(n)\n            n = 3 * n + 1\n    res.append(1)\n    return sorted(res)\n\n# Test cases have been provided in the description and should be used for testing", "prompt_tokens": 1172, "completion_tokens": 609, "duration": 28.563885927200317}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1238, "completion_tokens": 724, "duration": 27.138063430786133}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 1724, "completion_tokens": 1078, "duration": 44.59579825401306}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 1155, "completion_tokens": 521, "duration": 35.22921133041382}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 1117, "completion_tokens": 578, "duration": 24.511377573013306}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        magnitude_sum += abs(num)\n    return product * magnitude_sum", "prompt_tokens": 840, "completion_tokens": 478, "duration": 21.315616607666016}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    \n    def neighbors(i, j):\n        for r, c in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= r < n and 0 <= c < m:\n                yield r, c\n    \n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        for r, c in neighbors(i, j):\n            if (r, c) not in visited:\n                res = dfs(r, c, visited, path + [grid[r][c]])\n                if res:\n                    return res\n        visited.remove((i, j))\n    \n    for i in range(n):\n        for j in range(m):\n            res = dfs(i, j, set(), [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1691, "completion_tokens": 932, "duration": 36.74452018737793}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                result.append(1 + i // 2)\n            else:\n                result.append(result[i - 1] + result[i - 2] + result[i - 3])\n        return result", "prompt_tokens": 1160, "completion_tokens": 619, "duration": 34.38070797920227}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 703, "completion_tokens": 402, "duration": 20.397355556488037}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1641, "completion_tokens": 1028, "duration": 37.8629424571991}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total", "prompt_tokens": 837, "completion_tokens": 373, "duration": 16.688915491104126}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and not txt.strip()[-2].isalpha()", "prompt_tokens": 884, "completion_tokens": 458, "duration": 20.05514121055603}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 799, "completion_tokens": 463, "duration": 21.144821882247925}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    max_neg = None if not neg_integers else max(neg_integers)\n    min_pos = None if not pos_integers else min(pos_integers)\n\n    return (max_neg, min_pos)", "prompt_tokens": 954, "completion_tokens": 579, "duration": 27.898717164993286}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == str:\n        a = a.replace(',', '.')\n    if type(b) == str:\n        b = b.replace(',', '.')\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 1009, "completion_tokens": 614, "duration": 27.44986319541931}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 721, "completion_tokens": 408, "duration": 22.232367992401123}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n - 1)", "prompt_tokens": 836, "completion_tokens": 499, "duration": 38.22652339935303}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = text.replace(\" \", \"_\")\n    while \"--\" in result:\n        result = result.replace(\"--\", \"-\")\n    result = result.replace(\"_-\", \"-\")\n    result = result.replace(\"-_\", \"-\")\n    return result", "prompt_tokens": 810, "completion_tokens": 471, "duration": 28.212653398513794}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1108, "completion_tokens": 599, "duration": 27.875259399414062}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1122, "completion_tokens": 684, "duration": 33.73125982284546}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 989, "completion_tokens": 606, "duration": 29.830007076263428}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1108, "completion_tokens": 675, "duration": 32.072548627853394}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def get_sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (get_sum_of_digits(x), nums.index(x)))", "prompt_tokens": 817, "completion_tokens": 454, "duration": 20.587820529937744}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 768, "completion_tokens": 414, "duration": 17.334300756454468}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 986, "completion_tokens": 564, "duration": 22.1949565410614}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n        \n    return tuple([planet for planet in planets[start_index + 1:end_index]])\n\n# Test with valid planet names in the correct solar system order\nassert bf(\"Mercury\", \"Venus\") == (), \"Test with two adjacent planets should return an empty tuple\"\n\n# Test with valid planet names, but in reverse order\nassert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test with planets in reverse order should return all in-between planets\"\n\n# Test with the same planet name for both arguments\nassert bf(\"Earth\", \"Earth\") == (), \"Test with the same planet for both arguments should return an empty tuple\"\n\n# Test with planet names that are not adjacent and in correct order\nassert bf(\"Mars\", \"Uranus\") == (\"Jupiter\", \"Saturn\"), \"Test with non-adjacent planets should return all in-between planets\"\n\n# Test with invalid planet names\nassert bf(\"Pluto\", \"Earth\") == (), \"Test with an invalid planet name should return an empty tuple\"\n\n# Test with one valid and one invalid planet name\nassert bf(\"Mars\", \"Pluto\") == (), \"Test with one valid and one invalid planet name should return an empty tuple\"\n\n# Test with case sensitivity, assuming function is case sensitive\nassert bf(\"earth\", \"mars\") == (), \"Test with valid planet names in lowercase should return an empty tuple if function is case sensitive\"\n\n# Test with the largest range possible\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Test with the largest range should return all planets except the given ones\"\n\n# Test with planets that have no planets between them\nassert bf(\"Saturn\", \"Uranus\") == (), \"Test with two planets that have no planets between them should return an empty tuple\"\n\n# Edge case: Test with empty strings\nassert bf(\"\", \"\") == (), \"Test with empty strings should return an empty tuple\"", "prompt_tokens": 1027, "completion_tokens": 968, "duration": 37.131624698638916}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1628, "completion_tokens": 836, "duration": 32.30556535720825}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 706, "completion_tokens": 429, "duration": 24.41737675666809}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)\n\n# Test when list contains positive odd and even numbers\nassert double_the_difference([1, 3, 2, 4]) == 10, \"Test with mixed odd and even positive numbers\"\n\n# Test when list contains only negative numbers\nassert double_the_difference([-1, -3, -5]) == 0, \"Test with only negative numbers\"\n\n# Test when list contains a mix of negative and positive numbers, including odd\nassert double_the_difference([9, -2, -3, 4]) == 81, \"Test with a mix of negative and positive numbers\"\n\n# Test with an empty list\nassert double_the_difference([]) == 0, \"Test with an empty list\"\n\n# Test with zeroes in the list\nassert double_the_difference([0, 0, 0]) == 0, \"Test with zeroes only\"\n\n# Test with positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0, \"Test with positive even numbers only\"\n\n# Test with positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35, \"Test with positive odd numbers only\"\n\n# Test with non-integer values in the list, should ignore them\nassert double_the_difference([1.5, 2.5, 3.5, 4.5]) == 0, \"Test with non-integer values\"\n\n# Test with a large list of numbers\nassert double_the_difference(range(1, 11)) == 165, \"Test with a range of numbers from 1 to 10\"\n\n# Test with integers and non-integer mixed, including negative and positive\nassert double_the_difference([1, -1, 2.5, 3, 4, -5, 5]) == 35, \"Test with a mix of integers and non-integers, including negative and positive\"", "prompt_tokens": 856, "completion_tokens": 833, "duration": 27.466596364974976}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1265, "completion_tokens": 662, "duration": 31.240024089813232}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=get_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1427, "completion_tokens": 758, "duration": 33.4939661026001}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1331, "completion_tokens": 732, "duration": 27.23731780052185}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 702, "completion_tokens": 441, "duration": 18.123189449310303}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return \"Invalid input\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 825, "completion_tokens": 629, "duration": 23.72623610496521}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 854, "completion_tokens": 482, "duration": 27.338290691375732}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 856, "completion_tokens": 524, "duration": 22.58603048324585}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1187, "completion_tokens": 498, "duration": 23.28373098373413}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1242, "completion_tokens": 761, "duration": 33.644447326660156}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 796, "completion_tokens": 462, "duration": 36.81580114364624}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 757, "completion_tokens": 453, "duration": 19.70120596885681}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 761, "completion_tokens": 404, "duration": 22.29230499267578}
