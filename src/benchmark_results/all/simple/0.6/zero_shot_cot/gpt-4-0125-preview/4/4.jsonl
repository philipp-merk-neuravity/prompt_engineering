{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 796, "completion_tokens": 431, "duration": 67.01207709312439}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    temp = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        temp += char\n        if count == 0:\n            result.append(temp)\n            temp = \"\"\n    return result", "prompt_tokens": 848, "completion_tokens": 526, "duration": 22.954641819000244}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 1357, "completion_tokens": 848, "duration": 32.28691530227661}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 840, "completion_tokens": 473, "duration": 25.653125762939453}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 1023, "completion_tokens": 652, "duration": 37.35968732833862}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]", "prompt_tokens": 855, "completion_tokens": 538, "duration": 22.863702535629272}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 910, "completion_tokens": 597, "duration": 24.431952476501465}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 797, "completion_tokens": 467, "duration": 20.180604219436646}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    \n    return (s, p)", "prompt_tokens": 718, "completion_tokens": 385, "duration": 23.53555703163147}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 980, "completion_tokens": 658, "duration": 27.875420808792114}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    return string + string[::-1][1:]\n\n# Testing is_palindrome function\n\n# Test with an empty string, should return True\nassert is_palindrome('') == True\n\n# Test with a single character, should return True\nassert is_palindrome('a') == True\n\n# Test with a simple palindrome, should return True\nassert is_palindrome('madam') == True\n\n# Test with a palindrome that has spaces, should return False\nassert is_palindrome('nurses run') == False\n\n# Test with a non-palindrome, should return False\nassert is_palindrome('hello') == False\n\n# Test with a mixed case palindrome, should return False\nassert is_palindrome('Madam') == False\n\n# Test with a numeric string that is a palindrome, should return True\nassert is_palindrome('12321') == True\n\n# Testing make_palindrome function\n\n# Test with an empty string, should return an empty string\nassert make_palindrome('') == ''\n\n# Test with a single character, should return the same single character\nassert make_palindrome('a') == 'a'\n\n# Test with a string that is already a palindrome, should return the same string\nassert make_palindrome('racecar') == 'racecar'\n\n# Test with a string that needs one character to become a palindrome\nassert make_palindrome('raceca') == 'racecar'\n\n# Test with a longer string that is not a palindrome\nassert make_palindrome('hello') == 'helloleh'\n\n# Test with a string that has spaces, should handle spaces as regular characters\nassert make_palindrome('nurses run') == 'nurses runsen'\n\n# Test with a numeric string, should treat it as a regular string\nassert make_palindrome('123') == '12321'\n\n# Test with a complex string that includes special characters\nassert make_palindrome('a!') == 'a!!a'", "prompt_tokens": 3978, "completion_tokens": 3064, "duration": 92.7066900730133}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 835, "completion_tokens": 563, "duration": 23.59844994544983}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 770, "completion_tokens": 423, "duration": 23.957966804504395}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 700, "completion_tokens": 413, "duration": 23.63405680656433}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string)+1)]\n    return prefixes", "prompt_tokens": 642, "completion_tokens": 381, "duration": 28.91469669342041}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return \" \".join(str(i) for i in range(n+1))", "prompt_tokens": 855, "completion_tokens": 393, "duration": 15.714686632156372}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 618, "completion_tokens": 316, "duration": 14.897338628768921}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations.get(note, 0) for note in notes]", "prompt_tokens": 1135, "completion_tokens": 682, "duration": 37.43975901603699}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return count\n\n    index = 0\n    while index < len(string):\n        if string[index:index+len(substring)] == substring:\n            count += 1\n            index += len(substring)\n        else:\n            index += 1\n\n    return count", "prompt_tokens": 757, "completion_tokens": 485, "duration": 20.25010371208191}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n# Test when the input is an empty string, expecting an empty string as output\nassert sort_numbers('') == ''\n\n# Test when the input has only one numeral, expecting the same numeral in the output\nassert sort_numbers('zero') == 'zero'\n\n# Test when the input has all numerals in correct ascending order, expecting the same order\nassert sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\n\n# Test when the input has all numerals in reverse order, expecting them sorted in ascending order\nassert sort_numbers('nine eight seven six five four three two one zero') == 'zero one two three four five six seven eight nine'\n\n# Test when the input has mixed numerals, expecting them sorted\nassert sort_numbers('three one five') == 'one three five'\n\n# Test when the input has repeating numerals, expecting them sorted with repetitions\nassert sort_numbers('five five two two') == 'two two five five'\n\n# Test with numerals having similar starting letters, to check if sorting is not just alphabetical\nassert sort_numbers('four five') == 'four five'\n\n# Test with numerals that are next to each other in the sorted order, to ensure proper adjacent sorting\nassert sort_numbers('two three') == 'two three'\n\n# Test with a long unsorted list of numerals, expecting them all sorted\nassert sort_numbers('four one nine two eight seven') == 'one two four seven eight nine'\n\n# Test to ensure function trims and sorts correctly even with extra spaces between numerals\nassert sort_numbers('one  two   three') == 'one two three'", "prompt_tokens": 739, "completion_tokens": 785, "duration": 26.90666103363037}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result", "prompt_tokens": 978, "completion_tokens": 551, "duration": 24.080695152282715}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers", "prompt_tokens": 992, "completion_tokens": 627, "duration": 35.75074100494385}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 929, "completion_tokens": 401, "duration": 19.904842376708984}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 459, "completion_tokens": 209, "duration": 12.28673529624939}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 611, "completion_tokens": 371, "duration": 18.080705642700195}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test for a prime number\nassert factorize(17) == [17], \"Should return the prime number itself\"\n\n# Test for a number with multiple different prime factors\nassert factorize(100) == [2, 2, 5, 5], \"Should return [2, 2, 5, 5] for 100\"\n\n# Test for a square of a prime number\nassert factorize(49) == [7, 7], \"Should return [7, 7] for 49\"\n\n# Test for a cube of a prime number\nassert factorize(8) == [2, 2, 2], \"Should return [2, 2, 2] for 8\"\n\n# Test for a product of different prime numbers\nassert factorize(30) == [2, 3, 5], \"Should return [2, 3, 5] for 30\"\n\n# Test for a large number\nassert factorize(123456) == [2, 2, 2, 2, 2, 2, 3, 643], \"Should handle large numbers correctly\"\n\n# Test for 1 (edge case)\nassert factorize(1) == [], \"Should return an empty list for 1\"\n\n# Test for a power of a prime number\nassert factorize(16) == [2, 2, 2, 2], \"Should return [2, 2, 2, 2] for 16\"\n\n# Test for a large prime number to check efficiency\n# Assuming 104729 is a known prime for the sake of this test\nassert factorize(104729) == [104729], \"Should return the prime number itself for a large prime number\"\n\n# Test for a number that is a product of two large prime numbers\n# Assuming 104729 and 10007 are known primes for the sake of this test\nassert factorize(104729 * 10007) == [10007, 104729], \"Should handle the product of two large prime numbers correctly\"", "prompt_tokens": 1603, "completion_tokens": 1455, "duration": 46.63700771331787}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 780, "completion_tokens": 459, "duration": 20.85775375366211}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string if char.isalpha()])", "prompt_tokens": 913, "completion_tokens": 534, "duration": 19.35212016105652}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 655, "completion_tokens": 379, "duration": 20.43265128135681}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 881, "completion_tokens": 558, "duration": 34.13612508773804}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 798, "completion_tokens": 414, "duration": 22.114753484725952}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 671, "completion_tokens": 346, "duration": 18.18047523498535}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Implementing the function to find the zero point of the polynomial\n    def f(x):\n        return poly(xs, x)\n\n    # Using scipy.optimize to find the root of the polynomial\n    import scipy.optimize as optimize\n    return optimize.fsolve(f, 0)[0]", "prompt_tokens": 1460, "completion_tokens": 911, "duration": 41.01765441894531}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l[:]\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = [l[i] for i in third_indices]\n    sorted_third_values = sorted(third_values)\n    \n    for i, val in zip(third_indices, sorted_third_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1082, "completion_tokens": 688, "duration": 46.19566082954407}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 807, "completion_tokens": 495, "duration": 25.137453317642212}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 768, "completion_tokens": 437, "duration": 18.50251078605652}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 769, "completion_tokens": 491, "duration": 25.127958297729492}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]\n    return result", "prompt_tokens": 835, "completion_tokens": 473, "duration": 25.498488903045654}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]])", "prompt_tokens": 2191, "completion_tokens": 967, "duration": 42.57525062561035}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 1, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and num == fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 867, "completion_tokens": 641, "duration": 25.679875373840332}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 988, "completion_tokens": 554, "duration": 29.811203002929688}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    if n < 0:\n        raise ValueError(\"Number of cars must be non-negative\")\n    return n // 2", "prompt_tokens": 2035, "completion_tokens": 853, "duration": 28.154849767684937}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 715, "completion_tokens": 339, "duration": 18.75028085708618}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0 and l.count(x) > 1)", "prompt_tokens": 1794, "completion_tokens": 1082, "duration": 36.35561394691467}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 767, "completion_tokens": 462, "duration": 23.64012885093689}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 543, "completion_tokens": 290, "duration": 14.543440341949463}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 1041, "completion_tokens": 627, "duration": 31.96947455406189}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 788, "completion_tokens": 517, "duration": 32.62492513656616}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join(filter(str.isalnum, text.lower()))\n    return text == text[::-1]", "prompt_tokens": 720, "completion_tokens": 427, "duration": 29.76391839981079}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 931, "completion_tokens": 563, "duration": 27.443105459213257}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 1084, "completion_tokens": 604, "duration": 31.08881115913391}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 953, "completion_tokens": 560, "duration": 26.088382482528687}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 806, "completion_tokens": 491, "duration": 21.115675687789917}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 594, "completion_tokens": 326, "duration": 16.299710035324097}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 927, "completion_tokens": 492, "duration": 21.831472396850586}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 529, "completion_tokens": 293, "duration": 14.347130298614502}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 764, "completion_tokens": 463, "duration": 22.440221786499023}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 828, "completion_tokens": 534, "duration": 33.289244174957275}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 847, "completion_tokens": 466, "duration": 20.288329601287842}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n", "prompt_tokens": 957, "completion_tokens": 544, "duration": 21.58160924911499}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 590, "completion_tokens": 235, "duration": 10.726577997207642}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 624, "completion_tokens": 324, "duration": 15.402235269546509}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 867, "completion_tokens": 495, "duration": 32.57309150695801}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 833, "completion_tokens": 424, "duration": 18.16859722137451}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and char == s[-1]))", "prompt_tokens": 1369, "completion_tokens": 762, "duration": 24.211342573165894}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 788, "completion_tokens": 487, "duration": 23.30904221534729}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 870, "completion_tokens": 487, "duration": 30.117897033691406}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1123, "completion_tokens": 558, "duration": 24.486013650894165}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_value:\n            smallest_even_value = num\n            smallest_even_index = i\n    \n    if smallest_even_value == float('inf'):\n        return []\n    \n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1243, "completion_tokens": 530, "duration": 19.99502730369568}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    num_freq = {}\n    for num in lst:\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    result = -1\n    for num, freq in num_freq.items():\n        if num > freq and freq >= result:\n            result = num\n    \n    return result", "prompt_tokens": 1091, "completion_tokens": 651, "duration": 28.306984186172485}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 934, "completion_tokens": 552, "duration": 40.76818013191223}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 903, "completion_tokens": 570, "duration": 24.53208613395691}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 965, "completion_tokens": 348, "duration": 15.462189197540283}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 1099, "completion_tokens": 656, "duration": 36.286999225616455}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum_chars_lst1 = sum(len(word) for word in lst1)\n    sum_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if sum_chars_lst1 < sum_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1126, "completion_tokens": 628, "duration": 30.135334253311157}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def prime_factors(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n                while n % i == 0:\n                    n = n // i\n        if n > 1 and is_prime(n):\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 876, "completion_tokens": 688, "duration": 27.941826820373535}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if n == 1:\n        return x == 1\n    if n < 0:\n        return False\n    return x > 0 and (x == 1 or (x % n == 0 and is_simple_power(x // n, n)))", "prompt_tokens": 1646, "completion_tokens": 1030, "duration": 45.85754036903381}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer()) or a == 0", "prompt_tokens": 730, "completion_tokens": 381, "duration": 16.882508993148804}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1225, "completion_tokens": 493, "duration": 35.93452787399292}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 871, "completion_tokens": 437, "duration": 18.520753145217896}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1013, "completion_tokens": 667, "duration": 28.41034436225891}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1231, "completion_tokens": 741, "duration": 37.37005829811096}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test when the string length is a prime number (5), expecting True\nassert prime_length('Hello') == True\n\n# Test when the string length is not a prime number (6), expecting False\nassert prime_length('orange') == False\n\n# Test when the string length is a prime number (7), expecting True\nassert prime_length('kittens') == True\n\n# Test with an empty string (length 0, not prime), expecting False\nassert prime_length('') == False\n\n# Test with a single character string (length 1, not traditionally considered prime), expecting False\nassert prime_length('a') == False\n\n# Test with a string length of 2 (smallest prime number), expecting True\nassert prime_length('ab') == True\n\n# Test with a longer string where length is a prime number (11), expecting True\nassert prime_length('Hello World') == True\n\n# Test with a very long string where length is not a prime number (20), expecting False\nassert prime_length('abcdefghijklmnopqrst') == False\n\n# Test with a string of length 3 (prime number), expecting True\nassert prime_length('cat') == True\n\n# Test with a palindrome string of prime length (7), expecting True\nassert prime_length('abcdcba') == True\n\n# Test with a palindrome string of non-prime length (8), expecting False\nassert prime_length('aabbccdd') == False\n\n# Edge case: Test with a string that contains spaces and punctuation, prime length (13), expecting True\nassert prime_length('Hello, world!') == True\n\n# Edge case: Test with a string that contains special characters, non-prime length (12), expecting False\nassert prime_length('!@#$%^&*()_+') == False", "prompt_tokens": 718, "completion_tokens": 811, "duration": 25.858400344848633}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 20 * 10 ** (n - 2)", "prompt_tokens": 615, "completion_tokens": 382, "duration": 16.649113178253174}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(map(int, bin(N)[2:]))\n    return bin(binary_sum)[2:]", "prompt_tokens": 960, "completion_tokens": 542, "duration": 24.05156898498535}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 774, "completion_tokens": 520, "duration": 26.59494709968567}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    import re\n    return ' '.join(''.join(sorted(word, key=lambda x: ord(x))) for word in re.findall(r'\\S+|\\s', s))", "prompt_tokens": 1026, "completion_tokens": 628, "duration": 35.00468111038208}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test when the list is empty\nassert get_row([], 1) == []\n\n# Test when sublists are empty\nassert get_row([[], [], []], 1) == []\n\n# Test for the example given in the docstring\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the target number is not in the list\nassert get_row([\n  [2,3,4],\n  [5,6,7]\n], 1) == []\n\n# Test with negative numbers and the target is negative\nassert get_row([\n  [-1, -2, -3],\n  [-4, -5, -1]\n], -1) == [(0, 0), (1, 2)]\n\n# Test with mixed numbers where the target is zero\nassert get_row([\n  [0, 1, 0],\n  [2, 0, 3]\n], 0) == [(0, 2), (0, 0), (1, 1)]\n\n# Test with all elements are the target\nassert get_row([\n  [1, 1],\n  [1]\n], 1) == [(0, 1), (0, 0), (1, 0)]\n\n# Test with a large list and the target is at the end of some rows\nassert get_row([\n  [9, 9, 9, 8],\n  [8, 9, 9, 9],\n  [9, 8, 9, 9]\n], 8) == [(0, 3), (1, 0), (2, 1)]\n\n# Test where the target appears multiple times in a single row\nassert get_row([\n  [2, 3, 3, 3, 2],\n  [3, 2, 2, 2, 3]\n], 2) == [(0, 4), (0, 0), (1, 3), (1, 2), (1, 1)]\n\n# Test with both positive and negative numbers and the target is positive\nassert get_row([\n  [-1, 2, -3],\n  [2, -2, 3, 2]\n], 2) == [(0, 1), (1, 3), (1, 0)]", "prompt_tokens": 1261, "completion_tokens": 1185, "duration": 41.90235686302185}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array[:]\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 1144, "completion_tokens": 609, "duration": 27.497080087661743}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 777, "completion_tokens": 459, "duration": 23.692557334899902}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_list = sorted(set(lst))\n    if len(sorted_list) < 2:\n        return None\n    return sorted_list[1]", "prompt_tokens": 838, "completion_tokens": 445, "duration": 24.188023328781128}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('! I') + S.count('? I')", "prompt_tokens": 815, "completion_tokens": 447, "duration": 23.90759539604187}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 723, "completion_tokens": 324, "duration": 13.345710754394531}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 902, "completion_tokens": 583, "duration": 29.54470133781433}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    largest_prime = max(prime_values)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1183, "completion_tokens": 555, "duration": 25.971097469329834}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    upper_case = all(key.isupper() for key in dict.keys())\n    lower_case = all(key.islower() for key in dict.keys())\n    return upper_case or lower_case", "prompt_tokens": 1172, "completion_tokens": 707, "duration": 33.57839488983154}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 926, "completion_tokens": 539, "duration": 22.363230228424072}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 665, "completion_tokens": 316, "duration": 13.916656970977783}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 674, "completion_tokens": 402, "duration": 17.517449855804443}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 1021, "completion_tokens": 565, "duration": 29.69900131225586}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 913, "completion_tokens": 534, "duration": 21.5815532207489}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence separated by spaces\nassert words_string(\"Hello world\") == [\"Hello\", \"world\"]\n\n# Test with a simple sentence separated by commas\nassert words_string(\"Hello,world\") == [\"Hello\", \"world\"]\n\n# Test with a mix of commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with multiple spaces between words\nassert words_string(\"Hi   my name    is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with multiple commas between words\nassert words_string(\"Hi,,,my,name,,,is,John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a combination of multiple commas and spaces\nassert words_string(\"Hi, , ,my name, , ,is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with leading and trailing spaces\nassert words_string(\"  Hi my name is John  \") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Hi,my,name,is,John,\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string that only contains spaces\nassert words_string(\"     \") == []\n\n# Test with a string that only contains commas\nassert words_string(\",,,,\") == []\n\n# Test with a string that contains a mix of spaces and commas but no words\nassert words_string(\", , , ,\") == []\n\n# Test with a single word (no spaces or commas)\nassert words_string(\"Word\") == [\"Word\"]\n\n# Test with numeric values within the string\nassert words_string(\"1, 2, three, 4\") == [\"1\", \"2\", \"three\", \"4\"]\n\n# Test with special characters in the string\nassert words_string(\"!@, #$%, ^&*\") == [\"!@\", \"#$%\", \"^&*\"]", "prompt_tokens": 860, "completion_tokens": 912, "duration": 37.278788328170776}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 760, "completion_tokens": 443, "duration": 22.322009801864624}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2 + (n + m) % 2\n    return bin(avg)", "prompt_tokens": 886, "completion_tokens": 471, "duration": 22.27422022819519}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 957, "completion_tokens": 600, "duration": 29.06483006477356}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    valid_integers = [x for x in arr if 1 <= x <= 9]\n    sorted_integers = sorted(valid_integers)\n    reversed_integers = sorted_integers[::-1]\n    result = [digit_to_name[num] for num in reversed_integers]\n    \n    return result", "prompt_tokens": 1264, "completion_tokens": 671, "duration": 30.61233353614807}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 866, "completion_tokens": 518, "duration": 22.945499658584595}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_palindromes = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 == 0)\n    odd_palindromes = sum(1 for i in range(1, n+1) if str(i) == str(i)[::-1] and i % 2 != 0)\n    return (even_palindromes, odd_palindromes)", "prompt_tokens": 967, "completion_tokens": 468, "duration": 22.959542989730835}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 855, "completion_tokens": 473, "duration": 30.772655487060547}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    return arr.index(sorted_arr[-1]) == len(arr) - 1 and arr.index(sorted_arr[-2]) == len(arr) - 2", "prompt_tokens": 1998, "completion_tokens": 883, "duration": 32.3797402381897}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 1239, "completion_tokens": 713, "duration": 37.74737191200256}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    for letter in test.split():\n        histogram_dict[letter] = histogram_dict.get(letter, 0) + 1\n    \n    max_occurrence = max(histogram_dict.values())\n    result = {key: val for key, val in histogram_dict.items() if val == max_occurrence}\n    \n    return result", "prompt_tokens": 947, "completion_tokens": 540, "duration": 24.725544929504395}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 1158, "completion_tokens": 689, "duration": 34.7280957698822}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), sum(d.isdigit() for d in s), sum(d.isalpha() for d in s), sum(d.isalnum() for d in s)) for s in lst]", "prompt_tokens": 1243, "completion_tokens": 795, "duration": 46.951310873031616}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return None\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 856, "completion_tokens": 564, "duration": 35.4530348777771}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum([sum(row) for row in grid])\n    return math.ceil(total_water / capacity)\n\n# Test cases have been provided in the description", "prompt_tokens": 1581, "completion_tokens": 800, "duration": 37.353975772857666}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1012, "completion_tokens": 517, "duration": 26.940780639648438}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in \"aeiou\")\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1714, "completion_tokens": 948, "duration": 36.32286977767944}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word.lower()\n    consonants = [c for c in word if c not in vowels]\n    if len(consonants) < 2:\n        return \"\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in vowels and all(c not in vowels for c in word[i+1:]):\n            return word[i].upper() if word[i].isupper() else word[i]\n    return \"\"\n\n# Test cases were removed as they were part of the initial implementation and are not needed for the solution", "prompt_tokens": 1027, "completion_tokens": 683, "duration": 40.39767146110535}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1 = lst[0]\n    s2 = lst[1]\n    count = s1.count('(') - s1.count(')')\n    count += s2.count('(') - s2.count(')')\n    return 'Yes' if count == 0 else 'No'", "prompt_tokens": 1094, "completion_tokens": 642, "duration": 30.82416272163391}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1161, "completion_tokens": 562, "duration": 26.452727794647217}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 726, "completion_tokens": 388, "duration": 23.537193536758423}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 854, "completion_tokens": 448, "duration": 26.904950618743896}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1266, "completion_tokens": 688, "duration": 30.61246967315674}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(year) != 4:\n        return False\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return day >= 1 and day <= 31\n    elif month in [4, 6, 9, 11]:\n        return day >= 1 and day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            return day >= 1 and day <= 29\n        else:\n            return day >= 1 and day <= 28\n\n    return False", "prompt_tokens": 1267, "completion_tokens": 785, "duration": 43.395957469940186}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 != 0)", "prompt_tokens": 1832, "completion_tokens": 1186, "duration": 36.255712270736694}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    unique_lst = list(set(lst))\n    return sorted(lst) == unique_lst and all(lst.count(num) == 1 for num in unique_lst)", "prompt_tokens": 1195, "completion_tokens": 554, "duration": 23.751299381256104}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1273, "completion_tokens": 695, "duration": 38.032829999923706}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    prod = 1\n    total_sum = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        total_sum += abs(num)\n    \n    return prod * total_sum", "prompt_tokens": 924, "completion_tokens": 575, "duration": 26.549971103668213}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    def get_neighbors(i, j):\n        neighbors = []\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n:\n                neighbors.append((x, y))\n        return neighbors\n    \n    def dfs(path, i, j):\n        if len(path) == k:\n            return path\n        \n        path.append(grid[i][j])\n        neighbors = get_neighbors(i, j)\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]])\n        \n        return dfs(path, next_cell[0], next_cell[1])\n    \n    start_cell = min((i, j) for i in range(n) for j in range(n))\n    return dfs([], start_cell[0], start_cell[1])", "prompt_tokens": 1563, "completion_tokens": 792, "duration": 33.44526553153992}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1]\n    if n == 0:\n        return sequence\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence", "prompt_tokens": 1250, "completion_tokens": 687, "duration": 33.35946202278137}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if not odd_digits:\n        return 0\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    return product", "prompt_tokens": 616, "completion_tokens": 358, "duration": 16.058685064315796}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening = 0\n    for char in string:\n        if char == '[':\n            opening += 1\n        elif char == ']' and opening > 0:\n            opening -= 1\n    return opening == 0", "prompt_tokens": 1407, "completion_tokens": 782, "duration": 30.377131938934326}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total", "prompt_tokens": 943, "completion_tokens": 479, "duration": 19.806427001953125}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt.strip() == '' or not txt[-1].isalpha() or (len(txt.split()) > 1 and txt.split()[-1] != txt.strip().split()[-1]):\n        return False\n    return True", "prompt_tokens": 869, "completion_tokens": 470, "duration": 38.225963830947876}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 806, "completion_tokens": 469, "duration": 24.03177571296692}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    max_negative = max(negatives) if negatives else None\n    min_positive = min(positives) if positives else None\n    \n    return (max_negative, min_positive)", "prompt_tokens": 960, "completion_tokens": 577, "duration": 35.41347551345825}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    if type(a) == int and type(b) == float:\n        return float(b)\n    if type(a) == float and type(b) == int:\n        return float(a)\n    if type(a) == str and type(b) == str:\n        a_num = float(a.replace(',', '.'))\n        b_num = float(b.replace(',', '.'))\n        if a_num > b_num:\n            return a\n        else:\n            return b\n    if type(a) == str:\n        a_num = float(a.replace(',', '.'))\n        if a_num > b:\n            return a\n        else:\n            return b\n    if type(b) == str:\n        b_num = float(b.replace(',', '.'))\n        if a > b_num:\n            return a\n        else:\n            return b", "prompt_tokens": 1111, "completion_tokens": 872, "duration": 37.88099932670593}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n < 8:\n        return False\n    return True", "prompt_tokens": 703, "completion_tokens": 404, "duration": 30.367030382156372}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 996, "completion_tokens": 701, "duration": 33.30481219291687}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-1] + \"-\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result.replace(\" \", \"_\")", "prompt_tokens": 736, "completion_tokens": 421, "duration": 17.15675187110901}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(ext) != 3 or ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1105, "completion_tokens": 585, "duration": 27.472891569137573}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result", "prompt_tokens": 1208, "completion_tokens": 758, "duration": 91.72568488121033}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 790, "completion_tokens": 407, "duration": 19.173300743103027}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1056, "completion_tokens": 627, "duration": 30.078333854675293}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 835, "completion_tokens": 453, "duration": 20.223352670669556}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count", "prompt_tokens": 785, "completion_tokens": 423, "duration": 20.597264051437378}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1086, "completion_tokens": 673, "duration": 29.142898082733154}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planets[start_idx+1:end_idx+1])", "prompt_tokens": 4609, "completion_tokens": 2915, "duration": 83.73263716697693}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1020, "completion_tokens": 492, "duration": 24.652986764907837}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 843, "completion_tokens": 566, "duration": 28.421193599700928}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1) * 2", "prompt_tokens": 911, "completion_tokens": 497, "duration": 21.507015466690063}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 1093, "completion_tokens": 479, "duration": 34.08724284172058}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1201, "completion_tokens": 533, "duration": 24.74190092086792}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 851, "completion_tokens": 458, "duration": 24.25368356704712}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 757, "completion_tokens": 514, "duration": 23.285844802856445}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 839, "completion_tokens": 639, "duration": 28.58862566947937}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 807, "completion_tokens": 459, "duration": 21.308289527893066}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    def word_key(word):\n        return (-count_unique_chars(word), word)\n\n    return max(words, key=word_key)", "prompt_tokens": 923, "completion_tokens": 548, "duration": 26.99969220161438}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(remaining, need)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1331, "completion_tokens": 642, "duration": 34.852538108825684}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 1058, "completion_tokens": 576, "duration": 28.826292514801025}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 770, "completion_tokens": 436, "duration": 19.711897134780884}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 736, "completion_tokens": 432, "duration": 21.77681565284729}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n        \n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 1447, "completion_tokens": 917, "duration": 39.313910722732544}
