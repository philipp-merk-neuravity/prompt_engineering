{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 971, "completion_tokens": 606, "duration": 24.25268530845642}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n    \n    return groups", "prompt_tokens": 977, "completion_tokens": 666, "duration": 28.221097469329834}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 680, "completion_tokens": 348, "duration": 22.901143312454224}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 890, "completion_tokens": 523, "duration": 26.927769422531128}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 896, "completion_tokens": 527, "duration": 21.839378595352173}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 792, "completion_tokens": 484, "duration": 24.53876543045044}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        depths.append(current_depth)\n\n    return depths\n\n\n# Test with a single group of nested parentheses\nassert parse_nested_parens('(()())') == [2]\n\n# Test with multiple groups of nested parentheses\nassert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n\n# Test with a single group of non-nested parentheses\nassert parse_nested_parens('()') == [1]\n\n# Test with multiple groups of non-nested parentheses\nassert parse_nested_parens('() () ()') == [1, 1, 1]\n\n# Test with empty string\nassert parse_nested_parens('') == []\n\n# Test with spaces but no parentheses\nassert parse_nested_parens('     ') == []\n\n# Test with a very deep level of nesting\nassert parse_nested_parens('((((((()))))))') == [7]\n\n# Test with a complex combination of nested and non-nested groups\nassert parse_nested_parens('((())) (()) () (((())))') == [3, 2, 1, 4]\n\n# Test with nested parentheses separated by spaces within the same group\nassert parse_nested_parens('(()) (() ())') == [2, 2, 2]\n\n# Test with incorrect parentheses (should handle gracefully if the function is designed to do so)\n# This test depends on the function's error handling and may need to be adjusted or removed based on implementation.\n# assert parse_nested_parens('(()') == [0]", "prompt_tokens": 3384, "completion_tokens": 2562, "duration": 64.71728134155273}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 904, "completion_tokens": 569, "duration": 25.473480224609375}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 755, "completion_tokens": 428, "duration": 20.061538696289062}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 867, "completion_tokens": 553, "duration": 34.40476441383362}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    palindrome_suffix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            palindrome_suffix = string[i:]\n            break\n\n    prefix = string[:len(string) - len(palindrome_suffix)]\n    return prefix + prefix[::-1] + palindrome_suffix", "prompt_tokens": 925, "completion_tokens": 619, "duration": 33.451112270355225}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 667, "completion_tokens": 385, "duration": 18.067383289337158}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 760, "completion_tokens": 422, "duration": 20.781553506851196}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 668, "completion_tokens": 382, "duration": 19.26767611503601}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 529, "completion_tokens": 270, "duration": 11.514511108398438}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 813, "completion_tokens": 348, "duration": 14.883026838302612}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 763, "completion_tokens": 461, "duration": 22.951867818832397}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    note_beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_beats[note] for note in notes]", "prompt_tokens": 1085, "completion_tokens": 626, "duration": 33.186665534973145}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 909, "completion_tokens": 624, "duration": 32.71028423309326}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 754, "completion_tokens": 462, "duration": 23.2497341632843}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n\n    return closest_pair", "prompt_tokens": 1032, "completion_tokens": 616, "duration": 28.066150903701782}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 1006, "completion_tokens": 634, "duration": 46.73804473876953}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 784, "completion_tokens": 457, "duration": 19.773000717163086}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 467, "completion_tokens": 217, "duration": 12.305720567703247}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 693, "completion_tokens": 453, "duration": 26.138741493225098}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors", "prompt_tokens": 935, "completion_tokens": 573, "duration": 29.577401399612427}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return [x for x in numbers if numbers.count(x) == 1]", "prompt_tokens": 711, "completion_tokens": 387, "duration": 19.43940234184265}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 641, "completion_tokens": 397, "duration": 21.831790685653687}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 641, "completion_tokens": 370, "duration": 25.724509954452515}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 953, "completion_tokens": 635, "duration": 25.34776473045349}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 757, "completion_tokens": 373, "duration": 25.8881676197052}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 603, "completion_tokens": 278, "duration": 14.011969327926636}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    # Find the largest non-zero coefficient\n    max_coefficient = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    # Find the index of the largest non-zero coefficient\n    max_index = xs.index(max_coefficient)\n    \n    # If the index is odd, return the negative value of the coefficient at that index\n    if max_index % 2 != 0:\n        return -xs[max_index] / xs[max_index - 1]\n    \n    # If the index is even, return the negative value of the coefficient at that index divided by the coefficient at index 1\n    return -xs[max_index] / xs[1]", "prompt_tokens": 1402, "completion_tokens": 932, "duration": 44.72418522834778}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1060, "completion_tokens": 616, "duration": 39.47516465187073}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 753, "completion_tokens": 441, "duration": 31.26077437400818}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 767, "completion_tokens": 436, "duration": 24.594950675964355}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(7, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 753, "completion_tokens": 475, "duration": 20.920288562774658}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l", "prompt_tokens": 866, "completion_tokens": 475, "duration": 21.78844952583313}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 1002, "completion_tokens": 604, "duration": 29.984843492507935}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    i = 2\n    count = 0\n    while True:\n        if is_prime(fibonacci(i)):\n            count += 1\n        if count == n:\n            return fibonacci(i)\n        i += 1", "prompt_tokens": 678, "completion_tokens": 485, "duration": 24.28197431564331}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1142, "completion_tokens": 708, "duration": 35.6916241645813}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 876, "completion_tokens": 406, "duration": 22.96897530555725}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 720, "completion_tokens": 344, "duration": 18.506670713424683}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1005, "completion_tokens": 548, "duration": 26.167168378829956}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 787, "completion_tokens": 479, "duration": 23.018943548202515}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 601, "completion_tokens": 348, "duration": 14.920599460601807}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    fib_values = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_values.append(fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4])\n\n    return fib_values[n]", "prompt_tokens": 934, "completion_tokens": 534, "duration": 23.002590894699097}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 868, "completion_tokens": 593, "duration": 27.860164880752563}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 876, "completion_tokens": 570, "duration": 30.829586267471313}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 964, "completion_tokens": 599, "duration": 28.948070764541626}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 875, "completion_tokens": 596, "duration": 23.574893474578857}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 976, "completion_tokens": 580, "duration": 26.028618097305298}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    return all(num < t for num in l)", "prompt_tokens": 760, "completion_tokens": 441, "duration": 20.25396203994751}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 491, "completion_tokens": 223, "duration": 10.253068685531616}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 812, "completion_tokens": 377, "duration": 21.719056844711304}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 536, "completion_tokens": 300, "duration": 13.875817775726318}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 762, "completion_tokens": 457, "duration": 20.390785455703735}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 925, "completion_tokens": 633, "duration": 29.90798807144165}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 855, "completion_tokens": 473, "duration": 21.326528549194336}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n //= i\n            if n == 1:\n                return i", "prompt_tokens": 694, "completion_tokens": 434, "duration": 18.12829351425171}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 828, "completion_tokens": 482, "duration": 22.965178728103638}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 760, "completion_tokens": 462, "duration": 20.612442016601562}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * c for i, c in enumerate(xs)][1:]\n\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Test with coefficients [3, 1, 2, 4, 5] failed.\"\nassert derivative([1, 2, 3]) == [2, 6], \"Test with coefficients [1, 2, 3] failed.\"\nassert derivative([5]) == [], \"Test with a constant polynomial failed.\"\nassert derivative([3, 2]) == [2], \"Test with a linear polynomial [3, 2] failed.\"\nassert derivative([0, 3, 0, 5]) == [3, 0, 15], \"Test with coefficients [0, 3, 0, 5] failed.\"\nassert derivative([-3, -1, -2, -4]) == [-1, -4, -12], \"Test with negative coefficients failed.\"\nassert derivative([1, 0, 2, 0, 0, 5]) == [0, 4, 0, 0, 20], \"Test with a high degree polynomial failed.\"\nassert derivative([]) == [], \"Test with an empty list failed.\"\nassert derivative([0, 4]) == [4], \"Test with a single term of degree 1 failed.\"\nassert derivative([0.5, 2.5, 3.0]) == [2.5, 6.0], \"Test with floating point coefficients failed.\"", "prompt_tokens": 3028, "completion_tokens": 2144, "duration": 63.62960171699524}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 777, "completion_tokens": 368, "duration": 14.643795490264893}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2086, "completion_tokens": 1246, "duration": 38.49954390525818}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 760, "completion_tokens": 446, "duration": 23.438923358917236}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 978, "completion_tokens": 595, "duration": 29.287680625915527}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s,n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1181, "completion_tokens": 620, "duration": 36.680604219436646}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n\n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]", "prompt_tokens": 1420, "completion_tokens": 702, "duration": 32.842124462127686}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 1143, "completion_tokens": 678, "duration": 32.47756576538086}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    min_max_list = []\n    lst.sort()\n    while lst:\n        min_max_list.append(lst.pop(0))\n        if lst:\n            min_max_list.append(lst.pop())\n    return min_max_list", "prompt_tokens": 819, "completion_tokens": 438, "duration": 20.594635248184204}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 863, "completion_tokens": 528, "duration": 21.99774718284607}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1112, "completion_tokens": 495, "duration": 32.94653582572937}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return len(arr) - sum([1 for i in range(len(arr)//2) if arr[i] != arr[-i-1]])", "prompt_tokens": 1017, "completion_tokens": 557, "duration": 27.241434574127197}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 998, "completion_tokens": 517, "duration": 25.60830855369568}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3 and is_prime(a // (2*3*5)) and count > 0  # Check if the remaining quotient is also a prime\n\n# Removed incorrect assert statements", "prompt_tokens": 2239, "completion_tokens": 1696, "duration": 51.623658657073975}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "prompt_tokens": 869, "completion_tokens": 436, "duration": 19.153043270111084}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a**(1/3)).is_integer()) or (a < 0 and ((-a)**(1/3)).is_integer())", "prompt_tokens": 746, "completion_tokens": 389, "duration": 18.75338864326477}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1227, "completion_tokens": 504, "duration": 23.98032236099243}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 1089, "completion_tokens": 652, "duration": 39.944669246673584}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 942, "completion_tokens": 592, "duration": 28.655091285705566}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1268, "completion_tokens": 765, "duration": 41.50981283187866}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    if string == '':\n        return False\n    return is_prime(len(string))\n    \ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True\n\n# Test with a string of length 7 (prime number)\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7 again (prime number) to check consistency\nassert prime_length('kittens') == True\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False\n\n# Test with an empty string (length 0, not a prime number)\nassert prime_length('') == False\n\n# Test with a string of length 2 (prime number)\nassert prime_length('Hi') == True\n\n# Test with a string of length 11 (prime number)\nassert prime_length('Mathematics') == True\n\n# Test with a string of length 1 (not considered a prime number)\nassert prime_length('A') == False\n\n# Test with a string of length 13 (prime number)\nassert prime_length('abcdefghijklm') == True\n\n# Test with a very long string of non-prime length (e.g., 100 characters)\nassert prime_length('a'*100) == False\n\n# Test with a very long string of prime length (e.g., 101 characters, prime number)\nassert prime_length('a'*101) == True", "prompt_tokens": 627, "completion_tokens": 639, "duration": 23.503897428512573}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 10**(n-1) + 9 * 10**(n-2) - 10\n\nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 19\nassert starts_one_ends(3) == 100 + (9*10)\nassert starts_one_ends(4) == 1000 + (9*10*10) - 100\nassert isinstance(starts_one_ends(1000), int)", "prompt_tokens": 2020, "completion_tokens": 1326, "duration": 42.50947952270508}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 906, "completion_tokens": 483, "duration": 25.509331941604614}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 698, "completion_tokens": 444, "duration": 19.52004599571228}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, key=lambda x: ord(x))) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 903, "completion_tokens": 507, "duration": 26.54821515083313}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with a matrix where the target appears multiple times in different rows\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty matrix\nassert get_row([], 1) == []\n\n# Test with a matrix where only one row is non-empty and contains the target\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with a matrix where the target does not appear\nassert get_row([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n], 10) == []\n\n# Test with a matrix where the target appears in a single row multiple times\nassert get_row([\n  [3, 3, 3],\n  [1, 2],\n  [4, 5]\n], 3) == [(0, 2), (0, 1), (0, 0)]\n\n# Test with a matrix containing rows of different lengths\nassert get_row([\n  [1, 2, 3],\n  [1, 2, 3, 4, 5],\n  [1]\n], 1) == [(0, 0), (1, 0), (2, 0)]\n\n# Test with a matrix where the target appears as the only element in one row\nassert get_row([\n  [1],\n  [2, 2],\n  [3]\n], 1) == [(0, 0)]\n\n# Test with a matrix where the target is in the last column of a row\nassert get_row([\n  [2, 3, 4],\n  [5, 6, 1]\n], 1) == [(1, 2)]\n\n# Test with a matrix where the target appears in descending order within a row\nassert get_row([\n  [4, 3, 3, 2, 1],\n  [1, 2, 3, 4, 5]\n], 3) == [(0, 2), (0, 1), (1, 2)]\n\n# Test with a matrix and a negative target\nassert get_row([\n  [-1, -2, -3],\n  [-4, -5, -6],\n  [-7, -8, -1]\n], -1) == [(0, 0), (2, 2), (2, 0)]", "prompt_tokens": 5380, "completion_tokens": 3943, "duration": 122.38852715492249}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)\n    return sorted_array", "prompt_tokens": 1092, "completion_tokens": 542, "duration": 26.12686777114868}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 948, "completion_tokens": 653, "duration": 34.18005704879761}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) > 1:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 858, "completion_tokens": 468, "duration": 19.928624391555786}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 733, "completion_tokens": 375, "duration": 17.818081378936768}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 899, "completion_tokens": 500, "duration": 23.908570766448975}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 785, "completion_tokens": 465, "duration": 22.96570920944214}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1317, "completion_tokens": 688, "duration": 34.08231472969055}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    is_lower = all(key.islower() for key in dict.keys())\n    is_upper = all(key.isupper() for key in dict.keys())\n\n    return is_lower or is_upper", "prompt_tokens": 1178, "completion_tokens": 713, "duration": 76.97541427612305}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 888, "completion_tokens": 501, "duration": 26.144352674484253}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 740, "completion_tokens": 391, "duration": 19.581016540527344}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 1183, "completion_tokens": 732, "duration": 29.67474389076233}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value % 1 >= 0.5:\n        return int(value) + 1 if value >= 0 else int(value) - 1\n    else:\n        return int(value)  # changed round(value) to int(value)", "prompt_tokens": 3740, "completion_tokens": 2319, "duration": 73.37446594238281}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 1)\n    return stones", "prompt_tokens": 935, "completion_tokens": 557, "duration": 27.12867021560669}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'\\s|,', s)", "prompt_tokens": 841, "completion_tokens": 446, "duration": 20.44399857521057}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = i\n    return largest_even", "prompt_tokens": 763, "completion_tokens": 442, "duration": 24.298624277114868}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 915, "completion_tokens": 494, "duration": 28.284383296966553}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 875, "completion_tokens": 540, "duration": 22.654532432556152}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    sorted_filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_filtered_arr[::-1]\n    \n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 1364, "completion_tokens": 755, "duration": 37.07393455505371}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 835, "completion_tokens": 466, "duration": 19.052738666534424}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 1132, "completion_tokens": 630, "duration": 30.31314969062805}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 779, "completion_tokens": 397, "duration": 16.419805765151978}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    min_index = arr.index(min(arr))\n    shift_count = (len(arr) - min_index) % len(arr)\n    return arr[min_index:] + arr[:min_index] == sorted_arr or arr[-shift_count:] + arr[:-shift_count] == sorted_arr", "prompt_tokens": 1134, "completion_tokens": 434, "duration": 16.923911809921265}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    if even_count == len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1169, "completion_tokens": 648, "duration": 29.595402002334595}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    result = {k: v for k, v in hist.items() if v == max_count}\n    \n    return result", "prompt_tokens": 930, "completion_tokens": 515, "duration": 24.616626977920532}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join(ch for ch in s if ch not in c)\n    return res, res == res[::-1]", "prompt_tokens": 1057, "completion_tokens": 587, "duration": 30.407419681549072}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), i, i, i) for i, s in enumerate(lst)]", "prompt_tokens": 3179, "completion_tokens": 1578, "duration": 58.84051179885864}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 815, "completion_tokens": 515, "duration": 24.23677372932434}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1445, "completion_tokens": 653, "duration": 79.25022912025452}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 967, "completion_tokens": 472, "duration": 24.080912113189697}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = [word for word in words if sum(1 for letter in word if letter in consonants) == n]\n    return result", "prompt_tokens": 1036, "completion_tokens": 562, "duration": 26.797239065170288}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 1697, "completion_tokens": 1070, "duration": 36.771111488342285}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_valid(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    s1, s2 = lst[0], lst[1]\n    if is_valid(s1 + s2) or is_valid(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1108, "completion_tokens": 696, "duration": 41.97359323501587}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1228, "completion_tokens": 629, "duration": 30.272258043289185}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 881, "completion_tokens": 543, "duration": 27.15256953239441}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 9 < x < 100)", "prompt_tokens": 939, "completion_tokens": 531, "duration": 21.62382197380066}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1187, "completion_tokens": 616, "duration": 25.214274644851685}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1226, "completion_tokens": 707, "duration": 27.75575566291809}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 867, "completion_tokens": 464, "duration": 22.554276943206787}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 1106, "completion_tokens": 469, "duration": 23.06741428375244}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 1323, "completion_tokens": 742, "duration": 33.69038009643555}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    total = 0\n    for num in arr:\n        product *= 1 if num == 0 else num // abs(num)\n        total += abs(num)\n\n    return product * total", "prompt_tokens": 939, "completion_tokens": 576, "duration": 23.15733551979065}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        \n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n        neighbors.sort(key=lambda x: (grid[x[0]][x[1]], x))\n        \n        for ni, nj in neighbors:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                new_path = dfs(ni, nj, path + [grid[ni][nj]], visited.copy())\n                if new_path:\n                    return new_path\n        \n        return None\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs(i, j, [grid[i][j]], set())\n            if path:\n                return path", "prompt_tokens": 1585, "completion_tokens": 821, "duration": 78.47051572799683}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        tribonacci = [3, 2]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 1158, "completion_tokens": 619, "duration": 27.921287298202515}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 608, "completion_tokens": 329, "duration": 16.344691038131714}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 789, "completion_tokens": 396, "duration": 19.429136514663696}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum([int(num)**2 for num in lst])\n    return total", "prompt_tokens": 965, "completion_tokens": 490, "duration": 20.486830234527588}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 823, "completion_tokens": 424, "duration": 24.20465350151062}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 784, "completion_tokens": 446, "duration": 18.705838441848755}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    max_neg = max(neg_integers) if neg_integers else None\n    min_pos = min(pos_integers) if pos_integers else None\n\n    return (max_neg, min_pos)", "prompt_tokens": 945, "completion_tokens": 570, "duration": 25.770176887512207}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif str(a).replace(\",\", \".\") > str(b).replace(\",\", \".\"):\n        return a\n    else:\n        return b", "prompt_tokens": 1008, "completion_tokens": 592, "duration": 45.23586916923523}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 667, "completion_tokens": 354, "duration": 18.394015789031982}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 852, "completion_tokens": 557, "duration": 25.68165683746338}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 766, "completion_tokens": 457, "duration": 21.41741418838501}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name) == 0:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1109, "completion_tokens": 617, "duration": 26.409493446350098}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i]**2\n        elif i % 4 == 0:\n            total += lst[i]**3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1191, "completion_tokens": 736, "duration": 33.460851430892944}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_words(sentence):\n        return [word for word in sentence.split() if is_prime(len(word))]\n\n    return ' '.join(get_words(sentence))", "prompt_tokens": 990, "completion_tokens": 607, "duration": 30.48842191696167}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    frac1 = x.split('/')\n    frac2 = n.split('/')\n    num1, denom1 = int(frac1[0]), int(frac1[1])\n    num2, denom2 = int(frac2[0]), int(frac2[1])\n    \n    return (num1 * num2) % (denom1 * denom2) == 0", "prompt_tokens": 1206, "completion_tokens": 802, "duration": 34.22558927536011}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 1041, "completion_tokens": 434, "duration": 67.93164324760437}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 836, "completion_tokens": 479, "duration": 20.88815975189209}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 446, "duration": 20.872942447662354}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(p for p in planets if start_index < planets.index(p) < end_index)", "prompt_tokens": 1062, "completion_tokens": 587, "duration": 38.48391675949097}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 963, "completion_tokens": 435, "duration": 18.17897629737854}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 753, "completion_tokens": 482, "duration": 22.661125898361206}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Testing with a list of positive odd and even numbers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Testing with a list of negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Testing with a list containing a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Testing with a list containing only zero\nassert double_the_difference([0]) == 0\n\n# Testing with an empty list\nassert double_the_difference([]) == 0\n\n# Testing with a list of positive odd numbers\nassert double_the_difference([5, 7, 9]) == 5**2 + 7**2 + 9**2\n\n# Testing with a list of positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0\n\n# Testing with a list containing non-integer values\nassert double_the_difference([1.5, 2.5, 3.5, 4]) == 0\n\n# Testing with a list containing a mix of integers and non-integer values\nassert double_the_difference([1, 2, 3.5, 4]) == 1**2\n\n# Testing with a list containing a large number of elements\nassert double_the_difference(list(range(1, 101))) == sum(x**2 for x in range(1, 101) if x % 2 != 0)\n\n# Testing with a list of large odd and even numbers\nassert double_the_difference([1001, 2002, 3003, 4004]) == 1001**2 + 3003**2\n\n# Testing with a list containing negative odd numbers\nassert double_the_difference([-3, -5, -7]) == 0\n\n# Testing with a list containing both positive and negative odd numbers\nassert double_the_difference([-3, 5, -7, 9]) == 5**2 + 9**2\n\n# Testing with a list containing both integers and strings\nassert double_the_difference([1, \"2\", 3, \"4\"]) == 1**2 + 3**2", "prompt_tokens": 934, "completion_tokens": 982, "duration": 37.760536909103394}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 1288, "completion_tokens": 681, "duration": 30.091131925582886}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n\n    strongest = max(extensions, key=lambda ext: (strength(ext), extensions.index(ext)))\n    return f'{class_name}.{strongest}'", "prompt_tokens": 1365, "completion_tokens": 701, "duration": 30.10719108581543}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 896, "completion_tokens": 503, "duration": 21.66538667678833}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 543, "duration": 27.95544171333313}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    \n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 788, "completion_tokens": 588, "duration": 23.720236778259277}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 737, "completion_tokens": 365, "duration": 16.753437757492065}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -words.index(x)))", "prompt_tokens": 856, "completion_tokens": 473, "duration": 20.512718200683594}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [total_eaten, remaining]", "prompt_tokens": 1209, "completion_tokens": 516, "duration": 24.726078987121582}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1387, "completion_tokens": 901, "duration": 90.91660022735596}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s[::-1])", "prompt_tokens": 871, "completion_tokens": 505, "duration": 23.829588174819946}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 821, "completion_tokens": 517, "duration": 24.61819577217102}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 855, "completion_tokens": 498, "duration": 26.034574270248413}
