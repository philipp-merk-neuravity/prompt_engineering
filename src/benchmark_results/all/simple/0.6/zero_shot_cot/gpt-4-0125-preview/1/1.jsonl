{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 992, "completion_tokens": 627, "duration": 26.55339527130127}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char in ['(', ')']:\n            temp += char\n            if temp.count('(') == temp.count(')'):\n                result.append(temp)\n                temp = \"\"\n    return result", "prompt_tokens": 886, "completion_tokens": 547, "duration": 22.048306465148926}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 685, "completion_tokens": 349, "duration": 14.626255750656128}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 697, "completion_tokens": 330, "duration": 15.851059913635254}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 2313, "completion_tokens": 1522, "duration": 49.307437896728516}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 802, "completion_tokens": 498, "duration": 25.642341375350952}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        \n        if char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    \n    if current_level > 0:\n        levels.append(max_level)\n    \n    return levels", "prompt_tokens": 810, "completion_tokens": 533, "duration": 20.28120183944702}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 826, "completion_tokens": 496, "duration": 20.029547452926636}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n\n    return (sum_result, product_result)", "prompt_tokens": 739, "completion_tokens": 404, "duration": 15.738553285598755}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 1144, "completion_tokens": 830, "duration": 45.97157049179077}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 3191, "completion_tokens": 2148, "duration": 65.32145977020264}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 623, "completion_tokens": 351, "duration": 18.339868307113647}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), strings.index(s)))", "prompt_tokens": 764, "completion_tokens": 419, "duration": 17.11218547821045}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 699, "completion_tokens": 413, "duration": 19.55560827255249}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 629, "completion_tokens": 370, "duration": 17.393296003341675}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 655, "completion_tokens": 364, "duration": 41.672749519348145}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 580, "completion_tokens": 274, "duration": 13.90304446220398}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats.get(note, 0) for note in notes]", "prompt_tokens": 934, "completion_tokens": 475, "duration": 21.511131286621094}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 817, "completion_tokens": 512, "duration": 24.16968584060669}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda x: num_dict[x])\n    return ' '.join(nums)", "prompt_tokens": 708, "completion_tokens": 423, "duration": 17.01203489303589}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 892, "completion_tokens": 472, "duration": 17.141226530075073}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1008, "completion_tokens": 636, "duration": 30.45200753211975}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 715, "completion_tokens": 388, "duration": 19.255441904067993}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 462, "completion_tokens": 212, "duration": 8.707032680511475}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 670, "completion_tokens": 430, "duration": 25.644235610961914}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n            factors.append(i)\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 1551, "completion_tokens": 975, "duration": 37.24825406074524}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 687, "completion_tokens": 375, "duration": 20.102206230163574}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 548, "completion_tokens": 305, "duration": 14.14290976524353}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 591, "completion_tokens": 315, "duration": 14.096157312393188}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 901, "completion_tokens": 569, "duration": 24.98267674446106}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 806, "completion_tokens": 422, "duration": 20.827911138534546}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 628, "completion_tokens": 303, "duration": 14.27675175666809}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1473, "completion_tokens": 935, "duration": 38.782450675964355}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in third_indices:\n        result[i] = sorted(l[i])\n    return result", "prompt_tokens": 1034, "completion_tokens": 610, "duration": 25.39549469947815}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 836, "completion_tokens": 525, "duration": 21.128875732421875}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 770, "completion_tokens": 439, "duration": 27.204672813415527}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 978, "completion_tokens": 697, "duration": 29.65737295150757}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 != 0 else even_indices.pop(0) for i, x in enumerate(l)]", "prompt_tokens": 991, "completion_tokens": 624, "duration": 24.86033535003662}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 978, "completion_tokens": 640, "duration": 25.925124168395996}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num+1):\n                a, b = b, a + b\n            return b\n\n    num = 1\n    count = 0\n    while count < n:\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n        num += 1\n\n    return fib_num", "prompt_tokens": 813, "completion_tokens": 621, "duration": 27.354947090148926}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1039, "completion_tokens": 605, "duration": 28.854432821273804}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 740, "completion_tokens": 272, "duration": 12.553198099136353}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 695, "completion_tokens": 319, "duration": 16.348478078842163}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l)", "prompt_tokens": 911, "completion_tokens": 435, "duration": 20.606832265853882}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n\n    return ''.join(digits)", "prompt_tokens": 757, "completion_tokens": 475, "duration": 21.8817720413208}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 504, "completion_tokens": 251, "duration": 14.55214548110962}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 940, "completion_tokens": 525, "duration": 24.515861988067627}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 849, "completion_tokens": 588, "duration": 27.771795988082886}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 690, "completion_tokens": 384, "duration": 65.81085228919983}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 927, "completion_tokens": 559, "duration": 27.45480465888977}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 699, "completion_tokens": 420, "duration": 19.77837038040161}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 894, "completion_tokens": 501, "duration": 25.319074630737305}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 806, "completion_tokens": 491, "duration": 28.812490463256836}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 491, "completion_tokens": 223, "duration": 9.773717403411865}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 861, "completion_tokens": 426, "duration": 19.65253448486328}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 627, "completion_tokens": 393, "duration": 19.3276264667511}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    open_count = 0\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_count += 1\n        elif bracket == \">\":\n            open_count -= 1\n\n            if open_count < 0:\n                return False\n\n    return open_count == 0", "prompt_tokens": 746, "completion_tokens": 450, "duration": 21.792008876800537}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    else:\n        return False", "prompt_tokens": 907, "completion_tokens": 612, "duration": 24.45862317085266}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 872, "completion_tokens": 491, "duration": 25.86817979812622}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test with a number having a large prime factor\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to check for smallest prime factor\nassert largest_prime_factor(2048) == 2\n\n# Test with a number where the largest prime factor is in the middle of its prime factorization\nassert largest_prime_factor(6936) == 17  # 2^3 * 3^2 * 7 * 17\n\n# Test with a number having a repeated large prime factor\nassert largest_prime_factor(121) == 11  # 11^2\n\n# Test with a larger number to check efficiency\nassert largest_prime_factor(600851475143) == 6857\n\n# Test with a number that is a product of consecutive primes\nassert largest_prime_factor(2*3*5*7*11*13) == 13\n\n# Test with a number that includes a large prime number and a very small one\nassert largest_prime_factor(2*101) == 101\n\n# Edge case: smallest composite number\nassert largest_prime_factor(4) == 2  # Since 4 is 2^2, the largest prime factor is 2\n\n# Test with a composite number that is a product of two primes, one large and one small\nassert largest_prime_factor(2 * 1999) == 1999  # 2 and 1999 are primes", "prompt_tokens": 615, "completion_tokens": 654, "duration": 22.475565195083618}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 674, "completion_tokens": 324, "duration": 14.81523060798645}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 779, "completion_tokens": 483, "duration": 21.37244415283203}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test case for a polynomial of degree 4\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Failed on polynomial of degree 4\"\n\n# Test case for a polynomial of degree 2\nassert derivative([1, 2, 3]) == [2, 6], \"Failed on polynomial of degree 2\"\n\n# Test case for a constant polynomial (should return an empty list)\nassert derivative([5]) == [], \"Failed on constant polynomial\"\n\n# Test case for a linear polynomial (should return a list with the coefficient of x)\nassert derivative([0, 4]) == [4], \"Failed on linear polynomial\"\n\n# Test case for a polynomial with all coefficients being zeros\nassert derivative([0, 0, 0, 0]) == [0, 0, 0], \"Failed on zero polynomial\"\n\n# Test case for negative coefficients\nassert derivative([-3, -2, -1]) == [-2, -2], \"Failed on polynomial with negative coefficients\"\n\n# Test case for a polynomial with a mix of positive and negative coefficients\nassert derivative([1, -2, 3, -4]) == [-2, 6, -12], \"Failed on polynomial with mixed coefficients\"\n\n# Test case for a polynomial with floating point coefficients\nassert derivative([0.5, 2.5, 4.0]) == [2.5, 8.0], \"Failed on polynomial with floating point coefficients\"\n\n# Test case for a polynomial where the derivative will have a zero coefficient\nassert derivative([1, 0, 2]) == [0, 4], \"Failed when derivative should include a zero coefficient\"\n\n# Test case for a polynomial with a large number of terms\nassert derivative([1] * 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Failed on polynomial with a large number of terms\"", "prompt_tokens": 831, "completion_tokens": 887, "duration": 28.320285320281982}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 940, "completion_tokens": 531, "duration": 23.18229341506958}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 2341, "completion_tokens": 1518, "duration": 44.59433698654175}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 838, "completion_tokens": 540, "duration": 26.507144451141357}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 915, "completion_tokens": 532, "duration": 26.393935203552246}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[-2])\n    return n - apples - oranges", "prompt_tokens": 1043, "completion_tokens": 480, "duration": 25.112006187438965}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    min_value = min(even_values)\n    min_index = arr.index(min_value)\n    return [min_value, min_index]", "prompt_tokens": 1282, "completion_tokens": 540, "duration": 26.920178174972534}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    num_freq = {}\n    for num in lst:\n        if num > 0:\n            num_freq[num] = num_freq.get(num, 0) + 1\n    \n    result = -1\n    for num, freq in num_freq.items():\n        if num > freq:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 925, "completion_tokens": 492, "duration": 30.984044551849365}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 828, "completion_tokens": 446, "duration": 21.493583917617798}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 963, "completion_tokens": 630, "duration": 32.678218603134155}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1060, "completion_tokens": 443, "duration": 27.637712240219116}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 960, "completion_tokens": 517, "duration": 23.010064601898193}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 998, "completion_tokens": 516, "duration": 26.31961154937744}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a /= prime\n            count += 1\n    return count == 3 and a == 1", "prompt_tokens": 819, "completion_tokens": 609, "duration": 24.43914031982422}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and n**int(round((x/n)**(1/n), 10)) == x", "prompt_tokens": 965, "completion_tokens": 539, "duration": 24.096741676330566}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 1244, "completion_tokens": 664, "duration": 20.900311708450317}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_digits)", "prompt_tokens": 1158, "completion_tokens": 423, "duration": 18.061585664749146}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 751, "completion_tokens": 313, "duration": 12.279444456100464}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 939, "completion_tokens": 589, "duration": 28.682206630706787}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1310, "completion_tokens": 850, "duration": 31.35620665550232}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True, \"Should return True for string length 5\"\n\n# Test with a string of length 7 (prime number)\nassert prime_length('abcdcba') == True, \"Should return True for string length 7\"\n\n# Test with a string of length 7 again to ensure consistency\nassert prime_length('kittens') == True, \"Should return True for string length 7 again\"\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False, \"Should return False for string length 6\"\n\n# Test with a string of length 2 (prime number)\nassert prime_length('Hi') == True, \"Should return True for string length 2\"\n\n# Test with a string of length 1 (not generally considered a prime number)\nassert prime_length('A') == False, \"Should return False for string length 1\"\n\n# Test with a string of length 11 (prime number)\nassert prime_length('Mathematics') == True, \"Should return True for string length 11\"\n\n# Test with an empty string (length 0, not a prime number)\nassert prime_length('') == False, \"Should return False for empty string\"\n\n# Test with a string of length 13 (prime number)\nassert prime_length('abcdefghijklm') == True, \"Should return True for string length 13\"\n\n# Test with a string of length 4 (not a prime number)\nassert prime_length('test') == False, \"Should return False for string length 4\"", "prompt_tokens": 684, "completion_tokens": 744, "duration": 27.108429670333862}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 697, "completion_tokens": 489, "duration": 17.11937952041626}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 849, "completion_tokens": 426, "duration": 21.302248001098633}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 664, "completion_tokens": 410, "duration": 43.3702290058136}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word, key=lambda x: (x.isdigit(), x.lower())))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 741, "completion_tokens": 356, "duration": 15.095065116882324}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 1390, "completion_tokens": 755, "duration": 31.74369239807129}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)\n    return sorted_array", "prompt_tokens": 1170, "completion_tokens": 620, "duration": 29.484843015670776}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(ord(c) + 2 * (ord('z') - ord('Z')) if c.islower() else ord(c) + 2 * (ord('Z') - ord('z')) if c.isupper() else ord(c)) if c.isalpha() else c for c in s)", "prompt_tokens": 827, "completion_tokens": 499, "duration": 27.42764711380005}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "prompt_tokens": 913, "completion_tokens": 517, "duration": 26.68642258644104}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace('!', '.').replace('?', '.').split('.') if sentence.strip().startswith('I'))", "prompt_tokens": 1487, "completion_tokens": 929, "duration": 30.859529495239258}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 961, "completion_tokens": 569, "duration": 26.27615976333618}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def shift_vowel(vowel):\n        vowels = 'aeiouAEIOU'\n        shifted = 'cgkqyCGKQY'\n        return shifted[vowels.index(vowel)]\n\n    def encode_char(char):\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                return shift_vowel(char)\n            else:\n                return char.swapcase()\n        return char\n\n    return ''.join(encode_char(char) for char in message)", "prompt_tokens": 805, "completion_tokens": 510, "duration": 22.151137590408325}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return sum_of_digits(max_prime)\n    else:\n        return 0", "prompt_tokens": 1228, "completion_tokens": 597, "duration": 31.562607049942017}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    \n    return lower_keys or upper_keys", "prompt_tokens": 923, "completion_tokens": 467, "duration": 21.974406480789185}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 807, "completion_tokens": 430, "duration": 18.63131594657898}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 695, "completion_tokens": 346, "duration": 18.652557849884033}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 782, "completion_tokens": 495, "duration": 24.884267568588257}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 924, "completion_tokens": 474, "duration": 24.813334703445435}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while len(stones) < n:\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 942, "completion_tokens": 553, "duration": 27.321272373199463}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 776, "completion_tokens": 380, "duration": 20.528486251831055}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            largest_even = max(largest_even, num)\n    return largest_even", "prompt_tokens": 804, "completion_tokens": 489, "duration": 22.727646827697754}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1142, "completion_tokens": 718, "duration": 35.997952699661255}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted(num for num in x if not has_even_digit(num))", "prompt_tokens": 788, "completion_tokens": 430, "duration": 17.84730887413025}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[x - 1] for x in reversed_arr]\n    return result", "prompt_tokens": 1235, "completion_tokens": 597, "duration": 25.206610918045044}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 890, "completion_tokens": 554, "duration": 21.67983651161194}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n    \n    return (even_count, odd_count)", "prompt_tokens": 1068, "completion_tokens": 565, "duration": 31.511308908462524}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    def has_positive_digit_sum(n):\n        return digit_sum(n) > 0\n\n    return sum(1 for num in arr if has_positive_digit_sum(num))", "prompt_tokens": 762, "completion_tokens": 393, "duration": 16.946280241012573}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1219, "completion_tokens": 504, "duration": 19.008874893188477}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    count_even = sum(1 for num in lst2 if num % 2 == 0)\n\n    return \"YES\" if count_even >= count_odd else \"NO\"", "prompt_tokens": 1143, "completion_tokens": 636, "duration": 24.8492431640625}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    for char in test.split():\n        if char in histogram_dict:\n            histogram_dict[char] += 1\n        else:\n            histogram_dict[char] = 1\n\n    max_count = max(histogram_dict.values())\n    return {k: v for k, v in histogram_dict.items() if v == max_count}", "prompt_tokens": 955, "completion_tokens": 549, "duration": 21.013346910476685}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_s = ''.join([char for char in s if char not in c])\n    return filtered_s, filtered_s == filtered_s[::-1]", "prompt_tokens": 1243, "completion_tokens": 778, "duration": 31.549265384674072}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements \" + str(sum(int(digit) % 2 != 0 for digit in string) ) + \"n the str\" + string + \"ng \" + string + \" of the \" + string + \"nput.\" for string in lst]", "prompt_tokens": 1207, "completion_tokens": 746, "duration": 29.972739458084106}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum = min(num, cur_sum + num)\n        min_sum = min(min_sum, cur_sum)\n\n    return min_sum", "prompt_tokens": 811, "completion_tokens": 520, "duration": 24.8351149559021}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)  # Ceiling division", "prompt_tokens": 2344, "completion_tokens": 1138, "duration": 47.389111280441284}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1143, "completion_tokens": 648, "duration": 33.79320478439331}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n and len(word) > 0]", "prompt_tokens": 1032, "completion_tokens": 567, "duration": 24.042438507080078}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test cases have been removed", "prompt_tokens": 1060, "completion_tokens": 681, "duration": 38.449554681777954}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 893, "completion_tokens": 441, "duration": 18.60450792312622}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1131, "completion_tokens": 532, "duration": 28.03224802017212}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 736, "completion_tokens": 398, "duration": 24.016905784606934}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 1050, "completion_tokens": 644, "duration": 36.725075006484985}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1165, "completion_tokens": 580, "duration": 123.04566764831543}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1402, "completion_tokens": 878, "duration": 37.130751609802246}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 975, "completion_tokens": 572, "duration": 31.540188312530518}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "prompt_tokens": 1111, "completion_tokens": 481, "duration": 32.920514822006226}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start <= end:\n        if is_prime(end - start + 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1195, "completion_tokens": 648, "duration": 26.601006984710693}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes += abs(num)\n            product *= -1\n            \n    return sum_magnitudes * product", "prompt_tokens": 1010, "completion_tokens": 668, "duration": 26.175920963287354}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_min_path(grid, k):\n        def dfs(x, y, path):\n            if len(path) == k:\n                return path\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                    if new_path:\n                        return new_path\n\n        min_path = None\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                new_path = dfs(i, j, [grid[i][j]])\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = new_path\n        return min_path\n\n    return find_min_path(grid, k)", "prompt_tokens": 1588, "completion_tokens": 824, "duration": 43.90482950210571}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    else:\n        res = [3, 2]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res", "prompt_tokens": 1133, "completion_tokens": 588, "duration": 25.579599380493164}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 616, "completion_tokens": 337, "duration": 19.70005774497986}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) != 0", "prompt_tokens": 1238, "completion_tokens": 623, "duration": 20.617645502090454}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 1080, "completion_tokens": 608, "duration": 38.84532189369202}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.rstrip()[-1].isalpha() if txt else False", "prompt_tokens": 849, "completion_tokens": 417, "duration": 19.881810665130615}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 840, "completion_tokens": 502, "duration": 22.427236557006836}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    max_neg = None if not neg_ints else max(neg_ints)\n    min_pos = None if not pos_ints else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 1019, "completion_tokens": 646, "duration": 32.211278200149536}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    \n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None", "prompt_tokens": 1074, "completion_tokens": 677, "duration": 40.479923248291016}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 720, "completion_tokens": 407, "duration": 15.687381029129028}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 810, "completion_tokens": 496, "duration": 27.8741192817688}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    if \"   \" in text:\n        return text.replace(\"   \", \"-\").replace(\" \", \"_\")\n    else:\n        return text.replace(\" \", \"_\")", "prompt_tokens": 666, "completion_tokens": 313, "duration": 20.20609474182129}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1023, "completion_tokens": 524, "duration": 22.57974624633789}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1048, "completion_tokens": 602, "duration": 25.95036816596985}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 821, "completion_tokens": 438, "duration": 23.49333620071411}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1108, "completion_tokens": 675, "duration": 34.60294032096863}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 1705, "completion_tokens": 893, "duration": 33.176390171051025}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 884, "completion_tokens": 527, "duration": 20.15156579017639}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1064, "completion_tokens": 642, "duration": 30.651421308517456}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    start = min(idx1, idx2) + 1\n    end = max(idx1, idx2)\n    \n    if start >= end:\n        return ()\n    \n    result = planets[start:end]\n    if idx1 > idx2:\n        result.reverse()\n    \n    return tuple(result)", "prompt_tokens": 1915, "completion_tokens": 1143, "duration": 38.436142444610596}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 2238, "completion_tokens": 1162, "duration": 36.28921413421631}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 653, "completion_tokens": 382, "duration": 23.450490474700928}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 736, "completion_tokens": 317, "duration": 12.469566345214844}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1217, "completion_tokens": 610, "duration": 26.842944145202637}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1336, "completion_tokens": 677, "duration": 40.154730796813965}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 1136, "completion_tokens": 738, "duration": 87.23615837097168}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even, odd)", "prompt_tokens": 556, "completion_tokens": 311, "duration": 12.822961807250977}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 765, "completion_tokens": 566, "duration": 24.37546181678772}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 828, "completion_tokens": 480, "duration": 20.09363842010498}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    \n    return max_word", "prompt_tokens": 832, "completion_tokens": 501, "duration": 21.07564926147461}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + remaining\n    if remaining >= need:\n        total_carrots += need\n        remaining -= need\n    else:\n        total_carrots += remaining\n        remaining = 0\n    return [total_carrots, remaining]", "prompt_tokens": 1256, "completion_tokens": 584, "duration": 29.0191867351532}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1340, "completion_tokens": 859, "duration": 39.50994539260864}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 695, "completion_tokens": 362, "duration": 12.74778413772583}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 769, "completion_tokens": 465, "duration": 20.863134622573853}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 836, "completion_tokens": 479, "duration": 25.107362508773804}
