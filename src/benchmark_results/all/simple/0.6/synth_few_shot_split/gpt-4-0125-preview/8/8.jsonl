{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 901, "completion_tokens": 415, "duration": 15.31723427772522}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    balance = 0\n    current_group = \"\"\n    for char in paren_string.replace(\" \", \"\"):  # Removing spaces\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            if balance == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 962, "completion_tokens": 539, "duration": 21.499536275863647}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 764, "completion_tokens": 324, "duration": 12.443002223968506}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 975, "completion_tokens": 485, "duration": 12.495424270629883}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 983, "completion_tokens": 493, "duration": 16.306581497192383}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 829, "completion_tokens": 404, "duration": 11.788750886917114}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1006, "completion_tokens": 591, "duration": 24.56854772567749}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 402, "duration": 14.867619514465332}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 773, "completion_tokens": 326, "duration": 12.55085825920105}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    max_list = [numbers[0]]\n    for num in numbers[1:]:\n        max_list.append(max(max_list[-1], num))\n    return max_list", "prompt_tokens": 1060, "completion_tokens": 646, "duration": 17.227569818496704}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 978, "completion_tokens": 459, "duration": 12.175572395324707}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 813, "completion_tokens": 396, "duration": 12.909939527511597}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 890, "completion_tokens": 448, "duration": 12.733752965927124}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 844, "completion_tokens": 438, "duration": 16.523890495300293}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 818, "completion_tokens": 468, "duration": 14.315558433532715}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 718, "completion_tokens": 308, "duration": 7.851601839065552}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 739, "completion_tokens": 317, "duration": 10.347639322280884}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 940, "completion_tokens": 369, "duration": 11.040528535842896}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 805, "completion_tokens": 388, "duration": 13.415685892105103}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 807, "completion_tokens": 402, "duration": 14.36131238937378}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 1052, "completion_tokens": 532, "duration": 14.248335123062134}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 933, "completion_tokens": 440, "duration": 16.261570930480957}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 801, "completion_tokens": 352, "duration": 11.250155687332153}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 746, "completion_tokens": 373, "duration": 8.999911785125732}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 759, "completion_tokens": 393, "duration": 9.698488473892212}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 943, "completion_tokens": 509, "duration": 18.775022983551025}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 817, "completion_tokens": 411, "duration": 11.617250680923462}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 713, "completion_tokens": 347, "duration": 9.582658767700195}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 721, "completion_tokens": 363, "duration": 12.59140944480896}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 770, "completion_tokens": 389, "duration": 11.35565972328186}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 834, "completion_tokens": 328, "duration": 8.689278602600098}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1040, "completion_tokens": 593, "duration": 20.378665685653687}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, initial_guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = initial_guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0\n\n    return newton_method(xs)", "prompt_tokens": 1156, "completion_tokens": 649, "duration": 25.07822060585022}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    # Counter for elements in divisible_by_three list\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If index is divisible by 3, append from sorted list\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            # Else, keep the element unchanged\n            result.append(l[i])\n    return result", "prompt_tokens": 990, "completion_tokens": 614, "duration": 24.9192533493042}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 721, "completion_tokens": 296, "duration": 10.81188702583313}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 714, "completion_tokens": 261, "duration": 9.801084995269775}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 795, "completion_tokens": 422, "duration": 13.5687096118927}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 890, "completion_tokens": 409, "duration": 13.717747211456299}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 950, "completion_tokens": 466, "duration": 13.611921072006226}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 2  # Starting from the 2nd index as the first prime Fibonacci number is at index 3 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, ...)\n    while True:\n        fib_num = fibonacci(fib_index)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        fib_index += 1", "prompt_tokens": 909, "completion_tokens": 631, "duration": 19.556307792663574}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1339, "completion_tokens": 839, "duration": 41.75432848930359}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars are moving at the same speed and are infinitely sturdy, each car moving left to right will inevitably collide with each car moving right to left. Therefore, the total number of collisions will be the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 1117, "completion_tokens": 587, "duration": 16.57816743850708}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 771, "completion_tokens": 273, "duration": 11.4950590133667}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1232, "completion_tokens": 655, "duration": 20.0223650932312}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 758, "completion_tokens": 330, "duration": 11.085277795791626}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 676, "completion_tokens": 334, "duration": 12.544819116592407}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n\n    return dp[n]", "prompt_tokens": 1107, "completion_tokens": 615, "duration": 20.406922578811646}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 893, "completion_tokens": 499, "duration": 17.63412308692932}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 808, "completion_tokens": 441, "duration": 15.765095949172974}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 849, "completion_tokens": 362, "duration": 12.287904977798462}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 816, "completion_tokens": 396, "duration": 13.794495105743408}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 876, "completion_tokens": 363, "duration": 11.24113154411316}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 778, "completion_tokens": 353, "duration": 9.864111423492432}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 654, "completion_tokens": 266, "duration": 7.89379358291626}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 894, "completion_tokens": 340, "duration": 12.577035665512085}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 805, "completion_tokens": 436, "duration": 13.025660991668701}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 917, "completion_tokens": 490, "duration": 18.992175340652466}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 773, "completion_tokens": 355, "duration": 12.82466745376587}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 840, "completion_tokens": 350, "duration": 13.959545135498047}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 878, "completion_tokens": 500, "duration": 18.376673936843872}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 870, "completion_tokens": 406, "duration": 11.694647312164307}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1001, "completion_tokens": 580, "duration": 14.04542088508606}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 875, "completion_tokens": 382, "duration": 12.736421823501587}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 978, "completion_tokens": 458, "duration": 16.89996862411499}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':  # Check if 'y' is at the end and treat it as a vowel\n        count += 1\n    return count", "prompt_tokens": 856, "completion_tokens": 382, "duration": 14.255943775177002}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 739, "completion_tokens": 326, "duration": 8.354495763778687}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 13.336560726165771}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1056, "completion_tokens": 366, "duration": 11.643958568572998}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1352, "completion_tokens": 503, "duration": 12.618616342544556}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq:\n            result = max(result, num)\n    return result", "prompt_tokens": 943, "completion_tokens": 384, "duration": 12.303726196289062}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    strange_sorted_list = []\n    while sorted_list:\n        strange_sorted_list.append(sorted_list.pop(0))\n        if sorted_list:\n            strange_sorted_list.append(sorted_list.pop())\n    return strange_sorted_list", "prompt_tokens": 1025, "completion_tokens": 531, "duration": 17.368942737579346}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 929, "completion_tokens": 585, "duration": 31.20064377784729}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1095, "completion_tokens": 358, "duration": 10.297077655792236}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1247, "completion_tokens": 763, "duration": 29.192060947418213}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1001, "completion_tokens": 437, "duration": 15.909947395324707}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 969, "completion_tokens": 598, "duration": 20.410698413848877}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    power = math.log(x, n)\n    return power.is_integer()", "prompt_tokens": 965, "completion_tokens": 436, "duration": 14.292715311050415}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a", "prompt_tokens": 857, "completion_tokens": 367, "duration": 12.054698705673218}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1346, "completion_tokens": 492, "duration": 15.772709846496582}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 923, "completion_tokens": 392, "duration": 11.27395510673523}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 919, "completion_tokens": 429, "duration": 18.741361141204834}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to letter grades based on specific criteria.\"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1255, "completion_tokens": 678, "duration": 28.005926370620728}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 829, "completion_tokens": 431, "duration": 12.330455541610718}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 875, "completion_tokens": 550, "duration": 15.622394323348999}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Sum of digits\n    sum_digits = sum(int(digit) for digit in str(N))\n    # Convert sum to binary\n    binary_representation = bin(sum_digits)[2:]\n    return binary_representation", "prompt_tokens": 833, "completion_tokens": 331, "duration": 11.35543417930603}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 718, "completion_tokens": 343, "duration": 10.617293357849121}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 917, "completion_tokens": 380, "duration": 11.371557235717773}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1129, "completion_tokens": 374, "duration": 11.549734830856323}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    return sorted(array, reverse=sum_first_last % 2 == 0)", "prompt_tokens": 1106, "completion_tokens": 634, "duration": 24.31957459449768}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s)", "prompt_tokens": 834, "completion_tokens": 348, "duration": 13.393259763717651}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]", "prompt_tokens": 853, "completion_tokens": 382, "duration": 13.034477233886719}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n    \"\"\"\n    # Splitting the string into sentences using '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Counting sentences that start with 'I'\n    count = sum(sentence.startswith('I') for sentence in sentences)\n    return count", "prompt_tokens": 852, "completion_tokens": 425, "duration": 12.961554765701294}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 941, "completion_tokens": 468, "duration": 14.046779155731201}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            # Find the position of the vowel in the alphabet and add 2\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case of the new character based on the original character's case\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            # Swap case for non-vowel characters\n            encoded_message += char.lower() if char.isupper() else char.upper()\n    return encoded_message", "prompt_tokens": 893, "completion_tokens": 515, "duration": 20.359270095825195}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1283, "completion_tokens": 543, "duration": 17.407387733459473}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 927, "completion_tokens": 349, "duration": 13.271423578262329}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 998, "completion_tokens": 484, "duration": 12.884166717529297}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 814, "completion_tokens": 338, "duration": 13.451372385025024}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 799, "completion_tokens": 466, "duration": 14.69777798652649}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 973, "completion_tokens": 401, "duration": 15.824922800064087}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    for _ in range(n):\n        stones.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones", "prompt_tokens": 964, "completion_tokens": 466, "duration": 14.874412536621094}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 812, "completion_tokens": 324, "duration": 9.502904653549194}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:  # If the range is invalid\n        return -1\n    if y % 2 == 0:  # If y is even, it is the largest even number in the range\n        return y\n    if (y - 1) >= x:  # If y is odd, check if the number just before y is within the range\n        return y - 1\n    return -1  # If none of the conditions are met, return -1", "prompt_tokens": 900, "completion_tokens": 604, "duration": 25.9315345287323}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    count = m - n + 1\n    avg = round(total_sum / count)\n    return bin(avg)", "prompt_tokens": 979, "completion_tokens": 452, "duration": 11.798407316207886}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 831, "completion_tokens": 375, "duration": 11.331058263778687}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    number_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [number_names[num] for num in filtered_sorted_reversed]", "prompt_tokens": 1209, "completion_tokens": 528, "duration": 16.999114751815796}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x+1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum_to_x(i))\n    return result_list", "prompt_tokens": 921, "completion_tokens": 479, "duration": 16.43558382987976}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1133, "completion_tokens": 505, "duration": 18.432318925857544}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 977, "completion_tokens": 474, "duration": 11.777989864349365}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr_sorted == arr[i:] + arr[:i]:\n            return True\n    return False", "prompt_tokens": 1265, "completion_tokens": 417, "duration": 17.799880027770996}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 984, "completion_tokens": 367, "duration": 12.05980396270752}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    if not test:\n        return {}\n    counts = Counter(test.replace(\" \", \"\"))\n    max_count = max(counts.values())\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 994, "completion_tokens": 447, "duration": 16.061222076416016}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1116, "completion_tokens": 526, "duration": 17.78624200820923}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 957, "completion_tokens": 386, "duration": 11.70408034324646}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 914, "completion_tokens": 493, "duration": 12.959983587265015}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_buckets = 0\n    for row in grid:\n        total_buckets += math.ceil(sum(row) / capacity)\n    return total_buckets", "prompt_tokens": 1701, "completion_tokens": 795, "duration": 18.491861581802368}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 949, "completion_tokens": 332, "duration": 10.79073715209961}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for char in word if char.lower() not in vowels and char.isalpha())\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 993, "completion_tokens": 393, "duration": 15.495605230331421}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and i != len(word) - 1 and i != 0:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 939, "completion_tokens": 426, "duration": 18.490623474121094}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return not stack\n\n    # Check both possible concatenations\n    if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1160, "completion_tokens": 630, "duration": 25.552237510681152}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1102, "completion_tokens": 385, "duration": 14.589179515838623}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 990, "completion_tokens": 529, "duration": 15.603582859039307}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 1021, "completion_tokens": 530, "duration": 15.322437763214111}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(x):\n        seq = [x]\n        while x > 1:\n            if x % 2 == 0:\n                x //= 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    collatz_seq = collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 1238, "completion_tokens": 604, "duration": 19.48250937461853}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the number of days in each month\n    days_in_month = [31, 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check the range of day\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n    \n    return True", "prompt_tokens": 1165, "completion_tokens": 606, "duration": 19.710345029830933}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 920, "completion_tokens": 395, "duration": 13.255856275558472}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1198, "completion_tokens": 444, "duration": 13.241302967071533}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1259, "completion_tokens": 570, "duration": 21.075278520584106}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 1178, "completion_tokens": 728, "duration": 25.5386004447937}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], k-1, i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while pq:\n        cost, steps, x, y, path = heappop(pq)\n        if steps == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny, steps-1) not in visited:\n                visited.add((nx, ny, steps-1))\n                heappush(pq, (cost, steps-1, nx, ny, path + [grid[nx][ny]]))", "prompt_tokens": 1985, "completion_tokens": 1106, "duration": 34.4878625869751}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n // 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        result.append(helper(i, memo))\n    return result", "prompt_tokens": 1266, "completion_tokens": 626, "duration": 32.083298206329346}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 780, "completion_tokens": 405, "duration": 19.240864515304565}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:  # If stack is empty after pop, it means there was a nested pair\n                return True\n    return False", "prompt_tokens": 923, "completion_tokens": 477, "duration": 17.44540500640869}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list, after rounding each element to the upper int.\"\"\"\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 925, "completion_tokens": 354, "duration": 12.835703372955322}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 883, "completion_tokens": 360, "duration": 14.694444417953491}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 938, "completion_tokens": 476, "duration": 17.371325254440308}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 844, "completion_tokens": 353, "duration": 16.447776556015015}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_val = convert_to_float(a)\n    b_val = convert_to_float(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 951, "completion_tokens": 456, "duration": 17.56714940071106}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    return (n - 8) % 4 == 0  # Subtract the smallest sum (8) and check if the remainder is divisible by 4", "prompt_tokens": 755, "completion_tokens": 376, "duration": 11.904527187347412}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 873, "completion_tokens": 461, "duration": 18.40754747390747}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 793, "completion_tokens": 378, "duration": 17.437814235687256}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1063, "completion_tokens": 509, "duration": 19.290592432022095}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1023, "completion_tokens": 451, "duration": 14.545851230621338}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 917, "completion_tokens": 414, "duration": 13.740162372589111}
{"task_id": "HumanEval/144", "generated_code": "import math\n\ndef simplify(x, n):\n    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    \n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n    \n    gcd = math.gcd(result_num, result_denom)\n    \n    simplified_num = result_num // gcd\n    simplified_denom = result_denom // gcd\n    \n    return simplified_denom == 1", "prompt_tokens": 1147, "completion_tokens": 638, "duration": 16.20047688484192}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 850, "completion_tokens": 350, "duration": 12.063453912734985}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        num_str = str(abs(num))  # Convert number to string and handle negative numbers\n        return num_str[0] in '13579' and num_str[-1] in '13579'\n    \n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))", "prompt_tokens": 834, "completion_tokens": 374, "duration": 15.877454042434692}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1361, "completion_tokens": 826, "duration": 24.66004776954651}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 1028, "completion_tokens": 410, "duration": 11.434618949890137}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 1099, "completion_tokens": 495, "duration": 19.005355834960938}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 914, "completion_tokens": 515, "duration": 18.134203910827637}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 885, "completion_tokens": 340, "duration": 14.06991696357727}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1091, "completion_tokens": 361, "duration": 9.142964601516724}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1207, "completion_tokens": 426, "duration": 14.234845399856567}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 999, "completion_tokens": 457, "duration": 14.662429571151733}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 797, "completion_tokens": 437, "duration": 11.619075059890747}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 933, "completion_tokens": 631, "duration": 25.106255769729614}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1047, "completion_tokens": 571, "duration": 14.435171842575073}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result):\n            max_unique_chars = unique_chars\n            result = word\n    return result", "prompt_tokens": 927, "completion_tokens": 455, "duration": 16.387892246246338}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1106, "completion_tokens": 289, "duration": 9.728385925292969}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1065, "completion_tokens": 458, "duration": 19.564005136489868}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 843, "completion_tokens": 374, "duration": 16.956297874450684}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 789, "completion_tokens": 375, "duration": 15.290510416030884}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 875, "completion_tokens": 433, "duration": 18.46896266937256}
