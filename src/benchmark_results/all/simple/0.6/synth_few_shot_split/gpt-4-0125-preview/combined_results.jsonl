{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 828, "completion_tokens": 342, "duration": 11.738330602645874}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    open_count = 0\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:  # Group is balanced\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 931, "completion_tokens": 524, "duration": 18.514381647109985}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 742, "completion_tokens": 302, "duration": 8.795564651489258}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 972, "completion_tokens": 482, "duration": 16.149096488952637}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 980, "completion_tokens": 490, "duration": 16.755462408065796}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 878, "completion_tokens": 473, "duration": 12.764004707336426}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 911, "completion_tokens": 487, "duration": 16.517403841018677}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 792, "completion_tokens": 357, "duration": 11.256669998168945}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 777, "completion_tokens": 330, "duration": 10.459461688995361}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    return result", "prompt_tokens": 1103, "completion_tokens": 690, "duration": 17.31095552444458}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 1008, "completion_tokens": 478, "duration": 16.028092622756958}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        xor_result = '1' if char1 != char2 else '0'\n        result += xor_result\n    return result", "prompt_tokens": 782, "completion_tokens": 387, "duration": 14.083664178848267}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 807, "completion_tokens": 337, "duration": 11.736839294433594}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 802, "completion_tokens": 396, "duration": 15.072675704956055}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 757, "completion_tokens": 366, "duration": 16.31945824623108}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 723, "completion_tokens": 313, "duration": 10.111587285995483}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 785, "completion_tokens": 363, "duration": 8.717796802520752}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 951, "completion_tokens": 385, "duration": 17.131611824035645}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 857, "completion_tokens": 440, "duration": 11.510159015655518}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 847, "completion_tokens": 437, "duration": 12.772823572158813}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    \n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 1027, "completion_tokens": 552, "duration": 22.0698721408844}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 943, "completion_tokens": 450, "duration": 11.580421924591064}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 799, "completion_tokens": 363, "duration": 13.338967561721802}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 738, "completion_tokens": 365, "duration": 12.377971410751343}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 779, "completion_tokens": 413, "duration": 9.872220277786255}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # while i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors", "prompt_tokens": 926, "completion_tokens": 601, "duration": 18.667764902114868}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 749, "completion_tokens": 343, "duration": 12.50911569595337}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 704, "completion_tokens": 338, "duration": 11.601709127426147}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 748, "completion_tokens": 390, "duration": 16.385651350021362}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 780, "completion_tokens": 399, "duration": 11.112329244613647}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 788, "completion_tokens": 282, "duration": 11.439756393432617}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 917, "completion_tokens": 470, "duration": 18.34010624885559}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n    \n    def newton_method(xs, guess=0.0, max_iter=1000, tol=1e-10):\n        for _ in range(max_iter):\n            f_val = poly(xs, guess)\n            f_prime_val = poly(derivative(xs), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess = guess - f_val / f_prime_val\n        return guess\n    \n    return newton_method(xs)", "prompt_tokens": 1133, "completion_tokens": 589, "duration": 27.080191612243652}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    thirds = [l[i] for i in range(len(l)) if i % 3 == 0]\n    thirds.sort()\n    \n    # Place sorted elements back at their original positions\n    index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = thirds[index]\n            index += 1\n    return l", "prompt_tokens": 1057, "completion_tokens": 622, "duration": 16.90177011489868}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 722, "completion_tokens": 298, "duration": 11.798486471176147}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 700, "completion_tokens": 247, "duration": 6.4781153202056885}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 829, "completion_tokens": 426, "duration": 10.841925859451294}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indexed_elements = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements.pop(0)\n    return l", "prompt_tokens": 903, "completion_tokens": 421, "duration": 11.098297595977783}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    returns decoded string by reversing the cycling of groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 913, "completion_tokens": 427, "duration": 18.49500346183777}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 2  # Starting from 2 because the 1st Fibonacci number (1) is not considered prime\n    while True:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_index += 1", "prompt_tokens": 870, "completion_tokens": 551, "duration": 18.10069179534912}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1202, "completion_tokens": 702, "duration": 23.062569856643677}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on an infinitely long straight road,\n    this function calculates the total number of collisions that occur.\n    \"\"\"\n    # Since all cars move at the same speed and there are equal numbers of cars moving in opposite directions,\n    # each car moving left to right will collide with each car moving right to left.\n    # Therefore, the total number of collisions is simply the square of the number of cars in one direction.\n    return n * n", "prompt_tokens": 1025, "completion_tokens": 539, "duration": 16.305571794509888}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 764, "completion_tokens": 266, "duration": 8.86041522026062}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1110, "completion_tokens": 533, "duration": 16.442208766937256}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 777, "completion_tokens": 349, "duration": 13.998230218887329}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 735, "completion_tokens": 360, "duration": 13.165628433227539}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0, 0, 2, 0] + [0] * (n - 3)\n    for i in range(4, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]", "prompt_tokens": 1164, "completion_tokens": 651, "duration": 21.542776107788086}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 789, "completion_tokens": 395, "duration": 11.763374090194702}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 800, "completion_tokens": 376, "duration": 11.707557201385498}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 873, "completion_tokens": 402, "duration": 11.564805030822754}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 831, "completion_tokens": 408, "duration": 10.413379192352295}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 872, "completion_tokens": 359, "duration": 11.18906283378601}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 791, "completion_tokens": 366, "duration": 9.426058292388916}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 629, "completion_tokens": 241, "duration": 6.293833255767822}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 890, "completion_tokens": 336, "duration": 9.162338256835938}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 802, "completion_tokens": 433, "duration": 10.501015901565552}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 928, "completion_tokens": 508, "duration": 14.605282306671143}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 803, "completion_tokens": 385, "duration": 12.62326192855835}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 842, "completion_tokens": 352, "duration": 12.216545343399048}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 874, "completion_tokens": 493, "duration": 16.820289134979248}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 885, "completion_tokens": 421, "duration": 14.690045833587646}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1111, "completion_tokens": 690, "duration": 25.453962564468384}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 835, "completion_tokens": 342, "duration": 13.762783288955688}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 1002, "completion_tokens": 482, "duration": 14.302664995193481}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 897, "completion_tokens": 406, "duration": 12.068602561950684}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 785, "completion_tokens": 372, "duration": 13.251971244812012}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 15.774950742721558}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1048, "completion_tokens": 358, "duration": 12.934429407119751}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1284, "completion_tokens": 435, "duration": 15.203699827194214}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    max_val = -1\n    for key, value in counts.items():\n        if key <= value and key > max_val:\n            max_val = key\n    return max_val", "prompt_tokens": 948, "completion_tokens": 385, "duration": 13.358366966247559}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 924, "completion_tokens": 415, "duration": 11.207665920257568}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 825, "completion_tokens": 476, "duration": 16.061264276504517}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1038, "completion_tokens": 301, "duration": 11.135007381439209}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1336, "completion_tokens": 930, "duration": 27.700889825820923}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1018, "completion_tokens": 454, "duration": 12.987985610961914}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 952, "completion_tokens": 609, "duration": 21.791120052337646}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 908, "completion_tokens": 376, "duration": 11.19752311706543}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 818, "completion_tokens": 318, "duration": 10.304097414016724}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1236, "completion_tokens": 382, "duration": 11.561817646026611}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return 'db' + binary + 'db'", "prompt_tokens": 984, "completion_tokens": 451, "duration": 14.840269327163696}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 966, "completion_tokens": 476, "duration": 15.235052347183228}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1261, "completion_tokens": 668, "duration": 25.944640398025513}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 831, "completion_tokens": 433, "duration": 15.80341649055481}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10**(n-1)) - 9**(n-1)", "prompt_tokens": 777, "completion_tokens": 429, "duration": 12.740876913070679}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 929, "completion_tokens": 414, "duration": 14.857218742370605}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 697, "completion_tokens": 320, "duration": 12.032191038131714}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 900, "completion_tokens": 481, "duration": 15.541497945785522}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1167, "completion_tokens": 412, "duration": 14.351776361465454}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1026, "completion_tokens": 374, "duration": 15.505776643753052}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        encrypted += chr((ord(char) - 97 + (2*2)) % 26 + 97)\n    return encrypted", "prompt_tokens": 865, "completion_tokens": 386, "duration": 10.766019821166992}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    sorted_lst = sorted(unique_lst)\n    return sorted_lst[1]", "prompt_tokens": 901, "completion_tokens": 395, "duration": 11.360456943511963}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences using the specified delimiters\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Count the sentences that start with 'I'\n    count = sum(sentence.startswith('I') for sentence in sentences)\n    return count", "prompt_tokens": 803, "completion_tokens": 410, "duration": 15.430132389068604}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 883, "completion_tokens": 363, "duration": 12.62716794013977}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(((ord(char.lower()) - 97 + 2) % 26) + 97).upper() if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            return char\n    \n    return ''.join(replace_vowel(swap_case(char)) for char in message)", "prompt_tokens": 822, "completion_tokens": 432, "duration": 15.972311973571777}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1311, "completion_tokens": 545, "duration": 22.782804012298584}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 901, "completion_tokens": 323, "duration": 12.17684268951416}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 1006, "completion_tokens": 492, "duration": 13.97974157333374}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 811, "completion_tokens": 339, "duration": 15.268921136856079}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 846, "completion_tokens": 472, "duration": 14.717519521713257}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 979, "completion_tokens": 407, "duration": 11.073805809020996}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for _ in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 845, "completion_tokens": 449, "duration": 34.07316994667053}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.split(r',\\s*|\\s+', s)", "prompt_tokens": 818, "completion_tokens": 308, "duration": 10.35242223739624}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 868, "completion_tokens": 500, "duration": 21.533291578292847}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 962, "completion_tokens": 420, "duration": 13.075433492660522}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 852, "completion_tokens": 396, "duration": 15.098383903503418}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # Filter, sort, and reverse\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Mapping of numbers to their names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Replace each number with its corresponding name\n    return [num_to_name[num] for num in filtered_sorted_reversed]", "prompt_tokens": 1175, "completion_tokens": 531, "duration": 20.46310329437256}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(i):\n        result = 1\n        for j in range(1, i+1):\n            result *= j\n        return result\n    \n    def sum_to_i(i):\n        return sum(range(1, i+1))\n    \n    result_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result_list.append(sum_to_i(i))\n        else:\n            result_list.append(factorial(i))\n    return result_list", "prompt_tokens": 871, "completion_tokens": 429, "duration": 14.166014432907104}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1103, "completion_tokens": 475, "duration": 20.71807336807251}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 895, "completion_tokens": 406, "duration": 15.479401111602783}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr or sorted(arr) == arr:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr_sorted == arr[i:] + arr[:i]:\n            return True\n    return False", "prompt_tokens": 1332, "completion_tokens": 490, "duration": 17.335811138153076}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1008, "completion_tokens": 575, "duration": 20.812319040298462}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 1062, "completion_tokens": 533, "duration": 22.672536373138428}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1160, "completion_tokens": 570, "duration": 17.36424446105957}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1048, "completion_tokens": 477, "duration": 13.231844902038574}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 1010, "completion_tokens": 589, "duration": 21.06756591796875}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n    \"\"\"\n    total_lowerings = 0\n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            total_lowerings += -(-water_units // capacity)  # Ceiling division\n    return total_lowerings", "prompt_tokens": 1416, "completion_tokens": 617, "duration": 22.362701654434204}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 995, "completion_tokens": 537, "duration": 18.53091073036194}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n    \n    def count_consonants(word):\n        return sum(is_consonant(char) for char in word)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1005, "completion_tokens": 423, "duration": 17.199530363082886}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 1, -1):\n        if word[i-1] not in vowels and word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 935, "completion_tokens": 406, "duration": 15.589530229568481}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Count open and close parentheses in both strings\n    open_close_counts = [(s.count('('), s.count(')')) for s in lst]\n    # Check if concatenating in the original order makes a good string\n    if open_close_counts[0][0] >= open_close_counts[0][1] and open_close_counts[1][1] >= open_close_counts[1][0] and open_close_counts[0][0] + open_close_counts[1][0] == open_close_counts[0][1] + open_close_counts[1][1]:\n        return 'Yes'\n    # Check if swapping the strings makes a good string\n    if open_close_counts[1][0] >= open_close_counts[1][1] and open_close_counts[0][1] >= open_close_counts[0][0] and open_close_counts[0][0] + open_close_counts[1][0] == open_close_counts[0][1] + open_close_counts[1][1]:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 1034, "completion_tokens": 778, "duration": 28.416850566864014}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1056, "completion_tokens": 339, "duration": 11.095591306686401}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1003, "completion_tokens": 542, "duration": 16.533892393112183}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < abs(num) < 100)", "prompt_tokens": 1030, "completion_tokens": 502, "duration": 12.61875057220459}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence and is odd\n    return sorted(odd_numbers)", "prompt_tokens": 1299, "completion_tokens": 661, "duration": 16.690386533737183}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 1169, "completion_tokens": 533, "duration": 20.861061573028564}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 912, "completion_tokens": 393, "duration": 12.218661308288574}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1195, "completion_tokens": 442, "duration": 13.826164722442627}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1254, "completion_tokens": 565, "duration": 17.333953380584717}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 1031, "completion_tokens": 564, "duration": 16.112194538116455}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, k-1, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while pq:\n        cost, x, y, steps, path = heappop(pq)\n        if (x, y, steps) in visited:\n            continue\n        visited.add((x, y, steps))\n        if steps == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                heappush(pq, (cost, nx, ny, steps-1, path + [grid[nx][ny]]))\n\n    return []", "prompt_tokens": 1900, "completion_tokens": 1024, "duration": 30.23546528816223}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            memo[n] = 1 + n // 2\n        else:\n            memo[n] = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        return memo[n]\n\n    memo = {}\n    for i in range(1, n + 2):\n        helper(i, memo)\n    \n    return [memo[i] for i in range(1, n + 2)]", "prompt_tokens": 1154, "completion_tokens": 521, "duration": 16.16675591468811}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 783, "completion_tokens": 469, "duration": 15.756666898727417}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 1154, "completion_tokens": 641, "duration": 23.133861303329468}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 904, "completion_tokens": 312, "duration": 11.48575234413147}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) > 1 and txt[-2] == \" \":\n        return True\n    return False", "prompt_tokens": 866, "completion_tokens": 343, "duration": 12.886965036392212}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 874, "completion_tokens": 412, "duration": 10.225648880004883}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 871, "completion_tokens": 380, "duration": 11.466631412506104}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_val = convert_to_float(a)\n    b_val = convert_to_float(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 926, "completion_tokens": 431, "duration": 18.18807864189148}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False", "prompt_tokens": 914, "completion_tokens": 496, "duration": 15.33252763748169}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 875, "completion_tokens": 448, "duration": 14.821632862091064}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                continue\n        else:\n            if consecutive_spaces > 2:\n                result.append(\"-\")\n            elif consecutive_spaces > 0:\n                result.extend([\"_\"] * min(2, consecutive_spaces))\n            consecutive_spaces = 0\n            result.append(char)\n    if consecutive_spaces > 2:\n        result.append(\"-\")\n    elif consecutive_spaces > 0:\n        result.extend([\"_\"] * min(2, consecutive_spaces))\n    return ''.join(result)", "prompt_tokens": 824, "completion_tokens": 491, "duration": 16.95978546142578}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for more than three digits in the name\n    digits_count = sum(c.isdigit() for c in name)\n    if digits_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1058, "completion_tokens": 493, "duration": 19.351250171661377}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1100, "completion_tokens": 532, "duration": 15.886449813842773}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1027, "completion_tokens": 524, "duration": 17.735257625579834}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    return result_num % result_denom == 0", "prompt_tokens": 1091, "completion_tokens": 551, "duration": 18.186716079711914}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 857, "completion_tokens": 372, "duration": 13.615173578262329}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_last_odd(n):\n        s = str(abs(n))\n        return int(s[0]) % 2 != 0 and int(s[-1]) % 2 != 0\n\n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))", "prompt_tokens": 910, "completion_tokens": 438, "duration": 13.58932900428772}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of elements modulo 3\n    mod_count = [0, 0, 0]\n    for num in a:\n        mod_count[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Using the combination formula for elements that sum up to a multiple of 3\n    count = 0\n    # Case 1: All elements are of the same remainder (0, 0, 0) or (1, 1, 1) or (2, 2, 2)\n    for i in range(3):\n        count += mod_count[i] * (mod_count[i] - 1) * (mod_count[i] - 2) // 6\n    # Case 2: Each element has a different remainder (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count", "prompt_tokens": 1229, "completion_tokens": 941, "duration": 37.22365927696228}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 1039, "completion_tokens": 433, "duration": 12.421162843704224}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    \"\"\"Sorts the list by removing strings with odd lengths, then sorts by length and alphabetically if lengths are equal.\"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 1060, "completion_tokens": 481, "duration": 15.20937728881836}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 868, "completion_tokens": 469, "duration": 11.944233417510986}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 912, "completion_tokens": 367, "duration": 16.368622303009033}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1079, "completion_tokens": 349, "duration": 11.123785734176636}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1195, "completion_tokens": 416, "duration": 12.058134078979492}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    return b in (a + a)", "prompt_tokens": 905, "completion_tokens": 376, "duration": 12.660202264785767}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 767, "completion_tokens": 403, "duration": 14.704312086105347}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 925, "completion_tokens": 558, "duration": 18.504154920578003}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1062, "completion_tokens": 586, "duration": 21.19789409637451}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 936, "completion_tokens": 460, "duration": 17.38107657432556}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate the total number of eaten carrots and the remaining carrots after the meals.\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1130, "completion_tokens": 333, "duration": 12.987923622131348}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1090, "completion_tokens": 426, "duration": 11.469899892807007}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 822, "completion_tokens": 353, "duration": 9.421873331069946}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 779, "completion_tokens": 356, "duration": 10.265704154968262}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 903, "completion_tokens": 468, "duration": 13.992809534072876}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 919, "completion_tokens": 428, "duration": 17.27160382270813}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n    return result", "prompt_tokens": 954, "completion_tokens": 523, "duration": 18.566580533981323}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 736, "completion_tokens": 282, "duration": 10.77654242515564}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 914, "completion_tokens": 424, "duration": 15.176806688308716}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 902, "completion_tokens": 412, "duration": 11.856762170791626}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 804, "completion_tokens": 383, "duration": 10.527690172195435}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1013, "completion_tokens": 598, "duration": 16.11967706680298}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 787, "completion_tokens": 400, "duration": 15.384928226470947}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 866, "completion_tokens": 405, "duration": 14.053288459777832}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 1076, "completion_tokens": 658, "duration": 19.025266408920288}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 921, "completion_tokens": 397, "duration": 15.353508710861206}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    result = []\n    for i in range(max_len):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(result)", "prompt_tokens": 766, "completion_tokens": 387, "duration": 14.76858925819397}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 867, "completion_tokens": 419, "duration": 12.293802976608276}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 845, "completion_tokens": 439, "duration": 16.184262990951538}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 751, "completion_tokens": 365, "duration": 13.240902423858643}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 778, "completion_tokens": 368, "duration": 13.917810916900635}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 727, "completion_tokens": 305, "duration": 11.612708330154419}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 959, "completion_tokens": 393, "duration": 14.794588565826416}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "prompt_tokens": 871, "completion_tokens": 469, "duration": 18.23787522315979}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 814, "completion_tokens": 409, "duration": 14.167629957199097}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 1025, "completion_tokens": 548, "duration": 22.260610342025757}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 905, "completion_tokens": 458, "duration": 15.185301542282104}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 790, "completion_tokens": 406, "duration": 12.455318927764893}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 750, "completion_tokens": 377, "duration": 14.868567705154419}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 771, "completion_tokens": 440, "duration": 13.906692743301392}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 989, "completion_tokens": 555, "duration": 22.409579515457153}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 866, "completion_tokens": 463, "duration": 15.60403561592102}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 722, "completion_tokens": 356, "duration": 10.76829218864441}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 743, "completion_tokens": 349, "duration": 12.618738174438477}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 779, "completion_tokens": 398, "duration": 12.898455619812012}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 768, "completion_tokens": 262, "duration": 10.399322986602783}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 940, "completion_tokens": 493, "duration": 14.76771879196167}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n    \n    def newton_method(xs, guess=0.0, max_iter=1000, tol=1e-10):\n        for _ in range(max_iter):\n            f_val = poly(xs, guess)\n            f_prime_val = poly(derivative(xs), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess = guess - f_val / f_prime_val\n        return guess\n    \n    return newton_method(xs)", "prompt_tokens": 1200, "completion_tokens": 747, "duration": 28.740410804748535}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by three.\"\"\"\n    # Extract elements at indices divisible by three and sort them\n    sorted_thirds = sorted(l[::3])\n    # Iterate over the list and replace elements at indices divisible by three with sorted elements\n    for i in range(0, len(l), 3):\n        l[i] = sorted_thirds.pop(0)\n    return l", "prompt_tokens": 961, "completion_tokens": 449, "duration": 14.543556690216064}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 728, "completion_tokens": 294, "duration": 10.111303329467773}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 734, "completion_tokens": 281, "duration": 12.629391431808472}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 800, "completion_tokens": 397, "duration": 13.111432075500488}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indexed_elements = [l[i] for i in range(0, len(l), 2)]\n    even_indexed_elements.sort()\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indexed_elements[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 979, "completion_tokens": 530, "duration": 13.999521970748901}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 952, "completion_tokens": 468, "duration": 18.301687955856323}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int):\n    count, num = 0, 0\n    while True:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1", "prompt_tokens": 917, "completion_tokens": 584, "duration": 20.964481592178345}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1202, "completion_tokens": 702, "duration": 21.051451206207275}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on an infinitely long straight road,\n    this function calculates the total number of collisions that will occur.\n    \"\"\"\n    # Since all cars move at the same speed and are infinitely sturdy,\n    # each car moving left to right will collide with each car moving right to left.\n    # Therefore, the total number of collisions is simply n * n.\n    return n * n", "prompt_tokens": 1070, "completion_tokens": 571, "duration": 22.714422702789307}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 774, "completion_tokens": 276, "duration": 8.443881034851074}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1210, "completion_tokens": 633, "duration": 24.395591020584106}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 752, "completion_tokens": 324, "duration": 11.298211336135864}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 807, "completion_tokens": 432, "duration": 13.751607418060303}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    dp = [0] * (n+1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]", "prompt_tokens": 1104, "completion_tokens": 606, "duration": 23.209679126739502}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 836, "completion_tokens": 442, "duration": 21.07107710838318}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 800, "completion_tokens": 376, "duration": 14.048489809036255}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 900, "completion_tokens": 429, "duration": 14.743392705917358}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 819, "completion_tokens": 399, "duration": 10.803166151046753}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 875, "completion_tokens": 383, "duration": 19.102054834365845}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "prompt_tokens": 745, "completion_tokens": 308, "duration": 8.8435537815094}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 651, "completion_tokens": 263, "duration": 10.54472804069519}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_freq_s0 = {}\n    char_freq_s1 = {}\n    \n    for char in s0:\n        char_freq_s0[char] = char_freq_s0.get(char, 0) + 1\n    \n    for char in s1:\n        char_freq_s1[char] = char_freq_s1.get(char, 0) + 1\n    \n    return set(char_freq_s0.keys()) == set(char_freq_s1.keys())", "prompt_tokens": 961, "completion_tokens": 486, "duration": 20.293926000595093}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 800, "completion_tokens": 431, "duration": 11.356574058532715}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 967, "completion_tokens": 540, "duration": 21.203324556350708}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 767, "completion_tokens": 349, "duration": 13.981435537338257}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 842, "completion_tokens": 338, "duration": 10.135771989822388}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 837, "completion_tokens": 456, "duration": 13.978730201721191}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 870, "completion_tokens": 423, "duration": 11.687830924987793}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "prompt_tokens": 998, "completion_tokens": 580, "duration": 16.661375284194946}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 860, "completion_tokens": 367, "duration": 13.028230667114258}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int, memo={}):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 944, "completion_tokens": 530, "duration": 18.80015730857849}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 864, "completion_tokens": 360, "duration": 14.600423812866211}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 774, "completion_tokens": 356, "duration": 10.914524793624878}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 807, "completion_tokens": 302, "duration": 11.103729009628296}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1045, "completion_tokens": 355, "duration": 11.66386079788208}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1362, "completion_tokens": 513, "duration": 17.550806522369385}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    max_val = -1\n    for key, value in frequency.items():\n        if key <= value:\n            max_val = max(max_val, key)\n    return max_val", "prompt_tokens": 941, "completion_tokens": 386, "duration": 12.591340780258179}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 837, "completion_tokens": 335, "duration": 12.043768644332886}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)", "prompt_tokens": 954, "completion_tokens": 644, "duration": 21.262288093566895}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1172, "completion_tokens": 435, "duration": 16.68842124938965}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1225, "completion_tokens": 673, "duration": 25.30703902244568}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1019, "completion_tokens": 455, "duration": 16.664215803146362}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_factors = []\n    for i in range(2, a + 1):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    return len(prime_factors) == 3", "prompt_tokens": 951, "completion_tokens": 618, "duration": 20.09409523010254}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 934, "completion_tokens": 402, "duration": 15.952104806900024}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a", "prompt_tokens": 901, "completion_tokens": 510, "duration": 20.001216888427734}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1287, "completion_tokens": 433, "duration": 12.23660945892334}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 897, "completion_tokens": 366, "duration": 15.178430557250977}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 936, "completion_tokens": 465, "duration": 14.532966136932373}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1161, "completion_tokens": 568, "duration": 23.840811491012573}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 935, "completion_tokens": 538, "duration": 19.724599838256836}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 852, "completion_tokens": 523, "duration": 13.413409948348999}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 941, "completion_tokens": 419, "duration": 17.72739863395691}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 660, "completion_tokens": 285, "duration": 10.196146011352539}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 887, "completion_tokens": 350, "duration": 13.297788143157959}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1128, "completion_tokens": 373, "duration": 11.021179437637329}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array\n    sum_first_last = array[0] + array[-1]\n    return sorted(array, reverse=sum_first_last % 2 == 0)", "prompt_tokens": 1224, "completion_tokens": 757, "duration": 28.04452157020569}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 4) % 256) for c in s)", "prompt_tokens": 826, "completion_tokens": 331, "duration": 11.441725730895996}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) >= 2:\n        return unique_sorted_lst[1]\n    return None", "prompt_tokens": 900, "completion_tokens": 389, "duration": 11.770556449890137}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    count = 0\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    return count", "prompt_tokens": 814, "completion_tokens": 388, "duration": 13.473627090454102}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 922, "completion_tokens": 402, "duration": 12.172199010848999}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case of all letters and replacing vowels with the letter 2 places ahead in the alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'w',\n                         'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 935, "completion_tokens": 578, "duration": 19.09671139717102}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))", "prompt_tokens": 1371, "completion_tokens": 604, "duration": 19.150439739227295}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 904, "completion_tokens": 326, "duration": 11.05775237083435}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 1046, "completion_tokens": 563, "duration": 20.455682039260864}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 799, "completion_tokens": 323, "duration": 12.270274639129639}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 827, "completion_tokens": 421, "duration": 14.730391502380371}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    value_float = float(value)\n    floor_value = math.floor(value_float)\n    ceil_value = math.ceil(value_float)\n    \n    if value_float - floor_value < ceil_value - value_float:\n        return floor_value\n    elif ceil_value - value_float < value_float - floor_value:\n        return ceil_value\n    else:  # Equidistant\n        if value_float > 0:\n            return ceil_value\n        else:\n            return floor_value", "prompt_tokens": 882, "completion_tokens": 418, "duration": 14.030646085739136}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        if i == 0:\n            pile.append(n)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile", "prompt_tokens": 881, "completion_tokens": 484, "duration": 18.650919198989868}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 814, "completion_tokens": 326, "duration": 9.923852443695068}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:  # If the range is invalid, return -1\n        return -1\n    if y % 2 == 0:  # If y is even, it's the largest even number in the range\n        return y\n    if (y - 1) >= x:  # If y is odd, check if y-1 (which is even) is in the range\n        return y - 1\n    return -1  # If none of the above conditions are met, there's no even number in the range", "prompt_tokens": 909, "completion_tokens": 626, "duration": 22.12739372253418}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 992, "completion_tokens": 455, "duration": 16.909947633743286}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 834, "completion_tokens": 378, "duration": 12.442665100097656}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1188, "completion_tokens": 437, "duration": 16.4251127243042}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 853, "completion_tokens": 422, "duration": 16.808264017105103}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1073, "completion_tokens": 445, "duration": 14.765591621398926}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(map(int, str(n)[2:]))\n        else:\n            return sum(map(int, str(n)))\n    \n    return sum(1 for x in arr if sum_of_digits(x) > 0)", "prompt_tokens": 1335, "completion_tokens": 857, "duration": 25.4048433303833}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr or sorted(arr) == arr:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr == arr_sorted:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1256, "completion_tokens": 421, "duration": 12.239824771881104}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 970, "completion_tokens": 371, "duration": 11.689877271652222}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    most_common_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return most_common_letters", "prompt_tokens": 1020, "completion_tokens": 500, "duration": 14.572452306747437}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1303, "completion_tokens": 713, "duration": 15.977436780929565}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        count = count_odd_digits(s)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 965, "completion_tokens": 404, "duration": 13.787511825561523}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 944, "completion_tokens": 523, "duration": 16.96635150909424}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1485, "completion_tokens": 567, "duration": 17.058623790740967}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 978, "completion_tokens": 520, "duration": 17.843671560287476}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 1002, "completion_tokens": 572, "duration": 20.171563148498535}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and not word[i+1] in vowels and not word[i-1] in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 920, "completion_tokens": 391, "duration": 11.99345588684082}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Count the balance of parentheses in both strings\n    balance1 = balance2 = 0\n    for char in lst[0]:\n        if char == '(':\n            balance1 += 1\n        else:\n            balance1 -= 1\n            if balance1 < 0:  # Early exit if first string becomes invalid\n                break\n    \n    for char in lst[1]:\n        if char == '(':\n            balance2 += 1\n        else:\n            balance2 -= 1\n            if balance2 < 0 and balance1 < 0:  # Early exit if both strings are invalid\n                return 'No'\n    \n    # If total balance is 0, it means we can potentially form a valid string\n    if balance1 + balance2 == 0:\n        # If first string has negative balance, it must come after the second string\n        if balance1 < 0:\n            return 'No'\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1148, "completion_tokens": 880, "duration": 35.7312548160553}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1096, "completion_tokens": 379, "duration": 13.539121150970459}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 891, "completion_tokens": 430, "duration": 12.962157249450684}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 0 < arr[i] < 100 or -100 < arr[i] < 0:\n            sum += arr[i]\n    return sum", "prompt_tokens": 1026, "completion_tokens": 560, "duration": 13.634010314941406}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 1288, "completion_tokens": 639, "duration": 16.269206047058105}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are integers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1156, "completion_tokens": 583, "duration": 21.473472118377686}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 892, "completion_tokens": 373, "duration": 17.893108129501343}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1162, "completion_tokens": 432, "duration": 13.50208592414856}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 1358, "completion_tokens": 673, "duration": 16.548587560653687}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            magnitude_sum += num\n        elif num < 0:\n            magnitude_sum += -num\n            sign_product *= -1\n    return sign_product * magnitude_sum", "prompt_tokens": 988, "completion_tokens": 520, "duration": 15.618604183197021}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    dp = [[[float('inf')] * (k + 1) for _ in range(N)] for _ in range(N)]\n    pq = []\n\n    for value, (x, y) in value_to_pos.items():\n        dp[x][y][1] = value\n        heappush(pq, (value, x, y, 1))\n\n    while pq:\n        cost, x, y, steps = heappop(pq)\n        if steps == k:\n            path = []\n            while steps > 0:\n                path.append(cost)\n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < N and 0 <= ny < N and dp[nx][ny][steps - 1] < cost:\n                        cost -= grid[x][y]\n                        x, y = nx, ny\n                        break\n                steps -= 1\n            return path[::-1]\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_cost = cost + grid[nx][ny]\n                if dp[nx][ny][steps + 1] > new_cost:\n                    dp[nx][ny][steps + 1] = new_cost\n                    heappush(pq, (new_cost, nx, ny, steps + 1))", "prompt_tokens": 1834, "completion_tokens": 1121, "duration": 35.231632232666016}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            memo[n] = 1 + n // 2\n        else:\n            memo[n] = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        return memo[n]\n\n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        result.append(helper(i, memo))\n    return result", "prompt_tokens": 1122, "completion_tokens": 480, "duration": 14.626297235488892}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 771, "completion_tokens": 457, "duration": 15.30068039894104}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:\n                return True\n            stack.pop()\n    return False", "prompt_tokens": 1042, "completion_tokens": 531, "duration": 14.331883430480957}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 907, "completion_tokens": 314, "duration": 9.07784628868103}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' '", "prompt_tokens": 881, "completion_tokens": 355, "duration": 12.404277086257935}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 805, "completion_tokens": 343, "duration": 8.7432701587677}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 849, "completion_tokens": 358, "duration": 10.698516845703125}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_converted = convert_to_float(a)\n    b_converted = convert_to_float(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 922, "completion_tokens": 433, "duration": 13.474967956542969}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    return n % 2 == 0  # If n is even and greater than or equal to 8, it can be expressed as the sum of 4 even numbers", "prompt_tokens": 893, "completion_tokens": 517, "duration": 16.940953254699707}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 865, "completion_tokens": 438, "duration": 12.50421690940857}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = re.sub(r' {1,2}', '_', text)\n    return text", "prompt_tokens": 837, "completion_tokens": 434, "duration": 11.956828355789185}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Split the file name by dot\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts\n    \n    # Check if the name starts with a letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1056, "completion_tokens": 496, "duration": 17.32720398902893}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1024, "completion_tokens": 456, "duration": 14.842106103897095}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 990, "completion_tokens": 487, "duration": 16.203245878219604}
{"task_id": "HumanEval/144", "generated_code": "from math import gcd\n\ndef simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n\n    new_num = num1 * num2\n    new_denom = denom1 * denom2\n    common_divisor = gcd(new_num, new_denom)\n\n    simplified_num = new_num // common_divisor\n    simplified_denom = new_denom // common_divisor\n\n    return simplified_denom == 1", "prompt_tokens": 1110, "completion_tokens": 605, "duration": 20.404046058654785}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 867, "completion_tokens": 380, "duration": 15.175117492675781}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return int(n) % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if is_odd(str_num[0]) and is_odd(str_num[-1]):\n                count += 1\n    return count", "prompt_tokens": 821, "completion_tokens": 358, "duration": 13.853679895401001}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count of valid triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1169, "completion_tokens": 779, "duration": 30.786504983901978}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 1107, "completion_tokens": 501, "duration": 17.110963106155396}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by their length and alphabetically for those of the same length, excluding odd-length strings.\"\"\"\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1035, "completion_tokens": 422, "duration": 14.68131947517395}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 835, "completion_tokens": 450, "duration": 13.208156108856201}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 889, "completion_tokens": 344, "duration": 12.995498418807983}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1208, "completion_tokens": 478, "duration": 13.211711883544922}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1193, "completion_tokens": 412, "duration": 16.749018907546997}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    return b in (a + a)", "prompt_tokens": 899, "completion_tokens": 388, "duration": 9.543134927749634}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 794, "completion_tokens": 430, "duration": 13.529304504394531}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 943, "completion_tokens": 689, "duration": 27.12516689300537}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1029, "completion_tokens": 553, "duration": 15.518388509750366}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 936, "completion_tokens": 460, "duration": 11.107970476150513}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if total_eaten > remaining:\n        return [total_eaten, 0]\n    else:\n        return [total_eaten, remaining - total_eaten]", "prompt_tokens": 1304, "completion_tokens": 500, "duration": 15.960779666900635}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1112, "completion_tokens": 504, "duration": 17.841349840164185}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 871, "completion_tokens": 410, "duration": 12.553454160690308}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 775, "completion_tokens": 361, "duration": 11.419476509094238}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0 and all(int(digit) % 2 == 0 for digit in str(x))]", "prompt_tokens": 833, "completion_tokens": 380, "duration": 11.667551517486572}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 933, "completion_tokens": 445, "duration": 11.05760407447815}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string.replace(\" \", \"\"):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 1000, "completion_tokens": 565, "duration": 18.59049916267395}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 742, "completion_tokens": 302, "duration": 8.799793004989624}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 993, "completion_tokens": 503, "duration": 14.76944375038147}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 985, "completion_tokens": 495, "duration": 12.057474851608276}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 845, "completion_tokens": 422, "duration": 15.884676933288574}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s):\n        current_max = 0\n        max_count = 0\n        for char in s:\n            if char == '(':\n                current_max += 1\n                if current_max > max_count:\n                    max_count = current_max\n            elif char == ')':\n                if current_max > 0:\n                    current_max -= 1\n        return max_count\n    \n    return [max_depth(group) for group in paren_string.split()]", "prompt_tokens": 950, "completion_tokens": 539, "duration": 19.036032915115356}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 784, "completion_tokens": 349, "duration": 9.321454048156738}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 790, "completion_tokens": 343, "duration": 14.393226861953735}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 1013, "completion_tokens": 601, "duration": 21.40745186805725}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string", "prompt_tokens": 1118, "completion_tokens": 682, "duration": 28.821481466293335}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for x, y in zip(a, b):\n        result += str(int(x) ^ int(y))\n    return result", "prompt_tokens": 794, "completion_tokens": 385, "duration": 9.86619257926941}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 802, "completion_tokens": 395, "duration": 10.844374656677246}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 787, "completion_tokens": 381, "duration": 14.418122291564941}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 777, "completion_tokens": 432, "duration": 12.039428949356079}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 719, "completion_tokens": 309, "duration": 10.197755575180054}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 836, "completion_tokens": 414, "duration": 12.777451515197754}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 937, "completion_tokens": 366, "duration": 10.876091957092285}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 860, "completion_tokens": 443, "duration": 14.76725459098816}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 804, "completion_tokens": 399, "duration": 15.276170015335083}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 963, "completion_tokens": 443, "duration": 12.608439207077026}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 916, "completion_tokens": 469, "duration": 18.043577909469604}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 757, "completion_tokens": 308, "duration": 12.558338165283203}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 744, "completion_tokens": 371, "duration": 11.224999904632568}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 772, "completion_tokens": 406, "duration": 12.314997911453247}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 937, "completion_tokens": 503, "duration": 14.783287286758423}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 865, "completion_tokens": 459, "duration": 13.617948293685913}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 709, "completion_tokens": 343, "duration": 11.252987623214722}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 777, "completion_tokens": 419, "duration": 14.616750001907349}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 781, "completion_tokens": 400, "duration": 14.827615022659302}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 795, "completion_tokens": 289, "duration": 9.25418734550476}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 950, "completion_tokens": 503, "duration": 14.664948463439941}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, guess=0.0, tolerance=1e-7, max_iterations=1000):\n        for _ in range(max_iterations):\n            current_value = poly(ys, guess)\n            if abs(current_value) < tolerance:\n                return guess\n            guess -= current_value / poly(derivative(ys), guess)\n        return guess\n\n    return newton_method(xs)", "prompt_tokens": 1215, "completion_tokens": 664, "duration": 19.814192533493042}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Re-insert sorted elements back into the list\n    result = l[:]\n    j = 0\n    for i in range(len(result)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three[j]\n            j += 1\n    return result", "prompt_tokens": 1035, "completion_tokens": 617, "duration": 19.80377459526062}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 714, "completion_tokens": 341, "duration": 10.53835391998291}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 717, "completion_tokens": 264, "duration": 9.610703706741333}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 831, "completion_tokens": 459, "duration": 16.89363694190979}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 900, "completion_tokens": 415, "duration": 9.921796321868896}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    returns decoded string by reversing the cycling of groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 929, "completion_tokens": 443, "duration": 23.543148279190063}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count, num = 0, 0\n    while True:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1", "prompt_tokens": 897, "completion_tokens": 547, "duration": 15.492800235748291}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1274, "completion_tokens": 774, "duration": 21.36120891571045}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars moving left to right and n cars moving right to left on an infinitely long straight road,\n    this function calculates the total number of collisions that occur.\n    \"\"\"\n    # Since all cars move at the same speed and there are n cars in each direction,\n    # each car moving left to right will collide with each of the n cars moving right to left.\n    # Therefore, the total number of collisions is simply n * n.\n    return n * n", "prompt_tokens": 1028, "completion_tokens": 535, "duration": 22.145261764526367}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 870, "completion_tokens": 375, "duration": 11.236725807189941}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1127, "completion_tokens": 550, "duration": 13.337989568710327}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 780, "completion_tokens": 352, "duration": 12.730077505111694}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 745, "completion_tokens": 403, "duration": 10.316364288330078}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1106, "completion_tokens": 614, "duration": 29.37600612640381}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 795, "completion_tokens": 401, "duration": 11.419220447540283}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 851, "completion_tokens": 427, "duration": 15.283393144607544}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 907, "completion_tokens": 489, "duration": 15.791151762008667}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    returns decoded string by shifting every character by -5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 767, "completion_tokens": 347, "duration": 12.559175968170166}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 875, "completion_tokens": 383, "duration": 13.580519676208496}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 800, "completion_tokens": 375, "duration": 9.286653757095337}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 647, "completion_tokens": 259, "duration": 7.571682453155518}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 947, "completion_tokens": 393, "duration": 19.613057613372803}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 770, "completion_tokens": 407, "duration": 10.623664855957031}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "prompt_tokens": 873, "completion_tokens": 448, "duration": 12.980388402938843}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 792, "completion_tokens": 371, "duration": 13.152894973754883}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 830, "completion_tokens": 326, "duration": 9.748847246170044}
{"task_id": "HumanEval/59", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_factor(n: int):\n    largest_factor = 1\n    # Check divisibility by 2\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    # If n becomes a prime number > 2\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "prompt_tokens": 859, "completion_tokens": 610, "duration": 21.905329704284668}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 883, "completion_tokens": 419, "duration": 15.304568767547607}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 943, "completion_tokens": 527, "duration": 15.137377500534058}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 909, "completion_tokens": 416, "duration": 10.182000637054443}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 965, "completion_tokens": 445, "duration": 12.21820592880249}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s if char.lower() in 'aeiou')\n    if s and s[-1].lower() == 'y':\n        count += 1\n    return count", "prompt_tokens": 857, "completion_tokens": 352, "duration": 10.519501209259033}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift >= n:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 756, "completion_tokens": 382, "duration": 11.376770973205566}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 10.463036060333252}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1050, "completion_tokens": 360, "duration": 10.742691993713379}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    return [smallest_even, index] if index != -1 else []", "prompt_tokens": 1288, "completion_tokens": 433, "duration": 17.442471027374268}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = [num for num, freq in counts.items() if num <= freq]\n    return max(result) if result else -1", "prompt_tokens": 942, "completion_tokens": 356, "duration": 9.260739088058472}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 844, "completion_tokens": 342, "duration": 14.175082683563232}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 884, "completion_tokens": 533, "duration": 18.877124786376953}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1035, "completion_tokens": 298, "duration": 7.08765435218811}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1204, "completion_tokens": 652, "duration": 17.863837718963623}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1013, "completion_tokens": 449, "duration": 14.82450246810913}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 947, "completion_tokens": 576, "duration": 17.584944009780884}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 979, "completion_tokens": 458, "duration": 17.114781618118286}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    root = round(a ** (1 / 3))\n    return root ** 3 == a", "prompt_tokens": 798, "completion_tokens": 303, "duration": 9.980163335800171}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1408, "completion_tokens": 554, "duration": 20.92534327507019}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 995, "completion_tokens": 464, "duration": 12.068071603775024}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 937, "completion_tokens": 447, "duration": 13.616037130355835}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1149, "completion_tokens": 569, "duration": 21.764952898025513}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 881, "completion_tokens": 483, "duration": 18.39215350151062}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    total_count = 9 * 10**(n-1)  # Total count of n-digit numbers\n    starts_with_one = 10**(n-1)  # Count of n-digit numbers that start with 1\n    ends_with_one = 9 * 10**(n-2)  # Count of n-digit numbers that end with 1\n    starts_and_ends_with_one = 10**(n-2)  # Count of n-digit numbers that start and end with 1\n    return starts_with_one + ends_with_one - starts_and_ends_with_one", "prompt_tokens": 906, "completion_tokens": 644, "duration": 18.663976669311523}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 913, "completion_tokens": 411, "duration": 14.791861295700073}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_index = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index", "prompt_tokens": 728, "completion_tokens": 374, "duration": 12.702403545379639}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 988, "completion_tokens": 569, "duration": 20.67454171180725}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, -j))\n    coordinates.sort(key=lambda coord: (coord[0], coord[1]))\n    return [(coord[0], -coord[1]) for coord in coordinates]", "prompt_tokens": 1146, "completion_tokens": 404, "duration": 13.653019428253174}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 1067, "completion_tokens": 594, "duration": 47.65278911590576}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    mapping = str.maketrans('abcdefghijklmnopqrstuvwxyz', 'cdefghijklmnopqrstuvwxyzab')\n    return s.translate(mapping)", "prompt_tokens": 863, "completion_tokens": 372, "duration": 11.875361442565918}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]", "prompt_tokens": 889, "completion_tokens": 380, "duration": 9.776466369628906}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with the word 'I'.\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences using '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence]\n    # Count sentences that start with 'I'\n    count = sum(sentence.startswith('I') for sentence in sentences)\n    return count", "prompt_tokens": 853, "completion_tokens": 440, "duration": 14.877939701080322}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 893, "completion_tokens": 374, "duration": 11.39079475402832}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 's', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 821, "completion_tokens": 435, "duration": 18.69491410255432}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return digit_sum(largest_prime) if largest_prime is not None else 0", "prompt_tokens": 1682, "completion_tokens": 943, "duration": 26.737576246261597}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all_upper = True\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n    return all_lower or all_upper", "prompt_tokens": 943, "completion_tokens": 381, "duration": 11.162970304489136}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 1005, "completion_tokens": 535, "duration": 16.34437847137451}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 823, "completion_tokens": 347, "duration": 11.298355340957642}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 766, "completion_tokens": 360, "duration": 11.583603143692017}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    lower = int(num)\n    upper = lower + 1 if num > 0 else lower - 1\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    else:\n        return upper", "prompt_tokens": 1047, "completion_tokens": 493, "duration": 15.250339984893799}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = []\n    for i in range(n):\n        if i == 0:\n            stones.append(n)\n        else:\n            if stones[-1] % 2 == 0:\n                stones.append(stones[-1] + 2)\n            else:\n                stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 902, "completion_tokens": 511, "duration": 18.289991855621338}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 816, "completion_tokens": 327, "duration": 9.940240621566772}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for num in range(y, x-1, -1):  # Iterate backwards to find the largest even number first\n        if num % 2 == 0:\n            largest_even = num\n            break  # Exit the loop once the largest even number is found\n    return largest_even", "prompt_tokens": 881, "completion_tokens": 549, "duration": 15.567936897277832}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))", "prompt_tokens": 983, "completion_tokens": 446, "duration": 16.821213006973267}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 858, "completion_tokens": 402, "duration": 12.107774257659912}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_name[num] for num in filtered_sorted_reversed]", "prompt_tokens": 1202, "completion_tokens": 528, "duration": 14.863209009170532}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        return x * factorial(x-1)\n    \n    def sum_to_i(i):\n        return sum(range(1, i+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    return result", "prompt_tokens": 837, "completion_tokens": 386, "duration": 18.716566801071167}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1095, "completion_tokens": 467, "duration": 13.634183645248413}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 879, "completion_tokens": 390, "duration": 11.606762170791626}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1239, "completion_tokens": 440, "duration": 14.8120698928833}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 988, "completion_tokens": 371, "duration": 11.782401084899902}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    from collections import Counter\n    words = test.split()\n    counts = Counter(words)\n    max_count = max(counts.values(), default=0)\n    return {word: count for word, count in counts.items() if count == max_count}", "prompt_tokens": 979, "completion_tokens": 477, "duration": 19.902616500854492}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1220, "completion_tokens": 630, "duration": 19.05383324623108}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 958, "completion_tokens": 387, "duration": 12.502706527709961}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 966, "completion_tokens": 545, "duration": 16.456900596618652}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1592, "completion_tokens": 678, "duration": 14.914339303970337}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 969, "completion_tokens": 399, "duration": 11.764374494552612}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 1010, "completion_tokens": 416, "duration": 11.637011289596558}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 917, "completion_tokens": 388, "duration": 13.732892274856567}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Count open and close parentheses in both strings\n    open_1, close_1 = lst[0].count('('), lst[0].count(')')\n    open_2, close_2 = lst[1].count('('), lst[1].count(')')\n\n    # If both strings have more open parentheses than close or vice versa, it's impossible to form a good string\n    if (open_1 > close_1 and open_2 > close_2) or (close_1 > open_1 and close_2 > open_2):\n        return 'No'\n\n    # If the first string has more close parentheses, it must come second\n    if close_1 > open_1:\n        return 'Yes' if close_1 - open_1 <= open_2 else 'No'\n    else:\n        return 'Yes' if close_2 - open_2 <= open_1 else 'No'", "prompt_tokens": 1186, "completion_tokens": 906, "duration": 36.01733374595642}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1054, "completion_tokens": 337, "duration": 11.120819568634033}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1064, "completion_tokens": 603, "duration": 15.116317749023438}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 912, "completion_tokens": 382, "duration": 9.820615530014038}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last odd number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 1263, "completion_tokens": 623, "duration": 16.177406311035156}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1169, "completion_tokens": 589, "duration": 20.79621434211731}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 921, "completion_tokens": 485, "duration": 22.898205041885376}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1197, "completion_tokens": 444, "duration": 14.012253046035767}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end and is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1360, "completion_tokens": 670, "duration": 17.841296195983887}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        \n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum", "prompt_tokens": 991, "completion_tokens": 535, "duration": 14.329077243804932}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, k-1, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while pq:\n        cost, x, y, steps, path = heappop(pq)\n        if steps == 0:\n            return path\n        if (x, y, steps) in visited:\n            continue\n        visited.add((x, y, steps))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heappush(pq, (cost + grid[nx][ny], nx, ny, steps-1, new_path))", "prompt_tokens": 1909, "completion_tokens": 1042, "duration": 26.391961574554443}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(m, memo):\n        if m in memo:\n            return memo[m]\n        if m == 1:\n            return 3\n        if m % 2 == 0:\n            result = 1 + m // 2\n        else:\n            result = helper(m - 1, memo) + helper(m - 2, memo) + helper(m + 1, memo)\n        memo[m] = result\n        return result\n\n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n        result.append(memo[i])\n    return result", "prompt_tokens": 1123, "completion_tokens": 495, "duration": 14.958368301391602}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 784, "completion_tokens": 409, "duration": 13.05128026008606}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:\n                nested = True\n            else:\n                nested = False\n    return nested and not stack", "prompt_tokens": 1075, "completion_tokens": 577, "duration": 15.439921855926514}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 914, "completion_tokens": 321, "duration": 8.331426858901978}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 883, "completion_tokens": 415, "duration": 12.29159927368164}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 833, "completion_tokens": 371, "duration": 11.593545913696289}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 892, "completion_tokens": 401, "duration": 15.14549732208252}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n\n    a_conv = convert_to_float(a)\n    b_conv = convert_to_float(b)\n\n    if a_conv > b_conv:\n        return a\n    elif b_conv > a_conv:\n        return b\n    else:\n        return None", "prompt_tokens": 929, "completion_tokens": 433, "duration": 14.216143369674683}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False", "prompt_tokens": 884, "completion_tokens": 466, "duration": 14.189697742462158}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    return factorial(n) * special_factorial(n-1)", "prompt_tokens": 846, "completion_tokens": 413, "duration": 12.107450485229492}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 812, "completion_tokens": 403, "duration": 16.79284954071045}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there's exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name by the dot\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1064, "completion_tokens": 508, "duration": 14.332178592681885}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1079, "completion_tokens": 511, "duration": 19.78169322013855}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1233, "completion_tokens": 730, "duration": 23.949427366256714}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    \n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n    \n    return result_num % result_denom == 0", "prompt_tokens": 1072, "completion_tokens": 529, "duration": 12.877714395523071}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 838, "completion_tokens": 338, "duration": 10.655158519744873}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return int(n) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if is_odd(str_num[0]) and is_odd(str_num[-1]):\n                count += 1\n    return count", "prompt_tokens": 832, "completion_tokens": 369, "duration": 11.340834140777588}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    remainders = [0, 0, 0]\n    # Calculate the remainders of the array elements when divided by 3\n    for num in a:\n        remainders[num % 3] += 1\n    # Count the triples that sum up to a multiple of 3\n    # There are three cases to consider:\n    # 1. All three elements have remainder 0\n    count += (remainders[0] * (remainders[0] - 1) * (remainders[0] - 2)) // 6\n    # 2. One element has remainder 0, one has remainder 1, and one has remainder 2\n    count += remainders[0] * remainders[1] * remainders[2]\n    # 3. All three elements have remainders 1 or all have remainders 2\n    count += (remainders[1] * (remainders[1] - 1) * (remainders[1] - 2)) // 6\n    count += (remainders[2] * (remainders[2] - 1) * (remainders[2] - 2)) // 6\n    return count", "prompt_tokens": 1086, "completion_tokens": 860, "duration": 31.593852519989014}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1 + 1:idx2])\n    else:\n        return tuple(planets[idx2 + 1:idx1])", "prompt_tokens": 1348, "completion_tokens": 745, "duration": 21.83561420440674}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by their length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 1008, "completion_tokens": 407, "duration": 13.851799726486206}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 883, "completion_tokens": 484, "duration": 15.651138544082642}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 891, "completion_tokens": 346, "duration": 11.2080557346344}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1071, "completion_tokens": 341, "duration": 10.8096764087677}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1204, "completion_tokens": 423, "duration": 12.33362627029419}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 910, "completion_tokens": 368, "duration": 12.060246229171753}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 735, "completion_tokens": 371, "duration": 15.49774432182312}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 950, "completion_tokens": 696, "duration": 31.070783853530884}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1061, "completion_tokens": 585, "duration": 21.351952075958252}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 995, "completion_tokens": 519, "duration": 14.452880144119263}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 1128, "completion_tokens": 301, "duration": 9.161811113357544}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1112, "completion_tokens": 635, "duration": 22.220940589904785}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 864, "completion_tokens": 403, "duration": 14.669863224029541}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 787, "completion_tokens": 396, "duration": 11.784106254577637}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]", "prompt_tokens": 851, "completion_tokens": 409, "duration": 10.753478288650513}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 823, "completion_tokens": 434, "duration": 14.382366418838501}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 969, "completion_tokens": 557, "duration": 15.149205684661865}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 727, "completion_tokens": 287, "duration": 10.99322509765625}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 964, "completion_tokens": 474, "duration": 17.531636238098145}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 945, "completion_tokens": 455, "duration": 11.787855625152588}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 886, "completion_tokens": 461, "duration": 16.170931816101074}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1005, "completion_tokens": 590, "duration": 17.655436038970947}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 793, "completion_tokens": 358, "duration": 9.69594430923462}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 777, "completion_tokens": 330, "duration": 9.74236249923706}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result", "prompt_tokens": 1021, "completion_tokens": 585, "duration": 22.52231502532959}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string + string[::-1]", "prompt_tokens": 1193, "completion_tokens": 715, "duration": 20.99129366874695}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 788, "completion_tokens": 374, "duration": 11.109699249267578}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 820, "completion_tokens": 350, "duration": 13.928703546524048}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 811, "completion_tokens": 405, "duration": 12.461928367614746}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 719, "completion_tokens": 369, "duration": 12.764444828033447}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 724, "completion_tokens": 314, "duration": 8.721190452575684}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 825, "completion_tokens": 403, "duration": 13.394938468933105}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 949, "completion_tokens": 378, "duration": 14.254915237426758}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "prompt_tokens": 810, "completion_tokens": 408, "duration": 16.06082510948181}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 852, "completion_tokens": 447, "duration": 18.58353042602539}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 1075, "completion_tokens": 550, "duration": 25.173094034194946}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 901, "completion_tokens": 511, "duration": 15.910070657730103}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 811, "completion_tokens": 362, "duration": 13.08042049407959}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 747, "completion_tokens": 374, "duration": 10.351464986801147}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 757, "completion_tokens": 391, "duration": 10.37117052078247}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 909, "completion_tokens": 487, "duration": 13.492843389511108}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 830, "completion_tokens": 424, "duration": 14.192554950714111}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)", "prompt_tokens": 726, "completion_tokens": 360, "duration": 11.773068904876709}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 735, "completion_tokens": 377, "duration": 11.761748790740967}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 761, "completion_tokens": 380, "duration": 15.264592170715332}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 819, "completion_tokens": 313, "duration": 8.087729930877686}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 845, "completion_tokens": 398, "duration": 10.92603588104248}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [i * coeff for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:  # Avoid division by zero\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0\n\n    return newton_method(xs)", "prompt_tokens": 1225, "completion_tokens": 723, "duration": 24.888129472732544}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    j = 0  # Index for sorted divisible_by_three list\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 971, "completion_tokens": 569, "duration": 20.40865659713745}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 727, "completion_tokens": 303, "duration": 8.648168087005615}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 10.261168718338013}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 800, "completion_tokens": 427, "duration": 12.041114807128906}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = l[::2]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i//2]\n    return l", "prompt_tokens": 1009, "completion_tokens": 515, "duration": 14.019273519515991}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 950, "completion_tokens": 466, "duration": 16.310109853744507}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    count = 0\n    a, b = 0, 1\n    while True:\n        if a != 0 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 911, "completion_tokens": 536, "duration": 14.961208581924438}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1213, "completion_tokens": 713, "duration": 22.404145002365112}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving in opposite directions.\n    \"\"\"\n    return n * (n - 1) // 2", "prompt_tokens": 922, "completion_tokens": 366, "duration": 10.798556089401245}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 815, "completion_tokens": 317, "duration": 10.141155242919922}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1121, "completion_tokens": 544, "duration": 21.820452451705933}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 748, "completion_tokens": 320, "duration": 9.779840230941772}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 734, "completion_tokens": 359, "duration": 11.304323196411133}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n\n    return dp[n]", "prompt_tokens": 1271, "completion_tokens": 779, "duration": 20.179491996765137}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 787, "completion_tokens": 393, "duration": 14.282940864562988}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 798, "completion_tokens": 374, "duration": 9.739982604980469}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 975, "completion_tokens": 557, "duration": 16.49254536628723}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 834, "completion_tokens": 414, "duration": 12.199884414672852}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 874, "completion_tokens": 382, "duration": 12.751318454742432}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 793, "completion_tokens": 368, "duration": 9.742943525314331}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 618, "completion_tokens": 230, "duration": 10.651160955429077}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 965, "completion_tokens": 411, "duration": 9.095588684082031}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 794, "completion_tokens": 425, "duration": 10.735719442367554}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 975, "completion_tokens": 555, "duration": 14.361994504928589}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 807, "completion_tokens": 389, "duration": 13.599817037582397}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 839, "completion_tokens": 349, "duration": 12.790274381637573}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_factor = None\n    # Divide by 2 to remove all even factors\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    # Check for odd factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    # If n becomes a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "prompt_tokens": 901, "completion_tokens": 610, "duration": 23.66806149482727}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 844, "completion_tokens": 380, "duration": 18.554810762405396}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 969, "completion_tokens": 548, "duration": 16.983952283859253}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 847, "completion_tokens": 354, "duration": 10.198783874511719}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 985, "completion_tokens": 479, "duration": 15.156426906585693}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] in 'yY':\n        count += 1\n    return count", "prompt_tokens": 837, "completion_tokens": 344, "duration": 14.89547061920166}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 771, "completion_tokens": 358, "duration": 9.0115327835083}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 804, "completion_tokens": 299, "duration": 11.51300835609436}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1061, "completion_tokens": 371, "duration": 12.398062229156494}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1240, "completion_tokens": 391, "duration": 13.638307809829712}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    max_val = -1\n    for key, value in counts.items():\n        if key <= value and key > max_val:\n            max_val = key\n    return max_val", "prompt_tokens": 946, "completion_tokens": 383, "duration": 13.108957767486572}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 824, "completion_tokens": 317, "duration": 11.496365308761597}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return round(area, 2)", "prompt_tokens": 865, "completion_tokens": 483, "duration": 14.767875909805298}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1053, "completion_tokens": 316, "duration": 9.336095094680786}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1352, "completion_tokens": 865, "duration": 21.116847276687622}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    \n    if count1 < count2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1014, "completion_tokens": 442, "duration": 15.795734882354736}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n    \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 913, "completion_tokens": 571, "duration": 14.296502113342285}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 979, "completion_tokens": 448, "duration": 12.994716882705688}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    root = abs(a)**(1/3)\n    return round(root) ** 3 == abs(a)", "prompt_tokens": 795, "completion_tokens": 302, "duration": 10.762301921844482}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    \"\"\"Counts the number of prime hexadecimal digits in the input string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 1334, "completion_tokens": 493, "duration": 17.695855855941772}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 996, "completion_tokens": 465, "duration": 15.108624935150146}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1119, "completion_tokens": 652, "duration": 18.01708436012268}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1164, "completion_tokens": 584, "duration": 24.261756658554077}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 802, "completion_tokens": 404, "duration": 10.506529092788696}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 841, "completion_tokens": 512, "duration": 17.40325403213501}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 934, "completion_tokens": 437, "duration": 14.865407466888428}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])", "prompt_tokens": 703, "completion_tokens": 327, "duration": 12.470437049865723}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 899, "completion_tokens": 450, "duration": 14.200069904327393}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1136, "completion_tokens": 381, "duration": 11.083671808242798}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 1076, "completion_tokens": 597, "duration": 20.243277072906494}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by shifting each letter down by 4 places in the alphabet.\"\"\"\n    return ''.join(chr((ord(c) - ord('a') + 4) % 26 + ord('a')) for c in s)", "prompt_tokens": 838, "completion_tokens": 371, "duration": 16.96542501449585}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 928, "completion_tokens": 417, "duration": 14.204374074935913}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n    \"\"\"\n    # Split the string into sentences using '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence]\n    # Count sentences that start with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 848, "completion_tokens": 423, "duration": 14.036767959594727}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 904, "completion_tokens": 384, "duration": 13.887712717056274}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 829, "completion_tokens": 443, "duration": 12.89613389968872}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1540, "completion_tokens": 789, "duration": 27.42757225036621}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 946, "completion_tokens": 368, "duration": 10.702492713928223}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(k):\n        if k <= 1:\n            return False\n        for i in range(2, int(k**0.5) + 1):\n            if k % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 1054, "completion_tokens": 540, "duration": 14.4923255443573}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 780, "completion_tokens": 308, "duration": 8.230801105499268}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 752, "completion_tokens": 378, "duration": 10.1260826587677}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    lower = math.floor(num)\n    upper = math.ceil(num)\n    if num > 0:\n        if abs(num - lower) < abs(num - upper):\n            return lower\n        else:\n            return upper\n    else:\n        if abs(num - lower) < abs(num - upper):\n            return upper\n        else:\n            return lower", "prompt_tokens": 997, "completion_tokens": 470, "duration": 17.497270107269287}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 959, "completion_tokens": 558, "duration": 21.931234121322632}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    return [word.strip() for word in s.replace(',', ' ').split()]", "prompt_tokens": 820, "completion_tokens": 331, "duration": 11.886310815811157}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "prompt_tokens": 888, "completion_tokens": 532, "duration": 16.665945768356323}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 967, "completion_tokens": 422, "duration": 17.810298204421997}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 820, "completion_tokens": 364, "duration": 13.630801916122437}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num - 1] for num in filtered_arr]", "prompt_tokens": 1142, "completion_tokens": 436, "duration": 18.412165641784668}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 868, "completion_tokens": 437, "duration": 15.661109685897827}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1074, "completion_tokens": 447, "duration": 14.169725179672241}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n) if digit.isdigit()) - (2*int(str(n)[1]) if n < 0 else 0)\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 955, "completion_tokens": 488, "duration": 16.72808861732483}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False", "prompt_tokens": 1256, "completion_tokens": 411, "duration": 12.364203929901123}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 971, "completion_tokens": 351, "duration": 12.341265439987183}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    most_common_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return most_common_letters", "prompt_tokens": 1003, "completion_tokens": 483, "duration": 12.943887710571289}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1067, "completion_tokens": 477, "duration": 15.08738088607788}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 954, "completion_tokens": 378, "duration": 12.573432922363281}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 957, "completion_tokens": 536, "duration": 18.984368801116943}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 1544, "completion_tokens": 632, "duration": 19.383394718170166}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 970, "completion_tokens": 512, "duration": 16.573506593704224}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1011, "completion_tokens": 584, "duration": 21.57751441001892}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 940, "completion_tokens": 411, "duration": 12.095896005630493}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    open_count_1 = lst[0].count('(')\n    close_count_1 = lst[0].count(')')\n    open_count_2 = lst[1].count('(')\n    close_count_2 = lst[1].count(')')\n\n    # Check if concatenating first string then second string forms a good string\n    if open_count_1 >= close_count_1 and (open_count_1 + open_count_2) >= (close_count_1 + close_count_2):\n        return 'Yes'\n    # Check if concatenating second string then first string forms a good string\n    elif open_count_2 >= close_count_2 and (open_count_1 + open_count_2) >= (close_count_1 + close_count_2):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1071, "completion_tokens": 769, "duration": 24.76813054084778}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 1219, "completion_tokens": 534, "duration": 16.33582067489624}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 818, "completion_tokens": 357, "duration": 12.526863098144531}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)", "prompt_tokens": 1078, "completion_tokens": 549, "duration": 16.45407009124756}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(n):\n        if n == 1:\n            return [1]\n        elif n % 2 == 0:\n            return collatz_sequence(n // 2)\n        else:\n            return [n] + collatz_sequence(3 * n + 1)\n    \n    return sorted(set(filter(lambda x: x % 2 != 0, collatz_sequence(n))))", "prompt_tokens": 1305, "completion_tokens": 655, "duration": 18.63742995262146}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check the format of the date string\n    components = date.split('-')\n    if len(components) != 3:\n        return False\n    \n    month, day, year = components\n    \n    # Validate month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Validate month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Validate day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # February\n        # Check for leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1175, "completion_tokens": 645, "duration": 21.77934193611145}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 935, "completion_tokens": 499, "duration": 18.671833515167236}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1199, "completion_tokens": 469, "duration": 14.111510038375854}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1258, "completion_tokens": 564, "duration": 17.545883417129517}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 896, "completion_tokens": 429, "duration": 14.434741020202637}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    pq = []  # Priority queue: (path cost list, x, y, steps)\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, ([grid[i][j]], i, j, 1))\n\n    while pq:\n        path, x, y, steps = heappop(pq)\n        if steps == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heappush(pq, (new_path, nx, ny, steps + 1))", "prompt_tokens": 1925, "completion_tokens": 1037, "duration": 34.247451066970825}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            memo[n] = 1 + n // 2\n            return memo[n]\n        else:\n            memo[n] = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n            return memo[n]\n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        result.append(helper(i, memo))\n    return result", "prompt_tokens": 1135, "completion_tokens": 498, "duration": 18.364702463150024}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 786, "completion_tokens": 411, "duration": 16.51065444946289}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:\n                return True\n            else:\n                stack.pop()\n    return False", "prompt_tokens": 1038, "completion_tokens": 530, "duration": 18.930036067962646}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 1124, "completion_tokens": 533, "duration": 14.718563318252563}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) > 1 and txt[-2] == \" \":\n        return True\n    return False", "prompt_tokens": 880, "completion_tokens": 357, "duration": 11.854573965072632}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 965, "completion_tokens": 496, "duration": 11.938560724258423}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 844, "completion_tokens": 353, "duration": 16.180333852767944}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n            return float(val)\n        return val\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 1013, "completion_tokens": 581, "duration": 20.399779319763184}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    if n % 2 == 0:  # If n is even, it can always be expressed as the sum of 4 even numbers\n        return True\n    return False", "prompt_tokens": 821, "completion_tokens": 447, "duration": 13.280815124511719}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 878, "completion_tokens": 451, "duration": 11.870089292526245}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2 consecutive) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 795, "completion_tokens": 387, "duration": 14.742842435836792}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1061, "completion_tokens": 507, "duration": 17.61103343963623}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1038, "completion_tokens": 466, "duration": 13.499061584472656}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1064, "completion_tokens": 561, "duration": 19.231425762176514}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    \n    return result_num % result_denom == 0", "prompt_tokens": 1117, "completion_tokens": 578, "duration": 17.732409477233887}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 877, "completion_tokens": 377, "duration": 12.168884515762329}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n    \n    def first_last_odd(num):\n        num_str = str(abs(num))\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return is_odd(first_digit) and is_odd(last_digit)\n    \n    return sum(1 for num in nums if num > 10 and first_last_odd(num))", "prompt_tokens": 888, "completion_tokens": 439, "duration": 14.366667985916138}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize the count of valid triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1300, "completion_tokens": 910, "duration": 27.738248586654663}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1043, "completion_tokens": 435, "duration": 22.69530963897705}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings first by length, then alphabetically if lengths are equal\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 1040, "completion_tokens": 443, "duration": 17.01504373550415}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 865, "completion_tokens": 466, "duration": 15.63609790802002}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 948, "completion_tokens": 408, "duration": 14.633023738861084}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1082, "completion_tokens": 352, "duration": 11.364691734313965}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1190, "completion_tokens": 411, "duration": 15.219676971435547}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Checks if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    return any(b in a+a for _ in range(len(b)))", "prompt_tokens": 883, "completion_tokens": 369, "duration": 9.972858190536499}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 719, "completion_tokens": 355, "duration": 11.17432975769043}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 932, "completion_tokens": 630, "duration": 25.406229496002197}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 932, "completion_tokens": 456, "duration": 17.98388433456421}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 907, "completion_tokens": 431, "duration": 12.678945302963257}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1113, "completion_tokens": 296, "duration": 13.37901520729065}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1219, "completion_tokens": 617, "duration": 17.3868145942688}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 819, "completion_tokens": 350, "duration": 16.320760011672974}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 785, "completion_tokens": 362, "duration": 11.655749559402466}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return sorted(set(digit for num in range(min(a, b), max(a, b) + 1) for digit in str(num) if int(digit) % 2 == 0), key=int)", "prompt_tokens": 834, "completion_tokens": 406, "duration": 15.599373579025269}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 828, "completion_tokens": 341, "duration": 12.425079107284546}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # When stack is empty, a group is complete\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 928, "completion_tokens": 516, "duration": 20.091155290603638}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 741, "completion_tokens": 301, "duration": 10.814149379730225}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 971, "completion_tokens": 481, "duration": 16.232628345489502}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 980, "completion_tokens": 490, "duration": 14.476836919784546}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimiter)\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 832, "completion_tokens": 410, "duration": 11.412457942962646}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            depths.append(max_depth)\n            max_depth = 0\n    if max_depth > 0:  # For the last group if there's no trailing space\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 974, "completion_tokens": 583, "duration": 20.06533718109131}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 767, "completion_tokens": 332, "duration": 10.233806848526001}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return sum_numbers, product_numbers", "prompt_tokens": 864, "completion_tokens": 398, "duration": 11.833014965057373}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 981, "completion_tokens": 538, "duration": 16.98696732521057}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 920, "completion_tokens": 401, "duration": 11.533567190170288}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for x, y in zip(a, b):\n        result += str(int(x) ^ int(y))\n    return result", "prompt_tokens": 797, "completion_tokens": 388, "duration": 13.103434801101685}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 840, "completion_tokens": 398, "duration": 14.068236351013184}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 818, "completion_tokens": 412, "duration": 17.226667165756226}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 783, "completion_tokens": 397, "duration": 12.963458061218262}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 725, "completion_tokens": 315, "duration": 11.18562936782837}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 815, "completion_tokens": 393, "duration": 13.191040992736816}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 975, "completion_tokens": 409, "duration": 14.245003461837769}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 788, "completion_tokens": 371, "duration": 12.386995077133179}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    num_to_word = {v: k for k, v in num_dict.items()}\n    return ' '.join(num_to_word[num] for num in sorted(num_dict[word] for word in num_list))", "prompt_tokens": 839, "completion_tokens": 463, "duration": 16.31477952003479}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 975, "completion_tokens": 455, "duration": 20.409607887268066}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 862, "completion_tokens": 374, "duration": 12.80208706855774}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 767, "completion_tokens": 318, "duration": 11.905110359191895}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 723, "completion_tokens": 350, "duration": 10.93053936958313}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 771, "completion_tokens": 405, "duration": 13.999937534332275}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 954, "completion_tokens": 532, "duration": 20.89141821861267}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 859, "completion_tokens": 482, "duration": 16.02775812149048}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 707, "completion_tokens": 341, "duration": 11.923942565917969}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 741, "completion_tokens": 342, "duration": 10.576126098632812}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 775, "completion_tokens": 394, "duration": 11.878947257995605}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 819, "completion_tokens": 313, "duration": 8.81022310256958}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1078, "completion_tokens": 646, "duration": 20.67260193824768}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, initial_guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = initial_guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0\n\n    return newton_method(xs)", "prompt_tokens": 1131, "completion_tokens": 624, "duration": 23.445339918136597}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3 (1-based indexing)\n    divisible_by_three = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    divisible_by_three.sort()\n    \n    # Merge the sorted elements back into the original list\n    result = [divisible_by_three.pop(0) if (i + 1) % 3 == 0 else l[i] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 1028, "completion_tokens": 606, "duration": 17.510283708572388}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 730, "completion_tokens": 306, "duration": 11.009777784347534}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 9.438829183578491}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 789, "completion_tokens": 404, "duration": 14.11192274093628}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 945, "completion_tokens": 444, "duration": 10.652951717376709}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 961, "completion_tokens": 474, "duration": 16.403398036956787}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count, num = 0, 0\n    while True:\n        if is_prime(fibonacci(num)):\n            count += 1\n            if count == n:\n                return fibonacci(num)\n        num += 1", "prompt_tokens": 905, "completion_tokens": 555, "duration": 17.010175228118896}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1244, "completion_tokens": 744, "duration": 20.168750762939453}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars are moving at the same speed and there are equal numbers of cars moving in opposite directions,\n    each car moving left to right will eventually collide with each car moving right to left. Therefore, the total\n    number of collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 878, "completion_tokens": 358, "duration": 11.854960441589355}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 749, "completion_tokens": 254, "duration": 6.951097249984741}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1116, "completion_tokens": 539, "duration": 15.561231851577759}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 762, "completion_tokens": 334, "duration": 12.026240587234497}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 744, "completion_tokens": 369, "duration": 9.824031114578247}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1103, "completion_tokens": 611, "duration": 23.0274555683136}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 799, "completion_tokens": 405, "duration": 12.755794763565063}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 762, "completion_tokens": 338, "duration": 8.366413831710815}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 837, "completion_tokens": 350, "duration": 10.665631771087646}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 801, "completion_tokens": 381, "duration": 14.166067600250244}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 873, "completion_tokens": 360, "duration": 14.437326431274414}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 785, "completion_tokens": 360, "duration": 15.651940822601318}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 649, "completion_tokens": 261, "duration": 11.207713603973389}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 951, "completion_tokens": 397, "duration": 9.917707443237305}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 827, "completion_tokens": 471, "duration": 13.745881795883179}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 880, "completion_tokens": 453, "duration": 15.186791181564331}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 795, "completion_tokens": 377, "duration": 10.995952606201172}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 351, "duration": 12.73766827583313}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    last_factor = 1\n    while n > 1:\n        if n % factor == 0:\n            last_factor = factor\n            n = n / factor\n            while n % factor == 0:\n                n = n / factor\n        factor = factor + 1\n    return last_factor", "prompt_tokens": 860, "completion_tokens": 561, "duration": 18.777526140213013}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 873, "completion_tokens": 409, "duration": 13.701697826385498}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1152, "completion_tokens": 731, "duration": 21.31122660636902}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 836, "completion_tokens": 343, "duration": 11.175362586975098}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int, memo={}):\n    \"\"\"Compute the n-th element of the FibFib sequence.\"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 1002, "completion_tokens": 510, "duration": 13.800147533416748}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 377, "duration": 12.214884042739868}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)  # Handle shift larger than the length of the number\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 746, "completion_tokens": 341, "duration": 15.60427474975586}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 9.478240251541138}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1064, "completion_tokens": 374, "duration": 11.142571687698364}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1251, "completion_tokens": 402, "duration": 11.634066820144653}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for key, value in frequency.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 911, "completion_tokens": 352, "duration": 15.98461365699768}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Append the minimum\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Append the maximum\n    return result", "prompt_tokens": 910, "completion_tokens": 420, "duration": 12.642925024032593}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 865, "completion_tokens": 516, "duration": 21.71242046356201}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1042, "completion_tokens": 305, "duration": 10.571674108505249}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1290, "completion_tokens": 738, "duration": 24.284257173538208}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 985, "completion_tokens": 421, "duration": 14.660943746566772}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_factors = []\n    for i in range(2, a + 1):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    return len(prime_factors) == 3", "prompt_tokens": 930, "completion_tokens": 597, "duration": 22.240516185760498}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    log_result = math.log(x, n)\n    return log_result.is_integer()", "prompt_tokens": 883, "completion_tokens": 356, "duration": 12.310152053833008}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    root = a ** (1/3)\n    return round(root) ** 3 == a", "prompt_tokens": 886, "completion_tokens": 394, "duration": 11.500508785247803}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1364, "completion_tokens": 510, "duration": 14.854604005813599}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 899, "completion_tokens": 345, "duration": 8.247647047042847}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 996, "completion_tokens": 525, "duration": 19.145977020263672}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1130, "completion_tokens": 537, "duration": 22.1011700630188}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 858, "completion_tokens": 460, "duration": 13.268396377563477}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 859, "completion_tokens": 530, "duration": 16.698261260986328}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 875, "completion_tokens": 373, "duration": 12.81948447227478}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0)", "prompt_tokens": 902, "completion_tokens": 524, "duration": 18.167396306991577}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 942, "completion_tokens": 523, "duration": 17.527588844299316}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1138, "completion_tokens": 383, "duration": 10.167004823684692}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1] if array else 0\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1271, "completion_tokens": 626, "duration": 26.183576345443726}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(((ord(c) - ord('a') + 4) % 26) + ord('a')) if c.islower() else chr(((ord(c) - ord('A') + 4) % 26) + ord('A')) if c.isupper() else c for c in s)", "prompt_tokens": 829, "completion_tokens": 380, "duration": 11.323581218719482}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "prompt_tokens": 898, "completion_tokens": 424, "duration": 12.67728590965271}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Count the number of sentences that start with 'I' in a given string.\n    \"\"\"\n    # Split the string into sentences using '.', '?', and '!' as delimiters\n    sentences = S.replace('?', '.').replace('!', '.').split('. ')\n    count = 0\n    for sentence in sentences:\n        # Check if the sentence starts with 'I'\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 935, "completion_tokens": 522, "duration": 18.060357809066772}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 893, "completion_tokens": 419, "duration": 12.448943138122559}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n    \n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(((ord(char.lower()) - 97 + 2) % 26) + 97).upper() if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            return char\n    \n    return ''.join(replace_vowel(swap_case(char)) for char in message)", "prompt_tokens": 833, "completion_tokens": 443, "duration": 11.912891864776611}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1522, "completion_tokens": 776, "duration": 20.602217435836792}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 912, "completion_tokens": 338, "duration": 11.427797317504883}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    if n <= 2:\n        return []\n    primes = [2]\n    for num in range(3, n, 2):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    return primes", "prompt_tokens": 1078, "completion_tokens": 576, "duration": 20.671003103256226}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 811, "completion_tokens": 339, "duration": 10.152233362197876}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 797, "completion_tokens": 411, "duration": 13.536507606506348}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    lower = int(num)\n    upper = lower + 1 if num > 0 else lower - 1\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    else:\n        return upper", "prompt_tokens": 1031, "completion_tokens": 524, "duration": 14.66513729095459}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = []\n    current_stone_count = n\n    for i in range(n):\n        stones.append(current_stone_count)\n        if current_stone_count % 2 == 0:\n            current_stone_count += 2\n        else:\n            current_stone_count += 2\n    return stones", "prompt_tokens": 886, "completion_tokens": 490, "duration": 19.906877994537354}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    return [word.strip() for word in s.replace(',', ' ').split() if word.strip()]", "prompt_tokens": 805, "completion_tokens": 320, "duration": 19.638939380645752}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for num in range(y, x-1, -1):  # Iterate backwards to find the largest even number more efficiently\n        if num % 2 == 0:\n            largest_even = num\n            break  # Break as soon as the first even number is found since we are iterating backwards\n    return largest_even", "prompt_tokens": 883, "completion_tokens": 557, "duration": 23.023535013198853}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 945, "completion_tokens": 408, "duration": 12.864391326904297}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 811, "completion_tokens": 355, "duration": 13.0514554977417}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1136, "completion_tokens": 385, "duration": 15.531764030456543}
{"task_id": "HumanEval/106", "generated_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_up_to_index(lst, index):\n    return sum(lst[:index+1])\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # If i is even\n            result.append(factorial(i))\n        else:\n            # Generate a list from 1 to i and sum it up\n            nums = list(range(1, i+1))\n            result.append(sum_up_to_index(nums, len(nums)-1))\n    return result", "prompt_tokens": 906, "completion_tokens": 495, "duration": 15.538289546966553}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1080, "completion_tokens": 452, "duration": 28.71992015838623}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 892, "completion_tokens": 403, "duration": 10.240142822265625}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n    if arr[n - 1] > arr[0]:\n        count += 1\n    return count <= 1", "prompt_tokens": 1359, "completion_tokens": 541, "duration": 16.455816745758057}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\"", "prompt_tokens": 1027, "completion_tokens": 405, "duration": 11.566832780838013}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    words = test.split()\n    letter_count = {}\n    for word in words:\n        letter_count[word] = letter_count.get(word, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 944, "completion_tokens": 460, "duration": 16.23734188079834}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1365, "completion_tokens": 775, "duration": 18.520089864730835}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 957, "completion_tokens": 386, "duration": 12.552977323532104}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum", "prompt_tokens": 1053, "completion_tokens": 641, "duration": 22.299140691757202}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_fills = 0\n    for row in grid:\n        water_in_row = sum(row)\n        total_fills += math.ceil(water_in_row / capacity)\n    return total_fills", "prompt_tokens": 1475, "completion_tokens": 577, "duration": 17.911171197891235}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 950, "completion_tokens": 333, "duration": 10.422679424285889}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 985, "completion_tokens": 395, "duration": 16.228094577789307}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 913, "completion_tokens": 384, "duration": 19.57102608680725}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                close_count += 1\n                if open_count > 0:\n                    open_count -= 1\n                    close_count -= 1\n    return 'Yes' if open_count == 0 and close_count == 0 else 'No'", "prompt_tokens": 1119, "completion_tokens": 736, "duration": 25.062303066253662}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1066, "completion_tokens": 349, "duration": 13.879879474639893}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 868, "completion_tokens": 430, "duration": 12.670829772949219}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < num < 100 or -100 < num < 0)", "prompt_tokens": 987, "completion_tokens": 504, "duration": 16.912065744400024}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Add 1 as it's always the last number and is odd\n    return sorted(odd_numbers)", "prompt_tokens": 1303, "completion_tokens": 662, "duration": 22.63611912727356}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    \n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1165, "completion_tokens": 534, "duration": 21.529358386993408}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 935, "completion_tokens": 416, "duration": 11.65817379951477}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1172, "completion_tokens": 442, "duration": 11.135753870010376}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1257, "completion_tokens": 563, "duration": 17.831583976745605}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 942, "completion_tokens": 475, "duration": 11.326250076293945}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heappush(pq, (grid[i][j], 1, [(i, j)], grid[i][j]))\n\n    visited = set()\n\n    while pq:\n        _, length, path, val = heappop(pq)\n        if length == k:\n            return [grid[x][y] for x, y in path]\n        \n        if tuple(path) in visited:\n            continue\n        visited.add(tuple(path))\n\n        x, y = path[-1]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [(nx, ny)]\n                newVal = val * (N*N) + grid[nx][ny]\n                heappush(pq, (newVal, length + 1, newPath, newVal))", "prompt_tokens": 1936, "completion_tokens": 1092, "duration": 27.977567434310913}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n // 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n    \n    return [memo[i] for i in range(1, n + 2)]", "prompt_tokens": 1133, "completion_tokens": 509, "duration": 19.400611400604248}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 726, "completion_tokens": 403, "duration": 22.871328353881836}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 1158, "completion_tokens": 764, "duration": 26.588723182678223}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 904, "completion_tokens": 311, "duration": 10.848382234573364}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 884, "completion_tokens": 361, "duration": 9.197561025619507}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 886, "completion_tokens": 424, "duration": 16.79657793045044}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 882, "completion_tokens": 391, "duration": 12.108383417129517}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def parse_value(value):\n        if isinstance(value, str):\n            return float(value.replace(',', '.'))\n        return value\n\n    val_a = parse_value(a)\n    val_b = parse_value(b)\n\n    if val_a > val_b:\n        return a\n    elif val_b > val_a:\n        return b\n    else:\n        return None", "prompt_tokens": 962, "completion_tokens": 521, "duration": 15.053168296813965}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # The smallest sum of 4 positive even numbers is 2+2+2+2 = 8\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers\n    return n % 2 == 0", "prompt_tokens": 834, "completion_tokens": 483, "duration": 18.465728282928467}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "prompt_tokens": 820, "completion_tokens": 402, "duration": 12.171314239501953}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    text = text.replace(\"   \", \"-\")\n    # Replace remaining spaces with '_'\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 839, "completion_tokens": 416, "duration": 15.109731674194336}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1056, "completion_tokens": 420, "duration": 17.352455139160156}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            total += lst[i] ** 2\n        elif i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1092, "completion_tokens": 552, "duration": 13.834896087646484}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 1000, "completion_tokens": 481, "duration": 15.055426836013794}
{"task_id": "HumanEval/144", "generated_code": "import math\n\ndef simplify(x, n):\n    \"\"\"Check if the multiplication of two fractions results in a whole number.\"\"\"\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    gcd = math.gcd(result_numerator, result_denominator)\n    \n    simplified_numerator = result_numerator // gcd\n    simplified_denominator = result_denominator // gcd\n    \n    return simplified_denominator == 1", "prompt_tokens": 976, "completion_tokens": 494, "duration": 32.17692708969116}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 853, "completion_tokens": 353, "duration": 21.810948610305786}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_special(num):\n        num_str = str(abs(num))\n        return num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if is_special(num))", "prompt_tokens": 930, "completion_tokens": 457, "duration": 16.985097408294678}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if their sum is a multiple of 3\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1302, "completion_tokens": 901, "duration": 30.057181358337402}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1028, "completion_tokens": 420, "duration": 16.569290161132812}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings first by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 1154, "completion_tokens": 553, "duration": 17.33056092262268}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 870, "completion_tokens": 471, "duration": 17.80506682395935}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 877, "completion_tokens": 332, "duration": 8.501408338546753}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1101, "completion_tokens": 371, "duration": 13.514699220657349}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1259, "completion_tokens": 478, "duration": 18.46279215812683}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring in the first word.\"\"\"\n    if len(b) > len(a):\n        return False\n    a_concat = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a_concat:\n            return True\n    return False", "prompt_tokens": 972, "completion_tokens": 498, "duration": 16.61063551902771}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 795, "completion_tokens": 435, "duration": 16.583886861801147}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 959, "completion_tokens": 705, "duration": 30.17703080177307}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 928, "completion_tokens": 452, "duration": 14.995237112045288}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 966, "completion_tokens": 490, "duration": 15.848752498626709}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 1117, "completion_tokens": 290, "duration": 9.339586973190308}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 1123, "completion_tokens": 520, "duration": 18.481879472732544}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 858, "completion_tokens": 389, "duration": 21.704198360443115}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 781, "completion_tokens": 390, "duration": 12.975120782852173}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]", "prompt_tokens": 814, "completion_tokens": 434, "duration": 16.122827529907227}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 840, "completion_tokens": 351, "duration": 12.31878399848938}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # When stack is empty, a group is complete\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 968, "completion_tokens": 556, "duration": 20.534539222717285}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 752, "completion_tokens": 366, "duration": 13.220543622970581}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 1013, "completion_tokens": 523, "duration": 19.32427215576172}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mad = sum(deviations) / len(numbers)\n    return mad", "prompt_tokens": 936, "completion_tokens": 458, "duration": 14.948158979415894}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 812, "completion_tokens": 387, "duration": 11.121635913848877}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 932, "completion_tokens": 517, "duration": 19.135207414627075}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 767, "completion_tokens": 332, "duration": 9.744037389755249}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = reduce(lambda x, y: x*y, numbers, 1)\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 818, "completion_tokens": 409, "duration": 20.257359504699707}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result", "prompt_tokens": 1090, "completion_tokens": 654, "duration": 16.843612670898438}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 1027, "completion_tokens": 508, "duration": 18.648138284683228}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 808, "completion_tokens": 442, "duration": 14.173264026641846}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 832, "completion_tokens": 390, "duration": 17.707916975021362}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 800, "completion_tokens": 394, "duration": 11.913873195648193}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 720, "completion_tokens": 370, "duration": 14.358830213546753}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 742, "completion_tokens": 332, "duration": 10.274164915084839}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 767, "completion_tokens": 345, "duration": 10.839877843856812}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 920, "completion_tokens": 354, "duration": 13.900038957595825}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "prompt_tokens": 821, "completion_tokens": 419, "duration": 12.127188444137573}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 799, "completion_tokens": 394, "duration": 13.022883892059326}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = sorted_numbers[1] - sorted_numbers[0]\n    for i in range(1, len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < min_diff:\n            min_diff = sorted_numbers[i + 1] - sorted_numbers[i]\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "prompt_tokens": 1028, "completion_tokens": 526, "duration": 18.525330305099487}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 933, "completion_tokens": 440, "duration": 13.940496921539307}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 806, "completion_tokens": 357, "duration": 9.20568323135376}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 8.930962324142456}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 772, "completion_tokens": 406, "duration": 12.555535316467285}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 937, "completion_tokens": 515, "duration": 16.783533811569214}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    return [num for num in numbers if count_dict[num] == 1]", "prompt_tokens": 893, "completion_tokens": 519, "duration": 16.577759265899658}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 697, "completion_tokens": 331, "duration": 11.770473957061768}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 726, "completion_tokens": 368, "duration": 11.164644002914429}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 767, "completion_tokens": 327, "duration": 9.623721599578857}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 838, "completion_tokens": 332, "duration": 10.39900255203247}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1038, "completion_tokens": 606, "duration": 19.72574758529663}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, guess=0.0, max_iter=1000, tol=1e-6):\n        for _ in range(max_iter):\n            f_val = poly(ys, guess)\n            f_deriv_val = poly(derivative(ys), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess -= f_val / f_deriv_val\n        return guess\n\n    return newton_method(xs)", "prompt_tokens": 1186, "completion_tokens": 644, "duration": 20.806380033493042}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    j = 0  # Index for sorted divisible_by_three list\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 981, "completion_tokens": 579, "duration": 17.977378606796265}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 721, "completion_tokens": 297, "duration": 10.191342115402222}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 8.711400032043457}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 786, "completion_tokens": 383, "duration": 12.355583429336548}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 901, "completion_tokens": 419, "duration": 10.943259000778198}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 935, "completion_tokens": 448, "duration": 19.758170127868652}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    count = 0\n    a, b = 0, 1\n    while True:\n        if a != 0 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 917, "completion_tokens": 542, "duration": 14.752284049987793}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1209, "completion_tokens": 709, "duration": 21.760292053222656}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving in opposite directions.\n    \"\"\"\n    return n * n", "prompt_tokens": 939, "completion_tokens": 375, "duration": 12.263005018234253}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 769, "completion_tokens": 271, "duration": 12.290392875671387}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1147, "completion_tokens": 570, "duration": 17.521268129348755}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 748, "completion_tokens": 320, "duration": 8.95359182357788}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 738, "completion_tokens": 363, "duration": 11.276227474212646}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 1259, "completion_tokens": 735, "duration": 23.18376135826111}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 796, "completion_tokens": 402, "duration": 11.04397702217102}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 814, "completion_tokens": 390, "duration": 12.295174598693848}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 886, "completion_tokens": 415, "duration": 15.884784460067749}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 802, "completion_tokens": 382, "duration": 14.93668270111084}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 876, "completion_tokens": 363, "duration": 10.163756608963013}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 785, "completion_tokens": 360, "duration": 10.932245254516602}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 611, "completion_tokens": 223, "duration": 7.458551645278931}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 890, "completion_tokens": 336, "duration": 9.05632209777832}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 837, "completion_tokens": 481, "duration": 14.633238792419434}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "prompt_tokens": 904, "completion_tokens": 479, "duration": 17.371464729309082}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 867, "completion_tokens": 458, "duration": 12.282098054885864}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 839, "completion_tokens": 349, "duration": 8.717174768447876}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "prompt_tokens": 890, "completion_tokens": 583, "duration": 15.247541904449463}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 850, "completion_tokens": 386, "duration": 12.879117727279663}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 978, "completion_tokens": 558, "duration": 18.32831311225891}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 886, "completion_tokens": 393, "duration": 14.921637296676636}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 962, "completion_tokens": 442, "duration": 14.820658445358276}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s and s[-1].lower() == 'y':  # Check if 'y' is at the end\n        count += 1\n    return count", "prompt_tokens": 880, "completion_tokens": 392, "duration": 14.07558298110962}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 849, "completion_tokens": 436, "duration": 16.210139513015747}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 854, "completion_tokens": 349, "duration": 13.903608083724976}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1063, "completion_tokens": 373, "duration": 9.914631843566895}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1245, "completion_tokens": 396, "duration": 13.370753049850464}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 943, "completion_tokens": 361, "duration": 15.903249263763428}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 854, "completion_tokens": 352, "duration": 13.388742685317993}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 923, "completion_tokens": 465, "duration": 15.476720809936523}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1032, "completion_tokens": 295, "duration": 9.97296667098999}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1288, "completion_tokens": 882, "duration": 26.429893016815186}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1002, "completion_tokens": 438, "duration": 12.701754808425903}
{"task_id": "HumanEval/75", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n    return len(prime_factors) == 3", "prompt_tokens": 905, "completion_tokens": 557, "duration": 16.801954984664917}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 919, "completion_tokens": 387, "duration": 14.262452125549316}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a", "prompt_tokens": 827, "completion_tokens": 353, "duration": 12.440820932388306}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1361, "completion_tokens": 507, "duration": 18.16672706604004}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 888, "completion_tokens": 334, "duration": 12.341923475265503}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1112, "completion_tokens": 645, "duration": 16.906103372573853}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1131, "completion_tokens": 551, "duration": 23.528002977371216}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 990, "completion_tokens": 593, "duration": 15.204989910125732}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    start = 10**(n-1)\n    end = 10**n - 1\n    for i in range(start, end + 1):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 800, "completion_tokens": 519, "duration": 16.7098171710968}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    \n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    \n    return binary_representation", "prompt_tokens": 933, "completion_tokens": 452, "duration": 15.013454675674438}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 726, "completion_tokens": 370, "duration": 12.646349668502808}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 1010, "completion_tokens": 591, "duration": 19.02171540260315}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    # Sort by row in ascending order and then by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1122, "completion_tokens": 469, "duration": 18.164998292922974}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 1174, "completion_tokens": 720, "duration": 20.799991846084595}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4 if char.islower() else 4\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 861, "completion_tokens": 443, "duration": 14.390419006347656}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]", "prompt_tokens": 856, "completion_tokens": 385, "duration": 12.078463792800903}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences that start with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences using the specified delimiters\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Count sentences that start with \"I \"\n    count = sum(sentence.startswith(\"I \") or sentence == \"I\" for sentence in sentences)\n    return count", "prompt_tokens": 840, "completion_tokens": 429, "duration": 11.283060312271118}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 895, "completion_tokens": 375, "duration": 12.758473873138428}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            # Find the position of the vowel in the alphabet and add 2\n            if char.isupper():\n                encoded_message += chr(((ord(char) - 65 + 2) % 26) + 65)\n            else:\n                encoded_message += chr(((ord(char) - 97 + 2) % 26) + 97)\n        elif char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 923, "completion_tokens": 551, "duration": 17.87759232521057}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num):\n            largest_prime = max(largest_prime, num)\n    \n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1494, "completion_tokens": 728, "duration": 20.672868490219116}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 929, "completion_tokens": 351, "duration": 10.058778524398804}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 1101, "completion_tokens": 631, "duration": 23.004664421081543}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 817, "completion_tokens": 345, "duration": 9.107328176498413}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i] in 'AEIOU':  # Check if the character is an uppercase vowel\n            count += 1\n    return count", "prompt_tokens": 755, "completion_tokens": 435, "duration": 17.370666980743408}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 951, "completion_tokens": 379, "duration": 15.266508340835571}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 954, "completion_tokens": 553, "duration": 20.885334491729736}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 812, "completion_tokens": 324, "duration": 14.772833585739136}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 871, "completion_tokens": 503, "duration": 17.043317079544067}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))", "prompt_tokens": 954, "completion_tokens": 417, "duration": 12.929685115814209}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 812, "completion_tokens": 355, "duration": 10.791097402572632}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1160, "completion_tokens": 409, "duration": 13.317562818527222}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_of_numbers(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # even\n            result.append(factorial(i))\n        else:  # odd\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 863, "completion_tokens": 425, "duration": 15.25278091430664}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1075, "completion_tokens": 447, "duration": 15.69413447380066}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1469, "completion_tokens": 965, "duration": 20.67437219619751}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1338, "completion_tokens": 539, "duration": 17.673784017562866}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_count_lst1 <= even_count_lst2 else \"NO\"", "prompt_tokens": 1009, "completion_tokens": 387, "duration": 15.574380159378052}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    most_common_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return most_common_letters", "prompt_tokens": 983, "completion_tokens": 463, "duration": 15.799674272537231}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1350, "completion_tokens": 760, "duration": 17.892082691192627}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1108, "completion_tokens": 537, "duration": 16.324443817138672}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 983, "completion_tokens": 562, "duration": 19.519996166229248}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 1646, "completion_tokens": 734, "duration": 20.55654215812683}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 995, "completion_tokens": 378, "duration": 11.325308561325073}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n\n    def consonant_count(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 986, "completion_tokens": 396, "duration": 13.32876205444336}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 907, "completion_tokens": 378, "duration": 12.959885358810425}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Check both possible concatenations\n    for order in [lst, lst[::-1]]:\n        stack = []\n        for s in order:\n            for char in s:\n                if char == '(':\n                    stack.append(char)\n                elif char == ')':\n                    if not stack:\n                        break\n                    stack.pop()\n            else:\n                continue\n            break\n        else:\n            if not stack:\n                return 'Yes'\n    return 'No'", "prompt_tokens": 1165, "completion_tokens": 781, "duration": 23.549668788909912}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1058, "completion_tokens": 341, "duration": 8.683133602142334}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 956, "completion_tokens": 495, "duration": 17.336336851119995}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < abs(num) < 100)", "prompt_tokens": 1010, "completion_tokens": 521, "duration": 17.808720350265503}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(x):\n        seq = [x]\n        while x > 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 1223, "completion_tokens": 587, "duration": 24.16918969154358}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check the range of month and day\n    if month < 1 or month > 12 or day < 1:\n        return False\n    \n    # Check the number of days in each month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1173, "completion_tokens": 606, "duration": 24.43294858932495}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 936, "completion_tokens": 417, "duration": 15.030197381973267}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1173, "completion_tokens": 443, "duration": 12.482141733169556}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1269, "completion_tokens": 575, "duration": 20.49058747291565}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_of_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 927, "completion_tokens": 470, "duration": 17.780036449432373}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, 1, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = {(i, j, 1): [grid[i][j]] for i in range(N) for j in range(N)}\n\n    while pq:\n        cost, x, y, steps, path = heappop(pq)\n        if steps == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_cost = cost + grid[nx][ny]\n                new_path = path + [grid[nx][ny]]\n                if (nx, ny, steps + 1) not in visited or visited[(nx, ny, steps + 1)] > new_path:\n                    visited[(nx, ny, steps + 1)] = new_path\n                    heappush(pq, (new_cost, nx, ny, steps + 1, new_path))", "prompt_tokens": 1919, "completion_tokens": 1104, "duration": 45.85069441795349}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        memo[n] = [1, 3, 2]\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = tri(n-1) + [1 + n / 2]\n    else:\n        prev = tri(n-1)\n        memo[n] = prev + [prev[-1] + prev[-2] + tri(n+1, memo)[0]]\n    return memo[n]", "prompt_tokens": 1115, "completion_tokens": 475, "duration": 16.336846113204956}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 774, "completion_tokens": 399, "duration": 14.684661865234375}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if not stack:\n                return False\n    return False", "prompt_tokens": 1066, "completion_tokens": 557, "duration": 17.855326890945435}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 948, "completion_tokens": 357, "duration": 8.562644720077515}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 882, "completion_tokens": 359, "duration": 11.957621574401855}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 967, "completion_tokens": 505, "duration": 14.800552368164062}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 863, "completion_tokens": 372, "duration": 12.438030481338501}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None", "prompt_tokens": 910, "completion_tokens": 477, "duration": 22.24635076522827}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False", "prompt_tokens": 917, "completion_tokens": 499, "duration": 12.698400259017944}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "prompt_tokens": 886, "completion_tokens": 468, "duration": 17.11759114265442}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    text = text.replace(\"   \", \"-\")\n    # Replace remaining spaces with '_'\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 819, "completion_tokens": 396, "duration": 20.44163155555725}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for more than three digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1060, "completion_tokens": 495, "duration": 19.280959367752075}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1097, "completion_tokens": 529, "duration": 16.38211679458618}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 950, "completion_tokens": 432, "duration": 17.641299962997437}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    new_num = num1 * num2\n    new_denom = denom1 * denom2\n    \n    return new_num % new_denom == 0", "prompt_tokens": 1046, "completion_tokens": 503, "duration": 21.48467516899109}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 851, "completion_tokens": 351, "duration": 12.335042715072632}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))", "prompt_tokens": 827, "completion_tokens": 360, "duration": 11.975461483001709}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    # Iterate through the array to find valid triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1224, "completion_tokens": 812, "duration": 24.22326636314392}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1019, "completion_tokens": 411, "duration": 12.644794702529907}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    \"\"\"Sorts a list of strings by their length and alphabetically if lengths are equal, removing odd-length strings.\"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length first, then alphabetically\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 1103, "completion_tokens": 516, "duration": 19.243962287902832}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 869, "completion_tokens": 470, "duration": 15.476995468139648}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 882, "completion_tokens": 337, "duration": 12.897183179855347}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1078, "completion_tokens": 348, "duration": 13.497280836105347}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1211, "completion_tokens": 430, "duration": 12.555788516998291}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 890, "completion_tokens": 348, "duration": 10.323754072189331}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 902, "completion_tokens": 538, "duration": 20.397240161895752}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 948, "completion_tokens": 581, "duration": 16.62751579284668}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 933, "completion_tokens": 457, "duration": 16.315919876098633}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 910, "completion_tokens": 434, "duration": 10.909720659255981}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1115, "completion_tokens": 298, "duration": 9.597390413284302}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1115, "completion_tokens": 638, "duration": 23.229676723480225}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 867, "completion_tokens": 406, "duration": 16.96969699859619}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 801, "completion_tokens": 387, "duration": 11.853225469589233}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 897, "completion_tokens": 462, "duration": 14.191647052764893}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 842, "completion_tokens": 356, "duration": 14.219940900802612}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is complete\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 973, "completion_tokens": 561, "duration": 20.89055824279785}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 748, "completion_tokens": 308, "duration": 11.79439115524292}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 982, "completion_tokens": 492, "duration": 11.5845468044281}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 980, "completion_tokens": 495, "duration": 19.974971294403076}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimiter)\n        result.append(num)\n    return result", "prompt_tokens": 825, "completion_tokens": 420, "duration": 14.006988286972046}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1010, "completion_tokens": 595, "duration": 17.733229875564575}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 785, "completion_tokens": 334, "duration": 10.552352905273438}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 903, "completion_tokens": 449, "duration": 11.236401557922363}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 1222, "completion_tokens": 857, "duration": 26.810516834259033}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 922, "completion_tokens": 403, "duration": 13.814522981643677}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 819, "completion_tokens": 402, "duration": 12.612167596817017}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 893, "completion_tokens": 486, "duration": 13.753091096878052}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 805, "completion_tokens": 399, "duration": 15.657541990280151}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 796, "completion_tokens": 446, "duration": 13.760009050369263}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 728, "completion_tokens": 318, "duration": 12.835167169570923}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 749, "completion_tokens": 327, "duration": 12.716347455978394}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 959, "completion_tokens": 393, "duration": 12.046539783477783}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases. \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 875, "completion_tokens": 481, "duration": 13.737454175949097}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 828, "completion_tokens": 423, "duration": 18.89938449859619}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 991, "completion_tokens": 473, "duration": 12.400283098220825}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 963, "completion_tokens": 470, "duration": 14.13568115234375}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 796, "completion_tokens": 347, "duration": 11.116300344467163}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 736, "completion_tokens": 363, "duration": 9.324137926101685}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 785, "completion_tokens": 419, "duration": 11.916446447372437}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 979, "completion_tokens": 545, "duration": 18.397512435913086}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n        else:\n            seen.remove(number)\n            result.remove(number)\n    return result", "prompt_tokens": 743, "completion_tokens": 340, "duration": 12.110514402389526}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 710, "completion_tokens": 344, "duration": 10.082062005996704}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)", "prompt_tokens": 778, "completion_tokens": 396, "duration": 12.529947757720947}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 787, "completion_tokens": 347, "duration": 13.313858032226562}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 823, "completion_tokens": 317, "duration": 10.540842294692993}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 862, "completion_tokens": 415, "duration": 14.029907703399658}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n    \n    def newton_method(f, f_prime, guess=0.0, epsilon=1e-6):\n        x = guess\n        while True:\n            x_new = x - f(x) / f_prime(x)\n            if abs(x_new - x) < epsilon:\n                break\n            x = x_new\n        return x\n    \n    f = lambda x: poly(xs, x)\n    f_prime = lambda x: poly(derivative(xs), x)\n    \n    return newton_method(f, f_prime)", "prompt_tokens": 1162, "completion_tokens": 635, "duration": 22.27085256576538}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to hold the result\n    result = []\n    # Counter for elements in divisible_by_three\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If index is divisible by 3, append from sorted list\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            # Otherwise, append the original element\n            result.append(l[i])\n    return result", "prompt_tokens": 970, "completion_tokens": 529, "duration": 20.824426412582397}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 727, "completion_tokens": 302, "duration": 9.601705551147461}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 732, "completion_tokens": 279, "duration": 8.737814903259277}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 854, "completion_tokens": 481, "duration": 16.80633306503296}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 945, "completion_tokens": 460, "duration": 16.49208641052246}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 954, "completion_tokens": 467, "duration": 16.468806505203247}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 2  # Starting from the 2nd index as the first prime Fibonacci number is at index 3 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, ...)\n    while True:\n        fib_num = fibonacci(fib_index)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        fib_index += 1", "prompt_tokens": 904, "completion_tokens": 620, "duration": 19.382055521011353}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1191, "completion_tokens": 691, "duration": 18.157254219055176}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars are moving at the same speed and are infinitely sturdy, each car moving left to right will eventually collide with each car moving right to left. Therefore, the total number of collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 1025, "completion_tokens": 495, "duration": 17.520310401916504}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 774, "completion_tokens": 276, "duration": 11.957848072052002}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1167, "completion_tokens": 590, "duration": 21.906728267669678}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 753, "completion_tokens": 325, "duration": 10.484413146972656}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 735, "completion_tokens": 360, "duration": 14.294719696044922}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]", "prompt_tokens": 1145, "completion_tokens": 620, "duration": 22.657005310058594}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 782, "completion_tokens": 388, "duration": 15.329659223556519}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 820, "completion_tokens": 396, "duration": 9.018762826919556}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 1045, "completion_tokens": 558, "duration": 17.267432928085327}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 804, "completion_tokens": 381, "duration": 11.038212060928345}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 877, "completion_tokens": 364, "duration": 14.316990375518799}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 786, "completion_tokens": 361, "duration": 13.454411029815674}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 666, "completion_tokens": 278, "duration": 56.98089551925659}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 891, "completion_tokens": 337, "duration": 10.146426677703857}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 815, "completion_tokens": 452, "duration": 16.3770432472229}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 931, "completion_tokens": 508, "duration": 16.6738498210907}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 812, "completion_tokens": 409, "duration": 10.70465087890625}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 833, "completion_tokens": 343, "duration": 13.434473991394043}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 913, "completion_tokens": 581, "duration": 18.748610019683838}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 853, "completion_tokens": 389, "duration": 11.869064807891846}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1123, "completion_tokens": 703, "duration": 20.245707035064697}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 840, "completion_tokens": 347, "duration": 12.678399562835693}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 921, "completion_tokens": 401, "duration": 13.708423137664795}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 835, "completion_tokens": 331, "duration": 13.75019097328186}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)  # Handle shift larger than the number of digits\n    shifted = x_str[-shift:] + x_str[:-shift]\n    return shifted", "prompt_tokens": 930, "completion_tokens": 515, "duration": 16.59399104118347}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 814, "completion_tokens": 309, "duration": 9.454015731811523}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1178, "completion_tokens": 492, "duration": 15.817855834960938}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1298, "completion_tokens": 451, "duration": 14.472033023834229}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    max_val = -1\n    for key, value in freq.items():\n        if key <= value:\n            max_val = max(max_val, key)\n    return max_val", "prompt_tokens": 992, "completion_tokens": 428, "duration": 21.759125471115112}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    result = [0] * n\n    i, j = 0, n - 1\n    for k in range(n):\n        if k % 2 == 0:\n            result[k] = sorted_lst[i]\n            i += 1\n        else:\n            result[k] = sorted_lst[j]\n            j -= 1\n    return result", "prompt_tokens": 1117, "completion_tokens": 664, "duration": 17.757155895233154}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)", "prompt_tokens": 881, "completion_tokens": 571, "duration": 21.865089893341064}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1047, "completion_tokens": 310, "duration": 10.25999116897583}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1320, "completion_tokens": 914, "duration": 31.965399265289307}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "prompt_tokens": 999, "completion_tokens": 419, "duration": 20.890217781066895}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(set(factors)) == 3", "prompt_tokens": 973, "completion_tokens": 681, "duration": 20.211539030075073}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 875, "completion_tokens": 343, "duration": 14.06745171546936}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1/3))\n    return root ** 3 == abs_a", "prompt_tokens": 795, "completion_tokens": 319, "duration": 11.663475751876831}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1290, "completion_tokens": 436, "duration": 13.593923091888428}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 1001, "completion_tokens": 470, "duration": 14.466258764266968}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 1031, "completion_tokens": 564, "duration": 19.91680121421814}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1178, "completion_tokens": 585, "duration": 23.88680386543274}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 826, "completion_tokens": 428, "duration": 17.762422561645508}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 834, "completion_tokens": 509, "duration": 13.803295612335205}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += count_set_bits(N % 10)\n        N //= 10\n\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 1029, "completion_tokens": 544, "duration": 17.13020920753479}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 692, "completion_tokens": 315, "duration": 11.730849742889404}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 940, "completion_tokens": 521, "duration": 15.057212352752686}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by row in ascending order and then by column in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates", "prompt_tokens": 1137, "completion_tokens": 488, "duration": 21.274400234222412}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    if not array:\n        return []\n    sum_edges = array[0] + array[-1]\n    if sum_edges % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1202, "completion_tokens": 630, "duration": 24.465942859649658}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            return c\n    return ''.join(shift_char(c) for c in s)", "prompt_tokens": 923, "completion_tokens": 502, "duration": 15.64686369895935}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    unique_lst = list(set(lst))  # Remove duplicates\n    unique_lst.sort()\n    if len(unique_lst) >= 2:\n        return unique_lst[1]\n    return None", "prompt_tokens": 891, "completion_tokens": 430, "duration": 13.01706838607788}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 896, "completion_tokens": 433, "duration": 15.083820819854736}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 913, "completion_tokens": 393, "duration": 14.366277933120728}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case and replacing vowels with the letter 2 places ahead.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's',\n                         'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()", "prompt_tokens": 824, "completion_tokens": 449, "duration": 16.627830028533936}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return digit_sum(largest_prime)", "prompt_tokens": 1463, "completion_tokens": 708, "duration": 19.42499542236328}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 922, "completion_tokens": 344, "duration": 14.963205099105835}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 1068, "completion_tokens": 587, "duration": 22.56959104537964}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 802, "completion_tokens": 326, "duration": 9.452665328979492}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 861, "completion_tokens": 487, "duration": 19.453450441360474}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 965, "completion_tokens": 440, "duration": 12.673670768737793}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = n\n    result = []\n    for i in range(n):\n        result.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return result", "prompt_tokens": 966, "completion_tokens": 459, "duration": 17.702259063720703}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 815, "completion_tokens": 328, "duration": 11.735591173171997}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 870, "completion_tokens": 502, "duration": 14.538788557052612}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))", "prompt_tokens": 995, "completion_tokens": 458, "duration": 12.859862327575684}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 825, "completion_tokens": 364, "duration": 9.908729791641235}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_sorted_reversed_arr]", "prompt_tokens": 1183, "completion_tokens": 435, "duration": 12.204216241836548}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(i):\n        result = 1\n        for j in range(1, i+1):\n            result *= j\n        return result\n    \n    def sum_to_i(i):\n        return sum(range(1, i+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(sum_to_i(i))\n        else:\n            result.append(factorial(i))\n    return result", "prompt_tokens": 890, "completion_tokens": 444, "duration": 15.254021406173706}
{"task_id": "HumanEval/107", "generated_code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1078, "completion_tokens": 449, "duration": 15.382058143615723}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1361, "completion_tokens": 890, "duration": 21.971418380737305}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr or len(arr) == 1:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1252, "completion_tokens": 460, "duration": 19.029746770858765}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 992, "completion_tokens": 559, "duration": 23.004276514053345}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    words = test.split()\n    counts = Counter(words)\n    max_count = max(counts.values(), default=0)\n    return {word: count for word, count in counts.items() if count == max_count}", "prompt_tokens": 996, "completion_tokens": 448, "duration": 15.910320281982422}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1119, "completion_tokens": 529, "duration": 12.640881776809692}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 961, "completion_tokens": 390, "duration": 13.82701826095581}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 1021, "completion_tokens": 600, "duration": 23.316832304000854}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_lowerings = 0\n    for row in grid:\n        total_lowerings += math.ceil(sum(row) / capacity)\n    return total_lowerings", "prompt_tokens": 1362, "completion_tokens": 459, "duration": 16.024890422821045}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 991, "completion_tokens": 533, "duration": 18.68020009994507}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 998, "completion_tokens": 410, "duration": 11.89516019821167}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and i != len(word) - 1 and i != 0:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 928, "completion_tokens": 415, "duration": 18.140594244003296}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Check if concatenating in the original order makes a good string\n    if is_good_string(lst[0] + lst[1]):\n        return 'Yes'\n    # Check if concatenating in the reverse order makes a good string\n    if is_good_string(lst[1] + lst[0]):\n        return 'Yes'\n    return 'No'\n\ndef is_good_string(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1165, "completion_tokens": 814, "duration": 28.376860857009888}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1085, "completion_tokens": 368, "duration": 12.319577693939209}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 982, "completion_tokens": 521, "duration": 18.65554666519165}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum_of_elements = 0\n    for i in range(k):\n        if arr[i] >= -99 and arr[i] <= 99:\n            sum_of_elements += arr[i]\n    return sum_of_elements", "prompt_tokens": 958, "completion_tokens": 453, "duration": 17.006709814071655}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(x):\n        seq = [x]\n        while x > 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    sequence = collatz_sequence(n)\n    odd_numbers = [num for num in sequence if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 1220, "completion_tokens": 584, "duration": 26.61090660095215}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or len(date.split('-')) != 3:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2:\n        if ((year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)) and day > 29:\n            return False\n        elif day > 28:\n            return False\n    return True", "prompt_tokens": 1161, "completion_tokens": 553, "duration": 26.2258403301239}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 895, "completion_tokens": 376, "duration": 16.253623723983765}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1173, "completion_tokens": 421, "duration": 11.308382511138916}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1237, "completion_tokens": 548, "duration": 18.551084756851196}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 963, "completion_tokens": 496, "duration": 13.228305339813232}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    dp = {(i, j, 1): [grid[i][j]] for i in range(N) for j in range(N)}\n    heap = [(grid[i][j], i, j, 1) for i in range(N) for j in range(N)]\n\n    while heap:\n        _, x, y, length = heappop(heap)\n        if length == k:\n            return dp[(x, y, length)]\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_length = length + 1\n                new_path = dp[(x, y, length)] + [grid[nx][ny]]\n                if (nx, ny, new_length) not in dp or dp[(nx, ny, new_length)] > new_path:\n                    dp[(nx, ny, new_length)] = new_path\n                    heappush(heap, (grid[nx][ny], nx, ny, new_length))", "prompt_tokens": 1897, "completion_tokens": 1096, "duration": 42.00496697425842}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(m, memo):\n        if m in memo:\n            return memo[m]\n        if m == 1:\n            return 3\n        if m % 2 == 0:\n            memo[m] = 1 + m / 2\n        else:\n            memo[m] = helper(m - 1, memo) + helper(m - 2, memo) + helper(m + 1, memo)\n        return memo[m]\n    \n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n        result.append(memo[i])\n    return result[:n + 1]", "prompt_tokens": 1180, "completion_tokens": 556, "duration": 18.205280303955078}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 776, "completion_tokens": 462, "duration": 17.796988010406494}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:\n                return True\n    return False", "prompt_tokens": 1016, "completion_tokens": 501, "duration": 20.363805532455444}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    from math import ceil\n    return sum(ceil(x) ** 2 for x in lst)", "prompt_tokens": 1030, "completion_tokens": 442, "duration": 13.05854320526123}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2].isspace():\n        return True\n    return False", "prompt_tokens": 891, "completion_tokens": 366, "duration": 14.200116872787476}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 1054, "completion_tokens": 592, "duration": 23.001001119613647}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 844, "completion_tokens": 353, "duration": 12.593383312225342}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 870, "completion_tokens": 372, "duration": 23.481711626052856}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    # This is because we can use 2, 2, 2, (n-6) when n > 8 and 2, 2, 2, 2 when n = 8.\n    return n % 2 == 0", "prompt_tokens": 926, "completion_tokens": 632, "duration": 22.34299373626709}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        return x * factorial(x-1)\n    \n    if n == 0:\n        return 1\n    return factorial(n) * special_factorial(n-1)", "prompt_tokens": 859, "completion_tokens": 426, "duration": 11.428775072097778}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\"   \", \"-\")  # First replace instances of more than 2 spaces with '-'\n    text = text.replace(\" \", \"_\")  # Then replace remaining spaces with '_'\n    return text", "prompt_tokens": 806, "completion_tokens": 386, "duration": 10.5994234085083}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check for more than three digits in the name\n    digits = sum(c.isdigit() for c in name)\n    if digits > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1033, "completion_tokens": 465, "duration": 20.69434380531311}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 1071, "completion_tokens": 508, "duration": 15.539587259292603}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1086, "completion_tokens": 585, "duration": 17.877832174301147}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 1055, "completion_tokens": 642, "duration": 24.543787717819214}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 848, "completion_tokens": 451, "duration": 19.39046859741211}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_special(n):\n        n = abs(n)  # Handle negative numbers\n        if n <= 10:\n            return False\n        last_digit = n % 10\n        first_digit = int(str(n)[0])\n        return last_digit % 2 == 1 and first_digit % 2 == 1\n    return sum(1 for num in nums if is_special(num))", "prompt_tokens": 889, "completion_tokens": 437, "duration": 17.99604892730713}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count of valid triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1152, "completion_tokens": 762, "duration": 26.33156180381775}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 1026, "completion_tokens": 420, "duration": 14.474224328994751}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first by length, then alphabetically if lengths are the same\n    sorted_lst = sorted(filtered_lst, key=lambda word: (len(word), word))\n    return sorted_lst", "prompt_tokens": 1083, "completion_tokens": 484, "duration": 15.670098543167114}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 900, "completion_tokens": 501, "duration": 18.616461277008057}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 902, "completion_tokens": 362, "duration": 10.604121685028076}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [0 if g == s else abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 1088, "completion_tokens": 357, "duration": 12.334189414978027}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1246, "completion_tokens": 465, "duration": 18.217838525772095}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Concatenate the second string with itself\n    b_double = b * 2\n    # Check if the first string is a substring of the concatenated string\n    return a in b_double", "prompt_tokens": 968, "completion_tokens": 471, "duration": 16.550113916397095}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 723, "completion_tokens": 359, "duration": 12.547894477844238}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 996, "completion_tokens": 694, "duration": 19.59236764907837}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 934, "completion_tokens": 458, "duration": 17.392298698425293}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 926, "completion_tokens": 450, "duration": 15.309177160263062}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 1238, "completion_tokens": 428, "duration": 14.074987173080444}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1078, "completion_tokens": 669, "duration": 21.72843027114868}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 862, "completion_tokens": 393, "duration": 15.275291204452515}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 796, "completion_tokens": 382, "duration": 9.760303735733032}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 836, "completion_tokens": 402, "duration": 11.826751470565796}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 816, "completion_tokens": 330, "duration": 10.907692670822144}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If stack is empty, a group is completed\n                result.append(\"\".join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 1036, "completion_tokens": 627, "duration": 17.649616479873657}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 728, "completion_tokens": 288, "duration": 10.47543740272522}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 916, "completion_tokens": 426, "duration": 13.36836552619934}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 937, "completion_tokens": 447, "duration": 15.375149488449097}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 813, "completion_tokens": 388, "duration": 14.164505958557129}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        stack = []\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 950, "completion_tokens": 522, "duration": 18.47104549407959}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 788, "completion_tokens": 353, "duration": 11.108839273452759}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 869, "completion_tokens": 408, "duration": 15.611454010009766}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 1024, "completion_tokens": 584, "duration": 18.01997685432434}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 977, "completion_tokens": 446, "duration": 15.000675678253174}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = []\n    for char_a, char_b in zip(a, b):\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    return ''.join(result)", "prompt_tokens": 798, "completion_tokens": 406, "duration": 13.993505239486694}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 858, "completion_tokens": 410, "duration": 12.7570481300354}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 817, "completion_tokens": 411, "duration": 15.267714262008667}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 749, "completion_tokens": 363, "duration": 9.26335096359253}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 748, "completion_tokens": 338, "duration": 10.11075234413147}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 725, "completion_tokens": 303, "duration": 8.561990976333618}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 949, "completion_tokens": 383, "duration": 12.884388446807861}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 870, "completion_tokens": 453, "duration": 11.936534404754639}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 803, "completion_tokens": 398, "duration": 17.534072875976562}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 904, "completion_tokens": 384, "duration": 12.353627443313599}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 980, "completion_tokens": 492, "duration": 14.083863735198975}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 775, "completion_tokens": 326, "duration": 10.618061065673828}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 13.212754011154175}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 788, "completion_tokens": 422, "duration": 12.566009759902954}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 969, "completion_tokens": 491, "duration": 12.724995613098145}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 889, "completion_tokens": 483, "duration": 16.755123138427734}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)", "prompt_tokens": 718, "completion_tokens": 352, "duration": 11.907680988311768}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 762, "completion_tokens": 404, "duration": 12.756203174591064}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 794, "completion_tokens": 413, "duration": 11.988899946212769}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 821, "completion_tokens": 315, "duration": 11.438400745391846}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 871, "completion_tokens": 424, "duration": 13.09736180305481}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [i * ys[i] for i in range(1, len(ys))]\n\n    def newton_method(ys, guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:  # Avoid division by zero\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0  # Return last approximation if no exact zero found within tolerance\n\n    return newton_method(xs)", "prompt_tokens": 1170, "completion_tokens": 683, "duration": 29.079806327819824}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to hold the result\n    result = []\n    j = 0  # Index for elements in divisible_by_three\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 1053, "completion_tokens": 651, "duration": 20.403298377990723}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 718, "completion_tokens": 294, "duration": 10.6344633102417}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 733, "completion_tokens": 280, "duration": 9.73106336593628}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 792, "completion_tokens": 455, "duration": 20.582355737686157}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    odd_indices = [l[i] for i in range(1, len(l), 2)]\n    sorted_even_indices = sorted(even_indices)\n    result = []\n    even_index = odd_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(odd_indices[odd_index])\n            odd_index += 1\n    return result", "prompt_tokens": 961, "completion_tokens": 546, "duration": 18.687068700790405}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 932, "completion_tokens": 448, "duration": 16.16300916671753}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    count, a, b = 0, 0, 1\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 904, "completion_tokens": 528, "duration": 17.098025798797607}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1196, "completion_tokens": 694, "duration": 22.132779836654663}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move at the same speed and are infinitely sturdy, each car moving left to right will\n    eventually collide with each car moving right to left. Therefore, the total number of collisions\n    will be the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 975, "completion_tokens": 448, "duration": 14.972563743591309}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 816, "completion_tokens": 413, "duration": 18.019747018814087}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1084, "completion_tokens": 507, "duration": 15.070394039154053}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 759, "completion_tokens": 331, "duration": 12.28362488746643}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 734, "completion_tokens": 392, "duration": 13.643197536468506}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    \n    return dp[n]", "prompt_tokens": 1105, "completion_tokens": 610, "duration": 18.633768796920776}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 909, "completion_tokens": 515, "duration": 14.752000093460083}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 814, "completion_tokens": 390, "duration": 16.238965272903442}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 1049, "completion_tokens": 578, "duration": 18.017807722091675}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 777, "completion_tokens": 357, "duration": 12.947586297988892}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 872, "completion_tokens": 359, "duration": 12.952962875366211}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 719, "completion_tokens": 285, "duration": 10.125494241714478}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 599, "completion_tokens": 211, "duration": 7.732055187225342}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 885, "completion_tokens": 331, "duration": 9.645510911941528}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 793, "completion_tokens": 424, "duration": 15.313458442687988}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "prompt_tokens": 896, "completion_tokens": 469, "duration": 13.007288455963135}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 809, "completion_tokens": 400, "duration": 14.937970876693726}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 844, "completion_tokens": 354, "duration": 10.390717029571533}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 892, "completion_tokens": 514, "duration": 14.525976657867432}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 862, "completion_tokens": 398, "duration": 13.18097186088562}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 825, "completion_tokens": 404, "duration": 14.529385328292847}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 824, "completion_tokens": 331, "duration": 11.180142164230347}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 960, "completion_tokens": 440, "duration": 14.597744464874268}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s[:-1] if char.lower() in vowels)\n    if s and s[-1].lower() == 'y':  # Check if 'y' is at the end\n        count += 1\n    return count", "prompt_tokens": 857, "completion_tokens": 372, "duration": 10.880254745483398}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    if shift > len(num_str):\n        return num_str[::-1]\n    shift = shift % len(num_str)\n    return num_str[-shift:] + num_str[:-shift]", "prompt_tokens": 815, "completion_tokens": 401, "duration": 16.66104531288147}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 811, "completion_tokens": 306, "duration": 8.293654441833496}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1061, "completion_tokens": 371, "duration": 10.105952739715576}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    return [smallest_even, index] if index != -1 else []", "prompt_tokens": 1405, "completion_tokens": 550, "duration": 17.725948333740234}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq:\n            result = max(result, num)\n    return result", "prompt_tokens": 965, "completion_tokens": 406, "duration": 18.027889013290405}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 847, "completion_tokens": 345, "duration": 14.158203125}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 927, "completion_tokens": 469, "duration": 17.225764513015747}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1157, "completion_tokens": 420, "duration": 13.818913221359253}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1308, "completion_tokens": 756, "duration": 18.81145977973938}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1019, "completion_tokens": 455, "duration": 16.48188805580139}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_factors = []\n    for i in range(2, a + 1):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    return len(prime_factors) == 3", "prompt_tokens": 952, "completion_tokens": 619, "duration": 23.677167654037476}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 919, "completion_tokens": 379, "duration": 13.27651309967041}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 808, "completion_tokens": 308, "duration": 10.938383102416992}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 1344, "completion_tokens": 489, "duration": 13.737668991088867}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 931, "completion_tokens": 400, "duration": 15.193696022033691}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 934, "completion_tokens": 444, "duration": 14.872329950332642}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1170, "completion_tokens": 590, "duration": 22.436269760131836}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 817, "completion_tokens": 419, "duration": 14.419642210006714}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 543, "duration": 14.495404720306396}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    binary_sum = ''\n    if sum_of_digits == 0:\n        return '0'\n    while sum_of_digits > 0:\n        binary_sum = str(sum_of_digits % 2) + binary_sum\n        sum_of_digits //= 2\n    return binary_sum", "prompt_tokens": 949, "completion_tokens": 492, "duration": 19.000313997268677}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0)", "prompt_tokens": 717, "completion_tokens": 339, "duration": 9.503169536590576}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    # Split the input string into words and non-words (e.g., spaces and punctuation)\n    import re\n    words_and_spaces = re.findall(r'\\b\\w+\\b|[^\\w\\s]', s)\n    \n    # Sort the characters within each word\n    sorted_words_and_spaces = [''.join(sorted(word)) if word.isalpha() else word for word in words_and_spaces]\n    \n    # Join the sorted words and non-words back together\n    return ''.join(sorted_words_and_spaces)", "prompt_tokens": 899, "completion_tokens": 524, "duration": 15.922607898712158}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1153, "completion_tokens": 398, "duration": 11.967851877212524}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1177, "completion_tokens": 710, "duration": 28.022438049316406}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s)", "prompt_tokens": 845, "completion_tokens": 359, "duration": 9.94633150100708}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) > 1:\n        return unique_sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 887, "completion_tokens": 379, "duration": 12.403881311416626}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [s.strip() for s in re.split(r'[.?!]', S) if s.strip()]\n    return sum(sentence.split()[0] == 'I' for sentence in sentences if sentence)", "prompt_tokens": 813, "completion_tokens": 346, "duration": 12.251980543136597}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 903, "completion_tokens": 383, "duration": 15.220199584960938}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                encoded += chr((ord(char.lower()) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                encoded += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            if char.isupper():\n                encoded += char.lower()\n            else:\n                encoded += char.upper()\n    return encoded", "prompt_tokens": 904, "completion_tokens": 505, "duration": 61.85526394844055}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    digit_sum = 0\n    while largest_prime > 0:\n        digit_sum += largest_prime % 10\n        largest_prime //= 10\n\n    return digit_sum", "prompt_tokens": 1517, "completion_tokens": 808, "duration": 24.041252851486206}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 916, "completion_tokens": 338, "duration": 12.575629949569702}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 987, "completion_tokens": 517, "duration": 15.393794536590576}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 814, "completion_tokens": 338, "duration": 13.463468551635742}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 815, "completion_tokens": 441, "duration": 15.450410604476929}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 979, "completion_tokens": 407, "duration": 13.778686285018921}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 1015, "completion_tokens": 614, "duration": 24.524769067764282}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 814, "completion_tokens": 327, "duration": 15.079917669296265}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:  # If the range is invalid\n        return -1\n    if y % 2 == 0:  # If y is even, it's the largest even number in the range\n        return y\n    if (y - 1) >= x:  # If y is odd, check if (y-1) is within the range\n        return y - 1\n    return -1  # If there's no even number in the range", "prompt_tokens": 815, "completion_tokens": 517, "duration": 18.446717262268066}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 922, "completion_tokens": 377, "duration": 12.01822566986084}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 835, "completion_tokens": 384, "duration": 14.153643131256104}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[x] for x in filtered_sorted_reversed]", "prompt_tokens": 1196, "completion_tokens": 446, "duration": 15.822404384613037}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(i):\n        result = 1\n        for x in range(1, i + 1):\n            result *= x\n        return result\n\n    def sum_numbers(i):\n        result = 0\n        for x in range(1, i + 1):\n            result += x\n        return result\n\n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum_numbers(i))\n    return result_list", "prompt_tokens": 914, "completion_tokens": 488, "duration": 18.698532819747925}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1139, "completion_tokens": 511, "duration": 17.503547191619873}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1268, "completion_tokens": 764, "duration": 22.4012553691864}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1369, "completion_tokens": 570, "duration": 15.643862247467041}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_lst1 <= even_lst2 else \"NO\"", "prompt_tokens": 1019, "completion_tokens": 393, "duration": 11.001347541809082}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    from collections import Counter\n    if not test:\n        return {}\n    letters = test.split()\n    letter_counts = Counter(letters)\n    max_count = max(letter_counts.values())\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 962, "completion_tokens": 467, "duration": 18.320401906967163}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1044, "completion_tokens": 454, "duration": 15.0433509349823}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1007, "completion_tokens": 436, "duration": 16.1294527053833}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 929, "completion_tokens": 508, "duration": 16.489200115203857}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1426, "completion_tokens": 512, "duration": 12.40263032913208}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 971, "completion_tokens": 354, "duration": 11.432604551315308}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for char in word.lower() if char in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1011, "completion_tokens": 421, "duration": 15.677707433700562}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 932, "completion_tokens": 403, "duration": 11.896613121032715}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    # Check both possible concatenations\n    if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1249, "completion_tokens": 874, "duration": 24.42605209350586}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1056, "completion_tokens": 339, "duration": 9.433091402053833}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 855, "completion_tokens": 394, "duration": 11.658111095428467}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 0 < arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 966, "completion_tokens": 490, "duration": 15.611466407775879}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always part of the sequence and odd\n    return sorted(odd_numbers)", "prompt_tokens": 1256, "completion_tokens": 607, "duration": 16.61605215072632}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 1184, "completion_tokens": 564, "duration": 32.60854911804199}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 928, "completion_tokens": 409, "duration": 13.272623538970947}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i + 1] == lst[i - 1]:\n            return False\n    return True", "prompt_tokens": 1208, "completion_tokens": 524, "duration": 16.688563108444214}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1256, "completion_tokens": 567, "duration": 14.915345907211304}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    product_of_signs = 1\n    for num in arr:\n        if num < 0:\n            product_of_signs *= -1\n        elif num == 0:\n            product_of_signs = 0\n            break\n    return sum(abs(num) for num in arr) * product_of_signs", "prompt_tokens": 869, "completion_tokens": 516, "duration": 16.800710678100586}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappop, heappush\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    # Convert grid to value: position for easier lookup\n    value_to_pos = {grid[i][j]: (i, j) for i in range(n) for j in range(n)}\n    # Priority queue for BFS: (total_cost, path_length, last_value, path)\n    pq = [(0, 0, grid[0][0], [grid[0][0]])]\n    visited = set()\n\n    while pq:\n        total_cost, path_length, last_value, path = heappop(pq)\n        if path_length == k:\n            return path\n        if (last_value, path_length) in visited:\n            continue\n        visited.add((last_value, path_length))\n        last_pos = value_to_pos[last_value]\n\n        for dx, dy in directions:\n            nx, ny = last_pos[0] + dx, last_pos[1] + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                next_value = grid[nx][ny]\n                new_path = path + [next_value]\n                heappush(pq, (total_cost + next_value, path_length + 1, next_value, new_path))\n\n    return []", "prompt_tokens": 1903, "completion_tokens": 1111, "duration": 38.64811944961548}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    memo = {1: 3}\n    \n    def helper(k):\n        if k in memo:\n            return memo[k]\n        if k % 2 == 0:\n            memo[k] = 1 + k // 2\n        else:\n            memo[k] = helper(k - 1) + helper(k - 2) + helper(k + 1)\n        return memo[k]\n    \n    # Pre-calculate the sequence up to n+1 to handle the forward reference in odd cases\n    for i in range(2, n + 2):\n        helper(i)\n    \n    return [helper(i) for i in range(1, n + 1)]", "prompt_tokens": 1141, "completion_tokens": 514, "duration": 19.146827936172485}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 769, "completion_tokens": 394, "duration": 15.256406545639038}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 1044, "completion_tokens": 650, "duration": 22.450862646102905}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 924, "completion_tokens": 333, "duration": 8.068686723709106}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 888, "completion_tokens": 365, "duration": 11.328851461410522}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 893, "completion_tokens": 428, "duration": 14.572807312011719}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for x in lst:\n        if x < 0:\n            if largest_negative is None or x > largest_negative:\n                largest_negative = x\n        elif x > 0:\n            if smallest_positive is None or x < smallest_positive:\n                smallest_positive = x\n    return (largest_negative, smallest_positive)", "prompt_tokens": 867, "completion_tokens": 376, "duration": 11.48500680923462}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def convert_to_float(val):\n        if isinstance(val, str):\n            return float(val.replace(',', '.'))\n        return float(val)\n    \n    num_a = convert_to_float(a)\n    num_b = convert_to_float(b)\n    \n    if num_a > num_b:\n        return a\n    elif num_b > num_a:\n        return b\n    else:\n        return None", "prompt_tokens": 954, "completion_tokens": 519, "duration": 17.27368950843811}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    return (n - 8) % 4 == 0", "prompt_tokens": 812, "completion_tokens": 391, "duration": 10.139724969863892}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 880, "completion_tokens": 470, "duration": 16.870980978012085}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    text = text.replace(\"   \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 812, "completion_tokens": 369, "duration": 12.307449102401733}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if the file's name contains exactly one dot '.'\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    name, extension = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed extensions\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are not more than three digits in the file's name\n    digit_count = sum(1 for char in file_name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1009, "completion_tokens": 468, "duration": 19.70003890991211}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 1088, "completion_tokens": 525, "duration": 18.446499347686768}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1033, "completion_tokens": 598, "duration": 20.933889150619507}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 1042, "completion_tokens": 461, "duration": 10.46036696434021}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 864, "completion_tokens": 364, "duration": 15.950514078140259}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n    \n    def first_last_odd(num):\n        num_str = str(abs(num))\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return is_odd(first_digit) and is_odd(last_digit)\n    \n    count = 0\n    for num in nums:\n        if num > 10 and first_last_odd(num):\n            count += 1\n    return count", "prompt_tokens": 825, "completion_tokens": 390, "duration": 16.260863780975342}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    # Iterate through all possible triples and check if their sum is divisible by 3\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1171, "completion_tokens": 769, "duration": 24.27546262741089}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 1036, "completion_tokens": 430, "duration": 14.856271505355835}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 1076, "completion_tokens": 471, "duration": 14.97867226600647}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 884, "completion_tokens": 485, "duration": 14.153316497802734}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum([num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0])", "prompt_tokens": 875, "completion_tokens": 337, "duration": 9.718294858932495}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1081, "completion_tokens": 351, "duration": 17.841479063034058}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=lambda x: (calculate_strength(x), -extensions.index(x)))\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1193, "completion_tokens": 423, "duration": 17.595597982406616}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring of the first word.\"\"\"\n    return b in (a + a)", "prompt_tokens": 937, "completion_tokens": 415, "duration": 13.115236043930054}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count", "prompt_tokens": 942, "completion_tokens": 577, "duration": 18.55514883995056}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 938, "completion_tokens": 684, "duration": 19.43252992630005}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 887, "completion_tokens": 411, "duration": 13.865070581436157}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 893, "completion_tokens": 417, "duration": 11.019975900650024}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1159, "completion_tokens": 342, "duration": 12.108057022094727}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1083, "completion_tokens": 537, "duration": 19.726627588272095}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 823, "completion_tokens": 354, "duration": 11.926232814788818}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 777, "completion_tokens": 354, "duration": 11.474550485610962}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 870, "completion_tokens": 407, "duration": 11.171749353408813}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 901, "completion_tokens": 415, "duration": 15.31723427772522}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    balance = 0\n    current_group = \"\"\n    for char in paren_string.replace(\" \", \"\"):  # Removing spaces\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            if balance == 0:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 962, "completion_tokens": 539, "duration": 21.499536275863647}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 764, "completion_tokens": 324, "duration": 12.443002223968506}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 975, "completion_tokens": 485, "duration": 12.495424270629883}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 983, "completion_tokens": 493, "duration": 16.306581497192383}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 829, "completion_tokens": 404, "duration": 11.788750886917114}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1006, "completion_tokens": 591, "duration": 24.56854772567749}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 402, "duration": 14.867619514465332}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 773, "completion_tokens": 326, "duration": 12.55085825920105}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    if not numbers:\n        return []\n    max_list = [numbers[0]]\n    for num in numbers[1:]:\n        max_list.append(max(max_list[-1], num))\n    return max_list", "prompt_tokens": 1060, "completion_tokens": 646, "duration": 17.227569818496704}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 978, "completion_tokens": 459, "duration": 12.175572395324707}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 813, "completion_tokens": 396, "duration": 12.909939527511597}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 890, "completion_tokens": 448, "duration": 12.733752965927124}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 844, "completion_tokens": 438, "duration": 16.523890495300293}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 818, "completion_tokens": 468, "duration": 14.315558433532715}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 718, "completion_tokens": 308, "duration": 7.851601839065552}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 739, "completion_tokens": 317, "duration": 10.347639322280884}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 940, "completion_tokens": 369, "duration": 11.040528535842896}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 805, "completion_tokens": 388, "duration": 13.415685892105103}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 807, "completion_tokens": 402, "duration": 14.36131238937378}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 1052, "completion_tokens": 532, "duration": 14.248335123062134}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 933, "completion_tokens": 440, "duration": 16.261570930480957}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 801, "completion_tokens": 352, "duration": 11.250155687332153}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 746, "completion_tokens": 373, "duration": 8.999911785125732}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 759, "completion_tokens": 393, "duration": 9.698488473892212}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 943, "completion_tokens": 509, "duration": 18.775022983551025}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 817, "completion_tokens": 411, "duration": 11.617250680923462}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 713, "completion_tokens": 347, "duration": 9.582658767700195}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 721, "completion_tokens": 363, "duration": 12.59140944480896}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 770, "completion_tokens": 389, "duration": 11.35565972328186}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 834, "completion_tokens": 328, "duration": 8.689278602600098}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1040, "completion_tokens": 593, "duration": 20.378665685653687}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n\n    def newton_method(ys, initial_guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = initial_guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0\n\n    return newton_method(xs)", "prompt_tokens": 1156, "completion_tokens": 649, "duration": 25.07822060585022}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    # Counter for elements in divisible_by_three list\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If index is divisible by 3, append from sorted list\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            # Else, keep the element unchanged\n            result.append(l[i])\n    return result", "prompt_tokens": 990, "completion_tokens": 614, "duration": 24.9192533493042}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "prompt_tokens": 721, "completion_tokens": 296, "duration": 10.81188702583313}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 714, "completion_tokens": 261, "duration": 9.801084995269775}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 795, "completion_tokens": 422, "duration": 13.5687096118927}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values.pop(0)\n    return l", "prompt_tokens": 890, "completion_tokens": 409, "duration": 13.717747211456299}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 950, "completion_tokens": 466, "duration": 13.611921072006226}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 2  # Starting from the 2nd index as the first prime Fibonacci number is at index 3 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, ...)\n    while True:\n        fib_num = fibonacci(fib_index)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        fib_index += 1", "prompt_tokens": 909, "completion_tokens": 631, "duration": 19.556307792663574}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1339, "completion_tokens": 839, "duration": 41.75432848930359}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars are moving at the same speed and are infinitely sturdy, each car moving left to right will inevitably collide with each car moving right to left. Therefore, the total number of collisions will be the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 1117, "completion_tokens": 587, "duration": 16.57816743850708}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 771, "completion_tokens": 273, "duration": 11.4950590133667}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1232, "completion_tokens": 655, "duration": 20.0223650932312}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 758, "completion_tokens": 330, "duration": 11.085277795791626}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 676, "completion_tokens": 334, "duration": 12.544819116592407}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n\n    return dp[n]", "prompt_tokens": 1107, "completion_tokens": 615, "duration": 20.406922578811646}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 893, "completion_tokens": 499, "duration": 17.63412308692932}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 808, "completion_tokens": 441, "duration": 15.765095949172974}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 849, "completion_tokens": 362, "duration": 12.287904977798462}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 816, "completion_tokens": 396, "duration": 13.794495105743408}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 876, "completion_tokens": 363, "duration": 11.24113154411316}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 778, "completion_tokens": 353, "duration": 9.864111423492432}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 654, "completion_tokens": 266, "duration": 7.89379358291626}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 894, "completion_tokens": 340, "duration": 12.577035665512085}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 805, "completion_tokens": 436, "duration": 13.025660991668701}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 917, "completion_tokens": 490, "duration": 18.992175340652466}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 773, "completion_tokens": 355, "duration": 12.82466745376587}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 840, "completion_tokens": 350, "duration": 13.959545135498047}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 878, "completion_tokens": 500, "duration": 18.376673936843872}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 870, "completion_tokens": 406, "duration": 11.694647312164307}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1001, "completion_tokens": 580, "duration": 14.04542088508606}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 875, "completion_tokens": 382, "duration": 12.736421823501587}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 978, "completion_tokens": 458, "duration": 16.89996862411499}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':  # Check if 'y' is at the end and treat it as a vowel\n        count += 1\n    return count", "prompt_tokens": 856, "completion_tokens": 382, "duration": 14.255943775177002}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 739, "completion_tokens": 326, "duration": 8.354495763778687}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 13.336560726165771}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1056, "completion_tokens": 366, "duration": 11.643958568572998}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1352, "completion_tokens": 503, "duration": 12.618616342544556}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq:\n            result = max(result, num)\n    return result", "prompt_tokens": 943, "completion_tokens": 384, "duration": 12.303726196289062}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    strange_sorted_list = []\n    while sorted_list:\n        strange_sorted_list.append(sorted_list.pop(0))\n        if sorted_list:\n            strange_sorted_list.append(sorted_list.pop())\n    return strange_sorted_list", "prompt_tokens": 1025, "completion_tokens": 531, "duration": 17.368942737579346}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 929, "completion_tokens": 585, "duration": 31.20064377784729}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1095, "completion_tokens": 358, "duration": 10.297077655792236}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1247, "completion_tokens": 763, "duration": 29.192060947418213}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1001, "completion_tokens": 437, "duration": 15.909947395324707}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    \n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 969, "completion_tokens": 598, "duration": 20.410698413848877}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    power = math.log(x, n)\n    return power.is_integer()", "prompt_tokens": 965, "completion_tokens": 436, "duration": 14.292715311050415}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a", "prompt_tokens": 857, "completion_tokens": 367, "duration": 12.054698705673218}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1346, "completion_tokens": 492, "duration": 15.772709846496582}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 923, "completion_tokens": 392, "duration": 11.27395510673523}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 919, "completion_tokens": 429, "duration": 18.741361141204834}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to letter grades based on specific criteria.\"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1255, "completion_tokens": 678, "duration": 28.005926370620728}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 829, "completion_tokens": 431, "duration": 12.330455541610718}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 875, "completion_tokens": 550, "duration": 15.622394323348999}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Sum of digits\n    sum_digits = sum(int(digit) for digit in str(N))\n    # Convert sum to binary\n    binary_representation = bin(sum_digits)[2:]\n    return binary_representation", "prompt_tokens": 833, "completion_tokens": 331, "duration": 11.35543417930603}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 718, "completion_tokens": 343, "duration": 10.617293357849121}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 917, "completion_tokens": 380, "duration": 11.371557235717773}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1129, "completion_tokens": 374, "duration": 11.549734830856323}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    return sorted(array, reverse=sum_first_last % 2 == 0)", "prompt_tokens": 1106, "completion_tokens": 634, "duration": 24.31957459449768}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s)", "prompt_tokens": 834, "completion_tokens": 348, "duration": 13.393259763717651}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]", "prompt_tokens": 853, "completion_tokens": 382, "duration": 13.034477233886719}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n    \"\"\"\n    # Splitting the string into sentences using '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Counting sentences that start with 'I'\n    count = sum(sentence.startswith('I') for sentence in sentences)\n    return count", "prompt_tokens": 852, "completion_tokens": 425, "duration": 12.961554765701294}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 941, "completion_tokens": 468, "duration": 14.046779155731201}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            # Find the position of the vowel in the alphabet and add 2\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case of the new character based on the original character's case\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            # Swap case for non-vowel characters\n            encoded_message += char.lower() if char.isupper() else char.upper()\n    return encoded_message", "prompt_tokens": 893, "completion_tokens": 515, "duration": 20.359270095825195}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1283, "completion_tokens": 543, "duration": 17.407387733459473}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 927, "completion_tokens": 349, "duration": 13.271423578262329}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 998, "completion_tokens": 484, "duration": 12.884166717529297}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 814, "completion_tokens": 338, "duration": 13.451372385025024}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 799, "completion_tokens": 466, "duration": 14.69777798652649}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 973, "completion_tokens": 401, "duration": 15.824922800064087}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    for _ in range(n):\n        stones.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones", "prompt_tokens": 964, "completion_tokens": 466, "duration": 14.874412536621094}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 812, "completion_tokens": 324, "duration": 9.502904653549194}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:  # If the range is invalid\n        return -1\n    if y % 2 == 0:  # If y is even, it is the largest even number in the range\n        return y\n    if (y - 1) >= x:  # If y is odd, check if the number just before y is within the range\n        return y - 1\n    return -1  # If none of the conditions are met, return -1", "prompt_tokens": 900, "completion_tokens": 604, "duration": 25.9315345287323}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    count = m - n + 1\n    avg = round(total_sum / count)\n    return bin(avg)", "prompt_tokens": 979, "completion_tokens": 452, "duration": 11.798407316207886}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 831, "completion_tokens": 375, "duration": 11.331058263778687}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    number_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [number_names[num] for num in filtered_sorted_reversed]", "prompt_tokens": 1209, "completion_tokens": 528, "duration": 16.999114751815796}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x+1):\n            result *= i\n        return result\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum_to_x(i))\n    return result_list", "prompt_tokens": 921, "completion_tokens": 479, "duration": 16.43558382987976}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1133, "completion_tokens": 505, "duration": 18.432318925857544}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 977, "completion_tokens": 474, "duration": 11.777989864349365}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr_sorted = sorted(arr)\n    for i in range(len(arr)):\n        if arr_sorted == arr[i:] + arr[:i]:\n            return True\n    return False", "prompt_tokens": 1265, "completion_tokens": 417, "duration": 17.799880027770996}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 984, "completion_tokens": 367, "duration": 12.05980396270752}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    if not test:\n        return {}\n    counts = Counter(test.replace(\" \", \"\"))\n    max_count = max(counts.values())\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 994, "completion_tokens": 447, "duration": 16.061222076416016}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1116, "completion_tokens": 526, "duration": 17.78624200820923}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 957, "completion_tokens": 386, "duration": 11.70408034324646}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 914, "completion_tokens": 493, "duration": 12.959983587265015}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_buckets = 0\n    for row in grid:\n        total_buckets += math.ceil(sum(row) / capacity)\n    return total_buckets", "prompt_tokens": 1701, "completion_tokens": 795, "duration": 18.491861581802368}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 949, "completion_tokens": 332, "duration": 10.79073715209961}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for char in word if char.lower() not in vowels and char.isalpha())\n\n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 993, "completion_tokens": 393, "duration": 15.495605230331421}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and i != len(word) - 1 and i != 0:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 939, "completion_tokens": 426, "duration": 18.490623474121094}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return not stack\n\n    # Check both possible concatenations\n    if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1160, "completion_tokens": 630, "duration": 25.552237510681152}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1102, "completion_tokens": 385, "duration": 14.589179515838623}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 990, "completion_tokens": 529, "duration": 15.603582859039307}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 1021, "completion_tokens": 530, "duration": 15.322437763214111}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    def collatz_sequence(x):\n        seq = [x]\n        while x > 1:\n            if x % 2 == 0:\n                x //= 2\n            else:\n                x = 3 * x + 1\n            seq.append(x)\n        return seq\n\n    collatz_seq = collatz_sequence(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 1238, "completion_tokens": 604, "duration": 19.48250937461853}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are digits\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    month, day, year = map(int, parts)\n    \n    # Check the range of month and day\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the number of days in each month\n    days_in_month = [31, 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check the range of day\n    if day < 1 or day > days_in_month[month - 1]:\n        return False\n    \n    return True", "prompt_tokens": 1165, "completion_tokens": 606, "duration": 19.710345029830933}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 920, "completion_tokens": 395, "duration": 13.255856275558472}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1198, "completion_tokens": 444, "duration": 13.241302967071533}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1259, "completion_tokens": 570, "duration": 21.075278520584106}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 1178, "completion_tokens": 728, "duration": 25.5386004447937}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], k-1, i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    visited = set()\n\n    while pq:\n        cost, steps, x, y, path = heappop(pq)\n        if steps == 0:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny, steps-1) not in visited:\n                visited.add((nx, ny, steps-1))\n                heappush(pq, (cost, steps-1, nx, ny, path + [grid[nx][ny]]))", "prompt_tokens": 1985, "completion_tokens": 1106, "duration": 34.4878625869751}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n // 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        result.append(helper(i, memo))\n    return result", "prompt_tokens": 1266, "completion_tokens": 626, "duration": 32.083298206329346}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 780, "completion_tokens": 405, "duration": 19.240864515304565}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if not stack:  # If stack is empty after pop, it means there was a nested pair\n                return True\n    return False", "prompt_tokens": 923, "completion_tokens": 477, "duration": 17.44540500640869}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list, after rounding each element to the upper int.\"\"\"\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 925, "completion_tokens": 354, "duration": 12.835703372955322}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 883, "completion_tokens": 360, "duration": 14.694444417953491}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 938, "completion_tokens": 476, "duration": 17.371325254440308}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 844, "completion_tokens": 353, "duration": 16.447776556015015}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_val = convert_to_float(a)\n    b_val = convert_to_float(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 951, "completion_tokens": 456, "duration": 17.56714940071106}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    return (n - 8) % 4 == 0  # Subtract the smallest sum (8) and check if the remainder is divisible by 4", "prompt_tokens": 755, "completion_tokens": 376, "duration": 11.904527187347412}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of n.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 873, "completion_tokens": 461, "duration": 18.40754747390747}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 793, "completion_tokens": 378, "duration": 17.437814235687256}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1063, "completion_tokens": 509, "duration": 19.290592432022095}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1023, "completion_tokens": 451, "duration": 14.545851230621338}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 917, "completion_tokens": 414, "duration": 13.740162372589111}
{"task_id": "HumanEval/144", "generated_code": "import math\n\ndef simplify(x, n):\n    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    \n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n    \n    gcd = math.gcd(result_num, result_denom)\n    \n    simplified_num = result_num // gcd\n    simplified_denom = result_denom // gcd\n    \n    return simplified_denom == 1", "prompt_tokens": 1147, "completion_tokens": 638, "duration": 16.20047688484192}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 850, "completion_tokens": 350, "duration": 12.063453912734985}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        num_str = str(abs(num))  # Convert number to string and handle negative numbers\n        return num_str[0] in '13579' and num_str[-1] in '13579'\n    \n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))", "prompt_tokens": 834, "completion_tokens": 374, "duration": 15.877454042434692}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1361, "completion_tokens": 826, "duration": 24.66004776954651}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 1028, "completion_tokens": 410, "duration": 11.434618949890137}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = list(filter(lambda x: len(x) % 2 == 0, lst))\n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 1099, "completion_tokens": 495, "duration": 19.005355834960938}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 914, "completion_tokens": 515, "duration": 18.134203910827637}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 885, "completion_tokens": 340, "duration": 14.06991696357727}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1091, "completion_tokens": 361, "duration": 9.142964601516724}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        return CAP - SM\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1207, "completion_tokens": 426, "duration": 14.234845399856567}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 999, "completion_tokens": 457, "duration": 14.662429571151733}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 797, "completion_tokens": 437, "duration": 11.619075059890747}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 933, "completion_tokens": 631, "duration": 25.106255769729614}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1047, "completion_tokens": 571, "duration": 14.435171842575073}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result):\n            max_unique_chars = unique_chars\n            result = word\n    return result", "prompt_tokens": 927, "completion_tokens": 455, "duration": 16.387892246246338}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1106, "completion_tokens": 289, "duration": 9.728385925292969}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1065, "completion_tokens": 458, "duration": 19.564005136489868}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 843, "completion_tokens": 374, "duration": 16.956297874450684}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 789, "completion_tokens": 375, "duration": 15.290510416030884}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 875, "completion_tokens": 433, "duration": 18.46896266937256}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 862, "completion_tokens": 374, "duration": 10.457779884338379}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group is completed\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 1021, "completion_tokens": 609, "duration": 17.349181175231934}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 743, "completion_tokens": 303, "duration": 9.519402742385864}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 981, "completion_tokens": 491, "duration": 13.250888109207153}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 942, "completion_tokens": 452, "duration": 13.714794158935547}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 883, "completion_tokens": 478, "duration": 12.499778747558594}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1022, "completion_tokens": 602, "duration": 20.594197750091553}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 338, "duration": 8.139357566833496}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return (sum_numbers, product_numbers)", "prompt_tokens": 849, "completion_tokens": 383, "duration": 13.675508499145508}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 1005, "completion_tokens": 591, "duration": 19.08118963241577}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 1178, "completion_tokens": 752, "duration": 24.109444618225098}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 800, "completion_tokens": 383, "duration": 10.190595865249634}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 853, "completion_tokens": 411, "duration": 13.988475799560547}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 821, "completion_tokens": 415, "duration": 13.374682903289795}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 724, "completion_tokens": 333, "duration": 19.713102102279663}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 775, "completion_tokens": 365, "duration": 11.442307949066162}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 801, "completion_tokens": 379, "duration": 12.99740219116211}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 959, "completion_tokens": 388, "duration": 13.395000457763672}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 848, "completion_tokens": 431, "duration": 11.824919700622559}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 813, "completion_tokens": 412, "duration": 15.398510217666626}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 922, "completion_tokens": 402, "duration": 18.60892105102539}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 961, "completion_tokens": 468, "duration": 15.195303678512573}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 811, "completion_tokens": 427, "duration": 15.308434009552002}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 782, "completion_tokens": 409, "duration": 9.438154458999634}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 796, "completion_tokens": 430, "duration": 10.618713140487671}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    # Divide by 2 to get rid of all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Divide by odd numbers starting from 3\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors", "prompt_tokens": 945, "completion_tokens": 586, "duration": 20.005978107452393}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n        else:\n            seen.discard(number)\n            result.remove(number)\n    return result", "prompt_tokens": 810, "completion_tokens": 408, "duration": 24.100841283798218}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 730, "completion_tokens": 364, "duration": 9.823259592056274}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 750, "completion_tokens": 392, "duration": 16.529924392700195}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 773, "completion_tokens": 333, "duration": 11.342981576919556}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 823, "completion_tokens": 317, "duration": 8.227386474609375}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 865, "completion_tokens": 418, "duration": 14.200401782989502}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(ys):\n        return [coeff * i for i, coeff in enumerate(ys)][1:]\n    \n    def newton_method(ys, initial_guess=0.0, tolerance=1e-7, max_iterations=1000):\n        x0 = initial_guess\n        for _ in range(max_iterations):\n            y = poly(ys, x0)\n            y_prime = poly(derivative(ys), x0)\n            if y_prime == 0:  # Avoid division by zero\n                return x0\n            x1 = x0 - y / y_prime\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n        return x0  # Return the last approximation if no exact root is found within max_iterations\n    \n    return newton_method(xs)", "prompt_tokens": 1165, "completion_tokens": 681, "duration": 32.79935359954834}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    # Counter for elements at indices divisible by 3\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # Replace element at index divisible by 3 with the sorted element\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            # Copy other elements unchanged\n            result.append(l[i])\n    return result", "prompt_tokens": 951, "completion_tokens": 574, "duration": 19.946002960205078}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 717, "completion_tokens": 293, "duration": 7.851654052734375}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_val = float('-inf')\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val", "prompt_tokens": 834, "completion_tokens": 408, "duration": 11.971322774887085}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 809, "completion_tokens": 436, "duration": 12.706141233444214}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indexed_elements = [l[i] for i in range(0, len(l), 2)]\n    even_indexed_elements.sort()\n    result = l[:]\n    result[::2] = even_indexed_elements\n    return result", "prompt_tokens": 954, "completion_tokens": 465, "duration": 16.72099232673645}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 959, "completion_tokens": 472, "duration": 23.105051040649414}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 0\n    while True:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_index += 1", "prompt_tokens": 901, "completion_tokens": 562, "duration": 17.49774742126465}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1188, "completion_tokens": 688, "duration": 24.08621573448181}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move at the same speed and are infinitely sturdy, each car moving left to right will\n    inevitably collide with each car moving right to left. Therefore, the total number of collisions\n    will be the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 1123, "completion_tokens": 596, "duration": 15.07101058959961}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 774, "completion_tokens": 276, "duration": 6.738705635070801}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1181, "completion_tokens": 604, "duration": 13.803178548812866}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 757, "completion_tokens": 329, "duration": 10.2257239818573}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 807, "completion_tokens": 432, "duration": 14.39664912223816}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib4_values = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib4_values.append(fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4])\n    return fib4_values[n]", "prompt_tokens": 1162, "completion_tokens": 651, "duration": 17.26331853866577}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 769, "completion_tokens": 375, "duration": 13.59290075302124}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 763, "completion_tokens": 339, "duration": 11.88243317604065}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 902, "completion_tokens": 431, "duration": 10.58694052696228}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 795, "completion_tokens": 375, "duration": 9.773767709732056}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 873, "completion_tokens": 360, "duration": 13.122705221176147}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 786, "completion_tokens": 361, "duration": 8.723270177841187}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 646, "completion_tokens": 258, "duration": 8.759411334991455}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 976, "completion_tokens": 422, "duration": 11.014636993408203}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 857, "completion_tokens": 501, "duration": 11.952799320220947}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 938, "completion_tokens": 511, "duration": 12.44377613067627}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 826, "completion_tokens": 405, "duration": 12.117852687835693}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 351, "duration": 12.167595863342285}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 898, "completion_tokens": 538, "duration": 15.906463146209717}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return (n * (n + 1)) // 2", "prompt_tokens": 898, "completion_tokens": 435, "duration": 13.772950649261475}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 1060, "completion_tokens": 640, "duration": 26.171215772628784}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 862, "completion_tokens": 369, "duration": 12.080919981002808}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return n - 1\n    else:\n        fibfib_seq = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_seq.append(fibfib_seq[i-1] + fibfib_seq[i-2] + fibfib_seq[i-3])\n        return fibfib_seq[n]", "prompt_tokens": 1083, "completion_tokens": 590, "duration": 19.699433088302612}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 868, "completion_tokens": 473, "duration": 21.73840856552124}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    if shift >= len_x:\n        return x_str[::-1]\n    shift %= len_x\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 830, "completion_tokens": 420, "duration": 14.100270748138428}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 806, "completion_tokens": 301, "duration": 9.620576858520508}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1048, "completion_tokens": 358, "duration": 13.677949666976929}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1303, "completion_tokens": 454, "duration": 15.028009414672852}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    result = -1\n    for num, freq in freq_dict.items():\n        if num <= freq:\n            result = max(result, num)\n    return result", "prompt_tokens": 974, "completion_tokens": 410, "duration": 20.433390617370605}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 847, "completion_tokens": 345, "duration": 17.208894729614258}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    return round(area, 2)", "prompt_tokens": 853, "completion_tokens": 471, "duration": 18.357933282852173}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1086, "completion_tokens": 349, "duration": 13.675132036209106}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1084, "completion_tokens": 532, "duration": 12.419701099395752}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "prompt_tokens": 986, "completion_tokens": 350, "duration": 12.137643575668335}
{"task_id": "HumanEval/75", "generated_code": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 934, "completion_tokens": 562, "duration": 13.414187669754028}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False", "prompt_tokens": 942, "completion_tokens": 410, "duration": 16.87809181213379}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 809, "completion_tokens": 309, "duration": 11.28898024559021}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1364, "completion_tokens": 510, "duration": 16.066686391830444}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"", "prompt_tokens": 929, "completion_tokens": 398, "duration": 9.721744060516357}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 1009, "completion_tokens": 519, "duration": 12.674649953842163}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1216, "completion_tokens": 636, "duration": 25.343536138534546}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 947, "completion_tokens": 549, "duration": 13.059619665145874}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        s = str(i)\n        if s[0] == '1' or s[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 835, "completion_tokens": 510, "duration": 18.361745834350586}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    def sum_of_digits(n):\n        total = 0\n        while n > 0:\n            total += n % 10\n            n //= 10\n        return total\n\n    def decimal_to_binary(n):\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary if binary else '0'\n\n    sum_digits = sum_of_digits(N)\n    return decimal_to_binary(sum_digits)", "prompt_tokens": 897, "completion_tokens": 434, "duration": 26.19721245765686}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_index = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index", "prompt_tokens": 730, "completion_tokens": 374, "duration": 12.995200872421265}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 974, "completion_tokens": 555, "duration": 17.66305637359619}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1134, "completion_tokens": 379, "duration": 12.767314672470093}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1028, "completion_tokens": 376, "duration": 11.896127700805664}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s)", "prompt_tokens": 825, "completion_tokens": 339, "duration": 9.43959903717041}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]", "prompt_tokens": 853, "completion_tokens": 382, "duration": 14.366880416870117}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = S.replace('! ', '. ').replace('? ', '. ').split('. ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 933, "completion_tokens": 566, "duration": 15.93735122680664}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 942, "completion_tokens": 423, "duration": 13.250099182128906}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'w',\n                         'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        elif char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 935, "completion_tokens": 565, "duration": 19.60542392730713}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return None\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1383, "completion_tokens": 617, "duration": 16.93435573577881}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 922, "completion_tokens": 348, "duration": 9.229022979736328}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 1057, "completion_tokens": 574, "duration": 17.877522706985474}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 808, "completion_tokens": 332, "duration": 12.475947380065918}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 857, "completion_tokens": 483, "duration": 16.25824737548828}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    import math\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    if num - floor_num < ceil_num - num:\n        return floor_num\n    elif ceil_num - num < num - floor_num:\n        return ceil_num\n    else:  # Equidistant case, round away from zero\n        return ceil_num if num > 0 else floor_num", "prompt_tokens": 942, "completion_tokens": 422, "duration": 12.155980825424194}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    current_stone = n\n    for i in range(n):\n        stones.append(current_stone)\n        if current_stone % 2 == 0:\n            current_stone += 2\n        else:\n            current_stone += 2\n    return stones", "prompt_tokens": 916, "completion_tokens": 418, "duration": 15.623626947402954}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.split(r',\\s*|\\s+', s)", "prompt_tokens": 820, "completion_tokens": 333, "duration": 10.998473405838013}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n    return largest_even", "prompt_tokens": 884, "completion_tokens": 528, "duration": 15.07215428352356}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 940, "completion_tokens": 395, "duration": 11.884681463241577}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 890, "completion_tokens": 434, "duration": 15.866871356964111}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    # Sort the filtered array\n    filtered_arr.sort()\n    # Reverse the sorted array\n    reversed_arr = filtered_arr[::-1]\n    # Replace numbers with their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    result = [num_to_name[num] for num in reversed_arr]\n    return result", "prompt_tokens": 1131, "completion_tokens": 433, "duration": 14.830976009368896}
{"task_id": "HumanEval/106", "generated_code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\ndef sum_of_numbers(n):\n    return n * (n + 1) // 2\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 816, "completion_tokens": 364, "duration": 13.674481391906738}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1091, "completion_tokens": 464, "duration": 15.977145433425903}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1311, "completion_tokens": 808, "duration": 26.079773426055908}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1331, "completion_tokens": 532, "duration": 16.244390964508057}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\"", "prompt_tokens": 968, "completion_tokens": 346, "duration": 11.757604122161865}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    words = test.split()\n    char_count = {}\n    for word in words:\n        if word in char_count:\n            char_count[word] += 1\n        else:\n            char_count[word] = 1\n    max_count = max(char_count.values(), default=0)\n    return {char: count for char, count in char_count.items() if count == max_count}", "prompt_tokens": 1030, "completion_tokens": 556, "duration": 32.35289144515991}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1123, "completion_tokens": 533, "duration": 16.052178621292114}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1027, "completion_tokens": 459, "duration": 14.910613298416138}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 979, "completion_tokens": 558, "duration": 16.833264589309692}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_operations = 0\n    for row in grid:\n        water_units = sum(row)\n        total_operations += math.ceil(water_units / capacity)\n    return total_operations", "prompt_tokens": 1431, "completion_tokens": 532, "duration": 15.259110927581787}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 975, "completion_tokens": 358, "duration": 9.823249101638794}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 1010, "completion_tokens": 581, "duration": 19.817946195602417}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 943, "completion_tokens": 414, "duration": 14.260105848312378}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    '''\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                close_count += 1\n            if close_count > open_count:\n                return 'No'\n    return 'Yes' if open_count == close_count else 'No'", "prompt_tokens": 996, "completion_tokens": 568, "duration": 18.910896062850952}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1056, "completion_tokens": 339, "duration": 8.90350890159607}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 965, "completion_tokens": 504, "duration": 17.915770769119263}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum_of_elements = 0\n    for i in range(k):\n        if 0 <= arr[i] < 100:\n            sum_of_elements += arr[i]\n    return sum_of_elements", "prompt_tokens": 913, "completion_tokens": 443, "duration": 15.184454202651978}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence and is odd\n    return sorted(odd_numbers)", "prompt_tokens": 1264, "completion_tokens": 626, "duration": 23.55393934249878}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True", "prompt_tokens": 1166, "completion_tokens": 598, "duration": 21.10766291618347}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 881, "completion_tokens": 362, "duration": 12.175055980682373}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1] and (i + 2 < len(lst) and lst[i] == lst[i + 2]):\n            return False\n    return True", "prompt_tokens": 1156, "completion_tokens": 431, "duration": 14.713771343231201}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    intersection_length = end_min - start_max + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1253, "completion_tokens": 584, "duration": 20.611255645751953}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 1059, "completion_tokens": 610, "duration": 15.760313272476196}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    dp = {(i, j): [[float('inf')] * k for _ in range(k)] for i in range(N) for j in range(N)}\n    for i in range(N):\n        for j in range(N):\n            dp[(i, j)][0][0] = grid[i][j]\n\n    for step in range(1, k):\n        for i in range(N):\n            for j in range(N):\n                for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < N and 0 <= nj < N:\n                        for prev_step in range(step):\n                            dp[(i, j)][step] = min(dp[(i, j)][step], dp[(ni, nj)][prev_step] + [grid[i][j]])\n\n    min_path = [float('inf')] * k\n    for i in range(N):\n        for j in range(N):\n            for step in range(k):\n                if dp[(i, j)][step] < min_path:\n                    min_path = dp[(i, j)][step]\n\n    return min_path", "prompt_tokens": 1929, "completion_tokens": 1105, "duration": 36.664384603500366}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n / 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    result = []\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n        result.append(memo[i])\n    return result", "prompt_tokens": 1151, "completion_tokens": 523, "duration": 16.007787704467773}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 771, "completion_tokens": 457, "duration": 14.674346923828125}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 1038, "completion_tokens": 522, "duration": 17.23415446281433}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 948, "completion_tokens": 357, "duration": 14.975683450698853}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 894, "completion_tokens": 371, "duration": 10.309208393096924}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 854, "completion_tokens": 392, "duration": 13.68474292755127}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 867, "completion_tokens": 376, "duration": 12.422247886657715}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    num_a = to_float(a)\n    num_b = to_float(b)\n    \n    if num_a == num_b:\n        return None\n    \n    if num_a > num_b:\n        return a\n    else:\n        return b", "prompt_tokens": 915, "completion_tokens": 480, "duration": 16.693737030029297}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    # For example, if n is 8, the numbers could be 2, 2, 2, and 2. If n is greater, we can simply add the excess to one of the 2s.\n    return n % 2 == 0", "prompt_tokens": 876, "completion_tokens": 584, "duration": 29.007706880569458}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 857, "completion_tokens": 430, "duration": 15.567872285842896}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 810, "completion_tokens": 394, "duration": 12.816654443740845}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there's exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a latin alphabet letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1044, "completion_tokens": 489, "duration": 15.113427639007568}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1076, "completion_tokens": 508, "duration": 16.834720373153687}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 1207, "completion_tokens": 698, "duration": 20.535555362701416}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    new_numerator = num_x * num_n\n    new_denominator = den_x * den_n\n    \n    return new_numerator % new_denominator == 0", "prompt_tokens": 1078, "completion_tokens": 537, "duration": 33.07242250442505}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 845, "completion_tokens": 360, "duration": 11.251522779464722}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n\n    def first_and_last_odd(num):\n        num = abs(num)  # Handle negative numbers\n        last_digit = num % 10\n        first_digit = int(str(num)[0])  # Convert to string to get first digit\n        return is_odd(first_digit) and is_odd(last_digit)\n\n    return sum(1 for num in nums if num > 10 and first_and_last_odd(num))", "prompt_tokens": 893, "completion_tokens": 458, "duration": 15.76593279838562}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count of valid triples\n    count = 0\n    \n    # Iterate through the array to find valid triples\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1286, "completion_tokens": 881, "duration": 30.02398180961609}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    return tuple(planets[start+1:end])", "prompt_tokens": 1035, "completion_tokens": 417, "duration": 14.358349561691284}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 1046, "completion_tokens": 442, "duration": 17.717859506607056}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 876, "completion_tokens": 477, "duration": 14.913501024246216}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 881, "completion_tokens": 336, "duration": 10.062750339508057}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1077, "completion_tokens": 347, "duration": 12.163639783859253}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1198, "completion_tokens": 419, "duration": 14.235888481140137}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring of the first word.\"\"\"\n    return b in a + a", "prompt_tokens": 992, "completion_tokens": 469, "duration": 20.595230102539062}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num = abs(num)  # Make sure num is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 780, "completion_tokens": 440, "duration": 18.070254802703857}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 937, "completion_tokens": 634, "duration": 25.345964193344116}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 927, "completion_tokens": 451, "duration": 11.652790069580078}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 905, "completion_tokens": 429, "duration": 12.933468580245972}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if remaining >= total_eaten:\n        remaining -= total_eaten\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 1261, "completion_tokens": 465, "duration": 13.180368185043335}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1086, "completion_tokens": 478, "duration": 17.94722008705139}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 865, "completion_tokens": 404, "duration": 10.209059476852417}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    import hashlib\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 790, "completion_tokens": 367, "duration": 15.33059024810791}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return sorted(set(x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0))", "prompt_tokens": 846, "completion_tokens": 405, "duration": 14.253532648086548}
