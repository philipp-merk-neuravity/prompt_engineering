{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.874492645263672}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in cleaned_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 106, "duration": 5.802709579467773}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.0843594074249268}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 3.571848154067993}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 167, "completion_tokens": 54, "duration": 3.981733798980713}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 6.018126487731934}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 95, "duration": 5.339843273162842}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 3.286530017852783}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 4.274240255355835}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 4.313716411590576}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # If the string is already a palindrome, return it\n    if string == string[::-1]:\n        return string\n    # Iterate through the string to find the longest palindromic postfix\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 169, "duration": 8.425905704498291}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.2341177463531494}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 152, "completion_tokens": 110, "duration": 5.643096208572388}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.2577342987060547}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 73, "duration": 4.758653879165649}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 2.5854110717773438}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.644256830215454}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 4.884357929229736}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.631695985794067}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 110, "duration": 6.496778726577759}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i + 1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 124, "duration": 7.4613611698150635}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 100, "duration": 7.507568836212158}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 141, "completion_tokens": 92, "duration": 5.570197105407715}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.9425699710845947}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.2260615825653076}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 80, "duration": 4.760978698730469}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 4.013584136962891}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 2.279709577560425}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.3082611560821533}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 3.7254178524017334}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.27558422088623}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.6481595039367676}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n\n    def equation(x):\n        return poly(xs, x)\n\n    root = fsolve(equation, 0)[0]\n    return root", "prompt_tokens": 309, "completion_tokens": 203, "duration": 10.263601541519165}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted(l[i] for i in indices)\n    for idx, val in zip(indices, values):\n        l[idx] = val\n    return l", "prompt_tokens": 200, "completion_tokens": 66, "duration": 4.762404918670654}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.119497060775757}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.114935874938965}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 4.576681613922119}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 49, "duration": 4.0540547370910645}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 6.4558680057525635}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 146, "duration": 14.21049690246582}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()  # Sort the list to use two pointers approach\n    n = len(l)\n    for i in range(n-2):  # Iterate through the list\n        # Avoid duplicates\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1  # Set left and right pointers\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 153, "duration": 8.514713764190674}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving towards each other.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 43, "duration": 3.912020444869995}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.466832637786865}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.3384833335876465}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.833249807357788}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.352856159210205}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 6.605600118637085}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.07043719291687}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.6133816242218018}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 4.366562604904175}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.339710712432861}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.4719958305358887}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.7447218894958496}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.142388105392456}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.1431708335876465}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 4.316073894500732}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 4.790966033935547}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.715466022491455}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 3.2254202365875244}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    largest_prime = 1\n    # Check for divisibility by 2\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n    # Check for odd factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "prompt_tokens": 113, "completion_tokens": 192, "duration": 11.130263566970825}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 109, "duration": 7.065364599227905}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.774703502655029}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 3.3936707973480225}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 93, "duration": 5.989854097366333}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel only if it is at the end of the word.\"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and s[-1] in 'yY':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"Y\"))  # 1\nprint(vowels_count(\"fly\"))  # 0\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 173, "duration": 16.185860872268677}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x  # To handle shifts larger than the number of digits\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 112, "duration": 6.449109792709351}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.083728313446045}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the string to extract numbers\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Subtract the sum of apples and oranges from the total number of fruits\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 67, "duration": 4.435070514678955}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 4.224318504333496}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for key, value in count.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 4.045287847518921}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Take the smallest\n        if sorted_lst:\n            result.append(sorted_lst.pop())  # Take the largest\n    return result", "prompt_tokens": 174, "completion_tokens": 63, "duration": 5.465240716934204}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    '''\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 159, "duration": 8.314682245254517}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.5326101779937744}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.613743305206299}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    \n    if sum1 < sum2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 241, "duration": 17.160208463668823}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a / i) % j == 0 and is_prime(j) and is_prime(a // (i*j)):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 133, "duration": 9.425366163253784}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    current_power = 1\n    while current_power < x:\n        current_power *= n\n        if current_power == x:\n            return True\n    return False", "prompt_tokens": 192, "completion_tokens": 61, "duration": 3.6257495880126953}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a >= 0:\n        return int(round(a ** (1. / 3))) ** 3 == a\n    else:\n        return int(round(-((-a) ** (1. / 3)))) ** 3 == a", "prompt_tokens": 160, "completion_tokens": 60, "duration": 6.299723386764526}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Counting the number of prime hexadecimal digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 69, "duration": 6.023341655731201}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return \"db\" + binary_str + \"db\"", "prompt_tokens": 189, "completion_tokens": 45, "duration": 3.39567494392395}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.011998414993286}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 222, "duration": 11.29977560043335}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.173132658004761}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * (10 ** (n - 1)) - (9 ** (n - 1))", "prompt_tokens": 94, "completion_tokens": 81, "duration": 3.9504661560058594}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.095763921737671}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 4.087356805801392}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 3.4646873474121094}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, returns a list of tuples indicating the positions of x in the list.\n    The positions are returned as (row, column) sorted first by rows in ascending order, then by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda pos: (pos[0], -pos[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 124, "duration": 6.527857780456543}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # if the array is empty\n        return []\n    sorted_array = sorted(array)  # sort in ascending order by default\n    if (array[0] + array[-1]) % 2 == 0:  # if the sum of the first and last elements is even\n        sorted_array.reverse()  # reverse to get descending order\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 284, "duration": 15.267506837844849}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            offset = 4 if char.islower() else 4\n            encrypted_char = chr(((ord(char) - 97 + offset) % 26) + 97) if char.islower() else chr(((ord(char) - 65 + offset) % 26) + 65)\n            result += encrypted_char\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 104, "duration": 10.019974708557129}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list if it exists, otherwise None.\n    \"\"\"\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    else:\n        return unique_elements[1]", "prompt_tokens": 174, "completion_tokens": 64, "duration": 4.786969900131226}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a given string.\n\n    :param S: A string of words\n    :return: The number of sentences starting with \"I\"\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.') if s]\n\n    # Count sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 117, "duration": 6.94419264793396}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 185, "completion_tokens": 59, "duration": 4.006861448287964}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def shift_vowel(v):\n        vowels = 'aeiouAEIOU'\n        shift = 2\n        if v in vowels:\n            is_upper = v.isupper()\n            index = vowels.index(v.lower())\n            shifted_vowel = vowels[(index + shift) % len(vowels)]\n            return shifted_vowel.upper() if is_upper else shifted_vowel\n        return v\n\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n    \n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += swap_case(shift_vowel(char))\n        else:\n            encoded_message += swap_case(char)\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 158, "duration": 9.486825704574585}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 112, "duration": 6.726314306259155}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.789583444595337}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.909604072570801}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Return the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.199455976486206}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 75, "duration": 4.7997331619262695}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 3.6809844970703125}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        stones.append(stones[i-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 141, "duration": 12.424156188964844}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 4.219839334487915}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 8.348047733306885}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.746781349182129}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 88, "duration": 6.318872451782227}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 109, "duration": 7.134451866149902}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 98, "duration": 7.617148160934448}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 7.27311110496521}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n))) if n >= 0 else -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 75, "duration": 8.908817768096924}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n        if count > 1:\n            return False\n    if count == 0:\n        return True\n    return arr[0] >= arr[-1]", "prompt_tokens": 349, "completion_tokens": 92, "duration": 7.470369100570679}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \"\"\"\n    # Count of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    # Count of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n\n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 229, "duration": 18.10656476020813}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 6.410729885101318}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_str = ''.join([char for char in s if char not in c])\n    return (result_str, result_str == result_str[::-1])", "prompt_tokens": 212, "completion_tokens": 43, "duration": 6.830443859100342}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 149, "duration": 10.093224287033081}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 6.401673793792725}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_units_of_water = sum(sum(row) for row in grid)\n    return math.ceil(total_units_of_water / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 5.759587287902832}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 137, "duration": 11.281432151794434}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() in 'bcdfghjklmnpqrstvwxyz')\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 8.044434070587158}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 72, "duration": 7.4345245361328125}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') or second.count('(') >= first.count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 51, "duration": 6.574912071228027}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 6.8196940422058105}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 5.397434234619141}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 5.362197399139404}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1) # Since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 108, "duration": 9.732945442199707}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if the date format is correct (mm-dd-yyyy)\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Days in each month\n    days_in_month = {\n        1: 31, 2: 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28, \n        3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, \n        11: 30, 12: 31\n    }\n    \n    # Check if the day is valid\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 308, "duration": 24.027827739715576}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 7.884910345077515}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 7.2424280643463135}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    \n    if start_max > end_min: # No intersection\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    \n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 143, "duration": 13.38568925857544}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        sum_of_magnitudes += abs(num)\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 111, "duration": 12.68448543548584}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    pq.sort()\n    visited = set()\n\n    while pq:\n        _, x, y, path = pq.pop(0)\n        if len(path) == k:\n            return path\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                pq.append((new_path, nx, ny, new_path))\n                pq.sort(key=lambda x: (len(x[3]), x[3]))", "prompt_tokens": 446, "completion_tokens": 232, "duration": 13.436962604522705}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"\n    Function to generate the first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    \n    # Initialize the list with base cases\n    tribonacci = [1, 3]\n    \n    # Fill the list up to n + 1 elements\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i / 2)\n        else:\n            if i + 1 > len(tribonacci) - 1:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + (1 + (i + 1) / 2))\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 215, "duration": 14.941840648651123}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 72, "duration": 7.918302059173584}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 55, "duration": 6.968819856643677}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Returns the sum of squared numbers in the given list,\n    after rounding each element in the list to the upper integer.\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 56, "duration": 6.28252649307251}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip().endswith(' ') and txt.strip()[-2].isalpha()", "prompt_tokens": 187, "completion_tokens": 33, "duration": 5.574159145355225}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 6.818786144256592}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = max([x for x in lst if x < 0], default=None)\n    smallest_positive = min([x for x in lst if x > 0], default=None)\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 62, "duration": 7.7470924854278564}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Compares two values that can be integers, floats, or strings representing real numbers.\n    Returns the larger variable in its original type, or None if they are equal.\n    \"\"\"\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 126, "duration": 10.508488178253174}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 5.753249883651733}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 75, "duration": 8.489978075027466}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 161, "duration": 12.340939044952393}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    # Check all conditions using regular expression\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 84, "duration": 8.330341815948486}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 6.524293661117554}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 102, "duration": 8.726972103118896}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 6.0983734130859375}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 36, "duration": 6.853355169296265}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def isOdd(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n    \n    return sum(1 for num in nums if num > 10 and isOdd(num))", "prompt_tokens": 169, "completion_tokens": 70, "duration": 21.051438808441162}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Calculate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count how many elements of a are divisible by 3, remainder 1 when divided by 3, and remainder 2 when divided by 3\n    count_div_3 = sum(x % 3 == 0 for x in a)\n    count_rem_1 = sum(x % 3 == 1 for x in a)\n    count_rem_2 = sum(x % 3 == 2 for x in a)\n    # Calculate the number of valid triples\n    # There are three cases for valid triples: (div3, div3, div3), (rem1, rem1, rem1), and (rem2, rem2, rem2)\n    # For each case, use the combination formula nC3 = n! / (3!(n-3)!) to calculate the number of ways to choose triples\n    result = 0\n    if count_div_3 >= 3:\n        result += count_div_3 * (count_div_3 - 1) * (count_div_3 - 2) // 6\n    if count_rem_1 >= 3:\n        result += count_rem_1 * (count_rem_1 - 1) * (count_rem_1 - 2) // 6\n    if count_rem_2 >= 3:\n        result += count_rem_2 * (count_rem_2 - 1) * (count_rem_2 - 2) // 6\n    return result", "prompt_tokens": 215, "completion_tokens": 424, "duration": 22.365949869155884}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])", "prompt_tokens": 261, "completion_tokens": 118, "duration": 9.958965063095093}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_strings.sort()  # Alphabetical sort\n    even_length_strings.sort(key=len)  # Length sort\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 85, "duration": 9.329762697219849}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 62, "duration": 8.289951086044312}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 5.192629814147949}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 6.786277770996094}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(ext):\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        return CAP - SM\n\n    strongest_ext = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 80, "duration": 7.620356321334839}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 92, "duration": 9.767087697982788}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 71, "duration": 8.761413097381592}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 165, "duration": 12.46084475517273}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 7.726427316665649}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "prompt_tokens": 170, "completion_tokens": 82, "duration": 10.622131109237671}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 7.371402978897095}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 9.679292917251587}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isalpha() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 55, "duration": 8.03844666481018}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()", "prompt_tokens": 126, "completion_tokens": 105, "duration": 9.125185489654541}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 6.1178693771362305}
