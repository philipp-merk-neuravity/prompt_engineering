{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the absolute difference between two adjacent numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 94, "duration": 4.874022960662842}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separated groups\n    result = []\n    \n    # Initialize a variable to store the current group\n    current_group = \"\"\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # Check if the current group is balanced\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            # Add the balanced group to the result list\n            result.append(current_group)\n            # Reset the current group\n            current_group = \"\"\n    \n    return result", "prompt_tokens": 154, "completion_tokens": 163, "duration": 4.913656949996948}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 2.7118477821350098}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    # Initialize balance to zero\n    balance = 0\n    \n    # Iterate through each operation\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 81, "duration": 3.1294307708740234}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(absolute_diff) / len(absolute_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 94, "duration": 3.7945191860198975}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the input list 'numbers'\n    for num in numbers:\n        # Append the current number to the result list\n        result.append(num)\n        # Append the delimeter to the result list\n        result.append(delimeter)\n    \n    # Remove the extra delimeter at the end of the result list\n    result.pop()\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 111, "duration": 3.8896307945251465}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n\n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current nesting level and maximum nesting level\n        current_level = 0\n        max_level = 0\n\n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level when encountering an opening parenthesis\n                current_level += 1\n                # Update the maximum nesting level if the current level is greater\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                # Decrement the current nesting level when encountering a closing parenthesis\n                current_level -= 1\n\n        # Append the maximum nesting level for the current group to the result list\n        result.append(max_level)\n\n    return result", "prompt_tokens": 151, "completion_tokens": 223, "duration": 6.659423589706421}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 110, "duration": 3.9804952144622803}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables for sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return total_sum, total_product", "prompt_tokens": 149, "completion_tokens": 81, "duration": 3.2032060623168945}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_values = []\n    \n    # Iterate through the input list of numbers\n    for i in range(len(numbers)):\n        # Find the maximum value in the sublist up to the current index\n        max_value = max(numbers[:i+1])\n        # Append the maximum value to the rolling_max_values list\n        rolling_max_values.append(max_value)\n    \n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 103, "duration": 51.17461967468262}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "prompt_tokens": 182, "completion_tokens": 174, "duration": 5.536096096038818}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 91, "duration": 2.986626386642456}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n\n    longest_str = max(strings, key=len)  # Find the longest string in the list\n    return max(filter(lambda x: len(x) == len(longest_str), strings))  # Return the first longest string", "prompt_tokens": 141, "completion_tokens": 80, "duration": 2.9482686519622803}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Base case: if b is 0, return a\n    if b == 0:\n        return a\n    # Recursive case: call the function with b and the remainder of a divided by b\n    return greatest_common_divisor(b, a % b)", "prompt_tokens": 110, "completion_tokens": 76, "duration": 3.072704792022705}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the range of the length of the string\n    for i in range(len(string)):\n        # Append the substring from the start of the string up to index i to the prefixes list\n        prefixes.append(string[:i+1])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 86, "duration": 3.0007569789886475}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using list comprehension\n    numbers = [str(i) for i in range(n+1)]\n    \n    # Join the numbers in the list with a space delimiter\n    result = ' '.join(numbers)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 72, "duration": 3.127079486846924}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use set to get unique characters\n    unique_chars = set(string)\n    \n    # Return the length of the set to get the count of distinct characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 74, "duration": 2.870891809463501}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map note symbols to their corresponding duration\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the music string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the durations of each note\n    durations = []\n    \n    # Iterate through each note in the list\n    for note in notes:\n        # Append the duration of the note to the durations list using the dictionary\n        durations.append(note_duration[note])\n    \n    # Return the list of durations\n    return durations", "prompt_tokens": 211, "completion_tokens": 148, "duration": 3.958258628845215}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0  # Initialize a counter to keep track of the number of occurrences\n    for i in range(len(string) - len(substring) + 1):  # Iterate through the original string\n        if string[i:i + len(substring)] == substring:  # Check if the substring matches the current slice of the original string\n            count += 1  # Increment the counter if there is a match\n    return count  # Return the total count of occurrences", "prompt_tokens": 128, "completion_tokens": 119, "duration": 3.704885721206665}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numerical values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of numberals\n    numberals = numbers.split()\n    \n    # Sort the list of numberals based on their numerical values\n    sorted_numberals = sorted(numberals, key=lambda x: number_map[x])\n    \n    # Join the sorted numberals into a string and return\n    return ' '.join(sorted_numberals)", "prompt_tokens": 144, "completion_tokens": 182, "duration": 5.373156309127808}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize variables to store the closest elements and their difference\n    closest_elements = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    \n    # Iterate through the sorted list to find the closest elements\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_elements = (numbers[i], numbers[i+1])\n    \n    return closest_elements", "prompt_tokens": 205, "completion_tokens": 144, "duration": 4.229637622833252}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to each number in the list\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 101, "duration": 3.33601713180542}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate over each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Append the integer value to the list of integers\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 98, "duration": 3.1105353832244873}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 27, "duration": 1.9190130233764648}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 67, "duration": 2.8156073093414307}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start with 2, the smallest prime number\n    i = 2\n    \n    # While the input number is greater than 1\n    while n > 1:\n        # If the input number is divisible by the current prime number\n        if n % i == 0:\n            # Add the prime number to the list of factors\n            factors.append(i)\n            # Divide the input number by the prime number\n            n //= i\n        else:\n            # Move to the next prime number\n            i += 1\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 152, "duration": 3.8046927452087402}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function with the given signature\n    counts = Counter(numbers)  # Count occurrences of each number in the list\n    return [num for num in numbers if counts[num] == 1]  # Return numbers that occur only once in the list, maintaining the order\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]", "prompt_tokens": 123, "completion_tokens": 119, "duration": 3.3816475868225098}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert uppercase to lowercase and add to the result\n            result += char.lower()\n        # Check if the character is lowercase\n        elif char.islower():\n            # Convert lowercase to uppercase and add to the result\n            result += char.upper()\n        else:\n            # Add non-alphabetic characters as they are to the result\n            result += char\n    \n    # Return the final result\n    return result", "prompt_tokens": 88, "completion_tokens": 147, "duration": 4.661021947860718}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 35, "duration": 1.9170141220092773}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 115, "duration": 3.137422561645508}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 89, "duration": 2.94439959526062}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 61, "duration": 2.8027942180633545}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[0]\n    b = xs[-1]\n    return -b/a\n\n# Test cases\nprint(find_zero([1, 2])) # -0.5\nprint(find_zero([-6, 11, -6, 1])) # 1.0", "prompt_tokens": 298, "completion_tokens": 81, "duration": 3.0396738052368164}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a list to store the sorted values at indices divisible by three\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    \n    # Create a new list by iterating over the original list and replacing values at indices divisible by three with sorted values\n    return [sorted_values.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 190, "completion_tokens": 105, "duration": 2.923349618911743}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    sorted_unique_list = sorted(unique_set)\n    \n    return sorted_unique_list", "prompt_tokens": 113, "completion_tokens": 53, "duration": 2.397277355194092}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 2.1334304809570312}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to keep track of the number of times digit 7 appears\n    count = 0\n    \n    # Iterate through numbers less than n\n    for i in range(n):\n        # Check if the number is divisible by 11 or 13 and contains digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the counter if conditions are met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 127, "duration": 4.04703164100647}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Separate even and odd indices\n    even_indices = l[::2]\n    odd_indices = l[1::2]\n    \n    # Sort the even indices\n    sorted_even_indices = sorted(even_indices)\n    \n    # Combine the sorted even indices with the odd indices\n    result = [None] * (len(even_indices) + len(odd_indices))\n    result[::2] = sorted_even_indices\n    result[1::2] = odd_indices\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 114, "duration": 3.170438289642334}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 115, "duration": 5.837505340576172}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 137, "completion_tokens": 143, "duration": 4.441073179244995}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 125, "duration": 5.8808417320251465}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions for n cars moving in opposite directions\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 41, "duration": 1.4430654048919678}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the list with incremented elements\n    return result", "prompt_tokens": 148, "completion_tokens": 83, "duration": 2.2554285526275635}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Iterate through each element in the list\n    for i in range(len(l)):\n        # Check if the negative of the current element exists in the list\n        if -l[i] in l and l.count(-l[i]) > 1:\n            return True\n    return False", "prompt_tokens": 197, "completion_tokens": 71, "duration": 4.786221742630005}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Initialize an empty string to store the converted number\n    result = \"\"\n    \n    # Continue the loop until x is greater than 0\n    while x > 0:\n        # Get the remainder when x is divided by the new base\n        remainder = x % base\n        # Convert the remainder to string and add it to the result\n        result = str(remainder) + result\n        # Update x to be the result of integer division of x by the new base\n        x = x // base\n    \n    # Return the final result as a string\n    return result", "prompt_tokens": 131, "completion_tokens": 136, "duration": 6.0160369873046875}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 1.4996895790100098}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize a list to store the first 4 elements of the Fib4 sequence\n    fib4_list = [0, 0, 2, 0]\n    \n    # Iterate from 4 to n to calculate the next elements of the sequence\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    \n    # Return the n-th element of the Fib4 sequence\n    return fib4_list[n]", "prompt_tokens": 211, "completion_tokens": 134, "duration": 5.230107545852661}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Find the length of the list\n    n = len(l)\n    \n    # Step 3: Check if the length of the list is odd or even\n    if n % 2 == 1:\n        # If odd, return the middle element\n        return l[n // 2]\n    else:\n        # If even, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 128, "duration": 2.631373882293701}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove all non-alphanumeric characters and convert text to lowercase\n    text = ''.join(char for char in text if char.isalnum()).lower()\n    \n    # Check if the reversed text is equal to the original text\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 66, "duration": 4.194406270980835}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate the modulo of the result with p\n    result = result % p\n    return result", "prompt_tokens": 145, "completion_tokens": 52, "duration": 4.188993215560913}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 62, "duration": 5.015891790390015}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Use list comprehension to filter out vowels from the text\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 88, "duration": 5.137875556945801}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 55, "duration": 1.3185982704162598}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 1.1234452724456787}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if the sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 64, "duration": 4.4146811962127686}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: return 0 if n is 0\n    if n == 0:\n        return 0\n    # Base case: return 1 if n is 1\n    if n == 1:\n        return 1\n    \n    # Initialize variables to store the two previous Fibonacci numbers\n    a, b = 0, 1\n    \n    # Loop to calculate the n-th Fibonacci number\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    \n    return b", "prompt_tokens": 92, "completion_tokens": 123, "duration": 27.889997005462646}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the number of opening brackets\n    count = 0\n    \n    # Iterate through each character in the input string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"<\":\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif bracket == \">\":\n            count -= 1\n            # If the counter becomes negative at any point, return False\n            if count < 0:\n                return False\n    \n    # If the counter is 0 at the end, return True (all opening brackets have corresponding closing brackets)\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 162, "duration": 5.4435834884643555}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is monotonically increasing\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # Check if the list is monotonically decreasing\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 93, "duration": 2.62837553024292}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1).intersection(set(l2))\n    \n    # Sort the common elements\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 64, "duration": 3.805845260620117}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to find factors of a number\n    def find_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n    \n    # Find factors of the number n\n    factors = find_factors(n)\n    \n    # Find the largest prime factor among the factors\n    largest_prime = max([factor for factor in factors if is_prime(factor)])\n    \n    return largest_prime", "prompt_tokens": 103, "completion_tokens": 192, "duration": 6.760006666183472}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 39, "duration": 1.3236186504364014}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the string\n    for char in brackets:\n        # If the character is an opening bracket, increment the balance\n        if char == \"(\":\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            # If the balance becomes negative, return False\n            if balance < 0:\n                return False\n    \n    # If the balance is zero, return True (all brackets are balanced)\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 150, "duration": 4.67553973197937}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate through the coefficients starting from the second one\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 78, "duration": 4.569621562957764}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 3.793199300765991}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to store the count of vowels\n    count = 0\n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # Increment the count if it is a vowel\n            count += 1\n        # Check if 'y' is a vowel at the end of the word\n        elif s[i].lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 166, "completion_tokens": 156, "duration": 5.725971937179565}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift value by taking modulo with the length of the string\n    actual_shift = shift % len(x_str)\n    \n    # Perform circular shift by slicing the string and concatenating the parts\n    shifted_str = x_str[-actual_shift:] + x_str[:-actual_shift]\n    \n    # Return the shifted string\n    return shifted_str", "prompt_tokens": 122, "completion_tokens": 109, "duration": 4.379344701766968}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII codes\n    total_sum = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 98, "duration": 5.081733226776123}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    \n    # Extract the number of apples and oranges from the split string\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 98, "duration": 4.502479076385498}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Create a list to store even values from the input array\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    # If there are no even values or the array is empty, return an empty list\n    if not even_values:\n        return []\n    \n    # Find the smallest even value and its index\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_value, smallest_index]", "prompt_tokens": 352, "completion_tokens": 127, "duration": 2.938633918762207}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary to find the greatest integer that meets the condition\n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and value >= key:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 132, "duration": 4.7553088665008545}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # While there are elements in the sorted list\n    while lst:\n        # Pop the minimum value and append it to the result list\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the list, pop the maximum value and append it to the result list\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 116, "duration": 3.80377197265625}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 142, "duration": 4.887350082397461}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 1.5226771831512451}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Iterate through the array up to the middle element\n    for i in range(len(arr)//2):\n        # Check if the elements at the corresponding positions are different\n        if arr[i] != arr[-i-1]:\n            # Increment the number of changes needed\n            changes += 1\n    \n    return changes", "prompt_tokens": 197, "completion_tokens": 96, "duration": 4.106210231781006}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in lst1\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    \n    # Calculate total number of characters in lst2\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 107, "duration": 2.75938081741333}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find prime factors of the number\n    prime_factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n    \n    # Check if there are exactly 3 prime factors\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False", "prompt_tokens": 119, "completion_tokens": 153, "duration": 2.926719903945923}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is 1\n    if x == 1:\n        return True\n    # Check if n is 1\n    if n == 1:\n        return False\n    # Check if x is divisible by n\n    if x % n != 0:\n        return False\n    # Check if n is a power of x\n    while x % n == 0:\n        x = x // n\n    return x == 1", "prompt_tokens": 182, "completion_tokens": 109, "duration": 4.735404968261719}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Take the absolute value of a to handle negative numbers\n    a = abs(a)\n    \n    # Find the cube root of a\n    cube_root = round(a**(1/3))\n    \n    # Check if the cube of cube_root is equal to a\n    return cube_root**3 == a", "prompt_tokens": 150, "completion_tokens": 73, "duration": 4.041160583496094}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a dictionary to map hexadecimal digits to their decimal values\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\n    # Initialize a counter for prime digits\n    prime_count = 0\n\n    # Iterate through each character in the input hexadecimal number\n    for digit in num:\n        # Check if the digit is in the list of prime decimal values\n        if hex_to_dec[digit] in [2, 3, 5, 7, 11, 13]:\n            prime_count += 1\n\n    return prime_count", "prompt_tokens": 339, "completion_tokens": 279, "duration": 8.303372621536255}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary_with_db = 'db' + binary + 'db'\n    \n    return binary_with_db", "prompt_tokens": 179, "completion_tokens": 63, "duration": 3.696159601211548}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string up to the third last character\n    for i in range(len(s) - 2):\n        # Check if the current character and the next two characters are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 119, "duration": 2.540189504623413}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 290, "duration": 5.447834253311157}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is less than 2, return False\n    if length < 2:\n        return False\n    \n    # Check if the length is divisible by any number from 2 to the length-1, return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    \n    # If the length is not divisible by any number, return True\n    return True", "prompt_tokens": 121, "completion_tokens": 116, "duration": 2.2694458961486816}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0  # Initialize a counter variable to keep track of the count\n    for i in range(10**(n-1), 10**n):  # Iterate through all n-digit numbers\n        if str(i)[0] == '1' or str(i)[-1] == '1':  # Check if the number starts or ends with 1\n            count += 1  # Increment the counter if the condition is met\n    return count  # Return the final count", "prompt_tokens": 84, "completion_tokens": 114, "duration": 4.817282438278198}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    total_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the total sum to binary string\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 74, "duration": 3.8846888542175293}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    even_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Sum the filtered even elements\n    result = sum(even_elements)\n    \n    return result", "prompt_tokens": 95, "completion_tokens": 71, "duration": 4.0030364990234375}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters of the word based on ascii value and join them back into a word\n        ordered_word = ''.join(sorted(word))\n        \n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words back into a string with spaces\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 135, "duration": 3.6246979236602783}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over each row in the list\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Iterate over each column in the row\n            for j, col in enumerate(row):\n                # Check if the current element is equal to x\n                if col == x:\n                    # Append the coordinate (row index, column index) to the list\n                    coordinates.append((i, j))\n    \n    # Sort the coordinates initially by rows in ascending order\n    # Sort the coordinates of the row by columns in descending order\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 173, "duration": 4.616529226303101}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        return sorted(array)\n    else:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 77, "duration": 3.445007085800171}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    encrypted = ''\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Calculate the new index after shifting down by two multiplied to two places\n            new_index = (index + 2 * 2) % 26\n            # Append the encrypted character to the result string\n            encrypted += alphabet[new_index]\n        else:\n            # If the character is not a letter, append it as it is\n            encrypted += char\n    \n    return encrypted", "prompt_tokens": 150, "completion_tokens": 169, "duration": 3.960017204284668}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # If the list has less than 2 elements, return None\n    if len(lst) < 2:\n        return None\n    \n    # Return the second element in the sorted list\n    return lst[1]", "prompt_tokens": 164, "completion_tokens": 69, "duration": 2.45627498626709}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences using delimiters '.', '?' or '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip() != '']\n    \n    # Count the number of sentences that start with 'I'\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 85, "duration": 3.5121381282806396}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 94, "duration": 3.362653970718384}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Create a dictionary to map vowels to their replacements\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Check if the character is a vowel and replace it with the mapped value\n            if char in vowels:\n                char = vowels[char]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 216, "duration": 7.296063661575317}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Import necessary libraries\n    import math\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Function to calculate sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Find the largest prime number in the list\n    largest_prime = max(filter(is_prime, lst))\n\n    # Calculate and return the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 162, "duration": 4.894767761230469}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    keys = list(dict.keys())  # Get a list of keys from the dictionary\n    first_key = keys[0]  # Get the first key\n    \n    if first_key.islower():  # Check if the first key is in lower case\n        return all(key.islower() for key in keys)  # Return True if all keys are in lower case\n    elif first_key.isupper():  # Check if the first key is in upper case\n        return all(key.isupper() for key in keys)  # Return True if all keys are in upper case\n    else:\n        return False  # Return False if keys are mixed case\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))", "prompt_tokens": 209, "completion_tokens": 258, "duration": 6.119692325592041}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 up to n\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n        \n        # Check if the number is divisible by any number less than itself\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 134, "duration": 3.846115827560425}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of a by taking the remainder when divided by 10\n    unit_a = abs(a) % 10\n    # Get the unit digit of b by taking the remainder when divided by 10\n    unit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 93, "duration": 3.1746087074279785}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a counter variable to keep track of the count of uppercase vowels\n    count = 0\n    \n    # Create a list of uppercase vowels\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 122, "duration": 3.349498748779297}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to a float number\n    num = float(value)\n    \n    # Check if the decimal part is closer to the lower integer\n    if num % 1 < 0.5:\n        return int(num)\n    # Check if the decimal part is closer to the higher integer\n    elif num % 1 > 0.5:\n        return int(num) + 1\n    # If equidistant, round away from zero\n    else:\n        if num >= 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1", "prompt_tokens": 196, "completion_tokens": 136, "duration": 4.093801975250244}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones_per_level = []\n    \n    # Initialize the number of stones in the first level\n    stones = n\n    \n    # Iterate from 1 to n to calculate the number of stones in each level\n    for i in range(n):\n        # Append the current number of stones to the list\n        stones_per_level.append(stones)\n        \n        # Update the number of stones for the next level based on whether n is odd or even\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n    \n    # Return the list of stones per level\n    return stones_per_level", "prompt_tokens": 172, "completion_tokens": 158, "duration": 4.510539293289185}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words using commas and spaces as separators\n    words = s.replace(\",\", \" \").split()\n    \n    return words", "prompt_tokens": 156, "completion_tokens": 38, "duration": 2.2904117107391357}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y to x inclusive\n    for num in range(y, x-1, -1):\n        # Check if the number is even and return it\n        if num % 2 == 0:\n            return num\n    # If no even number found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 84, "duration": 5.610842704772949}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) // 2\n    avg_binary = bin(round(avg))\n    \n    return avg_binary", "prompt_tokens": 180, "completion_tokens": 48, "duration": 2.2366294860839844}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x: List[int]) -> List[int]:\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    result = sorted(filtered)\n    \n    return result", "prompt_tokens": 142, "completion_tokens": 74, "duration": 2.872436285018921}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    result = [ \n        \"One\" if num == 1 else\n        \"Two\" if num == 2 else\n        \"Three\" if num == 3 else\n        \"Four\" if num == 4 else\n        \"Five\" if num == 5 else\n        \"Six\" if num == 6 else\n        \"Seven\" if num == 7 else\n        \"Eight\" if num == 8 else\n        \"Nine\" for num in reversed_arr\n    ]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 194, "duration": 4.73216438293457}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 135, "duration": 3.27810001373291}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 152, "duration": 4.950187921524048}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of the count of numbers with sum of digits > 0\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to its absolute value\n        num = abs(num)\n        \n        # Calculate the sum of the digits of the number\n        sum_digits = sum(int(digit) for digit in str(num))\n        \n        # If the sum of digits is greater than 0, increment the count\n        if sum_digits > 0:\n            count += 1\n    \n    return count", "prompt_tokens": 164, "completion_tokens": 133, "duration": 4.207160949707031}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # Check if the array can be sorted by performing right shift operations\n    for i in range(len(arr)):\n        if arr[(min_index + i) % len(arr)] != min(arr):\n            return False\n    return True", "prompt_tokens": 339, "completion_tokens": 125, "duration": 3.856558084487915}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd elements in lst2\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Check if the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2\n    if odd_count <= odd_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 132, "duration": 3.746708393096924}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate through each letter in the list\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n    \n    # Find the maximum count of any letter in the dictionary\n    max_count = max(letter_count.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 194, "duration": 5.117885589599609}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 77, "duration": 2.419431686401367}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        \n        # Create the output string and append it to the result list\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 128, "duration": 3.5131921768188477}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum by adding the current number\n        current_sum += num\n        # Update minimum sum if current sum is less than minimum sum\n        min_sum = min(min_sum, current_sum)\n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 124, "duration": 3.288172721862793}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n\n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n\n    # Calculate number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n\n    # Calculate number of times to lower the buckets\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 91, "duration": 3.8378782272338867}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Sort the array based on the number of ones in their binary representation and then by decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 49, "duration": 2.3679006099700928}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize a list to store words with n consonants\n    result = []\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Check if the word has exactly n consonants\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 156, "duration": 3.968428134918213}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 98, "duration": 5.5400707721710205}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in each string\n    open_count_1 = lst[0].count('(')\n    close_count_1 = lst[0].count(')')\n    open_count_2 = lst[1].count('(')\n    close_count_2 = lst[1].count(')')\n\n    # Check if the total number of open and close parentheses are equal\n    if open_count_1 + open_count_2 == close_count_1 + close_count_2:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 128, "duration": 3.4335498809814453}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the last k elements of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 2.068448543548584}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize a variable to store the sum of odd elements at even positions\n    sum_odd_even_pos = 0\n    # Iterate over the list using index and value\n    for i, num in enumerate(lst):\n        # Check if the index is even and the number is odd\n        if i % 2 == 0 and num % 2 != 0:\n            # Add the odd number to the sum\n            sum_odd_even_pos += num\n    return sum_odd_even_pos", "prompt_tokens": 137, "completion_tokens": 110, "duration": 3.294525146484375}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Filter elements with at most two digits\n    filtered_arr = [num for num in arr[:k] if 10 <= num <= 99]\n    \n    # Calculate the sum of filtered elements\n    return sum(filtered_arr)", "prompt_tokens": 168, "completion_tokens": 59, "duration": 2.3041739463806152}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    result = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the result list\n        if n % 2 != 0:\n            result.append(n)\n        \n        # Calculate the next term in collatz sequence\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the result list as it is an odd number in collatz sequence\n    result.append(1)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 271, "completion_tokens": 166, "duration": 3.121561050415039}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == \"\":\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Define the maximum number of days for each month\n    max_days = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > max_days[month]:\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 243, "duration": 5.835092067718506}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    # If no whitespaces or commas, count number of lower-case letters with odd order in the alphabet\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 105, "duration": 2.695857048034668}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 1.8583543300628662}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection interval\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intersection interval is valid\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection interval\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 153, "duration": 6.66301703453064}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to store product of signs and sum of magnitudes\n    sign_product = 1\n    magnitude_sum = 0\n    \n    # Iterate through the array\n    for num in arr:\n        # Update product of signs\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        \n        # Update sum of magnitudes\n        magnitude_sum += abs(num)\n    \n    # Return the result\n    return sign_product * magnitude_sum", "prompt_tokens": 162, "completion_tokens": 134, "duration": 2.6721274852752686}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Initialize variables\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n    \n    # Helper function to check if a cell is valid\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n    \n    # Helper function to perform DFS to find the minimum path\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((x, y))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if new_path:\n                    return new_path\n        \n        visited.remove((x, y))\n    \n    # Find the minimum path starting from each cell\n    min_path = []\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if path:\n                if not min_path or path < min_path:\n                    min_path = path\n    \n    return min_path", "prompt_tokens": 436, "completion_tokens": 279, "duration": 8.70862078666687}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two values\n    tribonacci = [1, 3]\n    \n    # Loop to calculate the next values based on the Tribonacci sequence rules\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 121, "duration": 2.429903745651245}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product to 1\n    product = 1\n    # Iterate through each digit in the number\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 106, "duration": 2.8879921436309814}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of nested brackets\n    count = 0\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an opening bracket, increment the counter\n        if char == '[':\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif char == ']' and count > 0:\n            count -= 1\n    # If the counter is greater than 0, there is at least one nested bracket\n    return count > 0", "prompt_tokens": 173, "completion_tokens": 128, "duration": 6.518113374710083}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    lst = [int(x) if x % 1 == 0 else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum([x**2 for x in lst])", "prompt_tokens": 197, "completion_tokens": 78, "duration": 4.938031196594238}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is not empty\n    if txt:\n        # Get the last character of the string\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character and is not part of a word\n        if last_char.isalpha() and (len(txt.split()) == 1 or txt.split()[-1] == ''):\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 109, "duration": 5.78477931022644}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Return the index of the current element\n            return i - 1\n    # If no such element exists, return -1\n    return -1", "prompt_tokens": 143, "completion_tokens": 96, "duration": 1.9652152061462402}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find largest negative integer or set to None\n    largest_negative = max(negatives) if negatives else None\n    \n    # Find smallest positive integer or set to None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 111, "duration": 5.76882004737854}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if a and b are equal\n    if a == b:\n        return None\n    \n    # Check if a and b are integers or floats\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    \n    # Check if a and b are strings\n    if isinstance(a, str) and isinstance(b, str):\n        # Convert strings to floats for comparison\n        a_float = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_float = float(b.replace(',', '.')) if ',' in b else float(b)\n        \n        return b if a_float < b_float else a\n    \n    # Check if a is a string\n    if isinstance(a, str):\n        return a\n    \n    # Check if b is a string\n    if isinstance(b, str):\n        return b", "prompt_tokens": 181, "completion_tokens": 191, "duration": 6.378777503967285}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Check if the number is less than 8 or odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if the number can be written as the sum of exactly 4 positive even numbers\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    return False", "prompt_tokens": 117, "completion_tokens": 179, "duration": 6.332382440567017}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result variable to store the final result\n    result = 1\n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of the current number i\n        factorial_i = 1\n        for j in range(i, 0, -1):\n            factorial_i *= j\n        # Multiply the result by the factorial of i\n        result *= factorial_i\n    return result", "prompt_tokens": 135, "completion_tokens": 108, "duration": 5.049408435821533}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 56, "duration": 2.3346710205078125}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is 'txt', 'exe', or 'dll'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 196, "duration": 3.786494493484497}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through the list with index\n    for i, num in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if the index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 125, "duration": 4.934939861297607}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter out words with prime lengths\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words into a new sentence\n    result = ' '.join(prime_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 141, "duration": 5.563915491104126}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    product = x_num * n_num / (x_denom * n_denom)\n    \n    # Check if the product is a whole number\n    return product.is_integer()", "prompt_tokens": 195, "completion_tokens": 98, "duration": 5.126116514205933}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits of a number\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list of numbers based on the sum of their digits and index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 81, "duration": 5.189319372177124}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the number of elements that meet the condition\n    count = 0\n    \n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the condition is met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 149, "duration": 2.8827126026153564}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]  # Create the array a\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:  # Check if the sum is a multiple of 3\n                    count += 1\n    return count", "prompt_tokens": 205, "completion_tokens": 120, "duration": 5.293640851974487}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the start and end indices for the slice of planets between planet1 and planet2\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Get the slice of planets between planet1 and planet2 and sort them by proximity to the sun\n    result = sorted(planets[start_index:end_index], key=lambda x: planets.index(x))\n    \n    return tuple(result)", "prompt_tokens": 251, "completion_tokens": 212, "duration": 7.06351113319397}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list", "prompt_tokens": 227, "completion_tokens": 78, "duration": 4.939330577850342}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 3.008273124694824}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is positive, odd, and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num**2\n    # Return the result\n    return result", "prompt_tokens": 177, "completion_tokens": 111, "duration": 3.1460883617401123}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    result = []\n    \n    # Iterate through the elements of the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 103, "duration": 2.2005364894866943}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strength of each extension\n    strengths = {}\n    \n    # Iterate through each extension in the list\n    for ext in extensions:\n        # Calculate the strength of the extension\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        strength = cap - sm\n        \n        # Store the strength in the dictionary\n        strengths[ext] = strength\n    \n    # Find the extension with the maximum strength\n    max_strength_ext = max(strengths, key=strengths.get)\n    \n    # Return the class name and the strongest extension\n    return f\"{class_name}.{max_strength_ext}\"", "prompt_tokens": 317, "completion_tokens": 160, "duration": 7.102930068969727}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Check if the length of both words are equal\n    if len(a) != len(b):\n        return False\n    \n    # Double the first word to check for all possible rotations\n    a = a + a\n    \n    # Check if the second word or any of its rotations is a substring in the doubled first word\n    return b in a", "prompt_tokens": 169, "completion_tokens": 84, "duration": 1.5826799869537354}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the integer to a string to iterate over its digits\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of the counts of even and odd digits\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 123, "duration": 4.162176847457886}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define the mapping of roman numerals to integers\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through the roman numerals in descending order\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # Repeat the current roman numeral while the number is greater than or equal to its value\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    # Return the result in lowercase\n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 203, "duration": 6.223466157913208}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 87, "duration": 4.573993921279907}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store the unique characters count for each word\n    unique_chars_count = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_chars_count[word] = len(set(word))\n    \n    # Find the maximum number of unique characters\n    max_unique_chars = max(unique_chars_count.values())\n    \n    # Filter words with maximum unique characters\n    max_words = [word for word, count in unique_chars_count.items() if count == max_unique_chars]\n    \n    # Sort the filtered words lexicographically\n    max_words.sort()\n    \n    # Return the first word in the sorted list\n    return max_words[0]", "prompt_tokens": 160, "completion_tokens": 160, "duration": 3.3686463832855225}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after meals\n    left_after_meals = max(0, remaining - need)\n    \n    return [total_eaten, left_after_meals]", "prompt_tokens": 317, "completion_tokens": 72, "duration": 3.9504427909851074}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Check the operator and perform the corresponding operation with the next operand\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 148, "duration": 2.7845373153686523}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Check if the string contains any letters\n    if not any(char.isalpha() for char in s):\n        # If no letters, reverse the string\n        return s[::-1]\n    \n    # Otherwise, reverse the case of letters\n    return ''.join(char.upper() if char.islower() else char.lower() for char in s)", "prompt_tokens": 147, "completion_tokens": 79, "duration": 3.709399938583374}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 116, "completion_tokens": 43, "duration": 1.1597950458526611}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Initialize an empty list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Append the even digit to the result list\n            result.append(num)\n    \n    # Return the list of even digits\n    return result", "prompt_tokens": 144, "completion_tokens": 110, "duration": 4.27116847038269}
