{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the difference between adjacent numbers is less than the threshold\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 91, "duration": 3.250419855117798}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separated groups\n    separated_groups = []\n    \n    # Initialize a variable to store the current group\n    current_group = ''\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the current group is balanced, add it to the separated groups list\n        if current_group.count('(') == current_group.count(')'):\n            separated_groups.append(current_group)\n            current_group = ''\n    \n    return separated_groups", "prompt_tokens": 154, "completion_tokens": 155, "duration": 4.500701665878296}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 2.9389185905456543}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance variable to keep track of account balance\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 89, "duration": 3.512084484100342}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each element and the mean\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(absolute_diff) / len(absolute_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 94, "duration": 3.2137553691864014}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the input list\n    for num in numbers:\n        # Append the current number to the result list\n        result.append(num)\n        # Append the delimiter to the result list\n        result.append(delimeter)\n    \n    # Remove the extra delimiter at the end of the result list\n    result.pop()\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 107, "duration": 3.2981302738189697}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by space to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current level and maximum level of nesting\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            if char == '(':\n                # Increment current level when encountering an opening parenthesis\n                current_level += 1\n                # Update max_level if current level is greater\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                # Decrement current level when encountering a closing parenthesis\n                current_level -= 1\n        \n        # Append the maximum level of nesting for the current group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 220, "duration": 5.224530220031738}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 109, "duration": 3.5483202934265137}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables to store sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of numbers in the list\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    # Return the sum and product as a tuple\n    return total_sum, total_product", "prompt_tokens": 149, "completion_tokens": 93, "duration": 3.2524619102478027}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_values = []\n    \n    # Initialize a deque to store the indices of elements in the list\n    indices = deque()\n    \n    # Iterate through the list of numbers\n    for i, num in enumerate(numbers):\n        # Remove indices of elements that are no longer in the window\n        while indices and indices[0] < i - 2:\n            indices.popleft()\n        \n        # Remove indices of elements smaller than the current number\n        while indices and numbers[indices[-1]] < num:\n            indices.pop()\n        \n        # Add the current index to the deque\n        indices.append(i)\n        \n        # Append the rolling maximum to the result list\n        rolling_max_values.append(numbers[indices[0]])\n    \n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 184, "duration": 5.3820343017578125}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 182, "completion_tokens": 168, "duration": 4.517992734909058}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 91, "duration": 3.5395238399505615}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n\n    return longest_strings[0]", "prompt_tokens": 141, "completion_tokens": 62, "duration": 2.519322156906128}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Find the minimum of the two numbers\n    min_num = min(a, b)\n    \n    # Find the greatest common divisor by iterating from 1 to the minimum number\n    for i in range(1, min_num + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n    \n    return gcd", "prompt_tokens": 110, "completion_tokens": 96, "duration": 3.1927084922790527}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Loop through the input string\n    for i in range(1, len(string)+1):\n        # Append the prefix to the list\n        prefixes.append(string[:i])\n    \n    # Return the list of prefixes\n    return prefixes", "prompt_tokens": 98, "completion_tokens": 81, "duration": 3.1356852054595947}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = list(map(str, numbers))\n    \n    # Join the list of strings with space delimiter\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 86, "duration": 3.4505484104156494}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use set to get unique characters\n    unique_chars = set(string)\n    \n    # Return the count of unique characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 67, "duration": 2.95806622505188}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map the special ASCII characters to their corresponding number of beats\n    notes_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the input music string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the duration of each note\n    durations = []\n    \n    # Iterate through each note in the list\n    for note in notes:\n        # Append the duration of the note to the durations list using the dictionary\n        durations.append(notes_duration[note])\n    \n    return durations", "prompt_tokens": 211, "completion_tokens": 146, "duration": 4.599972486495972}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a counter variable to keep track of the number of occurrences\n    count = 0\n    \n    # Loop through the original string with a sliding window of length equal to the substring\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring matches the current window in the original string\n        if string[i:i + len(substring)] == substring:\n            # Increment the counter if there is a match\n            count += 1\n    \n    return count", "prompt_tokens": 128, "completion_tokens": 124, "duration": 3.7911953926086426}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding numerical values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Sort the list of numberals based on their numerical values\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted numberals into a string\n    return ' '.join(sorted_nums)", "prompt_tokens": 144, "completion_tokens": 165, "duration": 4.612349033355713}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize variables to store the closest pair of numbers and their difference\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    \n    # Iterate through the list to find the closest pair of numbers\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 150, "duration": 5.050683259963989}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to rescale the numbers to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 109, "duration": 3.9198644161224365}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Create an empty list to store the filtered integers\n    integers = []\n    \n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # If it is an integer, add it to the list of integers\n            integers.append(value)\n    \n    # Return the list of filtered integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 105, "duration": 3.3525006771087646}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 27, "duration": 2.102200984954834}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 67, "duration": 2.5431387424468994}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 65, "duration": 2.800502061843872}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function\n    counts = Counter(numbers)  # Count occurrences of each element\n    result = [num for num in numbers if counts[num] == 1]  # Keep elements that occur only once\n    return result  # Return the result list", "prompt_tokens": 123, "completion_tokens": 79, "duration": 2.927311420440674}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Convert each character in the string to its opposite case\n    flipped_string = ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n    return flipped_string", "prompt_tokens": 88, "completion_tokens": 55, "duration": 2.7807610034942627}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    \n    # Join all strings in the list using the join() method\n    result = ''.join(strings)\n    \n    return result", "prompt_tokens": 96, "completion_tokens": 77, "duration": 2.7720816135406494}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Create an empty list to store strings that start with the given prefix\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 113, "duration": 3.8474652767181396}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 89, "duration": 2.7849886417388916}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 61, "duration": 2.7027225494384766}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[-1]\n    b = xs[-2]\n    return -b/a", "prompt_tokens": 298, "completion_tokens": 41, "duration": 2.216250419616699}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a copy of the input list\n    result = l.copy()\n    \n    # Sort the elements at indices divisible by three\n    result[::3] = sorted(result[::3])\n    \n    return result", "prompt_tokens": 190, "completion_tokens": 57, "duration": 2.441218852996826}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    sorted_unique = sorted(unique_set)\n    \n    return sorted_unique", "prompt_tokens": 113, "completion_tokens": 51, "duration": 2.2375125885009766}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 2.1063408851623535}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter variable to keep track of the number of times digit 7 appears\n    count = 0\n    # Iterate through integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13 and contains the digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the counter if conditions are met\n            count += 1\n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 128, "duration": 34.00766086578369}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Separate even and odd elements\n    even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    \n    # Sort the even elements\n    sorted_even = sorted(even)\n    \n    # Combine the sorted even elements with the odd elements\n    result = [sorted_even[i//2] if i % 2 == 0 else odd[i//2] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 125, "duration": 6.664245843887329}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 113, "duration": 6.854213714599609}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            if fibonacci(num) == num:\n                count += 1\n\n    return num", "prompt_tokens": 137, "completion_tokens": 145, "duration": 4.508069753646851}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Loop through the list\n    for i in range(len(l) - 2):\n        # Initialize left and right pointers\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 133, "duration": 3.679476499557495}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions by using the formula n*(n-1)/2\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 45, "duration": 1.1995725631713867}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the final result list\n    return result", "prompt_tokens": 148, "completion_tokens": 82, "duration": 4.469682455062866}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(num)\n    \n    # If no pair is found, return False\n    return False", "prompt_tokens": 197, "completion_tokens": 102, "duration": 6.3435959815979}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Initialize an empty string to store the converted number\n    result = \"\"\n    \n    # Continue the loop until x is greater than 0\n    while x > 0:\n        # Get the remainder when x is divided by the new base\n        remainder = x % base\n        \n        # Add the remainder to the beginning of the result string\n        result = str(remainder) + result\n        \n        # Update x to be the quotient of x divided by the new base\n        x = x // base\n    \n    # Return the final result string\n    return result", "prompt_tokens": 131, "completion_tokens": 131, "duration": 5.252662420272827}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 3.7062957286834717}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize a list to store the first 4 elements of the sequence\n    fib4_list = [0, 0, 2, 0]\n    \n    # Loop from 4 to n to calculate the next elements of the sequence\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    \n    # Return the n-th element of the sequence\n    return fib4_list[n]", "prompt_tokens": 211, "completion_tokens": 130, "duration": 4.082265853881836}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Find the length of the list\n    n = len(l)\n    \n    # Step 3: Check if the length of the list is odd or even\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 107, "duration": 4.889221906661987}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 54, "duration": 3.5933947563171387}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate the modulo of the result with p\n    result %= p\n    return result", "prompt_tokens": 145, "completion_tokens": 50, "duration": 5.209078550338745}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 43, "duration": 1.2184512615203857}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Use list comprehension to filter out vowels from the text\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 88, "duration": 6.010565519332886}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 55, "duration": 5.450857639312744}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 1.0310282707214355}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if the sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 64, "duration": 4.566272497177124}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: return 0 if n is 0\n    if n == 0:\n        return 0\n    # Initialize variables to store the first two Fibonacci numbers\n    a, b = 0, 1\n    # Loop to calculate the n-th Fibonacci number\n    for _ in range(1, n):\n        a, b = b, a + b\n    # Return the n-th Fibonacci number\n    return b", "prompt_tokens": 92, "completion_tokens": 104, "duration": 2.6697044372558594}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a counter to keep track of the number of opening brackets\n    count = 0\n    \n    # Iterate through each character in the input string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"<\":\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif bracket == \">\":\n            count -= 1\n            # If the counter becomes negative, return False\n            if count < 0:\n                return False\n    \n    # If the counter is zero at the end, return True\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 147, "duration": 5.604034185409546}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is monotonically increasing\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # Check if the list is monotonically decreasing\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 98, "duration": 4.964887857437134}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = list(set(l1) & set(l2))\n    \n    # Sort the common elements\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 65, "duration": 3.9694292545318604}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to find all factors of a number\n    def find_factors(num):\n        factors = []\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n    \n    # Find all factors of the number n\n    factors = find_factors(n)\n    \n    # Filter out prime factors from the factors list\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    \n    # Return the largest prime factor\n    return max(prime_factors)", "prompt_tokens": 103, "completion_tokens": 201, "duration": 6.077897071838379}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 39, "duration": 1.1817433834075928}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the balance\n        if bracket == \"(\":\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif bracket == \")\":\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # If the balance is zero at the end, return True\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 151, "duration": 7.640560150146484}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the coefficients starting from the second one\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 78, "duration": 5.4746413230896}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 1.9719855785369873}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to keep track of the count of vowels\n    count = 0\n    \n    # Define a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # If it's a vowel, increment the count\n            count += 1\n        # Check if 'y' is a vowel at the end of the word\n        elif s[i].lower() == 'y' and i == len(s) - 1:\n            count += 1\n    \n    # Return the total count of vowels\n    return count", "prompt_tokens": 166, "completion_tokens": 169, "duration": 6.9624223709106445}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert integer x to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift needed\n    actual_shift = shift % len(x_str)\n    \n    # Perform circular shift by slicing the string and concatenating\n    result = x_str[-actual_shift:] + x_str[:-actual_shift]\n    \n    # Return the result\n    return result", "prompt_tokens": 122, "completion_tokens": 94, "duration": 6.164694786071777}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize a variable to store the sum of ASCII codes\n    sum_ascii = 0\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the sum\n            sum_ascii += ord(char)\n    \n    # Return the total sum of ASCII codes\n    return sum_ascii", "prompt_tokens": 152, "completion_tokens": 105, "duration": 4.602344274520874}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    \n    # Extract the number of apples and oranges from the split string\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 98, "duration": 4.248288869857788}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Filter even values\n    even_values = [num for num in arr if num % 2 == 0]\n    \n    # If no even values found or array is empty, return empty list\n    if not even_values:\n        return []\n    \n    # Find the smallest even value and its index\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n    \n    return [smallest_value, smallest_index]", "prompt_tokens": 352, "completion_tokens": 102, "duration": 4.534032821655273}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary to find the greatest integer that meets the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 132, "duration": 4.740410327911377}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over half of the list\n    for i in range(len(lst)//2):\n        # Append the minimum value from the sorted list\n        result.append(lst[i])\n        # Append the maximum value from the sorted list\n        result.append(lst[-(i+1)])\n    \n    # If the length of the list is odd, append the middle element\n    if len(lst) % 2 == 1:\n        result.append(lst[len(lst)//2])\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 140, "duration": 7.321514368057251}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 140, "duration": 4.890313148498535}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to the maximum weight w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 71, "duration": 5.013110637664795}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Loop through the array up to the middle\n    for i in range(len(arr)//2):\n        # Check if the elements at the current position and its mirror position are different\n        if arr[i] != arr[-i-1]:\n            # Increment the changes needed by 1\n            changes += 1\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 110, "duration": 5.683762550354004}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in lst1 and lst2\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 98, "duration": 4.28955602645874}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the first prime factor\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factor1 = i\n            break\n    \n    # Find the second prime factor\n    for j in range(factor1 + 1, a):\n        if a % j == 0 and is_prime(j):\n            factor2 = j\n            break\n    \n    # Find the third prime factor\n    factor3 = a // (factor1 * factor2)\n    \n    # Check if all factors are prime and return True if they are\n    return is_prime(factor1) and is_prime(factor2) and is_prime(factor3)", "prompt_tokens": 119, "completion_tokens": 215, "duration": 7.132878065109253}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is 1, return True if n is also 1\n    if x == 1:\n        return n == 1\n    \n    # Check if x is divisible by n\n    if x % n != 0:\n        return False\n    \n    # Calculate the power of n that results in x\n    power = 0\n    while n ** power < x:\n        power += 1\n    \n    # Check if n**power is equal to x\n    return n ** power == x", "prompt_tokens": 182, "completion_tokens": 119, "duration": 4.42810583114624}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of a is an integer\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 150, "completion_tokens": 44, "duration": 4.635539531707764}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a list of prime numbers in decimal form\n    primes = [2, 3, 5, 7, 11, 13]\n    \n    # Initialize a count variable to keep track of prime digits\n    count = 0\n    \n    # Iterate through each character in the hexadecimal number\n    for char in num:\n        # Convert the hexadecimal character to decimal\n        dec = int(char, 16)\n        # Check if the decimal value is a prime number\n        if dec in primes or is_prime(dec):\n            count += 1\n    \n    return count", "prompt_tokens": 339, "completion_tokens": 195, "duration": 5.876593589782715}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary_with_db = 'db' + binary + 'db'\n    \n    return binary_with_db", "prompt_tokens": 179, "completion_tokens": 63, "duration": 5.1694176197052}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string starting from index 0 up to the third last character\n    for i in range(len(s) - 2):\n        # Check if the current character and the next two characters are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 124, "duration": 6.827546119689941}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Assign letter grades based on GPA\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 288, "duration": 6.8989417552948}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Calculate the length of the string\n    length = len(string)\n    \n    # Check if the length is less than 2\n    if length < 2:\n        return False\n    \n    # Check if the length is a prime number\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 96, "duration": 4.213458776473999}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count variable to keep track of numbers that start or end with 1\n    count = 0\n    \n    # Calculate the count of numbers that start with 1\n    count_start_with_1 = 9 * 10 ** (n - 1)\n    \n    # Calculate the count of numbers that end with 1\n    count_end_with_1 = 10 ** (n - 1)\n    \n    # Calculate the total count by adding the two counts and subtracting the overlap (numbers that start and end with 1)\n    count = count_start_with_1 + count_end_with_1 - 10 ** (n - 1)\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 152, "duration": 3.650958299636841}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to its binary representation\n    binary = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary representation\n    total_sum = sum(int(digit) for digit in binary)\n    \n    # Convert the total sum to binary representation and return as string\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 77, "duration": 1.8660080432891846}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    even_elements_at_odd_indices = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Sum the filtered elements\n    return sum(even_elements_at_odd_indices)", "prompt_tokens": 95, "completion_tokens": 70, "duration": 3.4381275177001953}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters in the word based on ascii value and join them back into a word\n        ordered_word = ''.join(sorted(word))\n        \n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words back into a string with spaces\n    ordered_string = ' '.join(ordered_words)\n    \n    return ordered_string", "prompt_tokens": 170, "completion_tokens": 143, "duration": 4.539042711257935}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over each row in the list\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Iterate over each column in the row\n            for j, col in enumerate(row):\n                # If the element is x, add the coordinate to the list\n                if col == x:\n                    coordinates.append((i, j))\n    \n    # Sort the coordinates by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    \n    # Sort the coordinates of the row by columns in descending order\n    coordinates.sort(key=lambda coord: coord[1], reverse=True)\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 168, "duration": 4.272942781448364}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()  # make a copy of the given array\n    if (array[0] + array[-1]) % 2 == 0:  # check if the sum of first and last element is even\n        sorted_array.sort(reverse=True)  # sort the array in descending order\n    else:\n        sorted_array.sort()  # sort the array in ascending order\n    return sorted_array", "prompt_tokens": 243, "completion_tokens": 97, "duration": 3.400402307510376}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Define the shift value\n    shift = 2 * 2\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            \n            # Calculate the new index after shifting\n            new_index = (index + shift) % 26\n            \n            # Append the new character to the result string\n            result += alphabet[new_index]\n        else:\n            # If the character is not a letter, keep it as it is\n            result += char\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 175, "duration": 5.09879994392395}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Remove duplicates\n    unique_lst = list(set(sorted_lst))\n    \n    # Check if there are at least 2 unique elements in the list\n    if len(unique_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_lst[1]", "prompt_tokens": 164, "completion_tokens": 87, "duration": 3.469423532485962}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences using delimiters '.', '?' or '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip() != '']\n    \n    # Count the number of sentences that start with 'I'\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 85, "duration": 3.1516544818878174}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "prompt_tokens": 175, "completion_tokens": 84, "duration": 3.569570779800415}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to map vowels to their replacements\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate through each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            \n            # Check if the character is a vowel\n            if char in vowels:\n                # Replace the vowel with the corresponding letter\n                char = vowels[char]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 219, "duration": 4.895411014556885}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    # Filter out non-prime numbers from the list and get the largest prime number\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n\n    # Calculate and return the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 179, "duration": 4.362946033477783}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    \n    keys = list(dict.keys())\n    first_key = keys[0]\n    \n    if first_key.islower():\n        for key in keys:\n            if not key.islower():\n                return False\n        return True\n    elif first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n                return False\n        return True\n    else:\n        return False", "prompt_tokens": 209, "completion_tokens": 102, "duration": 6.107104539871216}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 up to n\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n        \n        # Check if the number is divisible by any number less than itself\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 134, "duration": 3.8560473918914795}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of a by taking the remainder when divided by 10\n    unit_a = abs(a) % 10\n    # Get the unit digit of b by taking the remainder when divided by 10\n    unit_b = abs(b) % 10\n    # Calculate the product of the unit digits\n    result = unit_a * unit_b\n    return result", "prompt_tokens": 138, "completion_tokens": 98, "duration": 3.5685176849365234}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a variable to keep track of the count of uppercase vowels\n    count = 0\n    \n    # Create a list of uppercase vowels\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    # Iterate over the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i].upper() in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 123, "duration": 3.8403480052948}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to a float number\n    num = float(value)\n    \n    # Check if the number is equidistant from two integers\n    if num - int(num) == 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n    else:\n        return round(num)", "prompt_tokens": 196, "completion_tokens": 83, "duration": 3.1555700302124023}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]  # Initialize the list with the first level having n stones\n    for i in range(1, n):  # Iterate from 1 to n-1 to determine stones in each level\n        if n % 2 == 0:  # If n is even, add the next even number of stones\n            n += 2\n        else:  # If n is odd, add the next odd number of stones\n            n += 1\n        stones.append(n)  # Append the number of stones to the list\n    return stones", "prompt_tokens": 172, "completion_tokens": 132, "duration": 4.099395275115967}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words using both commas and spaces as separators\n    words = s.replace(\",\", \" \").split()\n    \n    return words", "prompt_tokens": 156, "completion_tokens": 39, "duration": 2.099599838256836}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y to x (backwards) to find the biggest even number in the range\n    for num in range(y, x - 1, -1):\n        # Check if the number is even and return it\n        if num % 2 == 0:\n            return num\n    # If no even number is found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 98, "duration": 3.785521984100342}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 180, "completion_tokens": 42, "duration": 2.218857526779175}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    sorted_list = sorted(filtered)\n    \n    return sorted_list", "prompt_tokens": 142, "completion_tokens": 69, "duration": 2.8589658737182617}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map the numbers to their corresponding names\n    result = list(map(lambda x: [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1], reversed_arr))\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 131, "duration": 3.991528034210205}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            total = sum(range(1, i+1))\n            result.append(total)\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 141, "duration": 3.9051010608673096}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple of even and odd palindrome counts\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 143, "duration": 3.8673806190490723}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of numbers with sum of digits > 0\n    count = 0\n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a string to iterate through its digits\n        for digit in str(abs(num)):\n            # Convert the digit back to an integer and add it to a running sum\n            digit_sum = sum(int(d) for d in digit)\n        # If the sum of digits is greater than 0, increment the counter\n        if digit_sum > 0:\n            count += 1\n    return count", "prompt_tokens": 164, "completion_tokens": 137, "duration": 4.040126323699951}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Return True if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is sorted in non-decreasing order after performing right shifts\n    return arr == sorted(arr) or arr == sorted(arr[min_index:] + arr[:min_index])", "prompt_tokens": 339, "completion_tokens": 91, "duration": 3.118435859680176}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Calculate the number of odd elements in lst2\n    odd_count2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Check if it is possible to exchange elements to make all elements of lst1 even\n    if odd_count <= odd_count2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 122, "duration": 3.6614012718200684}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate through the list of letters\n    for letter in letters:\n        # Update the count of the current letter in the dictionary\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    \n    # Find the maximum count of any letter\n    max_count = max(letter_count.values())\n    \n    # Filter the dictionary to keep only the letters with the maximum count\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 157, "duration": 4.587364196777344}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 81, "duration": 2.9294939041137695}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        \n        # Create the output string and append it to the result list\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 128, "duration": 3.76365327835083}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to keep track of current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum by adding the current number\n        current_sum += num\n        # Update minimum sum if current sum is smaller\n        min_sum = min(min_sum, current_sum)\n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 123, "duration": 3.405592441558838}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n    \n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n    \n    # Calculate number of times to lower the buckets\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 93, "duration": 5.406425714492798}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 28, "duration": 4.2620298862457275}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s: str, n: int) -> List[str]:\n    # Define a function to check if a character is a consonant\n    def is_consonant(char):\n        return char.lower() not in ['a', 'e', 'i', 'o', 'u'] and char.isalpha()\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize an empty list to store words with n consonants\n    result = []\n\n    # Iterate through each word in the list of words\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # If the number of consonants matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    return result", "prompt_tokens": 221, "completion_tokens": 188, "duration": 4.883262395858765}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 98, "duration": 3.251014471054077}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in each string\n    open_count = lst[0].count('(') + lst[1].count('(')\n    close_count = lst[0].count(')') + lst[1].count(')')\n    \n    # Check if the total count of open and close parentheses is even\n    if open_count % 2 == 0 and close_count % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 113, "duration": 3.18023681640625}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements\n    return arr[:k]", "prompt_tokens": 257, "completion_tokens": 40, "duration": 2.0920681953430176}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter odd elements at even positions\n    odd_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0]\n    \n    # Return the sum of the filtered elements\n    return sum(odd_elements)", "prompt_tokens": 137, "completion_tokens": 67, "duration": 2.5623013973236084}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate over the first k elements of the array\n    for num in arr[:k]:\n        # Check if the number has at most two digits\n        if 10 <= num < 100:\n            # Add the number to the total sum\n            total_sum += num\n    # Return the total sum\n    return total_sum", "prompt_tokens": 168, "completion_tokens": 96, "duration": 4.389991998672485}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        \n        # Apply Collatz sequence rules\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the list as it is always an odd number in collatz sequence\n    odd_numbers.append(1)\n    \n    # Sort the list in increasing order\n    odd_numbers.sort()\n    \n    return odd_numbers", "prompt_tokens": 271, "completion_tokens": 166, "duration": 4.3494062423706055}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Define the maximum number of days for each month\n    max_days = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > max_days[month]:\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 243, "duration": 4.230632066726685}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        # Split the text on whitespaces\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        # Split the text on commas\n        return txt.split(',')\n    else:\n        # Count the number of lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 116, "duration": 5.165712356567383}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list with duplicates removed\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 36, "duration": 1.8607361316680908}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the maximum of the start points of the intervals\n    start = max(interval1[0], interval2[0])\n    \n    # Find the minimum of the end points of the intervals\n    end = min(interval1[1], interval2[1])\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is less than or equal to 1\n    if length <= 1:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 166, "duration": 5.781126976013184}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to keep track of sum and product\n    total_sum = 0\n    product_sign = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Update the sum of magnitudes\n        total_sum += abs(num)\n        \n        # Update the product of signs\n        if num < 0:\n            product_sign *= -1\n        elif num == 0:\n            product_sign = 0\n    \n    # Return the result\n    return total_sum * product_sign", "prompt_tokens": 162, "completion_tokens": 133, "duration": 3.4718470573425293}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid into a 1D list\n    flat_grid = [cell for row in grid for cell in row]\n    \n    # Sort the flattened grid\n    sorted_grid = sorted(flat_grid)\n    \n    # Return the first k elements of the sorted grid\n    return sorted_grid[:k]", "prompt_tokens": 436, "completion_tokens": 75, "duration": 2.5060203075408936}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two elements\n    tribonacci = [1, 3]\n    \n    # Loop through to calculate the rest of the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 117, "duration": 4.6910858154296875}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product variable to 1\n    product = 1\n    # Iterate through each digit in the integer n\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 108, "duration": 3.1117641925811768}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of nested brackets\n    count = 0\n    \n    # Iterate through the characters in the string\n    for char in string:\n        # If an opening bracket is encountered, increment the counter\n        if char == '[':\n            count += 1\n        # If a closing bracket is encountered and there are nested brackets, return True\n        elif char == ']' and count > 0:\n            return True\n    \n    # If no nested brackets were found, return False\n    return False", "prompt_tokens": 173, "completion_tokens": 118, "duration": 5.7250213623046875}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper int (Ceiling)\n    lst = [int(x) if x % 1 == 0 else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum([x**2 for x in lst])", "prompt_tokens": 197, "completion_tokens": 78, "duration": 4.02668833732605}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is not empty\n    if txt:\n        # Get the last character of the string\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character and is not part of a word\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 107, "duration": 2.7540597915649414}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize a variable to store the result\n    result = -1\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the result to the current index\n            result = i\n    # Return the result\n    return result", "prompt_tokens": 143, "completion_tokens": 103, "duration": 2.3338232040405273}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative integers and find the largest one\n    neg_integers = [num for num in lst if num < 0]\n    largest_neg = None if not neg_integers else max(neg_integers)\n    \n    # Filter positive integers and find the smallest one\n    pos_integers = [num for num in lst if num > 0]\n    smallest_pos = None if not pos_integers else min(pos_integers)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 178, "completion_tokens": 113, "duration": 6.124927520751953}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if a and b are equal\n    if a == b:\n        return None\n    \n    # Check if a and b are integers\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    \n    # Check if a and b are floats\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    \n    # Check if a and b are strings representing real numbers\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n        return str(max(a, b))\n    \n    # Check if a is an integer and b is a string\n    if isinstance(a, int) and isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n        return str(max(a, b))\n    \n    # Check if a is a string and b is an integer\n    if isinstance(a, str) and isinstance(b, int):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n        return str(max(a, b))", "prompt_tokens": 181, "completion_tokens": 255, "duration": 6.163820028305054}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Check if n is less than 8 or n is odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if n can be written as the sum of exactly 4 positive even numbers\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:\n                        return True\n    return False", "prompt_tokens": 117, "completion_tokens": 174, "duration": 3.1594016551971436}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result to 1\n    result = 1\n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of i and multiply it with the result\n        result *= factorial(i)\n    return result\n\ndef factorial(num):\n    # Base case: factorial of 0 is 1\n    if num == 0:\n        return 1\n    # Recursive case: calculate factorial of num\n    else:\n        return num * factorial(num - 1)", "prompt_tokens": 135, "completion_tokens": 123, "duration": 4.743421316146851}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 56, "duration": 4.27769923210144}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file's name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file's name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file's name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is 'txt', 'exe', or 'dll'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 197, "duration": 5.867751121520996}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate through the list with index\n    for i, num in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if the index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n        # For other indexes, add the number as is\n        else:\n            total += num\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 145, "duration": 5.937467336654663}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter the words based on their lengths being prime numbers\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 144, "duration": 3.430739641189575}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    product = x_num * n_num / (x_den * n_den)\n    \n    # Check if the product is a whole number\n    return product.is_integer()", "prompt_tokens": 195, "completion_tokens": 94, "duration": 5.323766708374023}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the list of numbers based on the sum of their digits and their index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 85, "duration": 5.369221925735474}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the special numbers\n    count = 0\n    \n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the conditions are met\n            count += 1\n    \n    # Return the count of special numbers\n    return count", "prompt_tokens": 159, "completion_tokens": 146, "duration": 5.0310587882995605}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)] # create the array a\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0: # check if the sum is a multiple of 3\n                    count += 1\n    return count", "prompt_tokens": 205, "completion_tokens": 117, "duration": 5.610827207565308}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Determine the indexes of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Sort the indexes to get the range of planets between planet1 and planet2\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Get the planets between planet1 and planet2\n    result = tuple(planets[start_index:end_index])\n    \n    return result", "prompt_tokens": 251, "completion_tokens": 191, "duration": 6.8249406814575195}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 78, "duration": 1.9145500659942627}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 1.9564733505249023}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is positive, odd, and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num ** 2\n    \n    # Return the result multiplied by 2\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 116, "duration": 5.7444751262664795}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    result = []\n    \n    # Iterate through each match in the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score for each match\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 107, "duration": 5.134299039840698}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strength of each extension\n    strengths = {}\n    \n    # Iterate over each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        strength = cap_count - sm_count\n        \n        # Store the strength in the dictionary\n        strengths[extension] = strength\n    \n    # Find the extension with the maximum strength\n    max_strength_extension = max(strengths, key=strengths.get)\n    \n    # Return the formatted result\n    return f\"{class_name}.{max_strength_extension}\"", "prompt_tokens": 317, "completion_tokens": 160, "duration": 5.621798753738403}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Create a new string by concatenating the first word with itself\n    a = a + a\n    # Check if the second word is a substring of the new string\n    return b in a", "prompt_tokens": 169, "completion_tokens": 55, "duration": 4.695112943649292}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 77, "duration": 4.933065176010132}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    result = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result", "prompt_tokens": 141, "completion_tokens": 139, "duration": 5.320802927017212}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the sides satisfy Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 81, "duration": 3.8515641689300537}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store the unique character count for each word\n    unique_char_count = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_chars = len(set(word))\n        # Store the count in the dictionary\n        unique_char_count[word] = unique_chars\n    \n    # Find the maximum unique character count\n    max_count = max(unique_char_count.values())\n    \n    # Filter words with maximum unique character count\n    max_words = [word for word, count in unique_char_count.items() if count == max_count]\n    \n    # Sort the filtered words lexicographically and return the first word\n    return sorted(max_words)[0]", "prompt_tokens": 160, "completion_tokens": 162, "duration": 5.4487597942352295}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after meals\n    left_after_meals = max(0, remaining - need)\n    \n    return [total_eaten, left_after_meals]", "prompt_tokens": 317, "completion_tokens": 76, "duration": 4.597414016723633}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Apply the operator to the result and the next operand\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 146, "duration": 6.112382173538208}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Iterate over each character in the string\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # Reverse the case of the letter and add it to the result\n                result += char.swapcase()\n            else:\n                # Add non-letter characters to the result as they are\n                result += char\n    else:\n        # If the string contains no letters, reverse the string\n        result = s[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 149, "duration": 4.794925928115845}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    \n    # Step 1: Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Step 2: Update the hash object with the text\n    md5_hash.update(text.encode())\n    \n    # Step 3: Get the hexadecimal representation of the hash\n    md5_hex = md5_hash.hexdigest()\n    \n    return md5_hex", "prompt_tokens": 116, "completion_tokens": 96, "duration": 5.033019542694092}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Create a list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the digit is even\n        if num % 2 == 0:\n            # Append the even digit to the result list\n            result.append(num)\n    \n    # Return the list of even digits\n    return result", "prompt_tokens": 144, "completion_tokens": 109, "duration": 4.3143470287323}
