{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the list of numbers\n    for i in range(len(numbers) - 1):\n        # Check if the absolute difference between adjacent numbers is less than the threshold\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 93, "duration": 3.506695508956909}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store separated groups\n    separated_groups = []\n    \n    # Initialize a variable to store the current group\n    current_group = \"\"\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the current group is balanced, add it to the separated groups list\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            separated_groups.append(current_group)\n            current_group = \"\"\n    \n    return separated_groups", "prompt_tokens": 154, "completion_tokens": 155, "duration": 5.26373291015625}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part by subtracting the integer part from the original number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 63, "duration": 2.5302822589874268}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance variable to keep track of account balance\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 89, "duration": 3.511795997619629}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(numbers)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 91, "duration": 3.6839311122894287}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []  # create an empty list to store the result\n    for num in numbers:  # iterate through each number in the input list\n        result.extend([num, delimeter])  # add the number and delimeter to the result list\n    result.pop()  # remove the last delimeter from the result list\n    return result  # return the final result list", "prompt_tokens": 131, "completion_tokens": 102, "duration": 3.493277072906494}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize variables to keep track of current nesting level and maximum nesting level\n        current_level = 0\n        max_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increment the current nesting level when encountering an opening parenthesis\n                current_level += 1\n                # Update the maximum nesting level if the current level is greater\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                # Decrement the current nesting level when encountering a closing parenthesis\n                current_level -= 1\n        \n        # Append the maximum nesting level for the current group to the result list\n        result.append(max_level)\n\n    return result", "prompt_tokens": 151, "completion_tokens": 223, "duration": 5.5000810623168945}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list of strings\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 113, "duration": 3.621391773223877}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables for sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Calculate sum and product of numbers\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    return total_sum, total_product", "prompt_tokens": 149, "completion_tokens": 78, "duration": 2.8172831535339355}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    result = []\n    \n    # Initialize a deque to store the indices of elements in the list\n    window = deque()\n    \n    # Iterate through the list of numbers\n    for i, num in enumerate(numbers):\n        # Remove indices from the left end of the deque if they are out of the current window\n        while window and window[0] < i - 2:\n            window.popleft()\n        \n        # Remove elements from the right end of the deque if they are smaller than the current number\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        \n        # Append the current index to the deque\n        window.append(i)\n        \n        # Append the rolling maximum to the result list\n        result.append(numbers[window[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 192, "duration": 8.095163345336914}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Check if the string is already a palindrome\n    if string == string[::-1]:\n        return string\n    \n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            break\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:i-1][::-1]", "prompt_tokens": 182, "completion_tokens": 134, "duration": 3.8085150718688965}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation\n    result = int_a ^ int_b\n    \n    # Convert result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 85, "duration": 3.3779144287109375}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n    \n    max_length = max(len(s) for s in strings)  # Find the maximum length among all strings\n    longest_strings = [s for s in strings if len(s) == max_length]  # Find all strings with the maximum length\n    return longest_strings[0]  # Return the first string with the maximum length\n\n# Test cases\nprint(longest([]))\nprint(longest(['a', 'b', 'c']))\nprint(longest(['a', 'bb', 'ccc']))", "prompt_tokens": 141, "completion_tokens": 139, "duration": 5.853435277938843}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Find the minimum of the two numbers\n    min_num = min(a, b)\n    \n    # Iterate from 1 to the minimum number\n    for i in range(1, min_num + 1):\n        # Check if both numbers are divisible by the current number\n        if a % i == 0 and b % i == 0:\n            gcd = i  # Update the greatest common divisor\n    \n    return gcd  # Return the greatest common divisor", "prompt_tokens": 110, "completion_tokens": 117, "duration": 3.7353098392486572}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the range of the length of the input string\n    for i in range(len(string)):\n        # Append the prefix from the start of the string up to index i\n        prefixes.append(string[:i+1])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 83, "duration": 3.084210157394409}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n+1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = [str(num) for num in numbers]\n    \n    # Join the list of strings with space delimiter\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 89, "duration": 3.096970796585083}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set(string)\n    \n    # Return the number of unique characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 68, "duration": 2.71708345413208}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map note symbols to their corresponding duration\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the music string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Iterate through each note and get its duration from the dictionary\n    # Append the duration to the result list\n    result = [note_duration[note] for note in notes]\n    \n    return result", "prompt_tokens": 211, "completion_tokens": 119, "duration": 6.119682788848877}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # Initialize a counter variable to keep track of the number of occurrences\n    count = 0\n    # Iterate over the string using a sliding window of length equal to the substring\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring matches the current window in the string\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 128, "completion_tokens": 111, "duration": 3.733950138092041}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to their corresponding integer values\n    numberals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of numberals\n    numberals_list = numbers.split()\n    \n    # Sort the list of numberals based on their integer values\n    sorted_numberals = sorted(numberals_list, key=lambda x: numberals[x])\n    \n    # Join the sorted numberals into a string\n    return ' '.join(sorted_numberals)", "prompt_tokens": 144, "completion_tokens": 169, "duration": 5.417384624481201}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair of numbers and their difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair of numbers\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i+1] - sorted_numbers[i])\n        if diff < min_diff:\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n            min_diff = diff\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 162, "duration": 4.641389608383179}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to rescale the numbers to the unit interval\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 104, "duration": 3.6744656562805176}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # If it is an integer, add it to the list of integers\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 102, "duration": 3.20695161819458}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 27, "duration": 1.9414567947387695}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking from n-1 down to 1\n    for i in range(n-1, 0, -1):\n        # If n is divisible by i, return i\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 68, "duration": 2.9388046264648438}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start with 2 as the smallest prime factor\n    i = 2\n    \n    # Keep dividing the number by i until it is no longer divisible\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    \n    # If the remaining number is greater than 1, it is also a prime factor\n    if n > 1:\n        factors.append(n)\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 140, "duration": 4.873323917388916}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function with the given signature\n    counts = Counter(numbers)  # Count occurrences of each element in the list\n    result = [num for num in numbers if counts[num] == 1]  # Create a new list with elements that occur only once\n    return result  # Return the list with unique elements\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]", "prompt_tokens": 123, "completion_tokens": 129, "duration": 4.1913580894470215}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 52, "duration": 2.8982770442962646}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using the empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 36, "duration": 2.2445578575134277}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(string)\n    \n    # Return the list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 115, "duration": 3.6654317378997803}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    positive_nums = []\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list\n            positive_nums.append(num)\n    \n    # Return the list of positive numbers\n    return positive_nums", "prompt_tokens": 153, "completion_tokens": 88, "duration": 2.99208927154541}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 56, "duration": 2.5496773719787598}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs) - 1\n    a = xs[-1]\n    b = xs[-2]\n    return -b / a", "prompt_tokens": 298, "completion_tokens": 42, "duration": 2.2409074306488037}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Create a copy of the input list\n    result = l.copy()\n    \n    # Sort the elements at indices divisible by three\n    result[::3] = sorted(result[::3])\n    \n    return result", "prompt_tokens": 190, "completion_tokens": 57, "duration": 2.559217929840088}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Sort the unique elements\n    sorted_unique_list = sorted(unique_set)\n    \n    return sorted_unique_list", "prompt_tokens": 113, "completion_tokens": 53, "duration": 2.447148084640503}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element in the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 2.177203416824341}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a variable to count the number of times digit 7 appears\n    count = 0\n    \n    # Iterate through integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13 and contains digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the count if conditions are met\n            count += 1\n    \n    # Return the count\n    return count", "prompt_tokens": 119, "completion_tokens": 118, "duration": 3.386780261993408}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Create a new list to store the sorted even indices values\n    sorted_even = sorted([x for x in l[::2]])\n    \n    # Create a new list to store the final result\n    result = []\n    \n    # Iterate over the original list\n    for i, val in enumerate(l):\n        # If the index is even, append the sorted value\n        if i % 2 == 0:\n            result.append(sorted_even.pop(0))\n        # If the index is odd, append the original value\n        else:\n            result.append(val)\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 133, "duration": 7.11588191986084}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 115, "duration": 3.763958692550659}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n\n    return fibonacci(i)", "prompt_tokens": 137, "completion_tokens": 157, "duration": 4.503640413284302}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets that sum to zero\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False", "prompt_tokens": 199, "completion_tokens": 129, "duration": 3.3191428184509277}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions by using the formula n*(n-1)/2\n    return n*(n-1)//2", "prompt_tokens": 191, "completion_tokens": 41, "duration": 4.481332302093506}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented elements\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the final result list\n    return result", "prompt_tokens": 148, "completion_tokens": 82, "duration": 3.334523916244507}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 52, "duration": 3.1331753730773926}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # While x is greater than 0\n    while x > 0:\n        # Get the remainder of x divided by the new base\n        remainder = x % base\n        # Add the remainder to the front of the result string\n        result = str(remainder) + result\n        # Update x to be the result of x divided by the new base\n        x = x // base\n    \n    # Return the result string\n    return result", "prompt_tokens": 131, "completion_tokens": 125, "duration": 4.653324842453003}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle using the formula: area = 0.5 * base * height\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 50, "duration": 1.0272657871246338}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 211, "completion_tokens": 119, "duration": 5.461287498474121}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    sorted_list = sorted(l)\n    \n    # Step 2: Check if the length of the list is odd or even\n    n = len(sorted_list)\n    if n % 2 == 1:\n        # Step 3: If odd, return the middle element\n        return sorted_list[n // 2]\n    else:\n        # Step 4: If even, return the average of the two middle elements\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 127, "duration": 5.014177560806274}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the reversed text is equal to the original text\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 56, "duration": 3.8331925868988037}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2 ** n\n    # Calculate the modulo of the result with p\n    result = result % p\n    return result", "prompt_tokens": 145, "completion_tokens": 52, "duration": 4.084583282470703}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Define a list comprehension to decode each character in the input string\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 58, "duration": 3.825514554977417}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Create a list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    # Use list comprehension to filter out vowels from the text\n    result = ''.join([char for char in text if char not in vowels])\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 88, "duration": 4.4079368114471436}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 60, "duration": 4.7886457443237305}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # Return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 3.708019495010376}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if the sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 64, "duration": 3.847057819366455}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: return 0 if n is 0\n    if n == 0:\n        return 0\n    # Base case: return 1 if n is 1\n    elif n == 1:\n        return 1\n    # Calculate Fibonacci number using recursion\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 92, "completion_tokens": 86, "duration": 5.330603361129761}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each bracket in the input string\n    for bracket in brackets:\n        # If the bracket is an opening bracket, push it onto the stack\n        if bracket == \"<\":\n            stack.append(bracket)\n        # If the bracket is a closing bracket and there is a corresponding opening bracket on the stack, pop it\n        elif bracket == \">\" and stack:\n            stack.pop()\n        # If the bracket is a closing bracket and there is no corresponding opening bracket on the stack, return False\n        else:\n            return False\n    \n    # If the stack is empty at the end, all opening brackets have corresponding closing brackets\n    return len(stack) == 0", "prompt_tokens": 132, "completion_tokens": 172, "duration": 6.129793882369995}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is monotonically increasing\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # Check if the list is monotonically decreasing\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 93, "duration": 4.314213037490845}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements and convert them back to a list\n    sorted_common_elements = sorted(common_elements)\n    \n    return sorted_common_elements", "prompt_tokens": 154, "completion_tokens": 71, "duration": 4.159840822219849}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the largest prime factor\n    i = 2\n    while i <= n:\n        if n % i == 0 and is_prime(n // i):\n            return n // i\n        i += 1", "prompt_tokens": 103, "completion_tokens": 124, "duration": 5.000642776489258}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Initialize the sum variable\n    total = 0\n    # Loop through numbers from 1 to n and add them to the total\n    for i in range(1, n+1):\n        total += i\n    return total", "prompt_tokens": 134, "completion_tokens": 63, "duration": 1.5278592109680176}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Initialize a counter variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the balance\n        if bracket == \"(\":\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif bracket == \")\":\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # If the balance is zero at the end, return True, otherwise return False\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 154, "duration": 5.801762819290161}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the coefficients starting from the second one\n    for i in range(1, len(xs)):\n        # Calculate the derivative coefficient and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 78, "duration": 2.0470752716064453}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 1.6142442226409912}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Define a variable to store the count of vowels\n    count = 0\n    \n    # Define a set of vowels including 'a', 'e', 'i', 'o', 'u'\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Iterate over each character in the string\n    for i in range(len(s)):\n        # Check if the character is a vowel\n        if s[i].lower() in vowels:\n            # If it is a vowel, increment the count\n            count += 1\n        # Check if 'y' is a vowel at the end of the word\n        elif i == len(s) - 1 and s[i].lower() == 'y':\n            count += 1\n    \n    # Return the total count of vowels\n    return count", "prompt_tokens": 166, "completion_tokens": 181, "duration": 6.239063024520874}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift value by taking the modulo of shift and the length of x_str\n    actual_shift = shift % len(x_str)\n    \n    # Perform the circular shift by concatenating the last actual_shift characters with the first len(x_str)-actual_shift characters\n    result = x_str[-actual_shift:] + x_str[:-actual_shift]\n    \n    # Return the result as a string\n    return result", "prompt_tokens": 122, "completion_tokens": 122, "duration": 2.504913330078125}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize a variable to store the sum of ASCII codes\n    total_sum = 0\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 103, "duration": 2.4407694339752197}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # Split the input string to extract the number of apples and oranges\n    fruits = s.split()\n    \n    # Extract the number of apples and oranges from the split string\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    \n    # Calculate the number of mango fruits in the basket\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 98, "duration": 5.091461181640625}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Check if the array is empty\n    if not arr:\n        return []\n    \n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    # Iterate through the array to find the smallest even value and its index\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_even, smallest_index]", "prompt_tokens": 352, "completion_tokens": 134, "duration": 2.2978363037109375}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary to find the greatest integer that meets the condition\n    result = -1\n    for key, value in freq_dict.items():\n        if key > 0 and key <= value:\n            result = max(result, key)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 132, "duration": 2.8916473388671875}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # While there are elements in the sorted list\n    while lst:\n        # Append the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the sorted list\n        if lst:\n            # Append the maximum value to the result list\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 113, "duration": 1.9946482181549072}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 140, "duration": 5.58878231048584}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 1.677741289138794}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Loop through the array up to the midpoint\n    for i in range(len(arr)//2):\n        # Check if the elements at the corresponding positions are different\n        if arr[i] != arr[-i-1]:\n            # Increment the changes needed by 1\n            changes += 1\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 106, "duration": 5.188441276550293}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in lst1 and lst2\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 98, "duration": 4.093925714492798}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the first prime factor of the number\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factor1 = i\n            break\n    \n    # Find the second prime factor of the number\n    for j in range(factor1 + 1, a):\n        if a % j == 0 and is_prime(j):\n            factor2 = j\n            break\n    \n    # Calculate the third factor\n    factor3 = a // (factor1 * factor2)\n    \n    # Check if all factors are prime\n    return is_prime(factor1) and is_prime(factor2) and is_prime(factor3)", "prompt_tokens": 119, "completion_tokens": 215, "duration": 3.463869333267212}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x is 1\n    if x == 1:\n        return True\n    # Check if x is divisible by n and x is a power of n\n    while x % n == 0:\n        x = x / n\n    return x == 1", "prompt_tokens": 182, "completion_tokens": 72, "duration": 4.9411702156066895}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of the absolute value of a is an integer\n    return (abs(a)**(1/3)).is_integer()", "prompt_tokens": 150, "completion_tokens": 40, "duration": 3.9096081256866455}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a dictionary to map hexadecimal digits to their decimal values\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n\n    # Initialize a counter for prime digits\n    prime_count = 0\n\n    # Iterate through each character in the input hexadecimal number\n    for digit in num:\n        # Convert the hexadecimal digit to decimal\n        dec_value = hex_to_dec[digit]\n        # Check if the decimal value is a prime number\n        if is_prime(dec_value):\n            prime_count += 1\n\n    return prime_count", "prompt_tokens": 339, "completion_tokens": 275, "duration": 9.323019742965698}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 59, "duration": 4.075530290603638}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string up to the third last character\n    for i in range(len(s) - 2):\n        # Check if the current character and the next two characters are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 119, "duration": 2.280341148376465}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Determine the letter grade based on the GPA and append it to the letter_grades list\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 299, "duration": 4.667289733886719}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Check if the length of the string is less than 2, return False\n    if len(string) < 2:\n        return False\n    \n    # Check if the length of the string is a prime number\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    \n    return True", "prompt_tokens": 121, "completion_tokens": 95, "duration": 4.546533823013306}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    # Initialize count variable to keep track of numbers that start or end with 1\n    count = 0\n    \n    # Calculate the count of numbers that start with 1\n    count_start_with_1 = 9 * 10 ** (n - 1)\n    \n    # Calculate the count of numbers that end with 1\n    count_end_with_1 = 10 ** (n - 1)\n    \n    # Calculate the total count by adding the numbers that start or end with 1\n    count = count_start_with_1 + count_end_with_1\n    \n    return count", "prompt_tokens": 84, "completion_tokens": 134, "duration": 5.597632646560669}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary string\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary string\n    total_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the total sum to binary string format\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 75, "duration": 3.7882564067840576}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    even_elements = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Sum the filtered elements\n    return sum(even_elements)", "prompt_tokens": 95, "completion_tokens": 64, "duration": 3.4219717979431152}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters of the word in ascending order based on ascii value\n        ordered_word = ''.join(sorted(word))\n        # Append the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words with spaces to form the final ordered string\n    ordered_string = ' '.join(ordered_words)\n    \n    return ordered_string", "prompt_tokens": 170, "completion_tokens": 140, "duration": 5.252481937408447}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over each row in the list\n    for i, row in enumerate(lst):\n        # Check if x is in the current row\n        if x in row:\n            # Iterate over each column in the row\n            for j, col in enumerate(row):\n                # If the column value is equal to x, add the coordinate to the list\n                if col == x:\n                    coordinates.append((i, j))\n    \n    # Sort the coordinates by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    \n    # Sort the coordinates of the row by columns in descending order\n    coordinates.sort(key=lambda coord: coord[1], reverse=True)\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 171, "duration": 4.546748161315918}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    # Check if the sum of the first and last elements is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        return sorted(array)\n    else:\n        # Sort the array in descending order\n        return sorted(array, reverse=True)", "prompt_tokens": 243, "completion_tokens": 77, "duration": 2.823061943054199}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Define the shift value\n    shift = 2 * 2\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            \n            # Calculate the new index after shifting\n            new_index = (index + shift) % 26\n            \n            # Append the encrypted character to the result string\n            result += alphabet[new_index]\n        else:\n            # If the character is not a letter, keep it as it is\n            result += char\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 175, "duration": 4.1103363037109375}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # If the length of the sorted list is less than 2, return None\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second element of the sorted list\n    return sorted_lst[1]", "prompt_tokens": 164, "completion_tokens": 77, "duration": 5.75224232673645}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences using delimiters '.' '?' '!'\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split('?')\n    sentences = [sentence.strip() for sentence in sentences]\n    sentences = ' '.join(sentences).split('!')\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count the number of sentences that start with 'I'\n    count = sum(1 for sentence in sentences if sentence.startswith('I'))\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 125, "duration": 3.3131418228149414}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "prompt_tokens": 175, "completion_tokens": 86, "duration": 3.097717761993408}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define a dictionary to store the mapping of vowels to their replacements\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    # Initialize an empty string to store the encoded message\n    encoded_message = ''\n    \n    # Iterate over each character in the message\n    for char in message:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Swap the case of the letter\n            char = char.swapcase()\n            \n            # Check if the letter is a vowel and replace it with the corresponding value from the dictionary\n            if char.lower() in vowels:\n                char = vowels[char.lower()]\n        \n        # Append the character to the encoded message\n        encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 181, "duration": 3.911468029022217}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    # Filter out non-prime numbers from the list and find the largest prime number\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n\n    # Calculate and return the sum of digits of the largest prime number\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 179, "duration": 4.4107677936553955}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Get the first key in the dictionary\n    first_key = list(dict.keys())[0]\n    \n    # Check if all keys are in lower case\n    if str(first_key).islower():\n        return all(str(key).islower() for key in dict.keys())\n    \n    # Check if all keys are in upper case\n    if str(first_key).isupper():\n        return all(str(key).isupper() for key in dict.keys())\n    \n    return False", "prompt_tokens": 209, "completion_tokens": 125, "duration": 3.1864030361175537}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Check each number from 2 up to n\n    for num in range(2, n):\n        is_prime = True\n        \n        # Check if the number is prime\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the list\n        if is_prime:\n            primes.append(num)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 130, "duration": 4.042952060699463}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of a by taking the remainder when divided by 10\n    unit_a = abs(a) % 10\n    # Get the unit digit of b by taking the remainder when divided by 10\n    unit_b = abs(b) % 10\n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 93, "duration": 3.048987627029419}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a variable to keep track of the count of uppercase vowels in even indices\n    count = 0\n    \n    # Define a set of uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate over the characters in the string at even indices\n    for i in range(0, len(s), 2):\n        # Check if the character is an uppercase vowel\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 129, "duration": 3.4545016288757324}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the input value to a float number\n    num = float(value)\n    \n    # Check if the number is equidistant from two integers\n    if num % 1 == 0.5:\n        return int(num + 0.5)\n    \n    # Round the number to the nearest integer\n    return round(num)", "prompt_tokens": 196, "completion_tokens": 79, "duration": 2.8836162090301514}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    stones = []\n    \n    # Loop from 0 to n-1 to calculate the number of stones in each level\n    for i in range(n):\n        # Calculate the number of stones in the current level based on whether n is odd or even\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    \n    return stones", "prompt_tokens": 172, "completion_tokens": 118, "duration": 3.5552566051483154}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words using both commas and spaces as separators\n    words = s.replace(\",\", \" \").split()\n    \n    return words", "prompt_tokens": 156, "completion_tokens": 39, "duration": 2.0256593227386475}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y down to x\n    for i in range(y, x - 1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 134, "completion_tokens": 70, "duration": 3.2032248973846436}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 180, "completion_tokens": 40, "duration": 2.0974555015563965}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Filter out numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list in increasing order\n    sorted_list = sorted(filtered)\n    \n    return sorted_list", "prompt_tokens": 142, "completion_tokens": 69, "duration": 2.6879050731658936}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    result = [ \n        \"One\" if num == 1 else\n        \"Two\" if num == 2 else\n        \"Three\" if num == 3 else\n        \"Four\" if num == 4 else\n        \"Five\" if num == 5 else\n        \"Six\" if num == 6 else\n        \"Seven\" if num == 7 else\n        \"Eight\" if num == 8 else\n        \"Nine\" for num in reversed_arr\n    ]\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 194, "duration": 4.275163650512695}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 136, "duration": 3.9505093097686768}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 152, "duration": 4.502935171127319}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a counter variable to keep track of numbers with sum of digits > 0\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in arr:\n        # Convert the number to a string to iterate through its digits\n        for digit in str(abs(num)):\n            # Add the integer value of each digit to a running sum\n            count += int(digit)\n    \n    # Return the count of numbers with sum of digits > 0\n    return count", "prompt_tokens": 164, "completion_tokens": 113, "duration": 3.3307266235351562}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # Return True if the array is empty\n    if not arr:\n        return True\n    \n    # Find the index of the minimum element in the array\n    min_index = arr.index(min(arr))\n    \n    # Check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # Check if the array can be sorted by performing right shift operations\n    for i in range(len(arr)):\n        if arr[(min_index + i) % len(arr)] != min(arr):\n            return False\n    return True", "prompt_tokens": 339, "completion_tokens": 126, "duration": 3.749516725540161}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd elements in lst2\n    odd_count += sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Check if the total odd count is even, meaning we can exchange to make all elements even\n    if odd_count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 125, "duration": 4.054964065551758}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate through each letter in the list\n    for letter in letters:\n        # Update the count of the letter in the dictionary\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    \n    # Find the maximum count of any letter in the dictionary\n    max_count = max(letter_count.values())\n    \n    # Filter the dictionary to keep only the letters with the maximum count\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 160, "duration": 3.8977317810058594}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 81, "duration": 2.6863512992858887}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate through each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        \n        # Append the formatted result to the output list\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {string} of the {odd_count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 129, "duration": 3.620981454849243}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to keep track of current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum by adding the current number\n        current_sum += num\n        # Update minimum sum if current sum is less than minimum sum\n        min_sum = min(min_sum, current_sum)\n        # Reset current sum to 0 if it becomes negative\n        current_sum = max(current_sum, 0)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 126, "duration": 3.2319388389587402}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    # Initialize variables\n    total_water = 0\n    num_buckets = 0\n    \n    # Calculate total water in the wells\n    for row in grid:\n        total_water += sum(row)\n    \n    # Calculate number of buckets needed\n    num_buckets = math.ceil(total_water / capacity)\n    \n    # Calculate number of times to lower the buckets\n    return num_buckets", "prompt_tokens": 363, "completion_tokens": 93, "duration": 2.997509241104126}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Sort the array based on the number of ones in their binary representation and then by decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 49, "duration": 2.4628403186798096}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Split the string into words\n    words = s.split()\n    \n    # Initialize a list to store words with n consonants\n    result = []\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Check if the word has n consonants\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 155, "duration": 4.537242412567139}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 189, "completion_tokens": 98, "duration": 3.1341748237609863}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Concatenate the two strings in the list\n    combined_string = lst[0] + lst[1]\n    \n    # Initialize a counter to keep track of open parentheses\n    open_parens = 0\n    \n    # Iterate through the combined string\n    for char in combined_string:\n        # If the character is an open parenthesis, increment the counter\n        if char == '(':\n            open_parens += 1\n        # If the character is a close parenthesis and there are open parentheses, decrement the counter\n        elif char == ')' and open_parens > 0:\n            open_parens -= 1\n        # If the character is a close parenthesis and there are no open parentheses, return 'No'\n        else:\n            return 'No'\n    \n    # If all parentheses are balanced, return 'Yes'\n    return 'Yes'", "prompt_tokens": 208, "completion_tokens": 189, "duration": 6.423635005950928}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the last k elements of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 1.94815993309021}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Initialize a variable to store the sum of odd elements at even positions\n    sum_odd_even_pos = 0\n    \n    # Iterate over the list elements at even positions\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current position is odd\n        if lst[i] % 2 != 0:\n            # Add the odd element to the sum\n            sum_odd_even_pos += lst[i]\n    \n    return sum_odd_even_pos", "prompt_tokens": 137, "completion_tokens": 110, "duration": 3.055546998977661}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate through the first k elements of the array\n    for num in arr[:k]:\n        # Check if the element has at most two digits\n        if 10 <= num < 100:\n            # Add the element to the total sum\n            total += num\n    # Return the total sum\n    return total", "prompt_tokens": 168, "completion_tokens": 95, "duration": 1.6647071838378906}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    result = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the result list\n        if n % 2 == 1:\n            result.append(n)\n        \n        # Calculate the next term in collatz sequence\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    \n    # Add 1 to the result list as it is the last term in collatz sequence\n    result.append(1)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 271, "completion_tokens": 166, "duration": 3.9342050552368164}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Check if month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 227, "duration": 7.4682488441467285}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        return txt.split(',')\n    # If no whitespaces or commas, count lower-case letters with odd order in the alphabet\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 103, "duration": 3.0357227325439453}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to the sorted version of the list without duplicates\n    return lst == sorted(set(lst))", "prompt_tokens": 289, "completion_tokens": 35, "duration": 1.8276925086975098}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals don't intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length of the intersection is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 158, "duration": 3.9770591259002686}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None for empty arr\n    if not arr:\n        return None\n    \n    # Initialize variables to store sum and product of signs\n    sum_magnitudes = 0\n    product_signs = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Calculate magnitude of the number\n        magnitude = abs(num)\n        # Update sum of magnitudes\n        sum_magnitudes += magnitude\n        \n        # Determine sign of the number\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        # Update product of signs\n        product_signs *= sign\n    \n    # Return the result\n    return sum_magnitudes * product_signs", "prompt_tokens": 162, "completion_tokens": 173, "duration": 3.9242935180664062}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Flatten the grid to a 1D list\n    flat_grid = [cell for row in grid for cell in row]\n    \n    # Sort the flattened grid\n    sorted_grid = sorted(flat_grid)\n    \n    # Return the first k elements of the sorted grid\n    return sorted_grid[:k]", "prompt_tokens": 436, "completion_tokens": 75, "duration": 4.038216590881348}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two elements\n    tribonacci = [1, 3]\n    \n    # Loop to calculate the next elements of the Tribonacci sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 119, "duration": 3.9378714561462402}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate through each digit in the number\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the digit to the product\n            product *= digit\n    \n    # Return the product\n    return product", "prompt_tokens": 111, "completion_tokens": 105, "duration": 2.480327844619751}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of nested brackets\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an opening bracket, increment the counter\n        if char == '[':\n            count += 1\n        # If the character is a closing bracket, decrement the counter\n        elif char == ']' and count > 0:\n            count -= 1\n    \n    # If the counter is greater than 0, there is at least one nested bracket\n    return count > 0", "prompt_tokens": 173, "completion_tokens": 128, "duration": 5.258262634277344}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper integer (ceiling)\n    lst = [int(x) if x == int(x) else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    result = sum([x**2 for x in lst])\n    \n    return result", "prompt_tokens": 197, "completion_tokens": 82, "duration": 2.2531943321228027}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the input string is empty\n    if txt == \"\":\n        return False\n    \n    # Split the input string by space to get a list of words\n    words = txt.split()\n    \n    # Get the last word from the list of words\n    last_word = words[-1]\n    \n    # Check if the last character of the last word is an alphabetical character\n    if last_word[-1].isalpha():\n        return True\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 113, "duration": 2.1560001373291016}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Initialize a variable to store the result\n    result = -1\n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the previous element\n        if arr[i] < arr[i-1]:\n            # Update the result to the current index\n            result = i\n    # Return the result\n    return result", "prompt_tokens": 143, "completion_tokens": 103, "duration": 4.07850980758667}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find largest negative integer or set to None\n    largest_negative = max(negatives) if negatives else None\n    \n    # Find smallest positive integer or set to None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 111, "duration": 5.545702219009399}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a) == type(b):\n        if type(a) == int:\n            return max(a, b)\n        elif type(a) == float:\n            return max(float(a), float(b))\n        elif type(a) == str:\n            if '.' in a or ',' in a:\n                return max(float(a.replace(',', '.')), float(b.replace(',', '.')))\n            else:\n                return max(int(a), int(b))\n    else:\n        return max(a, b)", "prompt_tokens": 181, "completion_tokens": 117, "duration": 4.973976135253906}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Check if the number is less than 8 or odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # Check if the number can be written as the sum of 4 positive even numbers\n    for i in range(2, n // 2 + 1, 2):\n        for j in range(2, n // 2 + 1, 2):\n            for k in range(2, n // 2 + 1, 2):\n                for l in range(2, n // 2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 117, "completion_tokens": 165, "duration": 10.490729331970215}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize result to 1\n    result = 1\n    # Loop from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate factorial of i\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        # Multiply the result by the factorial of i\n        result *= factorial\n    return result", "prompt_tokens": 135, "completion_tokens": 98, "duration": 5.492117643356323}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"--\" in text:\n        text = text.replace(\"--\", \"-\")\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 56, "duration": 3.682136297225952}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 193, "duration": 3.41341233253479}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate over the list with index\n    for i, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if i % 3 == 0:\n            total += num ** 2\n        # Check if index is a multiple of 4 and not a multiple of 3\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 123, "duration": 4.91090726852417}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words based on their lengths being prime numbers\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 142, "duration": 4.6624596118927}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Split the fractions into numerators and denominators\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculate the product of the fractions\n    product = x_num * n_num / (x_denom * n_denom)\n    \n    # Check if the product is a whole number\n    return product.is_integer()", "prompt_tokens": 195, "completion_tokens": 98, "duration": 5.16939902305603}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list of integers based on the sum of their digits and index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 82, "duration": 1.638141393661499}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the number of elements that meet the conditions\n    count = 0\n    \n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and the first and last digits are odd\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the conditions are met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 159, "completion_tokens": 149, "duration": 5.4658966064453125}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)] # Create the array a\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0: # Check if the sum is a multiple of 3\n                    count += 1\n    return count", "prompt_tokens": 205, "completion_tokens": 118, "duration": 2.353252410888672}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of planet1 and planet2 in the planets list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the start and end indexes for the slice of planets between planet1 and planet2\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Get the slice of planets between planet1 and planet2, sorted by proximity to the sun\n    result = sorted(planets[start_index:end_index], key=lambda x: planets.index(x))\n    \n    return tuple(result)", "prompt_tokens": 251, "completion_tokens": 211, "duration": 4.593683242797852}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 78, "duration": 1.812431812286377}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 4.033066511154175}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum of squares of odd numbers\n    result = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is positive, odd, and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Add the square of the number to the result\n            result += num**2\n    \n    # Return the result multiplied by 2\n    return result * 2", "prompt_tokens": 177, "completion_tokens": 115, "duration": 5.461905241012573}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Create an empty list to store the differences between guesses and scores\n    result = []\n    \n    # Iterate through each match\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 98, "duration": 5.197301626205444}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Create a dictionary to store the strengths of each extension\n    strengths = {}\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        # Store the strength in the dictionary\n        strengths[extension] = strength\n    \n    # Find the extension with the maximum strength\n    max_extension = max(strengths, key=strengths.get)\n    \n    # Return the result in the required format\n    return f\"{class_name}.{max_extension}\"", "prompt_tokens": 317, "completion_tokens": 148, "duration": 5.598925828933716}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    # Create a new string by concatenating the first word with itself\n    double_a = a + a\n    # Check if the second word is a substring of the new string\n    return b in double_a or b[::-1] in double_a", "prompt_tokens": 169, "completion_tokens": 65, "duration": 4.067824363708496}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the integer to a string to iterate over each digit\n    num_str = str(abs(num))\n    \n    # Iterate over each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 103, "duration": 5.174464225769043}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 144, "duration": 3.5238611698150635}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the sides form a right-angled triangle using Pythagorean theorem\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 148, "completion_tokens": 87, "duration": 4.618226766586304}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store the unique character count for each word\n    unique_char_count = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_chars = len(set(word))\n        # Update the dictionary with the unique character count for the word\n        unique_char_count[word] = (unique_chars, word)\n    \n    # Find the word with the maximum number of unique characters\n    max_word = max(unique_char_count.items(), key=lambda x: (x[1][0], x[1][1]))\n    \n    return max_word[0]", "prompt_tokens": 160, "completion_tokens": 143, "duration": 5.352543592453003}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_eaten = number + min(need, remaining)\n    \n    # Calculate the number of carrots left after meals\n    left_after_meals = max(0, remaining - need)\n    \n    return [total_eaten, left_after_meals]", "prompt_tokens": 317, "completion_tokens": 76, "duration": 4.57735013961792}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Apply the operator to the result and the next operand\n        if operator[i] == '+':\n            result = result + operand[i+1]\n        elif operator[i] == '-':\n            result = result - operand[i+1]\n        elif operator[i] == '*':\n            result = result * operand[i+1]\n        elif operator[i] == '//':\n            result = result // operand[i+1]\n        elif operator[i] == '**':\n            result = result ** operand[i+1]\n    \n    return result", "prompt_tokens": 247, "completion_tokens": 155, "duration": 4.753079891204834}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Check if the string contains any letters\n    if any(char.isalpha() for char in s):\n        # Iterate over each character in the string\n        for char in s:\n            # Check if the character is a letter\n            if char.isalpha():\n                # Reverse the case of the letter and add it to the result\n                result += char.swapcase()\n            else:\n                # Add non-letter characters as they are to the result\n                result += char\n    else:\n        # If the string contains no letters, reverse the string\n        result = s[::-1]\n    \n    return result", "prompt_tokens": 147, "completion_tokens": 149, "duration": 2.6919362545013428}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 116, "completion_tokens": 36, "duration": 3.7251203060150146}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Create a list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b\n    for num in range(a, b+1):\n        # Check if the number is even\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "prompt_tokens": 144, "completion_tokens": 87, "duration": 1.8331100940704346}
