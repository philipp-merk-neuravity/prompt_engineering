{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 61, "duration": 7.384949684143066}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    curr_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            curr_group += char\n        elif char == ')':\n            stack.pop()\n            curr_group += char\n            \n            if not stack:\n                result.append(curr_group)\n                curr_group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 93, "duration": 4.772143602371216}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.844111204147339}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 48, "duration": 3.774181842803955}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.620469331741333}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 4.0048253536224365}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_nesting(paren_group):\n        max_nesting = 0\n        current_nesting = 0\n        for char in paren_group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        return max_nesting\n\n    result = []\n    paren_groups = paren_string.split()\n    for group in paren_groups:\n        result.append(find_max_nesting(group))\n    \n    return result", "prompt_tokens": 162, "completion_tokens": 132, "duration": 5.504074335098267}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 3.4656319618225098}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result if numbers else 1", "prompt_tokens": 160, "completion_tokens": 70, "duration": 3.8384602069854736}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_val = float('-inf')\n    for num in numbers:\n        max_val = max(max_val, num)\n        result.append(max_val)\n    return result", "prompt_tokens": 150, "completion_tokens": 56, "duration": 3.976327657699585}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string", "prompt_tokens": 192, "completion_tokens": 62, "duration": 4.343243598937988}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])", "prompt_tokens": 126, "completion_tokens": 41, "duration": 3.451066017150879}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 3.4276015758514404}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.3355722427368164}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 32, "duration": 3.458069324493408}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 3.3579177856445312}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.225666046142578}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    \n    for note in music_string.split():\n        result.append(notes[note])\n    \n    return result", "prompt_tokens": 222, "completion_tokens": 70, "duration": 3.8510046005249023}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count", "prompt_tokens": 138, "completion_tokens": 76, "duration": 6.837290525436401}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 8.539294481277466}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair = (0, 1)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n    return min_pair", "prompt_tokens": 216, "completion_tokens": 100, "duration": 3.390000581741333}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 53, "duration": 3.591261863708496}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 31, "duration": 3.3281099796295166}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 41.700281381607056}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 8.041566848754883}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 71, "duration": 1.7140352725982666}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [x for x in numbers if numbers.count(x) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 3.2741785049438477}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 0.7205643653869629}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 1.0867702960968018}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 6.6689207553863525}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.6189980506896973}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 2.638174295425415}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 5.451345682144165}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if (i+1) % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 200, "completion_tokens": 44, "duration": 9.770759344100952}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 9.655860185623169}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 12, "duration": 0.6004946231842041}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 129, "completion_tokens": 62, "duration": 4.19005012512207}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [x if i%2!=0 else sorted(l[::2])[i//2] for i, x in enumerate(l)]", "prompt_tokens": 173, "completion_tokens": 40, "duration": 1.261915922164917}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 5.947094917297363}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(fibonacci(num)):\n            count += 1\n        num += 1\n    return fibonacci(num - 1)", "prompt_tokens": 147, "completion_tokens": 183, "duration": 5.827236652374268}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 6.202161550521851}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 9.402657985687256}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 23, "duration": 6.432344436645508}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 1.1468217372894287}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 45, "duration": 4.656842231750488}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 3.0415496826171875}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        result = a + b + c + d\n        a, b, c, d = b, c, d, result\n        \n    return result", "prompt_tokens": 221, "completion_tokens": 124, "duration": 4.314230918884277}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]", "prompt_tokens": 125, "completion_tokens": 71, "duration": 5.98136830329895}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 16, "duration": 2.7156546115875244}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 0.7775344848632812}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 1.492509126663208}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 172, "completion_tokens": 31, "duration": 1.5327064990997314}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 4.168030738830566}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 3.9767208099365234}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 6.694233417510986}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 43, "duration": 6.159754991531372}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 64, "duration": 6.149655818939209}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 9.320014476776123}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 6.954317808151245}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 9.125101804733276}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 26, "duration": 2.9817984104156494}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append('(')\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 66, "duration": 9.352477073669434}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 22, "duration": 4.734296083450317}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 69, "duration": 9.249937534332275}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        s = s[:-1] + 'Y'\n    return sum(1 for char in s if char.lower() in vowels)\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"book\"))   # 2", "prompt_tokens": 176, "completion_tokens": 115, "duration": 2.8233611583709717}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 55, "duration": 6.291970491409302}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.4297428131103516}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 8.937662601470947}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(index, value) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 362, "completion_tokens": 83, "duration": 9.173270463943481}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if num > 0 and lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 8.875077247619629}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 8.246398687362671}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 1.7076854705810547}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 3.134784698486328}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 55, "duration": 3.716993570327759}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) >= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 8.912382364273071}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = []\n    i = 2\n    while len(prime_factors) < 3 and i < 100:\n        if is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a //= i\n        else:\n            i += 1\n    \n    return len(prime_factors) == 3 and a == 1\n\n# Test the function\nprint(is_multiply_prime(30))  # True", "prompt_tokens": 129, "completion_tokens": 151, "duration": 3.5001564025878906}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 192, "completion_tokens": 25, "duration": 0.8454906940460205}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 7.845671653747559}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 58, "duration": 6.6037657260894775}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 7.527857065200806}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 4.702291250228882}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 320, "completion_tokens": 235, "duration": 10.242583274841309}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 2.993010997772217}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) - 8**(n-1)\n    return count", "prompt_tokens": 94, "completion_tokens": 35, "duration": 3.303905963897705}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 183, "completion_tokens": 25, "duration": 2.458048105239868}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 3.1568706035614014}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        result.append(ordered_word)\n    \n    return ' '.join(result)", "prompt_tokens": 180, "completion_tokens": 50, "duration": 3.1343467235565186}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 3.9159581661224365}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 253, "completion_tokens": 51, "duration": 6.672677516937256}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                result += chr((shift - 97) % 26 + 97)\n            else:\n                result += chr((shift - 65) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 92, "duration": 5.453056812286377}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]", "prompt_tokens": 174, "completion_tokens": 39, "duration": 4.681153059005737}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 157, "completion_tokens": 40, "duration": 2.631126880645752}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(n, int) for n in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 185, "completion_tokens": 55, "duration": 3.503730297088623}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"AEIOUaeiou\"\n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 95, "duration": 8.829041719436646}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum([int(digit) for digit in str(n)])\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n\n    max_prime = max(prime_values)\n    return sum_of_digits(max_prime)", "prompt_tokens": 336, "completion_tokens": 127, "duration": 5.392461776733398}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 53, "duration": 7.0244300365448}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 4.8847267627716064}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.078798770904541}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 38, "duration": 2.4436018466949463}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 1.3078038692474365}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    return pile", "prompt_tokens": 182, "completion_tokens": 60, "duration": 2.9283838272094727}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 0.8492977619171143}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 144, "completion_tokens": 55, "duration": 8.709358215332031}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 3.8064372539520264}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 3.420084238052368}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def get_name(num):\n        names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        return names[num]\n    \n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [get_name(num) for num in reversed_arr]", "prompt_tokens": 326, "completion_tokens": 103, "duration": 2.1571602821350098}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 2.8214402198791504}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_even_odd_palindromes(n):\n        even_count = 0\n        odd_count = 0\n        for num in range(1, n+1):\n            if is_palindrome(num):\n                if num % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n        return even_count, odd_count\n\n    return count_even_odd_palindromes(n)", "prompt_tokens": 261, "completion_tokens": 120, "duration": 4.642112493515015}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 4.281634330749512}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 3.442476272583008}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 36, "duration": 6.177780389785767}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    return {k: v for k, v in Counter(test.split()).items() if v == max(Counter(test.split()).values())}", "prompt_tokens": 201, "completion_tokens": 42, "duration": 4.690598011016846}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 508, "completion_tokens": 78, "duration": 9.799474239349365}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in s), s.count('1'), s.count('1'), s.count('1')) for s in lst]", "prompt_tokens": 223, "completion_tokens": 67, "duration": 4.362677812576294}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.392831802368164}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.0038623809814453}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.2642323970794678}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter in consonants)\n        if count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 90, "duration": 5.193111419677734}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    word = word[1:-1]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 107, "duration": 5.686522722244263}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    return 'Yes' if count == 0 else 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))     # 'No'", "prompt_tokens": 218, "completion_tokens": 109, "duration": 3.8427011966705322}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 5.684149980545044}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 3.1141433715820312}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.0510714054107666}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 80, "duration": 3.749505043029785}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 313, "completion_tokens": 149, "duration": 4.44336199760437}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 1.4217381477355957}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 8.450302839279175}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    \n    if intersect_end < intersect_start:\n        return \"NO\"\n    \n    intersection_length = intersect_end - intersect_start + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 151, "duration": 9.120482206344604}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 80, "duration": 4.1016035079956055}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n\n        visited[i][j] = True\n        min_path = None\n\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n\n        visited[i][j] = False\n        return min_path\n\n    start_values = [grid[i][j] for i in range(n) for j in range(n)]\n    min_path = None\n\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [grid[i][j]])\n            if min_path is None or path < min_path:\n                min_path = path\n\n    return min_path", "prompt_tokens": 446, "completion_tokens": 273, "duration": 10.478761434555054}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 131, "duration": 6.651444673538208}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result if result != 1 else 0", "prompt_tokens": 121, "completion_tokens": 53, "duration": 3.8903422355651855}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) != 0\n\nprint(is_nested('[[]]'))\nprint(is_nested('[]]]]]]][[[[[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[]'))\nprint(is_nested('[[][]]'))\nprint(is_nested('[[]][['))", "prompt_tokens": 183, "completion_tokens": 98, "duration": 6.378247022628784}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 6.549566030502319}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False", "prompt_tokens": 187, "completion_tokens": 66, "duration": 4.036444664001465}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.5123188495635986}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    max_neg = None if len(neg_ints) == 0 else max(neg_ints)\n    min_pos = None if len(pos_ints) == 0 else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 188, "completion_tokens": 99, "duration": 4.249847650527954}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    a_type = type(a)\n    b_type = type(b)\n    \n    if a_type == int and b_type == int:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif a_type == float and b_type == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif a_type == str and b_type == str:\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b.replace(',', '.'))\n        \n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    elif a_type == int and b_type == float:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif a_type == float and b_type == int:\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif a_type == int and b_type == str:\n        a_float = float(a)\n        b_float = float(b.replace(',', '.'))\n        \n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    elif a_type == str and b_type == int:\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b)\n        \n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    elif a_type == float and b_type == str:\n        a_float = float(a)\n        b_float = float(b.replace(',', '.'))\n        \n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None\n    elif a_type == str and b_type == float:\n        a_float = float(a.replace(',', '.'))\n        b_float = float(b)\n        \n        if a_float > b_float:\n            return a\n        elif b_float > a_float:\n            return b\n        else:\n            return None", "prompt_tokens": 191, "completion_tokens": 490, "duration": 13.48736023902893}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 27, "duration": 3.26728892326355}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 8.01244568824768}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r'\\s{3,}', '-', re.sub(r'\\s{2}', '_', text.replace(' ', '_')))", "prompt_tokens": 156, "completion_tokens": 32, "duration": 3.319035291671753}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(char.isdigit() for char in name) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 97, "duration": 4.371059417724609}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.2167751789093018}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 4.429162979125977}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_denom * n_denom)\n    \n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 66, "duration": 7.350930213928223}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.366774797439575}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 169, "completion_tokens": 67, "duration": 3.100966453552246}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function\nprint(get_max_triples(5))", "prompt_tokens": 215, "completion_tokens": 108, "duration": 4.3196399211883545}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    return tuple(planet for planet in planets[start_index+1:end_index] if planet != planet1 and planet != planet2)", "prompt_tokens": 261, "completion_tokens": 133, "duration": 8.218609809875488}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 50.003501892089844}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 78, "duration": 1.9006211757659912}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 39, "duration": 2.1324234008789062}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 6.175319671630859}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return extension.count('A-Z') - extension.count('a-z')\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 55, "duration": 2.885295867919922}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a) or any(b in (a[i:] + a[:i]) for i in range(len(a)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 179, "completion_tokens": 139, "duration": 9.26744031906128}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(num) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(num) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 1.8195774555206299}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 142, "duration": 6.719359397888184}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 48, "duration": 7.245044708251953}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return max(words, key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 25, "duration": 0.7109720706939697}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 3.1074306964874268}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 6.776921272277832}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    return result", "prompt_tokens": 157, "completion_tokens": 69, "duration": 3.7016549110412598}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.3031578063964844}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 2.0749878883361816}
