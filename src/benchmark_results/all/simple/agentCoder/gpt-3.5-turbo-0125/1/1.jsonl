{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool: \n    for i in range(len(numbers)): \n        for j in range(i+1, len(numbers)): \n            if abs(numbers[i] - numbers[j]) < threshold: \n                return True \n    return False", "prompt_tokens": 497, "completion_tokens": 343, "duration": 6.4106340408325195}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string):\n    separated_groups = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start a new group\n            current_group = ''\n        elif char == ')':  # End current group\n            separated_groups.append(current_group)\n        else:\n            current_group += char\n    return separated_groups", "prompt_tokens": 488, "completion_tokens": 334, "duration": 6.804469108581543}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number):\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 458, "completion_tokens": 241, "duration": 4.822356462478638}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 492, "completion_tokens": 278, "duration": 4.64783787727356}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float: \n    mean = sum(numbers) / len(numbers) \n    absolute_diff = [abs(num - mean) for num in numbers] \n    return sum(absolute_diff) / len(numbers)", "prompt_tokens": 490, "completion_tokens": 365, "duration": 7.864556074142456}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 465, "completion_tokens": 263, "duration": 9.768706321716309}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string):\n    results = []\n    nesting_level = 0\n    max_nesting_level = 0\n    for char in paren_string:\n        if char == '(': \n            nesting_level += 1\n            max_nesting_level = max(max_nesting_level, nesting_level)\n        elif char == ')':\n            nesting_level -= 1\n        elif char == ' ':\n            results.append(max_nesting_level)\n            max_nesting_level = 0\n    results.append(max_nesting_level)\n    return results", "prompt_tokens": 485, "completion_tokens": 470, "duration": 8.024030685424805}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 466, "completion_tokens": 235, "duration": 4.280182600021362}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = reduce(lambda x, y: x * y, numbers, 1) if numbers else 1\n    return (sum_result, product_result)", "prompt_tokens": 483, "completion_tokens": 363, "duration": 8.02420711517334}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    rolling_max_list = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "prompt_tokens": 473, "completion_tokens": 331, "duration": 7.236560344696045}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string):\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 515, "completion_tokens": 248, "duration": 5.685520648956299}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a, b):\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    result = int_a ^ int_b\n    return bin(result)[2:]", "prompt_tokens": 449, "completion_tokens": 301, "duration": 10.233617067337036}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 475, "completion_tokens": 255, "duration": 4.907289505004883}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a, b):\n    return math.gcd(a, b)", "prompt_tokens": 443, "completion_tokens": 219, "duration": 4.9401535987854}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string):\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 432, "completion_tokens": 234, "duration": 5.062885999679565}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n):\n    return ' '.join([str(i) for i in range(n+1)])", "prompt_tokens": 441, "completion_tokens": 223, "duration": 4.379388809204102}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string):\n    string = string.lower()\n    distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 443, "completion_tokens": 287, "duration": 11.017473459243774}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = []\n    for note in music_string.split():\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 545, "completion_tokens": 334, "duration": 6.585995197296143}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string, substring):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 461, "completion_tokens": 290, "duration": 10.224259614944458}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers):\n    numeral_mapping = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numerals = numbers.split()\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_mapping[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 478, "completion_tokens": 435, "duration": 7.8285231590271}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 539, "completion_tokens": 388, "duration": 13.240203380584717}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 496, "completion_tokens": 365, "duration": 7.230261325836182}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 464, "completion_tokens": 258, "duration": 4.571720361709595}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string):\n    return len(string)", "prompt_tokens": 416, "completion_tokens": 190, "duration": 3.6761538982391357}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n):\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 425, "completion_tokens": 268, "duration": 9.583500146865845}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 499, "completion_tokens": 343, "duration": 5.407975435256958}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_set = set()\n    unique_list = []\n    for num in numbers:\n        if num not in unique_set:\n            unique_set.add(num)\n            unique_list.append(num)\n    return unique_list", "prompt_tokens": 457, "completion_tokens": 305, "duration": 4.969900608062744}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string):\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n    return result", "prompt_tokens": 421, "completion_tokens": 282, "duration": 10.955811738967896}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 430, "completion_tokens": 188, "duration": 5.224025249481201}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 460, "completion_tokens": 260, "duration": 10.644468784332275}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l): \n    return [num for num in l if num > 0]", "prompt_tokens": 486, "completion_tokens": 212, "duration": 3.8477814197540283}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 273, "duration": 4.41298770904541}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs):\n    for x in range(-1000, 1001):\n        if abs(poly(xs, x)) < 0.0001:\n            return x", "prompt_tokens": 632, "completion_tokens": 277, "duration": 4.530588626861572}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    for index in range(len(l)):\n        if index % 3 == 0:\n            l[index] = sorted(l[index])\n    return l", "prompt_tokens": 523, "completion_tokens": 281, "duration": 5.924166917800903}
{"task_id": "HumanEval/34", "generated_code": "def unique(l):\n    unique_set = set(l)\n    unique_list = sorted(list(unique_set))\n    return unique_list", "prompt_tokens": 446, "completion_tokens": 263, "duration": 4.395591974258423}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l): \n    return max(l)", "prompt_tokens": 455, "completion_tokens": 209, "duration": 4.566461563110352}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 452, "completion_tokens": 349, "duration": 5.9697182178497314}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    for i in range(0, len(l), 2):\n        l[i] = sorted(l[i])\n    return l", "prompt_tokens": 496, "completion_tokens": 264, "duration": 5.950279712677002}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 531, "completion_tokens": 564, "duration": 10.864505052566528}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [0, 1]\n    while len(fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        if is_prime(next_fib) and next_fib not in fib_numbers:\n            fib_numbers.append(next_fib)\n    return fib_numbers[n-1]", "prompt_tokens": 470, "completion_tokens": 435, "duration": 7.64354681968689}
{"task_id": "HumanEval/40", "generated_code": "from itertools import combinations\n\ndef triples_sum_to_zero(l):\n    for triplet in combinations(l, 3):\n        if sum(triplet) == 0:\n            return True\n    return False", "prompt_tokens": 532, "completion_tokens": 291, "duration": 4.828358173370361}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n):\n    return n * (n - 1) // 2", "prompt_tokens": 524, "completion_tokens": 243, "duration": 5.281848430633545}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [e+1 for e in l]", "prompt_tokens": 481, "completion_tokens": 224, "duration": 3.950015068054199}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for element in l:\n        complement = -element\n        if complement in seen:\n            return True\n        seen.add(element)\n    return False", "prompt_tokens": 530, "completion_tokens": 321, "duration": 6.27130126953125}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    result = ''\n    while x != 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 464, "completion_tokens": 301, "duration": 11.059813022613525}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 419, "completion_tokens": 238, "duration": 4.69270133972168}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n): \n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 2 \n    elif n == 3: \n        return 0 \n    fib_sequence = [0, 0, 2, 0] \n    for i in range(4, n+1): \n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4]) \n    return fib_sequence[n]", "prompt_tokens": 544, "completion_tokens": 347, "duration": 6.718996286392212}
{"task_id": "HumanEval/47", "generated_code": "import statistics \n\ndef median(l): \n    l.sort() \n    n = len(l) \n    if n % 2 == 1: \n        return l[n // 2] \n    else: \n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 448, "completion_tokens": 329, "duration": 5.120679140090942}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text):\n    reverse_text = text[::-1]\n    if text == reverse_text:\n        return True\n    else:\n        return False", "prompt_tokens": 444, "completion_tokens": 222, "duration": 4.318783521652222}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    return pow(2, n, p)", "prompt_tokens": 478, "completion_tokens": 202, "duration": 3.9430594444274902}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 463, "completion_tokens": 374, "duration": 9.045442819595337}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 495, "completion_tokens": 248, "duration": 9.101450681686401}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for number in l:\n        if number >= t:\n            return False\n    return True", "prompt_tokens": 452, "completion_tokens": 232, "duration": 9.581928968429565}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 426, "completion_tokens": 162, "duration": 8.229140281677246}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0, s1):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 513, "completion_tokens": 216, "duration": 8.11775827407837}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)", "prompt_tokens": 425, "completion_tokens": 236, "duration": 8.716938018798828}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 465, "completion_tokens": 303, "duration": 9.778615951538086}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l): \n    if len(l) <= 1: \n        return True \n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1)) \n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1)) \n    return increasing or decreasing", "prompt_tokens": 460, "completion_tokens": 360, "duration": 11.354645490646362}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = sorted(list(set1.intersection(set2)))\n    return common_elements", "prompt_tokens": 487, "completion_tokens": 269, "duration": 9.299388647079468}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "prompt_tokens": 436, "completion_tokens": 277, "duration": 10.1203453540802}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 467, "completion_tokens": 229, "duration": 4.646329164505005}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(': return False\n            else: stack.pop()\n    return not stack", "prompt_tokens": 462, "completion_tokens": 334, "duration": 7.929314851760864}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    result = []\n    for i, coeff in enumerate(xs):\n        if i > 0:\n            result.append(coeff * i)\n    return result", "prompt_tokens": 481, "completion_tokens": 355, "duration": 7.5933263301849365}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 522, "completion_tokens": 273, "duration": 5.240635395050049}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(word):\n    vowels = 'aeiou'\n    count = 0\n    for i, c in enumerate(word):\n        if c.lower() in vowels or (i == len(word)-1 and c.lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 499, "completion_tokens": 289, "duration": 5.426759719848633}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    effective_shift = shift % len(x_str)\n    if effective_shift == 0:\n        return x_str\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return shifted_str", "prompt_tokens": 455, "completion_tokens": 310, "duration": 6.319190979003906}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum", "prompt_tokens": 485, "completion_tokens": 253, "duration": 4.84149432182312}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split(' and ')])\n    return n - apples - oranges", "prompt_tokens": 583, "completion_tokens": 338, "duration": 6.749963045120239}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (num < smallest_even_value or (num == smallest_even_value and i < smallest_even_index)):\n            smallest_even_value = num\n            smallest_even_index = i\n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 685, "completion_tokens": 364, "duration": 7.155305624008179}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    for key, value in freq_dict.items():\n        if key > 0 and key <= value:\n            return key\n    return -1", "prompt_tokens": 538, "completion_tokens": 318, "duration": 5.0121941566467285}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 497, "completion_tokens": 286, "duration": 6.564439535140991}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 494, "completion_tokens": 378, "duration": 6.21930718421936}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) > w:\n        return False\n    return True", "prompt_tokens": 603, "completion_tokens": 306, "duration": 6.457783222198486}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 530, "completion_tokens": 278, "duration": 6.0048301219940186}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 566, "completion_tokens": 330, "duration": 6.788701057434082}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    prime_factors = 0\n    for i in range(2, a):\n        while a % i == 0:\n            prime_factors += 1\n            a /= i\n    return prime_factors == 3", "prompt_tokens": 452, "completion_tokens": 308, "duration": 5.664506196975708}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    power = math.log(x, n)\n    return power.is_integer()", "prompt_tokens": 515, "completion_tokens": 228, "duration": 4.581642150878906}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = a**(1/3)\n    return cube_root.is_integer()", "prompt_tokens": 483, "completion_tokens": 220, "duration": 4.665903091430664}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 672, "completion_tokens": 331, "duration": 6.059517860412598}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_representation = bin(decimal)[2:]\n    return 'db' + binary_representation + 'db'", "prompt_tokens": 512, "completion_tokens": 241, "duration": 4.2159013748168945}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 494, "completion_tokens": 318, "duration": 11.52960753440857}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_table = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    letter_grades = [grade_table[gpa] for gpa in grades]\n    return letter_grades", "prompt_tokens": 643, "completion_tokens": 425, "duration": 11.839678287506104}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 454, "completion_tokens": 327, "duration": 6.614251375198364}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 417, "completion_tokens": 330, "duration": 6.75687837600708}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_str = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_str)\n    return bin(sum_digits)[2:]", "prompt_tokens": 506, "completion_tokens": 298, "duration": 9.688489198684692}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "prompt_tokens": 428, "completion_tokens": 287, "duration": 5.340041875839233}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 503, "completion_tokens": 286, "duration": 4.584025144577026}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 632, "completion_tokens": 364, "duration": 10.485741376876831}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 576, "completion_tokens": 294, "duration": 10.927873849868774}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    original_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    result = ''\n    for c in s:\n        if c.islower() and c in original_alphabet:\n            encrypted_char = rotated_alphabet[original_alphabet.index(c)]\n            result += encrypted_char\n        else:\n            result += c\n    return result", "prompt_tokens": 483, "completion_tokens": 345, "duration": 5.730841636657715}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "prompt_tokens": 497, "completion_tokens": 236, "duration": 5.725458860397339}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms", "prompt_tokens": 480, "completion_tokens": 313, "duration": 7.123214960098267}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    for num in (x, y, z):\n        if num == sum([n for n in (x, y, z) if n != num]) and all(isinstance(n, int) for n in (x, y, z)):\n            return True\n    return False", "prompt_tokens": 508, "completion_tokens": 287, "duration": 5.28300404548645}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n        elif char.isalpha():\n            encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 482, "completion_tokens": 345, "duration": 7.462128639221191}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\n\ndef find_largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum_of_digits(largest_prime)", "prompt_tokens": 659, "completion_tokens": 451, "duration": 7.080175161361694}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_count = 0\n    uppercase_count = 0\n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            lowercase_count += 1\n        if isinstance(key, str) and key.isupper():\n            uppercase_count += 1\n    return lowercase_count == len(dict) or uppercase_count == len(dict)", "prompt_tokens": 542, "completion_tokens": 378, "duration": 8.141148090362549}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, n):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return primes", "prompt_tokens": 518, "completion_tokens": 364, "duration": 7.887326002120972}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 471, "completion_tokens": 195, "duration": 3.809954881668091}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 445, "completion_tokens": 278, "duration": 4.668472766876221}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value)))", "prompt_tokens": 529, "completion_tokens": 240, "duration": 5.454108476638794}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    current_stones = n\n    for i in range(1, n+1):\n        stones.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 1\n        else:\n            current_stones += 2\n    return stones", "prompt_tokens": 505, "completion_tokens": 361, "duration": 11.243074655532837}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ')", "prompt_tokens": 489, "completion_tokens": 227, "duration": 5.274278402328491}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 467, "completion_tokens": 322, "duration": 7.247127056121826}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 513, "completion_tokens": 309, "duration": 7.020469903945923}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        num_str = str(num)\n        even_digit_found = False\n        for c in num_str:\n            if int(c) % 2 == 0:\n                even_digit_found = True\n                break\n        if not even_digit_found:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 475, "completion_tokens": 400, "duration": 8.113371849060059}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_digits = [str(i) for i in range(1, 10)]\n    filtered_arr = [str(i) for i in arr if str(i) in valid_digits]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    result = [digit_names[int(digit) - 1] for digit in reversed_arr]\n    return result", "prompt_tokens": 649, "completion_tokens": 350, "duration": 4.884639024734497}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 497, "completion_tokens": 378, "duration": 6.533950567245483}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 584, "completion_tokens": 345, "duration": 8.636020421981812}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 497, "completion_tokens": 301, "duration": 4.794338226318359}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for _ in range(n):\n        arr.insert(0, arr.pop())\n        if arr == sorted(arr):\n            return True\n    return False", "prompt_tokens": 672, "completion_tokens": 324, "duration": 6.371249675750732}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    if any(x % 2 != 0 for x in lst1):\n        return 'NO'\n    return 'YES'", "prompt_tokens": 570, "completion_tokens": 284, "duration": 5.193925380706787}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_counts = Counter(letters)\n    max_count = max(letter_counts.values()) if letter_counts else 0\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 524, "completion_tokens": 271, "duration": 4.353484392166138}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 535, "completion_tokens": 270, "duration": 10.367230415344238}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{string} of the {string}nput.')\n    return result", "prompt_tokens": 546, "completion_tokens": 341, "duration": 5.468984365463257}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, num + current_sum)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 461, "completion_tokens": 336, "duration": 5.827952146530151}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            total_lowerings += max(0, well - capacity)\n    return total_lowerings", "prompt_tokens": 696, "completion_tokens": 307, "duration": 6.663008451461792}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 543, "completion_tokens": 286, "duration": 6.258070945739746}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    result = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 554, "completion_tokens": 314, "duration": 11.284454345703125}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = ''\n    found_consonant = False\n    for char in word[::-1]:\n        if char.lower() not in 'aeiou' and char.isalpha():\n            if found_consonant:\n                break\n            found_consonant = True\n        elif char.lower() in 'aeiou':\n            if found_consonant:\n                closest_vowel = char\n                break\n    return closest_vowel", "prompt_tokens": 522, "completion_tokens": 485, "duration": 14.865259408950806}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    concatenated = ''.join(lst)\n    for char in concatenated:\n        if char == '(': stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] != '(': return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 541, "completion_tokens": 352, "duration": 11.764305830001831}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 590, "completion_tokens": 262, "duration": 5.922260284423828}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    total_sum = 0\n    for index, num in enumerate(lst):\n        if index % 2 == 0 and num % 2 != 0:\n            total_sum += num\n    return total_sum", "prompt_tokens": 470, "completion_tokens": 289, "duration": 5.298965215682983}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    total = 0\n    for num in arr[:k]:\n        if 10 <= num <= 99:\n            total += num\n    return total", "prompt_tokens": 501, "completion_tokens": 308, "duration": 6.8255815505981445}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    result.append(n)\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 604, "completion_tokens": 369, "duration": 6.814114093780518}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '02':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    if len(year) != 4:\n        return False\n    return True", "prompt_tokens": 636, "completion_tokens": 551, "duration": 9.560108423233032}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "prompt_tokens": 513, "completion_tokens": 340, "duration": 7.286486864089966}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] == sorted_lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 622, "completion_tokens": 283, "duration": 6.251424551010132}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if length <= 1:\n        return 'NO'\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 627, "completion_tokens": 368, "duration": 7.866155624389648}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            continue\n        product_of_signs *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 495, "completion_tokens": 364, "duration": 8.444012641906738}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Implementation of the function to find the minimum path\n    pass", "prompt_tokens": 769, "completion_tokens": 351, "duration": 6.042474269866943}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = []\n    for i in range(n + 1):\n        if i == 0:\n            tribonacci.append(0)\n        elif i == 1 or i == 2:\n            tribonacci.append(1)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    return tribonacci", "prompt_tokens": 608, "completion_tokens": 370, "duration": 5.903088569641113}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n = n // 10\n    return product", "prompt_tokens": 444, "completion_tokens": 255, "duration": 4.983669996261597}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 506, "completion_tokens": 304, "duration": 6.516887426376343}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for num in lst:\n        rounded_num = -(-num // 1)\n        squared_num = rounded_num ** 2\n        total_sum += squared_num\n    return total_sum", "prompt_tokens": 530, "completion_tokens": 280, "duration": 6.131540298461914}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False", "prompt_tokens": 510, "completion_tokens": 294, "duration": 6.257957220077515}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 476, "completion_tokens": 286, "duration": 6.165297031402588}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        if num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 511, "completion_tokens": 477, "duration": 8.318803548812866}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) == int and type(b) == float:\n            return b\n        elif type(a) == float and type(b) == int:\n            return a\n        elif type(a) == str and type(b) in [int, float]:\n            return a\n        elif type(b) == str and type(a) in [int, float]:\n            return b", "prompt_tokens": 514, "completion_tokens": 449, "duration": 11.77124547958374}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(1, n//2 + 1, 2):\n            for k in range(1, n//2 + 1, 2):\n                for l in range(1, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 450, "completion_tokens": 338, "duration": 6.180708169937134}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 468, "completion_tokens": 275, "duration": 6.417860746383667}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            if consecutive_spaces < 2:\n                result += '_'\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result += '-'\n    return result", "prompt_tokens": 479, "completion_tokens": 397, "duration": 8.687455415725708}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 587, "completion_tokens": 364, "duration": 6.573596000671387}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    sum = 0\n    for index, num in enumerate(lst):\n        if index % 3 == 0:\n            sum += num ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            sum += num ** 3\n    return sum", "prompt_tokens": 542, "completion_tokens": 343, "duration": 8.612830877304077}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    result = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "prompt_tokens": 520, "completion_tokens": 369, "duration": 7.974024772644043}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 528, "completion_tokens": 321, "duration": 10.23772144317627}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=sum_of_digits)", "prompt_tokens": 488, "completion_tokens": 244, "duration": 5.28136682510376}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 492, "completion_tokens": 359, "duration": 7.173229694366455}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 538, "completion_tokens": 398, "duration": 6.257305145263672}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 in planets and planet2 in planets and planets.index(planet1) < planets.index(planet2):\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n    else:\n        return ()", "prompt_tokens": 584, "completion_tokens": 353, "duration": 5.950937986373901}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 560, "completion_tokens": 273, "duration": 5.2734973430633545}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 459, "completion_tokens": 290, "duration": 4.717937469482422}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    total_sum = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            total_sum += num ** 2\n    return total_sum", "prompt_tokens": 510, "completion_tokens": 304, "duration": 5.93006706237793}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result", "prompt_tokens": 603, "completion_tokens": 313, "duration": 6.138025999069214}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension", "prompt_tokens": 650, "completion_tokens": 415, "duration": 6.995335102081299}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 502, "completion_tokens": 240, "duration": 4.081556797027588}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 438, "completion_tokens": 321, "duration": 6.839609622955322}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_mapping = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_mapping.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 474, "completion_tokens": 412, "duration": 6.928144454956055}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 481, "completion_tokens": 308, "duration": 6.0281081199646}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_unique_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_unique_word):\n            max_unique_chars = unique_chars\n            max_unique_word = word\n    return max_unique_word", "prompt_tokens": 493, "completion_tokens": 382, "duration": 7.180938959121704}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_after_meals = max(0, remaining - total_eaten)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 650, "completion_tokens": 314, "duration": 6.560518980026245}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 580, "completion_tokens": 450, "duration": 9.041057586669922}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n            has_letter = True\n        else:\n            result += c\n    if not has_letter:\n        return result[::-1]\n    else:\n        return result", "prompt_tokens": 480, "completion_tokens": 359, "duration": 5.761249542236328}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if text == '':\n        return None\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 449, "completion_tokens": 283, "duration": 5.6916844844818115}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 477, "completion_tokens": 253, "duration": 4.889661073684692}
