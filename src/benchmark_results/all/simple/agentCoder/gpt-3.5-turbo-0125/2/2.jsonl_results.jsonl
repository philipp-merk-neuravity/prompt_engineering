{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 512, "completion_tokens": 322, "duration": 7.915423154830933, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string):\n    groups = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(': \n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n        if open_count == 0:\n            groups.append(current_group)\n            current_group = ''\n    return groups", "prompt_tokens": 503, "completion_tokens": 410, "duration": 8.507134914398193, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number):\n    return number - int(number)", "prompt_tokens": 473, "completion_tokens": 21, "duration": 2.024181604385376, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 507, "completion_tokens": 269, "duration": 6.360602378845215, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float: \n    mean = sum(numbers) / len(numbers) \n    absolute_differences = [abs(x - mean) for x in numbers] \n    return sum(absolute_differences) / len(absolute_differences)", "prompt_tokens": 505, "completion_tokens": 386, "duration": 8.100793600082397, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter): \n    return [x for pair in zip(numbers, [delimiter] * (len(numbers) - 1)) for x in pair] + [numbers[-1]] if numbers else []", "prompt_tokens": 480, "completion_tokens": 264, "duration": 6.242002725601196, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string):\n    max_levels = []\n    current_level = 0\n    for char in paren_string:\n        if char == '(': \n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        max_levels.append(max(current_level, 0))\n    return max_levels", "prompt_tokens": 500, "completion_tokens": 385, "duration": 8.135539770126343, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [string for string in strings if substring in string]", "prompt_tokens": 481, "completion_tokens": 215, "duration": 5.5621583461761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 498, "completion_tokens": 303, "duration": 7.5419840812683105, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    rolling_max_list = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "prompt_tokens": 488, "completion_tokens": 334, "duration": 8.86245608329773, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string):\n    return string + string[::-1][1:]", "prompt_tokens": 530, "completion_tokens": 214, "duration": 5.459280014038086, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 464, "completion_tokens": 48, "duration": 2.3132832050323486, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 490, "completion_tokens": 293, "duration": 7.202327251434326, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 458, "completion_tokens": 229, "duration": 5.744636297225952, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string):\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 447, "completion_tokens": 32, "duration": 1.9767696857452393, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n):\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 456, "completion_tokens": 218, "duration": 4.14665150642395, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string):\n    return len(set(string.lower()))", "prompt_tokens": 458, "completion_tokens": 216, "duration": 6.1500630378723145, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string):\n    beats = []\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    for note in music_string.split():\n        beats.append(note_duration[note])\n    return beats", "prompt_tokens": 560, "completion_tokens": 274, "duration": 5.941097736358643, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 476, "completion_tokens": 300, "duration": 6.158154010772705, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers):\n    numeral_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_mapping[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 493, "completion_tokens": 376, "duration": 9.767260074615479, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 554, "completion_tokens": 369, "duration": 11.0184645652771, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers): \n    min_val = min(numbers) \n    max_val = max(numbers) \n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers] \n    return rescaled_numbers", "prompt_tokens": 511, "completion_tokens": 369, "duration": 11.434922456741333, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values):\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 479, "completion_tokens": 246, "duration": 10.484457969665527, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string):\n    return len(string)", "prompt_tokens": 431, "completion_tokens": 190, "duration": 3.460672378540039, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n):\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 440, "completion_tokens": 261, "duration": 8.948637247085571, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 514, "completion_tokens": 295, "duration": 7.918571472167969, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    unique_numbers = set()\n    result = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 472, "completion_tokens": 281, "duration": 5.889909505844116, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string):\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 436, "completion_tokens": 269, "duration": 10.030102729797363, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings): \n    return ''.join(strings)", "prompt_tokens": 445, "completion_tokens": 190, "duration": 6.765156984329224, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 475, "completion_tokens": 240, "duration": 9.239349842071533, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l): \n    return [num for num in l if num > 0]", "prompt_tokens": 501, "completion_tokens": 207, "duration": 6.92461371421814, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 487, "completion_tokens": 271, "duration": 7.539166212081909, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs): \n    for x in range(-1000, 1001): \n        if poly(xs, x) == 0: \n            return x", "prompt_tokens": 647, "completion_tokens": 254, "duration": 7.07710075378418, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(val)\n    return result", "prompt_tokens": 538, "completion_tokens": 280, "duration": 10.34627366065979, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l):\n    return sorted(list(set(l)))", "prompt_tokens": 461, "completion_tokens": 251, "duration": 5.4212236404418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l): \n    return max(l)", "prompt_tokens": 470, "completion_tokens": 211, "duration": 4.535787343978882, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n):\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 and '7' in str(i))", "prompt_tokens": 467, "completion_tokens": 50, "duration": 3.50502610206604, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    result = []\n    result.extend(sorted(l[i]) if i % 2 == 0 else l[i] for i in range(len(l)))\n    return result", "prompt_tokens": 511, "completion_tokens": 264, "duration": 4.894272327423096, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s): \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] \n    return ''.join(groups) \n\ndef decode_cyclic(s): \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups] \n    return ''.join(groups)", "prompt_tokens": 546, "completion_tokens": 568, "duration": 12.478769779205322, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    fib_numbers = [0, 1]\n    while len(fib_numbers) < n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    for num in fib_numbers:\n        if is_prime(num) and num in fib_numbers:\n            n -= 1\n            if n == 0:\n                return num", "prompt_tokens": 485, "completion_tokens": 415, "duration": 12.470965385437012, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "from itertools import combinations\n\ndef triples_sum_to_zero(l):\n    for triplet in combinations(l, 3):\n        if sum(triplet) == 0:\n            return True\n    return False", "prompt_tokens": 547, "completion_tokens": 276, "duration": 4.8601157665252686, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n):\n    return n*(n-1)//2", "prompt_tokens": 539, "completion_tokens": 248, "duration": 11.035093545913696, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [e+1 for e in l]", "prompt_tokens": 496, "completion_tokens": 202, "duration": 5.992376804351807, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 545, "completion_tokens": 294, "duration": 9.375548839569092, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 479, "completion_tokens": 289, "duration": 12.169520139694214, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 434, "completion_tokens": 27, "duration": 3.4789843559265137, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n):\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n    return fib_list[n]", "prompt_tokens": 559, "completion_tokens": 396, "duration": 7.071069002151489, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2", "prompt_tokens": 463, "completion_tokens": 327, "duration": 7.149533271789551, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text):\n    reverse_text = text[::-1]\n    return text == reverse_text", "prompt_tokens": 459, "completion_tokens": 201, "duration": 8.295107364654541, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    return (2 ** n) % p", "prompt_tokens": 493, "completion_tokens": 200, "duration": 5.227813243865967, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 478, "completion_tokens": 373, "duration": 11.104745149612427, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 510, "completion_tokens": 228, "duration": 10.968078136444092, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for number in l:\n        if number >= t:\n            return False\n    return True", "prompt_tokens": 467, "completion_tokens": 255, "duration": 7.3581507205963135, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 441, "completion_tokens": 161, "duration": 9.000880241394043, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0, s1):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 528, "completion_tokens": 202, "duration": 3.4986467361450195, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n): \n    if n <= 1: \n        return n \n    else: \n        return fib(n-1) + fib(n-2)", "prompt_tokens": 440, "completion_tokens": 230, "duration": 8.071802377700806, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 480, "completion_tokens": 318, "duration": 9.511513471603394, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    for i in range(1, len(l)):\n        if l[i] < l[i-1] or l[i] > l[i-1]:\n            return False\n    return True", "prompt_tokens": 475, "completion_tokens": 289, "duration": 8.278265476226807, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 502, "completion_tokens": 230, "duration": 7.283307075500488, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    factor = 2\n    while n > factor:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n", "prompt_tokens": 451, "completion_tokens": 285, "duration": 8.821452140808105, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 482, "completion_tokens": 210, "duration": 5.354426383972168, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(': return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 477, "completion_tokens": 302, "duration": 9.65525484085083, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 496, "completion_tokens": 32, "duration": 1.8364806175231934, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 537, "completion_tokens": 305, "duration": 7.284523010253906, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(word):\n    vowels = 'aeiou'\n    count = 0\n    for i, c in enumerate(word):\n        if c.lower() in vowels or (i == len(word) - 1 and c.lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 514, "completion_tokens": 288, "duration": 9.147752285003662, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 470, "completion_tokens": 64, "duration": 2.3662002086639404, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 500, "completion_tokens": 254, "duration": 6.152984380722046, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split(' and ')])\n    return n - apples - oranges", "prompt_tokens": 598, "completion_tokens": 326, "duration": 7.386222839355469, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n            smallest_even = num\n            smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "prompt_tokens": 700, "completion_tokens": 348, "duration": 8.029371738433838, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    for key in freq_dict:\n        if freq_dict[key] >= key:\n            return key\n    return -1", "prompt_tokens": 553, "completion_tokens": 338, "duration": 8.707619667053223, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 512, "completion_tokens": 286, "duration": 6.515030860900879, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 509, "completion_tokens": 342, "duration": 8.557139158248901, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) > w:\n        return False\n    return True", "prompt_tokens": 618, "completion_tokens": 249, "duration": 5.948344469070435, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 545, "completion_tokens": 272, "duration": 5.993922233581543, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 581, "completion_tokens": 325, "duration": 7.224431991577148, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = []\n    for i in range(2, a):\n        while a % i == 0:\n            factors.append(i)\n            a = a // i\n    if len(factors) == 3:\n        return True\n    return False", "prompt_tokens": 467, "completion_tokens": 271, "duration": 6.311540842056274, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    power = math.log(x, n)\n    return power.is_integer()", "prompt_tokens": 530, "completion_tokens": 227, "duration": 5.435291767120361, "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 498, "completion_tokens": 38, "duration": 1.939340353012085, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 687, "completion_tokens": 343, "duration": 8.781295776367188, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 527, "completion_tokens": 30, "duration": 0.8607156276702881, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 509, "completion_tokens": 290, "duration": 6.400327682495117, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    grading_table = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    for gpa in grades:\n        for key in grading_table.keys():\n            if gpa >= key:\n                letter_grades.append(grading_table[key])\n                break\n    return letter_grades", "prompt_tokens": 658, "completion_tokens": 474, "duration": 10.324719429016113, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)", "prompt_tokens": 469, "completion_tokens": 363, "duration": 6.7770774364471436, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    if n == 1:\n        return 1\n    count = 10 + 9 * 9 * (n - 2)\n    return count", "prompt_tokens": 432, "completion_tokens": 300, "duration": 7.491263151168823, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "prompt_tokens": 521, "completion_tokens": 216, "duration": 7.489919424057007, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 443, "completion_tokens": 43, "duration": 3.9170446395874023, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 518, "completion_tokens": 268, "duration": 7.49499773979187, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 647, "completion_tokens": 355, "duration": 8.634944915771484, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 591, "completion_tokens": 309, "duration": 9.07861328125, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    original_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    result = ''\n    for c in s:\n        if c.islower():\n            index = original_alphabet.index(c)\n            rotated_char = rotated_alphabet[index]\n            result += rotated_char\n        else:\n            result += c\n    return result", "prompt_tokens": 498, "completion_tokens": 352, "duration": 7.476748466491699, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "prompt_tokens": 512, "completion_tokens": 252, "duration": 7.813155174255371, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 495, "completion_tokens": 257, "duration": 5.287081956863403, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 523, "completion_tokens": 249, "duration": 9.385892868041992, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 497, "completion_tokens": 342, "duration": 10.65626072883606, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef find_largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 674, "completion_tokens": 422, "duration": 11.180272102355957, "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    flag_lower = False\n    flag_upper = False\n    for key in dict.keys():\n        if key.islower():\n            flag_lower = True\n        if key.isupper():\n            flag_upper = True\n    return flag_lower != flag_upper", "prompt_tokens": 557, "completion_tokens": 330, "duration": 8.617310285568237, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 533, "completion_tokens": 331, "duration": 12.955695629119873, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 486, "completion_tokens": 194, "duration": 5.274305105209351, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 460, "completion_tokens": 269, "duration": 8.614664316177368, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value)))", "prompt_tokens": 544, "completion_tokens": 201, "duration": 4.715192794799805, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 1:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 520, "completion_tokens": 357, "duration": 6.7079527378082275, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ')", "prompt_tokens": 504, "completion_tokens": 194, "duration": 7.181338310241699, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] or [-1])", "prompt_tokens": 482, "completion_tokens": 45, "duration": 4.911848068237305, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    count = m - n + 1\n    avg = total / count\n    rounded_avg = round(avg)\n    return bin(rounded_avg)", "prompt_tokens": 528, "completion_tokens": 333, "duration": 8.858649015426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 490, "completion_tokens": 43, "duration": 3.232748508453369, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[num] for num in reversed_arr]\n    return result", "prompt_tokens": 664, "completion_tokens": 315, "duration": 6.668603181838989, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 512, "completion_tokens": 326, "duration": 9.91847562789917, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/107", "generated_code": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 599, "completion_tokens": 344, "duration": 7.347212314605713, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 512, "completion_tokens": 298, "duration": 7.147489786148071, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr == sorted(arr):\n            return True\n    return False", "prompt_tokens": 687, "completion_tokens": 324, "duration": 6.21860146522522, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    count_odd_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    if count_odd_lst1 <= count_odd_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 585, "completion_tokens": 355, "duration": 18.370935201644897, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    counts = Counter(letters)\n    return dict(counts)", "prompt_tokens": 539, "completion_tokens": 267, "duration": 5.7411417961120605, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 550, "completion_tokens": 319, "duration": 54.08865475654602, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char.isdigit() and int(char) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result", "prompt_tokens": 561, "completion_tokens": 349, "duration": 7.275040626525879, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 476, "completion_tokens": 340, "duration": 7.1079185009002686, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            total_lowerings += math.ceil(well / capacity)\n    return total_lowerings", "prompt_tokens": 711, "completion_tokens": 350, "duration": 7.446024417877197, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def custom_sort(num):\n        return bin(num).count('1'), num\n    return sorted(arr, key=custom_sort)", "prompt_tokens": 558, "completion_tokens": 291, "duration": 9.567872762680054, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    result = []\n    if not s:\n        return result\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 569, "completion_tokens": 358, "duration": 10.744498252868652, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = ''\n    consonant_count = 0\n    for char in word[::-1]:\n        if char.lower() not in 'aeiou':\n            consonant_count += 1\n        elif consonant_count == 1:\n            closest_vowel = char\n            break\n    return closest_vowel", "prompt_tokens": 537, "completion_tokens": 374, "duration": 7.929559946060181, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    counter = 0\n    concat_str = ''.join(lst)\n    for char in concat_str:\n        if char == '(': counter += 1\n        elif char == ')': counter -= 1\n        if counter < 0: return 'No'\n    return 'Yes' if counter == 0 else 'No'", "prompt_tokens": 556, "completion_tokens": 334, "duration": 12.987049102783203, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 605, "completion_tokens": 250, "duration": 5.58545446395874, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 485, "completion_tokens": 43, "duration": 1.9289066791534424, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    for i in range(min(k, len(arr))):\n        if 10 <= arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 516, "completion_tokens": 337, "duration": 8.821027517318726, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    odd_numbers = [num for num in collatz_seq if num % 2 != 0]\n    return sorted(odd_numbers)", "prompt_tokens": 619, "completion_tokens": 386, "duration": 9.912464618682861, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = map(int, parts)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True", "prompt_tokens": 651, "completion_tokens": 455, "duration": 8.77172327041626, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "prompt_tokens": 528, "completion_tokens": 344, "duration": 7.437849998474121, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] == sorted_lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 637, "completion_tokens": 287, "duration": 6.073009252548218, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 642, "completion_tokens": 405, "duration": 8.556767463684082, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            continue\n        product_of_signs *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 510, "completion_tokens": 387, "duration": 7.466930627822876, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(path, i, j):\n        if len(path) == k:\n            return path\n        for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_i, new_j = i + x, j + y\n            if 0 <= new_i < len(grid) and 0 <= new_j < len(grid[0]) and (new_i, new_j) not in path:\n                new_path = dfs(path + [(new_i, new_j)], new_i, new_j)\n                if new_path:\n                    return new_path\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs([(i, j)], i, j)\n            if path:\n                return [grid[x][y] for x, y in path]", "prompt_tokens": 1461, "completion_tokens": 634, "duration": 15.683666229248047, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    return tribonacci[:n + 1]", "prompt_tokens": 623, "completion_tokens": 342, "duration": 7.038432359695435, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 459, "completion_tokens": 270, "duration": 5.693352460861206, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) != 0", "prompt_tokens": 521, "completion_tokens": 310, "duration": 6.7244298458099365, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        total += squared_num\n    return total", "prompt_tokens": 545, "completion_tokens": 279, "duration": 7.341049909591675, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt[::-1]\n    for char in txt:\n        if char != ' ':\n            return char.isalpha()\n    return False", "prompt_tokens": 525, "completion_tokens": 269, "duration": 6.428746223449707, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 491, "completion_tokens": 277, "duration": 5.877502679824829, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 526, "completion_tokens": 347, "duration": 6.871824741363525, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_float = float(b.replace(',', '.')) if ',' in b else float(b)\n        return a if a_float > b_float else b\n    else:\n        return None", "prompt_tokens": 529, "completion_tokens": 476, "duration": 8.97730827331543, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 8 == 0", "prompt_tokens": 465, "completion_tokens": 27, "duration": 1.3756911754608154, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 483, "completion_tokens": 275, "duration": 6.101755142211914, "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            if consecutive_spaces < 2:\n                result += '_'\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            result += char\n            consecutive_spaces = 0\n    return result", "prompt_tokens": 494, "completion_tokens": 341, "duration": 11.333101272583008, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = sum(c.isdigit() for c in file_name)\n    if count_digits > 3 or '.' not in file_name or file_name.count('.') != 1:\n        return 'No'\n    file_name_parts = file_name.split('.')\n    if not file_name_parts[0] or not file_name_parts[0][0].isalpha() or file_name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 602, "completion_tokens": 400, "duration": 11.932579517364502, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    sum = 0\n    for index, num in enumerate(lst):\n        if index % 3 == 0:\n            sum += num ** 2\n        elif index % 4 == 0 and index % 3 != 0:\n            sum += num ** 3\n    return sum", "prompt_tokens": 557, "completion_tokens": 362, "duration": 11.548452377319336, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "import sympy\n\ndef words_in_sentence(sentence):\n    result = []\n    words = sentence.split()\n    for word in words:\n        if sympy.isprime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "prompt_tokens": 535, "completion_tokens": 321, "duration": 10.498916149139404, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    result = eval(x) * eval(n)\n    return result.is_integer()", "prompt_tokens": 543, "completion_tokens": 250, "duration": 11.922974824905396, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 503, "completion_tokens": 282, "duration": 8.51466989517212, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 507, "completion_tokens": 348, "duration": 9.427241325378418, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 553, "completion_tokens": 401, "duration": 15.000232934951782, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        return tuple(sorted(planets[index1+1:index2], key=planets.index))\n    else:\n        return ()", "prompt_tokens": 599, "completion_tokens": 405, "duration": 6.916374206542969, "result": "failed: Second test error: ()", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 575, "completion_tokens": 246, "duration": 4.3337485790252686, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 474, "completion_tokens": 288, "duration": 7.626293420791626, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum([num ** 2 for num in lst if num >= 0 and isinstance(num, int) and num % 2 != 0])", "prompt_tokens": 525, "completion_tokens": 257, "duration": 9.67556357383728, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 618, "completion_tokens": 280, "duration": 32.89978528022766, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension", "prompt_tokens": 665, "completion_tokens": 407, "duration": 12.27874207496643, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False", "prompt_tokens": 517, "completion_tokens": 230, "duration": 6.0927512645721436, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 453, "completion_tokens": 348, "duration": 9.019925832748413, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 489, "completion_tokens": 360, "duration": 9.081802368164062, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "import math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[2] == math.sqrt(sides[0]**2 + sides[1]**2):\n        return True\n    else:\n        return False", "prompt_tokens": 496, "completion_tokens": 350, "duration": 9.041132926940918, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars_count = len(set(word))\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n    return max_word", "prompt_tokens": 508, "completion_tokens": 380, "duration": 12.579471588134766, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 665, "completion_tokens": 287, "duration": 5.345729112625122, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 595, "completion_tokens": 475, "duration": 13.14087700843811, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s): \n    result = '' \n    has_letter = False \n    for c in s: \n        if c.isalpha(): \n            result += c.swapcase() \n            has_letter = True \n        else: \n            result += c \n    if not has_letter: \n        return result[::-1] \n    else: \n        return result", "prompt_tokens": 495, "completion_tokens": 369, "duration": 7.517281770706177, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 464, "completion_tokens": 255, "duration": 6.827052593231201, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 492, "completion_tokens": 247, "duration": 10.378253936767578, "result": "failed: Test 1", "passed": false}
