{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 487, "completion_tokens": 337, "duration": 6.263479471206665, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string):\n    groups = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(': \n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n        if open_count == 0:\n            groups.append(current_group)\n            current_group = ''\n    return groups", "prompt_tokens": 478, "completion_tokens": 400, "duration": 6.919105529785156, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number):\n    return number - int(number)", "prompt_tokens": 448, "completion_tokens": 218, "duration": 4.900609016418457, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 482, "completion_tokens": 270, "duration": 5.89413857460022, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    absolute_diff = [abs(num - mean) for num in numbers]\n    return sum(absolute_diff) / len(numbers)", "prompt_tokens": 480, "completion_tokens": 337, "duration": 6.038102388381958, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 455, "completion_tokens": 277, "duration": 5.650729179382324, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string):\n    max_nesting_levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(': \n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n    \n        if char == ' ':\n            max_nesting_levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    \n    max_nesting_levels.append(max_level)\n    return max_nesting_levels", "prompt_tokens": 475, "completion_tokens": 464, "duration": 8.017390727996826, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [string for string in strings if substring in string]", "prompt_tokens": 456, "completion_tokens": 265, "duration": 5.373092889785767, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = math.prod(numbers)\n    return (sum_result, product_result)", "prompt_tokens": 473, "completion_tokens": 288, "duration": 5.172877073287964, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    rolling_max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "prompt_tokens": 463, "completion_tokens": 320, "duration": 5.5850934982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string):\n    return string + string[::-1][1:]", "prompt_tokens": 505, "completion_tokens": 238, "duration": 11.03989577293396, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))", "prompt_tokens": 439, "completion_tokens": 246, "duration": 7.265340566635132, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string", "prompt_tokens": 465, "completion_tokens": 275, "duration": 7.904382228851318, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a, b):\n    return math.gcd(a, b)", "prompt_tokens": 433, "completion_tokens": 215, "duration": 4.234852313995361, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string):\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 422, "completion_tokens": 239, "duration": 5.548079967498779, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n):\n    result = ''\n    for i in range(n+1):\n        result += str(i)\n        if i != n:\n            result += ' '\n    return result", "prompt_tokens": 431, "completion_tokens": 249, "duration": 10.47116756439209, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string):\n    string = string.lower()\n    unique_chars = set()\n    for char in string:\n        if char.isalnum():\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 433, "completion_tokens": 275, "duration": 5.7492475509643555, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string):\n    durations = []\n    for note in music_string.split():\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 535, "completion_tokens": 324, "duration": 7.348248243331909, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string, substring):\n    import re\n    return len(re.findall('(?={})'.format(substring), string))", "prompt_tokens": 451, "completion_tokens": 280, "duration": 7.906469821929932, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers):\n    return ' '.join(sorted(numbers.split()))", "prompt_tokens": 468, "completion_tokens": 275, "duration": 7.985294818878174, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    closest1, closest2 = None, None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest1, closest2 = numbers[i], numbers[i + 1]\n    return closest1, closest2", "prompt_tokens": 529, "completion_tokens": 364, "duration": 12.581143617630005, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers): \n    min_val = min(numbers) \n    max_val = max(numbers) \n    range_val = max_val - min_val \n    rescaled_numbers = [(num - min_val) / range_val for num in numbers] \n    return rescaled_numbers", "prompt_tokens": 486, "completion_tokens": 413, "duration": 9.013728380203247, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values):\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 454, "completion_tokens": 241, "duration": 4.6023218631744385, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string):\n    return len(string)", "prompt_tokens": 406, "completion_tokens": 190, "duration": 5.226091623306274, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n):\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 415, "completion_tokens": 261, "duration": 11.246124267578125, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 489, "completion_tokens": 296, "duration": 5.7777862548828125, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    unique = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique.append(num)\n    return unique", "prompt_tokens": 447, "completion_tokens": 284, "duration": 11.489234924316406, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string):\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n    return result", "prompt_tokens": 411, "completion_tokens": 287, "duration": 11.185249090194702, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 420, "completion_tokens": 176, "duration": 8.425219535827637, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 450, "completion_tokens": 220, "duration": 4.516258955001831, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l): \n    return [num for num in l if num > 0]", "prompt_tokens": 476, "completion_tokens": 203, "duration": 4.81939172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 462, "completion_tokens": 269, "duration": 6.015968322753906, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs):\n    for x in range(-1000, 1000):\n        if poly(xs, x) == 0:\n            return x", "prompt_tokens": 622, "completion_tokens": 246, "duration": 5.727492094039917, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    for index in range(len(l)):\n        if index % 3 == 0:\n            l[index] = sorted(l[index])\n    return l", "prompt_tokens": 513, "completion_tokens": 280, "duration": 6.710448265075684, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l): \n    return sorted(list(set(l)))", "prompt_tokens": 436, "completion_tokens": 263, "duration": 5.573636770248413, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l): \n    return max(l)", "prompt_tokens": 445, "completion_tokens": 211, "duration": 4.601960897445679, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 442, "completion_tokens": 322, "duration": 7.150532245635986, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    for i in range(0, len(l), 2):\n        l[i+1] = l[i+1]\n    l[::2] = sorted(l[::2])", "prompt_tokens": 486, "completion_tokens": 280, "duration": 6.183153867721558, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s): \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups] \n    return ''.join(groups) \n\ndef decode_cyclic(s): \n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)] \n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups] \n    return ''.join(groups)", "prompt_tokens": 521, "completion_tokens": 450, "duration": 7.966378450393677, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n):\n    fib_numbers = [0, 1]\n    count = 2\n    current_number = 1\n    while count < n:\n        next_number = fib_numbers[-1] + fib_numbers[-2]\n        if is_prime(next_number):\n            count += 1\n        fib_numbers.append(next_number)\n    return fib_numbers[-1]\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 460, "completion_tokens": 525, "duration": 10.817991495132446, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 522, "completion_tokens": 336, "duration": 6.457592010498047, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n):\n    return n * (n - 1) // 2", "prompt_tokens": 514, "completion_tokens": 253, "duration": 6.251721620559692, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 471, "completion_tokens": 232, "duration": 4.919468879699707, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 520, "completion_tokens": 284, "duration": 5.3604576587677, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 454, "completion_tokens": 292, "duration": 5.566427230834961, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 409, "completion_tokens": 233, "duration": 4.245048522949219, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n):\n    fib_list = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n    return fib_list[n]", "prompt_tokens": 534, "completion_tokens": 314, "duration": 5.175346612930298, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 438, "completion_tokens": 323, "duration": 6.412402629852295, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text):\n    return text == text[::-1]", "prompt_tokens": 434, "completion_tokens": 202, "duration": 10.530300617218018, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    return pow(2, n, p)", "prompt_tokens": 468, "completion_tokens": 204, "duration": 9.701042652130127, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 453, "completion_tokens": 340, "duration": 11.640114545822144, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])", "prompt_tokens": 485, "completion_tokens": 223, "duration": 10.89103651046753, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for number in l:\n        if number >= t:\n            return False\n    return True", "prompt_tokens": 442, "completion_tokens": 225, "duration": 4.63702917098999, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 416, "completion_tokens": 161, "duration": 9.283597230911255, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0, s1):\n    return set(s0) == set(s1)", "prompt_tokens": 503, "completion_tokens": 218, "duration": 10.068326473236084, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "generated_code": "def fib(n): \n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    return fib(n-1) + fib(n-2)", "prompt_tokens": 415, "completion_tokens": 243, "duration": 11.772414684295654, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            else:\n                stack.pop()\n    return not stack", "prompt_tokens": 455, "completion_tokens": 321, "duration": 11.439189910888672, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    if not l:\n        return True\n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing", "prompt_tokens": 450, "completion_tokens": 406, "duration": 13.214143514633179, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 477, "completion_tokens": 227, "duration": 7.151744365692139, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "prompt_tokens": 426, "completion_tokens": 270, "duration": 10.417890787124634, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 457, "completion_tokens": 216, "duration": 4.240926265716553, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': stack.append(bracket)\n        elif bracket == ')':\n            if not stack or stack[-1] != '(': return False\n            else: stack.pop()\n    return not stack", "prompt_tokens": 452, "completion_tokens": 333, "duration": 7.043254375457764, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs): \n    result = [] \n    for i, c in enumerate(xs): \n        if i > 0: \n            result.append(i * c) \n    return result", "prompt_tokens": 471, "completion_tokens": 287, "duration": 5.330244541168213, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 512, "completion_tokens": 302, "duration": 5.391988515853882, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(word):\n    count = 0\n    for char in word:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u'] or (char.lower() == 'y' and word.index(char) == len(word) - 1):\n            count += 1\n    return count", "prompt_tokens": 489, "completion_tokens": 279, "duration": 7.088583707809448, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    effective_shift = shift % len(x_str)\n    if effective_shift == 0:\n        return x_str\n    else:\n        return x_str[-effective_shift:] + x_str[:-effective_shift]", "prompt_tokens": 445, "completion_tokens": 312, "duration": 5.968934535980225, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum", "prompt_tokens": 475, "completion_tokens": 246, "duration": 5.6344311237335205, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, re.findall(r'(\b\\d+\b)', s))\n    return n - apples - oranges", "prompt_tokens": 573, "completion_tokens": 301, "duration": 6.619413137435913, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even_index != -1:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 675, "completion_tokens": 333, "duration": 10.007798910140991, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    for key, value in freq_dict.items():\n        if value >= key:\n            return key\n    return -1", "prompt_tokens": 528, "completion_tokens": 348, "duration": 10.977573871612549, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 487, "completion_tokens": 285, "duration": 5.279619932174683, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 484, "completion_tokens": 364, "duration": 7.2412214279174805, "result": "failed: name 'sqrt' is not defined", "passed": false}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) > w:\n        return False\n    return True", "prompt_tokens": 593, "completion_tokens": 329, "duration": 6.559849262237549, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    count = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            count += 1\n    return count", "prompt_tokens": 520, "completion_tokens": 273, "duration": 5.71713399887085, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 556, "completion_tokens": 333, "duration": 7.160255193710327, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    prime_factors = find_prime_factors(a)\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False", "prompt_tokens": 442, "completion_tokens": 279, "duration": 10.54683256149292, "result": "failed: name 'find_prime_factors' is not defined", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 505, "completion_tokens": 271, "duration": 5.630295276641846, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = a ** (1/3)\n    return cube_root.is_integer()", "prompt_tokens": 473, "completion_tokens": 224, "duration": 5.224565505981445, "result": "failed: 'complex' object has no attribute 'is_integer'", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 662, "completion_tokens": 331, "duration": 5.526137590408325, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_string = ''\n    while decimal > 0:\n        binary_string += str(decimal % 2)\n        decimal //= 2\n    return 'db' + binary_string[::-1] + 'db'", "prompt_tokens": 502, "completion_tokens": 277, "duration": 4.86971116065979, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 484, "completion_tokens": 310, "duration": 5.606639623641968, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_table = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    letter_grades = [grade_table[gpa] for gpa in grades]\n    return letter_grades", "prompt_tokens": 633, "completion_tokens": 422, "duration": 7.255941390991211, "result": "failed: 3.5", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 444, "completion_tokens": 290, "duration": 6.345562696456909, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        return 2 * 9 * 10**(n-2)", "prompt_tokens": 407, "completion_tokens": 270, "duration": 11.09432864189148, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    N_str = str(N)\n    total_sum = sum(int(digit) for digit in N_str)\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum", "prompt_tokens": 496, "completion_tokens": 251, "duration": 9.380272388458252, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "prompt_tokens": 418, "completion_tokens": 308, "duration": 10.26523470878601, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 493, "completion_tokens": 282, "duration": 5.767580032348633, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 622, "completion_tokens": 361, "duration": 8.185118198394775, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 566, "completion_tokens": 299, "duration": 9.930297374725342, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    mapping = {chr(i): chr((i - 97 + 2 * 2) % 26 + 97) for i in range(97, 123)}\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += mapping[char]\n        else:\n            result += char\n    return result", "prompt_tokens": 473, "completion_tokens": 327, "duration": 8.481493949890137, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]", "prompt_tokens": 487, "completion_tokens": 252, "duration": 5.341789960861206, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    count = 0\n    words = S.split()\n    in_sentence = False\n    for word in words:\n        if word == 'I' and not in_sentence:\n            count += 1\n            in_sentence = True\n        if word[-1] in ['.', '?', '!']:\n            in_sentence = False\n    return count", "prompt_tokens": 470, "completion_tokens": 338, "duration": 6.47558069229126, "result": "failed: Test 6", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    for nums in [(x, y, z), (y, z, x), (z, x, y)]:\n        if isinstance(nums[0], int) and isinstance(nums[1], int) and isinstance(nums[2], int):\n            if nums[0] == nums[1] + nums[2] or nums[1] == nums[0] + nums[2] or nums[2] == nums[0] + nums[1]:\n                return True\n    return False", "prompt_tokens": 498, "completion_tokens": 327, "duration": 6.164200305938721, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 472, "completion_tokens": 306, "duration": 6.0712831020355225, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def find_largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 649, "completion_tokens": 461, "duration": 9.808861255645752, "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_flag = False\n    uppercase_flag = False\n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            lowercase_flag = True\n        elif isinstance(key, str) and key.isupper():\n            uppercase_flag = True\n        if lowercase_flag and uppercase_flag:\n            return False\n    return True", "prompt_tokens": 532, "completion_tokens": 378, "duration": 7.387845039367676, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n            if len(primes) == n:\n                break\n    return primes", "prompt_tokens": 508, "completion_tokens": 438, "duration": 7.504323244094849, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 461, "completion_tokens": 205, "duration": 4.134745121002197, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if char in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 435, "completion_tokens": 283, "duration": 6.578390836715698, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return round(float(value))", "prompt_tokens": 519, "completion_tokens": 241, "duration": 4.809006214141846, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 1:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 495, "completion_tokens": 364, "duration": 6.974377632141113, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split()", "prompt_tokens": 479, "completion_tokens": 222, "duration": 4.334746360778809, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    result = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            result = max(result, num)\n    return result", "prompt_tokens": 457, "completion_tokens": 271, "duration": 5.435019016265869, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    count = m - n + 1\n    avg = round(total / count)\n    return bin(avg)", "prompt_tokens": 503, "completion_tokens": 298, "duration": 5.889832258224487, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if any(int(digit) % 2 == 0 for digit in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)", "prompt_tokens": 465, "completion_tokens": 324, "duration": 6.365301847457886, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x-1] for x in arr ]", "prompt_tokens": 1072, "completion_tokens": 428, "duration": 8.42043924331665, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 487, "completion_tokens": 310, "duration": 7.442150592803955, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 574, "completion_tokens": 343, "duration": 7.174639701843262, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 487, "completion_tokens": 295, "duration": 5.912280082702637, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        shifted_arr = arr[-i:] + arr[:-i]\n        if all(shifted_arr[j] <= shifted_arr[j+1] for j in range(len(shifted_arr)-1)):\n            return True\n    return False", "prompt_tokens": 1123, "completion_tokens": 421, "duration": 14.432205200195312, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    if odd_count <= len(lst1):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 560, "completion_tokens": 319, "duration": 7.971672058105469, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {letter: test.count(letter) for letter in letters}\n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}", "prompt_tokens": 514, "completion_tokens": 305, "duration": 5.645224332809448, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char not in c:\n            result += char\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 525, "completion_tokens": 285, "duration": 4.731716871261597, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                odd_count += 1\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {odd_count}nput.')\n    return result", "prompt_tokens": 536, "completion_tokens": 382, "duration": 10.244412183761597, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = float('inf')\n    for num in nums:\n        current_sum = min(num, num + current_sum)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 451, "completion_tokens": 332, "duration": 10.460581302642822, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_times = 0\n    for row in grid:\n        for well in row:\n            excess_water = max(0, well - capacity)\n            total_times += excess_water\n    return total_times", "prompt_tokens": 686, "completion_tokens": 325, "duration": 6.844367027282715, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 533, "completion_tokens": 271, "duration": 51.77058482170105, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    selected_words = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.lower() not in 'aeiou')\n        if consonant_count == n:\n            selected_words.append(word)\n    return selected_words", "prompt_tokens": 544, "completion_tokens": 349, "duration": 10.54583477973938, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    for i in range(len(word)-2, 0, -1):\n        if word[i] not in 'aeiouAEIOU' and word[i+1] in 'aeiouAEIOU' and word[i+2] not in 'aeiouAEIOU':\n            return word[i+1]\n    return ''", "prompt_tokens": 512, "completion_tokens": 385, "duration": 11.96449589729309, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in ''.join(lst):\n        if char == '(': stack.append(char)\n        elif not stack or stack.pop() != '(': return 'No'\n    return 'Yes'", "prompt_tokens": 531, "completion_tokens": 311, "duration": 9.996205568313599, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 580, "completion_tokens": 206, "duration": 4.517093896865845, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    total = 0\n    for idx, val in enumerate(lst):\n        if val % 2 != 0 and idx % 2 == 0:\n            total += val\n    return total", "prompt_tokens": 460, "completion_tokens": 286, "duration": 5.611168384552002, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum", "prompt_tokens": 491, "completion_tokens": 274, "duration": 5.987924098968506, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    result.append(n)\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 594, "completion_tokens": 384, "duration": 6.969361305236816, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31 and int(month) in [1, 3, 5, 7, 8, 10, 12] or\n            1 <= int(day) <= 30 and int(month) in [4, 6, 9, 11] or\n            1 <= int(day) <= 29 and int(month) == 2):\n        return False\n    return True", "prompt_tokens": 626, "completion_tokens": 419, "duration": 7.484002351760864, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 503, "completion_tokens": 331, "duration": 5.635877847671509, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] == sorted_lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 612, "completion_tokens": 264, "duration": 5.196494817733765, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start + 1\n    if length <= 1:\n        return 'NO'\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return 'NO'\n    return 'YES'", "prompt_tokens": 617, "completion_tokens": 377, "duration": 8.04656195640564, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            continue\n        product_of_signs *= num // abs(num)\n        sum_of_magnitudes += abs(num)\n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 485, "completion_tokens": 387, "duration": 8.80032753944397, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Implementation of the solution to find the minimum path\n    pass", "prompt_tokens": 759, "completion_tokens": 280, "duration": 5.442823886871338, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    return tribonacci[:n + 1]", "prompt_tokens": 598, "completion_tokens": 355, "duration": 8.10519528388977, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 434, "completion_tokens": 281, "duration": 5.002290725708008, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 496, "completion_tokens": 300, "duration": 4.663928270339966, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num ** 2\n        sum += squared_num\n    return sum", "prompt_tokens": 520, "completion_tokens": 248, "duration": 9.51064920425415, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    else:\n        return False", "prompt_tokens": 500, "completion_tokens": 298, "duration": 5.732067823410034, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 466, "completion_tokens": 277, "duration": 5.788750410079956, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 501, "completion_tokens": 345, "duration": 5.780651569366455, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        return max(a, b)\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)", "prompt_tokens": 504, "completion_tokens": 315, "duration": 11.534987211227417, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                for d in range(1, n):\n                    if 2*a + 2*b + 2*c + 2*d == n:\n                        return True\n    return False", "prompt_tokens": 440, "completion_tokens": 354, "duration": 5.860795974731445, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 458, "completion_tokens": 266, "duration": 7.149499177932739, "result": "failed: name 'factorial' is not defined", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += '-'\n            else:\n                result += '_'\n            continue\n        consecutive_spaces = 0\n        result += char\n    return result", "prompt_tokens": 469, "completion_tokens": 380, "duration": 6.104200124740601, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 577, "completion_tokens": 368, "duration": 7.143237829208374, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total", "prompt_tokens": 532, "completion_tokens": 366, "duration": 5.979101896286011, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    result = []\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "prompt_tokens": 510, "completion_tokens": 363, "duration": 7.004064559936523, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 518, "completion_tokens": 298, "duration": 4.511169195175171, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 478, "completion_tokens": 253, "duration": 10.600504875183105, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 482, "completion_tokens": 357, "duration": 11.592042922973633, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 528, "completion_tokens": 480, "duration": 12.751925468444824, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(sorted(planets[start+1:end], key=planets.index))", "prompt_tokens": 574, "completion_tokens": 325, "duration": 12.419590711593628, "result": "failed: Second test error: ()", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 550, "completion_tokens": 266, "duration": 4.174446105957031, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 449, "completion_tokens": 292, "duration": 5.395562410354614, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum = 0\n    for num in lst:\n        if num >= 0 and isinstance(num, int) and num % 2 != 0:\n            sum += num ** 2\n    return sum", "prompt_tokens": 500, "completion_tokens": 287, "duration": 6.263444185256958, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 593, "completion_tokens": 310, "duration": 8.271860599517822, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension", "prompt_tokens": 640, "completion_tokens": 411, "duration": 8.713833093643188, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b[i:] + b[:i]) != -1:\n            return True\n    return False", "prompt_tokens": 492, "completion_tokens": 228, "duration": 5.019301891326904, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 428, "completion_tokens": 316, "duration": 6.328827381134033, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    mapping = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in mapping.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 464, "completion_tokens": 379, "duration": 8.129974603652954, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 471, "completion_tokens": 318, "duration": 6.232051849365234, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = ''\n    max_unique_count = 0\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word):\n            max_word = word\n            max_unique_count = unique_count\n    return max_word", "prompt_tokens": 483, "completion_tokens": 361, "duration": 7.057764530181885, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = remaining - total_eaten\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 640, "completion_tokens": 330, "duration": 6.570531368255615, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 570, "completion_tokens": 378, "duration": 8.07351303100586, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    else:\n        return result", "prompt_tokens": 470, "completion_tokens": 314, "duration": 6.175215482711792, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 439, "completion_tokens": 281, "duration": 5.6254308223724365, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 467, "completion_tokens": 243, "duration": 4.825962543487549, "result": "failed: Test 1", "passed": false}
