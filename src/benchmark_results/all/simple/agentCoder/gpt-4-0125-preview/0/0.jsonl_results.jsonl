{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 510, "completion_tokens": 326, "duration": 17.839873552322388, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        current_group += char\n        if open_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = ''\n    return groups", "prompt_tokens": 501, "completion_tokens": 413, "duration": 17.54357147216797, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number):\n    return number - int(number)", "prompt_tokens": 471, "completion_tokens": 213, "duration": 11.538021326065063, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 505, "completion_tokens": 271, "duration": 15.560668468475342, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 503, "completion_tokens": 275, "duration": 9.899350881576538, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 478, "completion_tokens": 342, "duration": 17.13836121559143, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    for group in paren_string.split():\n        current_depth = max_depth = 0\n        for char in group:\n            if char == '(': current_depth += 1\n            elif char == ')': current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 498, "completion_tokens": 386, "duration": 15.461254358291626, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [string for string in strings if substring in string]", "prompt_tokens": 479, "completion_tokens": 231, "duration": 12.718359231948853, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))", "prompt_tokens": 496, "completion_tokens": 306, "duration": 16.695932626724243, "result": "failed: name 'reduce' is not defined", "passed": false}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    result = []\n    current_max = float('-inf')\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    return result", "prompt_tokens": 486, "completion_tokens": 367, "duration": 10.428390502929688, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 528, "completion_tokens": 403, "duration": 16.055253505706787, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a, b):\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 462, "completion_tokens": 287, "duration": 10.183034181594849, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 488, "completion_tokens": 296, "duration": 16.27056097984314, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a", "prompt_tokens": 456, "completion_tokens": 253, "duration": 10.520022630691528, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 445, "completion_tokens": 260, "duration": 19.27343511581421, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n):\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 454, "completion_tokens": 260, "duration": 14.258396863937378, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 456, "completion_tokens": 268, "duration": 10.519519090652466, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 558, "completion_tokens": 380, "duration": 15.099363327026367, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string, substring):\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)", "prompt_tokens": 474, "completion_tokens": 309, "duration": 11.956760883331299, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    sorted_numbers = sorted(numbers.split(), key=lambda word: word_to_num[word])\n    return ' '.join(num_to_word[num] for num in sorted_numbers)", "prompt_tokens": 491, "completion_tokens": 355, "duration": 23.52292823791504, "result": "failed: 'three'", "passed": false}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 552, "completion_tokens": 421, "duration": 25.618150234222412, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 509, "completion_tokens": 361, "duration": 23.976523876190186, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values):\n    return [item for item in values if isinstance(item, int)]", "prompt_tokens": 477, "completion_tokens": 248, "duration": 16.558884620666504, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 429, "completion_tokens": 193, "duration": 9.635802984237671, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n):\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 438, "completion_tokens": 279, "duration": 18.880237102508545, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 1\n    return factors", "prompt_tokens": 512, "completion_tokens": 379, "duration": 25.686614513397217, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    result = []\n    seen = set()\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result", "prompt_tokens": 470, "completion_tokens": 361, "duration": 10.92280912399292, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string):\n    return string.swapcase()", "prompt_tokens": 434, "completion_tokens": 240, "duration": 10.728939771652222, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 443, "completion_tokens": 205, "duration": 8.245287418365479, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 473, "completion_tokens": 234, "duration": 14.689177513122559, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 499, "completion_tokens": 222, "duration": 16.883370637893677, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 485, "completion_tokens": 292, "duration": 16.057604551315308, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    # Assuming the task's conditions guarantee a simple method exists\n    # This is a placeholder for the actual implementation\n    # which might involve specific mathematical operations or approximations\n    return -xs[0] / xs[1] if len(xs) % 2 == 0 else None", "prompt_tokens": 645, "completion_tokens": 472, "duration": 22.612151384353638, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    indices = range(0, len(l), 3)\n    sorted_elements = sorted(l[i] for i in indices)\n    for i, value in zip(indices, sorted_elements):\n        l[i] = value\n    return l", "prompt_tokens": 536, "completion_tokens": 337, "duration": 11.144070386886597, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l):\n    return sorted(set(l))", "prompt_tokens": 459, "completion_tokens": 217, "duration": 9.521700382232666, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l):\n    return max(l)", "prompt_tokens": 468, "completion_tokens": 192, "duration": 5.625570774078369, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 465, "completion_tokens": 384, "duration": 16.488418102264404, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = sorted(l[::2])\n    result = l[:]\n    result[::2] = even_indices\n    return result", "prompt_tokens": 509, "completion_tokens": 318, "duration": 16.73915195465088, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 544, "completion_tokens": 362, "duration": 17.394928693771362, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_seq(limit):\n        a, b = 0, 1\n        while limit > 0:\n            yield a\n            a, b = b, a + b\n            limit -= 1\n\n    count, num = 0, 0\n    for fib_num in fib_seq(22700):  # 22700 is an arbitrary limit to find prime Fibonacci numbers\n        if is_prime(fib_num) and fib_num != 0:\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 483, "completion_tokens": 427, "duration": 16.439238786697388, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    n = len(l)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 545, "completion_tokens": 347, "duration": 22.25045371055603, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n", "prompt_tokens": 537, "completion_tokens": 265, "duration": 10.819969654083252, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 494, "completion_tokens": 251, "duration": 9.499586343765259, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for element in l:\n        if -element in seen:\n            return True\n        seen.add(element)\n    return False", "prompt_tokens": 543, "completion_tokens": 323, "duration": 15.205395936965942, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 477, "completion_tokens": 338, "duration": 16.589231729507446, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 432, "completion_tokens": 206, "duration": 13.306675434112549, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n):\n    if n == 0 or n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    terms = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        next_term = sum(terms[-4:])\n        terms.append(next_term)\n    return terms[n]", "prompt_tokens": 557, "completion_tokens": 426, "duration": 21.634613752365112, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l = sorted(l)\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0", "prompt_tokens": 461, "completion_tokens": 341, "duration": 16.268916130065918, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text):\n    return text == text[::-1]", "prompt_tokens": 457, "completion_tokens": 206, "duration": 6.642918109893799, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    return (2 ** n) % p", "prompt_tokens": 491, "completion_tokens": 238, "duration": 12.002768993377686, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - ord('a') - 5) % 26) + ord('a')) for ch in s])", "prompt_tokens": 476, "completion_tokens": 409, "duration": 15.001819372177124, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 508, "completion_tokens": 263, "duration": 9.888639450073242, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    return all(x < t for x in l)", "prompt_tokens": 465, "completion_tokens": 283, "duration": 16.571476936340332, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 439, "completion_tokens": 165, "duration": 11.547748327255249, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0, s1):\n    return set(s0) == set(s1)", "prompt_tokens": 526, "completion_tokens": 265, "duration": 10.609779596328735, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 438, "completion_tokens": 338, "duration": 16.445953130722046, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 478, "completion_tokens": 384, "duration": 18.63506841659546, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 473, "completion_tokens": 320, "duration": 12.120254516601562, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 500, "completion_tokens": 270, "duration": 9.331865549087524, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "prompt_tokens": 449, "completion_tokens": 346, "duration": 17.53813934326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 480, "completion_tokens": 227, "duration": 8.431703567504883, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for char in brackets:\n        if char == '(': stack.append(char)\n        elif char == ')':\n            if not stack: return False\n            stack.pop()\n    return not stack", "prompt_tokens": 475, "completion_tokens": 370, "duration": 13.393018960952759, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 494, "completion_tokens": 291, "duration": 10.657749652862549, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        next_number = a + b + c\n        a, b, c = b, c, next_number\n    return c", "prompt_tokens": 535, "completion_tokens": 394, "duration": 14.584484577178955, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou' + ('y' if s.endswith('y') else '')\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 512, "completion_tokens": 335, "duration": 10.184028387069702, "result": "failed: Test 5", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    else:\n        shift = shift % length\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 468, "completion_tokens": 349, "duration": 18.991249799728394, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 498, "completion_tokens": 250, "duration": 14.717582702636719, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, s.split(' apples and '))\n    oranges = oranges.split(' ')[0]\n    return n - int(apples) - int(oranges)", "prompt_tokens": 596, "completion_tokens": 328, "duration": 12.262584924697876, "result": "failed: invalid literal for int() with base 10: '6 oranges'", "passed": false}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 698, "completion_tokens": 409, "duration": 12.784003973007202, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 551, "completion_tokens": 382, "duration": 29.523849487304688, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result", "prompt_tokens": 510, "completion_tokens": 364, "duration": 17.710999488830566, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    from math import sqrt\n    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 507, "completion_tokens": 468, "duration": 21.219735622406006, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 616, "completion_tokens": 334, "duration": 16.398743391036987, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left_index = 0\n    right_index = len(arr) - 1\n    while left_index < right_index:\n        if arr[left_index] != arr[right_index]:\n            changes += 1\n        left_index += 1\n        right_index -= 1\n    return changes", "prompt_tokens": 543, "completion_tokens": 402, "duration": 41.50433564186096, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 579, "completion_tokens": 321, "duration": 17.241182327270508, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a //= prime\n            count += 1\n            if count == 3 and a == 1:\n                return True\n    return False", "prompt_tokens": 465, "completion_tokens": 460, "duration": 25.220011711120605, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    k = math.log(x, n)\n    return k.is_integer()", "prompt_tokens": 528, "completion_tokens": 291, "duration": 9.35215425491333, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 496, "completion_tokens": 238, "duration": 12.875584125518799, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 685, "completion_tokens": 300, "duration": 11.856556415557861, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 525, "completion_tokens": 314, "duration": 9.88365125656128, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 507, "completion_tokens": 363, "duration": 13.126420021057129, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 656, "completion_tokens": 542, "duration": 17.16530442237854, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 467, "completion_tokens": 365, "duration": 19.161399841308594, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        start_with_1 = 10 ** (n - 1)\n        end_with_1 = 10 ** (n - 1)\n        both = 10 ** (n - 2)\n        return start_with_1 + end_with_1 - both", "prompt_tokens": 430, "completion_tokens": 396, "duration": 12.103858470916748, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 519, "completion_tokens": 321, "duration": 14.520166635513306, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(value for index, value in enumerate(lst) if index % 2 == 1 and value % 2 == 0)", "prompt_tokens": 441, "completion_tokens": 306, "duration": 9.666308164596558, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 516, "completion_tokens": 288, "duration": 9.54485559463501, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 645, "completion_tokens": 407, "duration": 13.025057792663574, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 589, "completion_tokens": 413, "duration": 13.176948547363281, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            encrypted += chr((ord(char) - 97 + 4) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 496, "completion_tokens": 340, "duration": 16.37791109085083, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    else:\n        return unique_lst[1]", "prompt_tokens": 510, "completion_tokens": 296, "duration": 13.433533191680908, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]', S)\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))", "prompt_tokens": 493, "completion_tokens": 321, "duration": 15.144621849060059, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and ((x + y == z) or (x + z == y) or (y + z == x))", "prompt_tokens": 521, "completion_tokens": 308, "duration": 10.330993890762329, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message.swapcase():\n        if char in vowels:\n            encoded_message += vowels[char]\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 495, "completion_tokens": 409, "duration": 12.992096662521362, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_largest_prime_digit_sum(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 672, "completion_tokens": 409, "duration": 22.97913646697998, "result": "failed: name 'skjkasdkd' is not defined", "passed": false}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 555, "completion_tokens": 328, "duration": 10.873157024383545, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 531, "completion_tokens": 370, "duration": 18.7278311252594, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 484, "completion_tokens": 255, "duration": 8.538244724273682, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 458, "completion_tokens": 279, "duration": 14.982805252075195, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return math.ceil(num) if num - math.floor(num) >= 0.5 else math.floor(num)\n    else:\n        return math.floor(num) if math.ceil(num) - num >= 0.5 else math.ceil(num)", "prompt_tokens": 542, "completion_tokens": 367, "duration": 11.907698631286621, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        current_stones += 2\n    return pile", "prompt_tokens": 518, "completion_tokens": 358, "duration": 20.89663863182068, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "generated_code": "import re\ndef words_string(s):\n    return re.split(', | ', s)", "prompt_tokens": 502, "completion_tokens": 265, "duration": 14.968705654144287, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 480, "completion_tokens": 272, "duration": 9.176900625228882, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = round(((m-n+1) * (n+m) / 2) / (m-n+1))\n    return bin(average)", "prompt_tokens": 526, "completion_tokens": 399, "duration": 13.48001480102539, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 488, "completion_tokens": 318, "duration": 11.891588926315308, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([num for num in arr if 1 <= num <= 9])\n    filtered_sorted.reverse()\n    return [num_to_name[num] for num in filtered_sorted]", "prompt_tokens": 662, "completion_tokens": 349, "duration": 18.08259892463684, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 510, "completion_tokens": 481, "duration": 21.96673822402954, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 597, "completion_tokens": 444, "duration": 17.742194175720215, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n))) - 2*int(str(n)[0] == '-')*int(str(n)[1]) if n < 0 else sum(int(digit) for digit in str(n))\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 510, "completion_tokens": 388, "duration": 20.57559871673584, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    shift_point = None\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            shift_point = i\n            break\n    if shift_point is None:\n        return True\n    return arr[shift_point+1:] + arr[:shift_point+1] == sorted(arr)", "prompt_tokens": 685, "completion_tokens": 455, "duration": 14.97107982635498, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(x % 2 == 0 for x in lst1 + lst2)\n    return 'YES' if even_count >= len(lst1) else 'NO'", "prompt_tokens": 583, "completion_tokens": 307, "duration": 13.455281734466553, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    letter_count = {}\n    for letter in words:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 537, "completion_tokens": 352, "duration": 11.300264596939087, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 548, "completion_tokens": 325, "duration": 10.93010687828064, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 559, "completion_tokens": 360, "duration": 15.633450984954834, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 474, "completion_tokens": 394, "duration": 20.911176443099976, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 709, "completion_tokens": 326, "duration": 11.096189022064209, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 556, "completion_tokens": 338, "duration": 20.7435564994812, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n\n    def consonant_count(word):\n        return sum(is_consonant(char) for char in word)\n\n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 567, "completion_tokens": 332, "duration": 19.58702278137207, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 535, "completion_tokens": 356, "duration": 18.98964285850525, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = sum(s.count('(') for s in lst)\n    close_count = sum(s.count(')') for s in lst)\n    if open_count == close_count and not (lst[0].endswith('(') and lst[1].startswith(')') or lst[1].endswith('(') and lst[0].startswith(')')):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 554, "completion_tokens": 357, "duration": 11.717031717300415, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 603, "completion_tokens": 246, "duration": 11.992245435714722, "result": "passed", "passed": true}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 483, "completion_tokens": 292, "duration": 17.480668306350708, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(el for el in arr[:k] if 0 < el < 100)", "prompt_tokens": 514, "completion_tokens": 295, "duration": 25.600459814071655, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 617, "completion_tokens": 414, "duration": 17.34458589553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "import re\n\ndef valid_date(date):\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2 and (day < 1 or day > 29):\n        return False\n    return True", "prompt_tokens": 649, "completion_tokens": 467, "duration": 29.392355918884277, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 526, "completion_tokens": 369, "duration": 23.67439889907837, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst or len(lst) == 1:\n        return True\n    seen = set()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1] or lst[i] in seen:\n            return False\n        seen.add(lst[i])\n    if lst[-1] in seen:\n        return False\n    return True", "prompt_tokens": 635, "completion_tokens": 402, "duration": 13.13038444519043, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length > 1 and all(length % i != 0 for i in range(2, int(length**0.5) + 1)):\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'", "prompt_tokens": 640, "completion_tokens": 412, "duration": 13.238825798034668, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs = 0\n            break\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 508, "completion_tokens": 500, "duration": 15.301268815994263, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    min_path = [float('inf')] * k\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            if path < min_path:\n                min_path[:] = path\n            return\n        for dx, dy in [(0,1), (1,0), (0,-1), (-1,0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n    return min_path", "prompt_tokens": 782, "completion_tokens": 456, "duration": 23.844430685043335, "result": "timed out", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    sequence = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    return sequence", "prompt_tokens": 621, "completion_tokens": 518, "duration": 16.154151678085327, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    found_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            found_odd = True\n    return product if found_odd else 0", "prompt_tokens": 457, "completion_tokens": 330, "duration": 10.973569869995117, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    counter = 0\n    for char in string:\n        if char == '[':\n            counter += 1\n        elif char == ']':\n            counter -= 1\n        if counter > 1:\n            return True\n        if counter < 0:  # Early exit if brackets are improperly closed\n            return False\n    return False", "prompt_tokens": 519, "completion_tokens": 349, "duration": 12.962179899215698, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 543, "completion_tokens": 336, "duration": 17.578851222991943, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if len(txt) > 0 and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 523, "completion_tokens": 320, "duration": 16.041178226470947, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 489, "completion_tokens": 361, "duration": 19.075345039367676, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 524, "completion_tokens": 405, "duration": 13.009045600891113, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    a_num = convert_to_float(a)\n    b_num = convert_to_float(b)\n    if a_num > b_num:\n        return a\n    elif b_num > a_num:\n        return b\n    else:\n        return None", "prompt_tokens": 527, "completion_tokens": 372, "duration": 15.785735130310059, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 463, "completion_tokens": 261, "duration": 11.865055799484253, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 481, "completion_tokens": 296, "duration": 9.874988079071045, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "import re\ndef fix_spaces(text):\n    text = re.sub(r' {3,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text", "prompt_tokens": 492, "completion_tokens": 265, "duration": 23.120546340942383, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name_part, extension = file_name.split('.')\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 600, "completion_tokens": 391, "duration": 20.359771251678467, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 555, "completion_tokens": 421, "duration": 23.80538821220398, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 533, "completion_tokens": 374, "duration": 19.555410385131836, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    numerator_x, denominator_x = map(int, x.split('/'))\n    numerator_n, denominator_n = map(int, n.split('/'))\n    product_numerator = numerator_x * numerator_n\n    product_denominator = denominator_x * denominator_n\n    return product_numerator % product_denominator == 0", "prompt_tokens": 541, "completion_tokens": 338, "duration": 16.38846731185913, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 501, "completion_tokens": 353, "duration": 11.574951171875, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 505, "completion_tokens": 335, "duration": 21.529406547546387, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 551, "completion_tokens": 475, "duration": 15.138832330703735, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    try:\n        index1, index2 = sorted([planets.index(planet1), planets.index(planet2)])\n        return tuple(planets[index1 + 1:index2])\n    except ValueError:\n        return ()", "prompt_tokens": 597, "completion_tokens": 394, "duration": 12.846974849700928, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 573, "completion_tokens": 317, "duration": 10.373906373977661, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 472, "completion_tokens": 384, "duration": 12.561085939407349, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and isinstance(x, int) and x % 2 != 0)", "prompt_tokens": 523, "completion_tokens": 335, "duration": 16.884835243225098, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 616, "completion_tokens": 349, "duration": 15.285841703414917, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    highest_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > highest_strength:\n            strongest_extension = extension\n            highest_strength = strength\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 663, "completion_tokens": 409, "duration": 13.563042640686035, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 515, "completion_tokens": 252, "duration": 11.022141456604004, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 451, "completion_tokens": 347, "duration": 19.19428253173828, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    result = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            result += symbol\n            number -= value\n    return result.lower()", "prompt_tokens": 487, "completion_tokens": 392, "duration": 21.705394506454468, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a, b, c = sorted([a, b, c])\n    return c**2 == a**2 + b**2", "prompt_tokens": 494, "completion_tokens": 341, "duration": 17.717514514923096, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_count = 0\n    result_word = ''\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_count or (unique_chars == max_unique_count and word < result_word):\n            max_unique_count = unique_chars\n            result_word = word\n    return result_word", "prompt_tokens": 506, "completion_tokens": 401, "duration": 13.631901502609253, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if need <= remaining:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 663, "completion_tokens": 324, "duration": 13.596056938171387, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = ''\n    for i in range(len(operators)):\n        expression += str(operands[i]) + operators[i]\n    expression += str(operands[-1])\n    return eval(expression)", "prompt_tokens": 593, "completion_tokens": 356, "duration": 11.228242635726929, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]", "prompt_tokens": 493, "completion_tokens": 349, "duration": 10.900428771972656, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        encoded_text = text.encode()\n        hash_object = hashlib.md5(encoded_text)\n        return hash_object.hexdigest()", "prompt_tokens": 462, "completion_tokens": 313, "duration": 9.994045972824097, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 490, "completion_tokens": 333, "duration": 16.023146152496338, "result": "failed: Test 1", "passed": false}
