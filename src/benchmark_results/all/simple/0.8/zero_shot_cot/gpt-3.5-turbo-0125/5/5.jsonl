{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 642, "completion_tokens": 277, "duration": 5.92228102684021}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_paren = 0\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            open_paren += 1\n        elif char == \")\":\n            open_paren -= 1\n            if open_paren == 0:\n                result.append(current_group)\n                current_group = \"\"\n        if open_paren > 0:\n            current_group += char\n\n    return result", "prompt_tokens": 589, "completion_tokens": 288, "duration": 6.490835189819336}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 569, "completion_tokens": 237, "duration": 4.849981784820557}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 558, "completion_tokens": 186, "duration": 5.075868844985962}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(num - mean_val) for num in numbers) / len(numbers)", "prompt_tokens": 1094, "completion_tokens": 515, "duration": 11.113589763641357}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 542, "completion_tokens": 233, "duration": 5.219900131225586}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    levels.append(max_level)\n    return levels", "prompt_tokens": 541, "completion_tokens": 250, "duration": 5.9434332847595215}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 601, "completion_tokens": 271, "duration": 6.297642230987549}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    result_sum = sum(numbers)\n    result_product = 1\n    for num in numbers:\n        result_product *= num\n    return result_sum, result_product", "prompt_tokens": 587, "completion_tokens": 257, "duration": 5.256366491317749}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n\n    return result", "prompt_tokens": 596, "completion_tokens": 276, "duration": 6.540369033813477}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n# Test cases were removed as they are not part of the implementation.", "prompt_tokens": 563, "completion_tokens": 209, "duration": 5.004044532775879}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 494, "completion_tokens": 222, "duration": 4.449896812438965}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 547, "completion_tokens": 200, "duration": 5.206583738327026}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 427, "completion_tokens": 140, "duration": 3.690164804458618}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 403, "completion_tokens": 144, "duration": 3.5668368339538574}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 662, "completion_tokens": 198, "duration": 4.5798499584198}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 436, "completion_tokens": 134, "duration": 3.7575676441192627}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    result = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            return None\n    return result", "prompt_tokens": 746, "completion_tokens": 305, "duration": 6.85473895072937}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 494, "completion_tokens": 198, "duration": 4.351571083068848}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 543, "completion_tokens": 246, "duration": 6.097506523132324}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result", "prompt_tokens": 799, "completion_tokens": 387, "duration": 7.925241708755493}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 661, "completion_tokens": 290, "duration": 5.173966646194458}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 513, "completion_tokens": 186, "duration": 4.605654716491699}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 340, "completion_tokens": 90, "duration": 3.3195557594299316}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors, default=1)", "prompt_tokens": 666, "completion_tokens": 269, "duration": 9.959139108657837}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Test when input is a prime number\nassert factorize(7) == [7]\n\n# Test when input is a perfect square of a prime number\nassert factorize(49) == [7, 7]\n\n# Test when input is a prime number multiplied by another prime number\nassert factorize(15) == [3, 5]\n\n# Test when input is a large number with multiple prime factors\nassert factorize(360) == [2, 2, 2, 3, 3, 5]", "prompt_tokens": 548, "completion_tokens": 303, "duration": 6.753801584243774}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 602, "completion_tokens": 285, "duration": 6.102821111679077}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 414, "completion_tokens": 155, "duration": 3.6806373596191406}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 373, "completion_tokens": 102, "duration": 2.7634990215301514}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 507, "completion_tokens": 175, "duration": 3.723445177078247}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 701, "completion_tokens": 317, "duration": 5.924375057220459}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 514, "completion_tokens": 190, "duration": 5.713361501693726}
{"task_id": "HumanEval/32", "generated_code": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return next(x for x in range(-1000, 1000) if poly(xs, x) == 0)", "prompt_tokens": 989, "completion_tokens": 357, "duration": 36.54471397399902}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    div_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in div_by_three_indices:\n        result[i] = sorted(l[i:i+3])\n    return result", "prompt_tokens": 746, "completion_tokens": 329, "duration": 6.053572416305542}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 614, "completion_tokens": 303, "duration": 7.2510740756988525}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 513, "completion_tokens": 182, "duration": 5.210036754608154}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 477, "completion_tokens": 199, "duration": 4.661695718765259}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[1::2] = sorted(result[1::2])\n    return result", "prompt_tokens": 662, "completion_tokens": 269, "duration": 5.460227727890015}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 696, "completion_tokens": 279, "duration": 5.882160425186157}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num+1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 522, "completion_tokens": 326, "duration": 7.61615252494812}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 660, "completion_tokens": 193, "duration": 4.953424453735352}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 650, "completion_tokens": 175, "duration": 7.384300708770752}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 580, "completion_tokens": 204, "duration": 7.641757249832153}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 649, "completion_tokens": 192, "duration": 4.226763010025024}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    new_num = ''\n    while x > 0:\n        remainder = x % base\n        new_num = str(remainder) + new_num\n        x = x // base\n    return new_num", "prompt_tokens": 558, "completion_tokens": 263, "duration": 8.695538520812988}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 367, "completion_tokens": 114, "duration": 6.959429502487183}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 619, "completion_tokens": 198, "duration": 4.504949569702148}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 585, "completion_tokens": 318, "duration": 5.40861177444458}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 91, "duration": 4.212277412414551}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 5.946277379989624}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])", "prompt_tokens": 1976, "completion_tokens": 963, "duration": 19.53778576850891}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n# Test with an empty string\nassert remove_vowels('') == ''\n\n# Test with a string containing only consonants and newline character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test with a string containing only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test with a string containing uppercase and lowercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test with a string containing only consonants\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 553, "completion_tokens": 275, "duration": 6.7670578956604}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 481, "completion_tokens": 166, "duration": 3.876063108444214}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 6.0026044845581055}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 635, "completion_tokens": 200, "duration": 8.106972455978394}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 346, "completion_tokens": 97, "duration": 2.1879255771636963}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 455, "completion_tokens": 150, "duration": 4.8340229988098145}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 759, "completion_tokens": 267, "duration": 7.677226305007935}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 623, "completion_tokens": 241, "duration": 7.935500621795654}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 366, "completion_tokens": 100, "duration": 2.4274978637695312}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 548, "completion_tokens": 198, "duration": 3.758331775665283}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 564, "completion_tokens": 262, "duration": 5.976998805999756}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]\nassert derivative([5, 0, 0, 0, 0, 0]) == [0, 0, 0, 0]\nassert derivative([4, 3, 2, 1]) == [3, 4, 2]\nassert derivative([0, 0, 0, 0, 10]) == [0, 0, 0, 40]", "prompt_tokens": 2772, "completion_tokens": 1701, "duration": 35.765100955963135}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 618, "completion_tokens": 210, "duration": 7.804468631744385}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s)-1))\n    return count", "prompt_tokens": 562, "completion_tokens": 192, "duration": 3.930372714996338}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 584, "completion_tokens": 286, "duration": 7.87204384803772}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 534, "completion_tokens": 151, "duration": 3.375396251678467}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 759, "completion_tokens": 199, "duration": 4.71301531791687}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_even_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even or (num == smallest_even and i < smallest_even_index)):\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_even_index]\n    return []\n\n# Test empty array\nassert pluck([]) == []\n\n# Test array with no even values\nassert pluck([1, 3, 5]) == []\n\n# Test array with one even value\nassert pluck([8]) == [8, 0]\n\n# Test array with multiple even values, different indices\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test array with multiple even values, same indices\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n# Test array with negative values\nassert pluck([-6, -8, -3, -2]) == [-8, 1]\n\n# Test array with mixed positive and negative values\nassert pluck([7, -4, 6, -3, 9, 0, 2]) == [-4, 1]", "prompt_tokens": 1004, "completion_tokens": 492, "duration": 9.344815015792847}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    max_num = -1\n    max_freq = 0\n    for num in unique_nums:\n        freq = lst.count(num)\n        if num > freq and freq >= max_freq:\n            max_num = num\n            max_freq = freq\n    return max_num", "prompt_tokens": 639, "completion_tokens": 198, "duration": 4.125949144363403}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 613, "completion_tokens": 234, "duration": 4.570678234100342}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 611, "completion_tokens": 276, "duration": 4.674030303955078}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 796, "completion_tokens": 179, "duration": 3.8131914138793945}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 698, "completion_tokens": 255, "duration": 8.67370343208313}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 761, "completion_tokens": 258, "duration": 4.647012710571289}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 454, "completion_tokens": 260, "duration": 8.878831148147583}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(x ** (1/n)))", "prompt_tokens": 1204, "completion_tokens": 528, "duration": 11.084394454956055}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and (-a ** (1/3)).is_integer())", "prompt_tokens": 565, "completion_tokens": 208, "duration": 4.739942789077759}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1051, "completion_tokens": 319, "duration": 6.419587135314941}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 578, "completion_tokens": 144, "duration": 3.276942491531372}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 595, "completion_tokens": 245, "duration": 8.248658418655396}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n\n    return [grade_map[grade] for grade in grades]", "prompt_tokens": 1052, "completion_tokens": 474, "duration": 11.382550716400146}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 442, "completion_tokens": 210, "duration": 4.586390733718872}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10**(n-1)", "prompt_tokens": 495, "completion_tokens": 245, "duration": 5.581615209579468}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N).count('1')", "prompt_tokens": 651, "completion_tokens": 220, "duration": 5.541738748550415}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 503, "completion_tokens": 249, "duration": 8.328269958496094}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 554, "completion_tokens": 150, "duration": 3.9655086994171143}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with list containing empty sublists\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with list containing x in multiple rows and different columns\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with x not in the list\nassert get_row([\n  [1,2,3],\n  [4,5,6]\n], 9) == []", "prompt_tokens": 886, "completion_tokens": 437, "duration": 7.7911458015441895}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    return sorted(arr) if (arr[0] + arr[-1]) % 2 == 1 else sorted(arr, reverse=True)", "prompt_tokens": 861, "completion_tokens": 316, "duration": 6.353728532791138}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) if c.islower() else c for c in s)", "prompt_tokens": 508, "completion_tokens": 152, "duration": 3.683724880218506}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 635, "completion_tokens": 242, "duration": 5.9410178661346436}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('? I') + S.count('! I')", "prompt_tokens": 923, "completion_tokens": 356, "duration": 8.16899585723877}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 593, "completion_tokens": 178, "duration": 4.084816217422485}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 529, "completion_tokens": 209, "duration": 4.6420981884002686}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            num_sum = sum_of_digits(num)\n            if num_sum > max_prime_sum:\n                max_prime_sum = num_sum\n\n    return max_prime_sum", "prompt_tokens": 1067, "completion_tokens": 441, "duration": 8.683593034744263}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False", "prompt_tokens": 663, "completion_tokens": 202, "duration": 4.858548164367676}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 5.010241270065308}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)", "prompt_tokens": 521, "completion_tokens": 166, "duration": 4.2511584758758545}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 469, "completion_tokens": 180, "duration": 4.11570143699646}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "prompt_tokens": 741, "completion_tokens": 291, "duration": 6.009979486465454}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 630, "completion_tokens": 241, "duration": 5.059126853942871}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]\n\n# Test when the string contains words separated by commas\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test when the string contains words separated by spaces\nassert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test when the string contains words separated by both commas and spaces\nassert words_string(\"Apple, banana, cherry pear\") == [\"Apple\", \"banana\", \"cherry\", \"pear\"]\n\n# Test when the string contains only one word\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test when the string is empty\nassert words_string(\"\") == []\n\n# Test when the string contains repeated words\nassert words_string(\"A A B B C C\") == [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"]", "prompt_tokens": 610, "completion_tokens": 408, "duration": 8.778886079788208}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = i\n    return largest_even", "prompt_tokens": 537, "completion_tokens": 216, "duration": 4.340190887451172}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]", "prompt_tokens": 594, "completion_tokens": 181, "duration": 4.014107942581177}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(d) % 2 == 0 for d in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 1087, "completion_tokens": 556, "duration": 10.684906244277954}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 1050, "completion_tokens": 407, "duration": 8.579397439956665}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 549, "completion_tokens": 201, "duration": 6.056454181671143}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)", "prompt_tokens": 848, "completion_tokens": 348, "duration": 6.506149053573608}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 120, "duration": 3.411742687225342}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False", "prompt_tokens": 972, "completion_tokens": 258, "duration": 5.475039005279541}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(i % 2 == 1 for i in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 273, "duration": 6.048616170883179}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values())\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 637, "completion_tokens": 216, "duration": 4.724455833435059}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    result = ''.join([char for char in s if char not in c])\n    return result, result == result[::-1]", "prompt_tokens": 717, "completion_tokens": 247, "duration": 6.328488826751709}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result", "prompt_tokens": 819, "completion_tokens": 372, "duration": 9.309360265731812}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 562, "completion_tokens": 271, "duration": 5.689406394958496}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    def ceil_divide(a, b):\n        return -(-a // b)\n\n    total_water = sum(row.count(1) for row in grid)\n    return ceil_divide(total_water, capacity)", "prompt_tokens": 1912, "completion_tokens": 721, "duration": 12.96241283416748}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 789, "completion_tokens": 294, "duration": 6.768694877624512}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 714, "completion_tokens": 251, "duration": 5.360288858413696}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]\n    for char in word[1:]:\n        if char in vowels:\n            return char\n    return \"\"", "prompt_tokens": 603, "completion_tokens": 169, "duration": 4.134366750717163}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    \n    if stack:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 679, "completion_tokens": 228, "duration": 5.820093870162964}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 824, "completion_tokens": 225, "duration": 4.706937313079834}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 539, "completion_tokens": 201, "duration": 5.525104999542236}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) <= 99)", "prompt_tokens": 651, "completion_tokens": 245, "duration": 6.2111475467681885}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)\n\n# Test when n is 1\nassert get_odd_collatz(1) == [1]\n\n# Test when n is 5\nassert get_odd_collatz(5) == [1, 5]\n\n# Test when n is 10\nassert get_odd_collatz(10) == [1, 5]\n\n# Test when n is 20\nassert get_odd_collatz(20) == [1, 5]", "prompt_tokens": 896, "completion_tokens": 407, "duration": 54.31322932243347}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 900, "completion_tokens": 391, "duration": 8.484504222869873}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 691, "completion_tokens": 288, "duration": 8.098714351654053}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 967, "completion_tokens": 336, "duration": 7.24247145652771}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    length = intersection_end - intersection_start + 1\n\n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\"", "prompt_tokens": 876, "completion_tokens": 317, "duration": 6.243659496307373}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude_sum = sum(abs(num) for num in arr)\n    for num in arr:\n        sign *= 1 if num > 0 else -1 if num < 0 else 0\n\n    return magnitude_sum * sign", "prompt_tokens": 545, "completion_tokens": 190, "duration": 7.650439500808716}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                res = dfs(ni, nj, visited.copy(), path + [grid[ni][nj]])  # Change visited to a copy of itself\n                if res:\n                    return res\n                visited.remove((ni, nj))\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = set()\n            visited.add((i, j))\n            res = dfs(i, j, visited, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 3117, "completion_tokens": 1377, "duration": 26.889073371887207}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n\n    tribonacci = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    \n    return tribonacci", "prompt_tokens": 1409, "completion_tokens": 573, "duration": 13.174519062042236}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 395, "completion_tokens": 116, "duration": 6.430621862411499}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    if '[]' in string:\n        return True\n    return False", "prompt_tokens": 572, "completion_tokens": 148, "duration": 3.265942335128784}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum([(int(x) + (x % 1 > 0)) ** 2 for x in lst])\n    return total", "prompt_tokens": 848, "completion_tokens": 390, "duration": 12.71014142036438}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) < 2 or txt.strip()[-2] == ' ')", "prompt_tokens": 964, "completion_tokens": 317, "duration": 6.475586175918579}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 555, "completion_tokens": 217, "duration": 4.827985763549805}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    max_neg = max(neg_ints) if neg_ints else None\n    min_pos = min(pos_ints) if pos_ints else None\n\n    return (max_neg, min_pos)", "prompt_tokens": 678, "completion_tokens": 303, "duration": 7.38792872428894}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    return max(a, b)", "prompt_tokens": 707, "completion_tokens": 325, "duration": 9.514719486236572}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 460, "completion_tokens": 142, "duration": 4.983148813247681}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 563, "completion_tokens": 237, "duration": 6.6825010776519775}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 495, "completion_tokens": 131, "duration": 6.954465627670288}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or len([c for c in name if c.isdigit()]) > 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 761, "completion_tokens": 237, "duration": 8.654622077941895}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total", "prompt_tokens": 785, "completion_tokens": 327, "duration": 7.322965383529663}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 607, "completion_tokens": 238, "duration": 8.805569410324097}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 580, "completion_tokens": 150, "duration": 3.4270427227020264}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 588, "completion_tokens": 224, "duration": 7.726609230041504}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def odd_digits(n):\n        return n % 10 % 2 != 0 and int(str(n)[0]) % 2 != 0\n\n    return len([x for x in nums if x > 10 and odd_digits(x)])", "prompt_tokens": 551, "completion_tokens": 190, "duration": 5.586573839187622}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 781, "completion_tokens": 369, "duration": 8.239619731903076}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])", "prompt_tokens": 864, "completion_tokens": 391, "duration": 9.329228639602661}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1176, "completion_tokens": 384, "duration": 11.241864442825317}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 527, "completion_tokens": 250, "duration": 5.932176351547241}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n\n# Test when input list contains positive odd integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test when input list contains only negative integers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test when input list contains positive odd integer and negative integer\nassert double_the_difference([9, -2]) == 81\n\n# Test when input list contains only zero\nassert double_the_difference([0]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 584, "completion_tokens": 282, "duration": 7.858725309371948}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 828, "completion_tokens": 225, "duration": 6.308336973190308}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1547, "completion_tokens": 488, "duration": 13.523413181304932}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n    \n    return any(is_rotation(a, b[i:] + b[:i]) for i in range(len(b)))", "prompt_tokens": 622, "completion_tokens": 244, "duration": 8.072430610656738}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 446, "completion_tokens": 205, "duration": 7.927397012710571}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 512, "completion_tokens": 267, "duration": 8.165772676467896}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 552, "completion_tokens": 180, "duration": 7.010807514190674}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_count = unique_chars(word)\n        if unique_count > max_unique_chars or (unique_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_count\n\n    return max_word", "prompt_tokens": 565, "completion_tokens": 231, "duration": 4.76192045211792}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = min(number + remaining, need)\n    remaining_after_meals = max(0, remaining - (need - number))\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 919, "completion_tokens": 236, "duration": 8.531790494918823}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 834, "completion_tokens": 353, "duration": 10.877430200576782}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 527, "completion_tokens": 194, "duration": 3.9427998065948486}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 484, "completion_tokens": 180, "duration": 3.790236234664917}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 701, "completion_tokens": 344, "duration": 10.193459749221802}
