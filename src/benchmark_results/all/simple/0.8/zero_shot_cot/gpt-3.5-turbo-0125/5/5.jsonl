{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the sorted list\n    for i in range(len(numbers) - 1):\n        # Check if the difference between two adjacent numbers is less than the threshold\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 93, "duration": 2.4099693298339844}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove any spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    # Initialize an empty list to store the separated groups\n    groups = []\n    \n    # Initialize a counter to keep track of open parentheses\n    open_count = 0\n    \n    # Initialize a variable to store the current group\n    current_group = ''\n    \n    # Iterate through each character in the input string\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                groups.append(current_group)\n                current_group = ''\n    \n    return groups", "prompt_tokens": 154, "completion_tokens": 172, "duration": 3.8488881587982178}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Get the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part\n    decimal_part = number - integer_part\n    \n    # Return the decimal part\n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 60, "duration": 2.0501155853271484}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize a variable to keep track of the current balance\n    balance = 0\n    \n    # Iterate through each operation in the list\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if the balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 91, "duration": 2.3362014293670654}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences between each number and the mean\n    abs_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs_diff) / len(abs_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 92, "duration": 2.2482168674468994}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Initialize an empty list to store the final result\n    result = []\n    \n    # Iterate over the input list of numbers\n    for num in numbers:\n        # Append the current number to the result list\n        result.append(num)\n        # Append the delimiter to the result list if it's not the last element\n        if num != numbers[-1]:\n            result.append(delimeter)\n    \n    # Return the final result\n    return result", "prompt_tokens": 131, "completion_tokens": 113, "duration": 2.882415533065796}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the deepest level of nesting for each group\n    result = []\n    \n    # Iterate over each group in the list of groups\n    for group in groups:\n        # Initialize variables to keep track of nesting level and maximum nesting level\n        nesting_level = 0\n        max_nesting_level = 0\n        \n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                nesting_level += 1\n                max_nesting_level = max(max_nesting_level, nesting_level)\n            elif char == ')':\n                nesting_level -= 1\n        \n        # Append the maximum nesting level for the current group to the result list\n        result.append(max_nesting_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 197, "duration": 3.6518166065216064}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store the filtered strings\n    filtered_strings = []\n    \n    # Loop through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If present, append the string to the filtered list\n            filtered_strings.append(string)\n    \n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 101, "duration": 2.161541223526001}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Calculate the sum of the numbers\n    sum_result = sum(numbers) if numbers else 0\n    \n    # Calculate the product of the numbers\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return sum_result, product_result", "prompt_tokens": 149, "completion_tokens": 78, "duration": 2.0354580879211426}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_values = []\n    \n    # Iterate through the input list\n    for i in range(len(numbers)):\n        # Find the maximum value from the current element and all previous elements\n        current_max = max(numbers[:i+1])\n        # Append the maximum value to the rolling max list\n        rolling_max_values.append(current_max)\n    \n    # Return the list of rolling maximum values\n    return rolling_max_values", "prompt_tokens": 139, "completion_tokens": 115, "duration": 2.290163516998291}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string \"\"\"\n    \n    # Check if the given string is already a palindrome\n    if string == string[::-1]:\n        return string\n    \n    # Find the longest postfix of the supplied string that is a palindrome\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            break\n    \n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    return string + string[:len(string)-i][::-1]", "prompt_tokens": 182, "completion_tokens": 137, "duration": 2.7353196144104004}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation\n    result = int_a ^ int_b\n    \n    # Convert result back to binary string\n    return bin(result)[2:]", "prompt_tokens": 115, "completion_tokens": 78, "duration": 2.0244503021240234}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the input list is empty\n        return None\n    \n    longest_str = max(strings, key=len)  # Find the longest string in the list\n    return longest_str if strings.count(longest_str) == 1 else strings[0]  # Return the longest one, or the first if there are multiple of the same length.", "prompt_tokens": 141, "completion_tokens": 95, "duration": 2.330327033996582}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Implement Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 110, "completion_tokens": 47, "duration": 1.4206204414367676}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate over the length of the string\n    for i in range(1, len(string)+1):\n        # Append the substring from index 0 to i to the prefixes list\n        prefixes.append(string[:i])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 77, "duration": 1.9027581214904785}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n\n    numbers = list(range(n + 1))\n    \n    # Convert the list of numbers to a list of strings\n    numbers_str = list(map(str, numbers))\n    \n    # Join the list of strings with a space delimiter\n    result = ' '.join(numbers_str)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 88, "duration": 2.1132562160491943}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert all characters to lowercase\n    string = string.lower()\n    \n    # Use set to get distinct characters\n    distinct_characters = set(string)\n    \n    # Count the number of distinct characters\n    count = len(distinct_characters)\n    \n    return count", "prompt_tokens": 110, "completion_tokens": 70, "duration": 1.9507710933685303}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Replace the special characters with corresponding integers\n    music_string = music_string.replace('o', '4').replace('o|', '2').replace('.|', '1')\n    \n    # Split the string by space and convert the elements to integers\n    music_list = [int(note) for note in music_string.split()]\n    \n    return music_list", "prompt_tokens": 211, "completion_tokens": 86, "duration": 2.0864601135253906}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # If the substring is empty, return 0\n    if substring == '':\n        return 0\n    \n    count = 0\n    # Iterate over the original string with a sliding window of the length of the substring\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring matches the current window\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count", "prompt_tokens": 128, "completion_tokens": 115, "duration": 2.2462141513824463}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map numberals to integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of numberals\n    num_list = numbers.split()\n    \n    # Sort the list of numberals based on the integer values\n    num_list.sort(key=lambda x: num_dict[x])\n    \n    # Return the sorted list of numberals as a string\n    return ' '.join(num_list)", "prompt_tokens": 144, "completion_tokens": 160, "duration": 2.8590176105499268}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair and their absolute difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[0] - sorted_numbers[1])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i] - sorted_numbers[i+1])\n        if diff < min_diff:\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n            min_diff = diff\n    \n    return closest_pair", "prompt_tokens": 205, "completion_tokens": 159, "duration": 3.3378279209136963}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of values\n    range_val = max_val - min_val\n    \n    # Apply linear transformation to rescale the numbers\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 100, "duration": 2.766493558883667}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate through each value in the input list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # Append the integer value to the 'integers' list\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 100, "duration": 2.243802070617676}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the input string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.2517411708831787}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking for divisors from n-1 and move downwards\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 69, "duration": 1.8073725700378418}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 65, "duration": 1.855452537536621}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import the Counter class from the collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function signature\n    counts = Counter(numbers)  # Count occurrences of each number in the list\n    result = [num for num in numbers if counts[num] == 1]  # Keep only the numbers that occur once\n    return result  # Return the list without duplicates\n\n# Test the function with the given example\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]", "prompt_tokens": 123, "completion_tokens": 129, "duration": 2.464561939239502}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Use a list comprehension to flip the case of each character in the string\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 88, "completion_tokens": 53, "duration": 1.5637426376342773}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    # Join all strings in the list using empty string as separator\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 34, "duration": 1.366187572479248}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to store strings that start with the given prefix\n    result = []\n    \n    # Iterate through each string in the input list\n    for s in strings:\n        # Check if the string starts with the given prefix\n        if s.startswith(prefix):\n            # If it does, add the string to the result list\n            result.append(s)\n    \n    # Return the list of strings that start with the given prefix\n    return result", "prompt_tokens": 126, "completion_tokens": 110, "duration": 2.371159315109253}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Create an empty list to store positive numbers\n    pos_nums = []\n    \n    # Iterate through the input list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the new list\n            pos_nums.append(num)\n    \n    # Return the list of positive numbers\n    return pos_nums", "prompt_tokens": 153, "completion_tokens": 90, "duration": 2.174819231033325}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    \n    return True", "prompt_tokens": 139, "completion_tokens": 107, "duration": 2.359375476837158}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    # Check if xs has an even number of coefficients\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Find the non-zero coefficient with the largest absolute value\n    max_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    # Find the index of the coefficient with the largest absolute value\n    max_index = [abs(coeff) for coeff in xs].index(max_coeff)\n    \n    # Calculate the zero point\n    zero_point = -xs[max_index] / xs[max_index + 1]\n    \n    return zero_point", "prompt_tokens": 298, "completion_tokens": 147, "duration": 2.7709920406341553}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Separate the elements into two lists based on their index being divisible by 3 or not\n    non_divisible = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible = [sorted(l[i:i+3]) for i in range(0, len(l), 3)]\n    \n    # Merge the two lists while keeping the original order of the elements\n    result = [divisible.pop(0) if j % 3 == 0 else non_divisible.pop(0) for j in range(len(l))]\n    \n    return result", "prompt_tokens": 190, "completion_tokens": 134, "duration": 2.384807586669922}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Step 1: Convert the list to a set to remove duplicates\n    unique_set = set(l)\n    \n    # Step 2: Sort the unique set\n    sorted_unique_list = sorted(unique_set)\n    \n    return sorted_unique_list", "prompt_tokens": 113, "completion_tokens": 61, "duration": 1.6388754844665527}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 1.3127188682556152}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # Initialize a counter to keep track of the number of times 7 appears\n    count = 0\n    \n    # Iterate through integers less than n\n    for i in range(n):\n        # Check if the integer is divisible by 11 or 13 and contains the digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # Increment the counter if conditions are met\n            count += 1\n    \n    # Return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 126, "duration": 2.4661567211151123}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Filter the even-indexed elements of the list\n    even_values = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    \n    # Initialize a new list to store the result\n    result = []\n    \n    # Iterate over the original list and construct the result list\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result.append(even_values.pop(0))\n        else:\n            result.append(x)\n    \n    return result", "prompt_tokens": 163, "completion_tokens": 119, "duration": 2.322380781173706}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 113, "duration": 3.9221127033233643}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    fib_num = 1\n    while count < n:\n        fib_num += 1\n        if is_prime(fibonacci(fib_num)):\n            count += 1\n\n    return fibonacci(fib_num)", "prompt_tokens": 137, "completion_tokens": 160, "duration": 3.2534775733947754}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the input list\n    l.sort()\n    \n    # Iterate through the list\n    for i in range(len(l) - 2):\n        # Set left and right pointers\n        left = i + 1\n        right = len(l) - 1\n        \n        # Check for triplets\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False", "prompt_tokens": 199, "completion_tokens": 134, "duration": 4.126480579376221}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions by multiplying n with (n-1) and then dividing by 2\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 49, "duration": 4.3160459995269775}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # create an empty list to store the incremented values\n    result = []\n    \n    # iterate through each element in the input list\n    for num in l:\n        # increment the element by 1 and add to the result list\n        result.append(num + 1)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 73, "duration": 3.499396562576294}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 197, "completion_tokens": 53, "duration": 3.176429510116577}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Convert the number x to the desired base\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 131, "completion_tokens": 59, "duration": 4.096923351287842}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate the area of the triangle\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 86, "completion_tokens": 36, "duration": 0.9588711261749268}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(3, n+1):\n        d = a + b + c + d\n        a, b, c = b, c, d\n    \n    return d", "prompt_tokens": 211, "completion_tokens": 108, "duration": 2.3231167793273926}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Step 1: Sort the list\n    l.sort()\n    \n    # Step 2: Check if the length of the list is odd\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    # Step 3: If the length of the list is even, calculate the average of the two middle elements\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2", "prompt_tokens": 115, "completion_tokens": 112, "duration": 4.2608962059021}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove spaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Compare the text with its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 50, "duration": 3.192765235900879}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Use the pow function with 2 as base, n as exponent, and p as modulus\n    return pow(2, n, p)", "prompt_tokens": 145, "completion_tokens": 46, "duration": 3.00156831741333}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Create a list comprehension to iterate over each character in the input string\n    # For each character, decode by shifting it back by 5 in the alphabet\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 77, "duration": 3.5227792263031006}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is a vowel (either lowercase or uppercase)\n        if char.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            # If the character is not a vowel, add it to the result string\n            result += char\n    \n    # Return the result string without vowels\n    return result", "prompt_tokens": 162, "completion_tokens": 116, "duration": 4.136016607284546}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each number in the list\n    for num in l:\n        # Check if the number is above or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 59, "duration": 5.0433080196380615}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 3.742340564727783}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Sort characters in both strings\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    \n    # Check if sorted strings are equal\n    return sorted_s0 == sorted_s1", "prompt_tokens": 180, "completion_tokens": 63, "duration": 3.722572088241577}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 92, "completion_tokens": 50, "duration": 3.0924649238586426}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a variable to keep track of the number of opening brackets\n    open_brackets = 0\n    \n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the open_brackets count\n        if bracket == \"<\":\n            open_brackets += 1\n        # If the character is a closing bracket and there are no opening brackets left, return False\n        elif bracket == \">\" and open_brackets == 0:\n            return False\n        # If the character is a closing bracket, decrement the open_brackets count\n        elif bracket == \">\":\n            open_brackets -= 1\n    \n    # If there are no opening brackets left at the end, return True\n    return open_brackets == 0", "prompt_tokens": 132, "completion_tokens": 181, "duration": 5.025089979171753}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if list is monotonically increasing\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # Check if list is monotonically decreasing\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 96, "duration": 1.9066541194915771}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1).intersection(set(l2))\n    \n    # Sort the common elements and return as a list\n    return sorted(list(common_elements))", "prompt_tokens": 154, "completion_tokens": 60, "duration": 1.3164174556732178}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to find factors of a number\n    def factors(num):\n        factors_list = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors_list.append(i)\n                factors_list.append(num // i)\n        return factors_list\n\n    # Find factors of the number\n    factor_list = factors(n)\n    \n    # Filter out prime factors\n    prime_factors = [factor for factor in factor_list if is_prime(factor)]\n    \n    # Return the largest prime factor\n    return max(prime_factors)\n\n# Test cases\nprint(largest_prime_factor(13195))  # 29\nprint(largest_prime_factor(2048))   # 2", "prompt_tokens": 103, "completion_tokens": 232, "duration": 5.741552114486694}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Initialize the sum to 0\n    total = 0\n    # Iterate from 1 to n+1 and add each number to the total\n    for i in range(1, n+1):\n        total += i\n    return total", "prompt_tokens": 134, "completion_tokens": 66, "duration": 1.5462474822998047}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a variable to keep track of the balance of brackets\n    balance = 0\n    \n    # Iterate through each character in the brackets string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the balance\n        if bracket == '(':\n            balance += 1\n        # If the character is a closing bracket, decrement the balance\n        elif bracket == ')':\n            balance -= 1\n        # If the balance becomes negative at any point, return False\n        if balance < 0:\n            return False\n    \n    # If the balance is zero at the end, return True, otherwise return False\n    return balance == 0", "prompt_tokens": 129, "completion_tokens": 156, "duration": 3.194444179534912}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the derivative coefficients\n    result = []\n    \n    # Iterate over the list of coefficients starting from the second element\n    for i in range(1, len(xs)):\n        # Calculate the derivative of the polynomial term and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 83, "duration": 3.5234193801879883}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 189, "completion_tokens": 72, "duration": 3.570437431335449}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to keep track of vowel count\n    count = 0\n    \n    # Convert the input string to lowercase\n    s = s.lower()\n    \n    # Check each character in the string\n    for char in s:\n        # Increment count if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n            \n    # Check if 'y' is a vowel at the end of the word\n    if s.endswith('y'):\n        count += 1\n\n    return count", "prompt_tokens": 166, "completion_tokens": 128, "duration": 4.163515090942383}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x: int, shift: int) -> str:\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift needed (in case shift is larger than the number of digits)\n    actual_shift = shift % len(x_str)\n    \n    # Perform circular shift\n    shifted_str = x_str[-actual_shift:] + x_str[:-actual_shift]\n    \n    # Return the result as a string\n    return shifted_str", "prompt_tokens": 122, "completion_tokens": 104, "duration": 1.8413491249084473}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    # Initialize a variable to store the sum of ASCII codes\n    total_sum = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII code of the uppercase letter to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum of ASCII codes\n    return total_sum", "prompt_tokens": 152, "completion_tokens": 101, "duration": 3.6324942111968994}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s: str, n: int) -> int:\n    # split the string to get the numbers of apples and oranges\n    nums = [int(num) for num in s.split() if num.isdigit()]\n    \n    # subtract the numbers of apples and oranges from the total number of fruits\n    mangoes = n - sum(nums)\n    \n    return mangoes", "prompt_tokens": 250, "completion_tokens": 81, "duration": 1.7220020294189453}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Filter even values\n    even_values = [num for num in arr if num % 2 == 0]\n\n    # If there are no even values or the array is empty, return []\n    if len(even_values) == 0:\n        return []\n\n    # Find the smallest even value and its index\n    smallest_value = min(even_values)\n    smallest_index = arr.index(smallest_value)\n\n    return [smallest_value, smallest_index]", "prompt_tokens": 352, "completion_tokens": 104, "duration": 3.5895626544952393}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that satisfies the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 127, "duration": 4.22840690612793}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize an empty result list\n    result = []\n    \n    # Iterate through the sorted list\n    while lst:\n        # Append the minimum value to the result list\n        result.append(lst.pop(0))\n        \n        # If there are still elements in the list, append the maximum value\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 100, "duration": 3.835075616836548}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides cannot form a valid triangle\n        return -1", "prompt_tokens": 161, "completion_tokens": 150, "duration": 4.328077793121338}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum weight\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 67, "duration": 3.258045196533203}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to store the number of changes needed\n    changes = 0\n    \n    # Iterate over half of the array length\n    for i in range(len(arr) // 2):\n        # Check if the elements at the corresponding positions are different\n        if arr[i] != arr[-i-1]:\n            # Increment the changes needed by 1\n            changes += 1\n    \n    # Return the total changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 103, "duration": 4.047698259353638}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    # Compare total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 94, "duration": 4.805935382843018}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Create a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Find the first prime factor\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            # Find the second prime factor\n            for j in range(i + 1, a):\n                if a % (i * j) == 0 and is_prime(j):\n                    # Find the third prime factor\n                    k = a // (i * j)\n                    if is_prime(k):\n                        return True\n    return False", "prompt_tokens": 119, "completion_tokens": 177, "duration": 5.789524793624878}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x equals 1\n    if x == 1:\n        return True\n    # Check if n equals 1\n    if n == 1:\n        return False\n    # Find the integer power of n to get x\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x", "prompt_tokens": 182, "completion_tokens": 92, "duration": 1.7785217761993408}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of the absolute value of a is an integer\n    return (abs(a)**(1/3)).is_integer()", "prompt_tokens": 150, "completion_tokens": 40, "duration": 1.0131709575653076}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Create a list of all prime hexadecimal digits\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    \n    # Initialize a count variable to keep track of prime digits found\n    count = 0\n    \n    # Loop through each character in the hexadecimal number\n    for digit in num:\n        # Check if the character is a prime hexadecimal digit\n        if digit in primes:\n            count += 1\n    \n    return count", "prompt_tokens": 339, "completion_tokens": 107, "duration": 1.9802536964416504}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary format using bin() function\n    binary = bin(decimal)\n    \n    # Remove the '0b' prefix from the binary representation\n    binary = binary[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    binary = 'db' + binary + 'db'\n    \n    return binary", "prompt_tokens": 179, "completion_tokens": 86, "duration": 3.5341637134552}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3, return False\n    if len(s) < 3:\n        return False\n    \n    # Check if any 3 consecutive letters are the same, return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If all conditions are met, return True\n    return True", "prompt_tokens": 161, "completion_tokens": 121, "duration": 4.924093246459961}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create a dictionary to map GPAs to letter grades\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C',\n                 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', -1: 'E'}\n    \n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate through each GPA in the input list\n    for gpa in grades:\n        # Find the corresponding letter grade from the dictionary and append to the result list\n        for key in grade_map:\n            if gpa >= key:\n                letter_grades.append(grade_map[key])\n                break\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 219, "duration": 5.140093564987183}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    # Check if the length of the string is less than 2, return False\n    if len(string) < 2:\n        return False\n    \n    # Check if the length of the string is a prime number\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 121, "completion_tokens": 93, "duration": 3.6383328437805176}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 84, "completion_tokens": 64, "duration": 3.3227381706237793}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to a binary string\n    binary_str = bin(N)[2:]\n    \n    # Convert the binary string to a list of individual digits\n    binary_digits = [int(digit) for digit in binary_str]\n    \n    # Calculate the sum of the binary digits\n    total_sum = sum(binary_digits)\n    \n    # Return the total sum as a binary string\n    return bin(total_sum)[2:]", "prompt_tokens": 173, "completion_tokens": 96, "duration": 3.6360514163970947}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter even elements at odd indices\n    filtered_lst = [lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0]\n    \n    # Sum the filtered elements\n    result = sum(filtered_lst)\n    \n    return result", "prompt_tokens": 95, "completion_tokens": 69, "duration": 3.400667667388916}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize a list to store the ordered words\n    ordered_words = []\n    \n    # Iterate through each word in the list of words\n    for word in words:\n        # Sort the characters in the word based on ascii value\n        ordered_word = ''.join(sorted(word))\n        # Add the ordered word to the list of ordered words\n        ordered_words.append(ordered_word)\n    \n    # Join the ordered words with spaces to form the final output\n    return ' '.join(ordered_words)", "prompt_tokens": 170, "completion_tokens": 127, "duration": 2.745162010192871}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over each row in the list\n    for i in range(len(lst)):\n        # Check if x is in the current row\n        if x in lst[i]:\n            # Get the index of x in the current row\n            column_index = lst[i].index(x)\n            # Append the coordinates (row index, column index) to the list\n            coordinates.append((i, column_index))\n    \n    # Sort the coordinates by rows in ascending order\n    coordinates.sort(key=lambda tup: tup[0])\n    # Sort the coordinates of the row by columns in descending order\n    coordinates.sort(key=lambda tup: tup[1], reverse=True)\n    \n    return coordinates", "prompt_tokens": 299, "completion_tokens": 166, "duration": 3.0135252475738525}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy() # Make a copy of the given array\n    if (array[0] + array[-1]) % 2 == 0: # Check if the sum of first and last elements is even\n        sorted_array.sort(reverse=True) # Sort the array in descending order\n    else:\n        sorted_array.sort() # Sort the array in ascending order\n    return sorted_array # Return the sorted array", "prompt_tokens": 243, "completion_tokens": 98, "duration": 2.0530612468719482}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty string to store the encrypted result\n    result = ''\n    \n    # Define the shift value\n    shift = 2 * 2\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            idx = alphabet.index(char)\n            # Calculate the new index after shifting\n            new_idx = (idx + shift) % 26\n            # Append the encrypted character to the result\n            result += alphabet[new_idx]\n        else:\n            # If the character is not a letter, append it as it is\n            result += char\n    \n    return result", "prompt_tokens": 150, "completion_tokens": 173, "duration": 4.33825945854187}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # If the length of the sorted list is less than 2, return None\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second element of the sorted list\n    return sorted_lst[1]", "prompt_tokens": 164, "completion_tokens": 73, "duration": 1.9492435455322266}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the input string into sentences based on '.', '?' or '!'\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count", "prompt_tokens": 147, "completion_tokens": 104, "duration": 2.6369681358337402}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in (x, y, z)):\n        # Check if x is equal to the sum of y and z, or y is equal to the sum of x and z, or z is equal to the sum of x and y\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 111, "duration": 2.2630534172058105}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Define the vowels\n    vowels = 'aeiou'\n    \n    # Encode the message\n    encoded_message = ''\n    for char in message:\n        # If character is a letter\n        if char.isalpha():\n            # Swap case\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n            \n            # If character is a vowel, replace it with the letter 2 places ahead\n            if char in vowels:\n                index = alphabet.index(char)\n                new_char = alphabet[(index + 2) % 26]\n                # Preserve the original case\n                if char.isupper():\n                    new_char = new_char.upper()\n                encoded_message += new_char\n            else:\n                encoded_message += char\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 189, "duration": 3.0785768032073975}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum_of_digits(largest_prime)", "prompt_tokens": 326, "completion_tokens": 106, "duration": 2.919377326965332}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))  # Check if all keys are lowercase strings\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))  # Check if all keys are uppercase strings\n    \n    return lowercase_keys or uppercase_keys  # Return True if all keys are either lowercase or uppercase strings\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))", "prompt_tokens": 209, "completion_tokens": 202, "duration": 3.154639482498169}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # Create a helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Initialize an empty list to store prime numbers\n    primes = []\n    \n    # Loop through numbers from 2 to n and check if they are prime\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 136, "duration": 2.864940881729126}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Get the unit digit of each number\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_a * unit_b", "prompt_tokens": 138, "completion_tokens": 67, "duration": 3.515266180038452}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a count variable to keep track of uppercase vowels in even indices\n    count = 0\n    \n    # Create a dictionary to store uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate over the characters in the string at even indices\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 117, "duration": 3.103851079940796}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)  # Convert the input value to a floating point number\n    if num < 0:\n        return int(num - 0.5)  # Round towards negative infinity\n    else:\n        return int(num + 0.5)  # Round towards positive infinity", "prompt_tokens": 196, "completion_tokens": 71, "duration": 1.6882579326629639}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    # Initialize an empty list to store the number of stones in each level\n    pile = []\n\n    # Set the initial number of stones to n\n    stones = n\n\n    # Loop through each level to calculate the number of stones\n    for i in range(n):\n        # Append the current number of stones to the pile list\n        pile.append(stones)\n        \n        # Update the number of stones based on whether n is odd or even\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n\n    return pile", "prompt_tokens": 172, "completion_tokens": 132, "duration": 4.581387996673584}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string into words based on commas and spaces\n    words = s.replace(\",\", \" \").split()\n    \n    # Return the list of words\n    return words", "prompt_tokens": 156, "completion_tokens": 45, "duration": 1.5178840160369873}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y down to x\n    for i in range(y, x - 1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 134, "completion_tokens": 70, "duration": 2.175018310546875}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n: int, m: int) -> str:\n    if n > m:\n        return -1\n    \n    average = (n + m) / 2\n    rounded_avg = round(average)\n    binary_avg = bin(rounded_avg)\n    \n    return binary_avg", "prompt_tokens": 180, "completion_tokens": 64, "duration": 1.7278106212615967}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    # Create a function to check if a number contains any even digit\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    # Filter out numbers with even digits\n    result = [num for num in x if not has_even_digit(num)]\n    \n    # Sort the result in increasing order\n    result.sort()\n    \n    return result", "prompt_tokens": 142, "completion_tokens": 98, "duration": 2.0438666343688965}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Sort the integers that are between 1 and 9 inclusive\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    \n    # Reverse the resulting array\n    arr = arr[::-1]\n    \n    # Replace each digit by its corresponding name\n    result = []\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 204, "duration": 3.508976697921753}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is even\n        if i % 2 == 0:\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i + 1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 139, "duration": 3.052340507507324}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Define a function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    # Initialize counts for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through numbers from 1 to n (inclusive)\n    for num in range(1, n + 1):\n        # Check if the number is a palindrome\n        if is_palindrome(num):\n            # Increment the corresponding count based on whether the palindrome is even or odd\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple with the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 184, "duration": 3.317579746246338}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    # Initialize a variable to count the numbers with sum of digits > 0\n    count = 0\n    \n    # Loop through each number in the array\n    for num in arr:\n        # Convert the number to its absolute value\n        num = abs(num)\n        \n        # Calculate the sum of digits\n        sum_digits = sum(int(digit) for digit in str(num))\n        \n        # Check if the sum of digits is greater than 0\n        if sum_digits > 0:\n            count += 1\n            \n    return count", "prompt_tokens": 164, "completion_tokens": 121, "duration": 2.3484556674957275}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # if the array is empty, return True\n    if not arr:\n        return True\n    \n    # find the index of the smallest element in the array\n    min_idx = arr.index(min(arr))\n    \n    # check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n    \n    # check if it is possible to obtain the sorted array by performing right shift operations\n    return sorted(arr) == arr[min_idx:] + arr[:min_idx]", "prompt_tokens": 339, "completion_tokens": 113, "duration": 2.647228240966797}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of odd elements in lst1\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of odd elements in lst2\n    odd_count2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # Return \"YES\" if the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2\n    return \"YES\" if odd_count <= odd_count2 else \"NO\"", "prompt_tokens": 237, "completion_tokens": 127, "duration": 2.611626148223877}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of words\n    words = test.split()\n    \n    # Create an empty dictionary to store the count of each letter\n    counts = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Iterate through each letter in the word\n        for letter in word:\n            # Update the count of the letter in the dictionary\n            counts[letter] = counts.get(letter, 0) + 1\n    \n    # Find the maximum count\n    max_count = max(counts.values())\n    \n    # Create a new dictionary containing only the letters with the maximum count\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 165, "duration": 6.3710267543792725}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str):\n    # Remove characters in s that are equal to any character in c\n    result = \"\".join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 73, "duration": 1.9315118789672852}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []  # Create an empty list to store the results\n    for num_str in lst:  # Loop through each string in the input list\n        odd_count = sum(1 for num in num_str if int(num) % 2 != 0)  # Count the number of odd digits in the string\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {num_str} of the {odd_count}nput.\")  # Append the formatted result to the output list\n    return result  # Return the final list of results", "prompt_tokens": 213, "completion_tokens": 135, "duration": 2.7609965801239014}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to store current sum and minimum sum\n    current_sum = 0\n    min_sum = float('inf')\n    \n    # Iterate through the array\n    for num in nums:\n        # Update current sum to be the maximum of the current element or the sum of current element and previous sum\n        current_sum = max(num, current_sum + num)\n        # Update minimum sum to be the minimum of current sum and minimum sum\n        min_sum = min(min_sum, current_sum)\n    \n    # Return the minimum sum\n    return min_sum", "prompt_tokens": 128, "completion_tokens": 127, "duration": 4.650944709777832}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize a variable to store the total number of times we need to lower the buckets\n    total_operations = 0\n\n    # Iterate through each column in the grid\n    for col in range(len(grid[0])):\n        # Initialize a variable to store the total water in the current column\n        total_water = 0\n\n        # Iterate through each row in the grid\n        for row in range(len(grid)):\n            total_water += grid[row][col]\n\n            # If the total water in the current column exceeds the bucket capacity\n            if total_water > capacity:\n                # Calculate the number of times we need to lower the buckets and update total_operations\n                total_operations += math.ceil(total_water / capacity)\n                # Reset the total water for the next bucket\n                total_water = grid[row][col]\n\n        # Add the remaining operations needed for the last bucket in the column\n        total_operations += math.ceil(total_water / capacity)\n\n    return total_operations", "prompt_tokens": 363, "completion_tokens": 212, "duration": 3.587876796722412}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # sort the array based on the number of ones in their binary representation\n    # if number of ones are equal, sort based on decimal value\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 210, "completion_tokens": 59, "duration": 4.7680439949035645}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Initialize a list to store the result\n    result = []\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    # Iterate through words and check if the number of consonants matches n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 125, "duration": 2.843712091445923}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word) - 1, 1, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 189, "completion_tokens": 99, "duration": 3.913508653640747}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Count the number of open and close parentheses in each string\n    open_parens1 = lst[0].count('(')\n    close_parens1 = lst[0].count(')')\n    open_parens2 = lst[1].count('(')\n    close_parens2 = lst[1].count(')')\n\n    # Check if the total number of open and close parentheses is equal\n    if open_parens1 + open_parens2 == close_parens1 + close_parens2:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 136, "duration": 2.4777586460113525}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the k largest elements from the end of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 45, "duration": 1.3524320125579834}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter the elements that are in even positions\n    even_position_elements = [lst[i] for i in range(len(lst)) if i % 2 == 1]\n    \n    # Filter the odd elements from the even position elements\n    odd_elements = [x for x in even_position_elements if x % 2 != 0]\n    \n    # Calculate the sum of odd elements in even positions\n    return sum(odd_elements)", "prompt_tokens": 137, "completion_tokens": 98, "duration": 2.372300863265991}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Get the first k elements from the array\n    first_k = arr[:k]\n    \n    # Filter out elements with at most two digits\n    filtered_elements = [num for num in first_k if 10 <= num < 100]\n    \n    # Return the sum of filtered elements\n    return sum(filtered_elements)", "prompt_tokens": 168, "completion_tokens": 78, "duration": 2.062377452850342}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    # Initialize an empty list to store odd numbers in collatz sequence\n    odd_numbers = []\n    \n    # Loop until n becomes 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Calculate the next term based on Collatz conjecture\n        n = n * 3 + 1 if n % 2 else n // 2\n    \n    # Add 1 to the list as 1 is always present in the sequence\n    odd_numbers.append(1)\n    \n    # Sort the list in increasing order\n    return sorted(odd_numbers)", "prompt_tokens": 271, "completion_tokens": 153, "duration": 2.991454601287842}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == '':\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # Check for leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    # If all conditions pass, return True\n    return True", "prompt_tokens": 303, "completion_tokens": 260, "duration": 7.5260443687438965}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # Check if there are whitespaces in the text\n    if ' ' in txt:\n        # Split the text on whitespaces and return the list of words\n        return txt.split()\n    # Check if there are commas in the text\n    elif ',' in txt:\n        # Split the text on commas and return the list of words\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "prompt_tokens": 180, "completion_tokens": 183, "duration": 3.23911452293396}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list has more than 1 duplicate of the same number\n    if any(lst.count(x) > 1 for x in lst):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1))", "prompt_tokens": 723, "completion_tokens": 160, "duration": 3.811807870864868}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the max of the starts of the intervals\n    start = max(interval1[0], interval2[0])\n    # Find the min of the ends of the intervals\n    end = min(interval1[1], interval2[1])\n    \n    # If the start is greater than the end, intervals don't intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 174, "duration": 3.8128364086151123}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # return None if arr is empty\n    if not arr:\n        return None\n    \n    # initialize variables to store sum and product\n    total_sum = 0\n    product = 1\n    \n    # iterate through the array\n    for num in arr:\n        # calculate the sum of magnitudes\n        total_sum += abs(num)\n        # calculate the product of signs\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n    \n    # return the final result\n    return total_sum * product", "prompt_tokens": 162, "completion_tokens": 128, "duration": 3.038832664489746}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Step 1: Create a list to store the values of the path\n    path = []\n    \n    # Step 2: Find the starting cell with the smallest value\n    current_cell = min((grid[i][j], i, j) for i in range(len(grid)) for j in range(len(grid)))[1:]\n    path.append(grid[current_cell[0]][current_cell[1]])\n    \n    # Step 3: Move to the neighbor cell with the smallest value until the path length is k\n    while len(path) < k:\n        neighbors = [(i, j) for i in range(current_cell[0]-1, current_cell[0]+2) for j in range(current_cell[1]-1, current_cell[1]+2)\n                     if (i, j) != current_cell and 0 <= i < len(grid) and 0 <= j < len(grid[0])]\n        min_neighbor = min((grid[i][j], i, j) for i, j in neighbors)\n        current_cell = min_neighbor[1:]\n        path.append(grid[current_cell[0]][current_cell[1]])\n    \n    return path", "prompt_tokens": 436, "completion_tokens": 249, "duration": 5.056214809417725}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # initialize a list to store the Tribonacci sequence\n    tribonacci = []\n\n    # loop from 0 to n\n    for i in range(n + 1):\n        # calculate Tribonacci number according to the given rules\n        if i == 0:\n            tribonacci.append(0)\n        elif i == 1:\n            tribonacci.append(3)\n        elif i == 2:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n\n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 139, "duration": 6.696714639663696}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize a variable to store the product of odd digits\n    product = 1\n    # Loop through each digit in the integer n\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit_int = int(digit)\n        # Check if the digit is odd\n        if digit_int % 2 != 0:\n            # Update the product with the odd digit\n            product *= digit_int\n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 114, "duration": 5.358855724334717}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            if stack[-1] == '[':\n                stack.pop()\n    \n    return len(stack) < len(string)//2", "prompt_tokens": 173, "completion_tokens": 65, "duration": 1.8272984027862549}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    # Round each element in the list to the upper int\n    lst = [int(x) if x.is_integer() else int(x) + 1 for x in lst]\n    \n    # Calculate the sum of squared numbers in the list\n    return sum(x**2 for x in lst)", "prompt_tokens": 197, "completion_tokens": 71, "duration": 5.124702453613281}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is not empty\n    if txt:\n        # Get the last character of the string\n        last_char = txt[-1]\n        # Check if the last character is an alphabetical character\n        if last_char.isalpha():\n            # Check if the last character is not a part of a word (not followed by a space)\n            if txt[-2] == ' ' or txt[-2] == '':\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 177, "completion_tokens": 127, "duration": 5.666543960571289}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Create a variable to store the largest index found so far\n    largest_index = -1\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than or equal to the element before it\n        if arr[i] < arr[i-1]:\n            # Update the largest index if the current index is greater than the previously found largest index\n            if i > largest_index:\n                largest_index = i\n    \n    return largest_index", "prompt_tokens": 143, "completion_tokens": 121, "duration": 4.137658596038818}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Filter negative and positive numbers from the list\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find the largest negative number or set to None if no negatives exist\n    largest_negative = max(negatives) if negatives else None\n    \n    # Find the smallest positive number or set to None if no positives exist\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 124, "duration": 5.536216735839844}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == str:\n        a = a.replace(\",\", \".\")\n    if type(b) == str:\n        b = b.replace(\",\", \".\")\n    if type(a) == int:\n        a = float(a)\n    if type(b) == int:\n        b = float(b)\n    return max(a, b, key=lambda x: (type(x), x))", "prompt_tokens": 181, "completion_tokens": 98, "duration": 3.9016988277435303}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    # Create a list to store the possible even numbers\n    even_numbers = []\n    \n    # Loop through numbers from 2 to n (inclusive)\n    for i in range(2, n + 1, 2):\n        # Check if the current number is not greater than n\n        if i <= n:\n            # Add the current even number to the list\n            even_numbers.append(i)\n            # If we have 4 even numbers, check if their sum is equal to n\n            if len(even_numbers) == 4:\n                if sum(even_numbers) == n:\n                    return True\n                else:\n                    return False\n    return False", "prompt_tokens": 117, "completion_tokens": 150, "duration": 4.866570711135864}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result variable with 1\n    result = 1\n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of i and multiply it with the result\n        result *= factorial(i)\n    return result\n\n# Function to calculate factorial of a number\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num - 1)", "prompt_tokens": 135, "completion_tokens": 111, "duration": 4.494551181793213}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace all consecutive spaces with a single space\n    text = text.replace('   ', '-')\n    text = text.replace('  ', ' ')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 62, "duration": 4.815459251403809}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are no more than three digits in the file's name\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n    \n    # Check if the file's name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file's name into two parts based on the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the substring before the dot is not empty and starts with a letter from the latin alphabet\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 203, "duration": 6.664394378662109}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 209, "completion_tokens": 68, "duration": 4.953993558883667}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter the words based on their lengths being prime\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n\n    return result", "prompt_tokens": 187, "completion_tokens": 143, "duration": 6.144221305847168}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # split x and n into numerator and denominator\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # calculate x * n\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    \n    # check if the result is a whole number\n    return result_num % result_denom == 0", "prompt_tokens": 195, "completion_tokens": 105, "duration": 3.821707248687744}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Sort the list of numbers based on the sum of their digits and index\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 82, "duration": 5.124422550201416}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the special numbers\n    count = 0\n    \n    # Iterate through each number in the array\n    for num in nums:\n        # Check if the number is greater than 10 and has odd first and last digits\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            # Increment the counter if the condition is met\n            count += 1\n    \n    return count", "prompt_tokens": 159, "completion_tokens": 118, "duration": 4.753864765167236}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Initialize counter for valid triples\n    count = 0\n    \n    # Create the array 'a' based on the given formula\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    # Check for valid triples and increment count\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 205, "completion_tokens": 135, "duration": 5.683189392089844}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        result = planets[start_index + 1:end_index]\n    else:\n        result = planets[end_index + 1:start_index]\n        \n    return tuple(result)", "prompt_tokens": 251, "completion_tokens": 129, "duration": 4.545794486999512}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length first, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 79, "duration": 4.942748308181763}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 5.204401731491089}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is positive, odd and an integer\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            # Calculate the square of the number and add it to the total\n            total += num ** 2\n    # Return the total multiplied by 2\n    return total * 2", "prompt_tokens": 177, "completion_tokens": 116, "duration": 3.965672731399536}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Initialize an empty list to store the differences\n    result = []\n    \n    # Iterate through each match\n    for i in range(len(game)):\n        # Calculate the difference between the score and the guess\n        diff = abs(game[i] - guess[i])\n        \n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the list of differences\n    return result", "prompt_tokens": 270, "completion_tokens": 93, "duration": 5.140140056610107}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to keep track of the strongest extension\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    # Iterate through each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the current extension\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        \n        # Check if the current extension is stronger than the previous strongest extension\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    \n    # Return the desired format of the strongest extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 152, "duration": 4.79343318939209}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 169, "completion_tokens": 46, "duration": 3.1336588859558105}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through each digit in the string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of even and odd counts\n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 114, "duration": 4.703996658325195}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    # Define the roman numeral symbols and their corresponding values\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', \n        9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    # Initialize an empty string to store the roman numeral\n    roman_numeral = ''\n    \n    # Iterate through the roman numeral symbols and their values\n    for value, symbol in roman_numerals.items():\n        # Repeat while the number is greater than or equal to the current value\n        while number >= value:\n            # Add the symbol to the roman numeral string\n            roman_numeral += symbol\n            # Subtract the value from the number\n            number -= value\n    \n    # Return the roman numeral string in lowercase\n    return roman_numeral.lower()", "prompt_tokens": 141, "completion_tokens": 228, "duration": 5.13499903678894}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 148, "completion_tokens": 79, "duration": 3.8412387371063232}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Create a dictionary to store the unique characters of each word\n    unique_chars = {}\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique_count = len(set(word))\n        # Update the dictionary with the word and its unique character count\n        unique_chars[word] = (unique_count, word)\n    \n    # Find the word with the maximum unique character count\n    max_word = max(unique_chars.items(), key=lambda x: (x[1][0], x[1][1]))\n    \n    return max_word[0]", "prompt_tokens": 160, "completion_tokens": 138, "duration": 4.247564077377319}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after meals\n    total_carrots = number + need\n    # Calculate the number of carrots left after meals\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 317, "completion_tokens": 68, "duration": 4.890091180801392}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0] # Initialize result with the first operand\n    for i in range(len(operator)): # Iterate through the operators\n        if operator[i] == '+': # Check for addition\n            result += operand[i + 1]\n        elif operator[i] == '-': # Check for subtraction\n            result -= operand[i + 1]\n        elif operator[i] == '*': # Check for multiplication\n            result *= operand[i + 1]\n        elif operator[i] == '//': # Check for floor division\n            result //= operand[i + 1]\n        elif operator[i] == '**': # Check for exponentiation\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 247, "completion_tokens": 158, "duration": 4.758340358734131}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    # Check if the string contains any letters\n    if not any(char.isalpha() for char in s):\n        # If the string contains no letters, reverse the string\n        return s[::-1]\n    \n    # Otherwise, reverse the case of all letters\n    return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)", "prompt_tokens": 147, "completion_tokens": 95, "duration": 5.0942466259002686}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the text\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal representation of the hash\n    hashed_text = md5_hash.hexdigest()\n    \n    return hashed_text", "prompt_tokens": 116, "completion_tokens": 96, "duration": 3.6845691204071045}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Initialize an empty list to store even digits\n    result = []\n    \n    # Iterate over the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            # Append the even number to the result list\n            result.append(num)\n    \n    # Return the list of even digits\n    return result", "prompt_tokens": 144, "completion_tokens": 110, "duration": 4.265132188796997}
