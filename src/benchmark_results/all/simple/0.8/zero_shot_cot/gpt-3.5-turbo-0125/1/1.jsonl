{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 618, "completion_tokens": 253, "duration": 5.306081533432007}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current_group = ''\n    for char in paren_string:\n        current_group += char\n        if current_group.count('(') == current_group.count(')'):\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 559, "completion_tokens": 223, "duration": 5.360064268112183}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) % 1", "prompt_tokens": 545, "completion_tokens": 215, "duration": 5.719048738479614}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 558, "completion_tokens": 186, "duration": 4.686077117919922}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    avg = mean(numbers)\n    return sum(abs(x - avg) for x in numbers) / len(numbers)", "prompt_tokens": 830, "completion_tokens": 462, "duration": 28.476628065109253}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimeter])\n    result.pop()  # Remove the last delimeter\n    return result", "prompt_tokens": 553, "completion_tokens": 243, "duration": 5.456571578979492}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 1383, "completion_tokens": 652, "duration": 12.922960996627808}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 571, "completion_tokens": 241, "duration": 4.828188419342041}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 541, "completion_tokens": 212, "duration": 4.792186975479126}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 646, "completion_tokens": 325, "duration": 6.488812685012817}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 554, "completion_tokens": 136, "duration": 3.439173698425293}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result", "prompt_tokens": 457, "completion_tokens": 168, "duration": 4.248795509338379}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 868, "completion_tokens": 330, "duration": 7.059740781784058}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 405, "completion_tokens": 111, "duration": 3.3995580673217773}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 391, "completion_tokens": 132, "duration": 3.3575453758239746}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n\n\n# Test for n = 0\nassert string_sequence(0) == '0'\n\n# Test for n = 1\nassert string_sequence(1) == '0 1'\n\n# Test for n = 5\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test for n = 10\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'", "prompt_tokens": 427, "completion_tokens": 237, "duration": 5.091907978057861}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 462, "completion_tokens": 160, "duration": 4.406226396560669}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 775, "completion_tokens": 313, "duration": 6.941169023513794}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        count += 1\n        start = idx + 1\n    return count", "prompt_tokens": 503, "completion_tokens": 219, "duration": 5.469438791275024}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_str = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=num_str.index))", "prompt_tokens": 529, "completion_tokens": 204, "duration": 5.313708543777466}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "prompt_tokens": 807, "completion_tokens": 397, "duration": 7.274841547012329}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 704, "completion_tokens": 332, "duration": 7.115479230880737}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 750, "completion_tokens": 222, "duration": 5.777019023895264}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 340, "completion_tokens": 90, "duration": 2.961662769317627}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 402, "completion_tokens": 167, "duration": 4.143711566925049}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 599, "completion_tokens": 237, "duration": 5.099178075790405}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 495, "completion_tokens": 174, "duration": 4.161372900009155}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 401, "completion_tokens": 158, "duration": 3.9385039806365967}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 405, "completion_tokens": 134, "duration": 3.677623748779297}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 540, "completion_tokens": 208, "duration": 4.810661792755127}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 594, "completion_tokens": 210, "duration": 5.015338659286499}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 514, "completion_tokens": 190, "duration": 4.140901565551758}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\n    return fsolve(poly, 0)[0]", "prompt_tokens": 2585, "completion_tokens": 1272, "duration": 23.296611070632935}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_divisible_by_three = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    return [sorted_divisible_by_three.pop(0) if i % 3 == 0 else x for i, x in enumerate(l)]", "prompt_tokens": 792, "completion_tokens": 373, "duration": 8.127236366271973}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 595, "completion_tokens": 284, "duration": 5.5239691734313965}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 495, "completion_tokens": 164, "duration": 4.298743009567261}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 489, "completion_tokens": 211, "duration": 4.680550575256348}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l[:]\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 744, "completion_tokens": 348, "duration": 6.317282438278198}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2279, "completion_tokens": 787, "duration": 18.56517481803894}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 522, "completion_tokens": 322, "duration": 6.753137826919556}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 667, "completion_tokens": 233, "duration": 5.345645427703857}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n // 2\n\nassert car_race_collision(0) == 0\nassert car_race_collision(1) == 0\nassert car_race_collision(3) == 1\nassert car_race_collision(5) == 2\nassert car_race_collision(6) == 3", "prompt_tokens": 947, "completion_tokens": 287, "duration": 6.463564872741699}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 530, "completion_tokens": 154, "duration": 7.342186212539673}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 657, "completion_tokens": 200, "duration": 7.21602725982666}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return str(base_converter(x, base))\n\ndef base_converter(x, base):\n    if x < base:\n        return x\n    else:\n        return base_converter(x // base, base) * 10 + x % base", "prompt_tokens": 451, "completion_tokens": 148, "duration": 3.45633864402771}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 390, "completion_tokens": 137, "duration": 3.0652191638946533}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 721, "completion_tokens": 314, "duration": 7.589667081832886}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 520, "completion_tokens": 249, "duration": 9.197845935821533}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 6.419827699661255}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 519, "completion_tokens": 151, "duration": 3.3909425735473633}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 507, "completion_tokens": 226, "duration": 6.452146291732788}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 581, "completion_tokens": 186, "duration": 3.845146417617798}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 495, "completion_tokens": 180, "duration": 5.095916509628296}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 4.161248207092285}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 641, "completion_tokens": 207, "duration": 9.578480958938599}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 379, "completion_tokens": 181, "duration": 5.542937278747559}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 472, "completion_tokens": 163, "duration": 7.977985858917236}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 748, "completion_tokens": 252, "duration": 10.008422613143921}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 871, "completion_tokens": 271, "duration": 11.502923011779785}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n", "prompt_tokens": 637, "completion_tokens": 219, "duration": 7.701038360595703}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 3.870792865753174}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 450, "completion_tokens": 151, "duration": 52.7523307800293}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test when xs has only one coefficient\nassert derivative([5]) == []\n\n# Test when xs has two coefficients\nassert derivative([2, 3]) == [3]\n\n# Test when xs has three coefficients\nassert derivative([1, 2, 3]) == [2, 6]\n\n# Test when xs has four coefficients\nassert derivative([3, 1, 2, 4]) == [1, 4, 12]\n\n# Test when xs has five coefficients\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]", "prompt_tokens": 535, "completion_tokens": 295, "duration": 5.884339809417725}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 642, "completion_tokens": 233, "duration": 6.449028253555298}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for letter in s.lower() if letter in 'aeiouy' or (letter == 'y' and s.lower().index(letter) == len(s) - 1))\n    return count", "prompt_tokens": 569, "completion_tokens": 187, "duration": 3.789992094039917}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 516, "completion_tokens": 202, "duration": 6.071376085281372}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 557, "completion_tokens": 174, "duration": 6.146770000457764}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if 'apples' in s else 0\n    oranges = int(fruits[-2]) if 'oranges' in s else 0\n    return n - apples - oranges", "prompt_tokens": 775, "completion_tokens": 237, "duration": 8.259355783462524}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if evens:\n        smallest_even = min(evens, key=lambda x: (x[1], x[0]))\n        return [smallest_even[1], smallest_even[0]]\n    else:\n        return []\n\n# Test when the input array is [4, 2, 3]\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test when the input array is [1, 2, 3]\nassert pluck([1, 2, 3]) == [2, 1]\n\n# Test when the input array is []\nassert pluck([]) == []\n\n# Test when the input array is [5, 0, 3, 0, 4, 2]\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "prompt_tokens": 1031, "completion_tokens": 444, "duration": 12.94931173324585}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 735, "completion_tokens": 274, "duration": 5.343853712081909}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 633, "completion_tokens": 251, "duration": 6.018895864486694}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 536, "completion_tokens": 201, "duration": 4.388561248779297}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 776, "completion_tokens": 158, "duration": 7.671923637390137}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 694, "completion_tokens": 251, "duration": 11.700917959213257}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 769, "completion_tokens": 288, "duration": 9.350746154785156}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        prime_factors = []\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i):\n                prime_factors.append(i)\n        return prime_factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 3", "prompt_tokens": 456, "completion_tokens": 244, "duration": 4.81920599937439}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.926500082015991}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 509, "completion_tokens": 139, "duration": 6.169672250747681}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    prime_digits = set(\"2357BD\")\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 947, "completion_tokens": 214, "duration": 8.048841953277588}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 552, "completion_tokens": 115, "duration": 4.271813154220581}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 611, "completion_tokens": 261, "duration": 9.556392908096313}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('E')\n    return result", "prompt_tokens": 1046, "completion_tokens": 546, "duration": 9.029553651809692}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    return all(len(string) % i != 0 for i in range(2, int(math.sqrt(len(string))) + 1))\n\n# Testing a string with prime length\nassert prime_length('Hello') == True\n\n# Testing another string with prime length\nassert prime_length('abcdcba') == True\n\n# Testing a string with prime length\nassert prime_length('kittens') == True\n\n# Testing a string with non-prime length\nassert prime_length('orange') == False\n\n# Testing an empty string\nassert prime_length('') == False\n\n# Testing a very long string with prime length\nassert prime_length('a' * 997) == True", "prompt_tokens": 459, "completion_tokens": 268, "duration": 8.93556833267212}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 10 ** (n - 1) + 10 ** n - 10 ** (n - 2)", "prompt_tokens": 773, "completion_tokens": 401, "duration": 10.63562297821045}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(d) for d in str(N)))[2:]", "prompt_tokens": 595, "completion_tokens": 171, "duration": 5.487840414047241}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 464, "completion_tokens": 210, "duration": 8.217876434326172}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 573, "completion_tokens": 177, "duration": 4.605376720428467}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test when the list contains multiple rows and x is found in multiple rows\nassert get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the list is empty\nassert get_row([], 1) == []\n\n# Test when x is found only in one row\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test when x is not found in any row\nassert get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 7) == []", "prompt_tokens": 920, "completion_tokens": 506, "duration": 9.49428105354309}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 885, "completion_tokens": 345, "duration": 7.391435146331787}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * int(char.islower())\n            shifted = chr(((ord(char) - ord('a' if char.islower() else 'A') + shift) % 26) + ord('a' if char.islower() else 'A'))\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 558, "completion_tokens": 251, "duration": 5.735229015350342}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 578, "completion_tokens": 182, "duration": 5.0710060596466064}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 971, "completion_tokens": 414, "duration": 8.171461582183838}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 591, "completion_tokens": 192, "duration": 4.774503946304321}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 545, "completion_tokens": 202, "duration": 4.806940317153931}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1070, "completion_tokens": 437, "duration": 11.497442483901978}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 720, "completion_tokens": 263, "duration": 5.188826560974121}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 633, "completion_tokens": 246, "duration": 6.018513441085815}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 488, "completion_tokens": 139, "duration": 3.8566298484802246}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 944, "completion_tokens": 490, "duration": 9.057798385620117}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 650, "completion_tokens": 194, "duration": 4.97135853767395}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 607, "completion_tokens": 216, "duration": 5.527743339538574}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a string containing words separated by commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a string containing words separated only by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a string containing words separated only by spaces\nassert words_string(\"Testing the function with spaces only\") == [\"Testing\", \"the\", \"function\", \"with\", \"spaces\", \"only\"]\n\n# Test with a string containing words separated by commas and spaces combined\nassert words_string(\"A, B C, D E, F\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string containing only one word\nassert words_string(\"Testing\") == [\"Testing\"]", "prompt_tokens": 628, "completion_tokens": 448, "duration": 8.89959192276001}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 600, "completion_tokens": 284, "duration": 6.406473159790039}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 668, "completion_tokens": 247, "duration": 5.727057218551636}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(d) % 2 == 0 for d in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 520, "completion_tokens": 183, "duration": 4.181663513183594}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    reversed_arr = filtered_arr[::-1]\n    return [names[num-1] for num in reversed_arr]", "prompt_tokens": 992, "completion_tokens": 340, "duration": 7.090529918670654}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 636, "completion_tokens": 291, "duration": 5.935885906219482}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 820, "completion_tokens": 312, "duration": 6.139133930206299}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 121, "duration": 3.230832576751709}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n\n    return False", "prompt_tokens": 966, "completion_tokens": 246, "duration": 6.055750608444214}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    total_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    total_odd_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    return \"YES\" if total_odd_lst1 <= len(lst2) - total_odd_lst2 else \"NO\"", "prompt_tokens": 776, "completion_tokens": 283, "duration": 7.689272880554199}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    result = {k: v for k, v in hist.items() if v == max_count}\n    return result", "prompt_tokens": 630, "completion_tokens": 214, "duration": 5.617715835571289}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 777, "completion_tokens": 307, "duration": 9.168613195419312}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i, i) for i, string in enumerate(lst)]", "prompt_tokens": 740, "completion_tokens": 286, "duration": 5.940230369567871}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 751, "completion_tokens": 461, "duration": 7.404967308044434}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total = 0\n    for row in grid:\n        for well in row:\n            total += math.ceil(well / capacity)\n    \n    return total", "prompt_tokens": 1138, "completion_tokens": 357, "duration": 8.33025336265564}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 689, "completion_tokens": 194, "duration": 4.134533405303955}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in \"aeiou\"\n\n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 750, "completion_tokens": 288, "duration": 5.7840187549591064}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for char in word[1:]:\n        if char in vowels:\n            return char\n    return \"\"", "prompt_tokens": 1111, "completion_tokens": 436, "duration": 10.4601571559906}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'", "prompt_tokens": 681, "completion_tokens": 258, "duration": 5.877338886260986}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 883, "completion_tokens": 287, "duration": 6.40718412399292}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 539, "completion_tokens": 201, "duration": 4.373814821243286}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "prompt_tokens": 745, "completion_tokens": 337, "duration": 8.28032398223877}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 845, "completion_tokens": 270, "duration": 5.522646188735962}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 895, "completion_tokens": 334, "duration": 9.607128858566284}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 638, "completion_tokens": 235, "duration": 5.222593784332275}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n\n    if len(lst) == 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n\n    return True", "prompt_tokens": 928, "completion_tokens": 313, "duration": 9.350791215896606}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 859, "completion_tokens": 281, "duration": 5.225591421127319}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    signs_product = 1\n    for num in arr:\n        product *= abs(num)\n        signs_product *= 1 if num == 0 else num // abs(num)\n    return product * signs_product", "prompt_tokens": 958, "completion_tokens": 384, "duration": 8.719153881072998}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_next_cell(grid, visited):\n        min_val = float('inf')\n        next_cell = None\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] < min_val and (i, j) not in visited:\n                    min_val = grid[i][j]\n                    next_cell = (i, j)\n        return next_cell\n\n    def is_valid_cell(i, j, n):\n        return 0 <= i < n and 0 <= j < n\n\n    n = len(grid)\n    visited = set()\n    path = []\n    curr_cell = find_next_cell(grid, visited)\n    for _ in range(k):\n        path.append(grid[curr_cell[0]][curr_cell[1]])\n        visited.add(curr_cell)\n        neighbors = [(curr_cell[0] + 1, curr_cell[1]), (curr_cell[0] - 1, curr_cell[1]), (curr_cell[0], curr_cell[1] + 1), (curr_cell[0], curr_cell[1] - 1)]\n        next_neighbor = None\n        min_val = float('inf')\n        for neighbor in neighbors:\n            if is_valid_cell(neighbor[0], neighbor[1], n) and grid[neighbor[0]][neighbor[1]] < min_val and neighbor not in visited:\n                next_neighbor = neighbor\n                min_val = grid[neighbor[0]][neighbor[1]]\n        curr_cell = next_neighbor\n\n    return path", "prompt_tokens": 1338, "completion_tokens": 688, "duration": 18.148128747940063}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 3]\n    \n    tribonacci = [3, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + 1)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    \n    return tribonacci", "prompt_tokens": 979, "completion_tokens": 441, "duration": 11.411621570587158}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        if digit % 2 != 0:\n            product *= digit\n    return product", "prompt_tokens": 439, "completion_tokens": 158, "duration": 3.0021169185638428}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n            close_brackets += 1\n    return close_brackets > 0 or open_brackets > 0", "prompt_tokens": 1010, "completion_tokens": 427, "duration": 11.766352891921997}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 815, "completion_tokens": 343, "duration": 7.120937347412109}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 992, "completion_tokens": 345, "duration": 6.328323841094971}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 549, "completion_tokens": 211, "duration": 7.734007358551025}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 670, "completion_tokens": 297, "duration": 10.4350106716156}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        if '.' in a or '.' in b or ',' in a or ',' in b:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            return max(float(a), float(b))\n        else:\n            return max(a, b)\n    else:\n        return max(a, b)", "prompt_tokens": 736, "completion_tokens": 394, "duration": 11.583071231842041}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test when n is 4, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False\n\n# Test when n is 6, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False\n\n# Test when n is 8, which can be expressed as the sum of exactly 4 positive even numbers (2 + 2 + 2 + 2)\nassert is_equal_to_sum_even(8) == True\n\n# Test when n is 20, which can be expressed as the sum of exactly 4 positive even numbers (4 + 6 + 8 + 2)\nassert is_equal_to_sum_even(20) == True\n\n# Test when n is 15, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(15) == False", "prompt_tokens": 541, "completion_tokens": 425, "duration": 8.67974042892456}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result *= fact\n        return result", "prompt_tokens": 559, "completion_tokens": 260, "duration": 8.101146221160889}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 504, "completion_tokens": 141, "duration": 4.537262678146362}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 802, "completion_tokens": 296, "duration": 10.32829737663269}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result", "prompt_tokens": 695, "completion_tokens": 236, "duration": 4.565560817718506}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = ' '.join(word for word in words if is_prime(len(word)))\n    return result", "prompt_tokens": 597, "completion_tokens": 209, "duration": 3.9996306896209717}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1 and result.numerator % result.denominator == 0", "prompt_tokens": 588, "completion_tokens": 141, "duration": 7.143609285354614}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x) if x in nums else -1))", "prompt_tokens": 996, "completion_tokens": 418, "duration": 12.18158483505249}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 1143, "completion_tokens": 578, "duration": 10.054205656051636}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 716, "completion_tokens": 305, "duration": 6.204251289367676}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    result = planets[start_idx+1:end_idx]\n    \n    return tuple(result)", "prompt_tokens": 863, "completion_tokens": 385, "duration": 11.186439990997314}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1182, "completion_tokens": 390, "duration": 12.319830894470215}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 600, "completion_tokens": 323, "duration": 10.489825010299683}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1357, "completion_tokens": 710, "duration": 13.034201860427856}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 907, "completion_tokens": 304, "duration": 9.725589513778687}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nassert Strongest_Extension('Class', ['Aa', 'bB', 'Cc']) == 'Class.Aa'\nassert Strongest_Extension('AnotherClass', ['xYz', 'AbCd', 'eFgH']) == 'AnotherClass.eFgH'\nassert Strongest_Extension('NewClass', ['AbC', 'def', 'Ghi', 'JKL']) == 'NewClass.AbC'", "prompt_tokens": 3144, "completion_tokens": 1115, "duration": 23.402782917022705}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 640, "completion_tokens": 247, "duration": 8.01470398902893}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 442, "completion_tokens": 199, "duration": 7.6042187213897705}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n                      100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 552, "completion_tokens": 303, "duration": 9.8004629611969}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 577, "completion_tokens": 205, "duration": 5.40998649597168}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    unique_chars = [len(set(word)) for word in words]\n    max_unique = max(unique_chars)\n    max_unique_words = [word for word, unique in zip(words, unique_chars) if unique == max_unique]\n    return min(max_unique_words) if max_unique_words else None", "prompt_tokens": 554, "completion_tokens": 200, "duration": 7.404608488082886}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    left = max(0, remaining - (need - number))\n    return [total_eaten, left]", "prompt_tokens": 984, "completion_tokens": 292, "duration": 6.22709846496582}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 963, "completion_tokens": 482, "duration": 9.546224355697632}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    else:\n        return result", "prompt_tokens": 571, "completion_tokens": 233, "duration": 6.605191707611084}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 485, "completion_tokens": 176, "duration": 6.996428489685059}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 633, "completion_tokens": 276, "duration": 9.35577940940857}
