{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 635, "completion_tokens": 265, "duration": 6.341007709503174}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    in_group = False\n    \n    for char in paren_string:\n        if char == '(':\n            in_group = True\n        elif char == ')':\n            in_group = False\n            result.append(current_group + ')')\n            current_group = ''\n        elif in_group:\n            current_group += char\n\n    return result", "prompt_tokens": 604, "completion_tokens": 286, "duration": 6.347574949264526}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 438, "completion_tokens": 106, "duration": 3.015273094177246}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 579, "completion_tokens": 212, "duration": 4.999154567718506}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 745, "completion_tokens": 376, "duration": 8.126559972763062}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 585, "completion_tokens": 279, "duration": 6.308639287948608}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 1500, "completion_tokens": 785, "duration": 16.88917589187622}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 529, "completion_tokens": 199, "duration": 4.508605480194092}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product", "prompt_tokens": 730, "completion_tokens": 377, "duration": 7.906200408935547}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result", "prompt_tokens": 637, "completion_tokens": 297, "duration": 6.652051687240601}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    return ''", "prompt_tokens": 627, "completion_tokens": 240, "duration": 6.148382663726807}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 447, "completion_tokens": 165, "duration": 4.253842115402222}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 559, "completion_tokens": 212, "duration": 4.9031453132629395}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 427, "completion_tokens": 140, "duration": 4.153936862945557}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 421, "completion_tokens": 157, "duration": 4.053708791732788}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 623, "completion_tokens": 158, "duration": 4.673375368118286}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 442, "completion_tokens": 140, "duration": 4.422733783721924}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 814, "completion_tokens": 358, "duration": 7.181582689285278}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 207, "duration": 5.771211862564087}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    num_dict = {word: i for i, word in enumerate(words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 516, "completion_tokens": 216, "duration": 5.3331053256988525}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min(combinations(numbers, 2), key=lambda x: abs(x[0] - x[1]))\n    return tuple(sorted(closest_pair))", "prompt_tokens": 804, "completion_tokens": 354, "duration": 7.547354221343994}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 762, "completion_tokens": 410, "duration": 9.043666362762451}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 718, "completion_tokens": 190, "duration": 5.641003847122192}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 327, "completion_tokens": 77, "duration": 2.806591272354126}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 397, "completion_tokens": 157, "duration": 4.542895555496216}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors\n\n# Test factorize function with a prime number\nassert factorize(7) == [7]", "prompt_tokens": 458, "completion_tokens": 230, "duration": 5.19076132774353}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 482, "completion_tokens": 161, "duration": 4.492379188537598}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 397, "completion_tokens": 138, "duration": 4.106118440628052}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 400, "completion_tokens": 129, "duration": 4.0184006690979}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 533, "completion_tokens": 215, "duration": 4.9047136306762695}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 590, "completion_tokens": 206, "duration": 5.412261247634888}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 508, "completion_tokens": 183, "duration": 5.616365909576416}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    return -xs[0] / xs[n-1]", "prompt_tokens": 2883, "completion_tokens": 813, "duration": 19.319091320037842}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    result[::3] = sorted(result[::3])\n    return result", "prompt_tokens": 700, "completion_tokens": 246, "duration": 7.201095342636108}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 522, "completion_tokens": 211, "duration": 5.9731855392456055}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 503, "completion_tokens": 172, "duration": 5.147714614868164}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 498, "completion_tokens": 217, "duration": 8.195653915405273}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[1::2])[i//2] if i%2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 611, "completion_tokens": 225, "duration": 5.069124460220337}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    n = len(s)\n    groups = [s[(3 * i):min((3 * i + 3), n)] for i in range((n + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 686, "completion_tokens": 351, "duration": 7.135829448699951}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 557, "completion_tokens": 332, "duration": 7.0312018394470215}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 696, "completion_tokens": 227, "duration": 5.337579011917114}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n-1) // 2", "prompt_tokens": 656, "completion_tokens": 190, "duration": 4.291862726211548}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 614, "completion_tokens": 238, "duration": 8.44307279586792}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 668, "completion_tokens": 211, "duration": 5.7390077114105225}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 451, "completion_tokens": 131, "duration": 3.019747018814087}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 405, "completion_tokens": 152, "duration": 3.7240164279937744}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n    return fib_sequence[n]", "prompt_tokens": 834, "completion_tokens": 430, "duration": 11.500234365463257}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 485, "completion_tokens": 214, "duration": 8.288843631744385}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 397, "completion_tokens": 91, "duration": 4.56710147857666}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 532, "completion_tokens": 164, "duration": 8.073166847229004}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 515, "completion_tokens": 195, "duration": 4.190337181091309}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 549, "completion_tokens": 153, "duration": 4.793679714202881}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 448, "completion_tokens": 133, "duration": 3.4562578201293945}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 6.7088048458099365}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 657, "completion_tokens": 222, "duration": 7.4790942668914795}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 380, "completion_tokens": 144, "duration": 6.422329902648926}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 466, "completion_tokens": 161, "duration": 3.690554618835449}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 508, "completion_tokens": 224, "duration": 6.359213352203369}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 583, "completion_tokens": 202, "duration": 8.325188398361206}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test when the input number has a prime factor larger than 2\nassert largest_prime_factor(13195) == 29\n\n# Test when the input number has the largest prime factor as 2\nassert largest_prime_factor(2048) == 2", "prompt_tokens": 369, "completion_tokens": 162, "duration": 3.9147160053253174}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 472, "completion_tokens": 126, "duration": 2.761706829071045}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 549, "completion_tokens": 249, "duration": 5.039896249771118}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 1479, "completion_tokens": 708, "duration": 16.319947719573975}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 667, "completion_tokens": 258, "duration": 5.290624380111694}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if not s:\n        return 0\n    \n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 556, "completion_tokens": 200, "duration": 7.983941555023193}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 479, "completion_tokens": 184, "duration": 6.917372465133667}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 568, "completion_tokens": 185, "duration": 6.323119401931763}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 809, "completion_tokens": 249, "duration": 5.739294052124023}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [i for i in arr if i % 2 == 0]\n    if not even_values:\n        return []\n    min_even = min(even_values)\n    min_index = arr.index(min_even)\n    return [min_even, min_index]", "prompt_tokens": 992, "completion_tokens": 250, "duration": 4.763332366943359}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 705, "completion_tokens": 239, "duration": 6.407315492630005}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.extend([lst[i], lst[j]])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 642, "completion_tokens": 298, "duration": 7.440170049667358}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 573, "completion_tokens": 239, "duration": 5.524146556854248}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 827, "completion_tokens": 209, "duration": 4.949189901351929}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 630, "completion_tokens": 187, "duration": 6.7393457889556885}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 763, "completion_tokens": 265, "duration": 5.580200672149658}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        factors = []\n        for i in range(2, num + 1):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 3", "prompt_tokens": 441, "completion_tokens": 229, "duration": 6.269283771514893}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.789402723312378}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a**(1/3))**3 == a", "prompt_tokens": 517, "completion_tokens": 137, "duration": 6.902933120727539}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count", "prompt_tokens": 947, "completion_tokens": 217, "duration": 5.272403240203857}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 573, "completion_tokens": 135, "duration": 2.765556573867798}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n        \n    return True", "prompt_tokens": 579, "completion_tokens": 229, "duration": 5.271391153335571}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 864, "completion_tokens": 385, "duration": 8.464203357696533}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5, which is a prime number\nassert prime_length('Hello') == True\n\n# Test with a palindrome string of length 7, which is a prime number\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7, which is a prime number\nassert prime_length('kittens') == True\n\n# Test with a string of length 6, which is not a prime number\nassert prime_length('orange') == False", "prompt_tokens": 454, "completion_tokens": 329, "duration": 7.140429496765137}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 20", "prompt_tokens": 456, "completion_tokens": 211, "duration": 6.474013805389404}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(i) for i in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 540, "completion_tokens": 124, "duration": 3.125814914703369}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)", "prompt_tokens": 588, "completion_tokens": 333, "duration": 10.48774766921997}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 581, "completion_tokens": 177, "duration": 8.808676958084106}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    \n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with a list containing multiple rows where x exists in different columns\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with a list containing x in the last row and last column\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with a list where x is not present\nassert get_row([[1, 2], [3, 4]], 5) == []", "prompt_tokens": 890, "completion_tokens": 441, "duration": 8.732155799865723}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 849, "completion_tokens": 307, "duration": 9.994344234466553}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 517, "completion_tokens": 199, "duration": 4.756076097488403}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 593, "completion_tokens": 203, "duration": 6.263903856277466}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 533, "completion_tokens": 183, "duration": 4.377737998962402}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 580, "completion_tokens": 165, "duration": 6.027057409286499}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 518, "completion_tokens": 188, "duration": 7.640730857849121}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1035, "completion_tokens": 404, "duration": 8.059661626815796}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    upper = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    \n    return lower or upper", "prompt_tokens": 695, "completion_tokens": 239, "duration": 6.410165309906006}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 6.329967737197876}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 489, "completion_tokens": 140, "duration": 3.438406467437744}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\")\n\n# Testing an empty string\nassert count_upper('') == 0\n\n# Testing a string with no uppercase vowels in even indices\nassert count_upper('abcdefg') == 0\n\n# Testing a string with one uppercase vowel in even indices\nassert count_upper('aBCdEf') == 1\n\n# Testing a string with multiple uppercase vowels in even indices\nassert count_upper('dBBE') == 0", "prompt_tokens": 418, "completion_tokens": 216, "duration": 5.319866895675659}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return round(float(value))", "prompt_tokens": 721, "completion_tokens": 241, "duration": 5.487993478775024}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 621, "completion_tokens": 242, "duration": 7.173234224319458}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 592, "completion_tokens": 198, "duration": 6.570732593536377}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 606, "completion_tokens": 289, "duration": 10.387942790985107}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]", "prompt_tokens": 582, "completion_tokens": 169, "duration": 4.445150136947632}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 819, "completion_tokens": 256, "duration": 6.5567967891693115}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 949, "completion_tokens": 308, "duration": 10.110563278198242}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 549, "completion_tokens": 201, "duration": 8.043099164962769}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 703, "completion_tokens": 195, "duration": 5.3774733543396}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 570, "completion_tokens": 189, "duration": 6.175365209579468}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False", "prompt_tokens": 1036, "completion_tokens": 312, "duration": 9.331617593765259}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 277, "duration": 7.755525827407837}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    max_count = 0\n    for letter in test.split():\n        result[letter] = result.get(letter, 0) + 1\n        max_count = max(max_count, result[letter])\n    \n    return {k: v for k, v in result.items() if v == max_count}", "prompt_tokens": 632, "completion_tokens": 223, "duration": 5.295926094055176}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_s = ''.join(char for char in s if char not in c)\n    return (filtered_s, filtered_s == filtered_s[::-1])", "prompt_tokens": 1026, "completion_tokens": 289, "duration": 6.800706148147583}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), sum(int(d) % 2 != 0 for d in s), i, i) for i, s in enumerate(lst)]", "prompt_tokens": 732, "completion_tokens": 276, "duration": 5.04229474067688}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 674, "completion_tokens": 383, "duration": 8.98710036277771}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity) * 2", "prompt_tokens": 1811, "completion_tokens": 602, "duration": 13.680263996124268}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 772, "completion_tokens": 277, "duration": 5.45000433921814}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1236, "completion_tokens": 480, "duration": 10.190256118774414}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    word = word[1:-1]\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n        elif word[i] in consonants and i > 0 and word[i-1] in consonants:\n            return \"\"\n    \n    return \"\"", "prompt_tokens": 676, "completion_tokens": 308, "duration": 6.301961898803711}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for p in lst:\n        count += 1 if p == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 685, "completion_tokens": 217, "duration": 7.948598623275757}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 834, "completion_tokens": 235, "duration": 7.6261866092681885}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)", "prompt_tokens": 472, "completion_tokens": 136, "duration": 2.9860851764678955}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 749, "completion_tokens": 341, "duration": 9.115067720413208}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = set()\n    while n != 1:\n        if n % 2 != 0:\n            result.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.add(1)\n    return sorted(list(result))", "prompt_tokens": 901, "completion_tokens": 325, "duration": 6.667253255844116}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if not(1 <= month <= 12):\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n    except:\n        return False\n    return False", "prompt_tokens": 903, "completion_tokens": 364, "duration": 7.928685665130615}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]\n\n# Test when the text contains whitespaces\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\n# Test when the text contains whitespaces and commas\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n\n# Test when the text contains no whitespaces or commas\nassert split_words(\"abcdef\") == 3\n\n# Test when the text contains only one word\nassert split_words(\"Python\") == [\"Python\"]\n\n# Test when the text contains numbers and special characters\nassert split_words(\"Testing 1, 2, 3!\") == [\"Testing\", \"1\", \"2\", \"3!\"]\n\n# Test when the text is empty\nassert split_words(\"\") == []", "prompt_tokens": 2368, "completion_tokens": 1182, "duration": 27.108323097229004}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    if len(lst) != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "prompt_tokens": 1374, "completion_tokens": 396, "duration": 10.071210384368896}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    if length % 2 == 0:\n        return \"NO\"\n    \n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 786, "completion_tokens": 244, "duration": 5.762708902359009}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sign_sum = 0\n    for num in arr:\n        product *= 1 if num == 0 else num // abs(num)\n        sign_sum += abs(num)\n\n    return product * sign_sum", "prompt_tokens": 550, "completion_tokens": 190, "duration": 7.733881235122681}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_next_move(i, j, visited):\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        for ni, nj in neighbors:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                return ni, nj\n        return None\n\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        for ni, nj in find_next_move(i, j, visited):\n            res = dfs(ni, nj, path + [grid[ni][nj]], visited)\n            if res:\n                return res\n        visited.remove((i, j))\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, [grid[i][j]], set([(i, j)]))\n            if res:\n                return res", "prompt_tokens": 1220, "completion_tokens": 477, "duration": 11.507922410964966}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        tribonacci = [3, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + 1)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 851, "completion_tokens": 334, "duration": 7.9422430992126465}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 416, "completion_tokens": 137, "duration": 7.473382949829102}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 982, "completion_tokens": 376, "duration": 9.015998125076294}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + 1)**2 for x in lst])", "prompt_tokens": 1206, "completion_tokens": 486, "duration": 9.543599843978882}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt[-1] != ' '", "prompt_tokens": 597, "completion_tokens": 168, "duration": 5.1670982837677}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 542, "completion_tokens": 206, "duration": 7.848006725311279}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n    \n    max_neg = None if len(neg_ints) == 0 else max(neg_ints)\n    min_pos = None if len(pos_ints) == 0 else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 632, "completion_tokens": 268, "duration": 6.079993724822998}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == str:\n        a = a.replace(',', '.')\n    if type(b) == str:\n        b = b.replace(',', '.')\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 712, "completion_tokens": 318, "duration": 9.522056579589844}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 457, "completion_tokens": 139, "duration": 7.017647743225098}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        fact = 1\n        for j in range(1, i + 1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 468, "completion_tokens": 168, "duration": 7.865574598312378}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 569, "completion_tokens": 206, "duration": 4.5538434982299805}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 770, "completion_tokens": 264, "duration": 8.112447261810303}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 858, "completion_tokens": 403, "duration": 6.988749980926514}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 608, "completion_tokens": 220, "duration": 7.989948749542236}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 582, "completion_tokens": 148, "duration": 3.2832014560699463}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 673, "completion_tokens": 295, "duration": 8.114445924758911}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 625, "completion_tokens": 285, "duration": 9.00717568397522}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 626, "completion_tokens": 206, "duration": 5.108077049255371}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Pluto\", \"Mars\") == ()\nassert bf(\"Saturn\", \"Pluto\") == ()", "prompt_tokens": 2861, "completion_tokens": 1249, "duration": 22.64779305458069}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 811, "completion_tokens": 283, "duration": 6.657710313796997}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 510, "completion_tokens": 230, "duration": 4.945045709609985}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 591, "completion_tokens": 173, "duration": 4.216839075088501}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 940, "completion_tokens": 337, "duration": 7.443509578704834}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    if extensions:\n        strongest = max(extensions, key=strength)\n        return f\"{class_name}.{strongest}\"\n    else:\n        return f\"{class_name}.\"", "prompt_tokens": 1640, "completion_tokens": 616, "duration": 14.127429008483887}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 637, "completion_tokens": 240, "duration": 6.638293027877808}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 434, "completion_tokens": 193, "duration": 6.872753381729126}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return ''\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 685, "completion_tokens": 479, "duration": 11.185061931610107}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 563, "completion_tokens": 215, "duration": 4.303164005279541}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))", "prompt_tokens": 510, "completion_tokens": 112, "duration": 25.90031909942627}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining if remaining < need else number + need\n    remaining_after_meals = 0 if remaining < need else remaining - need\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 916, "completion_tokens": 238, "duration": 5.2848334312438965}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i - 1] == '+':\n            result += operands[i]\n        elif operators[i - 1] == '-':\n            result -= operands[i]\n        elif operators[i - 1] == '*':\n            result *= operands[i]\n        elif operators[i - 1] == '//':\n            result //= operands[i]\n        elif operators[i - 1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 786, "completion_tokens": 310, "duration": 6.936994791030884}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = []\n    all_letters = all(char.isalpha() for char in s)\n    \n    if all_letters:\n        result = [char.lower() if char.isupper() else char.upper() for char in s]\n    else:\n        result = list(s[::-1])\n    \n    return ''.join(result)", "prompt_tokens": 517, "completion_tokens": 192, "duration": 6.0452187061309814}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 449, "completion_tokens": 148, "duration": 6.993002653121948}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 679, "completion_tokens": 322, "duration": 10.377836465835571}
