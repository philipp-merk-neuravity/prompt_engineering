{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 632, "completion_tokens": 267, "duration": 6.309841871261597}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    res = []\n    count = 0\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif c == ')':\n            count -= 1\n            if count == 0:\n                res.append(paren_string[start:i+1])\n    return res", "prompt_tokens": 535, "completion_tokens": 226, "duration": 5.254393100738525}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 470, "completion_tokens": 138, "duration": 4.035843372344971}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 538, "completion_tokens": 171, "duration": 4.60293173789978}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_value) for x in numbers) / len(numbers)", "prompt_tokens": 769, "completion_tokens": 402, "duration": 7.934202432632446}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 594, "completion_tokens": 286, "duration": 6.160486459732056}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            max_levels.append(len(stack))\n        elif char == ')':\n            stack.pop()\n    return max_levels", "prompt_tokens": 548, "completion_tokens": 207, "duration": 4.805497646331787}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 549, "completion_tokens": 214, "duration": 6.51150107383728}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 653, "completion_tokens": 325, "duration": 6.517807960510254}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n\n    return result", "prompt_tokens": 663, "completion_tokens": 339, "duration": 7.65612530708313}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]", "prompt_tokens": 1113, "completion_tokens": 524, "duration": 13.864455461502075}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result", "prompt_tokens": 488, "completion_tokens": 202, "duration": 5.356356620788574}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 939, "completion_tokens": 406, "duration": 7.980117082595825}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 465, "completion_tokens": 178, "duration": 5.583380699157715}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = [string[:i+1] for i in range(len(string))]\n    return result", "prompt_tokens": 393, "completion_tokens": 134, "duration": 4.111135959625244}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 631, "completion_tokens": 166, "duration": 5.349254608154297}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 434, "completion_tokens": 132, "duration": 4.1342902183532715}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [note_lengths[note] for note in notes]", "prompt_tokens": 1313, "completion_tokens": 590, "duration": 14.642555952072144}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 503, "completion_tokens": 214, "duration": 4.823021173477173}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: int(number_dict[x]))\n\n    return ' '.join(sorted_numbers)", "prompt_tokens": 521, "completion_tokens": 250, "duration": 6.558159828186035}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair", "prompt_tokens": 795, "completion_tokens": 379, "duration": 8.476877927780151}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return scaled", "prompt_tokens": 677, "completion_tokens": 310, "duration": 6.421985864639282}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 543, "completion_tokens": 216, "duration": 5.725851535797119}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 338, "completion_tokens": 88, "duration": 2.674499988555908}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 427, "completion_tokens": 182, "duration": 4.444627285003662}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return sum(([k]*v for k, v in Counter(factors).items()), [])", "prompt_tokens": 610, "completion_tokens": 277, "duration": 5.840388774871826}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 503, "completion_tokens": 182, "duration": 4.61991286277771}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 420, "completion_tokens": 161, "duration": 4.022497653961182}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 395, "completion_tokens": 124, "duration": 3.6734862327575684}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 227, "duration": 5.244804382324219}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 543, "completion_tokens": 159, "duration": 4.166497230529785}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 566, "completion_tokens": 242, "duration": 5.248958110809326}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return round(poly(xs, 0), 2)", "prompt_tokens": 866, "completion_tokens": 338, "duration": 7.919990062713623}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 696, "completion_tokens": 253, "duration": 5.581519365310669}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 507, "completion_tokens": 196, "duration": 6.252283811569214}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 508, "completion_tokens": 177, "duration": 5.055192470550537}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 488, "completion_tokens": 207, "duration": 5.202131509780884}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [x if i % 2 != 0 else even_indices[i // 2] for i, x in enumerate(l)]\n    return result", "prompt_tokens": 626, "completion_tokens": 265, "duration": 5.656975746154785}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 656, "completion_tokens": 235, "duration": 5.533313751220703}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        a, b = 0, 1\n        for _ in range(2, num + 1):\n            a, b = b, a + b\n        return a\n\n    i = 2\n    count = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n        if count == n:\n            return fib_num\n        i += 1", "prompt_tokens": 482, "completion_tokens": 279, "duration": 4.89680552482605}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 689, "completion_tokens": 255, "duration": 5.963596820831299}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road, so no collisions can occur\nassert car_race_collision(0) == 0\n\n# Test when there is only one pair of cars on the road, so one collision occurs\nassert car_race_collision(1) == 1\n\n# Test when there are multiple pairs of cars on the road, so collisions occur for each pair\nassert car_race_collision(5) == 5\n\n# Test when a large number of cars are on the road, check if collisions are calculated correctly\nassert car_race_collision(100) == 100", "prompt_tokens": 610, "completion_tokens": 260, "duration": 5.887182712554932}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 585, "completion_tokens": 209, "duration": 8.413480758666992}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l)", "prompt_tokens": 633, "completion_tokens": 157, "duration": 5.57192587852478}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 508, "completion_tokens": 210, "duration": 4.631382465362549}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 372, "completion_tokens": 119, "duration": 3.935072898864746}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 776, "completion_tokens": 374, "duration": 11.76399040222168}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    if len(l) == 0:\n        return None\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 471, "completion_tokens": 223, "duration": 4.6786134243011475}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.414151191711426}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 513, "completion_tokens": 145, "duration": 9.844401121139526}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 549, "completion_tokens": 248, "duration": 6.353644609451294}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test when input text is an empty string\nassert remove_vowels('') == ''\n\n# Test when input text has vowels in lowercase and newline character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test when input text has vowels in lowercase\nassert remove_vowels('abcdef') == 'bcdf'\n\n# Test when input text has only vowels in lowercase\nassert remove_vowels('aaaaa') == ''\n\n# Test when input text has vowels in both lowercase and uppercase\nassert remove_vowels('aaBAA') == 'B'\n\n# Test when input text has no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 582, "completion_tokens": 332, "duration": 6.667952060699463}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 448, "completion_tokens": 133, "duration": 6.4596498012542725}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 374, "completion_tokens": 106, "duration": 3.7893242835998535}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 637, "completion_tokens": 202, "duration": 6.744352340698242}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 418, "completion_tokens": 220, "duration": 5.49607253074646}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 522, "completion_tokens": 214, "duration": 4.408928632736206}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 488, "completion_tokens": 196, "duration": 4.107922315597534}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 586, "completion_tokens": 205, "duration": 4.410714864730835}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 360, "completion_tokens": 99, "duration": 5.3823137283325195}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 493, "completion_tokens": 147, "duration": 4.741142272949219}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 575, "completion_tokens": 277, "duration": 7.386849403381348}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test a simple linear polynomial: 2 + 3x\nassert derivative([2, 3]) == [3]\n\n# Test a quadratic polynomial: 4 + 3x + 2x^2\nassert derivative([4, 3, 2]) == [3, 4]\n\n# Test a cubic polynomial: 1 + 2x + 3x^2 + 4x^3\nassert derivative([1, 2, 3, 4]) == [2, 6, 12]\n\n# Test a polynomial with all coefficients being 0\nassert derivative([0, 0, 0, 0]) == [0, 0, 0]\n\n# Test a polynomial with negative coefficients: -2 - 3x - 4x^2\nassert derivative([-2, -3, -4]) == [-3, -8]", "prompt_tokens": 589, "completion_tokens": 404, "duration": 10.154531717300415}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 620, "completion_tokens": 211, "duration": 4.363824129104614}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s if char.lower() in 'aeiouy')\n    if s[-1].lower() == 'y' and count > 0:\n        count -= 1\n    return count", "prompt_tokens": 583, "completion_tokens": 203, "duration": 8.593879461288452}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 546, "completion_tokens": 253, "duration": 5.648363351821899}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 560, "completion_tokens": 177, "duration": 4.404442071914673}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s,n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 736, "completion_tokens": 169, "duration": 4.495537996292114}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_value:\n            smallest_even_value = num\n            smallest_even_index = i\n    \n    if smallest_even_value == float('inf'):\n        return []\n    \n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1017, "completion_tokens": 304, "duration": 6.50354790687561}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 714, "completion_tokens": 253, "duration": 6.588890552520752}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 623, "completion_tokens": 234, "duration": 5.458671569824219}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 624, "completion_tokens": 291, "duration": 7.794067859649658}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 799, "completion_tokens": 182, "duration": 6.512650966644287}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return sum(1 for i in range(len(arr)//2) if arr[i] != arr[-i-1])", "prompt_tokens": 638, "completion_tokens": 174, "duration": 5.332859992980957}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 760, "completion_tokens": 262, "duration": 7.8991944789886475}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 454, "completion_tokens": 226, "duration": 4.374210596084595}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 723, "completion_tokens": 280, "duration": 5.302955627441406}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 516, "completion_tokens": 146, "duration": 7.824634313583374}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1151, "completion_tokens": 423, "duration": 9.137469053268433}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'", "prompt_tokens": 578, "completion_tokens": 140, "duration": 3.3851075172424316}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 577, "completion_tokens": 231, "duration": 6.628874778747559}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1372, "completion_tokens": 895, "duration": 15.706060409545898}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True\n\n# Test with a palindrome string of length 7 (prime number)\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7 (prime number)\nassert prime_length('kittens') == True\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False", "prompt_tokens": 443, "completion_tokens": 307, "duration": 6.45341420173645}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * (10 ** (n - 1) - 9 ** (n - 1))", "prompt_tokens": 448, "completion_tokens": 211, "duration": 9.212503910064697}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 770, "completion_tokens": 355, "duration": 6.5957348346710205}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 485, "completion_tokens": 231, "duration": 4.850744247436523}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 564, "completion_tokens": 160, "duration": 3.924962282180786}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.extend([(i, j) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x])\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test with a simple case where x is found in multiple rows\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with x found only in one row and last column\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test when x is not present in the list\nassert get_row([[1, 2], [3, 4]], 5) == []", "prompt_tokens": 1489, "completion_tokens": 702, "duration": 13.916164636611938}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    if len(arr) == 0:\n        return arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1553, "completion_tokens": 727, "duration": 15.051223754882812}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            rotated_ascii = ord(char) + 2 * 2\n            if char.islower():\n                if rotated_ascii > ord('z'):\n                    rotated_ascii -= 26\n            else:\n                if rotated_ascii > ord('Z'):\n                    rotated_ascii -= 26\n            result += chr(rotated_ascii)\n        else:\n            result += char\n    return result", "prompt_tokens": 543, "completion_tokens": 240, "duration": 5.6735663414001465}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 577, "completion_tokens": 184, "duration": 5.402469635009766}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\". I\") + S.count(\"! I\") + S.count(\"? I\") + S.startswith(\"I\")\n\n# Test when there are no sentences starting with \"I\"\nassert is_bored(\"Hello world\") == 0\n\n# Test when there is one sentence starting with \"I\"\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n\n# Test when there are multiple sentences starting with \"I\"\nassert is_bored(\"I am happy. I am sad. I am bored. I am excited!\") == 4\n\n# Test when there is only one sentence starting with \"I\"\nassert is_bored(\"I am the only one here!\") == 1\n\n# Test when there are no sentences in the input string\nassert is_bored(\"\") == 0", "prompt_tokens": 549, "completion_tokens": 333, "duration": 6.118731737136841}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 573, "completion_tokens": 175, "duration": 4.198719263076782}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message", "prompt_tokens": 534, "completion_tokens": 209, "duration": 7.037499666213989}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_digits(max_prime)", "prompt_tokens": 1072, "completion_tokens": 436, "duration": 8.466715574264526}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        return all(key.islower() for key in keys)\n    elif first_key.isupper():\n        return all(key.isupper() for key in keys)\n    else:\n        return False", "prompt_tokens": 697, "completion_tokens": 254, "duration": 5.5197203159332275}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.782110691070557}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 496, "completion_tokens": 147, "duration": 5.866156101226807}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 455, "completion_tokens": 183, "duration": 4.708773851394653}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value)))", "prompt_tokens": 1088, "completion_tokens": 350, "duration": 8.046236276626587}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 619, "completion_tokens": 228, "duration": 4.991101980209351}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence separated by spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a sentence separated by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a sentence containing only one word\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test with a sentence containing duplicate words\nassert words_string(\"apple, banana, apple, orange\") == [\"apple\", \"banana\", \"apple\", \"orange\"]", "prompt_tokens": 567, "completion_tokens": 326, "duration": 9.852162599563599}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 895, "completion_tokens": 364, "duration": 8.161918640136719}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 708, "completion_tokens": 284, "duration": 5.5784831047058105}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in sorted(x):\n        if all(int(d) % 2 != 0 for d in str(num)):\n            result.append(num)\n    return result", "prompt_tokens": 529, "completion_tokens": 189, "duration": 6.410324573516846}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    word_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    return [word_map[num] for num in reversed_arr]", "prompt_tokens": 1006, "completion_tokens": 401, "duration": 7.629251956939697}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 885, "completion_tokens": 538, "duration": 12.634730815887451}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 989, "completion_tokens": 481, "duration": 10.315675020217896}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += 1\n        else:\n            digits_sum = sum(int(d) for d in str(num) if d.isdigit())\n            if digits_sum > 0:\n                count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 158, "duration": 3.6051688194274902}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 969, "completion_tokens": 249, "duration": 8.188820123672485}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 810, "completion_tokens": 284, "duration": 7.761960029602051}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    result = {letter: count for letter, count in hist.items() if count == max_count}\n    \n    return result", "prompt_tokens": 628, "completion_tokens": 213, "duration": 4.9505650997161865}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 742, "completion_tokens": 273, "duration": 5.649412155151367}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements in the string {} of the input.\".format(sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 770, "completion_tokens": 291, "duration": 10.465381383895874}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum", "prompt_tokens": 531, "completion_tokens": 236, "duration": 4.918513774871826}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1119, "completion_tokens": 327, "duration": 7.63031530380249}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 822, "completion_tokens": 327, "duration": 10.220969915390015}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n# Test with an empty string and n = 3 should return an empty list\nassert select_words(\"\", 3) == []\n\n# Test with n = 4 should return [\"little\"] as it is the only word with 4 consonants\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n\n# Test with n = 3 should return [\"Mary\", \"lamb\"] as these are the words with 3 consonants\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n\n# Test with n = 2 should return an empty list as there are no words with 2 consonants\nassert select_words(\"simple white space\", 2) == []\n\n# Test with n = 4 should return [\"world\"] as it is the only word with 4 consonants\nassert select_words(\"Hello world\", 4) == [\"world\"]\n\n# Test with n = 3 should return [\"Uncle\"] as it is the only word with 3 consonants\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "prompt_tokens": 779, "completion_tokens": 546, "duration": 12.801926612854004}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test with a word containing a vowel between two consonants from the right side\nassert get_closest_vowel(\"yogurt\") == \"u\"\n\n# Test with a word containing a vowel between two consonants from the right side\nassert get_closest_vowel(\"FULL\") == \"U\"\n\n# Test with a word containing no vowel between two consonants from the right side\nassert get_closest_vowel(\"quick\") == \"\"\n\n# Test with a word having less than 3 characters\nassert get_closest_vowel(\"ab\") == \"\"\n\n# Test with a word containing only vowels\nassert get_closest_vowel(\"aeiou\") == \"\"\n\n# Test with a word containing only consonants\nassert get_closest_vowel(\"xyz\") == \"\"", "prompt_tokens": 643, "completion_tokens": 412, "duration": 10.223196506500244}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    close_count += 1\n\n    return 'Yes' if open_count == close_count == 0 else 'No'", "prompt_tokens": 729, "completion_tokens": 300, "duration": 6.47078013420105}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 889, "completion_tokens": 290, "duration": 8.648967027664185}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 524, "completion_tokens": 186, "duration": 7.352041482925415}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 639, "completion_tokens": 231, "duration": 7.692819118499756}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    res = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            res.append(n)\n    return sorted(set(res))", "prompt_tokens": 1528, "completion_tokens": 621, "duration": 13.952780485153198}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(year) != 4:\n        return False\n\n    if month.isdigit() and day.isdigit() and year.isdigit():\n        month, day, year = int(month), int(day), int(year)\n    else:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1433, "completion_tokens": 607, "duration": 15.667505264282227}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 642, "completion_tokens": 239, "duration": 8.635340213775635}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst.count(x) <= 1 for x in lst)", "prompt_tokens": 952, "completion_tokens": 302, "duration": 7.307335138320923}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 786, "completion_tokens": 230, "duration": 6.749671936035156}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        product *= sign\n        magnitude_sum += abs(num)\n    \n    return product * magnitude_sum", "prompt_tokens": 500, "completion_tokens": 152, "duration": 5.67155385017395}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def minPathUtil(row, col, path):\n        if len(path) == k:\n            return path.copy()\n        path.append(grid[row][col])\n        if row % 2 == 0:\n            if col < len(grid[0]) - 1:\n                return minPathUtil(row, col + 1, path.copy())\n            elif row < len(grid) - 1:\n                return minPathUtil(row + 1, col, path.copy())\n        else:\n            if col > 0:\n                return minPathUtil(row, col - 1, path.copy())\n            elif row < len(grid) - 1:\n                return minPathUtil(row + 1, col, path.copy())\n\n    return minPathUtil(0, 0, [])", "prompt_tokens": 3279, "completion_tokens": 1498, "duration": 27.57916831970215}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        tribonacci = [3, 1, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 803, "completion_tokens": 276, "duration": 7.154208660125732}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 450, "completion_tokens": 171, "duration": 5.604159593582153}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1006, "completion_tokens": 538, "duration": 9.913546085357666}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num) ** 2\n    return total", "prompt_tokens": 758, "completion_tokens": 296, "duration": 8.35743260383606}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 594, "completion_tokens": 172, "duration": 3.674459934234619}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 603, "completion_tokens": 267, "duration": 7.141050338745117}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    \n    largest_neg = None if not neg_nums else max(neg_nums)\n    smallest_pos = None if not pos_nums else min(pos_nums)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 637, "completion_tokens": 259, "duration": 6.951601505279541}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == int:\n        return a if float(a.replace(',', '.')) > b else str(b)\n    elif type(a) == str and type(b) == float:\n        return a if float(a.replace(',', '.')) > b else str(b)\n    elif type(a) == int and type(b) == str:\n        return str(a) if a > float(b.replace(',', '.')) else b\n    elif type(a) == float and type(b) == str:\n        return str(a) if a > float(b.replace(',', '.')) else b\n    else:\n        return None", "prompt_tokens": 646, "completion_tokens": 369, "duration": 10.436274766921997}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 538, "completion_tokens": 220, "duration": 5.174393892288208}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    factorial = 1\n    result = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 542, "completion_tokens": 216, "duration": 7.726445198059082}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('   ', '-')\n    text = text.replace('  ', '_')\n    return text", "prompt_tokens": 499, "completion_tokens": 136, "duration": 3.1193912029266357}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or '.' not in file_name or len(file_name.split('.')[0]) == 0:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 776, "completion_tokens": 259, "duration": 6.95703125}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 738, "completion_tokens": 292, "duration": 5.2340826988220215}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 683, "completion_tokens": 300, "duration": 8.633752822875977}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 585, "completion_tokens": 151, "duration": 3.856394052505493}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 591, "completion_tokens": 213, "duration": 4.395600318908691}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 615, "completion_tokens": 239, "duration": 6.063914060592651}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 779, "completion_tokens": 371, "duration": 6.625348329544067}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 803, "completion_tokens": 335, "duration": 8.8090238571167}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 758, "completion_tokens": 245, "duration": 5.845975637435913}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 510, "completion_tokens": 239, "duration": 4.719757318496704}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 2130, "completion_tokens": 1025, "duration": 22.454581260681152}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 856, "completion_tokens": 242, "duration": 5.541380167007446}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n    max_strength = max(strengths)\n    max_idx = strengths.index(max_strength)\n    return f\"{class_name}.{extensions[max_idx]}\"", "prompt_tokens": 1015, "completion_tokens": 353, "duration": 8.860231876373291}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 640, "completion_tokens": 243, "duration": 7.894842147827148}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 440, "completion_tokens": 197, "duration": 7.42180323600769}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 475, "completion_tokens": 275, "duration": 5.555272340774536}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 554, "completion_tokens": 182, "duration": 4.801475286483765}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 575, "completion_tokens": 243, "duration": 7.991518259048462}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1073, "completion_tokens": 386, "duration": 13.30454969406128}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i+1]\n        elif operators[i] == '-':\n            result -= operands[i+1]\n        elif operators[i] == '*':\n            result *= operands[i+1]\n        elif operators[i] == '//':\n            result //= operands[i+1]\n        elif operators[i] == '**':\n            result **= operands[i+1]\n    return result", "prompt_tokens": 852, "completion_tokens": 368, "duration": 6.313775300979614}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result.swapcase()\n    else:\n        return result[::-1]", "prompt_tokens": 526, "completion_tokens": 204, "duration": 4.682309865951538}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 547, "completion_tokens": 241, "duration": 5.767532587051392}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 663, "completion_tokens": 306, "duration": 5.8138978481292725}
