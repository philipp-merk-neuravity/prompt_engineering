{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 660, "completion_tokens": 296, "duration": 6.3154895305633545}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current += char\n        elif char == ')':\n            count -= 1\n            current += char\n            if count == 0:\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 667, "completion_tokens": 350, "duration": 6.789703369140625}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 507, "completion_tokens": 175, "duration": 5.261487722396851}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 554, "completion_tokens": 187, "duration": 5.231900691986084}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 599, "completion_tokens": 233, "duration": 5.686356782913208}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]\n\n# Testing with an empty list should return an empty list\nassert intersperse([], 4) == []\n\n# Testing with a list of numbers and a delimiter\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n# Testing with a list of numbers and a delimiter as 0\n# Delimiter 0 should be inserted between every two consecutive elements\nassert intersperse([5, 10, 15], 0) == [5, 0, 10, 0, 15]\n\n# Testing with a list of negative numbers and a negative delimiter\n# Negative delimiter should be inserted between every two consecutive elements\nassert intersperse([-2, -4, -6], -1) == [-2, -1, -4, -1, -6]\n\n# Testing with a list of numbers where all elements are the same\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([7, 7, 7, 7], 0) == [7, 0, 7, 0, 7, 0, 7]\n\n# Testing with a list of numbers where the delimiter is larger than the elements\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([100, 200, 300], 500) == [100, 500, 200, 500, 300]", "prompt_tokens": 690, "completion_tokens": 688, "duration": 11.241539478302002}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 696, "completion_tokens": 385, "duration": 7.4599525928497314}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 576, "completion_tokens": 246, "duration": 5.5328288078308105}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n\n    return sum_result, product_result", "prompt_tokens": 670, "completion_tokens": 340, "duration": 6.836949586868286}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 652, "completion_tokens": 325, "duration": 6.748286247253418}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 565, "completion_tokens": 200, "duration": 5.487182855606079}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result", "prompt_tokens": 511, "completion_tokens": 225, "duration": 4.98249888420105}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), -strings.index(x)))", "prompt_tokens": 879, "completion_tokens": 335, "duration": 8.520058393478394}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 451, "completion_tokens": 157, "duration": 4.360527038574219}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 390, "completion_tokens": 131, "duration": 4.30501914024353}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 630, "completion_tokens": 168, "duration": 4.802161931991577}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 1029, "completion_tokens": 398, "duration": 9.341809511184692}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_notes = music_string.split()\n    return [notes.get(note, 0) for note in music_notes]", "prompt_tokens": 1849, "completion_tokens": 872, "duration": 18.328491687774658}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 148, "duration": 4.442899227142334}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'\n    }\n\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 563, "completion_tokens": 283, "duration": 6.1522133350372314}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair", "prompt_tokens": 807, "completion_tokens": 401, "duration": 8.415251016616821}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 787, "completion_tokens": 415, "duration": 7.474453449249268}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 570, "completion_tokens": 243, "duration": 4.906006336212158}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 323, "completion_tokens": 73, "duration": 4.299060821533203}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 398, "completion_tokens": 153, "duration": 4.585190773010254}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n\n# Test factorizing a prime number\nassert factorize(11) == [11]\n\n# Test factorizing a perfect square of a prime number\nassert factorize(25) == [5, 5]\n\n# Test factorizing a number with repeated prime factors\nassert factorize(72) == [2, 2, 2, 3, 3]\n\n# Test factorizing a number with prime factors and non-prime factors\nassert factorize(70) == [2, 5, 7]\n\n# Test factorizing the number 1 (should return an empty list)\nassert factorize(1) == []", "prompt_tokens": 568, "completion_tokens": 339, "duration": 6.951383352279663}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 624, "completion_tokens": 312, "duration": 7.2168519496917725}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])", "prompt_tokens": 417, "completion_tokens": 174, "duration": 4.564584732055664}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 371, "completion_tokens": 100, "duration": 3.4340646266937256}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 241, "duration": 6.05673885345459}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 595, "completion_tokens": 211, "duration": 5.131182670593262}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 566, "completion_tokens": 242, "duration": 5.929847240447998}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List xs must have an even number of coefficients.\")\n    \n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs[1:]])\n    \n    # Find the zero point\n    return round(next(x for x in range(-largest_coeff, largest_coeff) if poly(xs, x) == 0), 2)", "prompt_tokens": 1503, "completion_tokens": 695, "duration": 17.01627016067505}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    for i in range(0, len(l), 3):\n        result[i:i+3] = sorted(result[i:i+3])\n    return result", "prompt_tokens": 701, "completion_tokens": 268, "duration": 7.129175662994385}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 587, "completion_tokens": 275, "duration": 6.641361236572266}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 503, "completion_tokens": 172, "duration": 6.12016224861145}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 480, "completion_tokens": 202, "duration": 5.5506837368011475}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    odd_indices = l[::2]\n    even_indices = sorted(l[1::2])\n    result = [val for pair in zip(odd_indices, even_indices) for val in pair]\n    return result", "prompt_tokens": 621, "completion_tokens": 248, "duration": 5.73026967048645}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[-1] + s[:-1] if len(s) == 3 else s for s in [s[i:i+3] for i in range(0, len(s), 3)]]\n    return \"\".join(groups)", "prompt_tokens": 682, "completion_tokens": 325, "duration": 6.084585189819336}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 530, "completion_tokens": 330, "duration": 8.326737403869629}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 751, "completion_tokens": 282, "duration": 6.38282585144043}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n*n", "prompt_tokens": 684, "completion_tokens": 215, "duration": 5.97270655632019}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 571, "completion_tokens": 195, "duration": 7.627931594848633}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 669, "completion_tokens": 212, "duration": 7.475641250610352}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res", "prompt_tokens": 453, "completion_tokens": 134, "duration": 3.3473126888275146}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 436, "completion_tokens": 183, "duration": 3.2249152660369873}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 2):\n        a, b, c, d = b, c, d, a + b + c + d\n    return c", "prompt_tokens": 722, "completion_tokens": 266, "duration": 5.97259783744812}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 524, "completion_tokens": 267, "duration": 7.928804159164429}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 424, "completion_tokens": 118, "duration": 4.614989995956421}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 164, "duration": 4.321116924285889}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])", "prompt_tokens": 1912, "completion_tokens": 899, "duration": 17.176883697509766}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 578, "completion_tokens": 179, "duration": 7.3445634841918945}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 490, "completion_tokens": 175, "duration": 4.192967414855957}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 5.1259801387786865}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 646, "completion_tokens": 211, "duration": 6.335115432739258}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 346, "completion_tokens": 110, "duration": 2.97375750541687}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 460, "completion_tokens": 151, "duration": 8.129777669906616}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 745, "completion_tokens": 253, "duration": 8.18025016784668}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 664, "completion_tokens": 283, "duration": 6.883795261383057}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n# Test with a number that has a prime factor greater than 2\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to ensure the function correctly returns 2\nassert largest_prime_factor(2048) == 2\n\n# Test with a number that has a prime factor greater than 2 but is not the largest prime factor\nassert largest_prime_factor(90) == 5\n\n# Test with a number where the largest prime factor is the square root of the number\nassert largest_prime_factor(49) == 7\n\n# Test with a number that has multiple prime factors\nassert largest_prime_factor(315) == 7", "prompt_tokens": 455, "completion_tokens": 384, "duration": 10.418313264846802}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 724, "completion_tokens": 172, "duration": 7.675479412078857}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 491, "completion_tokens": 183, "duration": 7.172269105911255}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test a simple linear polynomial: 3 + 2x\nassert derivative([3, 2]) == [2]\n\n# Test a quadratic polynomial: 1 + 3x + 2x^2\nassert derivative([1, 3, 2]) == [3, 4]\n\n# Test a polynomial with all coefficients being 0\nassert derivative([0, 0, 0, 0]) == [0, 0, 0]\n\n# Test a cubic polynomial: 5 + 4x + 3x^2 + 2x^3\nassert derivative([5, 4, 3, 2]) == [4, 6, 6]\n\n# Test a polynomial with only a constant term\nassert derivative([7]) == []", "prompt_tokens": 567, "completion_tokens": 361, "duration": 7.266570806503296}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 677, "completion_tokens": 268, "duration": 8.143429517745972}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n\n    if s[-1].lower() == 'y' and s[-2].lower() not in vowels:\n        count -= 1\n\n    return count", "prompt_tokens": 1067, "completion_tokens": 486, "duration": 11.377921104431152}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 505, "completion_tokens": 195, "duration": 5.414011478424072}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 603, "completion_tokens": 220, "duration": 8.358243227005005}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if fruits[0].isdigit() else 0\n    oranges = int(fruits[-2]) if fruits[-2].isdigit() else 0\n    return n - apples - oranges", "prompt_tokens": 758, "completion_tokens": 220, "duration": 5.776386976242065}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n            smallest_even = num\n            smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    return []", "prompt_tokens": 1019, "completion_tokens": 299, "duration": 9.924739837646484}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 786, "completion_tokens": 320, "duration": 6.62468409538269}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 610, "completion_tokens": 221, "duration": 8.43198275566101}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 613, "completion_tokens": 280, "duration": 5.373045921325684}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 894, "completion_tokens": 277, "duration": 8.413573980331421}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 700, "completion_tokens": 257, "duration": 8.703673362731934}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 747, "completion_tokens": 248, "duration": 6.8968541622161865}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(num):\n        count = 0\n        for i in range(2, num):\n            if is_prime(i) and num % i == 0:\n                count += 1\n        return count\n\n    return count_primes(a) == 3", "prompt_tokens": 464, "completion_tokens": 243, "duration": 36.010926246643066}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 685, "completion_tokens": 242, "duration": 12.396313428878784}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 519, "completion_tokens": 147, "duration": 6.106945991516113}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(digit in prime_hex_digits for digit in num)\n    return count", "prompt_tokens": 1086, "completion_tokens": 356, "duration": 7.67327880859375}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'", "prompt_tokens": 582, "completion_tokens": 144, "duration": 3.5866167545318604}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 599, "completion_tokens": 249, "duration": 5.960211992263794}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 926, "completion_tokens": 436, "duration": 7.807457685470581}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 428, "completion_tokens": 144, "duration": 3.0193121433258057}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 512, "completion_tokens": 304, "duration": 5.848908185958862}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(x) for x in str(N)))[2:]", "prompt_tokens": 549, "completion_tokens": 125, "duration": 7.077888011932373}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 453, "completion_tokens": 199, "duration": 5.7014570236206055}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 554, "completion_tokens": 159, "duration": 3.5980513095855713}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, val in sorted(enumerate(row), key=lambda k: k[1], reverse=True):\n                result.append((i, j))\n    return result", "prompt_tokens": 877, "completion_tokens": 240, "duration": 8.14383053779602}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 822, "completion_tokens": 283, "duration": 5.180771112442017}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                start = ord('A')\n            else:\n                start = ord('a')\n            result += chr(((ord(char) - start + shift) % 26) + start)\n        else:\n            result += char\n    return result", "prompt_tokens": 605, "completion_tokens": 288, "duration": 8.542344570159912}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "prompt_tokens": 611, "completion_tokens": 218, "duration": 5.739809274673462}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 1045, "completion_tokens": 488, "duration": 11.962722539901733}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 596, "completion_tokens": 197, "duration": 8.19344186782837}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    \n    return encoded_message", "prompt_tokens": 504, "completion_tokens": 168, "duration": 4.309514045715332}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum_digits(largest_prime)", "prompt_tokens": 1078, "completion_tokens": 447, "duration": 9.663011312484741}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 663, "completion_tokens": 190, "duration": 6.753844261169434}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.593997240066528}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 495, "completion_tokens": 146, "duration": 5.552312135696411}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 449, "completion_tokens": 162, "duration": 4.719067096710205}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 664, "completion_tokens": 208, "duration": 12.192440032958984}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 0:\n        n += 2 if n % 2 == 0 else 2\n        stones.append(n)\n        n -= 1\n    return stones[:-1]", "prompt_tokens": 640, "completion_tokens": 249, "duration": 6.384829759597778}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split() if word.strip()]", "prompt_tokens": 635, "completion_tokens": 249, "duration": 8.205418586730957}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 609, "completion_tokens": 293, "duration": 5.009244680404663}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 623, "completion_tokens": 200, "duration": 5.84458589553833}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 785, "completion_tokens": 222, "duration": 6.859076023101807}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [mapping[num] for num in filtered_sorted_arr]", "prompt_tokens": 942, "completion_tokens": 322, "duration": 6.773925304412842}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 810, "completion_tokens": 462, "duration": 9.425341367721558}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 878, "completion_tokens": 376, "duration": 8.590057849884033}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 609, "completion_tokens": 224, "duration": 6.591813087463379}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_index = arr.index(min(arr))\n    return sorted(arr) == arr[min_index:] + arr[:min_index]", "prompt_tokens": 3368, "completion_tokens": 1066, "duration": 24.204795837402344}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 833, "completion_tokens": 307, "duration": 9.363691091537476}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n\n    max_count = max(hist.values(), default=0)\n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 639, "completion_tokens": 221, "duration": 4.539597034454346}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join([char for char in s if char not in c])\n    return (res, res == res[::-1])", "prompt_tokens": 683, "completion_tokens": 216, "duration": 5.989326477050781}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 1029, "completion_tokens": 612, "duration": 9.694540977478027}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 559, "completion_tokens": 259, "duration": 5.6132965087890625}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1815, "completion_tokens": 610, "duration": 10.952299356460571}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 806, "completion_tokens": 311, "duration": 5.795903444290161}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 729, "completion_tokens": 260, "duration": 7.015610933303833}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = set('AEIOUaeiou')\n    consonants = set('BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')\n\n    word = word[1:-1]  # Remove first and last character\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and all(c in consonants for c in word[i+1:]):\n            return word[i]\n    return \"\"", "prompt_tokens": 622, "completion_tokens": 249, "duration": 7.737748622894287}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 690, "completion_tokens": 233, "duration": 7.641258955001831}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 834, "completion_tokens": 235, "duration": 6.856811285018921}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 536, "completion_tokens": 198, "duration": 4.966894149780273}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "prompt_tokens": 708, "completion_tokens": 300, "duration": 7.004823446273804}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(set([num for num in collatz_seq if num % 2 == 1]))", "prompt_tokens": 951, "completion_tokens": 390, "duration": 11.070708751678467}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 922, "completion_tokens": 388, "duration": 7.344411849975586}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 611, "completion_tokens": 208, "duration": 7.132554531097412}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = set()\n    prev = None\n    for num in lst:\n        if num in seen:\n            return False\n        if prev is not None and num < prev:\n            return False\n        seen.add(num)\n        prev = num\n    return True", "prompt_tokens": 988, "completion_tokens": 371, "duration": 6.531697034835815}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 805, "completion_tokens": 264, "duration": 6.2839744091033936}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    sum_magnitudes = sum(abs(num) for num in arr)\n    \n    return product * sum_magnitudes", "prompt_tokens": 503, "completion_tokens": 140, "duration": 3.6149415969848633}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        if (i, j) in visited:\n            return None\n        visited.add((i, j))\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n:\n                res = dfs(x, y, path + [grid[x][y]])\n                if res:\n                    return res\n        visited.remove((i, j))\n        return None\n\n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1235, "completion_tokens": 448, "duration": 11.728124380111694}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3] * (n+1)\n    if n >= 1:\n        tribonacci[1] = 1\n    if n >= 2:\n        tribonacci[2] = 2\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i // 2\n        else:\n            tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3]\n    return tribonacci", "prompt_tokens": 803, "completion_tokens": 276, "duration": 5.7573254108428955}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return 0 if result == 1 else result", "prompt_tokens": 427, "completion_tokens": 156, "duration": 5.954681158065796}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2", "prompt_tokens": 573, "completion_tokens": 177, "duration": 5.708317041397095}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x)**2 for x in map(lambda x: -(-x//1), lst)])", "prompt_tokens": 1184, "completion_tokens": 470, "duration": 11.430423974990845}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 587, "completion_tokens": 160, "duration": 6.306674480438232}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 551, "completion_tokens": 214, "duration": 4.637089014053345}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    max_neg = None if not neg_integers else max(neg_integers)\n    min_pos = None if not pos_integers else min(pos_integers)\n\n    return (max_neg, min_pos)", "prompt_tokens": 632, "completion_tokens": 257, "duration": 8.639305830001831}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = a.replace(',', '.')\n    if isinstance(b, str) and ',' in b:\n        b = b.replace(',', '.')\n    \n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 727, "completion_tokens": 331, "duration": 6.0582122802734375}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 541, "completion_tokens": 223, "duration": 8.681403636932373}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 595, "completion_tokens": 269, "duration": 6.734647512435913}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    while '__' in text:\n        text = text.replace('__', '_')\n    return text", "prompt_tokens": 492, "completion_tokens": 150, "duration": 3.2664475440979004}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 798, "completion_tokens": 290, "duration": 8.139334201812744}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result", "prompt_tokens": 779, "completion_tokens": 324, "duration": 8.481559753417969}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    result = [word for word in sentence if is_prime(len(word))]\n    return ' '.join(result)", "prompt_tokens": 593, "completion_tokens": 207, "duration": 7.635401725769043}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 582, "completion_tokens": 121, "duration": 3.0636470317840576}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 1127, "completion_tokens": 556, "duration": 12.67089557647705}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 252, "duration": 5.463404655456543}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 684, "completion_tokens": 262, "duration": 6.063695907592773}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 797, "completion_tokens": 318, "duration": 5.191333055496216}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 736, "completion_tokens": 208, "duration": 6.621301651000977}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 529, "completion_tokens": 258, "duration": 8.31685495376587}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test when input list has positive odd numbers\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test when input list has positive even numbers\nassert double_the_difference([2, 4, 6]) == 0\n\n# Test when input list has positive odd and even numbers\nassert double_the_difference([1, 2, 3, 4]) == 10\n\n# Test when input list has negative numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test when input list has mix of negative, positive, odd, and even numbers\nassert double_the_difference([-1, 2, 3, -4, 5]) == 34\n\n# Test when input list contains only 0\nassert double_the_difference([0, 0, 0, 0]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 663, "completion_tokens": 440, "duration": 10.858404874801636}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 977, "completion_tokens": 363, "duration": 6.981679916381836}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = None\n    \n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 952, "completion_tokens": 314, "duration": 9.582022190093994}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 586, "completion_tokens": 189, "duration": 6.416850566864014}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 442, "completion_tokens": 195, "duration": 6.379764556884766}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return None\n\n    val = [\n        1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n    ]\n    syms = [\n        'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'\n    ]\n    roman_num = ''\n    i = 12\n    while number:\n        div = number // val[i]\n        number %= val[i]\n        roman_num += syms[i] * div\n        i -= 1\n    return roman_num.lower()", "prompt_tokens": 521, "completion_tokens": 315, "duration": 8.552236080169678}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 572, "completion_tokens": 200, "duration": 5.836813449859619}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_chars\n    \n    return max_word", "prompt_tokens": 551, "completion_tokens": 201, "duration": 4.246002674102783}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meal = max(0, remaining - need)\n    return [total_eaten, remaining_after_meal]", "prompt_tokens": 985, "completion_tokens": 300, "duration": 10.075165748596191}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 819, "completion_tokens": 338, "duration": 9.351251125335693}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result = char + result\n    return result", "prompt_tokens": 572, "completion_tokens": 221, "duration": 4.417879819869995}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 446, "completion_tokens": 145, "duration": 3.347747325897217}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if any(int(digit) % 2 == 0 for digit in str(i) if digit.isdigit())]", "prompt_tokens": 829, "completion_tokens": 290, "duration": 7.8217527866363525}
