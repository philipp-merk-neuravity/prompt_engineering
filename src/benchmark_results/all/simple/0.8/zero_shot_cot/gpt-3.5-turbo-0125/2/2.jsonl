{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 630, "completion_tokens": 265, "duration": 5.988698720932007}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > 1:\n                current += char\n        elif char == ')':\n            count -= 1\n            if count > 0:\n                current += char\n            if count == 0:\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 650, "completion_tokens": 347, "duration": 6.946687698364258}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 525, "completion_tokens": 193, "duration": 5.600569248199463}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 546, "completion_tokens": 174, "duration": 4.689958095550537}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return statistics.mean([abs(x - statistics.mean(numbers)) for x in numbers])", "prompt_tokens": 801, "completion_tokens": 425, "duration": 7.381053447723389}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 666, "completion_tokens": 362, "duration": 8.190033912658691}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    levels.append(max_level)\n    return levels", "prompt_tokens": 523, "completion_tokens": 237, "duration": 5.445202350616455}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 544, "completion_tokens": 214, "duration": 5.493226051330566}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)", "prompt_tokens": 700, "completion_tokens": 351, "duration": 7.025449275970459}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[-1]))\n\n    return result", "prompt_tokens": 739, "completion_tokens": 423, "duration": 8.370160341262817}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n# Testing an empty string\nassert is_palindrome('') == True\n\n# Testing a single-character palindrome\nassert is_palindrome('a') == True\n\n# Testing a palindrome with even number of characters\nassert is_palindrome('racecar') == True\n\n# Testing a palindrome with odd number of characters\nassert is_palindrome('level') == True\n\n# Testing a non-palindrome string\nassert is_palindrome('hello') == False", "prompt_tokens": 564, "completion_tokens": 328, "duration": 6.730937480926514}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 449, "completion_tokens": 167, "duration": 4.134518623352051}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s", "prompt_tokens": 525, "completion_tokens": 196, "duration": 4.757850885391235}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 497, "completion_tokens": 211, "duration": 4.830767393112183}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 393, "completion_tokens": 129, "duration": 4.046243190765381}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 651, "completion_tokens": 186, "duration": 5.418357849121094}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 449, "completion_tokens": 147, "duration": 4.517662048339844}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes.get(note, 0) for note in music_string.split()]\n\n# Testing with a simple input string containing only one type of note\nassert parse_music('o o o o') == [4, 4, 4, 4]\n\n# Testing with a string containing different types of notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4]\n\n# Testing with a string where all notes are quater notes\nassert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n\n# Testing with an empty string\nassert parse_music('') == []\n\n# Testing with a string that contains invalid notes\nassert parse_music('o a .|') == []  # Function should ignore invalid notes and return an empty list", "prompt_tokens": 2766, "completion_tokens": 1437, "duration": 28.609867334365845}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 449, "completion_tokens": 149, "duration": 3.938832998275757}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 511, "completion_tokens": 233, "duration": 6.125159740447998}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 813, "completion_tokens": 378, "duration": 6.574844121932983}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 711, "completion_tokens": 340, "duration": 6.9652369022369385}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 587, "completion_tokens": 253, "duration": 6.2823145389556885}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 338, "completion_tokens": 88, "duration": 2.815004348754883}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = n // 2\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor", "prompt_tokens": 368, "completion_tokens": 121, "duration": 3.3629183769226074}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 600, "completion_tokens": 245, "duration": 5.310128211975098}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 512, "completion_tokens": 191, "duration": 6.394010782241821}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 399, "completion_tokens": 140, "duration": 5.596065044403076}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 384, "completion_tokens": 113, "duration": 3.5739293098449707}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 227, "duration": 4.650522470474243}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 603, "completion_tokens": 219, "duration": 4.58053183555603}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 511, "completion_tokens": 186, "duration": 4.2263782024383545}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    n = len(xs)\n    assert n % 2 == 0, \"List of coefficients must have an even number of elements\"\n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    def f(x):\n        return poly(xs, x)\n    \n    if f(0) == 0:\n        return 0\n    \n    x = 0\n    while f(x) != 0:\n        x += 1\n    return x", "prompt_tokens": 1092, "completion_tokens": 547, "duration": 56.46009373664856}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [val for idx, val in enumerate(l) if idx % 3 == 0]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for idx, val in zip(indices_divisible_by_three, sorted_values):\n        result[idx] = val\n    \n    return result", "prompt_tokens": 649, "completion_tokens": 259, "duration": 5.104178190231323}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 529, "completion_tokens": 218, "duration": 4.629363536834717}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 497, "completion_tokens": 166, "duration": 6.469985246658325}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 480, "completion_tokens": 202, "duration": 4.088808059692383}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    new_list = l.copy()\n    for i in range(0, len(l), 2):\n        new_list[i] = sorted(l[i:i+2])[0]\n    return new_list", "prompt_tokens": 643, "completion_tokens": 266, "duration": 5.636077404022217}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    # Reverse the cyclic transformation to decode the string\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)", "prompt_tokens": 697, "completion_tokens": 366, "duration": 7.775495767593384}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 482, "completion_tokens": 260, "duration": 6.436005592346191}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 672, "completion_tokens": 238, "duration": 5.839179515838623}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road\nassert car_race_collision(0) == 0\n# No cars, so no collisions should occur\n\n# Test when there is only one car on each side of the road\nassert car_race_collision(1) == 1\n# Only one pair of cars, so they will collide\n\n# Test when there are 5 cars on each side of the road\nassert car_race_collision(5) == 5\n# Each car moving left to right will collide with a car moving right to left, so there will be 5 collisions\n\n# Test when there are an even number of cars on each side of the road\nassert car_race_collision(4) == 4\n# Each car moving left to right will collide with a car moving right to left, so there will be 4 collisions\n\n# Test when there are an odd number of cars on each side of the road\nassert car_race_collision(3) == 3\n# Each car moving left to right will collide with a car moving right to left, so there will be 3 collisions", "prompt_tokens": 717, "completion_tokens": 474, "duration": 11.693050384521484}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 589, "completion_tokens": 213, "duration": 4.919618368148804}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 640, "completion_tokens": 183, "duration": 4.751931667327881}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "prompt_tokens": 454, "completion_tokens": 155, "duration": 5.471034049987793}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 381, "completion_tokens": 123, "duration": 6.3764283657073975}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            result = a + b + c + d\n            a, b, c, d = b, c, d, result\n        return result", "prompt_tokens": 773, "completion_tokens": 364, "duration": 6.596505641937256}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 551, "completion_tokens": 280, "duration": 7.4602601528167725}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 5.840080738067627}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 3.190300703048706}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 527, "completion_tokens": 207, "duration": 8.17776107788086}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test empty string\nassert remove_vowels('') == ''\n\n# Test string with vowels and new line character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test string with upper and lowercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 541, "completion_tokens": 250, "duration": 4.97912335395813}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 491, "completion_tokens": 176, "duration": 3.5339243412017822}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 5.812507629394531}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 643, "completion_tokens": 208, "duration": 5.697371482849121}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 396, "completion_tokens": 147, "duration": 6.681493282318115}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 450, "completion_tokens": 141, "duration": 4.961807489395142}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 829, "completion_tokens": 337, "duration": 10.526407241821289}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 831, "completion_tokens": 231, "duration": 9.118304967880249}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n    \n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    \n    return max(prime_factors)\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\nassert largest_prime_factor(56) == 7\nassert largest_prime_factor(987654321) == 379721\nassert largest_prime_factor(1000000000) == 5", "prompt_tokens": 493, "completion_tokens": 396, "duration": 9.680079221725464}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 203, "duration": 6.725942134857178}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 444, "completion_tokens": 145, "duration": 5.177096128463745}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [coeff * exp for exp, coeff in enumerate(xs)][1:]", "prompt_tokens": 1205, "completion_tokens": 630, "duration": 14.731068849563599}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 755, "completion_tokens": 339, "duration": 6.145360946655273}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count", "prompt_tokens": 567, "completion_tokens": 200, "duration": 6.425106763839722}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 533, "completion_tokens": 240, "duration": 6.911080598831177}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 544, "completion_tokens": 161, "duration": 5.186908006668091}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if 'apples' in fruits else 0\n    oranges = int(fruits[-1]) if 'oranges' in fruits else 0\n    return n - apples - oranges", "prompt_tokens": 728, "completion_tokens": 190, "duration": 7.5771565437316895}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    \n    if not even_nodes:\n        return []\n    \n    min_even_value = min(even_nodes)[0]\n    min_even_nodes = [node for node in even_nodes if node[0] == min_even_value]\n    \n    return min(min_even_nodes, key=lambda x: x[1])\n\n# Test when the input array is empty\nassert pluck([]) == []\n\n# Test when all nodes in the array are odd\nassert pluck([1, 3, 5, 7]) == []\n\n# Test when there is only one even node in the array\nassert pluck([6]) == [6, 0]\n\n# Test when there are multiple even nodes with different values\nassert pluck([4, 8, 2, 6]) == [2, 2]\n\n# Test when there are multiple even nodes with the same smallest value\nassert pluck([4, 2, 6, 2]) == [2, 1]\n\n# Test when there are multiple even nodes with the same smallest value but different indexes\nassert pluck([6, 2, 4, 2]) == [2, 1]\n\n# Test a large array with mixed even and odd nodes\nassert pluck([9, 3, 2, 7, 5, 4, 8, 1]) == [2, 2]\n\n# Test a large array with only even nodes\nassert pluck([10, 8, 6, 4, 2]) == [2, 4]", "prompt_tokens": 4110, "completion_tokens": 2044, "duration": 40.87546181678772}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 776, "completion_tokens": 315, "duration": 10.711772203445435}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 618, "completion_tokens": 236, "duration": 7.20827841758728}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 269, "duration": 8.23528265953064}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 777, "completion_tokens": 160, "duration": 5.653827428817749}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n\n# Test with an array that is already a palindrome\nassert smallest_change([1, 2, 3, 2, 1]) == 0\n\n# Test with an array where one change is needed to make it a palindrome\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\n# Test with an array where multiple changes are needed to make it a palindrome\nassert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n\n# Test with an array containing negative numbers\nassert smallest_change([-1, -2, -3, -4, -3, -2, -1]) == 0\n\n# Test with an array of all the same elements\nassert smallest_change([0, 0, 0, 0, 0, 0, 0]) == 0", "prompt_tokens": 702, "completion_tokens": 459, "duration": 10.843014240264893}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 748, "completion_tokens": 250, "duration": 9.1275954246521}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test for a number that is the multiplication of 3 prime numbers\nassert is_multiply_prime(30) == True\n\n# Test for a prime number\nassert is_multiply_prime(17) == False\n\n# Test for a non-prime number that is not the multiplication of 3 prime numbers\nassert is_multiply_prime(40) == False\n\n# Test for the number 1 which is not a multiplication of 3 prime numbers\nassert is_multiply_prime(1) == False", "prompt_tokens": 445, "completion_tokens": 308, "duration": 6.408599138259888}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 650, "completion_tokens": 207, "duration": 5.282055616378784}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 823, "completion_tokens": 266, "duration": 5.590341567993164}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 985, "completion_tokens": 262, "duration": 6.002559661865234}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 578, "completion_tokens": 140, "duration": 5.155961990356445}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 581, "completion_tokens": 235, "duration": 8.607537746429443}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    result = []\n    for gpa in grades:\n        for key in grade_table:\n            if gpa >= key:\n                result.append(grade_table[key])\n                break\n    \n    return result", "prompt_tokens": 1058, "completion_tokens": 508, "duration": 13.301189422607422}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test for a string with a prime length\nassert prime_length('Hello') == True\n\n# Test for another string with a prime length\nassert prime_length('abcdcba') == True\n\n# Test for a string with a prime length\nassert prime_length('kittens') == True\n\n# Test for a string with a non-prime length\nassert prime_length('orange') == False", "prompt_tokens": 430, "completion_tokens": 235, "duration": 6.49945592880249}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 567, "completion_tokens": 336, "duration": 6.097299337387085}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(map(int, bin(N)[2:]))\n    return bin(binary_sum)[2:]", "prompt_tokens": 571, "completion_tokens": 153, "duration": 4.525745868682861}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 491, "completion_tokens": 237, "duration": 8.090150356292725}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    ordered_words = []\n    for word in s.split():\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 581, "completion_tokens": 185, "duration": 4.842269420623779}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test when the input list is not empty and x is found in multiple rows with multiple occurrences\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the input list is empty\nassert get_row([], 1) == []\n\n# Test when x is found only in one row with multiple occurrences\nassert get_row([[], [1], [1, 2, 3]], 1) == [(1, 0), (2, 2)]\n\n# Test when x is found in multiple rows but only once in each row\nassert get_row([[1, 2, 3], [4, 5], [6, 7, 1]], 1) == [(0, 2), (2, 2)]\n\n# Test when x is not found in the list\nassert get_row([[2, 3], [4, 5], [6, 7]], 1) == []", "prompt_tokens": 3683, "completion_tokens": 1906, "duration": 42.10300016403198}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 759, "completion_tokens": 220, "duration": 5.490818977355957}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    rotated_alphabet = str.maketrans(\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\n    )\n    return s.translate(rotated_alphabet)", "prompt_tokens": 593, "completion_tokens": 243, "duration": 5.206578731536865}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 544, "completion_tokens": 164, "duration": 3.68654465675354}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\"I \") + S.count(\"I.\") + S.count(\"I?\") + S.count(\"I!\")", "prompt_tokens": 543, "completion_tokens": 181, "duration": 4.299431085586548}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 590, "completion_tokens": 189, "duration": 4.078429460525513}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 495, "completion_tokens": 160, "duration": 3.91400146484375}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    primes = [num for num in lst if is_prime(num)]\n\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum_digits(max_prime)", "prompt_tokens": 1064, "completion_tokens": 430, "duration": 7.903324842453003}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 748, "completion_tokens": 291, "duration": 5.554538249969482}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 639, "completion_tokens": 247, "duration": 5.415567398071289}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 495, "completion_tokens": 146, "duration": 3.7729806900024414}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 831, "completion_tokens": 380, "duration": 8.895524501800537}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 620, "completion_tokens": 170, "duration": 5.6270928382873535}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 662, "completion_tokens": 274, "duration": 5.7514588832855225}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'\\s|,', s)", "prompt_tokens": 573, "completion_tokens": 178, "duration": 4.658022403717041}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 581, "completion_tokens": 265, "duration": 5.749493598937988}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    return bin(round(avg))[2:]", "prompt_tokens": 589, "completion_tokens": 168, "duration": 3.9908952713012695}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 1110, "completion_tokens": 580, "duration": 11.546748161315918}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [nums[num-1] for num in reversed_arr]", "prompt_tokens": 975, "completion_tokens": 329, "duration": 6.0324952602386475}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 697, "completion_tokens": 353, "duration": 7.954373836517334}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 746, "completion_tokens": 237, "duration": 5.116725921630859}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 500, "completion_tokens": 118, "duration": 3.3595032691955566}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False", "prompt_tokens": 974, "completion_tokens": 250, "duration": 5.903824329376221}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 797, "completion_tokens": 265, "duration": 5.533556222915649}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n\n    max_count = max(counts.values())\n    return {k: v for k, v in counts.items() if v == max_count}", "prompt_tokens": 637, "completion_tokens": 217, "duration": 4.497631549835205}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join(ch for ch in s if ch not in c)\n    return filtered_str, filtered_str == filtered_str[::-1]", "prompt_tokens": 747, "completion_tokens": 281, "duration": 7.406448841094971}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 787, "completion_tokens": 325, "duration": 9.075109004974365}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = min_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 623, "completion_tokens": 332, "duration": 7.566163778305054}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1055, "completion_tokens": 263, "duration": 6.188699960708618}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 751, "completion_tokens": 256, "duration": 5.651878833770752}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\nassert select_words(\"\", 3) == []", "prompt_tokens": 724, "completion_tokens": 331, "duration": 6.928874969482422}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    word = word[1:-1]\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 611, "completion_tokens": 237, "duration": 5.7811760902404785}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 671, "completion_tokens": 217, "duration": 4.6919639110565186}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 889, "completion_tokens": 290, "duration": 5.746167421340942}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 541, "completion_tokens": 205, "duration": 5.201536655426025}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 692, "completion_tokens": 284, "duration": 6.471815586090088}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 781, "completion_tokens": 196, "duration": 4.326913595199585}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 916, "completion_tokens": 402, "duration": 7.7720866203308105}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 1550, "completion_tokens": 683, "duration": 14.198237180709839}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "prompt_tokens": 935, "completion_tokens": 303, "duration": 10.399971961975098}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    if length <= 0:\n        return \"NO\"\n\n    if length == 1:\n        return \"NO\"\n\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 808, "completion_tokens": 231, "duration": 5.815036773681641}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num >= 0 else -1\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum", "prompt_tokens": 612, "completion_tokens": 254, "duration": 5.4610207080841064}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    N = len(grid)\n    all_positions = list(itertools.product(range(N), range(N)))\n    paths = itertools.permutations(all_positions, k)\n    min_path = min(paths, key=lambda p: [grid[x][y] for x, y in p])\n    return [grid[x][y] for x, y in min_path]", "prompt_tokens": 1213, "completion_tokens": 324, "duration": 10.181151866912842}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        result = [3, 1]\n        a, b, c = 3, 1, 2\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                next_num = a + b\n            else:\n                next_num = a + b + c\n                a, b, c = b, c, next_num\n            result.append(next_num)\n        return result", "prompt_tokens": 838, "completion_tokens": 317, "duration": 9.73967719078064}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 472, "completion_tokens": 193, "duration": 5.187497615814209}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) < 2", "prompt_tokens": 570, "completion_tokens": 181, "duration": 3.4492180347442627}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum(int(x) ** 2 for x in lst)\n    return total", "prompt_tokens": 898, "completion_tokens": 429, "duration": 12.23545217514038}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip().split()) == 1 or txt.strip()[-2] == \" \")", "prompt_tokens": 995, "completion_tokens": 350, "duration": 9.331357717514038}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 558, "completion_tokens": 221, "duration": 6.277364730834961}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    a = max(neg_integers) if neg_integers else None\n    b = min(pos_integers) if pos_integers else None\n    return (a, b)", "prompt_tokens": 641, "completion_tokens": 262, "duration": 5.791310548782349}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        return max(a, b)\n    elif str(a).replace(',', '.') == str(b):\n        return a\n    else:\n        return None", "prompt_tokens": 678, "completion_tokens": 263, "duration": 5.45280385017395}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 1266, "completion_tokens": 615, "duration": 14.586267471313477}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result", "prompt_tokens": 595, "completion_tokens": 269, "duration": 5.3121747970581055}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r' {3,}', '-', re.sub(r' ', '_', text))", "prompt_tokens": 536, "completion_tokens": 169, "duration": 7.8479790687561035}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 788, "completion_tokens": 278, "duration": 9.653194427490234}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 680, "completion_tokens": 234, "duration": 5.967301845550537}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def word_length_is_prime(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if word_length_is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 705, "completion_tokens": 339, "duration": 6.644979476928711}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 594, "completion_tokens": 162, "duration": 3.375997304916382}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 558, "completion_tokens": 193, "duration": 3.7689831256866455}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 613, "completion_tokens": 259, "duration": 8.929865837097168}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 652, "completion_tokens": 260, "duration": 8.76006817817688}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx + 1:end_idx])\n    else:\n        return tuple(planets[end_idx + 1:start_idx])[::-1]", "prompt_tokens": 830, "completion_tokens": 354, "duration": 7.249136209487915}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(sorted(even_length_words), key=lambda x: (len(x), x))\n    return sorted_words", "prompt_tokens": 745, "completion_tokens": 245, "duration": 9.379668474197388}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 540, "completion_tokens": 269, "duration": 6.567636013031006}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test with list containing positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test with list containing positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0\n\n# Test with list containing a mix of positive odd, even, and negative numbers\nassert double_the_difference([1, -2, 3, 0, -4]) == 10\n\n# Test with list containing only negative numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0", "prompt_tokens": 699, "completion_tokens": 412, "duration": 8.035284280776978}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 910, "completion_tokens": 296, "duration": 6.4702935218811035}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 927, "completion_tokens": 288, "duration": 8.830510139465332}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 635, "completion_tokens": 242, "duration": 9.094930410385132}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 440, "completion_tokens": 203, "duration": 7.632659673690796}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 475, "completion_tokens": 224, "duration": 8.662036895751953}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 601, "completion_tokens": 230, "duration": 4.807902097702026}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 949, "completion_tokens": 352, "duration": 8.21345829963684}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 935, "completion_tokens": 250, "duration": 4.48210072517395}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 851, "completion_tokens": 369, "duration": 7.938517808914185}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    reversed_string = s[::-1]\n    result = \"\"\n    for char in reversed_string:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result", "prompt_tokens": 592, "completion_tokens": 262, "duration": 6.05130410194397}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 490, "completion_tokens": 189, "duration": 7.123705625534058}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 628, "completion_tokens": 271, "duration": 8.546934843063354}
