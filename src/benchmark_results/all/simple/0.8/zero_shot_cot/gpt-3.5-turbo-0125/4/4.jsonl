{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 672, "completion_tokens": 307, "duration": 6.931901931762695}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n\n        current_group += char\n\n        if depth == 0:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result", "prompt_tokens": 606, "completion_tokens": 288, "duration": 6.558401823043823}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 426, "completion_tokens": 94, "duration": 3.1272811889648438}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 658, "completion_tokens": 291, "duration": 5.804780960083008}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 807, "completion_tokens": 433, "duration": 9.052483081817627}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 543, "completion_tokens": 230, "duration": 4.846125364303589}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n\n    return depths", "prompt_tokens": 592, "completion_tokens": 279, "duration": 5.221442222595215}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 576, "completion_tokens": 246, "duration": 5.778112173080444}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return total_sum, product", "prompt_tokens": 630, "completion_tokens": 297, "duration": 7.2900190353393555}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 620, "completion_tokens": 298, "duration": 7.080389499664307}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 727, "completion_tokens": 346, "duration": 7.068181753158569}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 456, "completion_tokens": 174, "duration": 5.290061712265015}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 512, "completion_tokens": 174, "duration": 4.188504934310913}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 435, "completion_tokens": 143, "duration": 4.585745334625244}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 438, "completion_tokens": 184, "duration": 3.8840556144714355}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 627, "completion_tokens": 158, "duration": 4.106414794921875}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 435, "completion_tokens": 133, "duration": 3.4803128242492676}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 1365, "completion_tokens": 646, "duration": 12.085890769958496}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 503, "completion_tokens": 211, "duration": 4.163988351821899}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_mapping[x])\n    \n    return ' '.join(numbers_list)", "prompt_tokens": 561, "completion_tokens": 290, "duration": 6.835309982299805}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n\n    return result", "prompt_tokens": 761, "completion_tokens": 351, "duration": 7.195677757263184}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 703, "completion_tokens": 331, "duration": 8.167749881744385}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 589, "completion_tokens": 262, "duration": 6.058431148529053}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 320, "completion_tokens": 66, "duration": 2.209930896759033}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor", "prompt_tokens": 431, "completion_tokens": 192, "duration": 4.336974143981934}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import defaultdict\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n# Test when input number is a prime number\nassert factorize(7) == [7]\n\n# Test when input number is a perfect square of a prime number\nassert factorize(49) == [7, 7]\n\n# Test when input number is a product of multiple prime factors\nassert factorize(60) == [2, 2, 3, 5]\n\n# Test when input number is a large prime number\nassert factorize(9973) == [9973]\n\n# Test when input number is 1, the result should be an empty list\nassert factorize(1) == []", "prompt_tokens": 565, "completion_tokens": 345, "duration": 6.987559080123901}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result", "prompt_tokens": 566, "completion_tokens": 266, "duration": 5.62853479385376}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 393, "completion_tokens": 134, "duration": 3.3015196323394775}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 419, "completion_tokens": 148, "duration": 3.7290799617767334}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 534, "completion_tokens": 216, "duration": 5.112905025482178}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 619, "completion_tokens": 235, "duration": 4.744745492935181}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 476, "completion_tokens": 151, "duration": 4.326472043991089}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    x0 = None\n    for i in range(len(xs)):\n        if xs[i] != 0:\n            x0 = i\n            break\n    if x0 is None:\n        raise ValueError(\"No non-zero coefficients provided\")\n\n    return -xs[0] / xs[x0]", "prompt_tokens": 2870, "completion_tokens": 1272, "duration": 24.46463418006897}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(0, len(l), 3)]", "prompt_tokens": 758, "completion_tokens": 321, "duration": 5.936971187591553}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 562, "completion_tokens": 250, "duration": 4.6610352993011475}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 492, "completion_tokens": 161, "duration": 3.4196653366088867}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 494, "completion_tokens": 216, "duration": 4.339092969894409}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [val if i % 2 != 0 else sorted(l[::2])[i // 2] for i, val in enumerate(l)]", "prompt_tokens": 604, "completion_tokens": 218, "duration": 5.116509437561035}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 256, "duration": 6.745152235031128}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 477, "completion_tokens": 265, "duration": 7.048097133636475}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 655, "completion_tokens": 221, "duration": 8.411068439483643}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 707, "completion_tokens": 239, "duration": 8.12187385559082}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 621, "completion_tokens": 245, "duration": 10.002193450927734}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 662, "completion_tokens": 205, "duration": 4.404578447341919}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 449, "completion_tokens": 129, "duration": 4.702301025390625}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 367, "completion_tokens": 114, "duration": 4.322601318359375}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 691, "completion_tokens": 285, "duration": 8.730298042297363}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    n = len(l)\n    s = sorted(l)\n    if n % 2 != 0:\n        return s[n // 2]\n    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2", "prompt_tokens": 589, "completion_tokens": 323, "duration": 9.904791116714478}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.618424415588379}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 6.970310688018799}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 527, "completion_tokens": 246, "duration": 6.386101484298706}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test an empty string\nassert remove_vowels('') == ''\n\n# Test a string with vowels and consonants\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test a string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test a string with uppercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test a string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 543, "completion_tokens": 254, "duration": 7.296499490737915}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 492, "completion_tokens": 177, "duration": 5.635441064834595}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 2.095540761947632}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 640, "completion_tokens": 201, "duration": 9.670058012008667}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 377, "completion_tokens": 129, "duration": 3.3493599891662598}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 571, "completion_tokens": 266, "duration": 8.577296733856201}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 505, "completion_tokens": 213, "duration": 5.612889289855957}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 573, "completion_tokens": 192, "duration": 7.775405645370483}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n# Test for a large number with multiple prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test for a power of 2\nassert largest_prime_factor(2048) == 2\n\n# Test for a number with a prime factor greater than 10\nassert largest_prime_factor(120) == 5\n\n# Test for a number with multiple prime factors\nassert largest_prime_factor(315) == 7\n\n# Test for a prime number as input (not meeting the requirement)\nassert largest_prime_factor(17) is None", "prompt_tokens": 429, "completion_tokens": 332, "duration": 9.847440719604492}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 472, "completion_tokens": 126, "duration": 6.653401136398315}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 551, "completion_tokens": 255, "duration": 6.772011995315552}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test when input list is [3, 1, 2, 4, 5]\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n\n# Test when input list is [1, 2, 3]\nassert derivative([1, 2, 3]) == [2, 6]", "prompt_tokens": 557, "completion_tokens": 269, "duration": 6.972275257110596}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 575, "completion_tokens": 159, "duration": 5.00439977645874}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    s = s.lower()\n    return sum(1 for char in s if char in vowels or (char == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 594, "completion_tokens": 212, "duration": 4.359500885009766}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 502, "completion_tokens": 209, "duration": 7.361764192581177}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 528, "completion_tokens": 145, "duration": 7.5540854930877686}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)\n\n# Test when there are both apples and oranges in the basket\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n\n# Test when there are no apples in the basket\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n\n# Test when there are both apples and oranges in the basket, and the total fruits is a large number\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n\n# Test when there are many apples and only one orange in the basket\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19", "prompt_tokens": 740, "completion_tokens": 305, "duration": 7.804643630981445}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    \n    return [min_even, min_even_index]", "prompt_tokens": 965, "completion_tokens": 226, "duration": 8.123748064041138}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 759, "completion_tokens": 298, "duration": 6.317389488220215}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 589, "completion_tokens": 209, "duration": 4.7949981689453125}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 600, "completion_tokens": 265, "duration": 7.070219278335571}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 822, "completion_tokens": 205, "duration": 5.1107447147369385}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 644, "completion_tokens": 201, "duration": 4.201845407485962}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 764, "completion_tokens": 283, "duration": 5.844319581985474}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n    return prime_count == 3", "prompt_tokens": 484, "completion_tokens": 252, "duration": 6.485969305038452}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.6480753421783447}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 548, "completion_tokens": 173, "duration": 7.663588285446167}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 961, "completion_tokens": 238, "duration": 8.233087301254272}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 580, "completion_tokens": 143, "duration": 4.004801988601685}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 570, "completion_tokens": 220, "duration": 8.214494705200195}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1071, "completion_tokens": 593, "duration": 13.23393702507019}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 443, "completion_tokens": 168, "duration": 3.4942266941070557}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 787, "completion_tokens": 420, "duration": 12.635547161102295}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N).count('1')", "prompt_tokens": 571, "completion_tokens": 140, "duration": 5.751770257949829}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 549, "completion_tokens": 295, "duration": 9.01274061203003}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 602, "completion_tokens": 212, "duration": 4.144306898117065}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n    return result", "prompt_tokens": 938, "completion_tokens": 294, "duration": 7.012128829956055}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    if arr and (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1607, "completion_tokens": 770, "duration": 16.375665187835693}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            result += chr(start + ((ord(char) - start) * 2) % 26)\n        else:\n            result += char\n    return result", "prompt_tokens": 540, "completion_tokens": 212, "duration": 4.241376161575317}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_list = sorted(set(lst))\n    if len(sorted_list) < 2:\n        return None\n    return sorted_list[1]", "prompt_tokens": 611, "completion_tokens": 218, "duration": 5.3335840702056885}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return len([sentence for sentence in S.split(\".\") + S.split(\"?\") + S.split(\"!\") if sentence.strip().startswith(\"I\")])", "prompt_tokens": 1001, "completion_tokens": 444, "duration": 12.201470851898193}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 601, "completion_tokens": 206, "duration": 4.652602195739746}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 582, "completion_tokens": 265, "duration": 6.40944504737854}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1212, "completion_tokens": 581, "duration": 9.824991941452026}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_keys or upper_keys", "prompt_tokens": 720, "completion_tokens": 263, "duration": 6.486039400100708}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 760, "completion_tokens": 372, "duration": 7.673322916030884}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 499, "completion_tokens": 150, "duration": 3.883063554763794}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 479, "completion_tokens": 192, "duration": 4.7472310066223145}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 647, "completion_tokens": 191, "duration": 4.4232001304626465}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * (i + 1))\n    return stones", "prompt_tokens": 551, "completion_tokens": 170, "duration": 4.191072702407837}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 541, "completion_tokens": 145, "duration": 3.5107626914978027}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            largest_even = max(largest_even, i)\n    return largest_even", "prompt_tokens": 526, "completion_tokens": 211, "duration": 7.788210153579712}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 585, "completion_tokens": 162, "duration": 3.953274726867676}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 708, "completion_tokens": 145, "duration": 4.429518222808838}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def num_to_string(num):\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1]\n    \n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_arr[::-1]\n    \n    return [num_to_string(num) for num in reversed_arr]", "prompt_tokens": 997, "completion_tokens": 356, "duration": 8.084418535232544}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 781, "completion_tokens": 433, "duration": 10.214377641677856}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(is_even):\n        count = 0\n        for i in range(1, n+1):\n            if is_palindrome(i) and i % 2 == 0 if is_even else i % 2 != 0:\n                count += 1\n        return count\n\n    even_count = count_palindromes(True)\n    odd_count = count_palindromes(False)\n\n    return (even_count, odd_count)", "prompt_tokens": 836, "completion_tokens": 355, "duration": 7.937976360321045}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 610, "completion_tokens": 227, "duration": 9.4020516872406}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    return sorted(arr) == arr or any(sorted(arr[-1:] + arr[:-1]) == arr)\n\n# Test empty array\nassert move_one_ball([]) == True\n\n# Test array already sorted\nassert move_one_ball([1, 2, 3, 4, 5]) == True\n\n# Test array requiring one right shift operation\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n\n# Test array not sortable by right shift operations\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n\n# Test larger array requiring multiple right shift operations\nassert move_one_ball([5, 6, 4, 1, 2, 3]) == True", "prompt_tokens": 3357, "completion_tokens": 1164, "duration": 26.876993656158447}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd1 = sum(1 for x in lst1 if x % 2 != 0)\n    count_odd2 = sum(1 for x in lst2 if x % 2 != 0)\n    \n    return \"YES\" if count_odd1 <= count_odd2 else \"NO\"", "prompt_tokens": 861, "completion_tokens": 359, "duration": 7.3467113971710205}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    result = {key: value for key, value in hist.items() if value == max_count}\n    return result", "prompt_tokens": 638, "completion_tokens": 222, "duration": 4.696791410446167}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([ch for ch in s if ch not in c])\n    return s, s == s[::-1]", "prompt_tokens": 688, "completion_tokens": 218, "duration": 4.998277425765991}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 788, "completion_tokens": 316, "duration": 7.495121479034424}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 544, "completion_tokens": 253, "duration": 5.240050315856934}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    for row in grid:\n        for well in row:\n            count += math.ceil(well / capacity)\n    return count", "prompt_tokens": 991, "completion_tokens": 209, "duration": 5.0353474617004395}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 656, "completion_tokens": 161, "duration": 3.7837321758270264}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 731, "completion_tokens": 269, "duration": 7.525903701782227}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word) - 3, 0, -1):\n        if word[i] in vowels and all(c not in vowels for c in word[i-1:i+2]):\n            return word[i]\n    return \"\"", "prompt_tokens": 640, "completion_tokens": 231, "duration": 5.175599098205566}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        open_count += s.count('(')\n        close_count += s.count(')')\n    return 'Yes' if open_count == close_count else 'No'", "prompt_tokens": 689, "completion_tokens": 222, "duration": 5.121920824050903}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 838, "completion_tokens": 239, "duration": 5.223882436752319}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 518, "completion_tokens": 180, "duration": 4.005167484283447}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 655, "completion_tokens": 249, "duration": 5.513537168502808}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 == 1:\n            result.append(n)\n    return sorted(set(result))", "prompt_tokens": 768, "completion_tokens": 198, "duration": 7.9018402099609375}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if not(1 <= month <= 12):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False", "prompt_tokens": 931, "completion_tokens": 404, "duration": 8.386680364608765}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 572, "completion_tokens": 169, "duration": 4.033672332763672}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = {}\n    for num in lst:\n        if num in seen:\n            return False\n        seen[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 1652, "completion_tokens": 674, "duration": 12.823232173919678}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 920, "completion_tokens": 344, "duration": 7.526017189025879}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    sign_product = 1\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum(abs(num) for num in arr) * sign_product", "prompt_tokens": 618, "completion_tokens": 277, "duration": 5.677131175994873}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if new_path:\n                    return new_path\n        return None\n    \n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1198, "completion_tokens": 394, "duration": 8.239379644393921}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        res = [3, 1]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res", "prompt_tokens": 815, "completion_tokens": 270, "duration": 5.897044658660889}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 509, "completion_tokens": 230, "duration": 5.561279535293579}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == \"[\":\n            open_brackets += 1\n        elif char == \"]\":\n            if open_brackets > 0:\n                open_brackets -= 1\n    return open_brackets < 0", "prompt_tokens": 574, "completion_tokens": 194, "duration": 4.12705135345459}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 872, "completion_tokens": 400, "duration": 8.523926734924316}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] != ' ' if txt else False", "prompt_tokens": 590, "completion_tokens": 164, "duration": 7.23014760017395}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 642, "completion_tokens": 305, "duration": 9.323547601699829}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    max_neg = None if len(neg_integers) == 0 else max(neg_integers)\n    min_pos = None if len(pos_integers) == 0 else min(pos_integers)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 686, "completion_tokens": 322, "duration": 9.256490468978882}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(\",\", \".\"))\n        b_float = float(b.replace(\",\", \".\"))\n        return a if a_float > b_float else b\n    elif isinstance(a, int) and isinstance(b, str):\n        return b\n    elif isinstance(a, str) and isinstance(b, int):\n        return a\n    else:\n        return None", "prompt_tokens": 658, "completion_tokens": 336, "duration": 8.609447002410889}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    return 0 < n <= 8", "prompt_tokens": 933, "completion_tokens": 460, "duration": 11.775826215744019}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 844, "completion_tokens": 318, "duration": 7.477828025817871}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 576, "completion_tokens": 222, "duration": 8.322055578231812}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    if len(file_parts) != 2:\n        return 'No'\n    \n    file_name_before_dot = file_parts[0]\n    file_name_after_dot = file_parts[1]\n    \n    if not file_name_before_dot or not file_name_before_dot[0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if file_name_after_dot not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 747, "completion_tokens": 299, "duration": 6.479371786117554}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 778, "completion_tokens": 323, "duration": 7.0377960205078125}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 589, "completion_tokens": 205, "duration": 7.946116924285889}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 582, "completion_tokens": 151, "duration": 7.326676607131958}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 574, "completion_tokens": 192, "duration": 8.002689599990845}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 654, "completion_tokens": 314, "duration": 9.260919094085693}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 774, "completion_tokens": 361, "duration": 10.015648365020752}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])", "prompt_tokens": 903, "completion_tokens": 430, "duration": 9.694439172744751}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 751, "completion_tokens": 223, "duration": 5.082446336746216}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 490, "completion_tokens": 219, "duration": 5.203968286514282}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 1586, "completion_tokens": 704, "duration": 16.09021782875061}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 893, "completion_tokens": 279, "duration": 6.969007730484009}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    if not extensions:\n        return f\"{class_name}.\"\n    \n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1579, "completion_tokens": 548, "duration": 13.352871894836426}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    for i in range(n):\n        if a[i:] + a[:i] == b:\n            return True\n    return False", "prompt_tokens": 649, "completion_tokens": 268, "duration": 7.666613817214966}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)", "prompt_tokens": 441, "completion_tokens": 198, "duration": 5.147371768951416}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return None\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 510, "completion_tokens": 306, "duration": 7.245243072509766}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "prompt_tokens": 571, "completion_tokens": 225, "duration": 5.222777605056763}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word", "prompt_tokens": 516, "completion_tokens": 171, "duration": 7.671643495559692}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 987, "completion_tokens": 298, "duration": 9.077192306518555}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 776, "completion_tokens": 295, "duration": 10.433125972747803}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result", "prompt_tokens": 523, "completion_tokens": 203, "duration": 6.1332550048828125}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 439, "completion_tokens": 138, "duration": 6.354798078536987}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if any(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 502, "completion_tokens": 153, "duration": 6.94359564781189}
