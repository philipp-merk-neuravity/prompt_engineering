{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 668, "completion_tokens": 303, "duration": 5.742827892303467}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n\n        current_group += char\n\n        if open_count == 0:\n            result.append(current_group)\n            current_group = ''\n\n    return result", "prompt_tokens": 577, "completion_tokens": 263, "duration": 6.496092796325684}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 552, "completion_tokens": 220, "duration": 4.259325981140137}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 527, "completion_tokens": 160, "duration": 4.31739616394043}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 610, "completion_tokens": 234, "duration": 5.043864011764526}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 600, "completion_tokens": 292, "duration": 7.226932048797607}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    \n    levels.append(max_level)\n    return levels", "prompt_tokens": 570, "completion_tokens": 284, "duration": 5.62939715385437}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 550, "completion_tokens": 220, "duration": 6.109318256378174}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 693, "completion_tokens": 356, "duration": 7.005051612854004}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 645, "completion_tokens": 324, "duration": 8.576590538024902}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n    def find_longest_palindromic_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n        return s\n\n    longest_suffix = find_longest_palindromic_suffix(string)\n    prefix = string[:len(string) - len(longest_suffix)]\n    \n    return string + prefix[::-1]", "prompt_tokens": 1771, "completion_tokens": 1020, "duration": 20.441020488739014}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 538, "completion_tokens": 266, "duration": 6.650411128997803}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 457, "completion_tokens": 110, "duration": 3.3681533336639404}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(abs(a), abs(b))", "prompt_tokens": 450, "completion_tokens": 158, "duration": 3.9443938732147217}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 454, "completion_tokens": 195, "duration": 4.702415704727173}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 607, "completion_tokens": 142, "duration": 3.868067502975464}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 437, "completion_tokens": 135, "duration": 3.8622515201568604}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    music_notes = music_string.split()\n    return [beats[note] for note in music_notes]\n\n# Test with one whole note 'o'\nassert parse_music('o') == [4]\n\n# Test with one half note 'o|'\nassert parse_music('o|') == [2]\n\n# Test with one quater note '.|'\nassert parse_music('.|') == [1]\n\n# Test with a mix of whole, half, and quater notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n# Test with all quater notes\nassert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n\n# Test with empty input\nassert parse_music('') == []", "prompt_tokens": 709, "completion_tokens": 430, "duration": 9.223158836364746}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 519, "completion_tokens": 233, "duration": 6.326740503311157}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_dict = {word: idx for idx, word in enumerate(number_words)}\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_dict[x])\n    \n    return ' '.join(sorted_numbers)", "prompt_tokens": 564, "completion_tokens": 267, "duration": 5.145831108093262}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result", "prompt_tokens": 776, "completion_tokens": 358, "duration": 7.862256050109863}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 749, "completion_tokens": 377, "duration": 8.191680669784546}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 490, "completion_tokens": 159, "duration": 4.474204778671265}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 323, "completion_tokens": 73, "duration": 2.8345046043395996}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors) if divisors else 1", "prompt_tokens": 422, "completion_tokens": 179, "duration": 4.453157424926758}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 619, "completion_tokens": 261, "duration": 5.457686901092529}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 535, "completion_tokens": 223, "duration": 6.1586127281188965}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 394, "completion_tokens": 131, "duration": 3.5805234909057617}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 369, "completion_tokens": 98, "duration": 2.903661012649536}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 595, "completion_tokens": 277, "duration": 7.899177074432373}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 654, "completion_tokens": 270, "duration": 6.340888738632202}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 524, "completion_tokens": 200, "duration": 5.002442836761475}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    n = len(xs) - 1\n    return -xs[0] / xs[n-1] if n > 1 else None", "prompt_tokens": 805, "completion_tokens": 226, "duration": 5.643272161483765}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l[:]\n    for i in range(2, len(new_list), 3):\n        new_list[i-2:i+1] = sorted(new_list[i-2:i+1])\n    return new_list", "prompt_tokens": 802, "completion_tokens": 377, "duration": 8.283159971237183}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 610, "completion_tokens": 298, "duration": 6.975670099258423}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 502, "completion_tokens": 171, "duration": 4.874907970428467}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 466, "completion_tokens": 188, "duration": 8.091585159301758}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[1:][::2]) if i % 2 != 0 else l[i] for i in range(len(l))]", "prompt_tokens": 614, "completion_tokens": 228, "duration": 4.980084419250488}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    pass", "prompt_tokens": 667, "completion_tokens": 261, "duration": 8.454713106155396}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n\n    return fibonacci(i)\n\n# Test when n = 1\nassert prime_fib(1) == 2\n\n# Test when n = 2\nassert prime_fib(2) == 3\n\n# Test when n = 3\nassert prime_fib(3) == 5\n\n# Test when n = 4\nassert prime_fib(4) == 13\n\n# Test when n = 5\nassert prime_fib(5) == 89", "prompt_tokens": 477, "completion_tokens": 367, "duration": 7.735728740692139}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 714, "completion_tokens": 280, "duration": 5.464085340499878}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 619, "completion_tokens": 159, "duration": 3.3525521755218506}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 558, "completion_tokens": 182, "duration": 5.122267246246338}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 645, "completion_tokens": 198, "duration": 4.247129201889038}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res", "prompt_tokens": 482, "completion_tokens": 160, "duration": 4.259143352508545}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 431, "completion_tokens": 173, "duration": 5.347548723220825}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n-2):\n        a, b, c, d = b, c, d, a + b + c + d\n    return c", "prompt_tokens": 732, "completion_tokens": 275, "duration": 6.834611415863037}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    if not l:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 532, "completion_tokens": 270, "duration": 6.435879230499268}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 404, "completion_tokens": 98, "duration": 6.404689311981201}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return 2**n % p", "prompt_tokens": 529, "completion_tokens": 160, "duration": 4.5013673305511475}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 564, "completion_tokens": 283, "duration": 6.103244781494141}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 552, "completion_tokens": 160, "duration": 3.3910515308380127}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 490, "completion_tokens": 175, "duration": 5.332529544830322}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 4.448894262313843}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "prompt_tokens": 580, "completion_tokens": 145, "duration": 3.6238648891448975}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 379, "completion_tokens": 182, "duration": 5.170291900634766}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 552, "completion_tokens": 243, "duration": 6.425605297088623}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 543, "completion_tokens": 251, "duration": 8.637385368347168}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 691, "completion_tokens": 305, "duration": 5.902071475982666}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        i = 2\n        while i <= num:\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n                num //= i\n            else:\n                i += 1\n        return max(factors)\n\n    return prime_factors(n)", "prompt_tokens": 463, "completion_tokens": 284, "duration": 6.1161863803863525}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 3.799532890319824}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 545, "completion_tokens": 246, "duration": 7.287547588348389}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * c for i, c in enumerate(xs)][1:]\n\n# Remove the unit tests as requested", "prompt_tokens": 1284, "completion_tokens": 519, "duration": 12.56897521018982}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 643, "completion_tokens": 227, "duration": 9.189538955688477}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOUy'\n    return sum(1 for char in s if char in vowels and (char != 'y' or s.index(char) == len(s)-1))", "prompt_tokens": 554, "completion_tokens": 168, "duration": 5.266624212265015}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 477, "completion_tokens": 163, "duration": 7.540215015411377}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 533, "completion_tokens": 150, "duration": 3.8794007301330566}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruit_counts = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(fruit_counts)\n\n# Test when there are apples and oranges in the basket\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n\n# Test when there are no apples in the basket\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n\n# Test when there are apples and oranges in the basket, but mangoes dominate\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n\n# Test when there are more oranges than apples in the basket\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19", "prompt_tokens": 732, "completion_tokens": 292, "duration": 7.126802921295166}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_value = min(even_nodes, key=lambda x: (x[0], x[1]))\n    return [smallest_value[0], smallest_value[1]]", "prompt_tokens": 1731, "completion_tokens": 601, "duration": 11.039771795272827}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n\n    return result", "prompt_tokens": 695, "completion_tokens": 255, "duration": 5.895355463027954}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 539, "completion_tokens": 150, "duration": 7.230304956436157}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 613, "completion_tokens": 280, "duration": 7.339211940765381}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 876, "completion_tokens": 259, "duration": 6.043883323669434}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n\n# Test when input array is already a palindromic array\nassert smallest_change([1, 2, 3, 2, 1]) == 0\n\n# Test when input array requires only one change to become palindromic\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\n# Test when input array requires multiple changes to become palindromic\nassert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n\n# Test when input array is empty\nassert smallest_change([]) == 0\n\n# Test when input array has only one element\nassert smallest_change([5]) == 0", "prompt_tokens": 665, "completion_tokens": 382, "duration": 7.50367283821106}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 754, "completion_tokens": 234, "duration": 6.302884101867676}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = []\n    i = 2\n    while i * i <= a:\n        if a % i == 0:\n            a //= i\n            factors.append(i)\n        else:\n            i += 1\n    if a > 1:\n        factors.append(a)\n    return len(factors) == 3", "prompt_tokens": 812, "completion_tokens": 377, "duration": 7.313346862792969}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 652, "completion_tokens": 208, "duration": 5.533058404922485}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 534, "completion_tokens": 164, "duration": 3.944444417953491}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1055, "completion_tokens": 323, "duration": 8.11195993423462}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 579, "completion_tokens": 142, "duration": 4.887742042541504}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n            \n    return True", "prompt_tokens": 572, "completion_tokens": 222, "duration": 7.539734601974487}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result", "prompt_tokens": 1040, "completion_tokens": 534, "duration": 14.418856620788574}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 868, "completion_tokens": 448, "duration": 13.43395471572876}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10**(n-1)", "prompt_tokens": 388, "completion_tokens": 138, "duration": 4.796848297119141}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 614, "completion_tokens": 187, "duration": 5.607887029647827}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 428, "completion_tokens": 174, "duration": 3.562993049621582}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 614, "completion_tokens": 209, "duration": 5.050646543502808}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                res.append((i, j))\n    return res", "prompt_tokens": 853, "completion_tokens": 216, "duration": 4.8606109619140625}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def get_sum(array):\n        return array[0] + array[-1]\n\n    sorted_array = sorted(array)\n    if get_sum(array) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 885, "completion_tokens": 357, "duration": 7.372576713562012}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(((ord(c) - 97 + 2) * 2) % 26 + 97) if c.islower() else chr(((ord(c) - 65 + 2) * 2) % 26 + 65) if c.isupper() else c for c in s)", "prompt_tokens": 511, "completion_tokens": 185, "duration": 6.996659994125366}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 561, "completion_tokens": 171, "duration": 4.418815612792969}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('! I') + S.count('? I')", "prompt_tokens": 939, "completion_tokens": 372, "duration": 7.89803147315979}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 573, "completion_tokens": 174, "duration": 3.552705764770508}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char in vowels:\n                    encoded_char = encoded_char.upper()\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message", "prompt_tokens": 539, "completion_tokens": 241, "duration": 4.888256788253784}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1070, "completion_tokens": 431, "duration": 8.7596595287323}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 706, "completion_tokens": 233, "duration": 5.871523141860962}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 251, "duration": 5.4322123527526855}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 524, "completion_tokens": 175, "duration": 4.721793174743652}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 444, "completion_tokens": 174, "duration": 3.984764814376831}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 692, "completion_tokens": 236, "duration": 5.461867809295654}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 631, "completion_tokens": 242, "duration": 4.880535840988159}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 607, "completion_tokens": 211, "duration": 4.832518815994263}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 592, "completion_tokens": 276, "duration": 6.403172254562378}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\n# Test when n is less than m and the average is an integer\nassert rounded_avg(1, 5) == \"0b11\"\n\n# Test when n is greater than m\nassert rounded_avg(7, 5) == -1\n\n# Test when n is less than m and the average is not an integer\nassert rounded_avg(10, 20) == \"0b1111\"\n\n# Test when n is less than m and the average is not an integer\nassert rounded_avg(20, 33) == \"0b11010\"", "prompt_tokens": 583, "completion_tokens": 275, "duration": 5.689112186431885}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 914, "completion_tokens": 384, "duration": 8.07869005203247}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[num - 1] for num in reversed_arr]", "prompt_tokens": 863, "completion_tokens": 212, "duration": 5.237857103347778}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 929, "completion_tokens": 581, "duration": 12.910522222518921}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 726, "completion_tokens": 230, "duration": 5.120441675186157}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 533, "completion_tokens": 159, "duration": 3.98238205909729}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    return sorted(arr) == arr or sorted(arr) == arr[::-1]", "prompt_tokens": 1576, "completion_tokens": 438, "duration": 8.695729494094849}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 272, "duration": 5.5643532276153564}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    for char in test.split():\n        result[char] = result.get(char, 0) + 1\n\n    max_count = max(result.values())\n    return {key: val for key, val in result.items() if val == max_count}", "prompt_tokens": 590, "completion_tokens": 168, "duration": 4.17883825302124}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 702, "completion_tokens": 232, "duration": 5.081303119659424}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), i, i, i) for i, string in enumerate(lst)]", "prompt_tokens": 717, "completion_tokens": 249, "duration": 5.018488645553589}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum", "prompt_tokens": 560, "completion_tokens": 259, "duration": 5.344566106796265}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\n# Test for an empty grid where no buckets are needed\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0\n\n# Test for a grid with all wells having water and bucket capacity of 1\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n\n# Test for a grid with varying well water levels and bucket capacity of 2\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "prompt_tokens": 986, "completion_tokens": 347, "duration": 8.65892505645752}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 674, "completion_tokens": 179, "duration": 3.9378762245178223}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 725, "completion_tokens": 247, "duration": 9.975137948989868}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 1099, "completion_tokens": 452, "duration": 11.201423645019531}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        open_count += s.count('(')\n        close_count += s.count(')')\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 689, "completion_tokens": 236, "duration": 5.180467844009399}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 799, "completion_tokens": 200, "duration": 5.663961172103882}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 514, "completion_tokens": 176, "duration": 7.050609350204468}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 738, "completion_tokens": 328, "duration": 6.262433290481567}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 801, "completion_tokens": 222, "duration": 7.053607225418091}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 947, "completion_tokens": 432, "duration": 12.127907991409302}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 537, "completion_tokens": 134, "duration": 3.329869270324707}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    prev = lst[0]\n    seen_duplicates = False\n\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        if num == prev:\n            if seen_duplicates:\n                return False\n            seen_duplicates = True\n        else:\n            seen_duplicates = False\n        prev = num\n\n    return True", "prompt_tokens": 983, "completion_tokens": 394, "duration": 8.008009433746338}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 870, "completion_tokens": 296, "duration": 9.293299674987793}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n        elif num < 0:\n            total -= num\n            sign_product *= -1\n    \n    return total * sign_product", "prompt_tokens": 504, "completion_tokens": 152, "duration": 7.223475694656372}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                result = dfs(x, y, visited.copy(), path + [grid[x][y]])\n                if result:\n                    return result\n        return None\n    \n    for i in range(n):\n        for j in range(n):\n            result = dfs(i, j, set(), [grid[i][j]])\n            if result:\n                return result", "prompt_tokens": 1205, "completion_tokens": 421, "duration": 9.074467897415161}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    \n    tribonacci = [3, 1, 2]\n    if n == 2:\n        return tribonacci\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    \n    return tribonacci", "prompt_tokens": 803, "completion_tokens": 281, "duration": 9.121929168701172}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n    return odd_product", "prompt_tokens": 417, "completion_tokens": 141, "duration": 6.769893646240234}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets > 0", "prompt_tokens": 986, "completion_tokens": 380, "duration": 8.501183986663818}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + 1) ** 2 for x in lst])", "prompt_tokens": 769, "completion_tokens": 300, "duration": 7.780097007751465}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-1] != ' '", "prompt_tokens": 1032, "completion_tokens": 376, "duration": 12.258198022842407}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 582, "completion_tokens": 245, "duration": 5.739772319793701}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_ints) if neg_ints else None\n    smallest_pos = min(pos_ints) if pos_ints else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 627, "completion_tokens": 254, "duration": 5.856426954269409}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 701, "completion_tokens": 293, "duration": 8.187717914581299}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test when n is 4, which cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False\n\n# Test when n is 6, which cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False\n\n# Test when n is 8, which can be written as the sum of exactly 4 positive even numbers (2 + 2 + 2 + 2)\nassert is_equal_to_sum_even(8) == True\n\n# Test when n is 20, which can be written as the sum of exactly 4 positive even numbers (2 + 4 + 6 + 8)\nassert is_equal_to_sum_even(20) == True", "prompt_tokens": 506, "completion_tokens": 355, "duration": 6.273674011230469}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= special_factorial(i-1)\n        return result", "prompt_tokens": 884, "completion_tokens": 380, "duration": 9.512361288070679}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r'\\s{3,}', '-', re.sub(r'\\s{2}', '_', text))", "prompt_tokens": 494, "completion_tokens": 131, "duration": 6.283682584762573}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    prefix = name_parts[0]\n    extension = name_parts[1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in prefix if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 807, "completion_tokens": 316, "duration": 8.29306173324585}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 760, "completion_tokens": 314, "duration": 11.0127272605896}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 711, "completion_tokens": 328, "duration": 8.253051519393921}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 577, "completion_tokens": 143, "duration": 7.522653579711914}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 668, "completion_tokens": 286, "duration": 8.883130311965942}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 663, "completion_tokens": 306, "duration": 9.258017539978027}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            b = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                c = k * k - k + 1\n                if (a + b + c) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 902, "completion_tokens": 509, "duration": 10.192785739898682}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 1362, "completion_tokens": 581, "duration": 15.537592887878418}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in set(lst) if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 720, "completion_tokens": 204, "duration": 5.771145820617676}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 521, "completion_tokens": 249, "duration": 6.413048505783081}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test when input list has positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test when input list has positive and negative numbers, but only odd positive numbers are considered\nassert double_the_difference([-1, 2, 3, -4, 5]) == 34\n\n# Test when input list has negative odd numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test when input list has zero and positive odd numbers\nassert double_the_difference([0, 1, 0, 3, 0, 5]) == 35\n\n# Test when input list has zero and negative odd numbers\nassert double_the_difference([-1, 0, -3, 0, -5]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 798, "completion_tokens": 562, "duration": 11.930447340011597}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 923, "completion_tokens": 320, "duration": 9.440924406051636}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 920, "completion_tokens": 281, "duration": 9.8403000831604}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 638, "completion_tokens": 241, "duration": 5.017082929611206}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 409, "completion_tokens": 168, "duration": 4.820312023162842}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"Number out of range\"\n\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 535, "completion_tokens": 321, "duration": 10.17595362663269}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2", "prompt_tokens": 569, "completion_tokens": 221, "duration": 4.404659748077393}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1031, "completion_tokens": 434, "duration": 9.371139287948608}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining if remaining < need else number + need\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 873, "completion_tokens": 192, "duration": 7.991346597671509}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 739, "completion_tokens": 258, "duration": 8.647772312164307}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    return result", "prompt_tokens": 489, "completion_tokens": 162, "duration": 6.828124523162842}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 441, "completion_tokens": 137, "duration": 3.9854934215545654}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 493, "completion_tokens": 136, "duration": 7.172123432159424}
