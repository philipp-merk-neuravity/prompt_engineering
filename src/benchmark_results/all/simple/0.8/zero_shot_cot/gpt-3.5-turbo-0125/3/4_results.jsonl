{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 634, "completion_tokens": 269, "duration": 11.774219274520874, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    groups = paren_string.replace(\" \", \"\").split(')(')\n    groups[0] = groups[0].lstrip('(')\n    groups[-1] = groups[-1].rstrip(')')\n    return [f'({group})' for group in groups]", "prompt_tokens": 609, "completion_tokens": 267, "duration": 12.249420642852783, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 547, "completion_tokens": 211, "duration": 11.052934646606445, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 541, "completion_tokens": 169, "duration": 11.234379291534424, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0\n\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 634, "completion_tokens": 273, "duration": 11.8067307472229, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 539, "completion_tokens": 237, "duration": 11.846513748168945, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depths.append(depth)\n            depth -= 1\n    return depths", "prompt_tokens": 1014, "completion_tokens": 477, "duration": 16.332491874694824, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 592, "completion_tokens": 262, "duration": 12.291428089141846, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n        \n    return (total_sum, total_product)", "prompt_tokens": 582, "completion_tokens": 254, "duration": 11.744619369506836, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[-1]))\n\n    return result", "prompt_tokens": 619, "completion_tokens": 302, "duration": 11.521242141723633, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 562, "completion_tokens": 197, "duration": 11.977710723876953, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 535, "completion_tokens": 253, "duration": 11.37730884552002, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 779, "completion_tokens": 246, "duration": 14.231461763381958, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 428, "completion_tokens": 141, "duration": 11.139739274978638, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 393, "completion_tokens": 129, "duration": 10.890892505645752, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 427, "completion_tokens": 135, "duration": 10.866865396499634, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 447, "completion_tokens": 141, "duration": 10.694638967514038, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    return [notes_duration[note] for note in notes]\n\n# Test case for a simple string with one of each note type\nassert parse_music('o o| .|') == [4, 2, 1]\n\n# Test case for a string with multiple notes of the same type\nassert parse_music('o o o o') == [4, 4, 4, 4]\n\n# Test case for a string with different note types in random order\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n# Test case for an empty string\nassert parse_music('') == []", "prompt_tokens": 687, "completion_tokens": 390, "duration": 15.242207527160645, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count", "prompt_tokens": 447, "completion_tokens": 168, "duration": 11.963083267211914, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: words.index(x)))\n\n# Test when numbers are in random order\nassert sort_numbers('three one five') == 'one three five'\n\n# Test when numbers are already sorted\nassert sort_numbers('four six seven') == 'four six seven'\n\n# Test when numbers are in reverse order\nassert sort_numbers('nine two zero') == 'zero two nine'\n\n# Test when numbers have duplicates\nassert sort_numbers('two three two three one') == 'one two two three three'\n\n# Test when only one number is given\nassert sort_numbers('seven') == 'seven'", "prompt_tokens": 508, "completion_tokens": 297, "duration": 14.598826885223389, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 818, "completion_tokens": 405, "duration": 11.793490886688232, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 859, "completion_tokens": 487, "duration": 11.68453860282898, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 521, "completion_tokens": 190, "duration": 11.589872121810913, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 324, "completion_tokens": 74, "duration": 3.6314401626586914, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 373, "completion_tokens": 128, "duration": 10.89175295829773, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n /= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 640, "completion_tokens": 276, "duration": 11.629959106445312, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 622, "completion_tokens": 301, "duration": 10.993448972702026, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 412, "completion_tokens": 153, "duration": 10.665039539337158, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 379, "completion_tokens": 108, "duration": 10.600832462310791, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 554, "completion_tokens": 236, "duration": 11.037668704986572, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 608, "completion_tokens": 224, "duration": 10.629098176956177, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 504, "completion_tokens": 179, "duration": 11.21122670173645, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 918, "completion_tokens": 374, "duration": 12.476531028747559, "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted([x] if idx % 3 == 0 else [x])[0] for idx, x in enumerate(l)]", "prompt_tokens": 1284, "completion_tokens": 588, "duration": 16.91417932510376, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 534, "completion_tokens": 223, "duration": 14.383732080459595, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 517, "completion_tokens": 186, "duration": 10.522832155227661, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 501, "completion_tokens": 223, "duration": 11.224594116210938, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result", "prompt_tokens": 655, "completion_tokens": 295, "duration": 15.366508483886719, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    pass", "prompt_tokens": 636, "completion_tokens": 230, "duration": 13.285618305206299, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 527, "completion_tokens": 305, "duration": 14.400599956512451, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 667, "completion_tokens": 235, "duration": 11.531928300857544, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 737, "completion_tokens": 277, "duration": 16.503450393676758, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 548, "completion_tokens": 172, "duration": 13.741697072982788, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l)", "prompt_tokens": 717, "completion_tokens": 241, "duration": 5.910204172134399, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x < 0:\n        return '-' + change_base(-x, base) if x else '0'\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 560, "completion_tokens": 267, "duration": 13.45807957649231, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 364, "completion_tokens": 106, "duration": 12.840798616409302, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 721, "completion_tokens": 317, "duration": 14.868853569030762, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 566, "completion_tokens": 291, "duration": 14.301120519638062, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 408, "completion_tokens": 102, "duration": 2.600634813308716, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 12.42659854888916, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])", "prompt_tokens": 1984, "completion_tokens": 967, "duration": 20.276249170303345, "result": "failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 4)", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')", "prompt_tokens": 585, "completion_tokens": 186, "duration": 14.049330234527588, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "prompt_tokens": 493, "completion_tokens": 178, "duration": 12.730628252029419, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 12.325543642044067, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 581, "completion_tokens": 146, "duration": 3.836137533187866, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 421, "completion_tokens": 210, "duration": 14.105775833129883, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 566, "completion_tokens": 261, "duration": 13.902205228805542, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 762, "completion_tokens": 270, "duration": 15.215100288391113, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 688, "completion_tokens": 307, "duration": 14.48212218284607, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test when n is a small composite number with multiple prime factors\nassert largest_prime_factor(24) == 3\n\n# Test when n is a large composite number with multiple prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test when n is a power of 2\nassert largest_prime_factor(2048) == 2", "prompt_tokens": 389, "completion_tokens": 202, "duration": 13.256848096847534, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 12.693629741668701, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 552, "completion_tokens": 249, "duration": 13.679994106292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * coef for i, coef in enumerate(xs)][1:]\n\n# Remove the test cases", "prompt_tokens": 1653, "completion_tokens": 686, "duration": 16.845213651657104, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 626, "completion_tokens": 210, "duration": 13.035302639007568, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    count = sum(1 for char in s if char in vowels)\n    \n    if s[-1].lower() == 'y' and count > 0:\n        count -= 1\n    \n    return count", "prompt_tokens": 597, "completion_tokens": 223, "duration": 5.288708686828613, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 518, "completion_tokens": 222, "duration": 35.18232798576355, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 572, "completion_tokens": 189, "duration": 13.533428192138672, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 764, "completion_tokens": 204, "duration": 12.490345239639282, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(index, node) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [min_even_value[1], min_even_value[0]]", "prompt_tokens": 1005, "completion_tokens": 281, "duration": 14.713054180145264, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 696, "completion_tokens": 230, "duration": 60.07291507720947, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 535, "completion_tokens": 153, "duration": 13.161238670349121, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 609, "completion_tokens": 274, "duration": 14.701035976409912, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 892, "completion_tokens": 276, "duration": 14.385366439819336, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 721, "completion_tokens": 278, "duration": 14.261331558227539, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 782, "completion_tokens": 256, "duration": 13.260379314422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3", "prompt_tokens": 484, "completion_tokens": 248, "duration": 13.899633407592773, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 12.191078901290894, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 522, "completion_tokens": 152, "duration": 11.712217807769775, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(digit.upper() in primes for digit in num)", "prompt_tokens": 924, "completion_tokens": 187, "duration": 10.494379758834839, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 582, "completion_tokens": 144, "duration": 11.705787181854248, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 616, "completion_tokens": 266, "duration": 14.356305599212646, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1044, "completion_tokens": 525, "duration": 18.731319189071655, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 699, "completion_tokens": 289, "duration": 16.03951668739319, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    count += 9 * 10**(n-1)  # Count of numbers starting with 1\n    count += 10**(n-1)  # Count of numbers ending with 1\n    return count", "prompt_tokens": 509, "completion_tokens": 300, "duration": 7.929660081863403, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 564, "completion_tokens": 141, "duration": 4.79301643371582, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum([num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0])", "prompt_tokens": 458, "completion_tokens": 204, "duration": 12.755202293395996, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 555, "completion_tokens": 160, "duration": 5.016139268875122, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in reversed(list(enumerate(row))):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1433, "completion_tokens": 450, "duration": 9.712581396102905, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    return sorted_array if (array[0] + array[-1]) % 2 != 0 else sorted_array[::-1]", "prompt_tokens": 875, "completion_tokens": 329, "duration": 8.311018466949463, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * (ord('z' if char.islower() else 'Z') - ord(char))\n            result += chr((ord(char) - ord('a' if char.islower() else 'A') + shift) % 26 + ord('a' if char.islower() else 'A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 550, "completion_tokens": 250, "duration": 7.317101955413818, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 577, "completion_tokens": 197, "duration": 6.205430269241333, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 974, "completion_tokens": 417, "duration": 9.79033350944519, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 585, "completion_tokens": 186, "duration": 5.350889444351196, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 536, "completion_tokens": 216, "duration": 6.087467193603516, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = max(filter(is_prime, lst))\n    return sum_of_digits(max_prime)", "prompt_tokens": 1066, "completion_tokens": 411, "duration": 8.836497783660889, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if not keys:\n        return False\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    return is_lower or is_upper", "prompt_tokens": 679, "completion_tokens": 231, "duration": 6.236694097518921, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.473294973373413, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 486, "completion_tokens": 137, "duration": 4.314398527145386, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 444, "completion_tokens": 155, "duration": 4.823110580444336, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 732, "completion_tokens": 276, "duration": 7.131328582763672, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 599, "completion_tokens": 215, "duration": 8.89757752418518, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 551, "completion_tokens": 157, "duration": 5.17955470085144, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = max(largest_even, i)\n    return largest_even", "prompt_tokens": 537, "completion_tokens": 221, "duration": 6.096503734588623, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))", "prompt_tokens": 586, "completion_tokens": 163, "duration": 4.4984495639801025, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 661, "completion_tokens": 311, "duration": 6.773874044418335, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    result = [mapping[x] for x in reversed_arr]\n    \n    return result", "prompt_tokens": 1007, "completion_tokens": 406, "duration": 12.289250135421753, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 549, "completion_tokens": 180, "duration": 4.965156555175781, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 801, "completion_tokens": 292, "duration": 10.991064071655273, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(d) for d in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 499, "completion_tokens": 122, "duration": 4.389240741729736, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 954, "completion_tokens": 239, "duration": 6.18035364151001, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 822, "completion_tokens": 284, "duration": 9.274433374404907, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    for char in test.split():\n        result[char] = result.get(char, 0) + 1\n    max_count = max(result.values())\n    return {char: count for char, count in result.items() if count == max_count}", "prompt_tokens": 635, "completion_tokens": 213, "duration": 5.256816864013672, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = \"\".join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 685, "completion_tokens": 215, "duration": 5.864284515380859, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements in the str{i+1}ng {i+1} of the {i+1}nput.\" for i in range(len(lst))]", "prompt_tokens": 715, "completion_tokens": 235, "duration": 6.6743457317352295, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    curr_sum = 0\n    \n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum", "prompt_tokens": 538, "completion_tokens": 248, "duration": 5.479496240615845, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\n# Test with grid where all wells are empty\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0\n\n# Test with grid where all wells have water and bucket capacity is 1\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n\n# Test with grid where wells have varying amount of water and bucket capacity is 2\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "prompt_tokens": 984, "completion_tokens": 343, "duration": 6.756837606430054, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 795, "completion_tokens": 300, "duration": 6.5515618324279785, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    result = []\n    for word in words:\n        if sum(1 for letter in word if letter.lower() in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 723, "completion_tokens": 250, "duration": 6.257838487625122, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 689, "completion_tokens": 283, "duration": 6.717635154724121, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    return 'No'\n    return 'Yes'", "prompt_tokens": 659, "completion_tokens": 212, "duration": 5.5153162479400635, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 798, "completion_tokens": 199, "duration": 51.07681679725647, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 549, "completion_tokens": 214, "duration": 5.252117156982422, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 700, "completion_tokens": 294, "duration": 7.573837518692017, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 960, "completion_tokens": 382, "duration": 12.160156965255737, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 846, "completion_tokens": 321, "duration": 7.082709550857544, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 628, "completion_tokens": 225, "duration": 9.195384502410889, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 1:\n                return False\n        else:\n            counts[num] = 1\n        if prev is not None and num < prev:\n            return False\n        prev = num\n    return True", "prompt_tokens": 867, "completion_tokens": 272, "duration": 7.289788484573364, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if end < start:\n        return \"NO\"\n\n    length = end - start + 1\n\n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 881, "completion_tokens": 305, "duration": 6.659082651138306, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    total = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        total += abs(num)\n    \n    return product * total", "prompt_tokens": 570, "completion_tokens": 208, "duration": 7.97577428817749, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    flattened_grid = [cell for row in grid for cell in row]\n    start = flattened_grid.index(min(flattened_grid))\n    path = [start + 1]\n    current = start\n\n    while len(path) < k:\n        neighbors = []\n        row, col = current // n, current % n\n        if row > 0:\n            neighbors.append((row - 1) * n + col)\n        if row < n - 1:\n            neighbors.append((row + 1) * n + col)\n        if col > 0:\n            neighbors.append(row * n + col - 1)\n        if col < n - 1:\n            neighbors.append(row * n + col + 1)\n        \n        next_cell = min(neighbors, key=lambda x: (flattened_grid[x], x))\n        path.append(flattened_grid[next_cell])\n        current = next_cell\n    \n    return path", "prompt_tokens": 1215, "completion_tokens": 449, "duration": 8.477915287017822, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        tribonacci = [3, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n            else:\n                tribonacci.append(1 + i // 2)\n        return tribonacci", "prompt_tokens": 803, "completion_tokens": 264, "duration": 8.973960876464844, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 416, "completion_tokens": 146, "duration": 4.655027151107788, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opened = 0\n    for char in string:\n        if char == '[':\n            opened += 1\n        elif char == ']' and opened > 0:\n            opened -= 1\n    return opened > 0", "prompt_tokens": 986, "completion_tokens": 370, "duration": 11.6392183303833, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x + 0.5)**2 for x in lst])", "prompt_tokens": 1659, "completion_tokens": 686, "duration": 13.474479675292969, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 580, "completion_tokens": 153, "duration": 7.0472681522369385, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 544, "completion_tokens": 207, "duration": 7.7877349853515625, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 696, "completion_tokens": 314, "duration": 7.3536717891693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return a if float(a) > float(b) else b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a if float(a.replace(',', '.')) > float(b.replace(',', '.')) else b\n    else:\n        return None", "prompt_tokens": 611, "completion_tokens": 259, "duration": 10.36890983581543, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 506, "completion_tokens": 188, "duration": 8.277828693389893, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 565, "completion_tokens": 240, "duration": 5.919658660888672, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 544, "completion_tokens": 181, "duration": 4.466253757476807, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 763, "completion_tokens": 248, "duration": 7.203622102737427, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 765, "completion_tokens": 310, "duration": 7.106944799423218, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    return ' '.join(word for word in sentence if is_prime(len(word)))", "prompt_tokens": 1383, "completion_tokens": 500, "duration": 14.46490216255188, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 582, "completion_tokens": 148, "duration": 7.105598211288452, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))", "prompt_tokens": 593, "completion_tokens": 214, "duration": 6.049994945526123, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count", "prompt_tokens": 653, "completion_tokens": 291, "duration": 7.633810520172119, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 848, "completion_tokens": 432, "duration": 8.569397211074829, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 800, "completion_tokens": 332, "duration": 6.336095333099365, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 714, "completion_tokens": 186, "duration": 6.158652067184448, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 637, "completion_tokens": 366, "duration": 9.946396827697754, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 590, "completion_tokens": 166, "duration": 7.935367584228516, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 930, "completion_tokens": 327, "duration": 10.887322425842285, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_ext = max(extensions, key=lambda ext: ext.count(ext.upper()) - ext.count(ext.lower()))\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 934, "completion_tokens": 243, "duration": 5.519127130508423, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        if len(s1) != len(s2):\n            return False\n        return s2 in s1 + s1\n\n    return any(is_rotation(a, b[i:] + b[:i]) for i in range(len(b)))", "prompt_tokens": 1108, "completion_tokens": 515, "duration": 15.71474814414978, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 447, "completion_tokens": 206, "duration": 8.052748203277588, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 549, "completion_tokens": 345, "duration": 10.341934204101562, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 597, "completion_tokens": 267, "duration": 9.692158937454224, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 630, "completion_tokens": 298, "duration": 7.525111675262451, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 907, "completion_tokens": 222, "duration": 8.309662580490112, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 800, "completion_tokens": 319, "duration": 9.237396240234375, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1]", "prompt_tokens": 519, "completion_tokens": 182, "duration": 7.5910398960113525, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 485, "completion_tokens": 181, "duration": 5.436149835586548, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 640, "completion_tokens": 283, "duration": 9.196180820465088, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 618, "completion_tokens": 253, "duration": 5.306081533432007, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current_group = ''\n    for char in paren_string:\n        current_group += char\n        if current_group.count('(') == current_group.count(')'):\n            result.append(current_group)\n            current_group = ''\n    return result", "prompt_tokens": 559, "completion_tokens": 223, "duration": 5.360064268112183, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return abs(number) % 1", "prompt_tokens": 545, "completion_tokens": 215, "duration": 5.719048738479614, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 558, "completion_tokens": 186, "duration": 4.686077117919922, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    avg = mean(numbers)\n    return sum(abs(x - avg) for x in numbers) / len(numbers)", "prompt_tokens": 830, "completion_tokens": 462, "duration": 28.476628065109253, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimeter])\n    result.pop()  # Remove the last delimeter\n    return result", "prompt_tokens": 553, "completion_tokens": 243, "duration": 5.456571578979492, "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 1383, "completion_tokens": 652, "duration": 12.922960996627808, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 571, "completion_tokens": 241, "duration": 4.828188419342041, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 541, "completion_tokens": 212, "duration": 4.792186975479126, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 646, "completion_tokens": 325, "duration": 6.488812685012817, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 554, "completion_tokens": 136, "duration": 3.439173698425293, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result", "prompt_tokens": 457, "completion_tokens": 168, "duration": 4.248795509338379, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 868, "completion_tokens": 330, "duration": 7.059740781784058, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 405, "completion_tokens": 111, "duration": 3.3995580673217773, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 391, "completion_tokens": 132, "duration": 3.3575453758239746, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n\n\n# Test for n = 0\nassert string_sequence(0) == '0'\n\n# Test for n = 1\nassert string_sequence(1) == '0 1'\n\n# Test for n = 5\nassert string_sequence(5) == '0 1 2 3 4 5'\n\n# Test for n = 10\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'", "prompt_tokens": 427, "completion_tokens": 237, "duration": 5.091907978057861, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 462, "completion_tokens": 160, "duration": 4.406226396560669, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 775, "completion_tokens": 313, "duration": 6.941169023513794, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        count += 1\n        start = idx + 1\n    return count", "prompt_tokens": 503, "completion_tokens": 219, "duration": 5.469438791275024, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_str = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=num_str.index))", "prompt_tokens": 529, "completion_tokens": 204, "duration": 5.313708543777466, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "prompt_tokens": 807, "completion_tokens": 397, "duration": 7.274841547012329, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 704, "completion_tokens": 332, "duration": 7.115479230880737, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 750, "completion_tokens": 222, "duration": 5.777019023895264, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 340, "completion_tokens": 90, "duration": 2.961662769317627, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 402, "completion_tokens": 167, "duration": 4.143711566925049, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 599, "completion_tokens": 237, "duration": 5.099178075790405, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 495, "completion_tokens": 174, "duration": 4.161372900009155, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 401, "completion_tokens": 158, "duration": 3.9385039806365967, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 405, "completion_tokens": 134, "duration": 3.677623748779297, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 540, "completion_tokens": 208, "duration": 4.810661792755127, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 594, "completion_tokens": 210, "duration": 5.015338659286499, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 514, "completion_tokens": 190, "duration": 4.140901565551758, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\n    return fsolve(poly, 0)[0]", "prompt_tokens": 2585, "completion_tokens": 1272, "duration": 23.296611070632935, "result": "failed: 'NoneType' object is not callable", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_divisible_by_three = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    return [sorted_divisible_by_three.pop(0) if i % 3 == 0 else x for i, x in enumerate(l)]", "prompt_tokens": 792, "completion_tokens": 373, "duration": 8.127236366271973, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 595, "completion_tokens": 284, "duration": 5.5239691734313965, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 495, "completion_tokens": 164, "duration": 4.298743009567261, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 489, "completion_tokens": 211, "duration": 4.680550575256348, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l[:]\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 744, "completion_tokens": 348, "duration": 6.317282438278198, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2279, "completion_tokens": 787, "duration": 18.56517481803894, "result": "failed: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 4)", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fibonacci(i)):\n            count += 1\n    return fibonacci(i)", "prompt_tokens": 522, "completion_tokens": 322, "duration": 6.753137826919556, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 667, "completion_tokens": 233, "duration": 5.345645427703857, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n // 2\n\nassert car_race_collision(0) == 0\nassert car_race_collision(1) == 0\nassert car_race_collision(3) == 1\nassert car_race_collision(5) == 2\nassert car_race_collision(6) == 3", "prompt_tokens": 947, "completion_tokens": 287, "duration": 6.463564872741699, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 530, "completion_tokens": 154, "duration": 7.342186212539673, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 657, "completion_tokens": 200, "duration": 7.21602725982666, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return str(base_converter(x, base))\n\ndef base_converter(x, base):\n    if x < base:\n        return x\n    else:\n        return base_converter(x // base, base) * 10 + x % base", "prompt_tokens": 451, "completion_tokens": 148, "duration": 3.45633864402771, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 390, "completion_tokens": 137, "duration": 3.0652191638946533, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 721, "completion_tokens": 314, "duration": 7.589667081832886, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 520, "completion_tokens": 249, "duration": 9.197845935821533, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 6.419827699661255, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 519, "completion_tokens": 151, "duration": 3.3909425735473633, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 507, "completion_tokens": 226, "duration": 6.452146291732788, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 581, "completion_tokens": 186, "duration": 3.845146417617798, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 495, "completion_tokens": 180, "duration": 5.095916509628296, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 4.161248207092285, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 641, "completion_tokens": 207, "duration": 9.578480958938599, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 379, "completion_tokens": 181, "duration": 5.542937278747559, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 472, "completion_tokens": 163, "duration": 7.977985858917236, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 748, "completion_tokens": 252, "duration": 10.008422613143921, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 871, "completion_tokens": 271, "duration": 11.502923011779785, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n", "prompt_tokens": 637, "completion_tokens": 219, "duration": 7.701038360595703, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 3.870792865753174, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 450, "completion_tokens": 151, "duration": 52.7523307800293, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test when xs has only one coefficient\nassert derivative([5]) == []\n\n# Test when xs has two coefficients\nassert derivative([2, 3]) == [3]\n\n# Test when xs has three coefficients\nassert derivative([1, 2, 3]) == [2, 6]\n\n# Test when xs has four coefficients\nassert derivative([3, 1, 2, 4]) == [1, 4, 12]\n\n# Test when xs has five coefficients\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]", "prompt_tokens": 535, "completion_tokens": 295, "duration": 5.884339809417725, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 642, "completion_tokens": 233, "duration": 6.449028253555298, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for letter in s.lower() if letter in 'aeiouy' or (letter == 'y' and s.lower().index(letter) == len(s) - 1))\n    return count", "prompt_tokens": 569, "completion_tokens": 187, "duration": 3.789992094039917, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 516, "completion_tokens": 202, "duration": 6.071376085281372, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 557, "completion_tokens": 174, "duration": 6.146770000457764, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if 'apples' in s else 0\n    oranges = int(fruits[-2]) if 'oranges' in s else 0\n    return n - apples - oranges", "prompt_tokens": 775, "completion_tokens": 237, "duration": 8.259355783462524, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if evens:\n        smallest_even = min(evens, key=lambda x: (x[1], x[0]))\n        return [smallest_even[1], smallest_even[0]]\n    else:\n        return []\n\n# Test when the input array is [4, 2, 3]\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test when the input array is [1, 2, 3]\nassert pluck([1, 2, 3]) == [2, 1]\n\n# Test when the input array is []\nassert pluck([]) == []\n\n# Test when the input array is [5, 0, 3, 0, 4, 2]\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]", "prompt_tokens": 1031, "completion_tokens": 444, "duration": 12.94931173324585, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 735, "completion_tokens": 274, "duration": 5.343853712081909, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 633, "completion_tokens": 251, "duration": 6.018895864486694, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 536, "completion_tokens": 201, "duration": 4.388561248779297, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 776, "completion_tokens": 158, "duration": 7.671923637390137, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 694, "completion_tokens": 251, "duration": 11.700917959213257, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 769, "completion_tokens": 288, "duration": 9.350746154785156, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        prime_factors = []\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i):\n                prime_factors.append(i)\n        return prime_factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 3", "prompt_tokens": 456, "completion_tokens": 244, "duration": 4.81920599937439, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.926500082015991, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 509, "completion_tokens": 139, "duration": 6.169672250747681, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    prime_digits = set(\"2357BD\")\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 947, "completion_tokens": 214, "duration": 8.048841953277588, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 552, "completion_tokens": 115, "duration": 4.271813154220581, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 611, "completion_tokens": 261, "duration": 9.556392908096313, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('E')\n    return result", "prompt_tokens": 1046, "completion_tokens": 546, "duration": 9.029553651809692, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    return all(len(string) % i != 0 for i in range(2, int(math.sqrt(len(string))) + 1))\n\n# Testing a string with prime length\nassert prime_length('Hello') == True\n\n# Testing another string with prime length\nassert prime_length('abcdcba') == True\n\n# Testing a string with prime length\nassert prime_length('kittens') == True\n\n# Testing a string with non-prime length\nassert prime_length('orange') == False\n\n# Testing an empty string\nassert prime_length('') == False\n\n# Testing a very long string with prime length\nassert prime_length('a' * 997) == True", "prompt_tokens": 459, "completion_tokens": 268, "duration": 8.93556833267212, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 10 ** (n - 1) + 10 ** n - 10 ** (n - 2)", "prompt_tokens": 773, "completion_tokens": 401, "duration": 10.63562297821045, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(d) for d in str(N)))[2:]", "prompt_tokens": 595, "completion_tokens": 171, "duration": 5.487840414047241, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 464, "completion_tokens": 210, "duration": 8.217876434326172, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 573, "completion_tokens": 177, "duration": 4.605376720428467, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test when the list contains multiple rows and x is found in multiple rows\nassert get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the list is empty\nassert get_row([], 1) == []\n\n# Test when x is found only in one row\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test when x is not found in any row\nassert get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n], 7) == []", "prompt_tokens": 920, "completion_tokens": 506, "duration": 9.49428105354309, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 885, "completion_tokens": 345, "duration": 7.391435146331787, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * int(char.islower())\n            shifted = chr(((ord(char) - ord('a' if char.islower() else 'A') + shift) % 26) + ord('a' if char.islower() else 'A'))\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 558, "completion_tokens": 251, "duration": 5.735229015350342, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    return sorted_lst[1] if len(sorted_lst) > 1 else None", "prompt_tokens": 578, "completion_tokens": 182, "duration": 5.0710060596466064, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 971, "completion_tokens": 414, "duration": 8.171461582183838, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 591, "completion_tokens": 192, "duration": 4.774503946304321, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 545, "completion_tokens": 202, "duration": 4.806940317153931, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 1070, "completion_tokens": 437, "duration": 11.497442483901978, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 720, "completion_tokens": 263, "duration": 5.188826560974121, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n) if is_prime(x)]\n    return primes", "prompt_tokens": 633, "completion_tokens": 246, "duration": 6.018513441085815, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 488, "completion_tokens": 139, "duration": 3.8566298484802246, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 944, "completion_tokens": 490, "duration": 9.057798385620117, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 650, "completion_tokens": 194, "duration": 4.97135853767395, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 607, "completion_tokens": 216, "duration": 5.527743339538574, "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a string containing words separated by commas and spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a string containing words separated only by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with a string containing words separated only by spaces\nassert words_string(\"Testing the function with spaces only\") == [\"Testing\", \"the\", \"function\", \"with\", \"spaces\", \"only\"]\n\n# Test with a string containing words separated by commas and spaces combined\nassert words_string(\"A, B C, D E, F\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a string containing only one word\nassert words_string(\"Testing\") == [\"Testing\"]", "prompt_tokens": 628, "completion_tokens": 448, "duration": 8.89959192276001, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 600, "completion_tokens": 284, "duration": 6.406473159790039, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 668, "completion_tokens": 247, "duration": 5.727057218551636, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(d) % 2 == 0 for d in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 520, "completion_tokens": 183, "duration": 4.181663513183594, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [num for num in sorted(arr) if 1 <= num <= 9]\n    reversed_arr = filtered_arr[::-1]\n    return [names[num-1] for num in reversed_arr]", "prompt_tokens": 992, "completion_tokens": 340, "duration": 7.090529918670654, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 636, "completion_tokens": 291, "duration": 5.935885906219482, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 820, "completion_tokens": 312, "duration": 6.139133930206299, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 121, "duration": 3.230832576751709, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n\n    return False", "prompt_tokens": 966, "completion_tokens": 246, "duration": 6.055750608444214, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    total_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    total_odd_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    return \"YES\" if total_odd_lst1 <= len(lst2) - total_odd_lst2 else \"NO\"", "prompt_tokens": 776, "completion_tokens": 283, "duration": 7.689272880554199, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    result = {k: v for k, v in hist.items() if v == max_count}\n    return result", "prompt_tokens": 630, "completion_tokens": 214, "duration": 5.617715835571289, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    return result, result == result[::-1]", "prompt_tokens": 777, "completion_tokens": 307, "duration": 9.168613195419312, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), sum(int(digit) % 2 != 0 for digit in string), i, i) for i, string in enumerate(lst)]", "prompt_tokens": 740, "completion_tokens": 286, "duration": 5.940230369567871, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 751, "completion_tokens": 461, "duration": 7.404967308044434, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total = 0\n    for row in grid:\n        for well in row:\n            total += math.ceil(well / capacity)\n    \n    return total", "prompt_tokens": 1138, "completion_tokens": 357, "duration": 8.33025336265564, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 689, "completion_tokens": 194, "duration": 4.134533405303955, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in \"aeiou\"\n\n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 750, "completion_tokens": 288, "duration": 5.7840187549591064, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for char in word[1:]:\n        if char in vowels:\n            return char\n    return \"\"", "prompt_tokens": 1111, "completion_tokens": 436, "duration": 10.4601571559906, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'", "prompt_tokens": 681, "completion_tokens": 258, "duration": 5.877338886260986, "result": "passed", "passed": true}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 883, "completion_tokens": 287, "duration": 6.40718412399292, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 539, "completion_tokens": 201, "duration": 4.373814821243286, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 9 < num < 100)", "prompt_tokens": 745, "completion_tokens": 337, "duration": 8.28032398223877, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 == 1 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 845, "completion_tokens": 270, "duration": 5.522646188735962, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 895, "completion_tokens": 334, "duration": 9.607128858566284, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 638, "completion_tokens": 235, "duration": 5.222593784332275, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) == 0:\n        return True\n\n    if len(lst) == 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n\n    return True", "prompt_tokens": 928, "completion_tokens": 313, "duration": 9.350791215896606, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 859, "completion_tokens": 281, "duration": 5.225591421127319, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    signs_product = 1\n    for num in arr:\n        product *= abs(num)\n        signs_product *= 1 if num == 0 else num // abs(num)\n    return product * signs_product", "prompt_tokens": 958, "completion_tokens": 384, "duration": 8.719153881072998, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_next_cell(grid, visited):\n        min_val = float('inf')\n        next_cell = None\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] < min_val and (i, j) not in visited:\n                    min_val = grid[i][j]\n                    next_cell = (i, j)\n        return next_cell\n\n    def is_valid_cell(i, j, n):\n        return 0 <= i < n and 0 <= j < n\n\n    n = len(grid)\n    visited = set()\n    path = []\n    curr_cell = find_next_cell(grid, visited)\n    for _ in range(k):\n        path.append(grid[curr_cell[0]][curr_cell[1]])\n        visited.add(curr_cell)\n        neighbors = [(curr_cell[0] + 1, curr_cell[1]), (curr_cell[0] - 1, curr_cell[1]), (curr_cell[0], curr_cell[1] + 1), (curr_cell[0], curr_cell[1] - 1)]\n        next_neighbor = None\n        min_val = float('inf')\n        for neighbor in neighbors:\n            if is_valid_cell(neighbor[0], neighbor[1], n) and grid[neighbor[0]][neighbor[1]] < min_val and neighbor not in visited:\n                next_neighbor = neighbor\n                min_val = grid[neighbor[0]][neighbor[1]]\n        curr_cell = next_neighbor\n\n    return path", "prompt_tokens": 1338, "completion_tokens": 688, "duration": 18.148128747940063, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 3]\n    \n    tribonacci = [3, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + 1)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    \n    return tribonacci", "prompt_tokens": 979, "completion_tokens": 441, "duration": 11.411621570587158, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        if digit % 2 != 0:\n            product *= digit\n    return product", "prompt_tokens": 439, "completion_tokens": 158, "duration": 3.0021169185638428, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n            close_brackets += 1\n    return close_brackets > 0 or open_brackets > 0", "prompt_tokens": 1010, "completion_tokens": 427, "duration": 11.766352891921997, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 815, "completion_tokens": 343, "duration": 7.120937347412109, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 992, "completion_tokens": 345, "duration": 6.328323841094971, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 549, "completion_tokens": 211, "duration": 7.734007358551025, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 670, "completion_tokens": 297, "duration": 10.4350106716156, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        if '.' in a or '.' in b or ',' in a or ',' in b:\n            a = a.replace(',', '.')\n            b = b.replace(',', '.')\n            return max(float(a), float(b))\n        else:\n            return max(a, b)\n    else:\n        return max(a, b)", "prompt_tokens": 736, "completion_tokens": 394, "duration": 11.583071231842041, "result": "failed: '>' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test when n is 4, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False\n\n# Test when n is 6, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False\n\n# Test when n is 8, which can be expressed as the sum of exactly 4 positive even numbers (2 + 2 + 2 + 2)\nassert is_equal_to_sum_even(8) == True\n\n# Test when n is 20, which can be expressed as the sum of exactly 4 positive even numbers (4 + 6 + 8 + 2)\nassert is_equal_to_sum_even(20) == True\n\n# Test when n is 15, which cannot be expressed as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(15) == False", "prompt_tokens": 541, "completion_tokens": 425, "duration": 8.67974042892456, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result *= fact\n        return result", "prompt_tokens": 559, "completion_tokens": 260, "duration": 8.101146221160889, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 504, "completion_tokens": 141, "duration": 4.537262678146362, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 802, "completion_tokens": 296, "duration": 10.32829737663269, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result", "prompt_tokens": 695, "completion_tokens": 236, "duration": 4.565560817718506, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = ' '.join(word for word in words if is_prime(len(word)))\n    return result", "prompt_tokens": 597, "completion_tokens": 209, "duration": 3.9996306896209717, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1 and result.numerator % result.denominator == 0", "prompt_tokens": 588, "completion_tokens": 141, "duration": 7.143609285354614, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x) if x in nums else -1))", "prompt_tokens": 996, "completion_tokens": 418, "duration": 12.18158483505249, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 1143, "completion_tokens": 578, "duration": 10.054205656051636, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 716, "completion_tokens": 305, "duration": 6.204251289367676, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    result = planets[start_idx+1:end_idx]\n    \n    return tuple(result)", "prompt_tokens": 863, "completion_tokens": 385, "duration": 11.186439990997314, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1182, "completion_tokens": 390, "duration": 12.319830894470215, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 600, "completion_tokens": 323, "duration": 10.489825010299683, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 1357, "completion_tokens": 710, "duration": 13.034201860427856, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 907, "completion_tokens": 304, "duration": 9.725589513778687, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n    \n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n\nassert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nassert Strongest_Extension('Class', ['Aa', 'bB', 'Cc']) == 'Class.Aa'\nassert Strongest_Extension('AnotherClass', ['xYz', 'AbCd', 'eFgH']) == 'AnotherClass.eFgH'\nassert Strongest_Extension('NewClass', ['AbC', 'def', 'Ghi', 'JKL']) == 'NewClass.AbC'", "prompt_tokens": 3144, "completion_tokens": 1115, "duration": 23.402782917022705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 640, "completion_tokens": 247, "duration": 8.01470398902893, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 442, "completion_tokens": 199, "duration": 7.6042187213897705, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n                      100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 552, "completion_tokens": 303, "duration": 9.8004629611969, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 577, "completion_tokens": 205, "duration": 5.40998649597168, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    unique_chars = [len(set(word)) for word in words]\n    max_unique = max(unique_chars)\n    max_unique_words = [word for word, unique in zip(words, unique_chars) if unique == max_unique]\n    return min(max_unique_words) if max_unique_words else None", "prompt_tokens": 554, "completion_tokens": 200, "duration": 7.404608488082886, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining\n    left = max(0, remaining - (need - number))\n    return [total_eaten, left]", "prompt_tokens": 984, "completion_tokens": 292, "duration": 6.22709846496582, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 963, "completion_tokens": 482, "duration": 9.546224355697632, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    else:\n        return result", "prompt_tokens": 571, "completion_tokens": 233, "duration": 6.605191707611084, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 485, "completion_tokens": 176, "duration": 6.996428489685059, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 633, "completion_tokens": 276, "duration": 9.35577940940857, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 630, "completion_tokens": 265, "duration": 5.988698720932007, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count > 1:\n                current += char\n        elif char == ')':\n            count -= 1\n            if count > 0:\n                current += char\n            if count == 0:\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 650, "completion_tokens": 347, "duration": 6.946687698364258, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 525, "completion_tokens": 193, "duration": 5.600569248199463, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 546, "completion_tokens": 174, "duration": 4.689958095550537, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return statistics.mean([abs(x - statistics.mean(numbers)) for x in numbers])", "prompt_tokens": 801, "completion_tokens": 425, "duration": 7.381053447723389, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 666, "completion_tokens": 362, "duration": 8.190033912658691, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    levels.append(max_level)\n    return levels", "prompt_tokens": 523, "completion_tokens": 237, "duration": 5.445202350616455, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 544, "completion_tokens": 214, "duration": 5.493226051330566, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)", "prompt_tokens": 700, "completion_tokens": 351, "duration": 7.025449275970459, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(numbers[i], result[-1]))\n\n    return result", "prompt_tokens": 739, "completion_tokens": 423, "duration": 8.370160341262817, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n\n# Testing an empty string\nassert is_palindrome('') == True\n\n# Testing a single-character palindrome\nassert is_palindrome('a') == True\n\n# Testing a palindrome with even number of characters\nassert is_palindrome('racecar') == True\n\n# Testing a palindrome with odd number of characters\nassert is_palindrome('level') == True\n\n# Testing a non-palindrome string\nassert is_palindrome('hello') == False", "prompt_tokens": 564, "completion_tokens": 328, "duration": 6.730937480926514, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 449, "completion_tokens": 167, "duration": 4.134518623352051, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s", "prompt_tokens": 525, "completion_tokens": 196, "duration": 4.757850885391235, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 497, "completion_tokens": 211, "duration": 4.830767393112183, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 393, "completion_tokens": 129, "duration": 4.046243190765381, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 651, "completion_tokens": 186, "duration": 5.418357849121094, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 449, "completion_tokens": 147, "duration": 4.517662048339844, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes.get(note, 0) for note in music_string.split()]\n\n# Testing with a simple input string containing only one type of note\nassert parse_music('o o o o') == [4, 4, 4, 4]\n\n# Testing with a string containing different types of notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4]\n\n# Testing with a string where all notes are quater notes\nassert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n\n# Testing with an empty string\nassert parse_music('') == []\n\n# Testing with a string that contains invalid notes\nassert parse_music('o a .|') == []  # Function should ignore invalid notes and return an empty list", "prompt_tokens": 2766, "completion_tokens": 1437, "duration": 28.609867334365845, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 449, "completion_tokens": 149, "duration": 3.938832998275757, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 511, "completion_tokens": 233, "duration": 6.125159740447998, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 813, "completion_tokens": 378, "duration": 6.574844121932983, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 711, "completion_tokens": 340, "duration": 6.9652369022369385, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 587, "completion_tokens": 253, "duration": 6.2823145389556885, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 338, "completion_tokens": 88, "duration": 2.815004348754883, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = n // 2\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor", "prompt_tokens": 368, "completion_tokens": 121, "duration": 3.3629183769226074, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 600, "completion_tokens": 245, "duration": 5.310128211975098, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 512, "completion_tokens": 191, "duration": 6.394010782241821, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 399, "completion_tokens": 140, "duration": 5.596065044403076, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 384, "completion_tokens": 113, "duration": 3.5739293098449707, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 227, "duration": 4.650522470474243, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 603, "completion_tokens": 219, "duration": 4.58053183555603, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 511, "completion_tokens": 186, "duration": 4.2263782024383545, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    n = len(xs)\n    assert n % 2 == 0, \"List of coefficients must have an even number of elements\"\n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    def f(x):\n        return poly(xs, x)\n    \n    if f(0) == 0:\n        return 0\n    \n    x = 0\n    while f(x) != 0:\n        x += 1\n    return x", "prompt_tokens": 1092, "completion_tokens": 547, "duration": 56.46009373664856, "result": "timed out", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [val for idx, val in enumerate(l) if idx % 3 == 0]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for idx, val in zip(indices_divisible_by_three, sorted_values):\n        result[idx] = val\n    \n    return result", "prompt_tokens": 649, "completion_tokens": 259, "duration": 5.104178190231323, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 529, "completion_tokens": 218, "duration": 4.629363536834717, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 497, "completion_tokens": 166, "duration": 6.469985246658325, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 480, "completion_tokens": 202, "duration": 4.088808059692383, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    new_list = l.copy()\n    for i in range(0, len(l), 2):\n        new_list[i] = sorted(l[i:i+2])[0]\n    return new_list", "prompt_tokens": 643, "completion_tokens": 266, "duration": 5.636077404022217, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    # Reverse the cyclic transformation to decode the string\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)", "prompt_tokens": 697, "completion_tokens": 366, "duration": 7.775495767593384, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 482, "completion_tokens": 260, "duration": 6.436005592346191, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 672, "completion_tokens": 238, "duration": 5.839179515838623, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road\nassert car_race_collision(0) == 0\n# No cars, so no collisions should occur\n\n# Test when there is only one car on each side of the road\nassert car_race_collision(1) == 1\n# Only one pair of cars, so they will collide\n\n# Test when there are 5 cars on each side of the road\nassert car_race_collision(5) == 5\n# Each car moving left to right will collide with a car moving right to left, so there will be 5 collisions\n\n# Test when there are an even number of cars on each side of the road\nassert car_race_collision(4) == 4\n# Each car moving left to right will collide with a car moving right to left, so there will be 4 collisions\n\n# Test when there are an odd number of cars on each side of the road\nassert car_race_collision(3) == 3\n# Each car moving left to right will collide with a car moving right to left, so there will be 3 collisions", "prompt_tokens": 717, "completion_tokens": 474, "duration": 11.693050384521484, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 589, "completion_tokens": 213, "duration": 4.919618368148804, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 640, "completion_tokens": 183, "duration": 4.751931667327881, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result", "prompt_tokens": 454, "completion_tokens": 155, "duration": 5.471034049987793, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 381, "completion_tokens": 123, "duration": 6.3764283657073975, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            result = a + b + c + d\n            a, b, c, d = b, c, d, result\n        return result", "prompt_tokens": 773, "completion_tokens": 364, "duration": 6.596505641937256, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 551, "completion_tokens": 280, "duration": 7.4602601528167725, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 5.840080738067627, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 3.190300703048706, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 527, "completion_tokens": 207, "duration": 8.17776107788086, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test empty string\nassert remove_vowels('') == ''\n\n# Test string with vowels and new line character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test string with upper and lowercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 541, "completion_tokens": 250, "duration": 4.97912335395813, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 491, "completion_tokens": 176, "duration": 3.5339243412017822, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 5.812507629394531, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 643, "completion_tokens": 208, "duration": 5.697371482849121, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 396, "completion_tokens": 147, "duration": 6.681493282318115, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 450, "completion_tokens": 141, "duration": 4.961807489395142, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 829, "completion_tokens": 337, "duration": 10.526407241821289, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 831, "completion_tokens": 231, "duration": 9.118304967880249, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n    \n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    \n    return max(prime_factors)\n\nassert largest_prime_factor(13195) == 29\nassert largest_prime_factor(2048) == 2\nassert largest_prime_factor(56) == 7\nassert largest_prime_factor(987654321) == 379721\nassert largest_prime_factor(1000000000) == 5", "prompt_tokens": 493, "completion_tokens": 396, "duration": 9.680079221725464, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 203, "duration": 6.725942134857178, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 444, "completion_tokens": 145, "duration": 5.177096128463745, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [coeff * exp for exp, coeff in enumerate(xs)][1:]", "prompt_tokens": 1205, "completion_tokens": 630, "duration": 14.731068849563599, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 755, "completion_tokens": 339, "duration": 6.145360946655273, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count", "prompt_tokens": 567, "completion_tokens": 200, "duration": 6.425106763839722, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 533, "completion_tokens": 240, "duration": 6.911080598831177, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 544, "completion_tokens": 161, "duration": 5.186908006668091, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if 'apples' in fruits else 0\n    oranges = int(fruits[-1]) if 'oranges' in fruits else 0\n    return n - apples - oranges", "prompt_tokens": 728, "completion_tokens": 190, "duration": 7.5771565437316895, "result": "failed: invalid literal for int() with base 10: 'oranges'", "passed": false}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    \n    if not even_nodes:\n        return []\n    \n    min_even_value = min(even_nodes)[0]\n    min_even_nodes = [node for node in even_nodes if node[0] == min_even_value]\n    \n    return min(min_even_nodes, key=lambda x: x[1])\n\n# Test when the input array is empty\nassert pluck([]) == []\n\n# Test when all nodes in the array are odd\nassert pluck([1, 3, 5, 7]) == []\n\n# Test when there is only one even node in the array\nassert pluck([6]) == [6, 0]\n\n# Test when there are multiple even nodes with different values\nassert pluck([4, 8, 2, 6]) == [2, 2]\n\n# Test when there are multiple even nodes with the same smallest value\nassert pluck([4, 2, 6, 2]) == [2, 1]\n\n# Test when there are multiple even nodes with the same smallest value but different indexes\nassert pluck([6, 2, 4, 2]) == [2, 1]\n\n# Test a large array with mixed even and odd nodes\nassert pluck([9, 3, 2, 7, 5, 4, 8, 1]) == [2, 2]\n\n# Test a large array with only even nodes\nassert pluck([10, 8, 6, 4, 2]) == [2, 4]", "prompt_tokens": 4110, "completion_tokens": 2044, "duration": 40.87546181678772, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 776, "completion_tokens": 315, "duration": 10.711772203445435, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 618, "completion_tokens": 236, "duration": 7.20827841758728, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 269, "duration": 8.23528265953064, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 777, "completion_tokens": 160, "duration": 5.653827428817749, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes\n\n# Test with an array that is already a palindrome\nassert smallest_change([1, 2, 3, 2, 1]) == 0\n\n# Test with an array where one change is needed to make it a palindrome\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\n# Test with an array where multiple changes are needed to make it a palindrome\nassert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n\n# Test with an array containing negative numbers\nassert smallest_change([-1, -2, -3, -4, -3, -2, -1]) == 0\n\n# Test with an array of all the same elements\nassert smallest_change([0, 0, 0, 0, 0, 0, 0]) == 0", "prompt_tokens": 702, "completion_tokens": 459, "duration": 10.843014240264893, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 748, "completion_tokens": 250, "duration": 9.1275954246521, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test for a number that is the multiplication of 3 prime numbers\nassert is_multiply_prime(30) == True\n\n# Test for a prime number\nassert is_multiply_prime(17) == False\n\n# Test for a non-prime number that is not the multiplication of 3 prime numbers\nassert is_multiply_prime(40) == False\n\n# Test for the number 1 which is not a multiplication of 3 prime numbers\nassert is_multiply_prime(1) == False", "prompt_tokens": 445, "completion_tokens": 308, "duration": 6.408599138259888, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 650, "completion_tokens": 207, "duration": 5.282055616378784, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 823, "completion_tokens": 266, "duration": 5.590341567993164, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 985, "completion_tokens": 262, "duration": 6.002559661865234, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 578, "completion_tokens": 140, "duration": 5.155961990356445, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 581, "completion_tokens": 235, "duration": 8.607537746429443, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_table = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n    \n    result = []\n    for gpa in grades:\n        for key in grade_table:\n            if gpa >= key:\n                result.append(grade_table[key])\n                break\n    \n    return result", "prompt_tokens": 1058, "completion_tokens": 508, "duration": 13.301189422607422, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test for a string with a prime length\nassert prime_length('Hello') == True\n\n# Test for another string with a prime length\nassert prime_length('abcdcba') == True\n\n# Test for a string with a prime length\nassert prime_length('kittens') == True\n\n# Test for a string with a non-prime length\nassert prime_length('orange') == False", "prompt_tokens": 430, "completion_tokens": 235, "duration": 6.49945592880249, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 567, "completion_tokens": 336, "duration": 6.097299337387085, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(map(int, bin(N)[2:]))\n    return bin(binary_sum)[2:]", "prompt_tokens": 571, "completion_tokens": 153, "duration": 4.525745868682861, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 491, "completion_tokens": 237, "duration": 8.090150356292725, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    ordered_words = []\n    for word in s.split():\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 581, "completion_tokens": 185, "duration": 4.842269420623779, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test when the input list is not empty and x is found in multiple rows with multiple occurrences\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test when the input list is empty\nassert get_row([], 1) == []\n\n# Test when x is found only in one row with multiple occurrences\nassert get_row([[], [1], [1, 2, 3]], 1) == [(1, 0), (2, 2)]\n\n# Test when x is found in multiple rows but only once in each row\nassert get_row([[1, 2, 3], [4, 5], [6, 7, 1]], 1) == [(0, 2), (2, 2)]\n\n# Test when x is not found in the list\nassert get_row([[2, 3], [4, 5], [6, 7]], 1) == []", "prompt_tokens": 3683, "completion_tokens": 1906, "duration": 42.10300016403198, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 759, "completion_tokens": 220, "duration": 5.490818977355957, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    rotated_alphabet = str.maketrans(\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        \"cdefghijklmnopqrstuvwxyzabCDEFGHIJKLMNOPQRSTUVWXYZAB\"\n    )\n    return s.translate(rotated_alphabet)", "prompt_tokens": 593, "completion_tokens": 243, "duration": 5.206578731536865, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 544, "completion_tokens": 164, "duration": 3.68654465675354, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\"I \") + S.count(\"I.\") + S.count(\"I?\") + S.count(\"I!\")", "prompt_tokens": 543, "completion_tokens": 181, "duration": 4.299431085586548, "result": "failed: Test 6", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 590, "completion_tokens": 189, "duration": 4.078429460525513, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 495, "completion_tokens": 160, "duration": 3.91400146484375, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_digits(number):\n        return sum(int(digit) for digit in str(number))\n\n    primes = [num for num in lst if is_prime(num)]\n\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum_digits(max_prime)", "prompt_tokens": 1064, "completion_tokens": 430, "duration": 7.903324842453003, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 748, "completion_tokens": 291, "duration": 5.554538249969482, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 639, "completion_tokens": 247, "duration": 5.415567398071289, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 495, "completion_tokens": 146, "duration": 3.7729806900024414, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 831, "completion_tokens": 380, "duration": 8.895524501800537, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 620, "completion_tokens": 170, "duration": 5.6270928382873535, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 662, "completion_tokens": 274, "duration": 5.7514588832855225, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'\\s|,', s)", "prompt_tokens": 573, "completion_tokens": 178, "duration": 4.658022403717041, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 581, "completion_tokens": 265, "duration": 5.749493598937988, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    return bin(round(avg))[2:]", "prompt_tokens": 589, "completion_tokens": 168, "duration": 3.9908952713012695, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 1110, "completion_tokens": 580, "duration": 11.546748161315918, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [nums[num-1] for num in reversed_arr]", "prompt_tokens": 975, "completion_tokens": 329, "duration": 6.0324952602386475, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result", "prompt_tokens": 697, "completion_tokens": 353, "duration": 7.954373836517334, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 746, "completion_tokens": 237, "duration": 5.116725921630859, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 500, "completion_tokens": 118, "duration": 3.3595032691955566, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False", "prompt_tokens": 974, "completion_tokens": 250, "duration": 5.903824329376221, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 797, "completion_tokens": 265, "duration": 5.533556222915649, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n\n    max_count = max(counts.values())\n    return {k: v for k, v in counts.items() if v == max_count}", "prompt_tokens": 637, "completion_tokens": 217, "duration": 4.497631549835205, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_str = ''.join(ch for ch in s if ch not in c)\n    return filtered_str, filtered_str == filtered_str[::-1]", "prompt_tokens": 747, "completion_tokens": 281, "duration": 7.406448841094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 787, "completion_tokens": 325, "duration": 9.075109004974365, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    current_sum = min_sum = nums[0]\n    \n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 623, "completion_tokens": 332, "duration": 7.566163778305054, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1055, "completion_tokens": 263, "duration": 6.188699960708618, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 751, "completion_tokens": 256, "duration": 5.651878833770752, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\nassert select_words(\"simple white space\", 2) == []\nassert select_words(\"Hello world\", 4) == [\"world\"]\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\nassert select_words(\"\", 3) == []", "prompt_tokens": 724, "completion_tokens": 331, "duration": 6.928874969482422, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    word = word[1:-1]\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 611, "completion_tokens": 237, "duration": 5.7811760902404785, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 671, "completion_tokens": 217, "duration": 4.6919639110565186, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 889, "completion_tokens": 290, "duration": 5.746167421340942, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 541, "completion_tokens": 205, "duration": 5.201536655426025, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 692, "completion_tokens": 284, "duration": 6.471815586090088, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 781, "completion_tokens": 196, "duration": 4.326913595199585, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 916, "completion_tokens": 402, "duration": 7.7720866203308105, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 1550, "completion_tokens": 683, "duration": 14.198237180709839, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            return False\n    return True", "prompt_tokens": 935, "completion_tokens": 303, "duration": 10.399971961975098, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    if length <= 0:\n        return \"NO\"\n\n    if length == 1:\n        return \"NO\"\n\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 808, "completion_tokens": 231, "duration": 5.815036773681641, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num >= 0 else -1\n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum", "prompt_tokens": 612, "completion_tokens": 254, "duration": 5.4610207080841064, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    N = len(grid)\n    all_positions = list(itertools.product(range(N), range(N)))\n    paths = itertools.permutations(all_positions, k)\n    min_path = min(paths, key=lambda p: [grid[x][y] for x, y in p])\n    return [grid[x][y] for x, y in min_path]", "prompt_tokens": 1213, "completion_tokens": 324, "duration": 10.181151866912842, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        result = [3, 1]\n        a, b, c = 3, 1, 2\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                next_num = a + b\n            else:\n                next_num = a + b + c\n                a, b, c = b, c, next_num\n            result.append(next_num)\n        return result", "prompt_tokens": 838, "completion_tokens": 317, "duration": 9.73967719078064, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 472, "completion_tokens": 193, "duration": 5.187497615814209, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    \n    return len(stack) < 2", "prompt_tokens": 570, "completion_tokens": 181, "duration": 3.4492180347442627, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum(int(x) ** 2 for x in lst)\n    return total", "prompt_tokens": 898, "completion_tokens": 429, "duration": 12.23545217514038, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip().split()) == 1 or txt.strip()[-2] == \" \")", "prompt_tokens": 995, "completion_tokens": 350, "duration": 9.331357717514038, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_idx = i - 1\n    return largest_idx", "prompt_tokens": 558, "completion_tokens": 221, "duration": 6.277364730834961, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    a = max(neg_integers) if neg_integers else None\n    b = min(pos_integers) if pos_integers else None\n    return (a, b)", "prompt_tokens": 641, "completion_tokens": 262, "duration": 5.791310548782349, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        return max(a, b)\n    elif str(a).replace(',', '.') == str(b):\n        return a\n    else:\n        return None", "prompt_tokens": 678, "completion_tokens": 263, "duration": 5.45280385017395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 1266, "completion_tokens": 615, "duration": 14.586267471313477, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        result *= fact\n    return result", "prompt_tokens": 595, "completion_tokens": 269, "duration": 5.3121747970581055, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r' {3,}', '-', re.sub(r' ', '_', text))", "prompt_tokens": 536, "completion_tokens": 169, "duration": 7.8479790687561035, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 788, "completion_tokens": 278, "duration": 9.653194427490234, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 680, "completion_tokens": 234, "duration": 5.967301845550537, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def word_length_is_prime(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if word_length_is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 705, "completion_tokens": 339, "duration": 6.644979476928711, "result": "failed: object of type 'int' has no len()", "passed": false}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 594, "completion_tokens": 162, "duration": 3.375997304916382, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 558, "completion_tokens": 193, "duration": 3.7689831256866455, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 613, "completion_tokens": 259, "duration": 8.929865837097168, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 652, "completion_tokens": 260, "duration": 8.76006817817688, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx + 1:end_idx])\n    else:\n        return tuple(planets[end_idx + 1:start_idx])[::-1]", "prompt_tokens": 830, "completion_tokens": 354, "duration": 7.249136209487915, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(sorted(even_length_words), key=lambda x: (len(x), x))\n    return sorted_words", "prompt_tokens": 745, "completion_tokens": 245, "duration": 9.379668474197388, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 540, "completion_tokens": 269, "duration": 6.567636013031006, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test with list containing positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test with list containing positive even numbers only\nassert double_the_difference([2, 4, 6]) == 0\n\n# Test with list containing a mix of positive odd, even, and negative numbers\nassert double_the_difference([1, -2, 3, 0, -4]) == 10\n\n# Test with list containing only negative numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0", "prompt_tokens": 699, "completion_tokens": 412, "duration": 8.035284280776978, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 910, "completion_tokens": 296, "duration": 6.4702935218811035, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 927, "completion_tokens": 288, "duration": 8.830510139465332, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if a.find(b) != -1:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 635, "completion_tokens": 242, "duration": 9.094930410385132, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 440, "completion_tokens": 203, "duration": 7.632659673690796, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 475, "completion_tokens": 224, "duration": 8.662036895751953, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 601, "completion_tokens": 230, "duration": 4.807902097702026, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 949, "completion_tokens": 352, "duration": 8.21345829963684, "result": "failed: t1", "passed": false}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 935, "completion_tokens": 250, "duration": 4.48210072517395, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 851, "completion_tokens": 369, "duration": 7.938517808914185, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    reversed_string = s[::-1]\n    result = \"\"\n    for char in reversed_string:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result", "prompt_tokens": 592, "completion_tokens": 262, "duration": 6.05130410194397, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 490, "completion_tokens": 189, "duration": 7.123705625534058, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 628, "completion_tokens": 271, "duration": 8.546934843063354, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 668, "completion_tokens": 303, "duration": 5.742827892303467, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n\n        current_group += char\n\n        if open_count == 0:\n            result.append(current_group)\n            current_group = ''\n\n    return result", "prompt_tokens": 577, "completion_tokens": 263, "duration": 6.496092796325684, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 552, "completion_tokens": 220, "duration": 4.259325981140137, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 527, "completion_tokens": 160, "duration": 4.31739616394043, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 610, "completion_tokens": 234, "duration": 5.043864011764526, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 600, "completion_tokens": 292, "duration": 7.226932048797607, "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    \n    levels.append(max_level)\n    return levels", "prompt_tokens": 570, "completion_tokens": 284, "duration": 5.62939715385437, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 550, "completion_tokens": 220, "duration": 6.109318256378174, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 693, "completion_tokens": 356, "duration": 7.005051612854004, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 645, "completion_tokens": 324, "duration": 8.576590538024902, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n    def find_longest_palindromic_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n        return s\n\n    longest_suffix = find_longest_palindromic_suffix(string)\n    prefix = string[:len(string) - len(longest_suffix)]\n    \n    return string + prefix[::-1]", "prompt_tokens": 1771, "completion_tokens": 1020, "duration": 20.441020488739014, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 538, "completion_tokens": 266, "duration": 6.650411128997803, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 457, "completion_tokens": 110, "duration": 3.3681533336639404, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(abs(a), abs(b))", "prompt_tokens": 450, "completion_tokens": 158, "duration": 3.9443938732147217, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 454, "completion_tokens": 195, "duration": 4.702415704727173, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 607, "completion_tokens": 142, "duration": 3.868067502975464, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 437, "completion_tokens": 135, "duration": 3.8622515201568604, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    music_notes = music_string.split()\n    return [beats[note] for note in music_notes]\n\n# Test with one whole note 'o'\nassert parse_music('o') == [4]\n\n# Test with one half note 'o|'\nassert parse_music('o|') == [2]\n\n# Test with one quater note '.|'\nassert parse_music('.|') == [1]\n\n# Test with a mix of whole, half, and quater notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n# Test with all quater notes\nassert parse_music('.| .| .| .|') == [1, 1, 1, 1]\n\n# Test with empty input\nassert parse_music('') == []", "prompt_tokens": 709, "completion_tokens": 430, "duration": 9.223158836364746, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 519, "completion_tokens": 233, "duration": 6.326740503311157, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_dict = {word: idx for idx, word in enumerate(number_words)}\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_dict[x])\n    \n    return ' '.join(sorted_numbers)", "prompt_tokens": 564, "completion_tokens": 267, "duration": 5.145831108093262, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result", "prompt_tokens": 776, "completion_tokens": 358, "duration": 7.862256050109863, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 749, "completion_tokens": 377, "duration": 8.191680669784546, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 490, "completion_tokens": 159, "duration": 4.474204778671265, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 323, "completion_tokens": 73, "duration": 2.8345046043395996, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors) if divisors else 1", "prompt_tokens": 422, "completion_tokens": 179, "duration": 4.453157424926758, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 619, "completion_tokens": 261, "duration": 5.457686901092529, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 535, "completion_tokens": 223, "duration": 6.1586127281188965, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 394, "completion_tokens": 131, "duration": 3.5805234909057617, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 369, "completion_tokens": 98, "duration": 2.903661012649536, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 595, "completion_tokens": 277, "duration": 7.899177074432373, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 654, "completion_tokens": 270, "duration": 6.340888738632202, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 524, "completion_tokens": 200, "duration": 5.002442836761475, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    n = len(xs) - 1\n    return -xs[0] / xs[n-1] if n > 1 else None", "prompt_tokens": 805, "completion_tokens": 226, "duration": 5.643272161483765, "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l[:]\n    for i in range(2, len(new_list), 3):\n        new_list[i-2:i+1] = sorted(new_list[i-2:i+1])\n    return new_list", "prompt_tokens": 802, "completion_tokens": 377, "duration": 8.283159971237183, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 610, "completion_tokens": 298, "duration": 6.975670099258423, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 502, "completion_tokens": 171, "duration": 4.874907970428467, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 466, "completion_tokens": 188, "duration": 8.091585159301758, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[1:][::2]) if i % 2 != 0 else l[i] for i in range(len(l))]", "prompt_tokens": 614, "completion_tokens": 228, "duration": 4.980084419250488, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    pass", "prompt_tokens": 667, "completion_tokens": 261, "duration": 8.454713106155396, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while n > 0:\n        i += 1\n        if is_prime(fibonacci(i)):\n            n -= 1\n\n    return fibonacci(i)\n\n# Test when n = 1\nassert prime_fib(1) == 2\n\n# Test when n = 2\nassert prime_fib(2) == 3\n\n# Test when n = 3\nassert prime_fib(3) == 5\n\n# Test when n = 4\nassert prime_fib(4) == 13\n\n# Test when n = 5\nassert prime_fib(5) == 89", "prompt_tokens": 477, "completion_tokens": 367, "duration": 7.735728740692139, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 714, "completion_tokens": 280, "duration": 5.464085340499878, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 619, "completion_tokens": 159, "duration": 3.3525521755218506, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 558, "completion_tokens": 182, "duration": 5.122267246246338, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 645, "completion_tokens": 198, "duration": 4.247129201889038, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x = x // base\n    return res", "prompt_tokens": 482, "completion_tokens": 160, "duration": 4.259143352508545, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 431, "completion_tokens": 173, "duration": 5.347548723220825, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n-2):\n        a, b, c, d = b, c, d, a + b + c + d\n    return c", "prompt_tokens": 732, "completion_tokens": 275, "duration": 6.834611415863037, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    if not l:\n        return None\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 532, "completion_tokens": 270, "duration": 6.435879230499268, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 404, "completion_tokens": 98, "duration": 6.404689311981201, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return 2**n % p", "prompt_tokens": 529, "completion_tokens": 160, "duration": 4.5013673305511475, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 564, "completion_tokens": 283, "duration": 6.103244781494141, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 552, "completion_tokens": 160, "duration": 3.3910515308380127, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 490, "completion_tokens": 175, "duration": 5.332529544830322, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 4.448894262313843, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "prompt_tokens": 580, "completion_tokens": 145, "duration": 3.6238648891448975, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 379, "completion_tokens": 182, "duration": 5.170291900634766, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 552, "completion_tokens": 243, "duration": 6.425605297088623, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 543, "completion_tokens": 251, "duration": 8.637385368347168, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 691, "completion_tokens": 305, "duration": 5.902071475982666, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        i = 2\n        while i <= num:\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n                num //= i\n            else:\n                i += 1\n        return max(factors)\n\n    return prime_factors(n)", "prompt_tokens": 463, "completion_tokens": 284, "duration": 6.1161863803863525, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 548, "completion_tokens": 202, "duration": 3.799532890319824, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 545, "completion_tokens": 246, "duration": 7.287547588348389, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * c for i, c in enumerate(xs)][1:]\n\n# Remove the unit tests as requested", "prompt_tokens": 1284, "completion_tokens": 519, "duration": 12.56897521018982, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 643, "completion_tokens": 227, "duration": 9.189538955688477, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOUy'\n    return sum(1 for char in s if char in vowels and (char != 'y' or s.index(char) == len(s)-1))", "prompt_tokens": 554, "completion_tokens": 168, "duration": 5.266624212265015, "result": "failed: Test 5", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 477, "completion_tokens": 163, "duration": 7.540215015411377, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 533, "completion_tokens": 150, "duration": 3.8794007301330566, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruit_counts = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(fruit_counts)\n\n# Test when there are apples and oranges in the basket\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n\n# Test when there are no apples in the basket\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n\n# Test when there are apples and oranges in the basket, but mangoes dominate\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n\n# Test when there are more oranges than apples in the basket\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19", "prompt_tokens": 732, "completion_tokens": 292, "duration": 7.126802921295166, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_value = min(even_nodes, key=lambda x: (x[0], x[1]))\n    return [smallest_value[0], smallest_value[1]]", "prompt_tokens": 1731, "completion_tokens": 601, "duration": 11.039771795272827, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n\n    return result", "prompt_tokens": 695, "completion_tokens": 255, "duration": 5.895355463027954, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 539, "completion_tokens": 150, "duration": 7.230304956436157, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 613, "completion_tokens": 280, "duration": 7.339211940765381, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 876, "completion_tokens": 259, "duration": 6.043883323669434, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n\n# Test when input array is already a palindromic array\nassert smallest_change([1, 2, 3, 2, 1]) == 0\n\n# Test when input array requires only one change to become palindromic\nassert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n\n# Test when input array requires multiple changes to become palindromic\nassert smallest_change([1, 2, 3, 5, 4, 7, 9, 6]) == 4\n\n# Test when input array is empty\nassert smallest_change([]) == 0\n\n# Test when input array has only one element\nassert smallest_change([5]) == 0", "prompt_tokens": 665, "completion_tokens": 382, "duration": 7.50367283821106, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 754, "completion_tokens": 234, "duration": 6.302884101867676, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = []\n    i = 2\n    while i * i <= a:\n        if a % i == 0:\n            a //= i\n            factors.append(i)\n        else:\n            i += 1\n    if a > 1:\n        factors.append(a)\n    return len(factors) == 3", "prompt_tokens": 812, "completion_tokens": 377, "duration": 7.313346862792969, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 652, "completion_tokens": 208, "duration": 5.533058404922485, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 534, "completion_tokens": 164, "duration": 3.944444417953491, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1055, "completion_tokens": 323, "duration": 8.11195993423462, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 579, "completion_tokens": 142, "duration": 4.887742042541504, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n            \n    return True", "prompt_tokens": 572, "completion_tokens": 222, "duration": 7.539734601974487, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('D-')\n    return result", "prompt_tokens": 1040, "completion_tokens": 534, "duration": 14.418856620788574, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 868, "completion_tokens": 448, "duration": 13.43395471572876, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10**(n-1)", "prompt_tokens": 388, "completion_tokens": 138, "duration": 4.796848297119141, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 614, "completion_tokens": 187, "duration": 5.607887029647827, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 428, "completion_tokens": 174, "duration": 3.562993049621582, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 614, "completion_tokens": 209, "duration": 5.050646543502808, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    res = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                res.append((i, j))\n    return res", "prompt_tokens": 853, "completion_tokens": 216, "duration": 4.8606109619140625, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def get_sum(array):\n        return array[0] + array[-1]\n\n    sorted_array = sorted(array)\n    if get_sum(array) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 885, "completion_tokens": 357, "duration": 7.372576713562012, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(((ord(c) - 97 + 2) * 2) % 26 + 97) if c.islower() else chr(((ord(c) - 65 + 2) * 2) % 26 + 65) if c.isupper() else c for c in s)", "prompt_tokens": 511, "completion_tokens": 185, "duration": 6.996659994125366, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 561, "completion_tokens": 171, "duration": 4.418815612792969, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('! I') + S.count('? I')", "prompt_tokens": 939, "completion_tokens": 372, "duration": 7.89803147315979, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 573, "completion_tokens": 174, "duration": 3.552705764770508, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr(ord(char) + 2)\n                if encoded_char in vowels:\n                    encoded_char = encoded_char.upper()\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message", "prompt_tokens": 539, "completion_tokens": 241, "duration": 4.888256788253784, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1070, "completion_tokens": 431, "duration": 8.7596595287323, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 706, "completion_tokens": 233, "duration": 5.871523141860962, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 251, "duration": 5.4322123527526855, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 524, "completion_tokens": 175, "duration": 4.721793174743652, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 444, "completion_tokens": 174, "duration": 3.984764814376831, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 692, "completion_tokens": 236, "duration": 5.461867809295654, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 631, "completion_tokens": 242, "duration": 4.880535840988159, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 607, "completion_tokens": 211, "duration": 4.832518815994263, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 592, "completion_tokens": 276, "duration": 6.403172254562378, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\n# Test when n is less than m and the average is an integer\nassert rounded_avg(1, 5) == \"0b11\"\n\n# Test when n is greater than m\nassert rounded_avg(7, 5) == -1\n\n# Test when n is less than m and the average is not an integer\nassert rounded_avg(10, 20) == \"0b1111\"\n\n# Test when n is less than m and the average is not an integer\nassert rounded_avg(20, 33) == \"0b11010\"", "prompt_tokens": 583, "completion_tokens": 275, "duration": 5.689112186431885, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 914, "completion_tokens": 384, "duration": 8.07869005203247, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[num - 1] for num in reversed_arr]", "prompt_tokens": 863, "completion_tokens": 212, "duration": 5.237857103347778, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 929, "completion_tokens": 581, "duration": 12.910522222518921, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 726, "completion_tokens": 230, "duration": 5.120441675186157, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_of_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 533, "completion_tokens": 159, "duration": 3.98238205909729, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    return sorted(arr) == arr or sorted(arr) == arr[::-1]", "prompt_tokens": 1576, "completion_tokens": 438, "duration": 8.695729494094849, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 272, "duration": 5.5643532276153564, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    for char in test.split():\n        result[char] = result.get(char, 0) + 1\n\n    max_count = max(result.values())\n    return {key: val for key, val in result.items() if val == max_count}", "prompt_tokens": 590, "completion_tokens": 168, "duration": 4.17883825302124, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 702, "completion_tokens": 232, "duration": 5.081303119659424, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(digit) % 2 != 0 for digit in string), i, i, i) for i, string in enumerate(lst)]", "prompt_tokens": 717, "completion_tokens": 249, "duration": 5.018488645553589, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum = min(num, curr_sum + num)\n        min_sum = min(min_sum, curr_sum)\n    return min_sum", "prompt_tokens": 560, "completion_tokens": 259, "duration": 5.344566106796265, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\n# Test for an empty grid where no buckets are needed\nassert max_fill([[0,0,0], [0,0,0]], 5) == 0\n\n# Test for a grid with all wells having water and bucket capacity of 1\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\n\n# Test for a grid with varying well water levels and bucket capacity of 2\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5", "prompt_tokens": 986, "completion_tokens": 347, "duration": 8.65892505645752, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 674, "completion_tokens": 179, "duration": 3.9378762245178223, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 725, "completion_tokens": 247, "duration": 9.975137948989868, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 1099, "completion_tokens": 452, "duration": 11.201423645019531, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        open_count += s.count('(')\n        close_count += s.count(')')\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 689, "completion_tokens": 236, "duration": 5.180467844009399, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 799, "completion_tokens": 200, "duration": 5.663961172103882, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 514, "completion_tokens": 176, "duration": 7.050609350204468, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "prompt_tokens": 738, "completion_tokens": 328, "duration": 6.262433290481567, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 801, "completion_tokens": 222, "duration": 7.053607225418091, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 947, "completion_tokens": 432, "duration": 12.127907991409302, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 537, "completion_tokens": 134, "duration": 3.329869270324707, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n\n    prev = lst[0]\n    seen_duplicates = False\n\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        if num == prev:\n            if seen_duplicates:\n                return False\n            seen_duplicates = True\n        else:\n            seen_duplicates = False\n        prev = num\n\n    return True", "prompt_tokens": 983, "completion_tokens": 394, "duration": 8.008009433746338, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 870, "completion_tokens": 296, "duration": 9.293299674987793, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n        elif num < 0:\n            total -= num\n            sign_product *= -1\n    \n    return total * sign_product", "prompt_tokens": 504, "completion_tokens": 152, "duration": 7.223475694656372, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                result = dfs(x, y, visited.copy(), path + [grid[x][y]])\n                if result:\n                    return result\n        return None\n    \n    for i in range(n):\n        for j in range(n):\n            result = dfs(i, j, set(), [grid[i][j]])\n            if result:\n                return result", "prompt_tokens": 1205, "completion_tokens": 421, "duration": 9.074467897415161, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    \n    tribonacci = [3, 1, 2]\n    if n == 2:\n        return tribonacci\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n    \n    return tribonacci", "prompt_tokens": 803, "completion_tokens": 281, "duration": 9.121929168701172, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_product *= int(digit)\n    return odd_product", "prompt_tokens": 417, "completion_tokens": 141, "duration": 6.769893646240234, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets > 0", "prompt_tokens": 986, "completion_tokens": 380, "duration": 8.501183986663818, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + 1) ** 2 for x in lst])", "prompt_tokens": 769, "completion_tokens": 300, "duration": 7.780097007751465, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-1] != ' '", "prompt_tokens": 1032, "completion_tokens": 376, "duration": 12.258198022842407, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 582, "completion_tokens": 245, "duration": 5.739772319793701, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = max(neg_ints) if neg_ints else None\n    smallest_pos = min(pos_ints) if pos_ints else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 627, "completion_tokens": 254, "duration": 5.856426954269409, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 701, "completion_tokens": 293, "duration": 8.187717914581299, "result": "failed: 'int' object has no attribute 'replace'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test when n is 4, which cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(4) == False\n\n# Test when n is 6, which cannot be written as the sum of exactly 4 positive even numbers\nassert is_equal_to_sum_even(6) == False\n\n# Test when n is 8, which can be written as the sum of exactly 4 positive even numbers (2 + 2 + 2 + 2)\nassert is_equal_to_sum_even(8) == True\n\n# Test when n is 20, which can be written as the sum of exactly 4 positive even numbers (2 + 4 + 6 + 8)\nassert is_equal_to_sum_even(20) == True", "prompt_tokens": 506, "completion_tokens": 355, "duration": 6.273674011230469, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= special_factorial(i-1)\n        return result", "prompt_tokens": 884, "completion_tokens": 380, "duration": 9.512361288070679, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return re.sub(r'\\s{3,}', '-', re.sub(r'\\s{2}', '_', text))", "prompt_tokens": 494, "completion_tokens": 131, "duration": 6.283682584762573, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name_parts = file_name.split('.')\n    if len(name_parts) != 2:\n        return 'No'\n    prefix = name_parts[0]\n    extension = name_parts[1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in prefix if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 807, "completion_tokens": 316, "duration": 8.29306173324585, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 760, "completion_tokens": 314, "duration": 11.0127272605896, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 711, "completion_tokens": 328, "duration": 8.253051519393921, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 577, "completion_tokens": 143, "duration": 7.522653579711914, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 668, "completion_tokens": 286, "duration": 8.883130311965942, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 663, "completion_tokens": 306, "duration": 9.258017539978027, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            b = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                c = k * k - k + 1\n                if (a + b + c) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 902, "completion_tokens": 509, "duration": 10.192785739898682, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(planets[start_idx+1:end_idx])\n    else:\n        return tuple(planets[end_idx+1:start_idx][::-1])", "prompt_tokens": 1362, "completion_tokens": 581, "duration": 15.537592887878418, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in set(lst) if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 720, "completion_tokens": 204, "duration": 5.771145820617676, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 521, "completion_tokens": 249, "duration": 6.413048505783081, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test when input list has positive odd numbers only\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test when input list has positive and negative numbers, but only odd positive numbers are considered\nassert double_the_difference([-1, 2, 3, -4, 5]) == 34\n\n# Test when input list has negative odd numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test when input list has zero and positive odd numbers\nassert double_the_difference([0, 1, 0, 3, 0, 5]) == 35\n\n# Test when input list has zero and negative odd numbers\nassert double_the_difference([-1, 0, -3, 0, -5]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 798, "completion_tokens": 562, "duration": 11.930447340011597, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 923, "completion_tokens": 320, "duration": 9.440924406051636, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 920, "completion_tokens": 281, "duration": 9.8403000831604, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 638, "completion_tokens": 241, "duration": 5.017082929611206, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 409, "completion_tokens": 168, "duration": 4.820312023162842, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"Number out of range\"\n\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 535, "completion_tokens": 321, "duration": 10.17595362663269, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2", "prompt_tokens": 569, "completion_tokens": 221, "duration": 4.404659748077393, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(sorted(words), key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1031, "completion_tokens": 434, "duration": 9.371139287948608, "result": "failed: t1", "passed": false}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining if remaining < need else number + need\n    remaining_after_meals = max(0, remaining - need)\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 873, "completion_tokens": 192, "duration": 7.991346597671509, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 739, "completion_tokens": 258, "duration": 8.647772312164307, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result[::-1]\n    return result", "prompt_tokens": 489, "completion_tokens": 162, "duration": 6.828124523162842, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 441, "completion_tokens": 137, "duration": 3.9854934215545654, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 493, "completion_tokens": 136, "duration": 7.172123432159424, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 672, "completion_tokens": 307, "duration": 6.931901931762695, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n\n        current_group += char\n\n        if depth == 0:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result", "prompt_tokens": 606, "completion_tokens": 288, "duration": 6.558401823043823, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 426, "completion_tokens": 94, "duration": 3.1272811889648438, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 658, "completion_tokens": 291, "duration": 5.804780960083008, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 807, "completion_tokens": 433, "duration": 9.052483081817627, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 543, "completion_tokens": 230, "duration": 4.846125364303589, "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n\n    return depths", "prompt_tokens": 592, "completion_tokens": 279, "duration": 5.221442222595215, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 576, "completion_tokens": 246, "duration": 5.778112173080444, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return total_sum, product", "prompt_tokens": 630, "completion_tokens": 297, "duration": 7.2900190353393555, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 620, "completion_tokens": 298, "duration": 7.080389499664307, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 727, "completion_tokens": 346, "duration": 7.068181753158569, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 456, "completion_tokens": 174, "duration": 5.290061712265015, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 512, "completion_tokens": 174, "duration": 4.188504934310913, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 435, "completion_tokens": 143, "duration": 4.585745334625244, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 438, "completion_tokens": 184, "duration": 3.8840556144714355, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 627, "completion_tokens": 158, "duration": 4.106414794921875, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 435, "completion_tokens": 133, "duration": 3.4803128242492676, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 1365, "completion_tokens": 646, "duration": 12.085890769958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 503, "completion_tokens": 211, "duration": 4.163988351821899, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_mapping = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n    \n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_mapping[x])\n    \n    return ' '.join(numbers_list)", "prompt_tokens": 561, "completion_tokens": 290, "duration": 6.835309982299805, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n\n    return result", "prompt_tokens": 761, "completion_tokens": 351, "duration": 7.195677757263184, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 703, "completion_tokens": 331, "duration": 8.167749881744385, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 589, "completion_tokens": 262, "duration": 6.058431148529053, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 320, "completion_tokens": 66, "duration": 2.209930896759033, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    max_divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor", "prompt_tokens": 431, "completion_tokens": 192, "duration": 4.336974143981934, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import defaultdict\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n# Test when input number is a prime number\nassert factorize(7) == [7]\n\n# Test when input number is a perfect square of a prime number\nassert factorize(49) == [7, 7]\n\n# Test when input number is a product of multiple prime factors\nassert factorize(60) == [2, 2, 3, 5]\n\n# Test when input number is a large prime number\nassert factorize(9973) == [9973]\n\n# Test when input number is 1, the result should be an empty list\nassert factorize(1) == []", "prompt_tokens": 565, "completion_tokens": 345, "duration": 6.987559080123901, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            result.append(num)\n    return result", "prompt_tokens": 566, "completion_tokens": 266, "duration": 5.62853479385376, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 393, "completion_tokens": 134, "duration": 3.3015196323394775, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 419, "completion_tokens": 148, "duration": 3.7290799617767334, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 534, "completion_tokens": 216, "duration": 5.112905025482178, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 619, "completion_tokens": 235, "duration": 4.744745492935181, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 476, "completion_tokens": 151, "duration": 4.326472043991089, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    x0 = None\n    for i in range(len(xs)):\n        if xs[i] != 0:\n            x0 = i\n            break\n    if x0 is None:\n        raise ValueError(\"No non-zero coefficients provided\")\n\n    return -xs[0] / xs[x0]", "prompt_tokens": 2870, "completion_tokens": 1272, "duration": 24.46463418006897, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(0, len(l), 3)]", "prompt_tokens": 758, "completion_tokens": 321, "duration": 5.936971187591553, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 562, "completion_tokens": 250, "duration": 4.6610352993011475, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 492, "completion_tokens": 161, "duration": 3.4196653366088867, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 494, "completion_tokens": 216, "duration": 4.339092969894409, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [val if i % 2 != 0 else sorted(l[::2])[i // 2] for i, val in enumerate(l)]", "prompt_tokens": 604, "completion_tokens": 218, "duration": 5.116509437561035, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 256, "duration": 6.745152235031128, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n\n    i = 2\n    count = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i-1)", "prompt_tokens": 477, "completion_tokens": 265, "duration": 7.048097133636475, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 655, "completion_tokens": 221, "duration": 8.411068439483643, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 707, "completion_tokens": 239, "duration": 8.12187385559082, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 621, "completion_tokens": 245, "duration": 10.002193450927734, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 662, "completion_tokens": 205, "duration": 4.404578447341919, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 449, "completion_tokens": 129, "duration": 4.702301025390625, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 367, "completion_tokens": 114, "duration": 4.322601318359375, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 691, "completion_tokens": 285, "duration": 8.730298042297363, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    n = len(l)\n    s = sorted(l)\n    if n % 2 != 0:\n        return s[n // 2]\n    else:\n        return (s[n // 2 - 1] + s[n // 2]) / 2", "prompt_tokens": 589, "completion_tokens": 323, "duration": 9.904791116714478, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.618424415588379, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 6.970310688018799, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 527, "completion_tokens": 246, "duration": 6.386101484298706, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test an empty string\nassert remove_vowels('') == ''\n\n# Test a string with vowels and consonants\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test a string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test a string with uppercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test a string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 543, "completion_tokens": 254, "duration": 7.296499490737915, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 492, "completion_tokens": 177, "duration": 5.635441064834595, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 2.095540761947632, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 640, "completion_tokens": 201, "duration": 9.670058012008667, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 377, "completion_tokens": 129, "duration": 3.3493599891662598, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 571, "completion_tokens": 266, "duration": 8.577296733856201, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 505, "completion_tokens": 213, "duration": 5.612889289855957, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 573, "completion_tokens": 192, "duration": 7.775405645370483, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n# Test for a large number with multiple prime factors\nassert largest_prime_factor(13195) == 29\n\n# Test for a power of 2\nassert largest_prime_factor(2048) == 2\n\n# Test for a number with a prime factor greater than 10\nassert largest_prime_factor(120) == 5\n\n# Test for a number with multiple prime factors\nassert largest_prime_factor(315) == 7\n\n# Test for a prime number as input (not meeting the requirement)\nassert largest_prime_factor(17) is None", "prompt_tokens": 429, "completion_tokens": 332, "duration": 9.847440719604492, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 472, "completion_tokens": 126, "duration": 6.653401136398315, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 551, "completion_tokens": 255, "duration": 6.772011995315552, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test when input list is [3, 1, 2, 4, 5]\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n\n# Test when input list is [1, 2, 3]\nassert derivative([1, 2, 3]) == [2, 6]", "prompt_tokens": 557, "completion_tokens": 269, "duration": 6.972275257110596, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 575, "completion_tokens": 159, "duration": 5.00439977645874, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    s = s.lower()\n    return sum(1 for char in s if char in vowels or (char == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 594, "completion_tokens": 212, "duration": 4.359500885009766, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 502, "completion_tokens": 209, "duration": 7.361764192581177, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 528, "completion_tokens": 145, "duration": 7.5540854930877686, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)\n\n# Test when there are both apples and oranges in the basket\nassert fruit_distribution(\"5 apples and 6 oranges\", 19) == 8\n\n# Test when there are no apples in the basket\nassert fruit_distribution(\"0 apples and 1 oranges\", 3) == 2\n\n# Test when there are both apples and oranges in the basket, and the total fruits is a large number\nassert fruit_distribution(\"2 apples and 3 oranges\", 100) == 95\n\n# Test when there are many apples and only one orange in the basket\nassert fruit_distribution(\"100 apples and 1 oranges\", 120) == 19", "prompt_tokens": 740, "completion_tokens": 305, "duration": 7.804643630981445, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    \n    return [min_even, min_even_index]", "prompt_tokens": 965, "completion_tokens": 226, "duration": 8.123748064041138, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 759, "completion_tokens": 298, "duration": 6.317389488220215, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "prompt_tokens": 589, "completion_tokens": 209, "duration": 4.7949981689453125, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 600, "completion_tokens": 265, "duration": 7.070219278335571, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 822, "completion_tokens": 205, "duration": 5.1107447147369385, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 644, "completion_tokens": 201, "duration": 4.201845407485962, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 764, "completion_tokens": 283, "duration": 5.844319581985474, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n    return prime_count == 3", "prompt_tokens": 484, "completion_tokens": 252, "duration": 6.485969305038452, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.6480753421783447, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 548, "completion_tokens": 173, "duration": 7.663588285446167, "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 961, "completion_tokens": 238, "duration": 8.233087301254272, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 580, "completion_tokens": 143, "duration": 4.004801988601685, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 570, "completion_tokens": 220, "duration": 8.214494705200195, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1071, "completion_tokens": 593, "duration": 13.23393702507019, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 443, "completion_tokens": 168, "duration": 3.4942266941070557, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 787, "completion_tokens": 420, "duration": 12.635547161102295, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N).count('1')", "prompt_tokens": 571, "completion_tokens": 140, "duration": 5.751770257949829, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 549, "completion_tokens": 295, "duration": 9.01274061203003, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 602, "completion_tokens": 212, "duration": 4.144306898117065, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    result.append((i, j))\n    return result", "prompt_tokens": 938, "completion_tokens": 294, "duration": 7.012128829956055, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    if arr and (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1607, "completion_tokens": 770, "duration": 16.375665187835693, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            result += chr(start + ((ord(char) - start) * 2) % 26)\n        else:\n            result += char\n    return result", "prompt_tokens": 540, "completion_tokens": 212, "duration": 4.241376161575317, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_list = sorted(set(lst))\n    if len(sorted_list) < 2:\n        return None\n    return sorted_list[1]", "prompt_tokens": 611, "completion_tokens": 218, "duration": 5.3335840702056885, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return len([sentence for sentence in S.split(\".\") + S.split(\"?\") + S.split(\"!\") if sentence.strip().startswith(\"I\")])", "prompt_tokens": 1001, "completion_tokens": 444, "duration": 12.201470851898193, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 601, "completion_tokens": 206, "duration": 4.652602195739746, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 582, "completion_tokens": 265, "duration": 6.40944504737854, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1212, "completion_tokens": 581, "duration": 9.824991941452026, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_keys or upper_keys", "prompt_tokens": 720, "completion_tokens": 263, "duration": 6.486039400100708, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 760, "completion_tokens": 372, "duration": 7.673322916030884, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 499, "completion_tokens": 150, "duration": 3.883063554763794, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 479, "completion_tokens": 192, "duration": 4.7472310066223145, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) > 0 else int(float(value) - 0.5)", "prompt_tokens": 647, "completion_tokens": 191, "duration": 4.4232001304626465, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * (i + 1))\n    return stones", "prompt_tokens": 551, "completion_tokens": 170, "duration": 4.191072702407837, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 541, "completion_tokens": 145, "duration": 3.5107626914978027, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            largest_even = max(largest_even, i)\n    return largest_even", "prompt_tokens": 526, "completion_tokens": 211, "duration": 7.788210153579712, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 585, "completion_tokens": 162, "duration": 3.953274726867676, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 708, "completion_tokens": 145, "duration": 4.429518222808838, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def num_to_string(num):\n        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num - 1]\n    \n    sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = sorted_arr[::-1]\n    \n    return [num_to_string(num) for num in reversed_arr]", "prompt_tokens": 997, "completion_tokens": 356, "duration": 8.084418535232544, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 781, "completion_tokens": 433, "duration": 10.214377641677856, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(is_even):\n        count = 0\n        for i in range(1, n+1):\n            if is_palindrome(i) and i % 2 == 0 if is_even else i % 2 != 0:\n                count += 1\n        return count\n\n    even_count = count_palindromes(True)\n    odd_count = count_palindromes(False)\n\n    return (even_count, odd_count)", "prompt_tokens": 836, "completion_tokens": 355, "duration": 7.937976360321045, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 610, "completion_tokens": 227, "duration": 9.4020516872406, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    return sorted(arr) == arr or any(sorted(arr[-1:] + arr[:-1]) == arr)\n\n# Test empty array\nassert move_one_ball([]) == True\n\n# Test array already sorted\nassert move_one_ball([1, 2, 3, 4, 5]) == True\n\n# Test array requiring one right shift operation\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n\n# Test array not sortable by right shift operations\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n\n# Test larger array requiring multiple right shift operations\nassert move_one_ball([5, 6, 4, 1, 2, 3]) == True", "prompt_tokens": 3357, "completion_tokens": 1164, "duration": 26.876993656158447, "result": "failed: 'bool' object is not iterable", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd1 = sum(1 for x in lst1 if x % 2 != 0)\n    count_odd2 = sum(1 for x in lst2 if x % 2 != 0)\n    \n    return \"YES\" if count_odd1 <= count_odd2 else \"NO\"", "prompt_tokens": 861, "completion_tokens": 359, "duration": 7.3467113971710205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    max_count = max(hist.values())\n    result = {key: value for key, value in hist.items() if value == max_count}\n    return result", "prompt_tokens": 638, "completion_tokens": 222, "duration": 4.696791410446167, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([ch for ch in s if ch not in c])\n    return s, s == s[::-1]", "prompt_tokens": 688, "completion_tokens": 218, "duration": 4.998277425765991, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 788, "completion_tokens": 316, "duration": 7.495121479034424, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 544, "completion_tokens": 253, "duration": 5.240050315856934, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    for row in grid:\n        for well in row:\n            count += math.ceil(well / capacity)\n    return count", "prompt_tokens": 991, "completion_tokens": 209, "duration": 5.0353474617004395, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 656, "completion_tokens": 161, "duration": 3.7837321758270264, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 731, "completion_tokens": 269, "duration": 7.525903701782227, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    word = word.lower()\n    for i in range(len(word) - 3, 0, -1):\n        if word[i] in vowels and all(c not in vowels for c in word[i-1:i+2]):\n            return word[i]\n    return \"\"", "prompt_tokens": 640, "completion_tokens": 231, "duration": 5.175599098205566, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        open_count += s.count('(')\n        close_count += s.count(')')\n    return 'Yes' if open_count == close_count else 'No'", "prompt_tokens": 689, "completion_tokens": 222, "duration": 5.121920824050903, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 838, "completion_tokens": 239, "duration": 5.223882436752319, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 518, "completion_tokens": 180, "duration": 4.005167484283447, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 655, "completion_tokens": 249, "duration": 5.513537168502808, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 == 1:\n            result.append(n)\n    return sorted(set(result))", "prompt_tokens": 768, "completion_tokens": 198, "duration": 7.9018402099609375, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    if not(1 <= month <= 12):\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False", "prompt_tokens": 931, "completion_tokens": 404, "duration": 8.386680364608765, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 572, "completion_tokens": 169, "duration": 4.033672332763672, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = {}\n    for num in lst:\n        if num in seen:\n            return False\n        seen[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 1652, "completion_tokens": 674, "duration": 12.823232173919678, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n\n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 920, "completion_tokens": 344, "duration": 7.526017189025879, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    sign_product = 1\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum(abs(num) for num in arr) * sign_product", "prompt_tokens": 618, "completion_tokens": 277, "duration": 5.677131175994873, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]])\n                if new_path:\n                    return new_path\n        return None\n    \n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1198, "completion_tokens": 394, "duration": 8.239379644393921, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        res = [3, 1]\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res", "prompt_tokens": 815, "completion_tokens": 270, "duration": 5.897044658660889, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 509, "completion_tokens": 230, "duration": 5.561279535293579, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == \"[\":\n            open_brackets += 1\n        elif char == \"]\":\n            if open_brackets > 0:\n                open_brackets -= 1\n    return open_brackets < 0", "prompt_tokens": 574, "completion_tokens": 194, "duration": 4.12705135345459, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 872, "completion_tokens": 400, "duration": 8.523926734924316, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and txt[-1] != ' ' if txt else False", "prompt_tokens": 590, "completion_tokens": 164, "duration": 7.23014760017395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 642, "completion_tokens": 305, "duration": 9.323547601699829, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n    \n    max_neg = None if len(neg_integers) == 0 else max(neg_integers)\n    min_pos = None if len(pos_integers) == 0 else min(pos_integers)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 686, "completion_tokens": 322, "duration": 9.256490468978882, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > b else b\n    elif isinstance(a, str) and isinstance(b, str):\n        a_float = float(a.replace(\",\", \".\"))\n        b_float = float(b.replace(\",\", \".\"))\n        return a if a_float > b_float else b\n    elif isinstance(a, int) and isinstance(b, str):\n        return b\n    elif isinstance(a, str) and isinstance(b, int):\n        return a\n    else:\n        return None", "prompt_tokens": 658, "completion_tokens": 336, "duration": 8.609447002410889, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    return 0 < n <= 8", "prompt_tokens": 933, "completion_tokens": 460, "duration": 11.775826215744019, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 844, "completion_tokens": 318, "duration": 7.477828025817871, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 576, "completion_tokens": 222, "duration": 8.322055578231812, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    if len(file_parts) != 2:\n        return 'No'\n    \n    file_name_before_dot = file_parts[0]\n    file_name_after_dot = file_parts[1]\n    \n    if not file_name_before_dot or not file_name_before_dot[0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if file_name_after_dot not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 747, "completion_tokens": 299, "duration": 6.479371786117554, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 778, "completion_tokens": 323, "duration": 7.0377960205078125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 589, "completion_tokens": 205, "duration": 7.946116924285889, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 582, "completion_tokens": 151, "duration": 7.326676607131958, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 574, "completion_tokens": 192, "duration": 8.002689599990845, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 654, "completion_tokens": 314, "duration": 9.260919094085693, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 774, "completion_tokens": 361, "duration": 10.015648365020752, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])", "prompt_tokens": 903, "completion_tokens": 430, "duration": 9.694439172744751, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 751, "completion_tokens": 223, "duration": 5.082446336746216, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 490, "completion_tokens": 219, "duration": 5.203968286514282, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 1586, "completion_tokens": 704, "duration": 16.09021782875061, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 893, "completion_tokens": 279, "duration": 6.969007730484009, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    if not extensions:\n        return f\"{class_name}.\"\n    \n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1579, "completion_tokens": 548, "duration": 13.352871894836426, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    for i in range(n):\n        if a[i:] + a[:i] == b:\n            return True\n    return False", "prompt_tokens": 649, "completion_tokens": 268, "duration": 7.666613817214966, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)", "prompt_tokens": 441, "completion_tokens": 198, "duration": 5.147371768951416, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return None\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 510, "completion_tokens": 306, "duration": 7.245243072509766, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "prompt_tokens": 571, "completion_tokens": 225, "duration": 5.222777605056763, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n            \n    return max_word", "prompt_tokens": 516, "completion_tokens": 171, "duration": 7.671643495559692, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 987, "completion_tokens": 298, "duration": 9.077192306518555, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 776, "completion_tokens": 295, "duration": 10.433125972747803, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result", "prompt_tokens": 523, "completion_tokens": 203, "duration": 6.1332550048828125, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 439, "completion_tokens": 138, "duration": 6.354798078536987, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if any(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 502, "completion_tokens": 153, "duration": 6.94359564781189, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 642, "completion_tokens": 277, "duration": 5.92228102684021, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_paren = 0\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \"(\":\n            open_paren += 1\n        elif char == \")\":\n            open_paren -= 1\n            if open_paren == 0:\n                result.append(current_group)\n                current_group = \"\"\n        if open_paren > 0:\n            current_group += char\n\n    return result", "prompt_tokens": 589, "completion_tokens": 288, "duration": 6.490835189819336, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 569, "completion_tokens": 237, "duration": 4.849981784820557, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 558, "completion_tokens": 186, "duration": 5.075868844985962, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(num - mean_val) for num in numbers) / len(numbers)", "prompt_tokens": 1094, "completion_tokens": 515, "duration": 11.113589763641357, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 542, "completion_tokens": 233, "duration": 5.219900131225586, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    current_level = 0\n    max_level = 0\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            levels.append(max_level)\n            current_level = 0\n            max_level = 0\n    levels.append(max_level)\n    return levels", "prompt_tokens": 541, "completion_tokens": 250, "duration": 5.9434332847595215, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 601, "completion_tokens": 271, "duration": 6.297642230987549, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    result_sum = sum(numbers)\n    result_product = 1\n    for num in numbers:\n        result_product *= num\n    return result_sum, result_product", "prompt_tokens": 587, "completion_tokens": 257, "duration": 5.256366491317749, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n\n    return result", "prompt_tokens": 596, "completion_tokens": 276, "duration": 6.540369033813477, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    \n# Test cases were removed as they are not part of the implementation.", "prompt_tokens": 563, "completion_tokens": 209, "duration": 5.004044532775879, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 494, "completion_tokens": 222, "duration": 4.449896812438965, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 547, "completion_tokens": 200, "duration": 5.206583738327026, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 427, "completion_tokens": 140, "duration": 3.690164804458618, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 403, "completion_tokens": 144, "duration": 3.5668368339538574, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 662, "completion_tokens": 198, "duration": 4.5798499584198, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 436, "completion_tokens": 134, "duration": 3.7575676441192627, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    result = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            return None\n    return result", "prompt_tokens": 746, "completion_tokens": 305, "duration": 6.85473895072937, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 494, "completion_tokens": 198, "duration": 4.351571083068848, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 543, "completion_tokens": 246, "duration": 6.097506523132324, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result", "prompt_tokens": 799, "completion_tokens": 387, "duration": 7.925241708755493, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 661, "completion_tokens": 290, "duration": 5.173966646194458, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 513, "completion_tokens": 186, "duration": 4.605654716491699, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 340, "completion_tokens": 90, "duration": 3.3195557594299316, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors, default=1)", "prompt_tokens": 666, "completion_tokens": 269, "duration": 9.959139108657837, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Test when input is a prime number\nassert factorize(7) == [7]\n\n# Test when input is a perfect square of a prime number\nassert factorize(49) == [7, 7]\n\n# Test when input is a prime number multiplied by another prime number\nassert factorize(15) == [3, 5]\n\n# Test when input is a large number with multiple prime factors\nassert factorize(360) == [2, 2, 2, 3, 3, 5]", "prompt_tokens": 548, "completion_tokens": 303, "duration": 6.753801584243774, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 602, "completion_tokens": 285, "duration": 6.102821111679077, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 414, "completion_tokens": 155, "duration": 3.6806373596191406, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 373, "completion_tokens": 102, "duration": 2.7634990215301514, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 507, "completion_tokens": 175, "duration": 3.723445177078247, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 701, "completion_tokens": 317, "duration": 5.924375057220459, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 514, "completion_tokens": 190, "duration": 5.713361501693726, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return next(x for x in range(-1000, 1000) if poly(xs, x) == 0)", "prompt_tokens": 989, "completion_tokens": 357, "duration": 36.54471397399902, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    div_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    for i in div_by_three_indices:\n        result[i] = sorted(l[i:i+3])\n    return result", "prompt_tokens": 746, "completion_tokens": 329, "duration": 6.053572416305542, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 614, "completion_tokens": 303, "duration": 7.2510740756988525, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 513, "completion_tokens": 182, "duration": 5.210036754608154, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 477, "completion_tokens": 199, "duration": 4.661695718765259, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[1::2] = sorted(result[1::2])\n    return result", "prompt_tokens": 662, "completion_tokens": 269, "duration": 5.460227727890015, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 696, "completion_tokens": 279, "duration": 5.882160425186157, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num+1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i-1)", "prompt_tokens": 522, "completion_tokens": 326, "duration": 7.61615252494812, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 660, "completion_tokens": 193, "duration": 4.953424453735352, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 650, "completion_tokens": 175, "duration": 7.384300708770752, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 580, "completion_tokens": 204, "duration": 7.641757249832153, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 649, "completion_tokens": 192, "duration": 4.226763010025024, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    new_num = ''\n    while x > 0:\n        remainder = x % base\n        new_num = str(remainder) + new_num\n        x = x // base\n    return new_num", "prompt_tokens": 558, "completion_tokens": 263, "duration": 8.695538520812988, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 367, "completion_tokens": 114, "duration": 6.959429502487183, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 619, "completion_tokens": 198, "duration": 4.504949569702148, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 585, "completion_tokens": 318, "duration": 5.40861177444458, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 91, "duration": 4.212277412414551, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 161, "duration": 5.946277379989624, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])", "prompt_tokens": 1976, "completion_tokens": 963, "duration": 19.53778576850891, "result": "failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 4)", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n# Test with an empty string\nassert remove_vowels('') == ''\n\n# Test with a string containing only consonants and newline character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test with a string containing only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test with a string containing uppercase and lowercase vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test with a string containing only consonants\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 553, "completion_tokens": 275, "duration": 6.7670578956604, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 481, "completion_tokens": 166, "duration": 3.876063108444214, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 6.0026044845581055, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 635, "completion_tokens": 200, "duration": 8.106972455978394, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 346, "completion_tokens": 97, "duration": 2.1879255771636963, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 455, "completion_tokens": 150, "duration": 4.8340229988098145, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 759, "completion_tokens": 267, "duration": 7.677226305007935, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 623, "completion_tokens": 241, "duration": 7.935500621795654, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 366, "completion_tokens": 100, "duration": 2.4274978637695312, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 548, "completion_tokens": 198, "duration": 3.758331775665283, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 564, "completion_tokens": 262, "duration": 5.976998805999756, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\nassert derivative([1, 2, 3]) == [2, 6]\nassert derivative([5, 0, 0, 0, 0, 0]) == [0, 0, 0, 0]\nassert derivative([4, 3, 2, 1]) == [3, 4, 2]\nassert derivative([0, 0, 0, 0, 10]) == [0, 0, 0, 40]", "prompt_tokens": 2772, "completion_tokens": 1701, "duration": 35.765100955963135, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 618, "completion_tokens": 210, "duration": 7.804468631744385, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s)-1))\n    return count", "prompt_tokens": 562, "completion_tokens": 192, "duration": 3.930372714996338, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]", "prompt_tokens": 584, "completion_tokens": 286, "duration": 7.87204384803772, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 534, "completion_tokens": 151, "duration": 3.375396251678467, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 759, "completion_tokens": 199, "duration": 4.71301531791687, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_even_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even or (num == smallest_even and i < smallest_even_index)):\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_even_index]\n    return []\n\n# Test empty array\nassert pluck([]) == []\n\n# Test array with no even values\nassert pluck([1, 3, 5]) == []\n\n# Test array with one even value\nassert pluck([8]) == [8, 0]\n\n# Test array with multiple even values, different indices\nassert pluck([4, 2, 3]) == [2, 1]\n\n# Test array with multiple even values, same indices\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n# Test array with negative values\nassert pluck([-6, -8, -3, -2]) == [-8, 1]\n\n# Test array with mixed positive and negative values\nassert pluck([7, -4, 6, -3, 9, 0, 2]) == [-4, 1]", "prompt_tokens": 1004, "completion_tokens": 492, "duration": 9.344815015792847, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    max_num = -1\n    max_freq = 0\n    for num in unique_nums:\n        freq = lst.count(num)\n        if num > freq and freq >= max_freq:\n            max_num = num\n            max_freq = freq\n    return max_num", "prompt_tokens": 639, "completion_tokens": 198, "duration": 4.125949144363403, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 613, "completion_tokens": 234, "duration": 4.570678234100342, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 611, "completion_tokens": 276, "duration": 4.674030303955078, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 796, "completion_tokens": 179, "duration": 3.8131914138793945, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 698, "completion_tokens": 255, "duration": 8.67370343208313, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 761, "completion_tokens": 258, "duration": 4.647012710571289, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 454, "completion_tokens": 260, "duration": 8.878831148147583, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(x ** (1/n)))", "prompt_tokens": 1204, "completion_tokens": 528, "duration": 11.084394454956055, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and (-a ** (1/3)).is_integer())", "prompt_tokens": 565, "completion_tokens": 208, "duration": 4.739942789077759, "result": "failed: 'complex' object has no attribute 'is_integer'", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 1051, "completion_tokens": 319, "duration": 6.419587135314941, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 578, "completion_tokens": 144, "duration": 3.276942491531372, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 595, "completion_tokens": 245, "duration": 8.248658418655396, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    grade_map = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-'\n    }\n\n    return [grade_map[grade] for grade in grades]", "prompt_tokens": 1052, "completion_tokens": 474, "duration": 11.382550716400146, "result": "failed: 3.5", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test cases\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 442, "completion_tokens": 210, "duration": 4.586390733718872, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10**(n-1)", "prompt_tokens": 495, "completion_tokens": 245, "duration": 5.581615209579468, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N).count('1')", "prompt_tokens": 651, "completion_tokens": 220, "duration": 5.541738748550415, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 503, "completion_tokens": 249, "duration": 8.328269958496094, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 554, "completion_tokens": 150, "duration": 3.9655086994171143, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda tup: (tup[0], -tup[1]))\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with list containing empty sublists\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with list containing x in multiple rows and different columns\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with x not in the list\nassert get_row([\n  [1,2,3],\n  [4,5,6]\n], 9) == []", "prompt_tokens": 886, "completion_tokens": 437, "duration": 7.7911458015441895, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    return sorted(arr) if (arr[0] + arr[-1]) % 2 == 1 else sorted(arr, reverse=True)", "prompt_tokens": 861, "completion_tokens": 316, "duration": 6.353728532791138, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) if c.islower() else c for c in s)", "prompt_tokens": 508, "completion_tokens": 152, "duration": 3.683724880218506, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 635, "completion_tokens": 242, "duration": 5.9410178661346436, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('. I') + S.count('? I') + S.count('! I')", "prompt_tokens": 923, "completion_tokens": 356, "duration": 8.16899585723877, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 593, "completion_tokens": 178, "duration": 4.084816217422485, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 529, "completion_tokens": 209, "duration": 4.6420981884002686, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            num_sum = sum_of_digits(num)\n            if num_sum > max_prime_sum:\n                max_prime_sum = num_sum\n\n    return max_prime_sum", "prompt_tokens": 1067, "completion_tokens": 441, "duration": 8.683593034744263, "result": "failed: This prints if this assert fails 9 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    keys = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False", "prompt_tokens": 663, "completion_tokens": 202, "duration": 4.858548164367676, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 5.010241270065308, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)", "prompt_tokens": 521, "completion_tokens": 166, "duration": 4.2511584758758545, "result": "failed: First test error: 6", "passed": false}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 469, "completion_tokens": 180, "duration": 4.11570143699646, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num < 0:\n        return int(num - 0.5)\n    else:\n        return int(num + 0.5)", "prompt_tokens": 741, "completion_tokens": 291, "duration": 6.009979486465454, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 630, "completion_tokens": 241, "duration": 5.059126853942871, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]\n\n# Test when the string contains words separated by commas\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test when the string contains words separated by spaces\nassert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test when the string contains words separated by both commas and spaces\nassert words_string(\"Apple, banana, cherry pear\") == [\"Apple\", \"banana\", \"cherry\", \"pear\"]\n\n# Test when the string contains only one word\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test when the string is empty\nassert words_string(\"\") == []\n\n# Test when the string contains repeated words\nassert words_string(\"A A B B C C\") == [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"]", "prompt_tokens": 610, "completion_tokens": 408, "duration": 8.778886079788208, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            largest_even = i\n    return largest_even", "prompt_tokens": 537, "completion_tokens": 216, "duration": 4.340190887451172, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) // (m - n + 1)\n    return bin(round(avg))[2:]", "prompt_tokens": 594, "completion_tokens": 181, "duration": 4.014107942581177, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(d) % 2 == 0 for d in str(num))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 1087, "completion_tokens": 556, "duration": 10.684906244277954, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 1050, "completion_tokens": 407, "duration": 8.579397439956665, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 549, "completion_tokens": 201, "duration": 6.056454181671143, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)", "prompt_tokens": 848, "completion_tokens": 348, "duration": 6.506149053573608, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(d) for d in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 120, "duration": 3.411742687225342, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False", "prompt_tokens": 972, "completion_tokens": 258, "duration": 5.475039005279541, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(i % 2 == 1 for i in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 273, "duration": 6.048616170883179, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values())\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 637, "completion_tokens": 216, "duration": 4.724455833435059, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    result = ''.join([char for char in s if char not in c])\n    return result, result == result[::-1]", "prompt_tokens": 717, "completion_tokens": 247, "duration": 6.328488826751709, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result", "prompt_tokens": 819, "completion_tokens": 372, "duration": 9.309360265731812, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 562, "completion_tokens": 271, "duration": 5.689406394958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    def ceil_divide(a, b):\n        return -(-a // b)\n\n    total_water = sum(row.count(1) for row in grid)\n    return ceil_divide(total_water, capacity)", "prompt_tokens": 1912, "completion_tokens": 721, "duration": 12.96241283416748, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 789, "completion_tokens": 294, "duration": 6.768694877624512, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 714, "completion_tokens": 251, "duration": 5.360288858413696, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    word = word[::-1]\n    for char in word[1:]:\n        if char in vowels:\n            return char\n    return \"\"", "prompt_tokens": 603, "completion_tokens": 169, "duration": 4.134366750717163, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append('(')\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    \n    if stack:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 679, "completion_tokens": 228, "duration": 5.820093870162964, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 824, "completion_tokens": 225, "duration": 4.706937313079834, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 539, "completion_tokens": 201, "duration": 5.525104999542236, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) <= 99)", "prompt_tokens": 651, "completion_tokens": 245, "duration": 6.2111475467681885, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)\n\n# Test when n is 1\nassert get_odd_collatz(1) == [1]\n\n# Test when n is 5\nassert get_odd_collatz(5) == [1, 5]\n\n# Test when n is 10\nassert get_odd_collatz(10) == [1, 5]\n\n# Test when n is 20\nassert get_odd_collatz(20) == [1, 5]", "prompt_tokens": 896, "completion_tokens": 407, "duration": 54.31322932243347, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 900, "completion_tokens": 391, "duration": 8.484504222869873, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 691, "completion_tokens": 288, "duration": 8.098714351654053, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 967, "completion_tokens": 336, "duration": 7.24247145652771, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    length = intersection_end - intersection_start + 1\n\n    if length <= 1:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\"", "prompt_tokens": 876, "completion_tokens": 317, "duration": 6.243659496307373, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude_sum = sum(abs(num) for num in arr)\n    for num in arr:\n        sign *= 1 if num > 0 else -1 if num < 0 else 0\n\n    return magnitude_sum * sign", "prompt_tokens": 545, "completion_tokens": 190, "duration": 7.650439500808716, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n        for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                res = dfs(ni, nj, visited.copy(), path + [grid[ni][nj]])  # Change visited to a copy of itself\n                if res:\n                    return res\n                visited.remove((ni, nj))\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = set()\n            visited.add((i, j))\n            res = dfs(i, j, visited, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 3117, "completion_tokens": 1377, "duration": 26.889073371887207, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n\n    tribonacci = [3, 1, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n    \n    return tribonacci", "prompt_tokens": 1409, "completion_tokens": 573, "duration": 13.174519062042236, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 395, "completion_tokens": 116, "duration": 6.430621862411499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    if '[]' in string:\n        return True\n    return False", "prompt_tokens": 572, "completion_tokens": 148, "duration": 3.265942335128784, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum([(int(x) + (x % 1 > 0)) ** 2 for x in lst])\n    return total", "prompt_tokens": 848, "completion_tokens": 390, "duration": 12.71014142036438, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) < 2 or txt.strip()[-2] == ' ')", "prompt_tokens": 964, "completion_tokens": 317, "duration": 6.475586175918579, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 555, "completion_tokens": 217, "duration": 4.827985763549805, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    max_neg = max(neg_ints) if neg_ints else None\n    min_pos = min(pos_ints) if pos_ints else None\n\n    return (max_neg, min_pos)", "prompt_tokens": 678, "completion_tokens": 303, "duration": 7.38792872428894, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    return max(a, b)", "prompt_tokens": 707, "completion_tokens": 325, "duration": 9.514719486236572, "result": "failed: could not convert string to float: '2,3'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 460, "completion_tokens": 142, "duration": 4.983148813247681, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 563, "completion_tokens": 237, "duration": 6.6825010776519775, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('  ', '-')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 495, "completion_tokens": 131, "duration": 6.954465627670288, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or len([c for c in name if c.isdigit()]) > 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 761, "completion_tokens": 237, "duration": 8.654622077941895, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n    return total", "prompt_tokens": 785, "completion_tokens": 327, "duration": 7.322965383529663, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return \" \".join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 607, "completion_tokens": 238, "duration": 8.805569410324097, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 580, "completion_tokens": 150, "duration": 3.4270427227020264, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 588, "completion_tokens": 224, "duration": 7.726609230041504, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def odd_digits(n):\n        return n % 10 % 2 != 0 and int(str(n)[0]) % 2 != 0\n\n    return len([x for x in nums if x > 10 and odd_digits(x)])", "prompt_tokens": 551, "completion_tokens": 190, "duration": 5.586573839187622, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 781, "completion_tokens": 369, "duration": 8.239619731903076, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])", "prompt_tokens": 864, "completion_tokens": 391, "duration": 9.329228639602661, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 1176, "completion_tokens": 384, "duration": 11.241864442825317, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 527, "completion_tokens": 250, "duration": 5.932176351547241, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)\n\n# Test when input list contains positive odd integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test when input list contains only negative integers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test when input list contains positive odd integer and negative integer\nassert double_the_difference([9, -2]) == 81\n\n# Test when input list contains only zero\nassert double_the_difference([0]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 584, "completion_tokens": 282, "duration": 7.858725309371948, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 828, "completion_tokens": 225, "duration": 6.308336973190308, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1547, "completion_tokens": 488, "duration": 13.523413181304932, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n    \n    return any(is_rotation(a, b[i:] + b[:i]) for i in range(len(b)))", "prompt_tokens": 622, "completion_tokens": 244, "duration": 8.072430610656738, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 446, "completion_tokens": 205, "duration": 7.927397012710571, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 512, "completion_tokens": 267, "duration": 8.165772676467896, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 552, "completion_tokens": 180, "duration": 7.010807514190674, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_count = unique_chars(word)\n        if unique_count > max_unique_chars or (unique_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_count\n\n    return max_word", "prompt_tokens": 565, "completion_tokens": 231, "duration": 4.76192045211792, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = min(number + remaining, need)\n    remaining_after_meals = max(0, remaining - (need - number))\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 919, "completion_tokens": 236, "duration": 8.531790494918823, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 834, "completion_tokens": 353, "duration": 10.877430200576782, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 527, "completion_tokens": 194, "duration": 3.9427998065948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 484, "completion_tokens": 180, "duration": 3.790236234664917, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 701, "completion_tokens": 344, "duration": 10.193459749221802, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 612, "completion_tokens": 247, "duration": 5.606420040130615, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    curr_group = \"\"\n    open_braces = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')':\n            open_braces -= 1\n        if open_braces == 0 and curr_group:\n            result.append(curr_group)\n            curr_group = \"\"\n        elif open_braces > 0:\n            curr_group += char\n\n    return result", "prompt_tokens": 524, "completion_tokens": 222, "duration": 5.715636730194092, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 458, "completion_tokens": 126, "duration": 3.9507880210876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 559, "completion_tokens": 192, "duration": 5.819716691970825, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 620, "completion_tokens": 253, "duration": 5.147028207778931, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]\n\n# Test an empty list with a delimiter\nassert intersperse([], 4) == []\n\n# Test a list with elements and a delimiter\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n# Test a list with a single element and a delimiter\nassert intersperse([5], 0) == [5]\n\n# Test a list with all elements being the same\nassert intersperse([8, 8, 8, 8], 9) == [8, 9, 8, 9, 8, 9, 8]\n\n# Test a list with negative numbers and a negative delimiter\nassert intersperse([-2, -4, -6], -8) == [-2, -8, -4, -8, -6]\n\n# Test a list with large numbers and a large delimiter\nassert intersperse([10000, 20000, 30000], 9999) == [10000, 9999, 20000, 9999, 30000]", "prompt_tokens": 600, "completion_tokens": 513, "duration": 9.58332347869873, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            current_depth = 0\n            max_depth = 0\n    if current_depth > 0:\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 573, "completion_tokens": 295, "duration": 6.5626232624053955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 542, "completion_tokens": 198, "duration": 5.219770908355713, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 558, "completion_tokens": 231, "duration": 5.684664249420166, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result", "prompt_tokens": 627, "completion_tokens": 322, "duration": 6.937314510345459, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    def find_longest_palindromic_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n\n    longest_suffix = find_longest_palindromic_suffix(string)\n    prefix = string[:len(string) - len(longest_suffix)]\n    return string + prefix[::-1]", "prompt_tokens": 702, "completion_tokens": 413, "duration": 9.09432077407837, "result": "failed: object of type 'NoneType' has no len()", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 476, "completion_tokens": 194, "duration": 5.141479969024658, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 528, "completion_tokens": 181, "duration": 5.769343137741089, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 430, "completion_tokens": 138, "duration": 5.038929224014282, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 402, "completion_tokens": 138, "duration": 4.122984170913696, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)) )", "prompt_tokens": 407, "completion_tokens": 108, "duration": 3.4882826805114746, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 444, "completion_tokens": 142, "duration": 3.715200662612915, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [notes_map[note] for note in notes if note in notes_map]", "prompt_tokens": 2552, "completion_tokens": 1313, "duration": 24.667316675186157, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 457, "completion_tokens": 161, "duration": 4.548877954483032, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 501, "completion_tokens": 209, "duration": 5.257798433303833, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min((abs(a - b), a, b) for a in numbers for b in numbers if a != b)\n    return (closest_pair[1], closest_pair[2])", "prompt_tokens": 1299, "completion_tokens": 594, "duration": 12.369309663772583, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 736, "completion_tokens": 364, "duration": 7.558613300323486, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 768, "completion_tokens": 240, "duration": 6.740957975387573, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 357, "completion_tokens": 103, "duration": 2.8297150135040283, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 394, "completion_tokens": 154, "duration": 4.126855373382568, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 516, "completion_tokens": 152, "duration": 4.375697135925293, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 495, "completion_tokens": 158, "duration": 4.462739706039429, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 382, "completion_tokens": 123, "duration": 3.857677936553955, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 405, "completion_tokens": 134, "duration": 4.1360838413238525, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 571, "completion_tokens": 239, "duration": 6.087523460388184, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 586, "completion_tokens": 202, "duration": 4.595257520675659, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 511, "completion_tokens": 187, "duration": 7.6285130977630615, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n# Test evaluating a polynomial with coefficients at a point\nassert poly([1, 2, 3], 2) == 17  # 1 + 2*2 + 3*2^2 = 1 + 4 + 12 = 17\n\n# Test evaluating a polynomial with coefficients at a different point\nassert poly([3, 2, 1], 2) == 11  # 3 + 2*2 + 1*2^2 = 3 + 4 + 2 = 11\n\n# Test finding zero of a linear polynomial\nassert find_zero([1, 2]) == -0.5  # f(x) = 1 + 2x, zero at x = -0.5\n\n# Test finding zero of a cubic polynomial\nassert find_zero([-6, 11, -6, 1]) == 1.0  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3, zero at x = 1", "prompt_tokens": 3957, "completion_tokens": 2246, "duration": 39.525848388671875, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    non_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = []\n    j = 0\n    k = 0\n    \n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(non_divisible_by_three[j])\n            j += 1\n        else:\n            result.append(sorted_divisible_by_three[k])\n            k += 1\n    \n    return result", "prompt_tokens": 782, "completion_tokens": 444, "duration": 10.605310440063477, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 589, "completion_tokens": 278, "duration": 6.9008214473724365, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 606, "completion_tokens": 275, "duration": 6.842508316040039, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 479, "completion_tokens": 198, "duration": 6.479999303817749, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices.pop(0)\n    return result", "prompt_tokens": 601, "completion_tokens": 247, "duration": 6.698265790939331, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 704, "completion_tokens": 362, "duration": 6.887493848800659, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 547, "completion_tokens": 328, "duration": 7.5828857421875, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 659, "completion_tokens": 218, "duration": 4.140324831008911, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n ** 2", "prompt_tokens": 693, "completion_tokens": 226, "duration": 4.685893535614014, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 572, "completion_tokens": 195, "duration": 7.551091432571411, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 679, "completion_tokens": 222, "duration": 5.592618942260742, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "prompt_tokens": 460, "completion_tokens": 151, "duration": 3.4042580127716064, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 363, "completion_tokens": 110, "duration": 3.641983985900879, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    for i in range(3, n+1):\n        d = a + b + c + d\n        a, b, c = b, c, d\n    return d", "prompt_tokens": 700, "completion_tokens": 275, "duration": 7.661356449127197, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 642, "completion_tokens": 371, "duration": 8.654916524887085, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.3658366203308105, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 539, "completion_tokens": 171, "duration": 3.650744676589966, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 573, "completion_tokens": 292, "duration": 6.5575339794158936, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n# Test an empty string\nassert remove_vowels('') == ''\n\n# Test a string with vowels and consonants\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test a string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test a string with both lower and upper case vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test a string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 547, "completion_tokens": 263, "duration": 8.816761255264282, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 482, "completion_tokens": 167, "duration": 3.6922647953033447, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 397, "completion_tokens": 129, "duration": 3.124450206756592, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 657, "completion_tokens": 222, "duration": 5.823407411575317, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 381, "completion_tokens": 132, "duration": 4.227940320968628, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 452, "completion_tokens": 143, "duration": 3.061688184738159, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 538, "completion_tokens": 246, "duration": 4.918002128601074, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 926, "completion_tokens": 326, "duration": 9.145840406417847, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    \n    return max(prime_factors)", "prompt_tokens": 416, "completion_tokens": 256, "duration": 6.95553731918335, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 522, "completion_tokens": 176, "duration": 5.255337953567505, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 448, "completion_tokens": 149, "duration": 3.278691530227661, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i*xs[i] for i in range(1, len(xs))] if len(xs) > 1 else []", "prompt_tokens": 1148, "completion_tokens": 586, "duration": 12.314013957977295, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 672, "completion_tokens": 263, "duration": 7.277346134185791, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouy'\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count", "prompt_tokens": 555, "completion_tokens": 164, "duration": 4.470486164093018, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 502, "completion_tokens": 186, "duration": 5.508951187133789, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 543, "completion_tokens": 160, "duration": 8.841794967651367, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 740, "completion_tokens": 180, "duration": 5.734787940979004, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]", "prompt_tokens": 1169, "completion_tokens": 429, "duration": 7.159789800643921, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    result = -1\n    for key, value in frequency.items():\n        if key > 0 and value >= key and key > result:\n            result = key\n    \n    return result", "prompt_tokens": 691, "completion_tokens": 252, "duration": 4.492341756820679, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 614, "completion_tokens": 232, "duration": 6.342617988586426, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 612, "completion_tokens": 278, "duration": 8.007904529571533, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 791, "completion_tokens": 174, "duration": 6.8165507316589355, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 746, "completion_tokens": 303, "duration": 5.645505905151367, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 763, "completion_tokens": 282, "duration": 6.169604063034058, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 525, "completion_tokens": 297, "duration": 5.092363357543945, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 626, "completion_tokens": 182, "duration": 6.239277601242065, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 522, "completion_tokens": 142, "duration": 3.7084062099456787, "result": "failed: can't convert complex to int", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1099, "completion_tokens": 376, "duration": 6.3758461475372314, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 579, "completion_tokens": 145, "duration": 4.963511228561401, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 604, "completion_tokens": 254, "duration": 4.985292673110962, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 1199, "completion_tokens": 700, "duration": 11.846401691436768, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 453, "completion_tokens": 217, "duration": 7.967312812805176, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "prompt_tokens": 404, "completion_tokens": 175, "duration": 3.7456295490264893, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N)[2:].count('1')", "prompt_tokens": 568, "completion_tokens": 139, "duration": 4.395605087280273, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 447, "completion_tokens": 193, "duration": 4.040818691253662, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 588, "completion_tokens": 184, "duration": 3.722996711730957, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))\n\n# Test with a simple case where x exists in the list\nassert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with a case where x does not exist in the list\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "prompt_tokens": 2780, "completion_tokens": 1238, "duration": 20.664525270462036, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 857, "completion_tokens": 318, "duration": 9.935088396072388, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 556, "completion_tokens": 253, "duration": 6.1047656536102295, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 543, "completion_tokens": 150, "duration": 3.9593493938446045, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\". I\") + S.count(\"! I\") + S.count(\"? I\")", "prompt_tokens": 914, "completion_tokens": 346, "duration": 10.483317136764526, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 573, "completion_tokens": 174, "duration": 7.3265626430511475, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 540, "completion_tokens": 197, "duration": 5.854461669921875, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)", "prompt_tokens": 1062, "completion_tokens": 428, "duration": 8.423608303070068, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 702, "completion_tokens": 245, "duration": 7.567024230957031, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 639, "completion_tokens": 248, "duration": 5.680856943130493, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 503, "completion_tokens": 154, "duration": 3.1570868492126465, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 201, "duration": 5.363224744796753, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 688, "completion_tokens": 232, "duration": 6.380182504653931, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 566, "completion_tokens": 180, "duration": 4.838813304901123, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]\n\n# Test splitting words separated by commas\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test splitting words separated by spaces\nassert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test mixing words separated by commas and spaces\nassert words_string(\"Apple, banana, cherry grapefruit\") == [\"Apple\", \"banana\", \"cherry\", \"grapefruit\"]\n\n# Test empty input string\nassert words_string(\"\") == []\n\n# Test single word input\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test input with extra spaces\nassert words_string(\"  Monday    Tuesday   Wednesday \") == [\"Monday\", \"Tuesday\", \"Wednesday\"]", "prompt_tokens": 586, "completion_tokens": 360, "duration": 8.255283117294312, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 526, "completion_tokens": 209, "duration": 6.069677352905273, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 898, "completion_tokens": 483, "duration": 10.073017835617065, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 752, "completion_tokens": 189, "duration": 4.714197874069214, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [nums[num - 1] for num in filtered_arr]", "prompt_tokens": 949, "completion_tokens": 290, "duration": 6.978699684143066, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 627, "completion_tokens": 279, "duration": 5.991290807723999, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 747, "completion_tokens": 240, "duration": 7.545047998428345, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 558, "completion_tokens": 174, "duration": 6.717644691467285, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return arr.index(sorted_arr[0]) >= len(arr) - 1", "prompt_tokens": 2063, "completion_tokens": 542, "duration": 11.481865644454956, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 810, "completion_tokens": 270, "duration": 6.479953765869141, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 660, "completion_tokens": 246, "duration": 4.819697141647339, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 662, "completion_tokens": 192, "duration": 4.876880884170532, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(1 for c in s if int(c) % 2 == 1)}n the str{s}ng {s} of the {i}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 1632, "completion_tokens": 617, "duration": 14.952035188674927, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    prefix_sum = [0]\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum - min(prefix_sum))\n        prefix_sum.append(curr_sum)\n    \n    return min_sum", "prompt_tokens": 572, "completion_tokens": 285, "duration": 5.876908540725708, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    wells = [sum(row) for row in grid]\n    max_wells = max(wells)\n    return math.ceil(max_wells / capacity) * len(grid) - sum(wells)", "prompt_tokens": 1669, "completion_tokens": 480, "duration": 9.41361665725708, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 750, "completion_tokens": 255, "duration": 6.761873960494995, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 732, "completion_tokens": 254, "duration": 7.527554273605347, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 640, "completion_tokens": 254, "duration": 7.539004564285278, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 700, "completion_tokens": 249, "duration": 7.107600450515747, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 896, "completion_tokens": 300, "duration": 8.627068996429443, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 542, "completion_tokens": 204, "duration": 4.2046613693237305, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 700, "completion_tokens": 292, "duration": 6.475332736968994, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 839, "completion_tokens": 268, "duration": 7.743758201599121, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 845, "completion_tokens": 284, "duration": 5.192990064620972, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 617, "completion_tokens": 215, "duration": 6.607213735580444, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "prompt_tokens": 954, "completion_tokens": 326, "duration": 10.139815092086792, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n\n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    if length % 2 == 0:\n        return \"NO\"\n    \n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 805, "completion_tokens": 263, "duration": 5.226822376251221, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    result = 1\n    sign_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        result *= abs(num)\n        sign_sum += sign\n        \n    return result * sign_sum", "prompt_tokens": 502, "completion_tokens": 153, "duration": 3.827120304107666, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def backtrack(curr_path, visited):\n        if len(curr_path) == k:\n            return curr_path\n\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if (i, j) not in visited:\n                    visited.add((i, j))\n                    new_path = backtrack(curr_path + [grid[i][j]], visited.copy())\n                    if new_path:\n                        return new_path\n                    visited.remove((i, j))\n\n    return backtrack([], set())", "prompt_tokens": 2911, "completion_tokens": 1071, "duration": 18.861430168151855, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n\n    tribonacci.append(3)\n    if n == 1:\n        return tribonacci\n\n    tribonacci.append(4)\n    if n == 2:\n        return tribonacci\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n\n    return tribonacci", "prompt_tokens": 945, "completion_tokens": 423, "duration": 9.966350078582764, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 455, "completion_tokens": 176, "duration": 5.721067428588867, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening = 0\n    for char in string:\n        if char == '[':\n            opening += 1\n        elif char == ']' and opening > 0:\n            opening -= 1\n    return opening != 0", "prompt_tokens": 994, "completion_tokens": 378, "duration": 9.86646032333374, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 848, "completion_tokens": 376, "duration": 9.970975637435913, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 611, "completion_tokens": 193, "duration": 3.5476224422454834, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 562, "completion_tokens": 225, "duration": 6.891565322875977, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 673, "completion_tokens": 299, "duration": 7.415463924407959, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if isinstance(a, str) and ',' in a:\n            a = a.replace(',', '.')\n        if isinstance(b, str) and ',' in b:\n            b = b.replace(',', '.')\n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 585, "completion_tokens": 201, "duration": 4.421828031539917, "result": "failed: '>' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n > 0 and n % 4 == 0", "prompt_tokens": 917, "completion_tokens": 443, "duration": 10.517369508743286, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result * special_factorial(n-1)", "prompt_tokens": 556, "completion_tokens": 241, "duration": 6.1790549755096436, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    return text", "prompt_tokens": 499, "completion_tokens": 141, "duration": 5.721294403076172, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 837, "completion_tokens": 336, "duration": 9.584693670272827, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result", "prompt_tokens": 728, "completion_tokens": 273, "duration": 7.41526460647583, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 642, "completion_tokens": 259, "duration": 5.183714866638184, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 582, "completion_tokens": 151, "duration": 3.4440300464630127, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(map(int, str(abs(n))))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 661, "completion_tokens": 292, "duration": 7.824448347091675, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    return len([num for num in nums if num > 10 and is_odd(num)])", "prompt_tokens": 1268, "completion_tokens": 701, "duration": 14.64463186264038, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 786, "completion_tokens": 366, "duration": 7.005317687988281, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(sorted(planets[start+1:end], key=lambda x: planets.index(x)))", "prompt_tokens": 791, "completion_tokens": 304, "duration": 9.444563627243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 698, "completion_tokens": 170, "duration": 4.874156713485718, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 500, "completion_tokens": 194, "duration": 6.636846303939819, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test with a list containing both odd and even positive integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with a list containing only negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test with a list containing a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Test with a list containing only zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0", "prompt_tokens": 698, "completion_tokens": 401, "duration": 8.853383302688599, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 893, "completion_tokens": 290, "duration": 8.769373655319214, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 911, "completion_tokens": 276, "duration": 6.863638877868652, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1010, "completion_tokens": 411, "duration": 8.706468343734741, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for i in str(abs(num)) if int(i) % 2 == 0)\n    odd_count = sum(1 for i in str(abs(num)) if int(i) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 445, "completion_tokens": 199, "duration": 4.473553895950317, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n        \n    return roman_num.lower()", "prompt_tokens": 516, "completion_tokens": 318, "duration": 6.61508321762085, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 557, "completion_tokens": 220, "duration": 5.522754907608032, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 566, "completion_tokens": 230, "duration": 6.668856620788574, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 876, "completion_tokens": 185, "duration": 5.2966344356536865, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 791, "completion_tokens": 309, "duration": 5.194394826889038, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 562, "completion_tokens": 229, "duration": 6.966036796569824, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 446, "completion_tokens": 142, "duration": 5.440257787704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 625, "completion_tokens": 268, "duration": 4.824965715408325, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 632, "completion_tokens": 267, "duration": 6.309841871261597, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    res = []\n    count = 0\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif c == ')':\n            count -= 1\n            if count == 0:\n                res.append(paren_string[start:i+1])\n    return res", "prompt_tokens": 535, "completion_tokens": 226, "duration": 5.254393100738525, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 470, "completion_tokens": 138, "duration": 4.035843372344971, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 538, "completion_tokens": 171, "duration": 4.60293173789978, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_value) for x in numbers) / len(numbers)", "prompt_tokens": 769, "completion_tokens": 402, "duration": 7.934202432632446, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the last delimiter\n    return result", "prompt_tokens": 594, "completion_tokens": 286, "duration": 6.160486459732056, "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            max_levels.append(len(stack))\n        elif char == ')':\n            stack.pop()\n    return max_levels", "prompt_tokens": 548, "completion_tokens": 207, "duration": 4.805497646331787, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 549, "completion_tokens": 214, "duration": 6.51150107383728, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 653, "completion_tokens": 325, "duration": 6.517807960510254, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n\n    return result", "prompt_tokens": 663, "completion_tokens": 339, "duration": 7.65612530708313, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]", "prompt_tokens": 1113, "completion_tokens": 524, "duration": 13.864455461502075, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result", "prompt_tokens": 488, "completion_tokens": 202, "duration": 5.356356620788574, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), x))", "prompt_tokens": 939, "completion_tokens": 406, "duration": 7.980117082595825, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 465, "completion_tokens": 178, "duration": 5.583380699157715, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = [string[:i+1] for i in range(len(string))]\n    return result", "prompt_tokens": 393, "completion_tokens": 134, "duration": 4.111135959625244, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 631, "completion_tokens": 166, "duration": 5.349254608154297, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 434, "completion_tokens": 132, "duration": 4.1342902183532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [note_lengths[note] for note in notes]", "prompt_tokens": 1313, "completion_tokens": 590, "duration": 14.642555952072144, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 503, "completion_tokens": 214, "duration": 4.823021173477173, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'zero': '0',\n        'one': '1',\n        'two': '2',\n        'three': '3',\n        'four': '4',\n        'five': '5',\n        'six': '6',\n        'seven': '7',\n        'eight': '8',\n        'nine': '9'\n    }\n\n    sorted_numbers = sorted(numbers.split(), key=lambda x: int(number_dict[x]))\n\n    return ' '.join(sorted_numbers)", "prompt_tokens": 521, "completion_tokens": 250, "duration": 6.558159828186035, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n    return closest_pair", "prompt_tokens": 795, "completion_tokens": 379, "duration": 8.476877927780151, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return scaled", "prompt_tokens": 677, "completion_tokens": 310, "duration": 6.421985864639282, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 543, "completion_tokens": 216, "duration": 5.725851535797119, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 338, "completion_tokens": 88, "duration": 2.674499988555908, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 427, "completion_tokens": 182, "duration": 4.444627285003662, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    d = 2\n    while d*d <= n:\n        if n % d == 0:\n            factors.append(d)\n            n //= d\n        else:\n            d += 1\n    if n > 1:\n        factors.append(n)\n    return sum(([k]*v for k, v in Counter(factors).items()), [])", "prompt_tokens": 610, "completion_tokens": 277, "duration": 5.840388774871826, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 503, "completion_tokens": 182, "duration": 4.61991286277771, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 420, "completion_tokens": 161, "duration": 4.022497653961182, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 395, "completion_tokens": 124, "duration": 3.6734862327575684, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 227, "duration": 5.244804382324219, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 543, "completion_tokens": 159, "duration": 4.166497230529785, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 566, "completion_tokens": 242, "duration": 5.248958110809326, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return round(poly(xs, 0), 2)", "prompt_tokens": 866, "completion_tokens": 338, "duration": 7.919990062713623, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 696, "completion_tokens": 253, "duration": 5.581519365310669, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 507, "completion_tokens": 196, "duration": 6.252283811569214, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 508, "completion_tokens": 177, "duration": 5.055192470550537, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 488, "completion_tokens": 207, "duration": 5.202131509780884, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = [x if i % 2 != 0 else even_indices[i // 2] for i, x in enumerate(l)]\n    return result", "prompt_tokens": 626, "completion_tokens": 265, "duration": 5.656975746154785, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 656, "completion_tokens": 235, "duration": 5.533313751220703, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        a, b = 0, 1\n        for _ in range(2, num + 1):\n            a, b = b, a + b\n        return a\n\n    i = 2\n    count = 0\n    while True:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num):\n            count += 1\n        if count == n:\n            return fib_num\n        i += 1", "prompt_tokens": 482, "completion_tokens": 279, "duration": 4.89680552482605, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 689, "completion_tokens": 255, "duration": 5.963596820831299, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n\n\n# Test when there are no cars on the road, so no collisions can occur\nassert car_race_collision(0) == 0\n\n# Test when there is only one pair of cars on the road, so one collision occurs\nassert car_race_collision(1) == 1\n\n# Test when there are multiple pairs of cars on the road, so collisions occur for each pair\nassert car_race_collision(5) == 5\n\n# Test when a large number of cars are on the road, check if collisions are calculated correctly\nassert car_race_collision(100) == 100", "prompt_tokens": 610, "completion_tokens": 260, "duration": 5.887182712554932, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 585, "completion_tokens": 209, "duration": 8.413480758666992, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l)", "prompt_tokens": 633, "completion_tokens": 157, "duration": 5.57192587852478, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 508, "completion_tokens": 210, "duration": 4.631382465362549, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 372, "completion_tokens": 119, "duration": 3.935072898864746, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 776, "completion_tokens": 374, "duration": 11.76399040222168, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    if len(l) == 0:\n        return None\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "prompt_tokens": 471, "completion_tokens": 223, "duration": 4.6786134243011475, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.414151191711426, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 513, "completion_tokens": 145, "duration": 9.844401121139526, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 549, "completion_tokens": 248, "duration": 6.353644609451294, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n# Test when input text is an empty string\nassert remove_vowels('') == ''\n\n# Test when input text has vowels in lowercase and newline character\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test when input text has vowels in lowercase\nassert remove_vowels('abcdef') == 'bcdf'\n\n# Test when input text has only vowels in lowercase\nassert remove_vowels('aaaaa') == ''\n\n# Test when input text has vowels in both lowercase and uppercase\nassert remove_vowels('aaBAA') == 'B'\n\n# Test when input text has no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 582, "completion_tokens": 332, "duration": 6.667952060699463, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 448, "completion_tokens": 133, "duration": 6.4596498012542725, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 374, "completion_tokens": 106, "duration": 3.7893242835998535, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 637, "completion_tokens": 202, "duration": 6.744352340698242, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 418, "completion_tokens": 220, "duration": 5.49607253074646, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 522, "completion_tokens": 214, "duration": 4.408928632736206, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 488, "completion_tokens": 196, "duration": 4.107922315597534, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 586, "completion_tokens": 205, "duration": 4.410714864730835, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 360, "completion_tokens": 99, "duration": 5.3823137283325195, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 493, "completion_tokens": 147, "duration": 4.741142272949219, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 575, "completion_tokens": 277, "duration": 7.386849403381348, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test a simple linear polynomial: 2 + 3x\nassert derivative([2, 3]) == [3]\n\n# Test a quadratic polynomial: 4 + 3x + 2x^2\nassert derivative([4, 3, 2]) == [3, 4]\n\n# Test a cubic polynomial: 1 + 2x + 3x^2 + 4x^3\nassert derivative([1, 2, 3, 4]) == [2, 6, 12]\n\n# Test a polynomial with all coefficients being 0\nassert derivative([0, 0, 0, 0]) == [0, 0, 0]\n\n# Test a polynomial with negative coefficients: -2 - 3x - 4x^2\nassert derivative([-2, -3, -4]) == [-3, -8]", "prompt_tokens": 589, "completion_tokens": 404, "duration": 10.154531717300415, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 620, "completion_tokens": 211, "duration": 4.363824129104614, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s if char.lower() in 'aeiouy')\n    if s[-1].lower() == 'y' and count > 0:\n        count -= 1\n    return count", "prompt_tokens": 583, "completion_tokens": 203, "duration": 8.593879461288452, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 546, "completion_tokens": 253, "duration": 5.648363351821899, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 560, "completion_tokens": 177, "duration": 4.404442071914673, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s,n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 736, "completion_tokens": 169, "duration": 4.495537996292114, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_value:\n            smallest_even_value = num\n            smallest_even_index = i\n    \n    if smallest_even_value == float('inf'):\n        return []\n    \n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 1017, "completion_tokens": 304, "duration": 6.50354790687561, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 714, "completion_tokens": 253, "duration": 6.588890552520752, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 623, "completion_tokens": 234, "duration": 5.458671569824219, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 624, "completion_tokens": 291, "duration": 7.794067859649658, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 799, "completion_tokens": 182, "duration": 6.512650966644287, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    return sum(1 for i in range(len(arr)//2) if arr[i] != arr[-i-1])", "prompt_tokens": 638, "completion_tokens": 174, "duration": 5.332859992980957, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 760, "completion_tokens": 262, "duration": 7.8991944789886475, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 454, "completion_tokens": 226, "duration": 4.374210596084595, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 723, "completion_tokens": 280, "duration": 5.302955627441406, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 516, "completion_tokens": 146, "duration": 7.824634313583374, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1151, "completion_tokens": 423, "duration": 9.137469053268433, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'", "prompt_tokens": 578, "completion_tokens": 140, "duration": 3.3851075172424316, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 577, "completion_tokens": 231, "duration": 6.628874778747559, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1372, "completion_tokens": 895, "duration": 15.706060409545898, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5 (prime number)\nassert prime_length('Hello') == True\n\n# Test with a palindrome string of length 7 (prime number)\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7 (prime number)\nassert prime_length('kittens') == True\n\n# Test with a string of length 6 (not a prime number)\nassert prime_length('orange') == False", "prompt_tokens": 443, "completion_tokens": 307, "duration": 6.45341420173645, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * (10 ** (n - 1) - 9 ** (n - 1))", "prompt_tokens": 448, "completion_tokens": 211, "duration": 9.212503910064697, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 770, "completion_tokens": 355, "duration": 6.5957348346710205, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 485, "completion_tokens": 231, "duration": 4.850744247436523, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 564, "completion_tokens": 160, "duration": 3.924962282180786, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.extend([(i, j) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x])\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test with a simple case where x is found in multiple rows\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with x found only in one row and last column\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test when x is not present in the list\nassert get_row([[1, 2], [3, 4]], 5) == []", "prompt_tokens": 1489, "completion_tokens": 702, "duration": 13.916164636611938, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array.copy()\n    if len(arr) == 0:\n        return arr\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1553, "completion_tokens": 727, "duration": 15.051223754882812, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            rotated_ascii = ord(char) + 2 * 2\n            if char.islower():\n                if rotated_ascii > ord('z'):\n                    rotated_ascii -= 26\n            else:\n                if rotated_ascii > ord('Z'):\n                    rotated_ascii -= 26\n            result += chr(rotated_ascii)\n        else:\n            result += char\n    return result", "prompt_tokens": 543, "completion_tokens": 240, "duration": 5.6735663414001465, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 577, "completion_tokens": 184, "duration": 5.402469635009766, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\". I\") + S.count(\"! I\") + S.count(\"? I\") + S.startswith(\"I\")\n\n# Test when there are no sentences starting with \"I\"\nassert is_bored(\"Hello world\") == 0\n\n# Test when there is one sentence starting with \"I\"\nassert is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1\n\n# Test when there are multiple sentences starting with \"I\"\nassert is_bored(\"I am happy. I am sad. I am bored. I am excited!\") == 4\n\n# Test when there is only one sentence starting with \"I\"\nassert is_bored(\"I am the only one here!\") == 1\n\n# Test when there are no sentences in the input string\nassert is_bored(\"\") == 0", "prompt_tokens": 549, "completion_tokens": 333, "duration": 6.118731737136841, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 573, "completion_tokens": 175, "duration": 4.198719263076782, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                encoded_message += chr(ord(letter) + 2)\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message", "prompt_tokens": 534, "completion_tokens": 209, "duration": 7.037499666213989, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_digits(max_prime)", "prompt_tokens": 1072, "completion_tokens": 436, "duration": 8.466715574264526, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    first_key = keys[0]\n    if first_key.islower():\n        return all(key.islower() for key in keys)\n    elif first_key.isupper():\n        return all(key.isupper() for key in keys)\n    else:\n        return False", "prompt_tokens": 697, "completion_tokens": 254, "duration": 5.5197203159332275, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.782110691070557, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 496, "completion_tokens": 147, "duration": 5.866156101226807, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 455, "completion_tokens": 183, "duration": 4.708773851394653, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value)))", "prompt_tokens": 1088, "completion_tokens": 350, "duration": 8.046236276626587, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones", "prompt_tokens": 619, "completion_tokens": 228, "duration": 4.991101980209351, "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split()]\n\n# Test with a simple sentence separated by spaces\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test with a sentence separated by commas\nassert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test with an empty string\nassert words_string(\"\") == []\n\n# Test with a sentence containing only one word\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test with a sentence containing duplicate words\nassert words_string(\"apple, banana, apple, orange\") == [\"apple\", \"banana\", \"apple\", \"orange\"]", "prompt_tokens": 567, "completion_tokens": 326, "duration": 9.852162599563599, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 895, "completion_tokens": 364, "duration": 8.161918640136719, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 708, "completion_tokens": 284, "duration": 5.5784831047058105, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in sorted(x):\n        if all(int(d) % 2 != 0 for d in str(num)):\n            result.append(num)\n    return result", "prompt_tokens": 529, "completion_tokens": 189, "duration": 6.410324573516846, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    word_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    return [word_map[num] for num in reversed_arr]", "prompt_tokens": 1006, "completion_tokens": 401, "duration": 7.629251956939697, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 885, "completion_tokens": 538, "duration": 12.634730815887451, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 989, "completion_tokens": 481, "duration": 10.315675020217896, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += 1\n        else:\n            digits_sum = sum(int(d) for d in str(num) if d.isdigit())\n            if digits_sum > 0:\n                count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 158, "duration": 3.6051688194274902, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 969, "completion_tokens": 249, "duration": 8.188820123672485, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 810, "completion_tokens": 284, "duration": 7.761960029602051, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    result = {letter: count for letter, count in hist.items() if count == max_count}\n    \n    return result", "prompt_tokens": 628, "completion_tokens": 213, "duration": 4.9505650997161865, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 742, "completion_tokens": 273, "duration": 5.649412155151367, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements in the string {} of the input.\".format(sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 770, "completion_tokens": 291, "duration": 10.465381383895874, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum", "prompt_tokens": 531, "completion_tokens": 236, "duration": 4.918513774871826, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1119, "completion_tokens": 327, "duration": 7.63031530380249, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 822, "completion_tokens": 327, "duration": 10.220969915390015, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\n# Test with an empty string and n = 3 should return an empty list\nassert select_words(\"\", 3) == []\n\n# Test with n = 4 should return [\"little\"] as it is the only word with 4 consonants\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n\n# Test with n = 3 should return [\"Mary\", \"lamb\"] as these are the words with 3 consonants\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n\n# Test with n = 2 should return an empty list as there are no words with 2 consonants\nassert select_words(\"simple white space\", 2) == []\n\n# Test with n = 4 should return [\"world\"] as it is the only word with 4 consonants\nassert select_words(\"Hello world\", 4) == [\"world\"]\n\n# Test with n = 3 should return [\"Uncle\"] as it is the only word with 3 consonants\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]", "prompt_tokens": 779, "completion_tokens": 546, "duration": 12.801926612854004, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test with a word containing a vowel between two consonants from the right side\nassert get_closest_vowel(\"yogurt\") == \"u\"\n\n# Test with a word containing a vowel between two consonants from the right side\nassert get_closest_vowel(\"FULL\") == \"U\"\n\n# Test with a word containing no vowel between two consonants from the right side\nassert get_closest_vowel(\"quick\") == \"\"\n\n# Test with a word having less than 3 characters\nassert get_closest_vowel(\"ab\") == \"\"\n\n# Test with a word containing only vowels\nassert get_closest_vowel(\"aeiou\") == \"\"\n\n# Test with a word containing only consonants\nassert get_closest_vowel(\"xyz\") == \"\"", "prompt_tokens": 643, "completion_tokens": 412, "duration": 10.223196506500244, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    open_count = close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count > 0:\n                    open_count -= 1\n                else:\n                    close_count += 1\n\n    return 'Yes' if open_count == close_count == 0 else 'No'", "prompt_tokens": 729, "completion_tokens": 300, "duration": 6.47078013420105, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 889, "completion_tokens": 290, "duration": 8.648967027664185, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 524, "completion_tokens": 186, "duration": 7.352041482925415, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 639, "completion_tokens": 231, "duration": 7.692819118499756, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    res = [n]\n    while n != 1:\n        n = n * 3 + 1 if n % 2 else n // 2\n        if n % 2:\n            res.append(n)\n    return sorted(set(res))", "prompt_tokens": 1528, "completion_tokens": 621, "duration": 13.952780485153198, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = date.split('-')\n\n    if len(year) != 4:\n        return False\n\n    if month.isdigit() and day.isdigit() and year.isdigit():\n        month, day, year = int(month), int(day), int(year)\n    else:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1433, "completion_tokens": 607, "duration": 15.667505264282227, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 642, "completion_tokens": 239, "duration": 8.635340213775635, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst.count(x) <= 1 for x in lst)", "prompt_tokens": 952, "completion_tokens": 302, "duration": 7.307335138320923, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 786, "completion_tokens": 230, "duration": 6.749671936035156, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        product *= sign\n        magnitude_sum += abs(num)\n    \n    return product * magnitude_sum", "prompt_tokens": 500, "completion_tokens": 152, "duration": 5.67155385017395, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def minPathUtil(row, col, path):\n        if len(path) == k:\n            return path.copy()\n        path.append(grid[row][col])\n        if row % 2 == 0:\n            if col < len(grid[0]) - 1:\n                return minPathUtil(row, col + 1, path.copy())\n            elif row < len(grid) - 1:\n                return minPathUtil(row + 1, col, path.copy())\n        else:\n            if col > 0:\n                return minPathUtil(row, col - 1, path.copy())\n            elif row < len(grid) - 1:\n                return minPathUtil(row + 1, col, path.copy())\n\n    return minPathUtil(0, 0, [])", "prompt_tokens": 3279, "completion_tokens": 1498, "duration": 27.57916831970215, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        tribonacci = [3, 1, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 803, "completion_tokens": 276, "duration": 7.154208660125732, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 450, "completion_tokens": 171, "duration": 5.604159593582153, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1006, "completion_tokens": 538, "duration": 9.913546085357666, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num) ** 2\n    return total", "prompt_tokens": 758, "completion_tokens": 296, "duration": 8.35743260383606, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 594, "completion_tokens": 172, "duration": 3.674459934234619, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 603, "completion_tokens": 267, "duration": 7.141050338745117, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_nums = [num for num in lst if num < 0]\n    pos_nums = [num for num in lst if num > 0]\n    \n    largest_neg = None if not neg_nums else max(neg_nums)\n    smallest_pos = None if not pos_nums else min(pos_nums)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 637, "completion_tokens": 259, "duration": 6.951601505279541, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == int:\n        return a if float(a.replace(',', '.')) > b else str(b)\n    elif type(a) == str and type(b) == float:\n        return a if float(a.replace(',', '.')) > b else str(b)\n    elif type(a) == int and type(b) == str:\n        return str(a) if a > float(b.replace(',', '.')) else b\n    elif type(a) == float and type(b) == str:\n        return str(a) if a > float(b.replace(',', '.')) else b\n    else:\n        return None", "prompt_tokens": 646, "completion_tokens": 369, "duration": 10.436274766921997, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 538, "completion_tokens": 220, "duration": 5.174393892288208, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    factorial = 1\n    result = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 542, "completion_tokens": 216, "duration": 7.726445198059082, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('   ', '-')\n    text = text.replace('  ', '_')\n    return text", "prompt_tokens": 499, "completion_tokens": 136, "duration": 3.1193912029266357, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or '.' not in file_name or len(file_name.split('.')[0]) == 0:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 776, "completion_tokens": 259, "duration": 6.95703125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 738, "completion_tokens": 292, "duration": 5.2340826988220215, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 683, "completion_tokens": 300, "duration": 8.633752822875977, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 585, "completion_tokens": 151, "duration": 3.856394052505493, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 591, "completion_tokens": 213, "duration": 4.395600318908691, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 615, "completion_tokens": 239, "duration": 6.063914060592651, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 779, "completion_tokens": 371, "duration": 6.625348329544067, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 803, "completion_tokens": 335, "duration": 8.8090238571167, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))", "prompt_tokens": 758, "completion_tokens": 245, "duration": 5.845975637435913, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 510, "completion_tokens": 239, "duration": 4.719757318496704, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))", "prompt_tokens": 2130, "completion_tokens": 1025, "duration": 22.454581260681152, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 856, "completion_tokens": 242, "duration": 5.541380167007446, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strengths = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n    max_strength = max(strengths)\n    max_idx = strengths.index(max_strength)\n    return f\"{class_name}.{extensions[max_idx]}\"", "prompt_tokens": 1015, "completion_tokens": 353, "duration": 8.860231876373291, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 640, "completion_tokens": 243, "duration": 7.894842147827148, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 440, "completion_tokens": 197, "duration": 7.42180323600769, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 475, "completion_tokens": 275, "duration": 5.555272340774536, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 554, "completion_tokens": 182, "duration": 4.801475286483765, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 575, "completion_tokens": 243, "duration": 7.991518259048462, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1073, "completion_tokens": 386, "duration": 13.30454969406128, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i+1]\n        elif operators[i] == '-':\n            result -= operands[i+1]\n        elif operators[i] == '*':\n            result *= operands[i+1]\n        elif operators[i] == '//':\n            result //= operands[i+1]\n        elif operators[i] == '**':\n            result **= operands[i+1]\n    return result", "prompt_tokens": 852, "completion_tokens": 368, "duration": 6.313775300979614, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result.swapcase()\n    else:\n        return result[::-1]", "prompt_tokens": 526, "completion_tokens": 204, "duration": 4.682309865951538, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 547, "completion_tokens": 241, "duration": 5.767532587051392, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 663, "completion_tokens": 306, "duration": 5.8138978481292725, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 660, "completion_tokens": 296, "duration": 6.3154895305633545, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current += char\n        elif char == ')':\n            count -= 1\n            current += char\n            if count == 0:\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 667, "completion_tokens": 350, "duration": 6.789703369140625, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 507, "completion_tokens": 175, "duration": 5.261487722396851, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 554, "completion_tokens": 187, "duration": 5.231900691986084, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 599, "completion_tokens": 233, "duration": 5.686356782913208, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]\n\n# Testing with an empty list should return an empty list\nassert intersperse([], 4) == []\n\n# Testing with a list of numbers and a delimiter\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n# Testing with a list of numbers and a delimiter as 0\n# Delimiter 0 should be inserted between every two consecutive elements\nassert intersperse([5, 10, 15], 0) == [5, 0, 10, 0, 15]\n\n# Testing with a list of negative numbers and a negative delimiter\n# Negative delimiter should be inserted between every two consecutive elements\nassert intersperse([-2, -4, -6], -1) == [-2, -1, -4, -1, -6]\n\n# Testing with a list of numbers where all elements are the same\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([7, 7, 7, 7], 0) == [7, 0, 7, 0, 7, 0, 7]\n\n# Testing with a list of numbers where the delimiter is larger than the elements\n# Delimiter should be inserted between every two consecutive elements\nassert intersperse([100, 200, 300], 500) == [100, 500, 200, 500, 300]", "prompt_tokens": 690, "completion_tokens": 688, "duration": 11.241539478302002, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 696, "completion_tokens": 385, "duration": 7.4599525928497314, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 576, "completion_tokens": 246, "duration": 5.5328288078308105, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n\n    return sum_result, product_result", "prompt_tokens": 670, "completion_tokens": 340, "duration": 6.836949586868286, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "prompt_tokens": 652, "completion_tokens": 325, "duration": 6.748286247253418, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"", "prompt_tokens": 565, "completion_tokens": 200, "duration": 5.487182855606079, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\n    return result", "prompt_tokens": 511, "completion_tokens": 225, "duration": 4.98249888420105, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), -strings.index(x)))", "prompt_tokens": 879, "completion_tokens": 335, "duration": 8.520058393478394, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 451, "completion_tokens": 157, "duration": 4.360527038574219, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 390, "completion_tokens": 131, "duration": 4.30501914024353, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 630, "completion_tokens": 168, "duration": 4.802161931991577, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 1029, "completion_tokens": 398, "duration": 9.341809511184692, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_notes = music_string.split()\n    return [notes.get(note, 0) for note in music_notes]", "prompt_tokens": 1849, "completion_tokens": 872, "duration": 18.328491687774658, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 148, "duration": 4.442899227142334, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5',\n        'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'\n    }\n\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 563, "completion_tokens": 283, "duration": 6.1522133350372314, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair", "prompt_tokens": 807, "completion_tokens": 401, "duration": 8.415251016616821, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 787, "completion_tokens": 415, "duration": 7.474453449249268, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 570, "completion_tokens": 243, "duration": 4.906006336212158, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 323, "completion_tokens": 73, "duration": 4.299060821533203, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 398, "completion_tokens": 153, "duration": 4.585190773010254, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n\n# Test factorizing a prime number\nassert factorize(11) == [11]\n\n# Test factorizing a perfect square of a prime number\nassert factorize(25) == [5, 5]\n\n# Test factorizing a number with repeated prime factors\nassert factorize(72) == [2, 2, 2, 3, 3]\n\n# Test factorizing a number with prime factors and non-prime factors\nassert factorize(70) == [2, 5, 7]\n\n# Test factorizing the number 1 (should return an empty list)\nassert factorize(1) == []", "prompt_tokens": 568, "completion_tokens": 339, "duration": 6.951383352279663, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 624, "completion_tokens": 312, "duration": 7.2168519496917725, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])", "prompt_tokens": 417, "completion_tokens": 174, "duration": 4.564584732055664, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 371, "completion_tokens": 100, "duration": 3.4340646266937256, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 559, "completion_tokens": 241, "duration": 6.05673885345459, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 595, "completion_tokens": 211, "duration": 5.131182670593262, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 566, "completion_tokens": 242, "duration": 5.929847240447998, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List xs must have an even number of coefficients.\")\n    \n    # Find the largest non-zero coefficient\n    largest_coeff = max([abs(coeff) for coeff in xs[1:]])\n    \n    # Find the zero point\n    return round(next(x for x in range(-largest_coeff, largest_coeff) if poly(xs, x) == 0), 2)", "prompt_tokens": 1503, "completion_tokens": 695, "duration": 17.01627016067505, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    for i in range(0, len(l), 3):\n        result[i:i+3] = sorted(result[i:i+3])\n    return result", "prompt_tokens": 701, "completion_tokens": 268, "duration": 7.129175662994385, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 587, "completion_tokens": 275, "duration": 6.641361236572266, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 503, "completion_tokens": 172, "duration": 6.12016224861145, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 480, "completion_tokens": 202, "duration": 5.5506837368011475, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    odd_indices = l[::2]\n    even_indices = sorted(l[1::2])\n    result = [val for pair in zip(odd_indices, even_indices) for val in pair]\n    return result", "prompt_tokens": 621, "completion_tokens": 248, "duration": 5.73026967048645, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[-1] + s[:-1] if len(s) == 3 else s for s in [s[i:i+3] for i in range(0, len(s), 3)]]\n    return \"\".join(groups)", "prompt_tokens": 682, "completion_tokens": 325, "duration": 6.084585189819336, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 530, "completion_tokens": 330, "duration": 8.326737403869629, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 751, "completion_tokens": 282, "duration": 6.38282585144043, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n*n", "prompt_tokens": 684, "completion_tokens": 215, "duration": 5.97270655632019, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 571, "completion_tokens": 195, "duration": 7.627931594848633, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 669, "completion_tokens": 212, "duration": 7.475641250610352, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res", "prompt_tokens": 453, "completion_tokens": 134, "duration": 3.3473126888275146, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 436, "completion_tokens": 183, "duration": 3.2249152660369873, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 2):\n        a, b, c, d = b, c, d, a + b + c + d\n    return c", "prompt_tokens": 722, "completion_tokens": 266, "duration": 5.97259783744812, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 524, "completion_tokens": 267, "duration": 7.928804159164429, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 424, "completion_tokens": 118, "duration": 4.614989995956421, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "prompt_tokens": 529, "completion_tokens": 164, "duration": 4.321116924285889, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") if ch.islower() else chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\") if ch.isupper() else ch) for ch in s])", "prompt_tokens": 1912, "completion_tokens": 899, "duration": 17.176883697509766, "result": "failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 4)", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 578, "completion_tokens": 179, "duration": 7.3445634841918945, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 490, "completion_tokens": 175, "duration": 4.192967414855957, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 5.1259801387786865, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 646, "completion_tokens": 211, "duration": 6.335115432739258, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 346, "completion_tokens": 110, "duration": 2.97375750541687, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 460, "completion_tokens": 151, "duration": 8.129777669906616, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 745, "completion_tokens": 253, "duration": 8.18025016784668, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 664, "completion_tokens": 283, "duration": 6.883795261383057, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n**0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n# Test with a number that has a prime factor greater than 2\nassert largest_prime_factor(13195) == 29\n\n# Test with a power of 2 to ensure the function correctly returns 2\nassert largest_prime_factor(2048) == 2\n\n# Test with a number that has a prime factor greater than 2 but is not the largest prime factor\nassert largest_prime_factor(90) == 5\n\n# Test with a number where the largest prime factor is the square root of the number\nassert largest_prime_factor(49) == 7\n\n# Test with a number that has multiple prime factors\nassert largest_prime_factor(315) == 7", "prompt_tokens": 455, "completion_tokens": 384, "duration": 10.418313264846802, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "prompt_tokens": 724, "completion_tokens": 172, "duration": 7.675479412078857, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 491, "completion_tokens": 183, "duration": 7.172269105911255, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test a simple linear polynomial: 3 + 2x\nassert derivative([3, 2]) == [2]\n\n# Test a quadratic polynomial: 1 + 3x + 2x^2\nassert derivative([1, 3, 2]) == [3, 4]\n\n# Test a polynomial with all coefficients being 0\nassert derivative([0, 0, 0, 0]) == [0, 0, 0]\n\n# Test a cubic polynomial: 5 + 4x + 3x^2 + 2x^3\nassert derivative([5, 4, 3, 2]) == [4, 6, 6]\n\n# Test a polynomial with only a constant term\nassert derivative([7]) == []", "prompt_tokens": 567, "completion_tokens": 361, "duration": 7.266570806503296, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 677, "completion_tokens": 268, "duration": 8.143429517745972, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n\n    if s[-1].lower() == 'y' and s[-2].lower() not in vowels:\n        count -= 1\n\n    return count", "prompt_tokens": 1067, "completion_tokens": 486, "duration": 11.377921104431152, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 505, "completion_tokens": 195, "duration": 5.414011478424072, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 603, "completion_tokens": 220, "duration": 8.358243227005005, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if fruits[0].isdigit() else 0\n    oranges = int(fruits[-2]) if fruits[-2].isdigit() else 0\n    return n - apples - oranges", "prompt_tokens": 758, "completion_tokens": 220, "duration": 5.776386976242065, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n            smallest_even = num\n            smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    return []", "prompt_tokens": 1019, "completion_tokens": 299, "duration": 9.924739837646484, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 786, "completion_tokens": 320, "duration": 6.62468409538269, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 610, "completion_tokens": 221, "duration": 8.43198275566101, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 613, "completion_tokens": 280, "duration": 5.373045921325684, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 894, "completion_tokens": 277, "duration": 8.413573980331421, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 700, "completion_tokens": 257, "duration": 8.703673362731934, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 747, "completion_tokens": 248, "duration": 6.8968541622161865, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(num):\n        count = 0\n        for i in range(2, num):\n            if is_prime(i) and num % i == 0:\n                count += 1\n        return count\n\n    return count_primes(a) == 3", "prompt_tokens": 464, "completion_tokens": 243, "duration": 36.010926246643066, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 685, "completion_tokens": 242, "duration": 12.396313428878784, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 519, "completion_tokens": 147, "duration": 6.106945991516113, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(digit in prime_hex_digits for digit in num)\n    return count", "prompt_tokens": 1086, "completion_tokens": 356, "duration": 7.67327880859375, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f'db{bin(decimal)[2:]}db'", "prompt_tokens": 582, "completion_tokens": 144, "duration": 3.5866167545318604, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 599, "completion_tokens": 249, "duration": 5.960211992263794, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 926, "completion_tokens": 436, "duration": 7.807457685470581, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 428, "completion_tokens": 144, "duration": 3.0193121433258057, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 512, "completion_tokens": 304, "duration": 5.848908185958862, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(x) for x in str(N)))[2:]", "prompt_tokens": 549, "completion_tokens": 125, "duration": 7.077888011932373, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 453, "completion_tokens": 199, "duration": 5.7014570236206055, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)", "prompt_tokens": 554, "completion_tokens": 159, "duration": 3.5980513095855713, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, val in sorted(enumerate(row), key=lambda k: k[1], reverse=True):\n                result.append((i, j))\n    return result", "prompt_tokens": 877, "completion_tokens": 240, "duration": 8.14383053779602, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 822, "completion_tokens": 283, "duration": 5.180771112442017, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                start = ord('A')\n            else:\n                start = ord('a')\n            result += chr(((ord(char) - start + shift) % 26) + start)\n        else:\n            result += char\n    return result", "prompt_tokens": 605, "completion_tokens": 288, "duration": 8.542344570159912, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "prompt_tokens": 611, "completion_tokens": 218, "duration": 5.739809274673462, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 1045, "completion_tokens": 488, "duration": 11.962722539901733, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 596, "completion_tokens": 197, "duration": 8.19344186782837, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    \n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    \n    return encoded_message", "prompt_tokens": 504, "completion_tokens": 168, "duration": 4.309514045715332, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum_digits(largest_prime)", "prompt_tokens": 1078, "completion_tokens": 447, "duration": 9.663011312484741, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 663, "completion_tokens": 190, "duration": 6.753844261169434, "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 7.593997240066528, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 495, "completion_tokens": 146, "duration": 5.552312135696411, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 449, "completion_tokens": 162, "duration": 4.719067096710205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    return int(value + 0.5) if value > 0 else int(value - 0.5)", "prompt_tokens": 664, "completion_tokens": 208, "duration": 12.192440032958984, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    while n > 0:\n        n += 2 if n % 2 == 0 else 2\n        stones.append(n)\n        n -= 1\n    return stones[:-1]", "prompt_tokens": 640, "completion_tokens": 249, "duration": 6.384829759597778, "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split() if word.strip()]", "prompt_tokens": 635, "completion_tokens": 249, "duration": 8.205418586730957, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 609, "completion_tokens": 293, "duration": 5.009244680404663, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 623, "completion_tokens": 200, "duration": 5.84458589553833, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 785, "completion_tokens": 222, "duration": 6.859076023101807, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [mapping[num] for num in filtered_sorted_arr]", "prompt_tokens": 942, "completion_tokens": 322, "duration": 6.773925304412842, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 810, "completion_tokens": 462, "duration": 9.425341367721558, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 878, "completion_tokens": 376, "duration": 8.590057849884033, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 609, "completion_tokens": 224, "duration": 6.591813087463379, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    min_index = arr.index(min(arr))\n    return sorted(arr) == arr[min_index:] + arr[:min_index]", "prompt_tokens": 3368, "completion_tokens": 1066, "duration": 24.204795837402344, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    return \"YES\" if even_count == len(lst1) else \"NO\"", "prompt_tokens": 833, "completion_tokens": 307, "duration": 9.363691091537476, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n\n    max_count = max(hist.values(), default=0)\n    return {key: value for key, value in hist.items() if value == max_count}", "prompt_tokens": 639, "completion_tokens": 221, "duration": 4.539597034454346, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join([char for char in s if char not in c])\n    return (res, res == res[::-1])", "prompt_tokens": 683, "completion_tokens": 216, "duration": 5.989326477050781, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0), sum(1 for digit in s if int(digit) % 2 != 0)) for s in lst]", "prompt_tokens": 1029, "completion_tokens": 612, "duration": 9.694540977478027, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 559, "completion_tokens": 259, "duration": 5.6132965087890625, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1815, "completion_tokens": 610, "duration": 10.952299356460571, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 806, "completion_tokens": 311, "duration": 5.795903444290161, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyz\"\n        return sum(1 for letter in word if letter.lower() in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 729, "completion_tokens": 260, "duration": 7.015610933303833, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = set('AEIOUaeiou')\n    consonants = set('BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')\n\n    word = word[1:-1]  # Remove first and last character\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and all(c in consonants for c in word[i+1:]):\n            return word[i]\n    return \"\"", "prompt_tokens": 622, "completion_tokens": 249, "duration": 7.737748622894287, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 690, "completion_tokens": 233, "duration": 7.641258955001831, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 834, "completion_tokens": 235, "duration": 6.856811285018921, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 536, "completion_tokens": 198, "duration": 4.966894149780273, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "prompt_tokens": 708, "completion_tokens": 300, "duration": 7.004823446273804, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted(set([num for num in collatz_seq if num % 2 == 1]))", "prompt_tokens": 951, "completion_tokens": 390, "duration": 11.070708751678467, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:  # February\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 922, "completion_tokens": 388, "duration": 7.344411849975586, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 611, "completion_tokens": 208, "duration": 7.132554531097412, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = set()\n    prev = None\n    for num in lst:\n        if num in seen:\n            return False\n        if prev is not None and num < prev:\n            return False\n        seen.add(num)\n        prev = num\n    return True", "prompt_tokens": 988, "completion_tokens": 371, "duration": 6.531697034835815, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 805, "completion_tokens": 264, "duration": 6.2839744091033936, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    sum_magnitudes = sum(abs(num) for num in arr)\n    \n    return product * sum_magnitudes", "prompt_tokens": 503, "completion_tokens": 140, "duration": 3.6149415969848633, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        if (i, j) in visited:\n            return None\n        visited.add((i, j))\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n:\n                res = dfs(x, y, path + [grid[x][y]])\n                if res:\n                    return res\n        visited.remove((i, j))\n        return None\n\n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1235, "completion_tokens": 448, "duration": 11.728124380111694, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3] * (n+1)\n    if n >= 1:\n        tribonacci[1] = 1\n    if n >= 2:\n        tribonacci[2] = 2\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i // 2\n        else:\n            tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3]\n    return tribonacci", "prompt_tokens": 803, "completion_tokens": 276, "duration": 5.7573254108428955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return 0 if result == 1 else result", "prompt_tokens": 427, "completion_tokens": 156, "duration": 5.954681158065796, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append('[')\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < 2", "prompt_tokens": 573, "completion_tokens": 177, "duration": 5.708317041397095, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x)**2 for x in map(lambda x: -(-x//1), lst)])", "prompt_tokens": 1184, "completion_tokens": 470, "duration": 11.430423974990845, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 587, "completion_tokens": 160, "duration": 6.306674480438232, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 551, "completion_tokens": 214, "duration": 4.637089014053345, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    max_neg = None if not neg_integers else max(neg_integers)\n    min_pos = None if not pos_integers else min(pos_integers)\n\n    return (max_neg, min_pos)", "prompt_tokens": 632, "completion_tokens": 257, "duration": 8.639305830001831, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) and ',' in a:\n        a = a.replace(',', '.')\n    if isinstance(b, str) and ',' in b:\n        b = b.replace(',', '.')\n    \n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 727, "completion_tokens": 331, "duration": 6.0582122802734375, "result": "failed: '>' not supported between instances of 'str' and 'int'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 541, "completion_tokens": 223, "duration": 8.681403636932373, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 595, "completion_tokens": 269, "duration": 6.734647512435913, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    while '__' in text:\n        text = text.replace('__', '_')\n    return text", "prompt_tokens": 492, "completion_tokens": 150, "duration": 3.2664475440979004, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 798, "completion_tokens": 290, "duration": 8.139334201812744, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result", "prompt_tokens": 779, "completion_tokens": 324, "duration": 8.481559753417969, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sentence = sentence.split()\n    result = [word for word in sentence if is_prime(len(word))]\n    return ' '.join(result)", "prompt_tokens": 593, "completion_tokens": 207, "duration": 7.635401725769043, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 582, "completion_tokens": 121, "duration": 3.0636470317840576, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))", "prompt_tokens": 1127, "completion_tokens": 556, "duration": 12.67089557647705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 252, "duration": 5.463404655456543, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 684, "completion_tokens": 262, "duration": 6.063695907592773, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 797, "completion_tokens": 318, "duration": 5.191333055496216, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 736, "completion_tokens": 208, "duration": 6.621301651000977, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 529, "completion_tokens": 258, "duration": 8.31685495376587, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test when input list has positive odd numbers\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test when input list has positive even numbers\nassert double_the_difference([2, 4, 6]) == 0\n\n# Test when input list has positive odd and even numbers\nassert double_the_difference([1, 2, 3, 4]) == 10\n\n# Test when input list has negative numbers\nassert double_the_difference([-1, -3, -5]) == 0\n\n# Test when input list has mix of negative, positive, odd, and even numbers\nassert double_the_difference([-1, 2, 3, -4, 5]) == 34\n\n# Test when input list contains only 0\nassert double_the_difference([0, 0, 0, 0]) == 0\n\n# Test when input list is empty\nassert double_the_difference([]) == 0", "prompt_tokens": 663, "completion_tokens": 440, "duration": 10.858404874801636, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "generated_code": "def compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 977, "completion_tokens": 363, "duration": 6.981679916381836, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = None\n    \n    for ext in extensions:\n        CAP = sum(1 for c in ext if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 952, "completion_tokens": 314, "duration": 9.582022190093994, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 586, "completion_tokens": 189, "duration": 6.416850566864014, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 442, "completion_tokens": 195, "duration": 6.379764556884766, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return None\n\n    val = [\n        1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n    ]\n    syms = [\n        'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'\n    ]\n    roman_num = ''\n    i = 12\n    while number:\n        div = number // val[i]\n        number %= val[i]\n        roman_num += syms[i] * div\n        i -= 1\n    return roman_num.lower()", "prompt_tokens": 521, "completion_tokens": 315, "duration": 8.552236080169678, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2", "prompt_tokens": 572, "completion_tokens": 200, "duration": 5.836813449859619, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique = 0\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_word = word\n            max_unique = unique_chars\n    \n    return max_word", "prompt_tokens": 551, "completion_tokens": 201, "duration": 4.246002674102783, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_after_meal = max(0, remaining - need)\n    return [total_eaten, remaining_after_meal]", "prompt_tokens": 985, "completion_tokens": 300, "duration": 10.075165748596191, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 819, "completion_tokens": 338, "duration": 9.351251125335693, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result = char + result\n    return result", "prompt_tokens": 572, "completion_tokens": 221, "duration": 4.417879819869995, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 446, "completion_tokens": 145, "duration": 3.347747325897217, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if any(int(digit) % 2 == 0 for digit in str(i) if digit.isdigit())]", "prompt_tokens": 829, "completion_tokens": 290, "duration": 7.8217527866363525, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 635, "completion_tokens": 265, "duration": 6.341007709503174, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    in_group = False\n    \n    for char in paren_string:\n        if char == '(':\n            in_group = True\n        elif char == ')':\n            in_group = False\n            result.append(current_group + ')')\n            current_group = ''\n        elif in_group:\n            current_group += char\n\n    return result", "prompt_tokens": 604, "completion_tokens": 286, "duration": 6.347574949264526, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 438, "completion_tokens": 106, "duration": 3.015273094177246, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 579, "completion_tokens": 212, "duration": 4.999154567718506, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 745, "completion_tokens": 376, "duration": 8.126559972763062, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 585, "completion_tokens": 279, "duration": 6.308639287948608, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 1500, "completion_tokens": 785, "duration": 16.88917589187622, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 529, "completion_tokens": 199, "duration": 4.508605480194092, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    total_sum = sum(numbers) if numbers else 0\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_sum, total_product", "prompt_tokens": 730, "completion_tokens": 377, "duration": 7.906200408935547, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result", "prompt_tokens": 637, "completion_tokens": 297, "duration": 6.652051687240601, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    return ''", "prompt_tokens": 627, "completion_tokens": 240, "duration": 6.148382663726807, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 447, "completion_tokens": 165, "duration": 4.253842115402222, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 559, "completion_tokens": 212, "duration": 4.9031453132629395, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 427, "completion_tokens": 140, "duration": 4.153936862945557, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 421, "completion_tokens": 157, "duration": 4.053708791732788, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 623, "completion_tokens": 158, "duration": 4.673375368118286, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 442, "completion_tokens": 140, "duration": 4.422733783721924, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]", "prompt_tokens": 814, "completion_tokens": 358, "duration": 7.181582689285278, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 503, "completion_tokens": 207, "duration": 5.771211862564087, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    num_dict = {word: i for i, word in enumerate(words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 516, "completion_tokens": 216, "duration": 5.3331053256988525, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\nfrom itertools import combinations\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min(combinations(numbers, 2), key=lambda x: abs(x[0] - x[1]))\n    return tuple(sorted(closest_pair))", "prompt_tokens": 804, "completion_tokens": 354, "duration": 7.547354221343994, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    \n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 762, "completion_tokens": 410, "duration": 9.043666362762451, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 718, "completion_tokens": 190, "duration": 5.641003847122192, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 327, "completion_tokens": 77, "duration": 2.806591272354126, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 397, "completion_tokens": 157, "duration": 4.542895555496216, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors\n\n# Test factorize function with a prime number\nassert factorize(7) == [7]", "prompt_tokens": 458, "completion_tokens": 230, "duration": 5.19076132774353, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 482, "completion_tokens": 161, "duration": 4.492379188537598, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 397, "completion_tokens": 138, "duration": 4.106118440628052, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 400, "completion_tokens": 129, "duration": 4.0184006690979, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 533, "completion_tokens": 215, "duration": 4.9047136306762695, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 590, "completion_tokens": 206, "duration": 5.412261247634888, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 508, "completion_tokens": 183, "duration": 5.616365909576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    n = len(xs)\n    return -xs[0] / xs[n-1]", "prompt_tokens": 2883, "completion_tokens": 813, "duration": 19.319091320037842, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = l.copy()\n    result[::3] = sorted(result[::3])\n    return result", "prompt_tokens": 700, "completion_tokens": 246, "duration": 7.201095342636108, "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 522, "completion_tokens": 211, "duration": 5.9731855392456055, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 503, "completion_tokens": 172, "duration": 5.147714614868164, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 498, "completion_tokens": 217, "duration": 8.195653915405273, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[1::2])[i//2] if i%2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 611, "completion_tokens": 225, "duration": 5.069124460220337, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    n = len(s)\n    groups = [s[(3 * i):min((3 * i + 3), n)] for i in range((n + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 686, "completion_tokens": 351, "duration": 7.135829448699951, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 557, "completion_tokens": 332, "duration": 7.0312018394470215, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    from itertools import combinations\n    return any(sum(comb) == 0 for comb in combinations(l, 3))", "prompt_tokens": 696, "completion_tokens": 227, "duration": 5.337579011917114, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n-1) // 2", "prompt_tokens": 656, "completion_tokens": 190, "duration": 4.291862726211548, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 614, "completion_tokens": 238, "duration": 8.44307279586792, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 668, "completion_tokens": 211, "duration": 5.7390077114105225, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 451, "completion_tokens": 131, "duration": 3.019747018814087, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 405, "completion_tokens": 152, "duration": 3.7240164279937744, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n    return fib_sequence[n]", "prompt_tokens": 834, "completion_tokens": 430, "duration": 11.500234365463257, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 485, "completion_tokens": 214, "duration": 8.288843631744385, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 397, "completion_tokens": 91, "duration": 4.56710147857666, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 532, "completion_tokens": 164, "duration": 8.073166847229004, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 515, "completion_tokens": 195, "duration": 4.190337181091309, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 549, "completion_tokens": 153, "duration": 4.793679714202881, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 448, "completion_tokens": 133, "duration": 3.4562578201293945, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 352, "completion_tokens": 84, "duration": 6.7088048458099365, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 657, "completion_tokens": 222, "duration": 7.4790942668914795, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 380, "completion_tokens": 144, "duration": 6.422329902648926, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 466, "completion_tokens": 161, "duration": 3.690554618835449, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 508, "completion_tokens": 224, "duration": 6.359213352203369, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 583, "completion_tokens": 202, "duration": 8.325188398361206, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test when the input number has a prime factor larger than 2\nassert largest_prime_factor(13195) == 29\n\n# Test when the input number has the largest prime factor as 2\nassert largest_prime_factor(2048) == 2", "prompt_tokens": 369, "completion_tokens": 162, "duration": 3.9147160053253174, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 472, "completion_tokens": 126, "duration": 2.761706829071045, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 549, "completion_tokens": 249, "duration": 5.039896249771118, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 1479, "completion_tokens": 708, "duration": 16.319947719573975, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 667, "completion_tokens": 258, "duration": 5.290624380111694, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if not s:\n        return 0\n    \n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 556, "completion_tokens": 200, "duration": 7.983941555023193, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 479, "completion_tokens": 184, "duration": 6.917372465133667, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 568, "completion_tokens": 185, "duration": 6.323119401931763, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 809, "completion_tokens": 249, "duration": 5.739294052124023, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [i for i in arr if i % 2 == 0]\n    if not even_values:\n        return []\n    min_even = min(even_values)\n    min_index = arr.index(min_even)\n    return [min_even, min_index]", "prompt_tokens": 992, "completion_tokens": 250, "duration": 4.763332366943359, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 705, "completion_tokens": 239, "duration": 6.407315492630005, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    lst.sort()\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(lst[i])\n        else:\n            result.extend([lst[i], lst[j]])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 642, "completion_tokens": 298, "duration": 7.440170049667358, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 573, "completion_tokens": 239, "duration": 5.524146556854248, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 827, "completion_tokens": 209, "duration": 4.949189901351929, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 630, "completion_tokens": 187, "duration": 6.7393457889556885, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 763, "completion_tokens": 265, "duration": 5.580200672149658, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(num):\n        factors = []\n        for i in range(2, num + 1):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 3", "prompt_tokens": 441, "completion_tokens": 229, "duration": 6.269283771514893, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 619, "completion_tokens": 175, "duration": 3.789402723312378, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a**(1/3))**3 == a", "prompt_tokens": 517, "completion_tokens": 137, "duration": 6.902933120727539, "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = sum(1 for digit in num if digit.upper() in primes)\n    return count", "prompt_tokens": 947, "completion_tokens": 217, "duration": 5.272403240203857, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 573, "completion_tokens": 135, "duration": 2.765556573867798, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n        \n    return True", "prompt_tokens": 579, "completion_tokens": 229, "duration": 5.271391153335571, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 864, "completion_tokens": 385, "duration": 8.464203357696533, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n\n# Test with a string of length 5, which is a prime number\nassert prime_length('Hello') == True\n\n# Test with a palindrome string of length 7, which is a prime number\nassert prime_length('abcdcba') == True\n\n# Test with a string of length 7, which is a prime number\nassert prime_length('kittens') == True\n\n# Test with a string of length 6, which is not a prime number\nassert prime_length('orange') == False", "prompt_tokens": 454, "completion_tokens": 329, "duration": 7.140429496765137, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    return 20", "prompt_tokens": 456, "completion_tokens": 211, "duration": 6.474013805389404, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(i) for i in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 540, "completion_tokens": 124, "duration": 3.125814914703369, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)", "prompt_tokens": 588, "completion_tokens": 333, "duration": 10.48774766921997, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 581, "completion_tokens": 177, "duration": 8.808676958084106, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    \n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n\n# Test with a list containing multiple rows where x exists in different columns\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with a list containing x in the last row and last column\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n# Test with a list where x is not present\nassert get_row([[1, 2], [3, 4]], 5) == []", "prompt_tokens": 890, "completion_tokens": 441, "duration": 8.732155799865723, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 849, "completion_tokens": 307, "duration": 9.994344234466553, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 517, "completion_tokens": 199, "duration": 4.756076097488403, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 593, "completion_tokens": 203, "duration": 6.263903856277466, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    count = 0\n    sentences = S.split(\".\")\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 533, "completion_tokens": 183, "duration": 4.377737998962402, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 580, "completion_tokens": 165, "duration": 6.027057409286499, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('A'))\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 518, "completion_tokens": 188, "duration": 7.640730857849121, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1035, "completion_tokens": 404, "duration": 8.059661626815796, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    upper = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    \n    return lower or upper", "prompt_tokens": 695, "completion_tokens": 239, "duration": 6.410165309906006, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 639, "completion_tokens": 252, "duration": 6.329967737197876, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 489, "completion_tokens": 140, "duration": 3.438406467437744, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in \"AEIOU\")\n\n# Testing an empty string\nassert count_upper('') == 0\n\n# Testing a string with no uppercase vowels in even indices\nassert count_upper('abcdefg') == 0\n\n# Testing a string with one uppercase vowel in even indices\nassert count_upper('aBCdEf') == 1\n\n# Testing a string with multiple uppercase vowels in even indices\nassert count_upper('dBBE') == 0", "prompt_tokens": 418, "completion_tokens": 216, "duration": 5.319866895675659, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return round(float(value))", "prompt_tokens": 721, "completion_tokens": 241, "duration": 5.487993478775024, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 621, "completion_tokens": 242, "duration": 7.173234224319458, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 592, "completion_tokens": 198, "duration": 6.570732593536377, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 606, "completion_tokens": 289, "duration": 10.387942790985107, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))[2:]", "prompt_tokens": 582, "completion_tokens": 169, "duration": 4.445150136947632, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 819, "completion_tokens": 256, "duration": 6.5567967891693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 949, "completion_tokens": 308, "duration": 10.110563278198242, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 549, "completion_tokens": 201, "duration": 8.043099164962769, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 703, "completion_tokens": 195, "duration": 5.3774733543396, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 570, "completion_tokens": 189, "duration": 6.175365209579468, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False", "prompt_tokens": 1036, "completion_tokens": 312, "duration": 9.331617593765259, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 812, "completion_tokens": 277, "duration": 7.755525827407837, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    result = {}\n    max_count = 0\n    for letter in test.split():\n        result[letter] = result.get(letter, 0) + 1\n        max_count = max(max_count, result[letter])\n    \n    return {k: v for k, v in result.items() if v == max_count}", "prompt_tokens": 632, "completion_tokens": 223, "duration": 5.295926094055176, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    filtered_s = ''.join(char for char in s if char not in c)\n    return (filtered_s, filtered_s == filtered_s[::-1])", "prompt_tokens": 1026, "completion_tokens": 289, "duration": 6.800706148147583, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), sum(int(d) % 2 != 0 for d in s), i, i) for i, s in enumerate(lst)]", "prompt_tokens": 732, "completion_tokens": 276, "duration": 5.04229474067688, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 674, "completion_tokens": 383, "duration": 8.98710036277771, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity) * 2", "prompt_tokens": 1811, "completion_tokens": 602, "duration": 13.680263996124268, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 772, "completion_tokens": 277, "duration": 5.45000433921814, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for char in word if char.lower() not in 'aeiou')\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1236, "completion_tokens": 480, "duration": 10.190256118774414, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    word = word[1:-1]\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n        elif word[i] in consonants and i > 0 and word[i-1] in consonants:\n            return \"\"\n    \n    return \"\"", "prompt_tokens": 676, "completion_tokens": 308, "duration": 6.301961898803711, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for p in lst:\n        count += 1 if p == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 685, "completion_tokens": 217, "duration": 7.948598623275757, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 834, "completion_tokens": 235, "duration": 7.6261866092681885, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)", "prompt_tokens": 472, "completion_tokens": 136, "duration": 2.9860851764678955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 749, "completion_tokens": 341, "duration": 9.115067720413208, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = set()\n    while n != 1:\n        if n % 2 != 0:\n            result.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.add(1)\n    return sorted(list(result))", "prompt_tokens": 901, "completion_tokens": 325, "duration": 6.667253255844116, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if not(1 <= month <= 12):\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                return 1 <= day <= 29\n            else:\n                return 1 <= day <= 28\n    except:\n        return False\n    return False", "prompt_tokens": 903, "completion_tokens": 364, "duration": 7.928685665130615, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [char for char in txt if char.islower() and ord(char) % 2 != 0]\n\n# Test when the text contains whitespaces\nassert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n\n# Test when the text contains whitespaces and commas\nassert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n\n# Test when the text contains no whitespaces or commas\nassert split_words(\"abcdef\") == 3\n\n# Test when the text contains only one word\nassert split_words(\"Python\") == [\"Python\"]\n\n# Test when the text contains numbers and special characters\nassert split_words(\"Testing 1, 2, 3!\") == [\"Testing\", \"1\", \"2\", \"3!\"]\n\n# Test when the text is empty\nassert split_words(\"\") == []", "prompt_tokens": 2368, "completion_tokens": 1182, "duration": 27.108323097229004, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    if len(lst) != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))", "prompt_tokens": 1374, "completion_tokens": 396, "duration": 10.071210384368896, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    if length % 2 == 0:\n        return \"NO\"\n    \n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 786, "completion_tokens": 244, "duration": 5.762708902359009, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sign_sum = 0\n    for num in arr:\n        product *= 1 if num == 0 else num // abs(num)\n        sign_sum += abs(num)\n\n    return product * sign_sum", "prompt_tokens": 550, "completion_tokens": 190, "duration": 7.733881235122681, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_next_move(i, j, visited):\n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        for ni, nj in neighbors:\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                return ni, nj\n        return None\n\n    def dfs(i, j, path, visited):\n        if len(path) == k:\n            return path\n        visited.add((i, j))\n        for ni, nj in find_next_move(i, j, visited):\n            res = dfs(ni, nj, path + [grid[ni][nj]], visited)\n            if res:\n                return res\n        visited.remove((i, j))\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, [grid[i][j]], set([(i, j)]))\n            if res:\n                return res", "prompt_tokens": 1220, "completion_tokens": 477, "duration": 11.507922410964966, "result": "failed: cannot unpack non-iterable int object", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        tribonacci = [3, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + 1)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 851, "completion_tokens": 334, "duration": 7.9422430992126465, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 416, "completion_tokens": 137, "duration": 7.473382949829102, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 982, "completion_tokens": 376, "duration": 9.015998125076294, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([(int(x) + 1)**2 for x in lst])", "prompt_tokens": 1206, "completion_tokens": 486, "duration": 9.543599843978882, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt[-1] != ' '", "prompt_tokens": 597, "completion_tokens": 168, "duration": 5.1670982837677, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 542, "completion_tokens": 206, "duration": 7.848006725311279, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [num for num in lst if num < 0]\n    pos_ints = [num for num in lst if num > 0]\n    \n    max_neg = None if len(neg_ints) == 0 else max(neg_ints)\n    min_pos = None if len(pos_ints) == 0 else min(pos_ints)\n    \n    return (max_neg, min_pos)", "prompt_tokens": 632, "completion_tokens": 268, "duration": 6.079993724822998, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == str:\n        a = a.replace(',', '.')\n    if type(b) == str:\n        b = b.replace(',', '.')\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 712, "completion_tokens": 318, "duration": 9.522056579589844, "result": "failed: '>' not supported between instances of 'int' and 'str'", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 457, "completion_tokens": 139, "duration": 7.017647743225098, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        fact = 1\n        for j in range(1, i + 1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 468, "completion_tokens": 168, "duration": 7.865574598312378, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 569, "completion_tokens": 206, "duration": 4.5538434982299805, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 770, "completion_tokens": 264, "duration": 8.112447261810303, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 858, "completion_tokens": 403, "duration": 6.988749980926514, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 608, "completion_tokens": 220, "duration": 7.989948749542236, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 582, "completion_tokens": 148, "duration": 3.2832014560699463, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 673, "completion_tokens": 295, "duration": 8.114445924758911, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 625, "completion_tokens": 285, "duration": 9.00717568397522, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 626, "completion_tokens": 206, "duration": 5.108077049255371, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])\n\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Pluto\", \"Mars\") == ()\nassert bf(\"Saturn\", \"Pluto\") == ()", "prompt_tokens": 2861, "completion_tokens": 1249, "duration": 22.64779305458069, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 811, "completion_tokens": 283, "duration": 6.657710313796997, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 510, "completion_tokens": 230, "duration": 4.945045709609985, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 591, "completion_tokens": 173, "duration": 4.216839075088501, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 940, "completion_tokens": 337, "duration": 7.443509578704834, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    if extensions:\n        strongest = max(extensions, key=strength)\n        return f\"{class_name}.{strongest}\"\n    else:\n        return f\"{class_name}.\"", "prompt_tokens": 1640, "completion_tokens": 616, "duration": 14.127429008483887, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 637, "completion_tokens": 240, "duration": 6.638293027877808, "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(x) for x in str(abs(num)) if int(x) % 2 == 0])\n    odd_count = len([int(x) for x in str(abs(num)) if int(x) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 434, "completion_tokens": 193, "duration": 6.872753381729126, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return ''\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 685, "completion_tokens": 479, "duration": 11.185061931610107, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 563, "completion_tokens": 215, "duration": 4.303164005279541, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))", "prompt_tokens": 510, "completion_tokens": 112, "duration": 25.90031909942627, "result": "failed: t2", "passed": false}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + remaining if remaining < need else number + need\n    remaining_after_meals = 0 if remaining < need else remaining - need\n    return [total_eaten, remaining_after_meals]", "prompt_tokens": 916, "completion_tokens": 238, "duration": 5.2848334312438965, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i - 1] == '+':\n            result += operands[i]\n        elif operators[i - 1] == '-':\n            result -= operands[i]\n        elif operators[i - 1] == '*':\n            result *= operands[i]\n        elif operators[i - 1] == '//':\n            result //= operands[i]\n        elif operators[i - 1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 786, "completion_tokens": 310, "duration": 6.936994791030884, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = []\n    all_letters = all(char.isalpha() for char in s)\n    \n    if all_letters:\n        result = [char.lower() if char.isupper() else char.upper() for char in s]\n    else:\n        result = list(s[::-1])\n    \n    return ''.join(result)", "prompt_tokens": 517, "completion_tokens": 192, "duration": 6.0452187061309814, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 449, "completion_tokens": 148, "duration": 6.993002653121948, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 679, "completion_tokens": 322, "duration": 10.377836465835571, "result": "failed: Test 1", "passed": false}
