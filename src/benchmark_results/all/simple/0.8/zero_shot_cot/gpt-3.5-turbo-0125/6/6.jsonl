{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 612, "completion_tokens": 247, "duration": 5.606420040130615}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    curr_group = \"\"\n    open_braces = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')':\n            open_braces -= 1\n        if open_braces == 0 and curr_group:\n            result.append(curr_group)\n            curr_group = \"\"\n        elif open_braces > 0:\n            curr_group += char\n\n    return result", "prompt_tokens": 524, "completion_tokens": 222, "duration": 5.715636730194092}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 458, "completion_tokens": 126, "duration": 3.9507880210876465}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 559, "completion_tokens": 192, "duration": 5.819716691970825}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 620, "completion_tokens": 253, "duration": 5.147028207778931}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    return result[:-1]\n\n# Test an empty list with a delimiter\nassert intersperse([], 4) == []\n\n# Test a list with elements and a delimiter\nassert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\n\n# Test a list with a single element and a delimiter\nassert intersperse([5], 0) == [5]\n\n# Test a list with all elements being the same\nassert intersperse([8, 8, 8, 8], 9) == [8, 9, 8, 9, 8, 9, 8]\n\n# Test a list with negative numbers and a negative delimiter\nassert intersperse([-2, -4, -6], -8) == [-2, -8, -4, -8, -6]\n\n# Test a list with large numbers and a large delimiter\nassert intersperse([10000, 20000, 30000], 9999) == [10000, 9999, 20000, 9999, 30000]", "prompt_tokens": 600, "completion_tokens": 513, "duration": 9.58332347869873}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            depths.append(max_depth)\n            current_depth = 0\n            max_depth = 0\n    if current_depth > 0:\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 573, "completion_tokens": 295, "duration": 6.5626232624053955}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 542, "completion_tokens": 198, "duration": 5.219770908355713}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        sum_result = sum(numbers)\n        product_result = 1\n        for num in numbers:\n            product_result *= num\n        return sum_result, product_result", "prompt_tokens": 558, "completion_tokens": 231, "duration": 5.684664249420166}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    max_num = numbers[0]\n    result = [max_num]\n\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n\n    return result", "prompt_tokens": 627, "completion_tokens": 322, "duration": 6.937314510345459}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n\n    def find_longest_palindromic_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n\n    longest_suffix = find_longest_palindromic_suffix(string)\n    prefix = string[:len(string) - len(longest_suffix)]\n    return string + prefix[::-1]", "prompt_tokens": 702, "completion_tokens": 413, "duration": 9.09432077407837}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 476, "completion_tokens": 194, "duration": 5.141479969024658}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 528, "completion_tokens": 181, "duration": 5.769343137741089}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 430, "completion_tokens": 138, "duration": 5.038929224014282}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 402, "completion_tokens": 138, "duration": 4.122984170913696}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)) )", "prompt_tokens": 407, "completion_tokens": 108, "duration": 3.4882826805114746}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 444, "completion_tokens": 142, "duration": 3.715200662612915}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    notes = music_string.split()\n    return [notes_map[note] for note in notes if note in notes_map]", "prompt_tokens": 2552, "completion_tokens": 1313, "duration": 24.667316675186157}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 457, "completion_tokens": 161, "duration": 4.548877954483032}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))", "prompt_tokens": 501, "completion_tokens": 209, "duration": 5.257798433303833}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min((abs(a - b), a, b) for a in numbers for b in numbers if a != b)\n    return (closest_pair[1], closest_pair[2])", "prompt_tokens": 1299, "completion_tokens": 594, "duration": 12.369309663772583}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 736, "completion_tokens": 364, "duration": 7.558613300323486}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 768, "completion_tokens": 240, "duration": 6.740957975387573}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 357, "completion_tokens": 103, "duration": 2.8297150135040283}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 394, "completion_tokens": 154, "duration": 4.126855373382568}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 516, "completion_tokens": 152, "duration": 4.375697135925293}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 495, "completion_tokens": 158, "duration": 4.462739706039429}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 382, "completion_tokens": 123, "duration": 3.857677936553955}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 405, "completion_tokens": 134, "duration": 4.1360838413238525}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 571, "completion_tokens": 239, "duration": 6.087523460388184}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 586, "completion_tokens": 202, "duration": 4.595257520675659}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 511, "completion_tokens": 187, "duration": 7.6285130977630615}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n\n# Test evaluating a polynomial with coefficients at a point\nassert poly([1, 2, 3], 2) == 17  # 1 + 2*2 + 3*2^2 = 1 + 4 + 12 = 17\n\n# Test evaluating a polynomial with coefficients at a different point\nassert poly([3, 2, 1], 2) == 11  # 3 + 2*2 + 1*2^2 = 3 + 4 + 2 = 11\n\n# Test finding zero of a linear polynomial\nassert find_zero([1, 2]) == -0.5  # f(x) = 1 + 2x, zero at x = -0.5\n\n# Test finding zero of a cubic polynomial\nassert find_zero([-6, 11, -6, 1]) == 1.0  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3, zero at x = 1", "prompt_tokens": 3957, "completion_tokens": 2246, "duration": 39.525848388671875}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    non_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = []\n    j = 0\n    k = 0\n    \n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(non_divisible_by_three[j])\n            j += 1\n        else:\n            result.append(sorted_divisible_by_three[k])\n            k += 1\n    \n    return result", "prompt_tokens": 782, "completion_tokens": 444, "duration": 10.605310440063477}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 589, "completion_tokens": 278, "duration": 6.9008214473724365}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 606, "completion_tokens": 275, "duration": 6.842508316040039}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 479, "completion_tokens": 198, "duration": 6.479999303817749}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices.pop(0)\n    return result", "prompt_tokens": 601, "completion_tokens": 247, "duration": 6.698265790939331}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 704, "completion_tokens": 362, "duration": 6.887493848800659}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            return fibonacci(num - 1) + fibonacci(num - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 547, "completion_tokens": 328, "duration": 7.5828857421875}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 659, "completion_tokens": 218, "duration": 4.140324831008911}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n ** 2", "prompt_tokens": 693, "completion_tokens": 226, "duration": 4.685893535614014}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 572, "completion_tokens": 195, "duration": 7.551091432571411}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 679, "completion_tokens": 222, "duration": 5.592618942260742}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x:\n        result = str(x % base) + result\n        x //= base\n    \n    return result", "prompt_tokens": 460, "completion_tokens": 151, "duration": 3.4042580127716064}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 363, "completion_tokens": 110, "duration": 3.641983985900879}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    elif n == 2:\n        return c\n    for i in range(3, n+1):\n        d = a + b + c + d\n        a, b, c = b, c, d\n    return d", "prompt_tokens": 700, "completion_tokens": 275, "duration": 7.661356449127197}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 642, "completion_tokens": 371, "duration": 8.654916524887085}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 402, "completion_tokens": 96, "duration": 2.3658366203308105}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return (2 ** n) % p", "prompt_tokens": 539, "completion_tokens": 171, "duration": 3.650744676589966}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 573, "completion_tokens": 292, "duration": 6.5575339794158936}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n\n# Test an empty string\nassert remove_vowels('') == ''\n\n# Test a string with vowels and consonants\nassert remove_vowels(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n\n# Test a string with only vowels\nassert remove_vowels('aaaaa') == ''\n\n# Test a string with both lower and upper case vowels\nassert remove_vowels('aaBAA') == 'B'\n\n# Test a string with no vowels\nassert remove_vowels('zbcd') == 'zbcd'", "prompt_tokens": 547, "completion_tokens": 263, "duration": 8.816761255264282}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 482, "completion_tokens": 167, "duration": 3.6922647953033447}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 397, "completion_tokens": 129, "duration": 3.124450206756592}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 657, "completion_tokens": 222, "duration": 5.823407411575317}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 381, "completion_tokens": 132, "duration": 4.227940320968628}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 452, "completion_tokens": 143, "duration": 3.061688184738159}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 538, "completion_tokens": 246, "duration": 4.918002128601074}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 926, "completion_tokens": 326, "duration": 9.145840406417847}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    \n    return max(prime_factors)", "prompt_tokens": 416, "completion_tokens": 256, "duration": 6.95553731918335}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 522, "completion_tokens": 176, "duration": 5.255337953567505}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 448, "completion_tokens": 149, "duration": 3.278691530227661}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i*xs[i] for i in range(1, len(xs))] if len(xs) > 1 else []", "prompt_tokens": 1148, "completion_tokens": 586, "duration": 12.314013957977295}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 672, "completion_tokens": 263, "duration": 7.277346134185791}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouy'\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count", "prompt_tokens": 555, "completion_tokens": 164, "duration": 4.470486164093018}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]", "prompt_tokens": 502, "completion_tokens": 186, "duration": 5.508951187133789}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 543, "completion_tokens": 160, "duration": 8.841794967651367}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 740, "completion_tokens": 180, "duration": 5.734787940979004}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even = min(even_values)\n    min_even_index = arr.index(min_even)\n    return [min_even, min_even_index]", "prompt_tokens": 1169, "completion_tokens": 429, "duration": 7.159789800643921}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    result = -1\n    for key, value in frequency.items():\n        if key > 0 and value >= key and key > result:\n            result = key\n    \n    return result", "prompt_tokens": 691, "completion_tokens": 252, "duration": 4.492341756820679}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 614, "completion_tokens": 232, "duration": 6.342617988586426}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 612, "completion_tokens": 278, "duration": 8.007904529571533}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 791, "completion_tokens": 174, "duration": 6.8165507316589355}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 746, "completion_tokens": 303, "duration": 5.645505905151367}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 763, "completion_tokens": 282, "duration": 6.169604063034058}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count == 3:\n                return True\n    return False", "prompt_tokens": 525, "completion_tokens": 297, "duration": 5.092363357543945}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 626, "completion_tokens": 182, "duration": 6.239277601242065}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return int(a**(1/3))**3 == a", "prompt_tokens": 522, "completion_tokens": 142, "duration": 3.7084062099456787}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1099, "completion_tokens": 376, "duration": 6.3758461475372314}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"", "prompt_tokens": 579, "completion_tokens": 145, "duration": 4.963511228561401}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 604, "completion_tokens": 254, "duration": 4.985292673110962}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa >= 0.0:\n            result.append('D-')\n    return result", "prompt_tokens": 1199, "completion_tokens": 700, "duration": 11.846401691436768}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False", "prompt_tokens": 453, "completion_tokens": 217, "duration": 7.967312812805176}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10**(n-1) + 10**(n-1) - 10**(n-2)\n    return count", "prompt_tokens": 404, "completion_tokens": 175, "duration": 3.7456295490264893}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(N)[2:].count('1')", "prompt_tokens": 568, "completion_tokens": 139, "duration": 4.395605087280273}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 447, "completion_tokens": 193, "duration": 4.040818691253662}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 588, "completion_tokens": 184, "duration": 3.722996711730957}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda x: (x[0], -x[1]))\n\n# Test with a simple case where x exists in the list\nassert get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\n# Test with an empty list\nassert get_row([], 1) == []\n\n# Test with a case where x does not exist in the list\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]", "prompt_tokens": 2780, "completion_tokens": 1238, "duration": 20.664525270462036}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 857, "completion_tokens": 318, "duration": 9.935088396072388}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 556, "completion_tokens": 253, "duration": 6.1047656536102295}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 543, "completion_tokens": 150, "duration": 3.9593493938446045}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count(\". I\") + S.count(\"! I\") + S.count(\"? I\")", "prompt_tokens": 914, "completion_tokens": 346, "duration": 10.483317136764526}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 573, "completion_tokens": 174, "duration": 7.3265626430511475}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.lower() in 'aeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 540, "completion_tokens": 197, "duration": 5.854461669921875}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)", "prompt_tokens": 1062, "completion_tokens": 428, "duration": 8.423608303070068}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 702, "completion_tokens": 245, "duration": 7.567024230957031}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 639, "completion_tokens": 248, "duration": 5.680856943130493}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 503, "completion_tokens": 154, "duration": 3.1570868492126465}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 201, "duration": 5.363224744796753}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    return int(num + 0.5) if num > 0 else int(num - 0.5)", "prompt_tokens": 688, "completion_tokens": 232, "duration": 6.380182504653931}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 566, "completion_tokens": 180, "duration": 4.838813304901123}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.split()]\n\n# Test splitting words separated by commas\nassert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\n# Test splitting words separated by spaces\nassert words_string(\"One two three four five six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n# Test mixing words separated by commas and spaces\nassert words_string(\"Apple, banana, cherry grapefruit\") == [\"Apple\", \"banana\", \"cherry\", \"grapefruit\"]\n\n# Test empty input string\nassert words_string(\"\") == []\n\n# Test single word input\nassert words_string(\"Hello\") == [\"Hello\"]\n\n# Test input with extra spaces\nassert words_string(\"  Monday    Tuesday   Wednesday \") == [\"Monday\", \"Tuesday\", \"Wednesday\"]", "prompt_tokens": 586, "completion_tokens": 360, "duration": 8.255283117294312}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even", "prompt_tokens": 526, "completion_tokens": 209, "duration": 6.069677352905273}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 898, "completion_tokens": 483, "duration": 10.073017835617065}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 752, "completion_tokens": 189, "duration": 4.714197874069214}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [nums[num - 1] for num in filtered_arr]", "prompt_tokens": 949, "completion_tokens": 290, "duration": 6.978699684143066}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 627, "completion_tokens": 279, "duration": 5.991290807723999}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 747, "completion_tokens": 240, "duration": 7.545047998428345}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n    \n    return sum(1 for num in arr if sum_digits(num) > 0)", "prompt_tokens": 558, "completion_tokens": 174, "duration": 6.717644691467285}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return arr.index(sorted_arr[0]) >= len(arr) - 1", "prompt_tokens": 2063, "completion_tokens": 542, "duration": 11.481865644454956}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 810, "completion_tokens": 270, "duration": 6.479953765869141}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 660, "completion_tokens": 246, "duration": 4.819697141647339}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 662, "completion_tokens": 192, "duration": 4.876880884170532}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(1 for c in s if int(c) % 2 == 1)}n the str{s}ng {s} of the {i}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 1632, "completion_tokens": 617, "duration": 14.952035188674927}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    prefix_sum = [0]\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum - min(prefix_sum))\n        prefix_sum.append(curr_sum)\n    \n    return min_sum", "prompt_tokens": 572, "completion_tokens": 285, "duration": 5.876908540725708}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    wells = [sum(row) for row in grid]\n    max_wells = max(wells)\n    return math.ceil(max_wells / capacity) * len(grid) - sum(wells)", "prompt_tokens": 1669, "completion_tokens": 480, "duration": 9.41361665725708}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 750, "completion_tokens": 255, "duration": 6.761873960494995}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 732, "completion_tokens": 254, "duration": 7.527554273605347}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 640, "completion_tokens": 254, "duration": 7.539004564285278}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    if stack:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 700, "completion_tokens": 249, "duration": 7.107600450515747}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 896, "completion_tokens": 300, "duration": 8.627068996429443}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 542, "completion_tokens": 204, "duration": 4.2046613693237305}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 700, "completion_tokens": 292, "duration": 6.475332736968994}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 839, "completion_tokens": 268, "duration": 7.743758201599121}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True", "prompt_tokens": 845, "completion_tokens": 284, "duration": 5.192990064620972}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])", "prompt_tokens": 617, "completion_tokens": 215, "duration": 6.607213735580444}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "prompt_tokens": 954, "completion_tokens": 326, "duration": 10.139815092086792}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n\n    if length <= 1:\n        return \"NO\"\n    \n    if length == 2:\n        return \"YES\"\n    \n    if length % 2 == 0:\n        return \"NO\"\n    \n    for i in range(3, int(length ** 0.5) + 1, 2):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 805, "completion_tokens": 263, "duration": 5.226822376251221}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    result = 1\n    sign_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        result *= abs(num)\n        sign_sum += sign\n        \n    return result * sign_sum", "prompt_tokens": 502, "completion_tokens": 153, "duration": 3.827120304107666}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def backtrack(curr_path, visited):\n        if len(curr_path) == k:\n            return curr_path\n\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if (i, j) not in visited:\n                    visited.add((i, j))\n                    new_path = backtrack(curr_path + [grid[i][j]], visited.copy())\n                    if new_path:\n                        return new_path\n                    visited.remove((i, j))\n\n    return backtrack([], set())", "prompt_tokens": 2911, "completion_tokens": 1071, "duration": 18.861430168151855}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    if n == 0:\n        return tribonacci\n\n    tribonacci.append(3)\n    if n == 1:\n        return tribonacci\n\n    tribonacci.append(4)\n    if n == 2:\n        return tribonacci\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n\n    return tribonacci", "prompt_tokens": 945, "completion_tokens": 423, "duration": 9.966350078582764}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n    return product", "prompt_tokens": 455, "completion_tokens": 176, "duration": 5.721067428588867}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening = 0\n    for char in string:\n        if char == '[':\n            opening += 1\n        elif char == ']' and opening > 0:\n            opening -= 1\n    return opening != 0", "prompt_tokens": 994, "completion_tokens": 378, "duration": 9.86646032333374}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 848, "completion_tokens": 376, "duration": 9.970975637435913}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 611, "completion_tokens": 193, "duration": 3.5476224422454834}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 562, "completion_tokens": 225, "duration": 6.891565322875977}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n\n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 673, "completion_tokens": 299, "duration": 7.415463924407959}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if isinstance(a, str) and ',' in a:\n            a = a.replace(',', '.')\n        if isinstance(b, str) and ',' in b:\n            b = b.replace(',', '.')\n    if a == b:\n        return None\n    return max(a, b)", "prompt_tokens": 585, "completion_tokens": 201, "duration": 4.421828031539917}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n > 0 and n % 4 == 0", "prompt_tokens": 917, "completion_tokens": 443, "duration": 10.517369508743286}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n+1):\n            result *= i\n        return result * special_factorial(n-1)", "prompt_tokens": 556, "completion_tokens": 241, "duration": 6.1790549755096436}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    return text", "prompt_tokens": 499, "completion_tokens": 141, "duration": 5.721294403076172}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    if file_name.count('.') != 1:\n        return 'No'\n\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    if sum(1 for char in file_name if char.isdigit()) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 837, "completion_tokens": 336, "duration": 9.584693670272827}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n    return result", "prompt_tokens": 728, "completion_tokens": 273, "duration": 7.41526460647583}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 642, "completion_tokens": 259, "duration": 5.183714866638184}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 582, "completion_tokens": 151, "duration": 3.4440300464630127}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(map(int, str(abs(n))))\n    \n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 661, "completion_tokens": 292, "duration": 7.824448347091675}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(num):\n        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0\n\n    return len([num for num in nums if num > 10 and is_odd(num)])", "prompt_tokens": 1268, "completion_tokens": 701, "duration": 14.64463186264038}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 786, "completion_tokens": 366, "duration": 7.005317687988281}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(sorted(planets[start+1:end], key=lambda x: planets.index(x)))", "prompt_tokens": 791, "completion_tokens": 304, "duration": 9.444563627243042}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 698, "completion_tokens": 170, "duration": 4.874156713485718}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 500, "completion_tokens": 194, "duration": 6.636846303939819}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0)\n\n# Test with a list containing both odd and even positive integers\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with a list containing only negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test with a list containing a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Test with a list containing only zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0", "prompt_tokens": 698, "completion_tokens": 401, "duration": 8.853383302688599}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 893, "completion_tokens": 290, "duration": 8.769373655319214}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 911, "completion_tokens": 276, "duration": 6.863638877868652}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    return any(is_rotation(b, a[i:] + a[:i]) for i in range(len(a)))", "prompt_tokens": 1010, "completion_tokens": 411, "duration": 8.706468343734741}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for i in str(abs(num)) if int(i) % 2 == 0)\n    odd_count = sum(1 for i in str(abs(num)) if int(i) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 445, "completion_tokens": 199, "duration": 4.473553895950317}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"Number out of range\"\n    \n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n        \n    return roman_num.lower()", "prompt_tokens": 516, "completion_tokens": 318, "duration": 6.61508321762085}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "prompt_tokens": 557, "completion_tokens": 220, "duration": 5.522754907608032}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 566, "completion_tokens": 230, "duration": 6.668856620788574}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_carrots, remaining_carrots]", "prompt_tokens": 876, "completion_tokens": 185, "duration": 5.2966344356536865}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result", "prompt_tokens": 791, "completion_tokens": 309, "duration": 5.194394826889038}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return result", "prompt_tokens": 562, "completion_tokens": 229, "duration": 6.966036796569824}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 446, "completion_tokens": 142, "duration": 5.440257787704468}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 625, "completion_tokens": 268, "duration": 4.824965715408325}
