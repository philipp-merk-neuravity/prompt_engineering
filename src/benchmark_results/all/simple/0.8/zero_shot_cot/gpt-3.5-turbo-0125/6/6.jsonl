{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the sorted list and check the difference between adjacent elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    \n    return False", "prompt_tokens": 163, "completion_tokens": 83, "duration": 2.1767725944519043}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separated groups\n    result = []\n    \n    # Initialize a variable to store the current group\n    current_group = \"\"\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # Add the character to the current group\n        current_group += char\n        \n        # If the current group is balanced, add it to the result list\n        if current_group.count(\"(\") == current_group.count(\")\"):\n            result.append(current_group)\n            current_group = \"\"\n    \n    return result", "prompt_tokens": 154, "completion_tokens": 152, "duration": 3.1390116214752197}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    # Calculate the integer part of the number\n    integer_part = int(number)\n    \n    # Calculate the decimal part of the number\n    decimal_part = number - integer_part\n    \n    return decimal_part", "prompt_tokens": 125, "completion_tokens": 56, "duration": 1.6482536792755127}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    # Initialize balance as zero\n    balance = 0\n    \n    # Iterate through each operation\n    for operation in operations:\n        # Update the balance based on the operation\n        balance += operation\n        \n        # Check if the balance falls below zero\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 158, "completion_tokens": 82, "duration": 1.9097189903259277}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute difference between each element and the mean\n    absolute_diff = [abs(num - mean) for num in numbers]\n    \n    # Calculate the mean absolute deviation\n    mad = sum(absolute_diff) / len(absolute_diff)\n    \n    return mad", "prompt_tokens": 156, "completion_tokens": 94, "duration": 2.238553762435913}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the input list\n    for num in numbers:\n        # Append the current number and delimiter to the result list\n        result.extend([num, delimeter])\n    \n    # Remove the last delimiter from the result list\n    result.pop()\n    \n    return result", "prompt_tokens": 131, "completion_tokens": 94, "duration": 2.245887517929077}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    # Split the input string by spaces to get individual groups\n    groups = paren_string.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through each group\n    for group in groups:\n        # Initialize variables to keep track of current level and maximum level\n        current_level = 0\n        max_level = 0\n        \n        # Iterate through each character in the group\n        for char in group:\n            # Update current level based on opening and closing parentheses\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                current_level -= 1\n                \n            # Update max_level if current level is greater\n            max_level = max(max_level, current_level)\n        \n        # Append the maximum level of the group to the result list\n        result.append(max_level)\n    \n    return result", "prompt_tokens": 151, "completion_tokens": 199, "duration": 3.346379280090332}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Create an empty list to store strings that contain the given substring\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the substring is in the current string\n        if substring in string:\n            # If the substring is present, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of strings that contain the given substring\n    return filtered_strings", "prompt_tokens": 132, "completion_tokens": 119, "duration": 2.40470814704895}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize variables to store sum and product\n    sum_result = 0\n    product_result = 1\n    \n    # Calculate sum and product of numbers\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    # Return a tuple of sum and product\n    return sum_result, product_result", "prompt_tokens": 149, "completion_tokens": 89, "duration": 2.1662747859954834}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    # initialize an empty list to store the rolling maximums\n    result = []\n    \n    # initialize a deque to store the indices of numbers in descending order\n    window = deque()\n    \n    # iterate over the numbers list\n    for i, num in enumerate(numbers):\n        # remove indices of elements that are no longer in the window\n        while window and window[0] < i - 2:\n            window.popleft()\n        \n        # remove elements that are smaller than the current number\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        \n        # add the current index to the window\n        window.append(i)\n        \n        # add the rolling maximum to the result list\n        result.append(numbers[window[0]])\n    \n    return result", "prompt_tokens": 139, "completion_tokens": 177, "duration": 3.254733085632324}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "prompt_tokens": 182, "completion_tokens": 179, "duration": 3.071323871612549}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    # Convert the input strings to integers\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    \n    # Perform XOR operation on the integers\n    result = int_a ^ int_b\n    \n    # Convert the result back to binary string\n    result_str = bin(result)[2:]\n    \n    return result_str", "prompt_tokens": 115, "completion_tokens": 91, "duration": 2.160360813140869}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    # Return None if the input list is empty\n    if not strings:\n        return None\n    \n    # Initialize variables to keep track of the longest string and its length\n    longest_str = strings[0]\n    longest_len = len(strings[0])\n    \n    # Iterate through the list of strings to find the longest one\n    for string in strings[1:]:\n        if len(string) > longest_len:\n            longest_str = string\n            longest_len = len(string)\n    \n    return longest_str", "prompt_tokens": 141, "completion_tokens": 120, "duration": 2.537923574447632}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    # Implement the Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 110, "completion_tokens": 53, "duration": 1.6887485980987549}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate through the string to generate prefixes\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    \n    return prefixes", "prompt_tokens": 98, "completion_tokens": 68, "duration": 1.7314832210540771}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    # Create a list of numbers from 0 to n using list comprehension\n    numbers = [str(i) for i in range(n + 1)]\n    \n    # Join the numbers with space delimiter\n    result = ' '.join(numbers)\n    \n    return result", "prompt_tokens": 108, "completion_tokens": 69, "duration": 1.9607093334197998}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n    \n    # Use a set to store unique characters\n    unique_chars = set(string)\n    \n    # Return the length of the set which gives the count of distinct characters\n    return len(unique_chars)", "prompt_tokens": 110, "completion_tokens": 75, "duration": 2.0686659812927246}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    # Create a dictionary to map musical notes to their corresponding beat duration\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the input music_string into individual notes\n    notes = music_string.split()\n    \n    # Map each note to its beat duration using the dictionary and store the result in a list\n    beats = [note_duration[note] for note in notes]\n    \n    return beats", "prompt_tokens": 211, "completion_tokens": 114, "duration": 2.4106907844543457}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    # return 0 if the substring is empty\n    if not substring:\n        return 0\n\n    # initialize count variable to store the number of occurrences\n    count = 0\n\n    # iterate over the string with a sliding window approach\n    for i in range(len(string) - len(substring) + 1):\n        # check if the substring matches the current window\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count", "prompt_tokens": 128, "completion_tokens": 120, "duration": 2.4094581604003906}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map number words to their numerical value\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Split the input string into a list of individual number words\n    number_list = numbers.split()\n    \n    # Sort the list of number words based on their numerical values using the dictionary\n    sorted_numbers = sorted(number_list, key=lambda x: num_dict[x])\n    \n    # Join the sorted number words back into a string\n    sorted_string = ' '.join(sorted_numbers)\n    \n    return sorted_string", "prompt_tokens": 144, "completion_tokens": 177, "duration": 4.939394235610962}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize variables to hold the closest numbers and their difference\n    closest_numbers = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    \n    # Iterate through the list to find the closest pair of numbers\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            closest_numbers = (numbers[i], numbers[i + 1])\n            min_diff = diff\n    \n    return closest_numbers\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))", "prompt_tokens": 205, "completion_tokens": 223, "duration": 4.962636947631836}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    # Find the minimum and maximum values in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # Calculate the range of the numbers\n    range_nums = max_num - min_num\n    \n    # Apply linear transformation to rescale the numbers to [0, 1]\n    rescaled_numbers = [(num - min_num) / range_nums for num in numbers]\n    \n    return rescaled_numbers", "prompt_tokens": 162, "completion_tokens": 107, "duration": 2.4160492420196533}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store integers\n    integers = []\n    \n    # Iterate over each value in the given list\n    for value in values:\n        # Check if the value is an integer\n        if isinstance(value, int):\n            # If it is an integer, add it to the integers list\n            integers.append(value)\n    \n    # Return the list of integers\n    return integers", "prompt_tokens": 130, "completion_tokens": 101, "duration": 2.7426438331604004}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    # Return the length of the given string\n    return len(string)", "prompt_tokens": 83, "completion_tokens": 28, "duration": 1.2459239959716797}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    # Start checking for divisors from n-1 downwards\n    for i in range(n-1, 0, -1):\n        # If n is divisible by the current number, return it as the largest divisor\n        if n % i == 0:\n            return i", "prompt_tokens": 92, "completion_tokens": 74, "duration": 2.030386447906494}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    # Initialize an empty list to store the prime factors\n    factors = []\n    \n    # Start dividing n by 2 until it is no longer divisible by 2\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check for other prime factors starting from 3\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    \n    # If n is still greater than 2, it must be a prime number\n    if n > 2:\n        factors.append(n)\n    \n    return factors", "prompt_tokens": 165, "completion_tokens": 163, "duration": 3.4011712074279785}
{"task_id": "HumanEval/26", "generated_code": "from collections import Counter  # Import Counter from collections module\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:  # Define the function with input parameter and return type\n    counts = Counter(numbers)  # Count the occurrences of each element in the list\n    return [num for num in numbers if counts[num] == 1]  # Return only the elements that occur once in the list", "prompt_tokens": 123, "completion_tokens": 82, "duration": 2.1434450149536133}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert uppercase character to lowercase and add to the result\n            result += char.lower()\n        # Check if the character is lowercase\n        elif char.islower():\n            # Convert lowercase character to uppercase and add to the result\n            result += char.upper()\n        else:\n            # If the character is not a letter, add it to the result without changing\n            result += char\n    \n    # Return the final result after flipping the case of characters\n    return result", "prompt_tokens": 88, "completion_tokens": 158, "duration": 3.409874439239502}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Join the list of strings into a single string using the join method\n    return ''.join(strings)", "prompt_tokens": 96, "completion_tokens": 37, "duration": 1.3683123588562012}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to store strings that start with the prefix\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for s in strings:\n        # Check if the string starts with the given prefix\n        if s.startswith(prefix):\n            # If it does, add it to the filtered list\n            filtered_strings.append(s)\n    \n    # Return the list of filtered strings\n    return filtered_strings", "prompt_tokens": 126, "completion_tokens": 111, "duration": 4.46883487701416}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    # Initialize an empty list to store positive numbers\n    positive_numbers = []\n    \n    # Iterate through the list\n    for num in l:\n        # Check if the number is positive\n        if num > 0:\n            # Add the positive number to the list\n            positive_numbers.append(num)\n    \n    return positive_numbers", "prompt_tokens": 153, "completion_tokens": 79, "duration": 2.0646183490753174}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 139, "completion_tokens": 57, "duration": 1.6277291774749756}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    for i in range(len(xs)):\n        if xs[i] == largest_non_zero_coeff:\n            break\n    \n    a = xs[i]\n    b = xs[i+1]\n    \n    if a == 0:\n        a, b = b, a\n    \n    return -b / a", "prompt_tokens": 298, "completion_tokens": 120, "duration": 2.63382887840271}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    non_divisible_by_three = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = []\n    j = 0\n    k = 0\n    \n    for i in range(len(l)):\n        if i % 3 != 0:\n            result.append(non_divisible_by_three[j])\n            j += 1\n        else:\n            result.append(sorted_divisible_by_three[k])\n            k += 1\n            \n    return result", "prompt_tokens": 190, "completion_tokens": 150, "duration": 2.8113934993743896}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    # Step 1: Convert the list to a set to remove duplicate elements\n    unique_set = set(l)\n    \n    # Step 2: Sort the set elements\n    unique_sorted = sorted(unique_set)\n    \n    return unique_sorted", "prompt_tokens": 113, "completion_tokens": 60, "duration": 1.757014274597168}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    # Return the last element of the sorted list\n    return l[-1]", "prompt_tokens": 122, "completion_tokens": 37, "duration": 1.5394706726074219}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    # initialize count variable to keep track of the number of times 7 appears\n    count = 0\n    # iterate over integers less than n\n    for i in range(n):\n        # check if the integer is divisible by 11 or 13 and contains the digit 7\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            # increment count if the conditions are met\n            count += 1\n    # return the final count\n    return count", "prompt_tokens": 119, "completion_tokens": 126, "duration": 2.5709917545318604}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Create a list to store the sorted even index values\n    sorted_even = sorted([x for x in l[::2]])\n    \n    # Iterate over the indices of the original list\n    for i in range(len(l)):\n        # If the index is even, replace the value with the sorted value\n        if i % 2 == 0:\n            l[i] = sorted_even.pop(0)\n    \n    return l", "prompt_tokens": 163, "completion_tokens": 101, "duration": 1.9073562622070312}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 198, "completion_tokens": 162, "duration": 2.960934638977051}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    # Initialize Fibonacci sequence with first two numbers\n    fib_sequence = [0, 1]\n    \n    # Iterate to generate Fibonacci numbers up to n-th number\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    \n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Find the n-th Fibonacci number that is prime\n    for num in fib_sequence:\n        if is_prime(num):\n            n -= 1\n            if n == 0:\n                return num", "prompt_tokens": 137, "completion_tokens": 175, "duration": 3.2162840366363525}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    \n    # Loop through each element in the list\n    for i in range(len(l) - 2):\n        # Set left and right pointers\n        left = i + 1\n        right = len(l) - 1\n        \n        # While left pointer is less than right pointer\n        while left < right:\n            # Calculate the sum of three elements\n            total = l[i] + l[left] + l[right]\n            \n            # If sum is zero, return True\n            if total == 0:\n                return True\n            # If sum is less than zero, move left pointer to the right\n            elif total < 0:\n                left += 1\n            # If sum is greater than zero, move right pointer to the left\n            else:\n                right -= 1\n    \n    # If no such triplet found, return False\n    return False", "prompt_tokens": 199, "completion_tokens": 206, "duration": 5.916952848434448}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    # Calculate the number of collisions for n cars moving towards each other\n    return n * (n - 1) // 2", "prompt_tokens": 191, "completion_tokens": 41, "duration": 1.192157506942749}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    # Create an empty list to store the incremented values\n    result = []\n    \n    # Iterate through each element in the input list\n    for num in l:\n        # Increment the element by 1 and append it to the result list\n        result.append(num + 1)\n    \n    # Return the result list\n    return result", "prompt_tokens": 148, "completion_tokens": 81, "duration": 2.270123243331909}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    # Iterate over each element in the list\n    for i in range(len(l)):\n        # Check if the negative of the current element is present in the list\n        if -l[i] in l[i+1:]:\n            return True\n    return False", "prompt_tokens": 197, "completion_tokens": 65, "duration": 1.465374231338501}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    # Convert x to the specified base\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 131, "completion_tokens": 55, "duration": 4.049524545669556}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    # Calculate area of the triangle using the formula: 0.5 * base * height\n    area = 0.5 * a * h\n    # Return the calculated area\n    return area", "prompt_tokens": 86, "completion_tokens": 54, "duration": 1.8023087978363037}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    # Initialize a list to store the first 4 elements of the Fib4 sequence\n    fib4_list = [0, 0, 2, 0]\n    \n    # Loop to calculate the Fib4 sequence up to the n-th element\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    \n    # Return the n-th element of the Fib4 sequence\n    return fib4_list[n]", "prompt_tokens": 211, "completion_tokens": 133, "duration": 4.178825855255127}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    # Sort the list in ascending order\n    l.sort()\n    \n    # Find the length of the list\n    n = len(l)\n    \n    # Check if the length of the list is odd\n    if n % 2 != 0:\n        return l[n//2]\n    else:\n        # If the length of the list is even, return the average of the middle two elements\n        return (l[n//2 - 1] + l[n//2]) / 2.0", "prompt_tokens": 115, "completion_tokens": 110, "duration": 2.356680154800415}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    # Remove whitespaces and convert text to lowercase\n    text = text.replace(\" \", \"\").lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]", "prompt_tokens": 111, "completion_tokens": 54, "duration": 1.291614055633545}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    # Calculate 2^n\n    result = 2**n\n    # Calculate the modulo of 2^n by p\n    result = result % p\n    return result", "prompt_tokens": 145, "completion_tokens": 53, "duration": 1.2320685386657715}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    # Convert each character in the input string to its original character by shifting back 5 in the alphabet\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 130, "completion_tokens": 65, "duration": 1.7005209922790527}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is not a vowel\n        if char.lower() not in \"aeiou\":\n            # If the character is not a vowel, add it to the result\n            result += char\n            \n    return result", "prompt_tokens": 162, "completion_tokens": 91, "duration": 4.400955677032471}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    # Iterate through each element in the list\n    for num in l:\n        # Check if the number is greater than or equal to the threshold\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 119, "completion_tokens": 55, "duration": 3.2047312259674072}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    # return the sum of x and y\n    return x + y", "prompt_tokens": 93, "completion_tokens": 30, "duration": 0.8863906860351562}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    # Convert strings to sets of characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets are equal\n    return set_s0 == set_s1", "prompt_tokens": 180, "completion_tokens": 64, "duration": 3.514564275741577}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    # Base case: return 0 if n is 0\n    if n == 0:\n        return 0\n    # Base case: return 1 if n is 1\n    if n == 1:\n        return 1\n    \n    # Initialize variables for the first two Fibonacci numbers\n    a, b = 0, 1\n    \n    # Loop to calculate the n-th Fibonacci number\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n        \n    return b", "prompt_tokens": 92, "completion_tokens": 123, "duration": 4.168696641921997}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    # Initialize a counter variable to keep track of the number of opening brackets\n    count = 0\n    \n    # Iterate over each character in the input string\n    for bracket in brackets:\n        # If the character is an opening bracket, increment the counter\n        if bracket == \"<\":\n            count += 1\n        # If the character is a closing bracket and there is at least one opening bracket, decrement the counter\n        elif bracket == \">\" and count > 0:\n            count -= 1\n        # If the character is a closing bracket and there are no opening brackets, return False\n        else:\n            return False\n    \n    # If the counter is 0 at the end, all opening brackets have corresponding closing brackets\n    return count == 0", "prompt_tokens": 132, "completion_tokens": 174, "duration": 4.595019102096558}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    # Check if the list is sorted in increasing order\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    # Check if the list is sorted in decreasing order\n    elif all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 127, "completion_tokens": 93, "duration": 3.904975652694702}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    # Find the common elements between the two lists\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements and return as a list\n    return sorted(common_elements)", "prompt_tokens": 154, "completion_tokens": 59, "duration": 3.519634962081909}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Find the largest prime factor\n    i = 2\n    while i <= n / 2:\n        if n % i == 0 and is_prime(n / i):\n            return n // i\n        i += 1", "prompt_tokens": 103, "completion_tokens": 127, "duration": 4.829967498779297}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    # Calculate the sum of numbers from 1 to n\n    return n * (n + 1) // 2", "prompt_tokens": 134, "completion_tokens": 34, "duration": 3.4744553565979004}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    # Create a stack to keep track of opening brackets\n    stack = []\n    \n    # Iterate through each bracket in the input string\n    for bracket in brackets:\n        if bracket == '(':\n            # If an opening bracket is found, push it onto the stack\n            stack.append('(')\n        elif bracket == ')':\n            # If a closing bracket is found and the stack is not empty, pop the top element from the stack\n            if stack:\n                stack.pop()\n            else:\n                return False  # If the stack is empty and a closing bracket is found, return False\n    \n    # If the stack is empty after iterating through all brackets, return True\n    return len(stack) == 0", "prompt_tokens": 129, "completion_tokens": 159, "duration": 4.846222162246704}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the coefficients of the polynomial\n    for i in range(1, len(xs)):\n        # Calculate the derivative of each term and append it to the result list\n        result.append(xs[i] * i)\n    \n    return result", "prompt_tokens": 148, "completion_tokens": 77, "duration": 3.6050591468811035}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 189, "completion_tokens": 97, "duration": 3.8643319606781006}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    # Initialize a variable to store the count of vowels\n    count = 0\n    # Define vowels including 'y' only when it is at the end of the word\n    vowels = 'aeiou'\n    # Convert the input string to lowercase for case-insensitivity\n    s = s.lower()\n    # Check each character in the string\n    for char in s:\n        # If the character is a vowel, increment the count\n        if char in vowels or (char == 'y' and s.index(char) == len(s) - 1):\n            count += 1\n    # Return the total count of vowels\n    return count", "prompt_tokens": 166, "completion_tokens": 144, "duration": 5.942665338516235}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    # Convert the integer x to a string\n    x_str = str(x)\n    \n    # Calculate the actual shift value\n    shift = shift % len(x_str)\n    \n    # Perform the circular shift by slicing and concatenating the string\n    result = x_str[-shift:] + x_str[:-shift]\n    \n    # Return the result\n    return result", "prompt_tokens": 122, "completion_tokens": 81, "duration": 3.6836392879486084}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    # Initialize a variable to store the sum of ASCII values\n    sum_ascii = 0\n    \n    # Iterate through each character in the input string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to sum_ascii\n            sum_ascii += ord(char)\n    \n    # Return the sum of ASCII values\n    return sum_ascii", "prompt_tokens": 152, "completion_tokens": 102, "duration": 2.3629791736602783}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    # Split the string to extract the numbers of apples and oranges\n    s_list = s.split()\n    \n    # Convert the numbers of apples and oranges to integers\n    apples = int(s_list[0])\n    oranges = int(s_list[3])\n    \n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    \n    return mango", "prompt_tokens": 250, "completion_tokens": 86, "duration": 1.9064412117004395}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    # Create a list to store even values\n    even_values = []\n    \n    # Create a dictionary to store even values and their indexes\n    even_values_dict = {}\n    \n    # Iterate through the array and find even values\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_values.append(arr[i])\n            if arr[i] not in even_values_dict:\n                even_values_dict[arr[i]] = i\n    \n    # If there are no even values, return an empty list\n    if len(even_values) == 0:\n        return []\n    \n    # Find the smallest even value\n    smallest_even = min(even_values)\n    \n    # Return the smallest even value and its index\n    return [smallest_even, even_values_dict[smallest_even]]", "prompt_tokens": 352, "completion_tokens": 177, "duration": 4.656872034072876}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    \n    # Calculate the frequency of each integer in the list\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Iterate through the dictionary and find the greatest integer that meets the condition\n    result = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 205, "completion_tokens": 132, "duration": 4.351059675216675}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 164, "completion_tokens": 48, "duration": 1.3463473320007324}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 161, "completion_tokens": 139, "duration": 4.5668253898620605}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if the list q is balanced (palindromic)\n    if q == q[::-1]:\n        # Check if the sum of elements in q is less than or equal to the maximum weight w\n        if sum(q) <= w:\n            return True\n    return False", "prompt_tokens": 270, "completion_tokens": 73, "duration": 3.467487096786499}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    # Initialize a variable to keep track of the number of changes needed\n    changes = 0\n    \n    # Loop through the first half of the array\n    for i in range(len(arr) // 2):\n        # Compare elements from the start and end of the array\n        if arr[i] != arr[len(arr) - 1 - i]:\n            # Increment the changes needed by the absolute difference between the elements\n            changes += abs(arr[i] - arr[len(arr) - 1 - i])\n    \n    # Return the total number of changes needed\n    return changes", "prompt_tokens": 197, "completion_tokens": 129, "duration": 4.53022027015686}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum([len(word) for word in lst1])  # calculate total number of characters in lst1\n    total_chars_lst2 = sum([len(word) for word in lst2])  # calculate total number of characters in lst2\n    \n    if total_chars_lst1 < total_chars_lst2:  # if total characters in lst1 is less than total characters in lst2\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 233, "completion_tokens": 111, "duration": 4.32919979095459}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find 3 prime factors that multiply to a\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            a //= i\n    return count == 3 and is_prime(a)\n\n# Test the function\nprint(is_multiply_prime(30))", "prompt_tokens": 119, "completion_tokens": 151, "duration": 2.7245891094207764}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    # Check if x equals 1\n    if x == 1:\n        return True\n    \n    # Check if n equals 1\n    if n == 1:\n        return False\n    \n    # Initialize a variable to keep track of the result\n    result = x\n    \n    # Keep dividing the result by n until it becomes less than n\n    while result > n:\n        result = result / n\n        \n    # Check if the final result is 1, which means x is a simple power of n\n    return result == 1", "prompt_tokens": 182, "completion_tokens": 125, "duration": 4.505083322525024}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    # Check if the cube root of a is an integer\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 150, "completion_tokens": 46, "duration": 2.915022373199463}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Create a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input hexadecimal number\n    for digit in num:\n        # Check if the character is a prime hexadecimal digit\n        if digit in prime_hex_digits:\n            prime_count += 1\n    \n    return prime_count", "prompt_tokens": 339, "completion_tokens": 176, "duration": 5.2853734493255615}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    # Convert decimal to binary\n    binary = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary number\n    result = 'db' + binary + 'db'\n    \n    return result", "prompt_tokens": 179, "completion_tokens": 59, "duration": 3.5512497425079346}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate over the string from index 0 to len(s)-3\n    for i in range(len(s) - 2):\n        # Check if the current character and the next two characters are distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 161, "completion_tokens": 122, "duration": 4.174784183502197}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    # Create an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over each GPA in the list of grades\n    for gpa in grades:\n        # Determine the letter grade based on the GPA\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades", "prompt_tokens": 310, "completion_tokens": 283, "duration": 6.109354496002197}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    # Check if the length of the string is less than 2\n    if len(string) < 2:\n        return False\n    \n    # Check if the length of the string is a prime number\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 121, "completion_tokens": 87, "duration": 3.562220335006714}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0  # Initialize a count variable to keep track of numbers that start or end with 1\n    count += 9  # There are 9 possibilities for the first digit (1-9)\n    count += 10**(n-1) - 1  # There are 10**(n-1) possibilities for numbers ending with 1\n    return count", "prompt_tokens": 84, "completion_tokens": 91, "duration": 3.9305059909820557}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the integer N to binary format\n    binary_num = bin(N)[2:]\n    \n    # Calculate the sum of digits in the binary number\n    sum_of_digits = sum(int(digit) for digit in binary_num)\n    \n    # Convert the sum of digits to binary format and return\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 173, "completion_tokens": 79, "duration": 3.308520793914795}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    # Filter the elements that are even and at odd indices\n    even_odd_indices = [num for index, num in enumerate(lst) if num % 2 == 0 and index % 2 != 0]\n    \n    # Calculate the sum of the filtered elements\n    result = sum(even_odd_indices)\n    \n    return result", "prompt_tokens": 95, "completion_tokens": 78, "duration": 3.4959537982940674}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()  # split the input string into a list of words\n    sorted_words = [''.join(sorted(word)) for word in words]  # sort characters in each word\n    result = ' '.join(sorted_words)  # join the sorted words back into a string\n    return result", "prompt_tokens": 170, "completion_tokens": 74, "duration": 2.1167633533477783}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    result = []\n    \n    # Iterate over each row in the list with index\n    for i, row in enumerate(lst):\n        # Iterate over each element in the row with index\n        for j, value in enumerate(row):\n            # If the element is equal to x, add the coordinate to the result list\n            if value == x:\n                result.append((i, j))\n    \n    # Sort the result list by row in ascending order and by column in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    # Return the sorted result list\n    return result", "prompt_tokens": 299, "completion_tokens": 150, "duration": 3.1739397048950195}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array", "prompt_tokens": 243, "completion_tokens": 58, "duration": 1.669316291809082}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Create an empty string to store the encrypted message\n    encrypted_message = ''\n    \n    # Rotate the alphabet by 2 multiplied to two places\n    rotated_alphabet = alphabet[4:] + alphabet[:4]\n    \n    # Loop through each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            # Encrypt the character by finding the corresponding character in the rotated alphabet\n            encrypted_char = rotated_alphabet[index]\n            # Add the encrypted character to the encrypted message\n            encrypted_message += encrypted_char\n        else:\n            # If the character is not a letter, add it as it is to the encrypted message\n            encrypted_message += char\n    \n    # Return the final encrypted message\n    return encrypted_message", "prompt_tokens": 150, "completion_tokens": 203, "duration": 4.527167081832886}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check if the length of the list is less than 2\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Return the second element in the sorted list\n    return sorted_lst[1]", "prompt_tokens": 164, "completion_tokens": 74, "duration": 2.061222791671753}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Split the string into sentences by delimiters '.', '?' or '!'\n    sentences = S.split(\".\")\n    sentences += S.split(\"?\")\n    sentences += S.split(\"!\")\n    \n    # Count the number of sentences that start with \"I\"\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    \n    return count", "prompt_tokens": 147, "completion_tokens": 91, "duration": 4.008277893066406}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check the conditions for the numbers\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 175, "completion_tokens": 76, "duration": 2.0412232875823975}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    # Define vowels and their replacements\n    vowels = 'aeiou'\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    \n    # Initialize an empty encoded message\n    encoded_message = ''\n    \n    # Encode the message by swapping case and replacing vowels\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += replacements.get(char.lower(), char)\n        else:\n            encoded_message += char.swapcase()\n    \n    return encoded_message", "prompt_tokens": 149, "completion_tokens": 125, "duration": 2.589595317840576}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    # Define a function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Define a function to calculate the sum of digits of a number\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    # Filter the prime numbers from the list\n    primes = [num for num in lst if is_prime(num)]\n    \n    # If there are no prime numbers in the list, return 0\n    if not primes:\n        return 0\n    \n    # Find the largest prime number\n    max_prime = max(primes)\n    \n    # Calculate and return the sum of digits of the largest prime number\n    return sum_digits(max_prime)", "prompt_tokens": 326, "completion_tokens": 204, "duration": 3.6130058765411377}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    # Check if the dictionary is empty\n    if len(dict) == 0:\n        return False\n    \n    # Get the set of keys\n    keys = set(dict.keys())\n    \n    # Check if all keys are in lower case\n    if all(key.islower() for key in keys):\n        return True\n    \n    # Check if all keys are in upper case\n    if all(key.isupper() for key in keys):\n        return True\n    \n    return False", "prompt_tokens": 209, "completion_tokens": 101, "duration": 2.3702523708343506}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    # function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # create a list to store prime numbers\n    primes = []\n    \n    # iterate through numbers less than n and add prime numbers to the list\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes", "prompt_tokens": 185, "completion_tokens": 132, "duration": 2.9517836570739746}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a: int, b: int) -> int:\n    # Extract the unit digits of both numbers\n    digit_a = abs(a) % 10\n    digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    result = digit_a * digit_b\n    \n    return result", "prompt_tokens": 138, "completion_tokens": 72, "duration": 2.252687692642212}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    # Initialize a counter to keep track of uppercase vowels in even indices\n    count = 0\n    \n    # Define a set of uppercase vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Iterate through the even indices of the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the current even index is an uppercase vowel\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 112, "completion_tokens": 122, "duration": 2.4227614402770996}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    # Convert the value to a float\n    value = float(value)\n    \n    # Check if the value is positive or negative\n    if value >= 0:\n        # Round the value away from zero using math.ceil\n        return int(value + 0.5)\n    else:\n        # Round the value away from zero using math.floor\n        return int(value - 0.5)", "prompt_tokens": 196, "completion_tokens": 90, "duration": 5.7302680015563965}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]  # start with n stones in the first level\n    for i in range(1, n):  # iterate from 1 to n-1\n        if n % 2 == 0:  # if n is even\n            n += 2  # add 2 to get the next even number\n        else:\n            n += 1  # add 1 to get the next odd number\n        stones.append(n)  # add the next level of stones to the list\n    return stones", "prompt_tokens": 172, "completion_tokens": 124, "duration": 3.1089415550231934}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    # Split the string by commas and spaces\n    words_list = s.replace(',', ' ').split()\n    \n    return words_list", "prompt_tokens": 156, "completion_tokens": 36, "duration": 1.5303661823272705}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x: int, y: int) -> int:\n    # Iterate from y to x inclusive\n    for i in range(y, x - 1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    # If no even number found, return -1\n    return -1", "prompt_tokens": 134, "completion_tokens": 82, "duration": 2.0570790767669678}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n: int, m: int) -> str:\n    # Check if n is greater than m\n    if n > m:\n        return \"-1\"\n    \n    # Calculate the average of integers from n through m\n    avg = round((n + m) / 2)\n    \n    # Convert the average to binary\n    return bin(avg)", "prompt_tokens": 180, "completion_tokens": 75, "duration": 1.712348461151123}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x: List[int]) -> List[int]:\n    # Filter numbers with even digits\n    filtered = [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))]\n    \n    # Sort the filtered list\n    sorted_list = sorted(filtered)\n    \n    return sorted_list", "prompt_tokens": 142, "completion_tokens": 72, "duration": 1.9712438583374023}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    # Filter out numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = list(reversed(sorted_arr))\n    \n    # Replace numbers with corresponding names\n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    \n    return result", "prompt_tokens": 316, "completion_tokens": 216, "duration": 3.8601226806640625}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop over the range from 1 to n\n    for i in range(1, n+1):\n        if i % 2 == 0:  # Check if i is even\n            # Calculate the factorial of i\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Calculate the sum of numbers from 1 to i\n            result.append(sum(range(1, i+1)))\n    \n    return result", "prompt_tokens": 164, "completion_tokens": 136, "duration": 2.781147003173828}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Loop through the range of numbers from 1 to n (inclusive)\n    for num in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(num) == str(num)[::-1]:\n            # Increment the respective counter based on the parity of the palindrome\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return a tuple of the counts of even and odd palindromes\n    return (even_count, odd_count)", "prompt_tokens": 251, "completion_tokens": 155, "duration": 2.9661126136779785}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0  # Initialize count variable to keep track of numbers with sum of digits > 0\n    \n    for num in arr:  # Iterate through each number in the input array\n        if num >= 0:  # Check if the number is non-negative\n            digits_sum = sum(int(d) for d in str(num))  # Calculate the sum of digits for non-negative numbers\n        else:  # If the number is negative\n            digits_sum = -sum(int(d) for d in str(num)[1:])  # Calculate the sum of digits for negative numbers\n        \n        if digits_sum > 0:  # Check if the sum of digits is greater than 0\n            count += 1  # Increment the count if the sum of digits is greater than 0\n            \n    return count  # Return the final count of numbers with sum of digits > 0", "prompt_tokens": 164, "completion_tokens": 193, "duration": 3.9544143676757812}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    # If the array is empty, return True\n    if not arr:\n        return True\n    \n    # Find the index of the smallest element in the array\n    min_idx = arr.index(min(arr))\n    \n    # Check if the array is sorted in non-decreasing order after performing right shifts\n    return arr == sorted(arr) or arr == sorted(arr[min_idx:] + arr[:min_idx])", "prompt_tokens": 339, "completion_tokens": 92, "duration": 2.2133610248565674}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Calculate the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Calculate the number of odd elements in lst2\n    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)\n    \n    # If the number of odd elements in lst1 is less than or equal to the number of odd elements in lst2, return \"YES\"\n    if odd_count_lst1 <= odd_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 237, "completion_tokens": 139, "duration": 2.5130507946014404}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    # Split the input string into a list of lowercase letters\n    letters = test.split()\n    \n    # Create an empty dictionary to store letter counts\n    letter_count = {}\n    \n    # Iterate over the letters list and count occurrences of each letter\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    \n    # Find the maximum occurrence count\n    max_count = max(letter_count.values())\n    \n    # Filter the dictionary to include only letters with the maximum count\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    \n    return result", "prompt_tokens": 191, "completion_tokens": 154, "duration": 3.103670597076416}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    # Remove characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome", "prompt_tokens": 202, "completion_tokens": 76, "duration": 2.0618796348571777}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    # Initialize an empty list to store the results\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in lst:\n        # Count the number of odd digits in the current string\n        count = sum(1 for char in string if int(char) % 2 != 0)\n        \n        # Append the formatted string to the result list\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    \n    return result", "prompt_tokens": 213, "completion_tokens": 124, "duration": 2.5305635929107666}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    # Initialize variables to keep track of current sum and minimum sum\n    curr_sum = 0\n    min_sum = float('inf')\n    \n    # Loop through the array\n    for num in nums:\n        # Update current sum to be either the current element or current sum + current element\n        curr_sum = min(num, curr_sum + num)\n        # Update minimum sum to be the minimum of current sum and minimum sum\n        min_sum = min(min_sum, curr_sum)\n    \n    return min_sum", "prompt_tokens": 128, "completion_tokens": 117, "duration": 2.548898220062256}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize total_moves counter\n    total_moves = 0\n\n    # Iterate over each well\n    for row in grid:\n        # Calculate the total water units in the current well\n        total_water = sum(row)\n        \n        # Calculate the number of moves needed to empty the well\n        moves_needed = math.ceil(total_water / capacity)\n        \n        # Update the total_moves counter\n        total_moves += moves_needed\n\n    return total_moves", "prompt_tokens": 363, "completion_tokens": 107, "duration": 2.5376768112182617}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Define a custom sorting function that sorts based on number of ones and then by decimal value\n    def custom_sort(x):\n        return bin(x).count('1'), x\n    \n    # Sort the array using the custom sorting function\n    arr.sort(key=custom_sort)\n    \n    return arr", "prompt_tokens": 210, "completion_tokens": 70, "duration": 1.6632087230682373}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s: str, n: int) -> List[str]:\n    # Create a list to store the words that contain n consonants\n    result = []\n    \n    # Create a set of vowels for checking\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Loop through each word in the list\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        \n        # Check if the consonant count matches n\n        if consonant_count == n:\n            result.append(word)\n    \n    return result", "prompt_tokens": 221, "completion_tokens": 158, "duration": 4.700591325759888}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    # Find the index of the first consonant from the right\n    first_consonant_index = max([i for i, char in enumerate(word[::-1]) if char not in 'aeiouAEIOU'], default=-1)\n    \n    # Find the index of the closest vowel to the right of the first consonant\n    closest_vowel_index = min([i for i, char in enumerate(word[:len(word)-first_consonant_index-1]) if char in 'aeiouAEIOU'], default=-1)\n    \n    # Return the closest vowel found or an empty string\n    return word[closest_vowel_index] if closest_vowel_index != -1 else \"\"", "prompt_tokens": 189, "completion_tokens": 154, "duration": 6.623237133026123}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    # Concatenate the two strings\n    combined_string = lst[0] + lst[1]\n    \n    # Initialize a count variable to keep track of open parentheses\n    count = 0\n    \n    # Iterate through the combined string\n    for char in combined_string:\n        # Increment count for open parentheses, decrement for close parentheses\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        # If count becomes negative, return 'No'\n        if count < 0:\n            return 'No'\n    \n    # Check if all parentheses are balanced\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 208, "completion_tokens": 154, "duration": 3.430528402328491}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Return the last k elements of the sorted array\n    return arr[-k:]", "prompt_tokens": 257, "completion_tokens": 42, "duration": 1.5508108139038086}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    # Filter out the odd elements at even positions\n    filtered_list = [num for idx, num in enumerate(lst) if idx % 2 == 1 and num % 2 != 0]\n    \n    # Return the sum of the filtered list\n    return sum(filtered_list)", "prompt_tokens": 137, "completion_tokens": 67, "duration": 3.5185842514038086}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    # Initialize a variable to store the sum of elements with at most two digits\n    total = 0\n    # Iterate through the first k elements of the array\n    for num in arr[:k]:\n        # Check if the element has at most two digits\n        if 10 <= abs(num) < 100:\n            # Add the element to the total sum\n            total += num\n    return total", "prompt_tokens": 168, "completion_tokens": 97, "duration": 2.309858560562134}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]  # Create a list to store the collatz sequence starting with n\n    while n != 1:  # Continue the process until n reaches 1\n        if n % 2 == 0:  # If n is even\n            n = n // 2\n        else:  # If n is odd\n            n = 3 * n + 1\n        collatz_seq.append(n)  # Append the new value of n to the collatz sequence list\n\n    return sorted([num for num in collatz_seq if num % 2 != 0])  # Return sorted list of odd numbers in the collatz sequence", "prompt_tokens": 271, "completion_tokens": 154, "duration": 4.332200527191162}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date string is not empty\n    if date == \"\":\n        return False\n    \n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Convert month, day, and year to integers\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    # Define the maximum number of days for each month\n    max_days = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the number of days is within the valid range for the given month\n    if day < 1 or day > max_days[month]:\n        return False\n    \n    return True", "prompt_tokens": 303, "completion_tokens": 249, "duration": 4.291733980178833}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    # if there are whitespaces in the text, split the words on whitespaces\n    if ' ' in txt:\n        return txt.split()\n    # if there are commas in the text, split the words on commas\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # count number of lower-case letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 180, "completion_tokens": 109, "duration": 4.411824703216553}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    # Check if the list is equal to a sorted version of the list\n    return lst == sorted(list(set(lst))) and all(lst.count(x) <= 1 for x in set(lst))", "prompt_tokens": 289, "completion_tokens": 49, "duration": 1.5669779777526855}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals do not intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length of the intersection is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 294, "completion_tokens": 158, "duration": 4.961103439331055}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    # Return None if arr is empty\n    if not arr:\n        return None\n    \n    # Initialize variables for sum and product of signs\n    total_sum = 0\n    sign_product = 1\n    \n    # Iterate through the array\n    for num in arr:\n        # Update the total sum by adding the magnitude of the number\n        total_sum += abs(num)\n        # Update the sign product by multiplying the sign of the number\n        sign_product *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    # Return the result of multiplying the total sum by the sign product\n    return total_sum * sign_product", "prompt_tokens": 162, "completion_tokens": 148, "duration": 2.8280913829803467}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    # Define the number of rows and columns in the grid\n    n = len(grid)\n    \n    # Define a list of possible directions to move (up, down, left, right)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Initialize a visited set to keep track of visited cells\n    visited = set()\n    \n    # Initialize the starting point to be the minimum value in the grid\n    start = min(min(row) for row in grid)\n    \n    # Define a function to check if a cell is within the grid boundaries\n    def within_bounds(x, y):\n        return 0 <= x < n and 0 <= y < n\n    \n    # Define a function to find the next cell to move to based on the current cell\n    def find_next_cell(curr_x, curr_y, k):\n        if k == 1:\n            return [(curr_x, curr_y)]\n        \n        next_cells = []\n        for dx, dy in directions:\n            new_x, new_y = curr_x + dx, curr_y + dy\n            if within_bounds(new_x, new_y) and (new_x, new_y) not in visited:\n                visited.add((new_x, new_y))\n                next_cells.extend(find_next_cell(new_x, new_y, k-1))\n                visited.remove((new_x, new_y))\n        \n        return [(curr_x, curr_y)] + next_cells\n    \n    # Find the starting cell with the minimum value\n    start_x, start_y = [(i, row.index(start)) for i, row in enumerate(grid) if start in row][0]\n    \n    # Find the path of length k starting from the minimum cell\n    path = find_next_cell(start_x, start_y, k)\n    \n    # Extract the values on the cells of the path\n    result = [grid[x][y] for x, y in path]\n    \n    return result", "prompt_tokens": 436, "completion_tokens": 420, "duration": 8.857751369476318}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with the first two values\n    tribonacci = [1, 3]\n    \n    # Loop from 2 to n to calculate the rest of the values in the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci", "prompt_tokens": 275, "completion_tokens": 124, "duration": 6.022443056106567}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    # Initialize the product to 1\n    product = 1\n    # Iterate through each digit of the integer n\n    for digit in str(n):\n        # Convert the digit back to integer\n        digit = int(digit)\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n    # Return the final product\n    return product", "prompt_tokens": 111, "completion_tokens": 107, "duration": 3.74985671043396}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    # Initialize a counter variable to keep track of the nesting level\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is an opening bracket, increase the nesting level\n        if char == '[':\n            count += 1\n        # If the character is a closing bracket, decrease the nesting level\n        elif char == ']' and count > 0:\n            count -= 1\n    \n    # If the nesting level is greater than 0, there is a nested bracket\n    return count > 0", "prompt_tokens": 173, "completion_tokens": 130, "duration": 4.159057378768921}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    # Initialize a variable to store the sum\n    total = 0\n    # Iterate through the list\n    for num in lst:\n        # Round each element to the upper integer\n        num = math.ceil(num)\n        # Add the squared number to the total sum\n        total += num ** 2\n    return total", "prompt_tokens": 197, "completion_tokens": 82, "duration": 3.593585252761841}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Split the string by spaces to get individual words\n    words = txt.split()\n    \n    # Get the last word\n    last_word = words[-1] if words else \"\"\n    \n    # Check if the last character of the last word is a letter\n    return last_word and last_word[-1].isalpha() and not last_word.isalpha()", "prompt_tokens": 177, "completion_tokens": 88, "duration": 1.9220378398895264}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    # Create a variable to store the index of the element that is not greater than the element before it\n    index = -1\n    \n    # Iterate over the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than the element before it\n        if arr[i] <= arr[i-1]:\n            # Update the index variable to the current index\n            index = i\n    \n    # Return the index of the element that is not greater than the element before it\n    return index", "prompt_tokens": 143, "completion_tokens": 121, "duration": 5.779633522033691}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    # Initialize variables to store largest negative integer and smallest positive integer\n    largest_negative = None\n    smallest_positive = None\n    \n    # Iterate over the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        # Check if the number is positive\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n            \n    return (largest_negative, smallest_positive)", "prompt_tokens": 178, "completion_tokens": 129, "duration": 5.853477478027344}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Check if a and b are equal\n    if a == b:\n        return None\n    \n    # Check if a and b are both integers\n    if isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    \n    # Check if a and b are both floats\n    if isinstance(a, float) and isinstance(b, float):\n        return max(a, b)\n    \n    # Check if a and b are both strings\n    if isinstance(a, str) and isinstance(b, str):\n        # Convert strings to floats by replacing ',' with '.' if necessary\n        a_float = float(a.replace(',', '.')) if ',' in a else float(a)\n        b_float = float(b.replace(',', '.')) if ',' in b else float(b)\n        return str(max(a_float, b_float)).replace('.', ',')\n    \n    # Check if a is an integer and b is a string\n    if isinstance(a, int) and isinstance(b, str):\n        # Convert b to float by replacing ',' with '.'\n        b_float = float(b.replace(',', '.'))\n        return b if a < b_float else None\n    \n    # Check if a is a string and b is an integer\n    if isinstance(a, str) and isinstance(b, int):\n        # Convert a to float by replacing ',' with '.'\n        a_float = float(a.replace(',', '.'))\n        return a if a_float > b else None\n    \n    # Check if a is an integer and b is a float\n    if isinstance(a, int) and isinstance(b, float):\n        return b if a < b else None\n    \n    # Check if a is a float and b is an integer\n    if isinstance(a, float) and isinstance(b, int):\n        return a if a > b else None", "prompt_tokens": 181, "completion_tokens": 378, "duration": 9.295976161956787}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n: int) -> bool:\n    # Check if n is less than 8\n    if n < 8:\n        return False\n    \n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 117, "completion_tokens": 71, "duration": 5.2975077629089355}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    # Initialize the result to 1\n    result = 1\n    \n    # Iterate from n down to 1\n    for i in range(n, 0, -1):\n        # Calculate the factorial of the current number i\n        factorial_i = 1\n        for j in range(1, i + 1):\n            factorial_i *= j\n        \n        # Multiply the result by the factorial_i\n        result *= factorial_i\n    \n    return result", "prompt_tokens": 135, "completion_tokens": 105, "duration": 3.908656120300293}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace all consecutive spaces with a single hyphen\n    text = text.replace('   ', '-')\n    text = text.replace('  ', '-')\n    \n    return text", "prompt_tokens": 146, "completion_tokens": 62, "duration": 5.103899717330933}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file's name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot in the file's name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file's name into two parts: before and after the dot\n    name_parts = file_name.split('.')\n    \n    # Check if the part before the dot is not empty and starts with a letter\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    # Check if the part after the dot is one of ['txt', 'exe', 'dll']\n    if name_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 254, "completion_tokens": 200, "duration": 7.010411262512207}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    # Initialize sum variable\n    total = 0\n    \n    # Loop through each element and its index in the list\n    for idx, num in enumerate(lst):\n        # Check if index is a multiple of 3\n        if idx % 3 == 0:\n            total += num ** 2\n        # Check if index is a multiple of 4 but not a multiple of 3\n        elif idx % 4 == 0 and idx % 3 != 0:\n            total += num ** 3\n    \n    return total", "prompt_tokens": 209, "completion_tokens": 123, "duration": 6.240689754486084}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Filter words based on length being prime\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Join the prime words back into a string\n    result = ' '.join(prime_words)\n    \n    return result", "prompt_tokens": 187, "completion_tokens": 142, "duration": 6.280621767044067}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    # Splitting the fractions into numerators and denominators\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    # Calculating the product of the fractions\n    result = x_num * n_num / (x_denom * n_denom)\n    \n    # Checking if the result is a whole number\n    return result.is_integer()", "prompt_tokens": 195, "completion_tokens": 100, "duration": 6.143262624740601}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    # Define a helper function to calculate the sum of digits for a number\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    \n    # Sort the list of numbers based on the sum of digits and the index in the original list\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 155, "completion_tokens": 86, "duration": 5.5449488162994385}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    # Initialize a counter variable to keep track of the special numbers\n    count = 0\n    \n    # Iterate through each number in the input array\n    for num in nums:\n        # Check if the number is greater than 10 and has odd first and last digits\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            # Increment the counter if the conditions are met\n            count += 1\n    \n    # Return the final count of special numbers\n    return count", "prompt_tokens": 159, "completion_tokens": 146, "duration": 6.123741149902344}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0  # Initialize count of valid triples\n    \n    # Create the array a according to the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Check all possible triples (i, j, k) and count those that are divisible by 3\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 205, "completion_tokens": 146, "duration": 6.199890613555908}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of the planets in the list\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the lower and upper bounds for the planets\n    lower_bound = min(index1, index2)\n    upper_bound = max(index1, index2)\n    \n    # Get the planets between the orbit of planet1 and planet2\n    result = tuple([planet for planet in planets[lower_bound+1:upper_bound]])\n    \n    return result", "prompt_tokens": 251, "completion_tokens": 188, "duration": 7.375445604324341}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst", "prompt_tokens": 227, "completion_tokens": 78, "duration": 3.5461905002593994}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    # Check if n is less than 2\n    if n < 2:\n        return y\n    \n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 126, "completion_tokens": 83, "duration": 5.573019742965698}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    # Initialize the total sum variable\n    total_sum = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is positive and an integer and also odd\n        if num > 0 and isinstance(num, int) and num % 2 != 0:\n            # Add the square of the number to the total sum\n            total_sum += num ** 2\n            \n    # Return the double of the total sum\n    return total_sum * 2", "prompt_tokens": 177, "completion_tokens": 114, "duration": 3.888113021850586}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    # Initialize an empty list to store the differences\n    result = []\n    \n    # Iterate through the elements of the game and guess arrays\n    for i in range(len(game)):\n        # Calculate the absolute difference between the guess and the score\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the result list\n        result.append(diff)\n    \n    # Return the result list\n    return result", "prompt_tokens": 270, "completion_tokens": 98, "duration": 5.4780871868133545}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    # Initialize variables to hold the strongest extension and its strength\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n    \n    # Iterate through the extensions list\n    for ext in extensions:\n        # Calculate the strength of the current extension\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        \n        # Check if the current extension is stronger than the current strongest extension\n        if strength > strongest_strength:\n            strongest_extension = ext\n            strongest_strength = strength\n    \n    # Return the result in the required format\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 317, "completion_tokens": 161, "duration": 4.446557521820068}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]  # Rotate b by 1 position\n    return False", "prompt_tokens": 169, "completion_tokens": 55, "duration": 3.2245705127716064}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the integer to a string to iterate through each digit\n    num_str = str(abs(num))\n    \n    # Iterate through each digit and count even and odd digits\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 105, "completion_tokens": 106, "duration": 5.385570526123047}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number: int) -> str:\n    # Define the roman numeral symbols and their corresponding values\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    \n    # Create an empty string to store the roman numeral equivalent\n    result = ''\n    \n    # Iterate over the roman numeral symbols in descending order\n    for value, symbol in sorted(roman_numerals.items(), reverse=True):\n        # Repeat while the number is greater than or equal to the current value\n        while number >= value:\n            # Append the symbol to the result and subtract the value from the number\n            result += symbol\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 141, "completion_tokens": 220, "duration": 5.2912962436676025}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    # Sort the sides in ascending order\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 148, "completion_tokens": 79, "duration": 5.687580585479736}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Initialize variables to keep track of max unique characters and corresponding word\n    max_unique = 0\n    max_word = \"\"\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Count unique characters in the word\n        unique_chars = len(set(word))\n        \n        # Check if current word has more unique characters\n        # or if it has equal unique characters but comes first lexicographically\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 160, "completion_tokens": 136, "duration": 4.724609613418579}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    # Calculate the total number of eaten carrots after the meals\n    total_eaten = number + need\n    # Calculate the number of carrots left after the meals\n    left = max(0, remaining - need)\n    \n    return [total_eaten, left]", "prompt_tokens": 317, "completion_tokens": 67, "duration": 3.1771790981292725}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]  # Initialize result with the first operand\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]  # Addition\n        elif operator[i] == '-':\n            result -= operand[i+1]  # Subtraction\n        elif operator[i] == '*':\n            result *= operand[i+1]  # Multiplication\n        elif operator[i] == '//':\n            result //= operand[i+1]  # Floor division\n        elif operator[i] == '**':\n            result **= operand[i+1]  # Exponentiation\n    return result", "prompt_tokens": 247, "completion_tokens": 146, "duration": 4.55594801902771}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Check if the string contains any letters\n    if not any(char.isalpha() for char in s):\n        # If no letters, reverse the string\n        return s[::-1]\n\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is a letter, reverse its case\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n\n    return result", "prompt_tokens": 147, "completion_tokens": 131, "duration": 6.127479791641235}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 116, "completion_tokens": 43, "duration": 3.0556838512420654}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a: int, b: int) -> List[int]:\n    # Create an empty list to store the even digits\n    result = []\n    \n    # Iterate through the range from a to b\n    for num in range(a, b+1):\n        # Check if the digit is even\n        if num % 2 == 0:\n            result.append(num)\n    \n    return result", "prompt_tokens": 144, "completion_tokens": 88, "duration": 5.443737745285034}
