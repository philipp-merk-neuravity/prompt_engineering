{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 909, "completion_tokens": 545, "duration": 24.33568263053894}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    for char in paren_string:\n        if char in '()':\n            group += char\n            if group.count('(') == group.count(')'):\n                result.append(group)\n                group = ''\n    return result", "prompt_tokens": 815, "completion_tokens": 474, "duration": 25.77783513069153}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 642, "completion_tokens": 310, "duration": 14.85291576385498}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 921, "completion_tokens": 554, "duration": 39.96397638320923}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 973, "completion_tokens": 602, "duration": 36.51223945617676}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the extra delimiter at the end\n    return result", "prompt_tokens": 840, "completion_tokens": 535, "duration": 17.442633152008057}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n    levels.append(max_level)\n    return levels", "prompt_tokens": 989, "completion_tokens": 676, "duration": 34.48639440536499}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 865, "completion_tokens": 535, "duration": 17.71040368080139}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    result_sum = sum(numbers)\n    result_product = 1\n    for num in numbers:\n        result_product *= num\n    return result_sum, result_product", "prompt_tokens": 904, "completion_tokens": 574, "duration": 23.17389988899231}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result", "prompt_tokens": 896, "completion_tokens": 563, "duration": 30.21615433692932}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    def find_palindrome_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n        return ''\n\n    return string + find_palindrome_suffix(string)[::-1]", "prompt_tokens": 1018, "completion_tokens": 701, "duration": 42.63886475563049}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 600, "completion_tokens": 318, "duration": 15.62637209892273}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), -strings.index(x)))", "prompt_tokens": 860, "completion_tokens": 523, "duration": 22.655592918395996}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 653, "completion_tokens": 366, "duration": 14.248658895492554}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 557, "completion_tokens": 298, "duration": 14.156676292419434}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 611, "completion_tokens": 319, "duration": 18.974960803985596}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 759, "completion_tokens": 457, "duration": 29.021241664886475}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    return [notes.get(note, 0) for note in music_list]", "prompt_tokens": 1083, "completion_tokens": 631, "duration": 21.61396837234497}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 805, "completion_tokens": 516, "duration": 31.858311414718628}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: numberals.index(x)))", "prompt_tokens": 684, "completion_tokens": 363, "duration": 16.053580045700073}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = min(((numbers[i], numbers[i+1]) for i in range(len(numbers) - 1)), key=lambda pair: pair[1] - pair[0])\n    return closest_pair", "prompt_tokens": 1489, "completion_tokens": 775, "duration": 28.54668116569519}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 893, "completion_tokens": 521, "duration": 23.731053113937378}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n# Test with a mix of integers, floats, and strings\nassert filter_integers([1, 2.5, 'string', 3]) == [1, 3]\n\n# Test with only integers\nassert filter_integers([4, 5, 6]) == [4, 5, 6]\n\n# Test with no integers\nassert filter_integers(['a', 'b', 3.14, []]) == []\n\n# Test with empty list\nassert filter_integers([]) == []\n\n# Test with non-numeric types only (strings, lists, dictionaries)\nassert filter_integers(['hello', [], {}, 'world']) == []\n\n# Test with negative integers and zeros\nassert filter_integers([-1, 0, -5, 10]) == [-1, 0, -5, 10]\n\n# Test with booleans (which are technically integers in Python)\nassert filter_integers([True, False, 1, 'string']) == [True, False, 1]\n\n# Test with a mix of float and integer values that are the same numerically but different types\nassert filter_integers([1, 1.0, 2.0, 2]) == [1, 2]\n\n# Test with complex numbers which should be filtered out\nassert filter_integers([1+2j, 3, 4.5]) == [3]\n\n# Test with nested lists and dictionaries which should be filtered out\nassert filter_integers([[1,2,3], 3, {'a': 1}, 4]) == [3, 4]", "prompt_tokens": 701, "completion_tokens": 706, "duration": 28.750731945037842}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 509, "completion_tokens": 259, "duration": 20.995799779891968}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 592, "completion_tokens": 357, "duration": 16.041642904281616}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 1110, "completion_tokens": 756, "duration": 44.54263114929199}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 803, "completion_tokens": 491, "duration": 29.107179164886475}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 620, "completion_tokens": 377, "duration": 23.561457633972168}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 627, "completion_tokens": 356, "duration": 13.652426719665527}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 896, "completion_tokens": 578, "duration": 20.575955152511597}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 693, "completion_tokens": 309, "duration": 23.756419897079468}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 704, "completion_tokens": 425, "duration": 15.722228765487671}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1151, "completion_tokens": 611, "duration": 81.3059892654419}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l[:]\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_indices_divisible_by_three = [l[i] for i in indices_divisible_by_three]\n    sorted_values = sorted(values_at_indices_divisible_by_three)\n    for i, val in zip(indices_divisible_by_three, sorted_values):\n        new_list[i] = val\n    return new_list", "prompt_tokens": 1092, "completion_tokens": 715, "duration": 24.168424367904663}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 767, "completion_tokens": 455, "duration": 20.507446765899658}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 788, "completion_tokens": 457, "duration": 28.464069366455078}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 986, "completion_tokens": 708, "duration": 40.46677541732788}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l)) if i % 2 == 0 or l[i] == l[i-1]]", "prompt_tokens": 1025, "completion_tokens": 657, "duration": 71.29733920097351}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2369, "completion_tokens": 865, "duration": 24.642080068588257}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 867, "completion_tokens": 673, "duration": 30.122560262680054}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1004, "completion_tokens": 570, "duration": 20.32938003540039}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 856, "completion_tokens": 383, "duration": 34.454808712005615}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 704, "completion_tokens": 322, "duration": 21.599929809570312}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 983, "completion_tokens": 526, "duration": 26.542047262191772}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < 0:\n        sign = \"-\"\n        x = abs(x)\n    else:\n        sign = \"\"\n\n    if x == 0:\n        return \"0\"\n\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n\n    return sign + \"\".join(digits)", "prompt_tokens": 981, "completion_tokens": 700, "duration": 37.71154570579529}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 525, "completion_tokens": 272, "duration": 12.970041275024414}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 935, "completion_tokens": 533, "duration": 24.577914714813232}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 835, "completion_tokens": 564, "duration": 23.40959119796753}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 581, "completion_tokens": 271, "duration": 12.588148593902588}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 892, "completion_tokens": 524, "duration": 33.73220896720886}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 728, "completion_tokens": 449, "duration": 15.14083981513977}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 1582, "completion_tokens": 959, "duration": 45.208475828170776}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 795, "completion_tokens": 480, "duration": 17.041197299957275}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 490, "completion_tokens": 222, "duration": 8.606349229812622}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 857, "completion_tokens": 422, "duration": 28.38677954673767}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 669, "completion_tokens": 416, "duration": 25.250802516937256}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 703, "completion_tokens": 399, "duration": 13.95972990989685}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing", "prompt_tokens": 866, "completion_tokens": 569, "duration": 32.605417251586914}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 1122, "completion_tokens": 518, "duration": 24.96914029121399}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        d = 2\n        while d * d <= num:\n            if num % d == 0:\n                factors.append(d)\n                num //= d\n            else:\n                d += 1\n        if num > 1:\n            factors.append(num)\n        return factors\n\n    factors = prime_factors(n)\n    return max(factor for factor in factors if is_prime(factor))", "prompt_tokens": 609, "completion_tokens": 452, "duration": 22.612929105758667}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 701, "completion_tokens": 355, "duration": 15.973956823348999}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 700, "completion_tokens": 397, "duration": 14.316180229187012}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    result = [xs[i] * i for i in range(1, len(xs))]\n    return result\n\n# Test when polynomial is a constant (derivative should be [0])\nassert derivative([5]) == [], \"Derivative of a constant should be an empty list\"\n\n# Test a linear polynomial (should return the coefficient as the only element in the list)\nassert derivative([3, 5]) == [5], \"Derivative of a linear polynomial should be its coefficient\"\n\n# Test when polynomial coefficients are zeros\nassert derivative([0, 0, 0, 0]) == [0, 0, 0], \"Derivative of all zeros should maintain zeros except the last term\"\n\n# Test a quadratic polynomial\nassert derivative([2, 3, 4]) == [3, 8], \"Coefficient of x should be 3 and coefficient of x^2 term should be 8 after derivation\"\n\n# Test a cubic polynomial\nassert derivative([1, -1, 2, -3]) == [-1, 4, -9], \"Cubic polynomial should correctly calculate derivative coefficients\"\n\n# Test with negative coefficients\nassert derivative([-4, -3, -2, -1]) == [-3, -4, -3], \"Negative coefficients should be derived correctly\"\n\n# Test with a higher degree polynomial\nassert derivative([0, 1, 0, 3, 0, 5]) == [1, 0, 9, 0, 25], \"Polynomial with zero and non-zero coefficients should be derived correctly\"\n\n# Test with a single zero coefficient\nassert derivative([0]) == [], \"Derivative of a zero constant should be an empty list\"\n\n# Test polynomial with decimal coefficients\nassert derivative([0.5, 1.5, 2.5]) == [1.5, 5.0], \"Decimal coefficients should be derived correctly\"\n\n# Test an empty list (should raise an error or return an empty list based on design decision)\n# This test assumes the function should return an empty list for an empty input, which might vary depending on requirements\nassert derivative([]) == [], \"Derivative of an empty list should return an empty list\"\n\n# Test with large coefficients and high degree\nassert derivative([10, 100, 1000, 10000, 100000]) == [100, 2000, 30000, 400000], \"Large coefficients and high degrees should be handled correctly\"", "prompt_tokens": 896, "completion_tokens": 1023, "duration": 35.901225566864014}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 966, "completion_tokens": 557, "duration": 41.52578353881836}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s)-1))\n    return count", "prompt_tokens": 673, "completion_tokens": 289, "duration": 10.338056325912476}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 812, "completion_tokens": 513, "duration": 23.320483684539795}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 827, "completion_tokens": 444, "duration": 19.682711124420166}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1235, "completion_tokens": 675, "duration": 75.40864086151123}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n\n    smallest_even_value = min(evens, key=lambda x: (x[1], x[0]))\n    return [smallest_even_value[1], smallest_even_value[0]]", "prompt_tokens": 1267, "completion_tokens": 543, "duration": 17.796342134475708}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 1042, "completion_tokens": 581, "duration": 46.83297824859619}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    return [lst.pop(0) if i%2==0 else lst.pop() for i in range(len(lst))]\n\n# Test with a standard list of consecutive integers\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n\n# Test with a list of identical elements\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\n# Test with an empty list\nassert strange_sort_list([]) == []\n\n# Test with a list of negative and positive integers\nassert strange_sort_list([-3, 1, 2, -2]) == [-3, 2, -2, 1]\n\n# Test with a list that has a large range of numbers\nassert strange_sort_list([100, -100, 50, -50]) == [-100, 100, -50, 50]\n\n# Test with a list of non-consecutive integers\nassert strange_sort_list([10, 7, 2, 15, 3]) == [2, 15, 3, 10, 7]\n\n# Test with a list containing only one element\nassert strange_sort_list([42]) == [42]\n\n# Test with a list containing two elements\nassert strange_sort_list([2, 1]) == [1, 2]\n\n# Test with a list containing three elements\nassert strange_sort_list([3, 2, 1]) == [1, 3, 2]\n\n# Test with a list of integers in descending order\nassert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]\n\n# Test with a list containing both small and large numbers\nassert strange_sort_list([1000, 3, 2, 100, -2000]) == [-2000, 1000, 2, 100, 3]", "prompt_tokens": 915, "completion_tokens": 912, "duration": 26.945700883865356}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 756, "completion_tokens": 423, "duration": 17.86586022377014}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1158, "completion_tokens": 541, "duration": 21.494240045547485}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 1067, "completion_tokens": 624, "duration": 26.3856098651886}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 932, "completion_tokens": 433, "duration": 62.09921836853027}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3\n\n# Test with a number that is a product of three distinct prime numbers\nassert is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n\n# Test with a number that is not the product of three prime numbers (only two prime factors)\nassert is_multiply_prime(6) == False  # 6 = 2 * 3\n\n# Test with a number that is the product of a prime number repeated 3 times\nassert is_multiply_prime(8) == False  # 8 = 2 * 2 * 2, repetition of the same prime\n\n# Test with a prime number (only one prime factor)\nassert is_multiply_prime(7) == False  # 7 is a prime number itself\n\n# Test with a number that is a product of three prime numbers, but one of them repeated\nassert is_multiply_prime(18) == False  # 18 = 2 * 3 * 3, repetition of the prime 3\n\n# Test with a number that is the product of more than three prime numbers\nassert is_multiply_prime(210) == False  # 210 = 2 * 3 * 5 * 7, more than three prime factors\n\n# Test with 1, which is neither prime nor composite\nassert is_multiply_prime(1) == False  # 1 is not a product of prime numbers\n\n# Test with a negative number (invalid input as per the docstring, but good for robustness)\n# Assuming the function is only meant for positive integers < 100\nassert is_multiply_prime(-30) == False  # Negative numbers are outside the expected domain\n\n# Test with a number at the upper limit of the domain (since a is less than 100, let's try 99)\n# 99 = 3 * 3 * 11, which is a valid case but one prime is repeated\nassert is_multiply_prime(99) == False  # 99 = 3 * 3 * 11\n\n# Test with 0, which is a special case and should return false\nassert is_multiply_prime(0) == False  # 0 cannot be expressed as a product of prime numbers\n\n# Test with a number that is a product of three distinct prime numbers, and one of the primes is the largest prime < 100\nassert is_multiply_prime(5 * 7 * 97) == True  # 5 * 7 * 97 = 3395, which is beyond the specified domain, but this tests the logic", "prompt_tokens": 872, "completion_tokens": 1161, "duration": 41.59849500656128}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x < 0 or n < 0:\n        return False\n    if x == n:\n        return True\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x", "prompt_tokens": 1033, "completion_tokens": 667, "duration": 42.549657106399536}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a) or (a < 0 and round(abs(a) ** (1/3)) ** 3 == abs(a))", "prompt_tokens": 721, "completion_tokens": 373, "duration": 16.018487215042114}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1130, "completion_tokens": 389, "duration": 21.642468452453613}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 888, "completion_tokens": 451, "duration": 23.598544597625732}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 1032, "completion_tokens": 680, "duration": 29.738301277160645}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1135, "completion_tokens": 675, "duration": 22.356485605239868}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    return is_prime(len(string))\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 624, "completion_tokens": 348, "duration": 16.97824263572693}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) + 8 * (n - 1) * 10 ** (n - 2)", "prompt_tokens": 611, "completion_tokens": 383, "duration": 15.873374700546265}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 889, "completion_tokens": 462, "duration": 19.726803302764893}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 704, "completion_tokens": 450, "duration": 16.144413709640503}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 955, "completion_tokens": 551, "duration": 37.91331219673157}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return result", "prompt_tokens": 1193, "completion_tokens": 564, "duration": 27.49908471107483}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1347, "completion_tokens": 807, "duration": 32.546887159347534}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 820, "completion_tokens": 508, "duration": 47.07965040206909}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 880, "completion_tokens": 500, "duration": 30.898386001586914}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('I ') + S.count('I.') + S.count('I?') + S.count('I!')", "prompt_tokens": 950, "completion_tokens": 588, "duration": 43.968621492385864}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 897, "completion_tokens": 482, "duration": 31.3763644695282}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 956, "completion_tokens": 640, "duration": 27.66232943534851}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    max_prime = max(prime_values)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1296, "completion_tokens": 665, "duration": 84.73079776763916}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    \n    lower_case = all(key.islower() for key in dictionary if isinstance(key, str))\n    upper_case = all(key.isupper() for key in dictionary if isinstance(key, str))\n    \n    return lower_case or upper_case", "prompt_tokens": 990, "completion_tokens": 534, "duration": 25.707011699676514}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    return primes", "prompt_tokens": 970, "completion_tokens": 554, "duration": 24.210837602615356}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 782, "completion_tokens": 433, "duration": 25.340052843093872}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 713, "completion_tokens": 423, "duration": 31.01578378677368}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 914, "completion_tokens": 464, "duration": 111.6567006111145}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    if n <= 0:\n        return []\n    \n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    \n    return pile", "prompt_tokens": 926, "completion_tokens": 550, "duration": 36.95946741104126}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]", "prompt_tokens": 1620, "completion_tokens": 1028, "duration": 45.4085328578949}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    return biggest_even", "prompt_tokens": 818, "completion_tokens": 502, "duration": 32.99445652961731}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1596, "completion_tokens": 931, "duration": 27.561194896697998}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 995, "completion_tokens": 432, "duration": 17.60793662071228}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [mapping[x] for x in filtered]", "prompt_tokens": 1149, "completion_tokens": 525, "duration": 23.412028074264526}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 831, "completion_tokens": 483, "duration": 33.46595358848572}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return even_count, odd_count", "prompt_tokens": 1058, "completion_tokens": 557, "duration": 20.39743995666504}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 809, "completion_tokens": 409, "duration": 25.514856100082397}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1275, "completion_tokens": 555, "duration": 30.954343557357788}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst1) <= sum(num % 2 == 0 for num in lst2) else \"NO\"", "prompt_tokens": 1104, "completion_tokens": 579, "duration": 68.65139126777649}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n\n    max_count = max(hist.values())\n\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 962, "completion_tokens": 540, "duration": 37.758788108825684}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1211, "completion_tokens": 741, "duration": 42.7742965221405}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 != 0 for c in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 1109, "completion_tokens": 637, "duration": 36.64960217475891}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 815, "completion_tokens": 524, "duration": 32.872336626052856}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n    \n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / bucket_capacity)", "prompt_tokens": 1559, "completion_tokens": 771, "duration": 37.74367618560791}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 1042, "completion_tokens": 561, "duration": 32.47767376899719}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1116, "completion_tokens": 644, "duration": 39.74202084541321}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n\n    return \"\"", "prompt_tokens": 885, "completion_tokens": 509, "duration": 64.9224374294281}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for string in lst:\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 966, "completion_tokens": 512, "duration": 19.828792572021484}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1088, "completion_tokens": 489, "duration": 32.07737755775452}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 751, "completion_tokens": 413, "duration": 29.024765491485596}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 864, "completion_tokens": 456, "duration": 20.853150367736816}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1041, "completion_tokens": 470, "duration": 30.058732986450195}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1208, "completion_tokens": 712, "duration": 27.01767063140869}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "prompt_tokens": 843, "completion_tokens": 445, "duration": 71.72371792793274}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst.count(num) <= 1 for num in set(lst))", "prompt_tokens": 1596, "completion_tokens": 593, "duration": 40.41048049926758}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1256, "completion_tokens": 696, "duration": 43.016024589538574}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else abs(num) * (1 if num > 0 else -1)\n\n    return sum(product)", "prompt_tokens": 1072, "completion_tokens": 706, "duration": 23.320677042007446}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    n = len(grid)\n    cells = [(i, j) for i in range(n) for j in range(n)]\n    paths = list(itertools.combinations(cells, k))\n    min_path = min(paths, key=lambda p: sum(grid[i][j] for i, j in p))\n    return [grid[i][j] for i, j in min_path]", "prompt_tokens": 1743, "completion_tokens": 861, "duration": 33.04774332046509}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    a, b, c = 3, 2, 1\n    for i in range(n):\n        tribonacci.append(a)\n        a, b, c = b, c, a + b + c\n    return tribonacci", "prompt_tokens": 1084, "completion_tokens": 498, "duration": 16.1404390335083}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_digits_product *= int(digit)\n    return odd_digits_product", "prompt_tokens": 554, "completion_tokens": 281, "duration": 10.69361138343811}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1335, "completion_tokens": 729, "duration": 32.55076789855957}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 1014, "completion_tokens": 542, "duration": 20.9157075881958}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt[-2] == ' '", "prompt_tokens": 801, "completion_tokens": 372, "duration": 14.615971326828003}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 934, "completion_tokens": 597, "duration": 27.63757300376892}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 941, "completion_tokens": 552, "duration": 21.942689180374146}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return None if a == b else max(a, b)\n    if type(a) == float or type(b) == float:\n        return None if float(a) == float(b) else max(float(a), float(b))\n    if type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return None if float(a) == float(b) else max(float(a), float(b))\n    return None if a == b else max(a, b)", "prompt_tokens": 1052, "completion_tokens": 720, "duration": 28.115208864212036}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 677, "completion_tokens": 359, "duration": 12.50432538986206}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 966, "completion_tokens": 652, "duration": 21.240102767944336}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    return text", "prompt_tokens": 769, "completion_tokens": 428, "duration": 31.00502896308899}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if len([char for char in name if char.isdigit()]) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1033, "completion_tokens": 532, "duration": 24.378806352615356}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 966, "completion_tokens": 520, "duration": 16.592390298843384}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 905, "completion_tokens": 522, "duration": 30.65615725517273}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 1192, "completion_tokens": 731, "duration": 29.469387531280518}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 858, "completion_tokens": 475, "duration": 17.599730730056763}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 875, "completion_tokens": 535, "duration": 33.44498610496521}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 945, "completion_tokens": 537, "duration": 20.990318298339844}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start < end:\n        return tuple(planets[start + 1:end])\n    elif start > end:\n        return tuple(planets[end + 1:start][::-1])\n    else:\n        return ()", "prompt_tokens": 966, "completion_tokens": 488, "duration": 19.87724494934082}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "prompt_tokens": 888, "completion_tokens": 377, "duration": 12.591733455657959}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 733, "completion_tokens": 462, "duration": 17.392993450164795}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if type(x) == int and x > 0 and x % 2 != 0)\n\n# Test with a mix of positive odd, positive even, and zero\nassert double_the_difference([1, 3, 2, 0]) == 10, \"Test with odd, even, and zero\"\n\n# Test with all negative numbers and zero\nassert double_the_difference([-1, -2, 0]) == 0, \"Test with negatives and zero\"\n\n# Test with a single positive odd number and a negative\nassert double_the_difference([9, -2]) == 81, \"Test with a single positive odd and a negative\"\n\n# Test with only zero\nassert double_the_difference([0]) == 0, \"Test with zero\"\n\n# Test with an empty list\nassert double_the_difference([]) == 0, \"Test with an empty list\"\n\n# Test with all positive even numbers\nassert double_the_difference([2, 4, 6]) == 0, \"Test with positive evens\"\n\n# Test with large numbers\nassert double_the_difference([1001, 10003]) == 1001**2 + 10003**2, \"Test with large numbers\"\n\n# Test with floating point numbers (which should be ignored)\nassert double_the_difference([1.5, 2.5, 3.5, 4.5]) == 0, \"Test with floating point numbers\"\n\n# Test with only negative odd numbers\nassert double_the_difference([-3, -5, -7]) == 0, \"Test with negative odds\"\n\n# Test with non-integer types mixed in\nassert double_the_difference([1, 'a', 3, None]) == 10, \"Test with non-integer types\"", "prompt_tokens": 807, "completion_tokens": 734, "duration": 19.858476638793945}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1094, "completion_tokens": 491, "duration": 35.217573404312134}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1195, "completion_tokens": 556, "duration": 23.16624140739441}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 953, "completion_tokens": 551, "duration": 18.97063136100769}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 638, "completion_tokens": 375, "duration": 22.75300097465515}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_nums.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 971, "completion_tokens": 724, "duration": 42.22214865684509}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 865, "completion_tokens": 517, "duration": 17.203859329223633}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    return min(words, key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1535, "completion_tokens": 938, "duration": 33.46922039985657}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total = number + remaining\n    eaten = min(total, need)\n    remaining = max(0, total - need)\n    return [eaten, remaining]", "prompt_tokens": 1179, "completion_tokens": 489, "duration": 21.792593717575073}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i+1]\n        elif operators[i] == '-':\n            result -= operands[i+1]\n        elif operators[i] == '*':\n            result *= operands[i+1]\n        elif operators[i] == '//':\n            result //= operands[i+1]\n        elif operators[i] == '**':\n            result **= operands[i+1]\n    return result", "prompt_tokens": 1528, "completion_tokens": 1044, "duration": 42.01764750480652}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 877, "completion_tokens": 563, "duration": 18.04412317276001}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 698, "completion_tokens": 394, "duration": 26.505739212036133}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0 and i != 0]", "prompt_tokens": 860, "completion_tokens": 508, "duration": 76.81990599632263}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1063, "completion_tokens": 698, "duration": 31.169857263565063}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current_group += char\n        elif current_group:\n            result.append(current_group)\n            current_group = \"\"\n    if current_group:\n        result.append(current_group)\n    return result", "prompt_tokens": 891, "completion_tokens": 558, "duration": 30.062139749526978}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 656, "completion_tokens": 324, "duration": 15.007474422454834}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 848, "completion_tokens": 481, "duration": 35.04204225540161}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 821, "completion_tokens": 450, "duration": 21.007142543792725}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 875, "completion_tokens": 566, "duration": 34.54867386817932}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 793, "completion_tokens": 480, "duration": 20.592811584472656}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 755, "completion_tokens": 411, "duration": 26.96491050720215}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 691, "completion_tokens": 346, "duration": 30.999249696731567}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    rolling_max_list = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "prompt_tokens": 862, "completion_tokens": 549, "duration": 25.18465542793274}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]", "prompt_tokens": 917, "completion_tokens": 603, "duration": 24.113657236099243}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 749, "completion_tokens": 477, "duration": 33.7983136177063}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), s))", "prompt_tokens": 1469, "completion_tokens": 936, "duration": 34.27709078788757}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 689, "completion_tokens": 403, "duration": 24.88546872138977}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 783, "completion_tokens": 519, "duration": 35.60049772262573}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 878, "completion_tokens": 413, "duration": 24.05027961730957}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 811, "completion_tokens": 505, "duration": 21.083752393722534}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "prompt_tokens": 1108, "completion_tokens": 646, "duration": 32.66791653633118}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 793, "completion_tokens": 510, "duration": 27.238637447357178}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=numberals.index))", "prompt_tokens": 683, "completion_tokens": 359, "duration": 25.659976959228516}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    pair = None\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 1016, "completion_tokens": 596, "duration": 35.513346672058105}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 986, "completion_tokens": 614, "duration": 38.84848642349243}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 934, "completion_tokens": 607, "duration": 38.76677942276001}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 519, "completion_tokens": 269, "duration": 21.456157207489014}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = n // 2\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor", "prompt_tokens": 724, "completion_tokens": 477, "duration": 19.35603094100952}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom math import isqrt\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, isqrt(n) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 965, "completion_tokens": 612, "duration": 24.15980625152588}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 810, "completion_tokens": 493, "duration": 27.529183387756348}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 535, "completion_tokens": 287, "duration": 15.69144582748413}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 673, "completion_tokens": 402, "duration": 24.08997678756714}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 844, "completion_tokens": 526, "duration": 29.155006408691406}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 862, "completion_tokens": 478, "duration": 20.387948513031006}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 694, "completion_tokens": 369, "duration": 20.384016513824463}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1335, "completion_tokens": 796, "duration": 30.135268926620483}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1033, "completion_tokens": 587, "duration": 35.42738676071167}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 803, "completion_tokens": 491, "duration": 21.221871614456177}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 754, "completion_tokens": 423, "duration": 17.934813499450684}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 861, "completion_tokens": 587, "duration": 34.07517099380493}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 888, "completion_tokens": 493, "duration": 30.476666927337646}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [(s[-1] + s[:-1]) if len(s) == 3 else s for s in [s[(3 * i):min((3 * i + 3), len(s)) for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)", "prompt_tokens": 2549, "completion_tokens": 1076, "duration": 34.221848011016846}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num):\n        if num <= 1:\n            return num\n        a, b = 0, 1\n        for _ in range(2, num+1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num == fib(num):\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 669, "completion_tokens": 457, "duration": 24.002199411392212}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1127, "completion_tokens": 693, "duration": 28.081633806228638}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * 2  # Each pair of cars will result in a collision", "prompt_tokens": 1401, "completion_tokens": 692, "duration": 19.11015248298645}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 742, "completion_tokens": 366, "duration": 22.817176818847656}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0 and l.count(x) > 1)", "prompt_tokens": 2182, "completion_tokens": 1462, "duration": 44.78907370567322}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 815, "completion_tokens": 496, "duration": 22.764521598815918}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 625, "completion_tokens": 372, "duration": 17.781987190246582}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 898, "completion_tokens": 442, "duration": 29.291091203689575}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 695, "completion_tokens": 431, "duration": 33.59037780761719}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 824, "completion_tokens": 518, "duration": 20.373064517974854}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 873, "completion_tokens": 505, "duration": 27.957234144210815}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 734, "completion_tokens": 453, "duration": 23.93537473678589}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 987, "completion_tokens": 594, "duration": 36.95602369308472}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 702, "completion_tokens": 387, "duration": 15.663730144500732}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 487, "completion_tokens": 214, "duration": 11.161195278167725}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 926, "completion_tokens": 491, "duration": 19.82978057861328}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 606, "completion_tokens": 370, "duration": 21.083868741989136}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 631, "completion_tokens": 326, "duration": 16.477149724960327}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 729, "completion_tokens": 437, "duration": 19.567880153656006}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 822, "completion_tokens": 441, "duration": 32.40011811256409}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(n)\n    return max(factors) if factors else None", "prompt_tokens": 794, "completion_tokens": 612, "duration": 26.16429376602173}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 607, "completion_tokens": 261, "duration": 10.832367897033691}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 783, "completion_tokens": 480, "duration": 35.45916724205017}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test with a polynomial of degree 4\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Degree 4 polynomial failed\"\n\n# Test with a polynomial of degree 2\nassert derivative([1, 2, 3]) == [2, 6], \"Degree 2 polynomial failed\"\n\n# Test with a constant polynomial (should return an empty list)\nassert derivative([5]) == [], \"Constant polynomial failed\"\n\n# Test with a linear polynomial (degree 1)\nassert derivative([3, 2]) == [2], \"Linear polynomial failed\"\n\n# Test with a cubic polynomial\nassert derivative([0, 0, 3, 1]) == [0, 6, 3], \"Cubic polynomial with leading 0s failed\"\n\n# Test with negative coefficients\nassert derivative([-3, 5, -2, 4]) == [5, -4, 12], \"Polynomial with negative coefficients failed\"\n\n# Test with a polynomial where the derivative has a 0 coefficient\nassert derivative([2, 0, 4]) == [0, 8], \"Polynomial resulting in 0 coefficient in derivative failed\"\n\n# Test with an empty polynomial (should probably return an empty list as well)\nassert derivative([]) == [], \"Empty list failed\"\n\n# Test with a polynomial that has a 0 coefficient in the middle\nassert derivative([1, 3, 0, 2]) == [3, 0, 6], \"Polynomial with 0 coefficient in the middle failed\"\n\n# Test with large coefficients\nassert derivative([100, 200, 300]) == [200, 600], \"Polynomial with large coefficients failed\"", "prompt_tokens": 772, "completion_tokens": 771, "duration": 20.830705642700195}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 869, "completion_tokens": 460, "duration": 17.201690912246704}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 774, "completion_tokens": 391, "duration": 22.646526098251343}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 989, "completion_tokens": 739, "duration": 29.5701801776886}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 904, "completion_tokens": 521, "duration": 20.319427967071533}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    \n    return n - apples - oranges", "prompt_tokens": 1009, "completion_tokens": 444, "duration": 36.34032845497131}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(index, node) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_value = min(even_nodes, key=lambda x: x[1])[1]\n    smallest_value_indices = [index for index, node in even_nodes if node == smallest_value]\n    return [smallest_value, min(smallest_value_indices)]\n\n# Test cases are unchanged", "prompt_tokens": 1337, "completion_tokens": 633, "duration": 26.933518886566162}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    result = -1\n    for num, freq in freq_map.items():\n        if num > freq and freq >= result:\n            result = num\n\n    return result", "prompt_tokens": 910, "completion_tokens": 480, "duration": 32.29757499694824}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 912, "completion_tokens": 530, "duration": 38.490477323532104}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 842, "completion_tokens": 509, "duration": 64.79164838790894}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1226, "completion_tokens": 608, "duration": 116.18468046188354}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 959, "completion_tokens": 516, "duration": 22.95076632499695}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 <= sum2 else lst2", "prompt_tokens": 1113, "completion_tokens": 599, "duration": 22.386077642440796}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            factors.append(i)\n    return count == 3 and len(set(factors)) == 3", "prompt_tokens": 1691, "completion_tokens": 1302, "duration": 44.72669053077698}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 1139, "completion_tokens": 695, "duration": 41.617602825164795}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 749, "completion_tokens": 394, "duration": 14.880951642990112}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 1214, "completion_tokens": 469, "duration": 18.30241346359253}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 851, "completion_tokens": 414, "duration": 15.77329683303833}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 760, "completion_tokens": 410, "duration": 15.118580102920532}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1178, "completion_tokens": 671, "duration": 25.007063150405884}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 666, "completion_tokens": 393, "duration": 24.787182331085205}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return 2 * 9 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 1021, "completion_tokens": 677, "duration": 23.075733184814453}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 997, "completion_tokens": 570, "duration": 23.54846501350403}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 772, "completion_tokens": 518, "duration": 22.805189609527588}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 990, "completion_tokens": 586, "duration": 22.050259113311768}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 2280, "completion_tokens": 1294, "duration": 56.55591940879822}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array) if (array[0] + array[-1]) % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1234, "completion_tokens": 683, "duration": 25.086569786071777}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                start = ord('a')\n            else:\n                start = ord('A')\n            result += chr((ord(char) - start + shift) % 26 + start)\n        else:\n            result += char\n    return result", "prompt_tokens": 758, "completion_tokens": 440, "duration": 15.397537469863892}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst = [x for x in lst if x != smallest]\n    if not lst:\n        return None\n    return min(lst)", "prompt_tokens": 827, "completion_tokens": 452, "duration": 18.06858491897583}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split('[.!?]', S) if sentence.strip().startswith(\"I\"))\n\nimport re", "prompt_tokens": 743, "completion_tokens": 382, "duration": 22.09251046180725}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 883, "completion_tokens": 485, "duration": 27.402632236480713}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr(ord(char) + 2)\n            else:\n                new_char = char.swapcase()\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 815, "completion_tokens": 502, "duration": 21.98062562942505}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7", "prompt_tokens": 1445, "completion_tokens": 1032, "duration": 52.41831111907959}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False", "prompt_tokens": 913, "completion_tokens": 452, "duration": 24.443241119384766}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 986, "completion_tokens": 594, "duration": 22.727411031723022}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 697, "completion_tokens": 348, "duration": 14.842365026473999}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 618, "completion_tokens": 329, "duration": 41.980769634246826}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5 if float(value) > 0 else float(value) - 0.5)", "prompt_tokens": 3381, "completion_tokens": 1920, "duration": 46.71130728721619}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 1066, "completion_tokens": 687, "duration": 39.17015790939331}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r',|\\s', s)", "prompt_tokens": 764, "completion_tokens": 369, "duration": 17.4896342754364}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 824, "completion_tokens": 508, "duration": 23.84216856956482}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 860, "completion_tokens": 436, "duration": 31.4521586894989}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 767, "completion_tokens": 417, "duration": 15.039577722549438}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [names[num-1] for num in filtered_arr]", "prompt_tokens": 1128, "completion_tokens": 469, "duration": 20.402831554412842}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 1003, "completion_tokens": 655, "duration": 27.61352014541626}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1014, "completion_tokens": 492, "duration": 28.541919946670532}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sum_of_digits = sum(int(d) for d in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 716, "completion_tokens": 351, "duration": 18.46791172027588}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr_sorted = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == arr_sorted:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1270, "completion_tokens": 555, "duration": 28.797417879104614}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 0 for x in lst1) == len(lst1) else \"NO\"", "prompt_tokens": 1048, "completion_tokens": 513, "duration": 20.24314594268799}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 923, "completion_tokens": 501, "duration": 22.34474205970764}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1074, "completion_tokens": 604, "duration": 33.2302508354187}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), i+1, sum(int(d) % 2 != 0 for d in s), i+1) for i, s in enumerate(lst)]", "prompt_tokens": 2083, "completion_tokens": 1366, "duration": 49.71978688240051}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 814, "completion_tokens": 523, "duration": 31.117849826812744}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total = 0\n    for row in grid:\n        total += sum(row)\n    return math.ceil(total / capacity)", "prompt_tokens": 3457, "completion_tokens": 1833, "duration": 61.750887632369995}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 977, "completion_tokens": 496, "duration": 18.62304377555847}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiou\"\n        return sum(1 for letter in word if letter.isalpha() and letter.lower() not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1169, "completion_tokens": 696, "duration": 25.577298402786255}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 898, "completion_tokens": 510, "duration": 26.749497890472412}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1046, "completion_tokens": 640, "duration": 23.867318153381348}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k]", "prompt_tokens": 1094, "completion_tokens": 495, "duration": 29.573193073272705}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 782, "completion_tokens": 444, "duration": 16.483219861984253}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    total = 0\n    count = 0\n    for num in arr:\n        if 10 <= abs(num) <= 99 and count < k:\n            total += num\n            count += 1\n    return total", "prompt_tokens": 995, "completion_tokens": 616, "duration": 32.50534224510193}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1257, "completion_tokens": 686, "duration": 30.64321732521057}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1096, "completion_tokens": 591, "duration": 27.232086420059204}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 951, "completion_tokens": 548, "duration": 24.58131194114685}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst) or lst != sorted(lst):\n        return False\n    return True", "prompt_tokens": 1078, "completion_tokens": 430, "duration": 20.327608823776245}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1209, "completion_tokens": 632, "duration": 21.829635620117188}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n\n    return product * sum_magnitudes", "prompt_tokens": 861, "completion_tokens": 513, "duration": 22.389251708984375}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    def backtrack(path, visited):\n        if len(path) == k:\n            return path\n        for i in range(n):\n            for j in range(n):\n                if (i, j) not in visited:\n                    new_path = path + [grid[i][j]]\n                    new_visited = visited.union({(i, j)})\n                    res = backtrack(new_path, new_visited)\n                    if res:\n                        return res\n    return backtrack([], set())", "prompt_tokens": 2974, "completion_tokens": 1620, "duration": 42.057045459747314}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    \n    result = [3, 2]\n    a, b, c = 3, 2, 8\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = a + b + c\n            a, b, c = b, c, next_val\n        \n        result.append(next_val)\n    \n    return result", "prompt_tokens": 1087, "completion_tokens": 579, "duration": 19.376713037490845}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 603, "completion_tokens": 324, "duration": 21.76132869720459}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > close_brackets:\n            close_brackets += 1\n    \n    return open_brackets > 0 and open_brackets == close_brackets", "prompt_tokens": 1408, "completion_tokens": 819, "duration": 24.57387900352478}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num) ** 2\n    return total", "prompt_tokens": 847, "completion_tokens": 385, "duration": 19.15976595878601}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum())", "prompt_tokens": 853, "completion_tokens": 431, "duration": 28.45948314666748}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            idx = i - 1\n    return idx", "prompt_tokens": 817, "completion_tokens": 477, "duration": 27.51493763923645}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [n for n in lst if n < 0]\n    positives = [p for p in lst if p > 0]\n    \n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    \n    return (max_neg, min_pos)", "prompt_tokens": 904, "completion_tokens": 521, "duration": 32.47052478790283}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    if type(a) == str and type(b) == str:\n        if \".\" in a and \".\" in b:\n            return max(float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\")), key=float)\n        return max(a, b)\n    if type(a) == int and type(b) == float:\n        return max(float(a), b)\n    if type(a) == float and type(b) == int:\n        return max(a, float(b))\n    if (type(a) == int or type(a) == float) and type(b) == str:\n        return max(float(a), float(b.replace(\",\", \".\")), key=float)\n    if type(a) == str and (type(b) == int or type(b) == float):\n        return max(float(a.replace(\",\", \".\"), b), key=float)", "prompt_tokens": 1249, "completion_tokens": 1012, "duration": 44.5353569984436}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True", "prompt_tokens": 697, "completion_tokens": 392, "duration": 18.67725706100464}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)", "prompt_tokens": 873, "completion_tokens": 535, "duration": 34.61802816390991}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result.rstrip(\"-\") + \"-\"\n        else:\n            result += \"_\" if consecutive_spaces <= 2 else \"-\"\n            result += char\n            consecutive_spaces = 0\n    return result.rstrip(\"-\").replace(\" \", \"_\")", "prompt_tokens": 716, "completion_tokens": 416, "duration": 18.10540246963501}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or len(file_name.split('.')[0]) == 0 or len(file_name.split('.')[1]) != 3 or not file_name.split('.')[1].isalpha() or sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1076, "completion_tokens": 546, "duration": 24.384273052215576}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1162, "completion_tokens": 716, "duration": 28.813889026641846}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_primes(words):\n        return [word for word in words if is_prime(len(word))]\n\n    return ' '.join(get_primes(sentence.split()))", "prompt_tokens": 1745, "completion_tokens": 1125, "duration": 44.12754821777344}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1146, "completion_tokens": 717, "duration": 38.88498258590698}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 961, "completion_tokens": 594, "duration": 24.201660633087158}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 806, "completion_tokens": 449, "duration": 23.36371898651123}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 905, "completion_tokens": 485, "duration": 18.295891046524048}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 1174, "completion_tokens": 699, "duration": 27.045926570892334}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 994, "completion_tokens": 466, "duration": 18.3525812625885}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 685, "completion_tokens": 407, "duration": 15.378362894058228}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)\n\n# Test with a mix of odd and even positive numbers, including zero\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with all negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test with a mix of a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Test with a single zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0\n\n# Test with all odd positive numbers\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test with all even positive numbers, including zero\nassert double_the_difference([2, 4, 0]) == 0\n\n# Test with non-integer values in the list (these should be ignored)\nassert double_the_difference([1.5, 2.5, 3, 4]) == 9\n\n# Test with negative odd numbers (they should be ignored)\nassert double_the_difference([-3, -5, -7]) == 0\n\n# Test with a large mix of numbers\nassert double_the_difference([10, 23, -1, 0, 5.5, 7, 42]) == 23**2 + 7**2\n\n# Test with all non-integer types, including floats and strings (they should all be ignored)\nassert double_the_difference([\"hello\", 1.2, 3.4, False]) == 0", "prompt_tokens": 797, "completion_tokens": 714, "duration": 23.462443828582764}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - pred) if score != pred else 0 for score, pred in zip(game, guess)]", "prompt_tokens": 1121, "completion_tokens": 514, "duration": 22.623530387878418}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1229, "completion_tokens": 570, "duration": 23.70763397216797}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 1249, "completion_tokens": 852, "duration": 43.7838408946991}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 572, "completion_tokens": 329, "duration": 17.621331691741943}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 858, "completion_tokens": 653, "duration": 31.604589462280273}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 759, "completion_tokens": 411, "duration": 17.850801944732666}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word", "prompt_tokens": 816, "completion_tokens": 486, "duration": 29.080153703689575}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1176, "completion_tokens": 487, "duration": 18.99564242362976}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1073, "completion_tokens": 592, "duration": 24.692364931106567}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 717, "completion_tokens": 383, "duration": 13.711384057998657}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 744, "completion_tokens": 440, "duration": 15.57682752609253}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 870, "completion_tokens": 513, "duration": 28.530043840408325}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 928, "completion_tokens": 564, "duration": 32.06836175918579}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current += char\n            if current.count(\"(\") == current.count(\")\"):\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 766, "completion_tokens": 420, "duration": 29.326038360595703}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 734, "completion_tokens": 402, "duration": 25.796621561050415}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 881, "completion_tokens": 514, "duration": 27.277106523513794}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_num = mean(numbers)\n    return sum(abs(num - mean_num) for num in numbers) / len(numbers)", "prompt_tokens": 826, "completion_tokens": 460, "duration": 25.265398025512695}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 879, "completion_tokens": 573, "duration": 31.067660570144653}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    count = 0\n    max_count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            max_count = max(max_count, count)\n        elif char == ')':\n            count -= 1\n        \n        if char == ' ':\n            levels.append(max_count)\n            max_count = 0\n    \n    levels.append(max_count)\n    \n    return levels", "prompt_tokens": 845, "completion_tokens": 549, "duration": 24.100483655929565}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 459, "duration": 27.106410026550293}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 889, "completion_tokens": 552, "duration": 21.235130071640015}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result", "prompt_tokens": 800, "completion_tokens": 481, "duration": 23.68365168571472}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    return string", "prompt_tokens": 897, "completion_tokens": 583, "duration": 28.545480966567993}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for char1, char2 in zip(a, b):\n        res += str(int(char1) ^ int(char2))\n    return res", "prompt_tokens": 784, "completion_tokens": 502, "duration": 23.988295555114746}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 742, "completion_tokens": 381, "duration": 18.785795211791992}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 686, "completion_tokens": 392, "duration": 27.13879132270813}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 593, "completion_tokens": 334, "duration": 25.186294555664062}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 783, "completion_tokens": 318, "duration": 14.681442022323608}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 768, "completion_tokens": 466, "duration": 20.583371877670288}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes if note in durations]\n\n# Test with a single whole note\nassert parse_music('o') == [4], \"Test with a single whole note should return [4]\"\n\n# Test with a single half note\nassert parse_music('o|') == [2], \"Test with a single half note should return [2]\"\n\n# Test with a single quarter note\nassert parse_music('.|') == [1], \"Test with a single quarter note should return [1]\"\n\n# Test with a combination of all note types\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Combination of all note types\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Test with multiple whole notes\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Test with multiple half notes\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Test with multiple quarter notes\"\n\n# Test with empty string\nassert parse_music('') == [], \"Empty string should return an empty list\"\n\n# Test with spaces between notes\nassert parse_music('o   o|  .|     o|') == [4, 2, 1, 2], \"Test with spaces between notes\"\n\n# Test with no space between notes (invalid format but should handle gracefully if assumed)\n# Assuming the function will treat each character individually if not separated by space (not part of original spec)\nassert parse_music('oo|.|o|o|.||.|o') == [], \"Test with no space between notes should return empty list or handle gracefully\"\n\n# Test with an invalid note\nassert parse_music('x y z') == [], \"Test with an invalid note should return an empty list or handle gracefully\"\n\n# Test with only spaces (no notes)\nassert parse_music('     ') == [], \"String with only spaces should return an empty list\"", "prompt_tokens": 1804, "completion_tokens": 1543, "duration": 46.938170433044434}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if substring == \"\":\n        return len(string) + 1\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 850, "completion_tokens": 559, "duration": 29.93525457382202}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 654, "completion_tokens": 372, "duration": 14.41625714302063}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min((abs(a - b), a, b) for a in numbers for b in numbers if a != b)\n    return (closest_pair[1], closest_pair[2])", "prompt_tokens": 1005, "completion_tokens": 557, "duration": 36.34925055503845}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 883, "completion_tokens": 511, "duration": 22.218056201934814}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 721, "completion_tokens": 394, "duration": 16.74338960647583}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 517, "completion_tokens": 267, "duration": 12.779345989227295}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 715, "completion_tokens": 469, "duration": 20.528206825256348}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "prompt_tokens": 850, "completion_tokens": 476, "duration": 18.580222845077515}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 728, "completion_tokens": 416, "duration": 20.74824595451355}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 561, "completion_tokens": 317, "duration": 16.941171646118164}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 763, "completion_tokens": 492, "duration": 28.929547548294067}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 786, "completion_tokens": 468, "duration": 18.379642963409424}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 866, "completion_tokens": 478, "duration": 18.13186478614807}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 659, "completion_tokens": 334, "duration": 19.12817144393921}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1236, "completion_tokens": 697, "duration": 25.377514123916626}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_third_values = [l[i] for i in third_indices]\n    sorted_third_values.sort()\n    \n    result = l.copy()\n    for i in third_indices:\n        result[i] = sorted_third_values.pop(0)\n    \n    return result", "prompt_tokens": 972, "completion_tokens": 574, "duration": 24.08861494064331}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 860, "completion_tokens": 548, "duration": 29.89756488800049}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 727, "completion_tokens": 396, "duration": 15.827424049377441}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 814, "completion_tokens": 536, "duration": 19.75217366218567}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1007, "completion_tokens": 621, "duration": 25.72021770477295}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1174, "completion_tokens": 832, "duration": 46.51544523239136}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    count = 0\n    while count < n:\n        num = fib(i)\n        if is_prime(num):\n            count += 1\n        i += 1\n    return num", "prompt_tokens": 733, "completion_tokens": 538, "duration": 20.550398349761963}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1003, "completion_tokens": 569, "duration": 23.434619426727295}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * 2", "prompt_tokens": 769, "completion_tokens": 297, "duration": 13.373656034469604}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 786, "completion_tokens": 410, "duration": 16.486074209213257}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 950, "completion_tokens": 493, "duration": 19.54751229286194}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 775, "completion_tokens": 470, "duration": 17.90769124031067}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 492, "completion_tokens": 239, "duration": 9.264874458312988}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 980, "completion_tokens": 565, "duration": 29.40626859664917}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 753, "completion_tokens": 482, "duration": 21.096052169799805}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join([char for char in text if char.isalnum()]).lower()\n    return text == text[::-1]", "prompt_tokens": 710, "completion_tokens": 423, "duration": 19.131875038146973}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 850, "completion_tokens": 482, "duration": 17.78543996810913}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 678, "completion_tokens": 358, "duration": 20.146159648895264}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 927, "completion_tokens": 534, "duration": 37.10582995414734}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "prompt_tokens": 865, "completion_tokens": 550, "duration": 24.252341508865356}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 450, "completion_tokens": 182, "duration": 7.288718223571777}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 774, "completion_tokens": 339, "duration": 18.28167700767517}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 680, "completion_tokens": 469, "duration": 24.447061777114868}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 648, "completion_tokens": 340, "duration": 20.178090572357178}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing", "prompt_tokens": 774, "completion_tokens": 477, "duration": 22.75983476638794}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 927, "completion_tokens": 546, "duration": 34.23881936073303}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)", "prompt_tokens": 596, "completion_tokens": 435, "duration": 15.308189868927002}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 681, "completion_tokens": 335, "duration": 19.551918983459473}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 699, "completion_tokens": 399, "duration": 18.267288208007812}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * c for i, c in enumerate(xs)][1:]", "prompt_tokens": 1016, "completion_tokens": 641, "duration": 23.558363676071167}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 935, "completion_tokens": 516, "duration": 24.883954763412476}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouy'\n    \n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    \n    if s[-1].lower() == 'y':\n        count -= 1\n    \n    return count", "prompt_tokens": 812, "completion_tokens": 440, "duration": 14.674646854400635}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 741, "completion_tokens": 446, "duration": 16.124977827072144}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if 'A' <= char <= 'Z')", "prompt_tokens": 861, "completion_tokens": 483, "duration": 29.772783994674683}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[4])\n    return n - apples - oranges", "prompt_tokens": 989, "completion_tokens": 425, "duration": 25.868929624557495}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, num) for i, num in enumerate(arr) if num % 2 == 0]\n    if not evens:\n        return []\n\n    smallest_even = min(evens, key=lambda x: (x[1], x[0]))\n    return [smallest_even[1], smallest_even[0]]", "prompt_tokens": 1283, "completion_tokens": 556, "duration": 22.79792022705078}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = -1\n    for num, count in counts.items():\n        if num > 0 and count >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 1061, "completion_tokens": 622, "duration": 24.028389930725098}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 922, "completion_tokens": 540, "duration": 23.30786442756653}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 979, "completion_tokens": 646, "duration": 35.252397298812866}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False", "prompt_tokens": 1311, "completion_tokens": 702, "duration": 38.16616439819336}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 1009, "completion_tokens": 566, "duration": 19.529040575027466}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 969, "completion_tokens": 471, "duration": 19.414443254470825}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test with the example given in the docstring\nassert is_multiply_prime(30) == True\n\n# Test with a number that is not the multiplication of exactly 3 prime numbers\nassert is_multiply_prime(10) == False\n\n# Test with 1, which is not a prime nor the product of primes\nassert is_multiply_prime(1) == False\n\n# Test with a prime number itself (should return false as it's not a product of 3 primes)\nassert is_multiply_prime(5) == False\n\n# Test with a number that is the multiplication of a prime number by itself and another prime\nassert is_multiply_prime(27) == False\n\n# Test with a number that is the multiplication of the same prime number 3 times\nassert is_multiply_prime(8) == False\n\n# Test with the largest number less than 100 that is the product of 3 primes\nassert is_multiply_prime(97) == False\n\n# Test with a number that is the multiplication of 3 primes where one of the primes is the largest prime less than 10\nassert is_multiply_prime(3*5*7) == True\n\n# Test with the number 2*2*2 which is below 100 but not valid as it's not 3 different primes\nassert is_multiply_prime(8) == False\n\n# Test with a valid larger number that is the product of 3 primes\nassert is_multiply_prime(2*7*11) == True\n\n# Test with a negative number, should return false as primes are positive\nassert is_multiply_prime(-30) == False\n\n# Test with zero, should return false as it's not a product of primes\nassert is_multiply_prime(0) == False", "prompt_tokens": 890, "completion_tokens": 1009, "duration": 44.44008207321167}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n <= 1:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 2134, "completion_tokens": 1233, "duration": 48.33947491645813}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and int(a ** (1/3) + 0.00000001) ** 3 == a) or (a < 0 and int((-a) ** (1/3) + 0.00000001) ** 3 == -a)", "prompt_tokens": 1345, "completion_tokens": 804, "duration": 22.8877055644989}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1177, "completion_tokens": 436, "duration": 18.81216073036194}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 838, "completion_tokens": 405, "duration": 14.893692016601562}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 995, "completion_tokens": 645, "duration": 33.17491292953491}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1177, "completion_tokens": 658, "duration": 19.55919909477234}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 610, "completion_tokens": 326, "duration": 11.925817012786865}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 18 * 10 ** (n - 2)", "prompt_tokens": 511, "completion_tokens": 263, "duration": 13.480910062789917}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total = sum(int(digit) for digit in str(N))\n    return bin(total)[2:]", "prompt_tokens": 2962, "completion_tokens": 1868, "duration": 51.67754077911377}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0)", "prompt_tokens": 633, "completion_tokens": 378, "duration": 14.44069218635559}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 862, "completion_tokens": 458, "duration": 25.19516634941101}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test cases have been corrected and the function implementation is now correct", "prompt_tokens": 1463, "completion_tokens": 842, "duration": 45.25397777557373}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1317, "completion_tokens": 772, "duration": 42.81444597244263}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                base = ord('A')\n            else:\n                base = ord('a')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 820, "completion_tokens": 502, "duration": 26.577782154083252}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 815, "completion_tokens": 435, "duration": 16.080931425094604}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.?!]', S) if sentence.strip().startswith('I'))\n\nimport re\n# Test with a string that doesn't contain any sentences starting with \"I\"\nassert is_bored(\"Hello world. The sky is blue. Everyone is happy.\") == 0\n\n# Test with a single sentence that starts with \"I\"\nassert is_bored(\"I am feeling bored.\") == 1\n\n# Test with multiple sentences, one of which starts with \"I\"\nassert is_bored(\"The sky is blue. I love sunny days. What about you?\") == 1\n\n# Test with multiple sentences, more than one starts with \"I\"\nassert is_bored(\"I am bored. I want to go outside. The weather is nice.\") == 2\n\n# Test with sentences that start with \"I\" but are not immediately after the delimiter\nassert is_bored(\" The sky is blue. I love sunny days.  I want to go outside.\") == 2\n\n# Test with no sentences in the string\nassert is_bored(\"\") == 0\n\n# Test with only delimiters in the string\nassert is_bored(\".?!\") == 0\n\n# Test with sentences that have \"I\" not as the starting word\nassert is_bored(\"Hello, I am here. You know I am always early.\") == 0\n\n# Test with sentences that start with lowercase \"i\"\nassert is_bored(\"i am feeling bored today. i want to do something exciting.\") == 0\n\n# Test with sentences that contain \"I\" in quotes or as part of another word\nassert is_bored('\"I am here.\" Is it really you? Imagining the best for everyone.') == 1\n\n# Test with sentences that start with \"I\" followed by punctuation\nassert is_bored(\"I'm feeling great. Isn't it a wonderful day? I've been better.\") == 3\n\n# Test with a long string and multiple sentences with various conditions\nassert is_bored(\"Today is a good day. I think I'll go for a walk. Have you seen my shoes? I haven't found them yet. Let's go together!\") == 2", "prompt_tokens": 832, "completion_tokens": 902, "duration": 24.138030767440796}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 996, "completion_tokens": 597, "duration": 24.607550859451294}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                new_letter = chr((ord(letter) + 2 - ord('a')) % 26 + ord('A')) if letter.isupper() else chr((ord(letter) + 2 - ord('a')) % 26 + ord('a'))\n                encoded_message += new_letter\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message", "prompt_tokens": 709, "completion_tokens": 436, "duration": 14.603863716125488}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = max(filter(is_prime, lst), default=0)\n    return sum_digits(max_prime)", "prompt_tokens": 1530, "completion_tokens": 878, "duration": 44.787405014038086}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())", "prompt_tokens": 940, "completion_tokens": 474, "duration": 22.103281497955322}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n\n# Test with n=0, expecting an empty list because there are no primes less than 0\nassert count_up_to(0) == []\n\n# Test with n=1, expecting an empty list because there are no primes less than 1\nassert count_up_to(1) == []\n\n# Test with n=2, expecting an empty list because there are no primes less than 2\nassert count_up_to(2) == []\n\n# Test with a small number, n=5, expecting [2, 3] because these are the primes less than 5\nassert count_up_to(5) == [2, 3]\n\n# Test with n=11, which includes several primes less than itself\nassert count_up_to(11) == [2, 3, 5, 7]\n\n# Test with n=20, which includes multiple primes less than itself\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\n# Test with n=18, a number that is not prime but has primes less than itself\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n\n# Test with a larger number to ensure the function scales, n=30\nassert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n# Edge case: Test with a prime number to see if it correctly excludes the number itself, n=13\nassert count_up_to(13) == [2, 3, 5, 7, 11]\n\n# Test the function with a negative number, even though the function specifies non-negative integers, to see if it handles it gracefully\n# This might depend on how strictly the function adheres to its contract; it might raise an error, or it could return an empty list.\n# For the sake of this unit test, let's expect an empty list, but this behavior is undefined based on the docstring.\nassert count_up_to(-1) == []\n\n# Test with a very close prime number, n=3, expecting [2] because 2 is the only prime less than 3\nassert count_up_to(3) == [2]", "prompt_tokens": 957, "completion_tokens": 1059, "duration": 38.46427392959595}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 738, "completion_tokens": 389, "duration": 23.497285842895508}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 1341, "completion_tokens": 874, "duration": 33.33715057373047}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) % 1 >= 0.5 else int(float(value) - 0.5)", "prompt_tokens": 973, "completion_tokens": 522, "duration": 30.801717281341553}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2*i)\n        else:\n            result.append(n + 2*i + 1)\n    return result", "prompt_tokens": 841, "completion_tokens": 457, "duration": 20.078598737716675}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 833, "completion_tokens": 439, "duration": 20.863295078277588}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y + 1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y + 1)) else -1", "prompt_tokens": 803, "completion_tokens": 491, "duration": 26.88912272453308}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 874, "completion_tokens": 453, "duration": 20.414406299591064}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 932, "completion_tokens": 597, "duration": 22.354600429534912}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(num for num in arr if 1 <= num <= 9)\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[num-1] for num in reversed_arr]", "prompt_tokens": 1087, "completion_tokens": 435, "duration": 27.437540531158447}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 948, "completion_tokens": 600, "duration": 41.782065868377686}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n\n    return (even_count, odd_count)", "prompt_tokens": 1141, "completion_tokens": 637, "duration": 35.021859884262085}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 809, "completion_tokens": 424, "duration": 16.044238805770874}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return sorted(arr) == arr or sorted(arr) == arr[-1:] + arr[:-1]", "prompt_tokens": 2262, "completion_tokens": 1124, "duration": 31.304039001464844}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    total_even_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    return \"YES\" if total_even_lst1 == len(lst1) or total_even_lst1 <= len(lst1) + len(lst2) else \"NO\"", "prompt_tokens": 1126, "completion_tokens": 619, "duration": 23.003952741622925}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 1049, "completion_tokens": 627, "duration": 32.107179164886475}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1020, "completion_tokens": 550, "duration": 30.24386215209961}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(sum(1 for char in string if int(char) % 2 != 0)) for string in lst]", "prompt_tokens": 1262, "completion_tokens": 795, "duration": 34.50338339805603}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 829, "completion_tokens": 528, "duration": 20.884159564971924}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    def calculate_buckets_needed(row, capacity):\n        return math.ceil(sum(row) / capacity)\n    \n    buckets_needed = sum(calculate_buckets_needed(row, capacity) for row in grid)\n    return buckets_needed", "prompt_tokens": 1392, "completion_tokens": 621, "duration": 22.467714548110962}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1153, "completion_tokens": 658, "duration": 27.298300743103027}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\nassert select_words(\"\", 3) == [], \"Empty string should return an empty list\"\nassert select_words(\"Hello\", 3) == [\"Hello\"], \"Single word with 3 consonants should be returned\"\nassert select_words(\"Sky\", 2) == [], \"Single word without 2 consonants should not be returned\"\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Words with exactly 3 consonants should be returned\"\nassert select_words(\"simple white space\", 2) == [], \"No words with exactly 2 consonants should return an empty list\"\nassert select_words(\"big big bridge\", 4) == [\"bridge\"], \"Only 'bridge' has exactly 4 consonants\"\nassert select_words(\"A big Little dog\", 3) == [\"big\", \"dog\"], \"Words with exactly 3 consonants, ignoring case\"\nassert select_words(\"  Hello world  \", 4) == [\"world\"], \"Leading/trailing spaces should be ignored, 'world' has 4 consonants\"\nassert select_words(\"Crazy rhythm\", 5) == [\"rhythm\"], \"'rhythm' has exactly 5 consonants including y\"\nassert select_words(\"I am in a queue\", 0) == [\"I\", \"a\"], \"Words without consonants should be returned\"\nassert select_words(\"This is a particularly long test to see if the function can handle a lot of consonants\", 10) == [\"particularly\", \"consonants\"], \"Words with exactly 10 consonants should be returned\"", "prompt_tokens": 3769, "completion_tokens": 2490, "duration": 67.99274754524231}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 1026, "completion_tokens": 640, "duration": 21.63857364654541}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 1025, "completion_tokens": 577, "duration": 20.714543104171753}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1222, "completion_tokens": 623, "duration": 42.70013236999512}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 723, "completion_tokens": 385, "duration": 21.8910174369812}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 1040, "completion_tokens": 632, "duration": 85.12828183174133}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1382, "completion_tokens": 803, "duration": 40.98477244377136}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if not (1 <= month <= 12) or not (1 <= day <= 31):\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0) and day > 29:\n                return False\n            elif day > 28:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 1273, "completion_tokens": 708, "duration": 23.832679748535156}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 987, "completion_tokens": 584, "duration": 36.89697194099426}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted_lst", "prompt_tokens": 1165, "completion_tokens": 521, "duration": 23.401052951812744}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1312, "completion_tokens": 752, "duration": 37.7051043510437}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        sum_magnitude += abs(num)\n    return product * sum_magnitude", "prompt_tokens": 872, "completion_tokens": 513, "duration": 25.880472898483276}
{"task_id": "HumanEval/129", "generated_code": "[improved impl]: \ndef minPath(grid, k):\n    def dfs(curr, path):\n        if len(path) == k:\n            return path\n        x, y = curr\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in path:\n                new_path = dfs((new_x, new_y), path + [(new_x, new_y)])\n                if new_path:\n                    return new_path\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs((i, j), [(i, j)])\n            if path:\n                return [grid[x][y] for x, y in path]", "prompt_tokens": 5625, "completion_tokens": 2904, "duration": 71.395423412323}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    res = [3]\n    if n == 0:\n        return res\n    res.append(1)\n    if n == 1:\n        return res\n    res.append(2)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            res.append(1 + i // 2)\n        else:\n            res.append(res[i-1] + res[i-2] + res[i-3])\n    return res", "prompt_tokens": 1139, "completion_tokens": 595, "duration": 32.114752769470215}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 575, "completion_tokens": 305, "duration": 20.687208890914917}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = []\n    \n    for bracket in string:\n        if bracket == '[':\n            open_brackets.append(bracket)\n        elif bracket == ']' and open_brackets:\n            open_brackets.pop()\n    \n    return len(open_brackets) < len(string) // 2 and len(open_brackets) > 0", "prompt_tokens": 802, "completion_tokens": 431, "duration": 22.262945890426636}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum((int(x) ** 2 for x in lst))\n    return total", "prompt_tokens": 1100, "completion_tokens": 632, "duration": 29.748159646987915}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-1] not in set(txt.strip().split()[-1])", "prompt_tokens": 1600, "completion_tokens": 952, "duration": 26.73362159729004}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 732, "completion_tokens": 395, "duration": 21.515784740447998}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 1018, "completion_tokens": 636, "duration": 23.09320044517517}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b\n    elif type(a) == int and type(b) == float:\n        return b if a < b else a\n    elif type(a) == float and type(b) == int:\n        return b if a < b else a\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        return a if float(a) > b else b\n    elif type(b) == str:\n        b = b.replace(',', '.')\n        return a if a > float(b) else b\n    else:\n        return None", "prompt_tokens": 997, "completion_tokens": 746, "duration": 34.438124895095825}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 683, "completion_tokens": 370, "duration": 16.500319004058838}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i ** i\n    return result", "prompt_tokens": 668, "completion_tokens": 333, "duration": 13.89063811302185}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 1008, "completion_tokens": 699, "duration": 27.02986240386963}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n\n    if '.' not in file_name:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1198, "completion_tokens": 690, "duration": 35.67223024368286}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 1226, "completion_tokens": 749, "duration": 38.9068706035614}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 863, "completion_tokens": 494, "duration": 21.589343786239624}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 996, "completion_tokens": 566, "duration": 22.66585063934326}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 883, "completion_tokens": 501, "duration": 44.18664741516113}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 876, "completion_tokens": 500, "duration": 26.07111954689026}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1029, "completion_tokens": 613, "duration": 33.715410470962524}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 1116, "completion_tokens": 637, "duration": 35.03846526145935}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1042, "completion_tokens": 514, "duration": 30.452746629714966}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 684, "completion_tokens": 412, "duration": 15.180046558380127}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) * 2", "prompt_tokens": 1007, "completion_tokens": 594, "duration": 27.656009197235107}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1103, "completion_tokens": 500, "duration": 20.42999839782715}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1284, "completion_tokens": 629, "duration": 23.04118037223816}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 949, "completion_tokens": 552, "duration": 21.46252989768982}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even, odd", "prompt_tokens": 630, "completion_tokens": 382, "duration": 20.71785593032837}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value in sorted(roman_numerals, reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n\n    return result.lower()", "prompt_tokens": 796, "completion_tokens": 550, "duration": 18.896291255950928}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False", "prompt_tokens": 908, "completion_tokens": 571, "duration": 39.7091760635376}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 791, "completion_tokens": 459, "duration": 20.98051142692566}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left]", "prompt_tokens": 1310, "completion_tokens": 616, "duration": 26.479120016098022}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1046, "completion_tokens": 565, "duration": 19.149603605270386}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = []\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(result)", "prompt_tokens": 726, "completion_tokens": 415, "duration": 16.805384874343872}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 759, "completion_tokens": 455, "duration": 19.591647386550903}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start = a if a % 2 == 0 else a + 1\n    return [i for i in range(start, b+1, 2)]", "prompt_tokens": 2422, "completion_tokens": 1466, "duration": 89.33346652984619}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 971, "completion_tokens": 607, "duration": 36.22597312927246}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_str = ''\n    for char in paren_string.replace(\" \", ''):\n        if char == '(':\n            count += 1\n            current_str += char\n        elif char == ')':\n            count -= 1\n            current_str += char\n            if count == 0:\n                result.append(current_str)\n                current_str = ''\n    return result", "prompt_tokens": 875, "completion_tokens": 567, "duration": 20.441658973693848}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 779, "completion_tokens": 447, "duration": 30.079198598861694}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 819, "completion_tokens": 452, "duration": 17.447282075881958}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 941, "completion_tokens": 575, "duration": 21.80473804473877}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 772, "completion_tokens": 466, "duration": 29.598119735717773}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n    \n    return result", "prompt_tokens": 844, "completion_tokens": 532, "duration": 19.561384439468384}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 808, "completion_tokens": 478, "duration": 20.931225061416626}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 785, "completion_tokens": 448, "duration": 25.49284338951111}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 870, "completion_tokens": 555, "duration": 23.037864446640015}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 996, "completion_tokens": 684, "duration": 23.882622718811035}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Strings must have equal length\")\n    \n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result", "prompt_tokens": 820, "completion_tokens": 565, "duration": 32.61583733558655}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 785, "completion_tokens": 447, "duration": 17.04222059249878}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 653, "completion_tokens": 367, "duration": 24.56867814064026}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string)+1)]\n    return prefixes", "prompt_tokens": 581, "completion_tokens": 320, "duration": 17.34419560432434}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 832, "completion_tokens": 367, "duration": 17.165727376937866}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 661, "completion_tokens": 355, "duration": 20.508060932159424}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "prompt_tokens": 2577, "completion_tokens": 1573, "duration": 88.6380262374878}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 783, "completion_tokens": 488, "duration": 26.951351642608643}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 663, "completion_tokens": 378, "duration": 14.891053199768066}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    \n    return pair", "prompt_tokens": 1057, "completion_tokens": 639, "duration": 84.83639669418335}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1015, "completion_tokens": 643, "duration": 24.076518058776855}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 662, "completion_tokens": 335, "duration": 20.644107341766357}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 490, "completion_tokens": 240, "duration": 15.429075002670288}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 614, "completion_tokens": 378, "duration": 18.22268772125244}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors\n\n\n# Test with prime number\nassert factorize(7) == [7], \"Should return the prime number itself\"\n\n# Test with number having multiple different prime factors\nassert factorize(30) == [2, 3, 5], \"Should return all prime factors\"\n\n# Test with perfect square of a prime number\nassert factorize(49) == [7, 7], \"Should return the prime factor repeated\"\n\n# Test with number having the same prime factor repeated multiple times\nassert factorize(8) == [2, 2, 2], \"Should return the repeated factor\"\n\n# Test with 1 (edge case)\nassert factorize(1) == [], \"Should return an empty list for 1\"\n\n# Test with a large number\nassert factorize(1001) == [7, 11, 13], \"Should handle large numbers correctly\"\n\n# Test with a number that is a product of two primes\nassert factorize(15) == [3, 5], \"Should return two different prime factors\"\n\n# Test with a cube of a prime number\nassert factorize(27) == [3, 3, 3], \"Should return the prime factor repeated three times\"\n\n# Test with a product of prime numbers and their powers\nassert factorize(2*2*3*3*5) == [2, 2, 3, 3, 5], \"Should handle products of prime numbers and their powers\"\n\n# Test with 0 (edge case, assuming function should handle gracefully)\n# Note: Depending on implementation and requirements, factorizing 0 might not be valid.\n# This test assumes the function will return an empty list, but this behavior might need to be defined.\nassert factorize(0) == [], \"Should return an empty list for 0, assuming 0 cannot be factorized\"", "prompt_tokens": 823, "completion_tokens": 859, "duration": 28.779130697250366}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for idx, num in enumerate(numbers) if num not in numbers[:idx] + numbers[idx + 1:]]", "prompt_tokens": 816, "completion_tokens": 515, "duration": 27.609808206558228}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 591, "completion_tokens": 344, "duration": 17.648163318634033}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 615, "completion_tokens": 344, "duration": 22.142454624176025}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 692, "completion_tokens": 374, "duration": 21.10871648788452}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 707, "completion_tokens": 323, "duration": 17.09085750579834}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 573, "completion_tokens": 249, "duration": 11.542853832244873}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return -xs[0] / xs[1]", "prompt_tokens": 3300, "completion_tokens": 2061, "duration": 60.42704939842224}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i, val in zip(indices, sorted_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1128, "completion_tokens": 725, "duration": 30.019104480743408}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 781, "completion_tokens": 469, "duration": 28.517632722854614}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 726, "completion_tokens": 395, "duration": 26.133317947387695}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 887, "completion_tokens": 609, "duration": 28.354313135147095}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 1077, "completion_tokens": 682, "duration": 38.956191301345825}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 889, "completion_tokens": 491, "duration": 18.39249610900879}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 731, "completion_tokens": 509, "duration": 35.95991039276123}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1134, "completion_tokens": 700, "duration": 45.336753368377686}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n ** 2", "prompt_tokens": 867, "completion_tokens": 395, "duration": 19.551404237747192}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 759, "completion_tokens": 383, "duration": 16.820707321166992}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l) if len(l) > 1 else False", "prompt_tokens": 1003, "completion_tokens": 532, "duration": 35.40731120109558}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 805, "completion_tokens": 496, "duration": 20.747628211975098}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 626, "completion_tokens": 373, "duration": 19.672428607940674}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    for _ in range(3, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 894, "completion_tokens": 476, "duration": 23.75126051902771}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 817, "completion_tokens": 549, "duration": 22.197468757629395}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 816, "completion_tokens": 506, "duration": 23.550183057785034}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 841, "completion_tokens": 473, "duration": 26.68023419380188}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 1699, "completion_tokens": 815, "duration": 34.398035764694214}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')", "prompt_tokens": 834, "completion_tokens": 435, "duration": 20.146878957748413}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 729, "completion_tokens": 414, "duration": 25.94737982749939}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 543, "completion_tokens": 275, "duration": 13.875752210617065}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 844, "completion_tokens": 409, "duration": 28.180957794189453}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 701, "completion_tokens": 467, "duration": 26.942997932434082}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 751, "completion_tokens": 442, "duration": 17.93809962272644}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 808, "completion_tokens": 519, "duration": 21.867842435836792}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 918, "completion_tokens": 537, "duration": 32.58831071853638}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 693, "completion_tokens": 432, "duration": 18.90993642807007}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 609, "completion_tokens": 263, "duration": 11.838240146636963}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 727, "completion_tokens": 429, "duration": 18.98049783706665}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i*coeff for i, coeff in enumerate(xs)][1:]\n\n# Test with a 5th degree polynomial coefficients\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Failed on 5th degree polynomial\"\n\n# Test with a 3rd degree polynomial coefficients\nassert derivative([1, 2, 3]) == [2, 6], \"Failed on 3rd degree polynomial\"\n\n# Test with a quadratic polynomial coefficients\nassert derivative([2, 4, 6]) == [4, 12], \"Failed on quadratic polynomial\"\n\n# Test with a linear polynomial coefficients\nassert derivative([5, 7]) == [7], \"Failed on linear polynomial\"\n\n# Test with a constant term only (0th degree polynomial)\nassert derivative([3]) == [], \"Failed on constant term\"\n\n# Test with an empty list, which implies a 0 polynomial\nassert derivative([]) == [], \"Failed on empty list as input\"\n\n# Test with high-degree polynomial with zeros in between non-zero coefficients\nassert derivative([1, 0, 2, 0, 3]) == [0, 4, 0, 12], \"Failed on polynomial with zeros in between coefficients\"\n\n# Test with a polynomial having a negative coefficient\nassert derivative([-1, 2, -3, 4]) == [2, -6, 12], \"Failed on polynomial with a negative coefficient\"\n\n# Test with a polynomial that has a large coefficient\nassert derivative([1000, 500]) == [500], \"Failed on polynomial with large coefficient\"\n\n# Test with coefficients that are floats\nassert derivative([0.5, 2.5, 3.5]) == [2.5, 7.0], \"Failed on polynomial with float coefficients\"", "prompt_tokens": 776, "completion_tokens": 774, "duration": 29.48658537864685}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 958, "completion_tokens": 549, "duration": 29.366780281066895}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels and (char.lower() != 'y' or s[-1].lower() == 'y'))", "prompt_tokens": 1020, "completion_tokens": 404, "duration": 15.29561972618103}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 689, "completion_tokens": 396, "duration": 16.572518825531006}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 960, "completion_tokens": 577, "duration": 23.787286281585693}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1124, "completion_tokens": 564, "duration": 34.061347007751465}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [n for n in arr if n % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]", "prompt_tokens": 1198, "completion_tokens": 461, "duration": 16.289796590805054}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if num > freq and freq > result:\n            result = freq\n    return result", "prompt_tokens": 1176, "completion_tokens": 718, "duration": 38.564085960388184}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    for i in range(len(lst)//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[-(i+1)])\n    \n    if len(lst) % 2 == 1:\n        result.append(sorted_lst[len(lst)//2])\n    \n    return result", "prompt_tokens": 804, "completion_tokens": 458, "duration": 21.94454574584961}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 793, "completion_tokens": 460, "duration": 17.62503170967102}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1183, "completion_tokens": 566, "duration": 26.986594200134277}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 954, "completion_tokens": 511, "duration": 28.441022157669067}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 973, "completion_tokens": 475, "duration": 18.184103965759277}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 809, "completion_tokens": 592, "duration": 34.109135389328}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "prompt_tokens": 1111, "completion_tokens": 678, "duration": 38.92887330055237}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 997, "completion_tokens": 427, "duration": 16.08932590484619}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = \"2357BD\"\n    return sum(1 for digit in num if digit in primes)", "prompt_tokens": 1142, "completion_tokens": 392, "duration": 24.145137786865234}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 1002, "completion_tokens": 583, "duration": 21.792282581329346}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 862, "completion_tokens": 512, "duration": 28.21675944328308}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1252, "completion_tokens": 792, "duration": 28.10751962661743}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 751, "completion_tokens": 484, "duration": 27.33159899711609}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 611, "completion_tokens": 373, "duration": 17.31342124938965}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(x) for x in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 869, "completion_tokens": 453, "duration": 20.740926265716553}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)", "prompt_tokens": 804, "completion_tokens": 549, "duration": 20.673741817474365}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 886, "completion_tokens": 482, "duration": 24.058666944503784}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1378, "completion_tokens": 749, "duration": 32.21675944328308}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def get_sum(arr):\n        return arr[0] + arr[-1]\n\n    if get_sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1296, "completion_tokens": 762, "duration": 32.59534978866577}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                shifted = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                shifted = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 762, "completion_tokens": 464, "duration": 21.259800910949707}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "prompt_tokens": 870, "completion_tokens": 474, "duration": 29.686675548553467}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace('!', '.').replace('?', '.').split('.') if sentence.strip().startswith('I') and sentence.strip() != 'I')", "prompt_tokens": 1714, "completion_tokens": 1164, "duration": 79.93669700622559}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 899, "completion_tokens": 479, "duration": 34.61697316169739}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"AEIOUaeiou\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).upper() if char.islower() else chr(ord(char) + 2).lower()\n            else:\n                encoded_message += char.upper() if char.islower() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 866, "completion_tokens": 570, "duration": 26.063252449035645}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in lst if is_prime(n)]\n    \n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    \n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 2199, "completion_tokens": 1178, "duration": 44.53016424179077}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 954, "completion_tokens": 492, "duration": 23.882339000701904}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1144, "completion_tokens": 756, "duration": 31.532465934753418}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 605, "completion_tokens": 256, "duration": 15.167367935180664}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 935, "completion_tokens": 646, "duration": 37.54742097854614}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5 if float(value) > 0 else float(value) - 0.5)", "prompt_tokens": 1953, "completion_tokens": 1238, "duration": 61.84648084640503}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 986, "completion_tokens": 607, "duration": 27.18826723098755}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]\n\n# Test with spaces and no commas\nassert words_string(\"Hello World\") == [\"Hello\", \"World\"]\n\n# Test with commas and no spaces\nassert words_string(\"First,Second,Third\") == [\"First\", \"Second\", \"Third\"]\n\n# Test with both commas and spaces\nassert words_string(\"Apple, Banana, Cherry, Date\") == [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n\n# Test with a single word (no commas or spaces)\nassert words_string(\"Solo\") == [\"Solo\"]\n\n# Test an empty string\nassert words_string(\"\") == []\n\n# Test with leading and trailing spaces\nassert words_string(\"  Leading and trailing  \") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Leading,Trailing,\") == [\"Leading\", \"Trailing\"]\n\n# Test with multiple spaces between words\nassert words_string(\"Multiple   Spaces\") == [\"Multiple\", \"Spaces\"]\n\n# Test with multiple commas between words\nassert words_string(\"One,,Two,,,Three\") == [\"One\", \"Two\", \"Three\"]\n\n# Test with a mix of multiple commas and spaces\nassert words_string(\"Mix, ,of , ,Commas,  and Spaces\") == [\"Mix\", \"of\", \"Commas\", \"and\", \"Spaces\"]\n\n# Test with numbers in string\nassert words_string(\"1, 2, 3, Four, Five\") == [\"1\", \"2\", \"3\", \"Four\", \"Five\"]\n\n# Test with special characters\nassert words_string(\"!@#$,^&*\") == [\"!@#$\", \"^&*\"]\n\n# Test with only commas (no actual words)\nassert words_string(\",,,,\") == []\n\n# Test with only spaces (no actual words)\nassert words_string(\"     \") == []", "prompt_tokens": 791, "completion_tokens": 779, "duration": 28.03352928161621}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 1025, "completion_tokens": 708, "duration": 31.541826963424683}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 875, "completion_tokens": 451, "duration": 32.32205104827881}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted(num for num in x if all(int(digit) % 2 != 0 for digit in str(num)))", "prompt_tokens": 850, "completion_tokens": 498, "duration": 30.557218074798584}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered_arr = sorted([num for num in arr if num in valid_numbers], reverse=True)\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [number_names[num - 1] for num in filtered_arr]", "prompt_tokens": 1250, "completion_tokens": 622, "duration": 45.112990379333496}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "prompt_tokens": 957, "completion_tokens": 568, "duration": 30.652149438858032}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n    \n    return (even_count, odd_count)", "prompt_tokens": 1054, "completion_tokens": 552, "duration": 34.12755584716797}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "prompt_tokens": 838, "completion_tokens": 442, "duration": 21.070131540298462}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    sorted_arr = sorted(arr)\n    return arr[min_idx:] + arr[:min_idx] == sorted_arr", "prompt_tokens": 1197, "completion_tokens": 473, "duration": 27.7963764667511}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 0 for x in lst1) == len(lst1) else \"NO\"", "prompt_tokens": 1187, "completion_tokens": 652, "duration": 43.081345081329346}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n\n    max_count = max(hist.values())\n    result = {key: val for key, val in hist.items() if val == max_count}\n    \n    return result", "prompt_tokens": 1018, "completion_tokens": 603, "duration": 32.511496782302856}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 915, "completion_tokens": 450, "duration": 17.322510480880737}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(x) % 2 != 0 for x in s), sum(str(i) for i in range(10)).replace(\"0\", \"\"), sum(str(i) for i in range(10)).replace(\"0\", \"\"), sum(str(i) for i in range(10)).replace(\"0\", \"\")) for s in lst]", "prompt_tokens": 1149, "completion_tokens": 720, "duration": 76.79766321182251}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 911, "completion_tokens": 611, "duration": 34.44041609764099}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    lowers = 0\n    for row in grid:\n        lowers += math.ceil(sum(row) / capacity)\n    return lowers", "prompt_tokens": 1680, "completion_tokens": 893, "duration": 82.50829720497131}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1113, "completion_tokens": 618, "duration": 23.50178050994873}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = sum(1 for letter in word if letter.lower() not in 'aeiou' and letter.isalpha())\n        return consonants\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1031, "completion_tokens": 565, "duration": 29.020182847976685}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n\n    return \"\"", "prompt_tokens": 862, "completion_tokens": 474, "duration": 19.743831157684326}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    str1, str2 = lst\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1073, "completion_tokens": 655, "duration": 37.53057599067688}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1131, "completion_tokens": 532, "duration": 77.98793911933899}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 875, "completion_tokens": 537, "duration": 19.84247326850891}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum_two_digits = sum(x for x in arr[:k] if 10 <= abs(x) < 100)\n    return sum_two_digits", "prompt_tokens": 1043, "completion_tokens": 646, "duration": 27.595032930374146}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(set(collatz) - {1})", "prompt_tokens": 1030, "completion_tokens": 457, "duration": 28.449140310287476}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1386, "completion_tokens": 901, "duration": 33.317174434661865}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 == 1)", "prompt_tokens": 1015, "completion_tokens": 623, "duration": 36.29601716995239}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(i) <= 1 for i in set(lst))", "prompt_tokens": 1193, "completion_tokens": 557, "duration": 30.891960620880127}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1279, "completion_tokens": 720, "duration": 44.949808835983276}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 956, "completion_tokens": 587, "duration": 31.92933440208435}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            return path\n        neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n        for nx, ny in neighbors:\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                new_visited = visited.copy()\n                new_visited.add((nx, ny))\n                new_path = path + [grid[nx][ny]]\n                res = dfs(nx, ny, new_visited, new_path)\n                if res:\n                    return res\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            start = grid[i][j]\n            visited = {(i, j)}\n            path = [start]\n            res = dfs(i, j, visited, path)\n            if res:\n                return res", "prompt_tokens": 1553, "completion_tokens": 793, "duration": 41.1457142829895}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [1]\n    if n == 0:\n        return seq\n    seq.append(3)\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    \n    return seq", "prompt_tokens": 1334, "completion_tokens": 779, "duration": 33.27898573875427}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 600, "completion_tokens": 321, "duration": 18.77266836166382}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = []\n    \n    for char in string:\n        if char == '[':\n            open_brackets.append(char)\n        elif char == ']' and open_brackets:\n            open_brackets.pop()\n    \n    return len(open_brackets) < len(string) // 2", "prompt_tokens": 710, "completion_tokens": 329, "duration": 18.024771690368652}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (num % 1 > 0)) ** 2\n    return total", "prompt_tokens": 933, "completion_tokens": 482, "duration": 23.709146738052368}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    else:\n        return False", "prompt_tokens": 880, "completion_tokens": 471, "duration": 19.689685106277466}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 830, "completion_tokens": 492, "duration": 31.59266495704651}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    \n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    \n    return (max_neg, min_pos)", "prompt_tokens": 924, "completion_tokens": 538, "duration": 23.415018796920776}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 981, "completion_tokens": 585, "duration": 39.916176319122314}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 8 == 0", "prompt_tokens": 1226, "completion_tokens": 727, "duration": 31.871782779693604}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0\")\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 751, "completion_tokens": 458, "duration": 30.674440145492554}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('   ', '-')\n    text = text.replace('  ', '__')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 737, "completion_tokens": 383, "duration": 30.97409749031067}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1001, "completion_tokens": 494, "duration": 18.362592220306396}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1139, "completion_tokens": 701, "duration": 29.926026105880737}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "prompt_tokens": 838, "completion_tokens": 500, "duration": 25.26714015007019}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1*num2) % (den1*den2) == 0", "prompt_tokens": 1236, "completion_tokens": 801, "duration": 29.352659225463867}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 940, "completion_tokens": 558, "duration": 23.0634024143219}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 827, "completion_tokens": 473, "duration": 25.57284665107727}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1053, "completion_tokens": 637, "duration": 37.123233795166016}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n        \n    return tuple([planet for planet in planets if start_index < planets.index(planet) < end_index])", "prompt_tokens": 1074, "completion_tokens": 601, "duration": 38.686789989471436}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words", "prompt_tokens": 954, "completion_tokens": 453, "duration": 28.180758714675903}
{"task_id": "HumanEval/150", "generated_code": "import sympy\n\ndef x_or_y(n, x, y):\n    return x if sympy.isprime(n) else y", "prompt_tokens": 727, "completion_tokens": 402, "duration": 22.21091341972351}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)", "prompt_tokens": 948, "completion_tokens": 530, "duration": 21.60544514656067}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1128, "completion_tokens": 525, "duration": 37.46385145187378}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1250, "completion_tokens": 591, "duration": 26.281670570373535}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 855, "completion_tokens": 466, "duration": 28.081555128097534}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 1)\n    return (even_count, odd_count)", "prompt_tokens": 677, "completion_tokens": 414, "duration": 21.785338401794434}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return \"Invalid input\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 836, "completion_tokens": 641, "duration": 28.621642589569092}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "prompt_tokens": 844, "completion_tokens": 498, "duration": 29.742589712142944}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1707, "completion_tokens": 897, "duration": 26.66061019897461}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    remaining = max(0, remaining - need)\n    return [eaten, remaining]", "prompt_tokens": 1329, "completion_tokens": 635, "duration": 35.95557117462158}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i + 1]\n        elif operators[i] == '-':\n            result -= operands[i + 1]\n        elif operators[i] == '*':\n            result *= operands[i + 1]\n        elif operators[i] == '//':\n            result //= operands[i + 1]\n        elif operators[i] == '**':\n            result **= operands[i + 1]\n    return result", "prompt_tokens": 1083, "completion_tokens": 604, "duration": 35.41863799095154}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n            has_letter = True\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 719, "completion_tokens": 391, "duration": 21.858505487442017}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 732, "completion_tokens": 431, "duration": 27.336543321609497}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 762, "completion_tokens": 405, "duration": 22.726480960845947}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 876, "completion_tokens": 511, "duration": 35.327444553375244}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                temp += char\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                temp += char\n                result.append(temp)\n                temp = ''\n        elif count > 0:\n            temp += char\n    return result", "prompt_tokens": 829, "completion_tokens": 531, "duration": 23.27111053466797}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 738, "completion_tokens": 406, "duration": 17.378815412521362}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 902, "completion_tokens": 535, "duration": 20.662588834762573}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 927, "completion_tokens": 561, "duration": 26.35127329826355}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 943, "completion_tokens": 637, "duration": 34.86690711975098}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n    \n    if current_depth > 0:\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 886, "completion_tokens": 597, "duration": 21.76076316833496}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 916, "completion_tokens": 586, "duration": 41.98275542259216}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 766, "completion_tokens": 430, "duration": 23.902297496795654}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 937, "completion_tokens": 620, "duration": 30.168959140777588}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    pal_suffix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            pal_suffix = string[i + 1:]\n    return string + pal_suffix[::-1]", "prompt_tokens": 1071, "completion_tokens": 750, "duration": 44.98536133766174}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 824, "completion_tokens": 542, "duration": 32.39617109298706}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str", "prompt_tokens": 712, "completion_tokens": 372, "duration": 18.636160612106323}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 640, "completion_tokens": 346, "duration": 34.16040754318237}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 551, "completion_tokens": 292, "duration": 13.563411951065063}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 656, "completion_tokens": 364, "duration": 19.359740018844604}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 589, "completion_tokens": 287, "duration": 13.810462713241577}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n\n# Test with single whole note\nassert parse_music('o') == [4], \"Single whole note should return [4]\"\n\n# Test with single half note\nassert parse_music('o|') == [2], \"Single half note should return [2]\"\n\n# Test with single quarter note\nassert parse_music('.|') == [1], \"Single quarter note should return [1]\"\n\n# Test with mixed notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Mixed notes should return the corresponding list of beats\"\n\n# Test with no notes (empty string)\nassert parse_music('') == [], \"Empty string should return an empty list\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Multiple whole notes should return a list with appropriate beats\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Multiple half notes should return a list with appropriate beats\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Multiple quarter notes should return a list with appropriate beats\"\n\n# Test with spaces at the beginning and end\nassert parse_music(' o o| ') == [4, 2], \"Leading and trailing spaces should be ignored\"\n\n# Test with only spaces\nassert parse_music('     ') == [], \"String with only spaces should return an empty list\"\n\n# Test with complex pattern\nassert parse_music('o| .| .| o o| .|') == [2, 1, 1, 4, 2, 1], \"Complex pattern should return the correct list of beats\"\n\n# Test with notes separated by multiple spaces\nassert parse_music('o  o|     .|') == [4, 2, 1], \"Notes separated by multiple spaces should be parsed correctly\"\n\n# Test with malformed note (should be ignored or treated as per implementation)\n# This test depends on how the function is expected to handle malformed inputs.\n# Uncomment the following line if malformed inputs are ignored or replace the expected result with the correct one based on the implementation.\n# assert parse_music('x o|') == [2], \"Malformed notes should be ignored or handled appropriately\"", "prompt_tokens": 1059, "completion_tokens": 1132, "duration": 45.93641901016235}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count", "prompt_tokens": 816, "completion_tokens": 537, "duration": 20.256206512451172}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: numberals.index(x))\n    return ' '.join(sorted_numbers)", "prompt_tokens": 665, "completion_tokens": 358, "duration": 19.827669382095337}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest = min([(abs(numbers[i] - numbers[j]), numbers[i], numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)], key=lambda x: x[0])\n    return (closest[1], closest[2])", "prompt_tokens": 2504, "completion_tokens": 967, "duration": 29.692442655563354}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 959, "completion_tokens": 587, "duration": 35.878891706466675}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 801, "completion_tokens": 467, "duration": 25.480683088302612}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 544, "completion_tokens": 294, "duration": 15.117211818695068}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    if n < 0:\n        return -largest_divisor(-n)\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 698, "completion_tokens": 475, "duration": 16.539384841918945}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 861, "completion_tokens": 506, "duration": 19.36977195739746}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 715, "completion_tokens": 403, "duration": 19.091415643692017}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 593, "completion_tokens": 350, "duration": 20.884636163711548}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 722, "completion_tokens": 451, "duration": 26.230315923690796}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 934, "completion_tokens": 602, "duration": 45.61524796485901}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 834, "completion_tokens": 448, "duration": 29.79760432243347}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 596, "completion_tokens": 271, "duration": 13.614849090576172}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    from scipy.optimize import fsolve\n    return fsolve(poly, 0)[0]", "prompt_tokens": 1222, "completion_tokens": 611, "duration": 29.85427951812744}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1053, "completion_tokens": 614, "duration": 37.12348747253418}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 709, "completion_tokens": 393, "duration": 27.25058078765869}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 676, "completion_tokens": 345, "duration": 18.64952778816223}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "prompt_tokens": 1742, "completion_tokens": 1277, "duration": 49.083038330078125}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [l_sorted.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 911, "completion_tokens": 546, "duration": 79.20571088790894}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2350, "completion_tokens": 843, "duration": 30.568275690078735}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and num == fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 741, "completion_tokens": 513, "duration": 22.576512575149536}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 950, "completion_tokens": 516, "duration": 35.88443350791931}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 928, "completion_tokens": 453, "duration": 18.115070581436157}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 727, "completion_tokens": 351, "duration": 12.365018606185913}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 912, "completion_tokens": 465, "duration": 26.988900661468506}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n        \n    return ''.join(digits)", "prompt_tokens": 776, "completion_tokens": 469, "duration": 22.480371236801147}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 514, "completion_tokens": 256, "duration": 13.46300482749939}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n        \n    return d", "prompt_tokens": 936, "completion_tokens": 530, "duration": 20.397196769714355}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 898, "completion_tokens": 627, "duration": 41.055423974990845}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join(char.lower() for char in text if char.isalnum())\n    return text == text[::-1]", "prompt_tokens": 747, "completion_tokens": 458, "duration": 24.578089714050293}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 963, "completion_tokens": 595, "duration": 34.49335265159607}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 675, "completion_tokens": 396, "duration": 26.245994567871094}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 727, "completion_tokens": 334, "duration": 17.708454132080078}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 781, "completion_tokens": 466, "duration": 29.188627004623413}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 465, "completion_tokens": 192, "duration": 9.22341251373291}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 852, "completion_tokens": 417, "duration": 28.002211570739746}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 617, "completion_tokens": 381, "duration": 12.231206893920898}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 713, "completion_tokens": 403, "duration": 22.36134672164917}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 821, "completion_tokens": 529, "duration": 33.52106070518494}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 880, "completion_tokens": 499, "duration": 30.685388326644897}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if n < 2:\n        return None\n\n    i = n // 2\n    while i > 1:\n        if n % i == 0 and is_prime(i):\n            return i\n        i -= 1\n\nlargest_prime_factor(13195)", "prompt_tokens": 674, "completion_tokens": 485, "duration": 22.858178853988647}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 735, "completion_tokens": 389, "duration": 15.934752225875854}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 839, "completion_tokens": 537, "duration": 19.886991500854492}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 2260, "completion_tokens": 1286, "duration": 58.034303188323975}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 890, "completion_tokens": 481, "duration": 34.720460414886475}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 1382, "completion_tokens": 777, "duration": 30.558499574661255}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > 0:\n        shift %= len(x_str)\n        shifted = x_str[-shift:] + x_str[:-shift]\n    else:\n        shifted = x_str[-shift % len(x_str):] + x_str[:-shift % len(x_str)]\n    return shifted", "prompt_tokens": 788, "completion_tokens": 516, "duration": 28.629109382629395}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 847, "completion_tokens": 464, "duration": 18.19038152694702}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1112, "completion_tokens": 546, "duration": 17.271296977996826}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_even_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n            smallest_even = num\n            smallest_even_index = i\n            \n    if smallest_even is not None:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []\n\n# Test case with no even numbers\nassert pluck([1, 3, 5, 7]) == []\n\n# Test case with one even number\nassert pluck([1, 2, 3, 5, 7]) == [2, 1]\n\n# Test case with multiple even numbers\nassert pluck([6, 4, 2, 8]) == [2, 2]\n\n# Test case with multiple instances of the smallest even number\nassert pluck([2, 3, 2, 4, 2]) == [2, 0]\n\n# Test case with an empty array\nassert pluck([]) == []\n\n# Test case with only one number which is even\nassert pluck([4]) == [4, 0]\n\n# Test case with only one number which is odd\nassert pluck([3]) == []\n\n# Test case with zero (as it is even and considered the smallest possible even number)\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n# Test case with large array size\nassert pluck([2]*10000) == [2, 0]\n\n# Test case with large numbers\nassert pluck([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2]) == [2, 9]\n\n# Test case with mixed large and small numbers\nassert pluck([1001, 5002, 300, 400, 250, 100, 50, 25, 2, 3]) == [2, 8]\n\n# Test case with all even numbers\nassert pluck([6, 8, 10, 12, 14, 16]) == [6, 0]\n\n# Test case where the smallest even number is the last element\nassert pluck([3, 5, 7, 9, 2]) == [2, 4]\n\n# Test case with negative odd numbers and positive even numbers\nassert pluck([-1, -3, -5, 2, 4, 6]) == [2, 3]\n\n# Test case with large even number and smaller odd numbers\nassert pluck([3, 5, 7, 1000002]) == [1000002, 3]", "prompt_tokens": 1315, "completion_tokens": 1105, "duration": 38.068350076675415}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    \n    max_num = -1\n    max_freq = 0\n    \n    for num in unique_nums:\n        freq = lst.count(num)\n        if freq >= num and num > max_num:\n            max_num = num\n            max_freq = freq\n    \n    return max_num", "prompt_tokens": 1118, "completion_tokens": 678, "duration": 38.36446499824524}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 813, "completion_tokens": 431, "duration": 23.90204644203186}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 960, "completion_tokens": 625, "duration": 22.55586886405945}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1259, "completion_tokens": 642, "duration": 24.655153036117554}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 996, "completion_tokens": 553, "duration": 25.621222972869873}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 962, "completion_tokens": 464, "duration": 14.696239948272705}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a):\n        while a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    prime_factors.append(a)\n    \n    return len(prime_factors) == 3 and len(set(prime_factors)) == 3", "prompt_tokens": 928, "completion_tokens": 661, "duration": 38.715328216552734}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 894, "completion_tokens": 451, "duration": 19.209712028503418}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int((-a) ** (1/3)) ** 3 == -a)", "prompt_tokens": 672, "completion_tokens": 324, "duration": 17.91421341896057}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1200, "completion_tokens": 477, "duration": 17.528888702392578}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 785, "completion_tokens": 347, "duration": 21.360291719436646}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 833, "completion_tokens": 481, "duration": 26.21368384361267}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1184, "completion_tokens": 660, "duration": 47.95807075500488}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test when string length is a prime number (5), expecting True\nassert prime_length('Hello') == True\n\n# Test when string length is not a prime number (6), expecting False\nassert prime_length('orange') == False\n\n# Test with an empty string (0), expecting False as 0 is not prime\nassert prime_length('') == False\n\n# Test with a string length of 2 (prime number), expecting True\nassert prime_length('Hi') == True\n\n# Test with a longer string where length is prime (7), expecting True\nassert prime_length('abcdefg') == True\n\n# Test with a longer string where length is not prime (8), expecting False\nassert prime_length('abcdefgh') == False\n\n# Test with a single character (1), expecting False as 1 is not considered prime\nassert prime_length('a') == False\n\n# Test with a string of length 11 (prime number), expecting True\nassert prime_length('hello world') == True\n\n# Test with a string of length 13 (prime number), expecting True\nassert prime_length('prime testing') == True\n\n# Test with a string of length 12 (not a prime number), expecting False\nassert prime_length('not a prime!') == False\n\n# Edge case: Test with a long string where length is a large prime number, expecting True\n# Choosing 97, since it's a known prime number\nassert prime_length('a' * 97) == True\n\n# Edge case: Test with a long string where length is just before a prime number (96), expecting False\nassert prime_length('a' * 96) == False", "prompt_tokens": 693, "completion_tokens": 762, "duration": 21.159032583236694}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 2 * 10 ** (n - 2) + 10 ** (n - 1) - 10 ** (n - 2)\n    return count", "prompt_tokens": 635, "completion_tokens": 415, "duration": 16.033287048339844}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 843, "completion_tokens": 420, "duration": 18.80698561668396}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 665, "completion_tokens": 411, "duration": 14.905725479125977}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 898, "completion_tokens": 507, "duration": 30.14049530029297}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = [(i, j) for i, row in enumerate(lst) for j, col in sorted(enumerate(row), key=lambda c: c[1], reverse=True) if col == x]\n    return sorted(coordinates, key=lambda c: (c[0], -c[1]), reverse=True)", "prompt_tokens": 4758, "completion_tokens": 2728, "duration": 74.15939402580261}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    first_last_sum = array[0] + array[-1]\n    return sorted(array, reverse=first_last_sum % 2 == 0)", "prompt_tokens": 1225, "completion_tokens": 676, "duration": 28.302154779434204}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result", "prompt_tokens": 766, "completion_tokens": 457, "duration": 26.35506510734558}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "prompt_tokens": 761, "completion_tokens": 368, "duration": 24.396617650985718}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 1556, "completion_tokens": 990, "duration": 27.83041214942932}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False", "prompt_tokens": 934, "completion_tokens": 547, "duration": 66.80653214454651}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.lower() in vowels:\n            new_char = chr(ord(char) + 2)\n            if new_char > 'z':\n                new_char = chr(ord(new_char) - 26)\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 736, "completion_tokens": 436, "duration": 24.707518100738525}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1434, "completion_tokens": 791, "duration": 32.62574625015259}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    upper_case_keys = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    return lower_case_keys or upper_case_keys", "prompt_tokens": 1072, "completion_tokens": 623, "duration": 27.263159036636353}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 913, "completion_tokens": 526, "duration": 19.796971559524536}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 763, "completion_tokens": 414, "duration": 22.988017320632935}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i].isupper() and s[i] in 'AEIOU')", "prompt_tokens": 761, "completion_tokens": 478, "duration": 19.296243906021118}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value))) if float(value) > 0 else int(-round(-float(value)))", "prompt_tokens": 1740, "completion_tokens": 1013, "duration": 32.53990817070007}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n\n    return stones", "prompt_tokens": 928, "completion_tokens": 565, "duration": 25.47633647918701}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 765, "completion_tokens": 371, "duration": 28.07633662223816}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 889, "completion_tokens": 574, "duration": 23.893001317977905}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2 + (n + m) % 2\n    return bin(avg)", "prompt_tokens": 928, "completion_tokens": 513, "duration": 35.5092351436615}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 959, "completion_tokens": 396, "duration": 29.35464644432068}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def convert_to_name(num):\n        names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        return names[num]\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n\n    return [convert_to_name(num) for num in filtered_arr]", "prompt_tokens": 1227, "completion_tokens": 613, "duration": 25.98470377922058}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_val = sum(range(1, i+1))\n            result.append(sum_val)\n    return result", "prompt_tokens": 917, "completion_tokens": 576, "duration": 37.99907422065735}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 1)\n\n    return (even_count, odd_count)", "prompt_tokens": 1100, "completion_tokens": 598, "duration": 33.84223461151123}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(num):\n        num_str = str(abs(num))\n        return sum(int(digit) for digit in num_str)\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 737, "completion_tokens": 360, "duration": 17.529192686080933}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return any(arr[i:] + arr[:i] == sorted(arr) for i in range(len(arr)))", "prompt_tokens": 1177, "completion_tokens": 436, "duration": 19.454419374465942}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    evens_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    evens_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    return \"YES\" if evens_lst1 <= len(lst1) - evens_lst1 + evens_lst2 else \"NO\"", "prompt_tokens": 1197, "completion_tokens": 709, "duration": 33.41290473937988}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 1048, "completion_tokens": 627, "duration": 43.71891903877258}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 1138, "completion_tokens": 669, "duration": 29.41924023628235}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{index + 1}ng {index + 1} of the {index + 1}nput.\" for index, string in enumerate(lst)]", "prompt_tokens": 1183, "completion_tokens": 725, "duration": 29.831815481185913}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 801, "completion_tokens": 501, "duration": 35.53736972808838}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1451, "completion_tokens": 655, "duration": 27.532371759414673}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1063, "completion_tokens": 568, "duration": 37.639708280563354}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1020, "completion_tokens": 542, "duration": 19.04469656944275}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 893, "completion_tokens": 509, "duration": 22.577974796295166}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for p in lst:\n        count += 1 if p == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 992, "completion_tokens": 524, "duration": 25.665950059890747}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1199, "completion_tokens": 600, "duration": 26.534010648727417}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 1)", "prompt_tokens": 855, "completion_tokens": 519, "duration": 24.908724308013916}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 919, "completion_tokens": 513, "duration": 77.79458403587341}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1796, "completion_tokens": 891, "duration": 30.376988649368286}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False", "prompt_tokens": 1483, "completion_tokens": 947, "duration": 40.468066930770874}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 971, "completion_tokens": 568, "duration": 28.062759160995483}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    if sorted_lst != lst or any(lst.count(x) > 2 for x in set(lst)):\n        return False\n    return True", "prompt_tokens": 1195, "completion_tokens": 559, "duration": 33.374443769454956}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length < 1:\n        return \"NO\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 1124, "completion_tokens": 565, "duration": 34.69451713562012}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n            sum_of_magnitudes += abs(num)\n        elif num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 937, "completion_tokens": 618, "duration": 33.03841042518616}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    flat_grid = [cell for row in grid for cell in row]\n    start = min(flat_grid)\n    path = [start]\n    \n    def neighbors(i, j):\n        for y, x in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= y < n and 0 <= x < n:\n                yield y, x\n    \n    i, j = divmod(flat_grid.index(start), n)\n    while len(path) < k:\n        next_val = min(flat_grid[y*n + x] for y, x in neighbors(i, j) if flat_grid[y*n + x] > path[-1])\n        path.append(next_val)\n        i, j = divmod(flat_grid.index(next_val), n)\n    \n    return path", "prompt_tokens": 1682, "completion_tokens": 904, "duration": 38.592114210128784}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + i // 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 1139, "completion_tokens": 604, "duration": 24.497440576553345}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 600, "completion_tokens": 321, "duration": 14.482859373092651}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1642, "completion_tokens": 1030, "duration": 46.42522048950195}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum((int(x) + 1) ** 2 for x in lst)", "prompt_tokens": 1741, "completion_tokens": 1018, "duration": 33.306562662124634}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 863, "completion_tokens": 436, "duration": 16.271514654159546}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n            break\n    return largest_index", "prompt_tokens": 822, "completion_tokens": 489, "duration": 36.498438358306885}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = None if not negatives else max(negatives)\n    smallest_positive = None if not positives else min(positives)\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 952, "completion_tokens": 571, "duration": 21.532833576202393}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    try:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return a if a > b else b\n    except:\n        return a if str(a) > str(b) else b", "prompt_tokens": 957, "completion_tokens": 580, "duration": 26.215051889419556}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test with the minimum possible even number that is not equal to the sum of 4 positive even numbers\nassert is_equal_to_sum_even(2) == False\n\n# Test with a number that is less than the sum of four 2's (the smallest positive even number)\nassert is_equal_to_sum_even(6) == False\n\n# Test with a number that equals the sum of four 2's, which is the smallest number that can be written as such\nassert is_equal_to_sum_even(8) == True\n\n# Test with a number that is slightly above the minimum threshold and is not a multiple of 2 (odd number, which should always return False)\nassert is_equal_to_sum_even(9) == False\n\n# Test with a number that is even and can be written as the sum of four even numbers but not all 2's\nassert is_equal_to_sum_even(12) == True\n\n# Test with a larger even number that is a sum of four different even numbers\nassert is_equal_to_sum_even(40) == True\n\n# Test with a large odd number, to confirm behavior with odd numbers at higher ranges\nassert is_equal_to_sum_even(101) == False\n\n# Test with an even number that is a sum of four even numbers, including large numbers\nassert is_equal_to_sum_even(1000) == True\n\n# Edge case: Test with the number 0, assuming it's not considered a positive number and thus should return False\nassert is_equal_to_sum_even(0) == False\n\n# Test with a negative even number, assuming the function only deals with positive numbers\nassert is_equal_to_sum_even(-8) == False", "prompt_tokens": 689, "completion_tokens": 721, "duration": 19.756518363952637}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 873, "completion_tokens": 578, "duration": 25.799166202545166}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 751, "completion_tokens": 388, "duration": 14.554165363311768}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1290, "completion_tokens": 793, "duration": 45.08557462692261}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1124, "completion_tokens": 678, "duration": 32.15361189842224}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if prime_length(word)]\n    return ' '.join(prime_words)", "prompt_tokens": 830, "completion_tokens": 459, "duration": 20.960732460021973}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 995, "completion_tokens": 534, "duration": 36.43185830116272}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 865, "completion_tokens": 487, "duration": 19.234493017196655}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 772, "completion_tokens": 415, "duration": 14.654378175735474}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 885, "completion_tokens": 465, "duration": 16.31280279159546}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start > end:\n        start, end = end, start\n    \n    return tuple(p for p in planets if start < planets.index(p) < end)", "prompt_tokens": 1082, "completion_tokens": 597, "duration": 25.615440368652344}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_len_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(even_len_words), key=lambda x: (len(x), x))", "prompt_tokens": 1020, "completion_tokens": 513, "duration": 22.836992025375366}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 781, "completion_tokens": 503, "duration": 30.610929489135742}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) if lst else 0", "prompt_tokens": 1713, "completion_tokens": 827, "duration": 27.766717672348022}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1171, "completion_tokens": 564, "duration": 21.711832761764526}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda ext: sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()))\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1177, "completion_tokens": 500, "duration": 37.3929328918457}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    \n    if n != m:\n        return False\n\n    return b in a + a", "prompt_tokens": 1663, "completion_tokens": 1042, "duration": 44.8138906955719}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return even, odd", "prompt_tokens": 588, "completion_tokens": 341, "duration": 19.78834104537964}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 857, "completion_tokens": 656, "duration": 32.33352613449097}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 915, "completion_tokens": 567, "duration": 39.12155103683472}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -ord(x[0])))", "prompt_tokens": 844, "completion_tokens": 462, "duration": 31.52182149887085}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1163, "completion_tokens": 472, "duration": 36.472790241241455}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1159, "completion_tokens": 678, "duration": 41.393325090408325}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = ''\n    letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    if all(char not in letters for char in s):\n        return s[::-1]\n    return new_s", "prompt_tokens": 705, "completion_tokens": 396, "duration": 14.903440475463867}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 642, "completion_tokens": 338, "duration": 18.020976781845093}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 870, "completion_tokens": 513, "duration": 17.761270761489868}
