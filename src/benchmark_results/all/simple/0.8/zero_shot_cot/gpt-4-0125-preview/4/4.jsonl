{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 876, "completion_tokens": 511, "duration": 35.327444553375244}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            if count == 1:\n                temp += char\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                temp += char\n                result.append(temp)\n                temp = ''\n        elif count > 0:\n            temp += char\n    return result", "prompt_tokens": 829, "completion_tokens": 531, "duration": 23.27111053466797}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 738, "completion_tokens": 406, "duration": 17.378815412521362}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 902, "completion_tokens": 535, "duration": 20.662588834762573}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 927, "completion_tokens": 561, "duration": 26.35127329826355}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 943, "completion_tokens": 637, "duration": 34.86690711975098}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n    \n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        \n        if char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n    \n    if current_depth > 0:\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 886, "completion_tokens": 597, "duration": 21.76076316833496}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 916, "completion_tokens": 586, "duration": 41.98275542259216}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 766, "completion_tokens": 430, "duration": 23.902297496795654}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[i-1], numbers[i]))\n    \n    return result", "prompt_tokens": 937, "completion_tokens": 620, "duration": 30.168959140777588}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    pal_suffix = \"\"\n    for i in range(len(string)):\n        if is_palindrome(string[:i + 1]):\n            pal_suffix = string[i + 1:]\n    return string + pal_suffix[::-1]", "prompt_tokens": 1071, "completion_tokens": 750, "duration": 44.98536133766174}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        result += str(int(char1) ^ int(char2))\n    return result", "prompt_tokens": 824, "completion_tokens": 542, "duration": 32.39617109298706}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str", "prompt_tokens": 712, "completion_tokens": 372, "duration": 18.636160612106323}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 640, "completion_tokens": 346, "duration": 34.16040754318237}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 551, "completion_tokens": 292, "duration": 13.563411951065063}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 656, "completion_tokens": 364, "duration": 19.359740018844604}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 589, "completion_tokens": 287, "duration": 13.810462713241577}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes]\n\n# Test with single whole note\nassert parse_music('o') == [4], \"Single whole note should return [4]\"\n\n# Test with single half note\nassert parse_music('o|') == [2], \"Single half note should return [2]\"\n\n# Test with single quarter note\nassert parse_music('.|') == [1], \"Single quarter note should return [1]\"\n\n# Test with mixed notes\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Mixed notes should return the corresponding list of beats\"\n\n# Test with no notes (empty string)\nassert parse_music('') == [], \"Empty string should return an empty list\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Multiple whole notes should return a list with appropriate beats\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Multiple half notes should return a list with appropriate beats\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Multiple quarter notes should return a list with appropriate beats\"\n\n# Test with spaces at the beginning and end\nassert parse_music(' o o| ') == [4, 2], \"Leading and trailing spaces should be ignored\"\n\n# Test with only spaces\nassert parse_music('     ') == [], \"String with only spaces should return an empty list\"\n\n# Test with complex pattern\nassert parse_music('o| .| .| o o| .|') == [2, 1, 1, 4, 2, 1], \"Complex pattern should return the correct list of beats\"\n\n# Test with notes separated by multiple spaces\nassert parse_music('o  o|     .|') == [4, 2, 1], \"Notes separated by multiple spaces should be parsed correctly\"\n\n# Test with malformed note (should be ignored or treated as per implementation)\n# This test depends on how the function is expected to handle malformed inputs.\n# Uncomment the following line if malformed inputs are ignored or replace the expected result with the correct one based on the implementation.\n# assert parse_music('x o|') == [2], \"Malformed notes should be ignored or handled appropriately\"", "prompt_tokens": 1059, "completion_tokens": 1132, "duration": 45.93641901016235}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        if string[start:start + len(substring)] == substring:\n            count += 1\n            start += 1\n        else:\n            start += 1\n    return count", "prompt_tokens": 816, "completion_tokens": 537, "duration": 20.256206512451172}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: numberals.index(x))\n    return ' '.join(sorted_numbers)", "prompt_tokens": 665, "completion_tokens": 358, "duration": 19.827669382095337}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest = min([(abs(numbers[i] - numbers[j]), numbers[i], numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)], key=lambda x: x[0])\n    return (closest[1], closest[2])", "prompt_tokens": 2504, "completion_tokens": 967, "duration": 29.692442655563354}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 959, "completion_tokens": 587, "duration": 35.878891706466675}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 801, "completion_tokens": 467, "duration": 25.480683088302612}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 544, "completion_tokens": 294, "duration": 15.117211818695068}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    if n < 0:\n        return -largest_divisor(-n)\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 698, "completion_tokens": 475, "duration": 16.539384841918945}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 861, "completion_tokens": 506, "duration": 19.36977195739746}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 715, "completion_tokens": 403, "duration": 19.091415643692017}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 593, "completion_tokens": 350, "duration": 20.884636163711548}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 722, "completion_tokens": 451, "duration": 26.230315923690796}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 934, "completion_tokens": 602, "duration": 45.61524796485901}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 834, "completion_tokens": 448, "duration": 29.79760432243347}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 596, "completion_tokens": 271, "duration": 13.614849090576172}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    from scipy.optimize import fsolve\n    return fsolve(poly, 0)[0]", "prompt_tokens": 1222, "completion_tokens": 611, "duration": 29.85427951812744}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 1053, "completion_tokens": 614, "duration": 37.12348747253418}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 709, "completion_tokens": 393, "duration": 27.25058078765869}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 676, "completion_tokens": 345, "duration": 18.64952778816223}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "prompt_tokens": 1742, "completion_tokens": 1277, "duration": 49.083038330078125}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [l_sorted.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 911, "completion_tokens": 546, "duration": 79.20571088790894}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2350, "completion_tokens": 843, "duration": 30.568275690078735}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and num == fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 741, "completion_tokens": 513, "duration": 22.576512575149536}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 950, "completion_tokens": 516, "duration": 35.88443350791931}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 928, "completion_tokens": 453, "duration": 18.115070581436157}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 727, "completion_tokens": 351, "duration": 12.365018606185913}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 912, "completion_tokens": 465, "duration": 26.988900661468506}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n        \n    return ''.join(digits)", "prompt_tokens": 776, "completion_tokens": 469, "duration": 22.480371236801147}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 514, "completion_tokens": 256, "duration": 13.46300482749939}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n        \n    return d", "prompt_tokens": 936, "completion_tokens": 530, "duration": 20.397196769714355}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 898, "completion_tokens": 627, "duration": 41.055423974990845}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join(char.lower() for char in text if char.isalnum())\n    return text == text[::-1]", "prompt_tokens": 747, "completion_tokens": 458, "duration": 24.578089714050293}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 963, "completion_tokens": 595, "duration": 34.49335265159607}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 675, "completion_tokens": 396, "duration": 26.245994567871094}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 727, "completion_tokens": 334, "duration": 17.708454132080078}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 781, "completion_tokens": 466, "duration": 29.188627004623413}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 465, "completion_tokens": 192, "duration": 9.22341251373291}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 852, "completion_tokens": 417, "duration": 28.002211570739746}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 617, "completion_tokens": 381, "duration": 12.231206893920898}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 713, "completion_tokens": 403, "duration": 22.36134672164917}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 821, "completion_tokens": 529, "duration": 33.52106070518494}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 880, "completion_tokens": 499, "duration": 30.685388326644897}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if n < 2:\n        return None\n\n    i = n // 2\n    while i > 1:\n        if n % i == 0 and is_prime(i):\n            return i\n        i -= 1\n\nlargest_prime_factor(13195)", "prompt_tokens": 674, "completion_tokens": 485, "duration": 22.858178853988647}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 735, "completion_tokens": 389, "duration": 15.934752225875854}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 839, "completion_tokens": 537, "duration": 19.886991500854492}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 2260, "completion_tokens": 1286, "duration": 58.034303188323975}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 890, "completion_tokens": 481, "duration": 34.720460414886475}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    if s[-1].lower() == 'y':\n        vowels += 'y'\n    return sum(1 for char in s.lower() if char in vowels)", "prompt_tokens": 1382, "completion_tokens": 777, "duration": 30.558499574661255}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > 0:\n        shift %= len(x_str)\n        shifted = x_str[-shift:] + x_str[:-shift]\n    else:\n        shifted = x_str[-shift % len(x_str):] + x_str[:-shift % len(x_str)]\n    return shifted", "prompt_tokens": 788, "completion_tokens": 516, "duration": 28.629109382629395}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 847, "completion_tokens": 464, "duration": 18.19038152694702}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1112, "completion_tokens": 546, "duration": 17.271296977996826}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_even_index = None\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n            smallest_even = num\n            smallest_even_index = i\n            \n    if smallest_even is not None:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []\n\n# Test case with no even numbers\nassert pluck([1, 3, 5, 7]) == []\n\n# Test case with one even number\nassert pluck([1, 2, 3, 5, 7]) == [2, 1]\n\n# Test case with multiple even numbers\nassert pluck([6, 4, 2, 8]) == [2, 2]\n\n# Test case with multiple instances of the smallest even number\nassert pluck([2, 3, 2, 4, 2]) == [2, 0]\n\n# Test case with an empty array\nassert pluck([]) == []\n\n# Test case with only one number which is even\nassert pluck([4]) == [4, 0]\n\n# Test case with only one number which is odd\nassert pluck([3]) == []\n\n# Test case with zero (as it is even and considered the smallest possible even number)\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\n\n# Test case with large array size\nassert pluck([2]*10000) == [2, 0]\n\n# Test case with large numbers\nassert pluck([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2]) == [2, 9]\n\n# Test case with mixed large and small numbers\nassert pluck([1001, 5002, 300, 400, 250, 100, 50, 25, 2, 3]) == [2, 8]\n\n# Test case with all even numbers\nassert pluck([6, 8, 10, 12, 14, 16]) == [6, 0]\n\n# Test case where the smallest even number is the last element\nassert pluck([3, 5, 7, 9, 2]) == [2, 4]\n\n# Test case with negative odd numbers and positive even numbers\nassert pluck([-1, -3, -5, 2, 4, 6]) == [2, 3]\n\n# Test case with large even number and smaller odd numbers\nassert pluck([3, 5, 7, 1000002]) == [1000002, 3]", "prompt_tokens": 1315, "completion_tokens": 1105, "duration": 38.068350076675415}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    unique_nums = set(lst)\n    \n    max_num = -1\n    max_freq = 0\n    \n    for num in unique_nums:\n        freq = lst.count(num)\n        if freq >= num and num > max_num:\n            max_num = num\n            max_freq = freq\n    \n    return max_num", "prompt_tokens": 1118, "completion_tokens": 678, "duration": 38.36446499824524}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 813, "completion_tokens": 431, "duration": 23.90204644203186}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 960, "completion_tokens": 625, "duration": 22.55586886405945}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1259, "completion_tokens": 642, "duration": 24.655153036117554}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 996, "completion_tokens": 553, "duration": 25.621222972869873}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 962, "completion_tokens": 464, "duration": 14.696239948272705}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a):\n        while a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n    prime_factors.append(a)\n    \n    return len(prime_factors) == 3 and len(set(prime_factors)) == 3", "prompt_tokens": 928, "completion_tokens": 661, "duration": 38.715328216552734}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 894, "completion_tokens": 451, "duration": 19.209712028503418}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and int(a ** (1/3)) ** 3 == a) or (a < 0 and int((-a) ** (1/3)) ** 3 == -a)", "prompt_tokens": 672, "completion_tokens": 324, "duration": 17.91421341896057}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 1200, "completion_tokens": 477, "duration": 17.528888702392578}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return f\"db{bin(decimal)[2:]}db\"", "prompt_tokens": 785, "completion_tokens": 347, "duration": 21.360291719436646}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 833, "completion_tokens": 481, "duration": 26.21368384361267}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1184, "completion_tokens": 660, "duration": 47.95807075500488}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n# Test when string length is a prime number (5), expecting True\nassert prime_length('Hello') == True\n\n# Test when string length is not a prime number (6), expecting False\nassert prime_length('orange') == False\n\n# Test with an empty string (0), expecting False as 0 is not prime\nassert prime_length('') == False\n\n# Test with a string length of 2 (prime number), expecting True\nassert prime_length('Hi') == True\n\n# Test with a longer string where length is prime (7), expecting True\nassert prime_length('abcdefg') == True\n\n# Test with a longer string where length is not prime (8), expecting False\nassert prime_length('abcdefgh') == False\n\n# Test with a single character (1), expecting False as 1 is not considered prime\nassert prime_length('a') == False\n\n# Test with a string of length 11 (prime number), expecting True\nassert prime_length('hello world') == True\n\n# Test with a string of length 13 (prime number), expecting True\nassert prime_length('prime testing') == True\n\n# Test with a string of length 12 (not a prime number), expecting False\nassert prime_length('not a prime!') == False\n\n# Edge case: Test with a long string where length is a large prime number, expecting True\n# Choosing 97, since it's a known prime number\nassert prime_length('a' * 97) == True\n\n# Edge case: Test with a long string where length is just before a prime number (96), expecting False\nassert prime_length('a' * 96) == False", "prompt_tokens": 693, "completion_tokens": 762, "duration": 21.159032583236694}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 2 * 10 ** (n - 2) + 10 ** (n - 1) - 10 ** (n - 2)\n    return count", "prompt_tokens": 635, "completion_tokens": 415, "duration": 16.033287048339844}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 843, "completion_tokens": 420, "duration": 18.80698561668396}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 665, "completion_tokens": 411, "duration": 14.905725479125977}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 898, "completion_tokens": 507, "duration": 30.14049530029297}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = [(i, j) for i, row in enumerate(lst) for j, col in sorted(enumerate(row), key=lambda c: c[1], reverse=True) if col == x]\n    return sorted(coordinates, key=lambda c: (c[0], -c[1]), reverse=True)", "prompt_tokens": 4758, "completion_tokens": 2728, "duration": 74.15939402580261}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    first_last_sum = array[0] + array[-1]\n    return sorted(array, reverse=first_last_sum % 2 == 0)", "prompt_tokens": 1225, "completion_tokens": 676, "duration": 28.302154779434204}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n            result += chr(shifted)\n        else:\n            result += char\n    return result", "prompt_tokens": 766, "completion_tokens": 457, "duration": 26.35506510734558}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "prompt_tokens": 761, "completion_tokens": 368, "duration": 24.396617650985718}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 1556, "completion_tokens": 990, "duration": 27.83041214942932}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False", "prompt_tokens": 934, "completion_tokens": 547, "duration": 66.80653214454651}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.lower() in vowels:\n            new_char = chr(ord(char) + 2)\n            if new_char > 'z':\n                new_char = chr(ord(new_char) - 26)\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 736, "completion_tokens": 436, "duration": 24.707518100738525}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1434, "completion_tokens": 791, "duration": 32.62574625015259}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_case_keys = all(key.islower() for key in dict.keys() if isinstance(key, str))\n    upper_case_keys = all(key.isupper() for key in dict.keys() if isinstance(key, str))\n    return lower_case_keys or upper_case_keys", "prompt_tokens": 1072, "completion_tokens": 623, "duration": 27.263159036636353}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 913, "completion_tokens": 526, "duration": 19.796971559524536}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 763, "completion_tokens": 414, "duration": 22.988017320632935}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i].isupper() and s[i] in 'AEIOU')", "prompt_tokens": 761, "completion_tokens": 478, "duration": 19.296243906021118}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value))) if float(value) > 0 else int(-round(-float(value)))", "prompt_tokens": 1740, "completion_tokens": 1013, "duration": 32.53990817070007}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n\n    return stones", "prompt_tokens": 928, "completion_tokens": 565, "duration": 25.47633647918701}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 765, "completion_tokens": 371, "duration": 28.07633662223816}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 889, "completion_tokens": 574, "duration": 23.893001317977905}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2 + (n + m) % 2\n    return bin(avg)", "prompt_tokens": 928, "completion_tokens": 513, "duration": 35.5092351436615}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 959, "completion_tokens": 396, "duration": 29.35464644432068}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    def convert_to_name(num):\n        names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n        return names[num]\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n\n    return [convert_to_name(num) for num in filtered_arr]", "prompt_tokens": 1227, "completion_tokens": 613, "duration": 25.98470377922058}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_val = sum(range(1, i+1))\n            result.append(sum_val)\n    return result", "prompt_tokens": 917, "completion_tokens": 576, "duration": 37.99907422065735}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 1)\n\n    return (even_count, odd_count)", "prompt_tokens": 1100, "completion_tokens": 598, "duration": 33.84223461151123}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(num):\n        num_str = str(abs(num))\n        return sum(int(digit) for digit in num_str)\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 737, "completion_tokens": 360, "duration": 17.529192686080933}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return any(arr[i:] + arr[:i] == sorted(arr) for i in range(len(arr)))", "prompt_tokens": 1177, "completion_tokens": 436, "duration": 19.454419374465942}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    evens_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    evens_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    return \"YES\" if evens_lst1 <= len(lst1) - evens_lst1 + evens_lst2 else \"NO\"", "prompt_tokens": 1197, "completion_tokens": 709, "duration": 33.41290473937988}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n    \n    max_count = max(hist.values())\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 1048, "completion_tokens": 627, "duration": 43.71891903877258}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return s, s == s[::-1]", "prompt_tokens": 1138, "completion_tokens": 669, "duration": 29.41924023628235}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{index + 1}ng {index + 1} of the {index + 1}nput.\" for index, string in enumerate(lst)]", "prompt_tokens": 1183, "completion_tokens": 725, "duration": 29.831815481185913}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 801, "completion_tokens": 501, "duration": 35.53736972808838}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1451, "completion_tokens": 655, "duration": 27.532371759414673}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1063, "completion_tokens": 568, "duration": 37.639708280563354}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1020, "completion_tokens": 542, "duration": 19.04469656944275}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 893, "completion_tokens": 509, "duration": 22.577974796295166}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for p in lst:\n        count += 1 if p == '(' else -1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 992, "completion_tokens": 524, "duration": 25.665950059890747}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1199, "completion_tokens": 600, "duration": 26.534010648727417}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 1)", "prompt_tokens": 855, "completion_tokens": 519, "duration": 24.908724308013916}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)", "prompt_tokens": 919, "completion_tokens": 513, "duration": 77.79458403587341}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = n * 3 + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1796, "completion_tokens": 891, "duration": 30.376988649368286}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False", "prompt_tokens": 1483, "completion_tokens": 947, "duration": 40.468066930770874}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 971, "completion_tokens": 568, "duration": 28.062759160995483}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    if sorted_lst != lst or any(lst.count(x) > 2 for x in set(lst)):\n        return False\n    return True", "prompt_tokens": 1195, "completion_tokens": 559, "duration": 33.374443769454956}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n    if length < 1:\n        return \"NO\"\n    \n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 1124, "completion_tokens": 565, "duration": 34.69451713562012}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n            sum_of_magnitudes += abs(num)\n        elif num < 0:\n            product_of_signs *= -1\n            sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 937, "completion_tokens": 618, "duration": 33.03841042518616}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    flat_grid = [cell for row in grid for cell in row]\n    start = min(flat_grid)\n    path = [start]\n    \n    def neighbors(i, j):\n        for y, x in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= y < n and 0 <= x < n:\n                yield y, x\n    \n    i, j = divmod(flat_grid.index(start), n)\n    while len(path) < k:\n        next_val = min(flat_grid[y*n + x] for y, x in neighbors(i, j) if flat_grid[y*n + x] > path[-1])\n        path.append(next_val)\n        i, j = divmod(flat_grid.index(next_val), n)\n    \n    return path", "prompt_tokens": 1682, "completion_tokens": 904, "duration": 38.592114210128784}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        tribonacci = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[-1] + i // 2)\n            else:\n                tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])\n        return tribonacci", "prompt_tokens": 1139, "completion_tokens": 604, "duration": 24.497440576553345}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 600, "completion_tokens": 321, "duration": 14.482859373092651}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1642, "completion_tokens": 1030, "duration": 46.42522048950195}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum((int(x) + 1) ** 2 for x in lst)", "prompt_tokens": 1741, "completion_tokens": 1018, "duration": 33.306562662124634}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-2] == ' '", "prompt_tokens": 863, "completion_tokens": 436, "duration": 16.271514654159546}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n            break\n    return largest_index", "prompt_tokens": 822, "completion_tokens": 489, "duration": 36.498438358306885}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = None if not negatives else max(negatives)\n    smallest_positive = None if not positives else min(positives)\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 952, "completion_tokens": 571, "duration": 21.532833576202393}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        return a if a > b else b\n    try:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return a if a > b else b\n    except:\n        return a if str(a) > str(b) else b", "prompt_tokens": 957, "completion_tokens": 580, "duration": 26.215051889419556}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8\n\n# Test with the minimum possible even number that is not equal to the sum of 4 positive even numbers\nassert is_equal_to_sum_even(2) == False\n\n# Test with a number that is less than the sum of four 2's (the smallest positive even number)\nassert is_equal_to_sum_even(6) == False\n\n# Test with a number that equals the sum of four 2's, which is the smallest number that can be written as such\nassert is_equal_to_sum_even(8) == True\n\n# Test with a number that is slightly above the minimum threshold and is not a multiple of 2 (odd number, which should always return False)\nassert is_equal_to_sum_even(9) == False\n\n# Test with a number that is even and can be written as the sum of four even numbers but not all 2's\nassert is_equal_to_sum_even(12) == True\n\n# Test with a larger even number that is a sum of four different even numbers\nassert is_equal_to_sum_even(40) == True\n\n# Test with a large odd number, to confirm behavior with odd numbers at higher ranges\nassert is_equal_to_sum_even(101) == False\n\n# Test with an even number that is a sum of four even numbers, including large numbers\nassert is_equal_to_sum_even(1000) == True\n\n# Edge case: Test with the number 0, assuming it's not considered a positive number and thus should return False\nassert is_equal_to_sum_even(0) == False\n\n# Test with a negative even number, assuming the function only deals with positive numbers\nassert is_equal_to_sum_even(-8) == False", "prompt_tokens": 689, "completion_tokens": 721, "duration": 19.756518363952637}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 873, "completion_tokens": 578, "duration": 25.799166202545166}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 751, "completion_tokens": 388, "duration": 14.554165363311768}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1290, "completion_tokens": 793, "duration": 45.08557462692261}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result", "prompt_tokens": 1124, "completion_tokens": 678, "duration": 32.15361189842224}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if prime_length(word)]\n    return ' '.join(prime_words)", "prompt_tokens": 830, "completion_tokens": 459, "duration": 20.960732460021973}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 995, "completion_tokens": 534, "duration": 36.43185830116272}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 865, "completion_tokens": 487, "duration": 19.234493017196655}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 772, "completion_tokens": 415, "duration": 14.654378175735474}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 885, "completion_tokens": 465, "duration": 16.31280279159546}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    \n    if start > end:\n        start, end = end, start\n    \n    return tuple(p for p in planets if start < planets.index(p) < end)", "prompt_tokens": 1082, "completion_tokens": 597, "duration": 25.615440368652344}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_len_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(sorted(even_len_words), key=lambda x: (len(x), x))", "prompt_tokens": 1020, "completion_tokens": 513, "duration": 22.836992025375366}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 781, "completion_tokens": 503, "duration": 30.610929489135742}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) if lst else 0", "prompt_tokens": 1713, "completion_tokens": 827, "duration": 27.766717672348022}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1171, "completion_tokens": 564, "duration": 21.711832761764526}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda ext: sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()))\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1177, "completion_tokens": 500, "duration": 37.3929328918457}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    \n    if n != m:\n        return False\n\n    return b in a + a", "prompt_tokens": 1663, "completion_tokens": 1042, "duration": 44.8138906955719}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])\n    odd = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 != 0])\n    return even, odd", "prompt_tokens": 588, "completion_tokens": 341, "duration": 19.78834104537964}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 857, "completion_tokens": 656, "duration": 32.33352613449097}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 915, "completion_tokens": 567, "duration": 39.12155103683472}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (unique_chars(x), -ord(x[0])))", "prompt_tokens": 844, "completion_tokens": 462, "duration": 31.52182149887085}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1163, "completion_tokens": 472, "duration": 36.472790241241455}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1159, "completion_tokens": 678, "duration": 41.393325090408325}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    new_s = ''\n    letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                new_s += char.upper()\n            else:\n                new_s += char.lower()\n        else:\n            new_s += char\n    if all(char not in letters for char in s):\n        return s[::-1]\n    return new_s", "prompt_tokens": 705, "completion_tokens": 396, "duration": 14.903440475463867}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 642, "completion_tokens": 338, "duration": 18.020976781845093}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 870, "completion_tokens": 513, "duration": 17.761270761489868}
