{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 1063, "completion_tokens": 698, "duration": 31.169857263565063}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current_group += char\n        elif current_group:\n            result.append(current_group)\n            current_group = \"\"\n    if current_group:\n        result.append(current_group)\n    return result", "prompt_tokens": 891, "completion_tokens": 558, "duration": 30.062139749526978}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 656, "completion_tokens": 324, "duration": 15.007474422454834}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 848, "completion_tokens": 481, "duration": 35.04204225540161}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 821, "completion_tokens": 450, "duration": 21.007142543792725}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 875, "completion_tokens": 566, "duration": 34.54867386817932}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    depths.append(max_depth)\n    return depths", "prompt_tokens": 793, "completion_tokens": 480, "duration": 20.592811584472656}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 755, "completion_tokens": 411, "duration": 26.96491050720215}
{"task_id": "HumanEval/8", "generated_code": "def sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)", "prompt_tokens": 691, "completion_tokens": 346, "duration": 30.999249696731567}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    rolling_max_list = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "prompt_tokens": 862, "completion_tokens": 549, "duration": 25.18465542793274}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[:-1][::-1]", "prompt_tokens": 917, "completion_tokens": 603, "duration": 24.113657236099243}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char1, char2 in zip(a, b):\n        if char1 == char2:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 749, "completion_tokens": 477, "duration": 33.7983136177063}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda s: (len(s), s))", "prompt_tokens": 1469, "completion_tokens": 936, "duration": 34.27709078788757}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 689, "completion_tokens": 403, "duration": 24.88546872138977}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "prompt_tokens": 783, "completion_tokens": 519, "duration": 35.60049772262573}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 878, "completion_tokens": 413, "duration": 24.05027961730957}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 811, "completion_tokens": 505, "duration": 21.083752393722534}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "prompt_tokens": 1108, "completion_tokens": 646, "duration": 32.66791653633118}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 793, "completion_tokens": 510, "duration": 27.238637447357178}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=numberals.index))", "prompt_tokens": 683, "completion_tokens": 359, "duration": 25.659976959228516}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    pair = None\n    numbers.sort()\n    for i in range(len(numbers)-1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    return pair", "prompt_tokens": 1016, "completion_tokens": 596, "duration": 35.513346672058105}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 986, "completion_tokens": 614, "duration": 38.84848642349243}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 934, "completion_tokens": 607, "duration": 38.76677942276001}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 519, "completion_tokens": 269, "duration": 21.456157207489014}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = n // 2\n    while n % divisor != 0:\n        divisor -= 1\n    return divisor", "prompt_tokens": 724, "completion_tokens": 477, "duration": 19.35603094100952}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom math import isqrt\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, isqrt(n) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 965, "completion_tokens": 612, "duration": 24.15980625152588}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 810, "completion_tokens": 493, "duration": 27.529183387756348}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 535, "completion_tokens": 287, "duration": 15.69144582748413}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 673, "completion_tokens": 402, "duration": 24.08997678756714}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 844, "completion_tokens": 526, "duration": 29.155006408691406}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 862, "completion_tokens": 478, "duration": 20.387948513031006}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 694, "completion_tokens": 369, "duration": 20.384016513824463}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1335, "completion_tokens": 796, "duration": 30.135268926620483}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1033, "completion_tokens": 587, "duration": 35.42738676071167}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 803, "completion_tokens": 491, "duration": 21.221871614456177}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 754, "completion_tokens": 423, "duration": 17.934813499450684}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 861, "completion_tokens": 587, "duration": 34.07517099380493}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 888, "completion_tokens": 493, "duration": 30.476666927337646}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [(s[-1] + s[:-1]) if len(s) == 3 else s for s in [s[(3 * i):min((3 * i + 3), len(s)) for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)", "prompt_tokens": 2549, "completion_tokens": 1076, "duration": 34.221848011016846}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num):\n        if num <= 1:\n            return num\n        a, b = 0, 1\n        for _ in range(2, num+1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num == fib(num):\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 669, "completion_tokens": 457, "duration": 24.002199411392212}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1127, "completion_tokens": 693, "duration": 28.081633806228638}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * 2  # Each pair of cars will result in a collision", "prompt_tokens": 1401, "completion_tokens": 692, "duration": 19.11015248298645}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 742, "completion_tokens": 366, "duration": 22.817176818847656}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0 and l.count(x) > 1)", "prompt_tokens": 2182, "completion_tokens": 1462, "duration": 44.78907370567322}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 815, "completion_tokens": 496, "duration": 22.764521598815918}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 625, "completion_tokens": 372, "duration": 17.781987190246582}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 898, "completion_tokens": 442, "duration": 29.291091203689575}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 695, "completion_tokens": 431, "duration": 33.59037780761719}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 824, "completion_tokens": 518, "duration": 20.373064517974854}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 873, "completion_tokens": 505, "duration": 27.957234144210815}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 734, "completion_tokens": 453, "duration": 23.93537473678589}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 987, "completion_tokens": 594, "duration": 36.95602369308472}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 702, "completion_tokens": 387, "duration": 15.663730144500732}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 487, "completion_tokens": 214, "duration": 11.161195278167725}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 926, "completion_tokens": 491, "duration": 19.82978057861328}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 606, "completion_tokens": 370, "duration": 21.083868741989136}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 631, "completion_tokens": 326, "duration": 16.477149724960327}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False", "prompt_tokens": 729, "completion_tokens": 437, "duration": 19.567880153656006}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 822, "completion_tokens": 441, "duration": 32.40011811256409}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    factors = prime_factors(n)\n    return max(factors) if factors else None", "prompt_tokens": 794, "completion_tokens": 612, "duration": 26.16429376602173}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 607, "completion_tokens": 261, "duration": 10.832367897033691}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 783, "completion_tokens": 480, "duration": 35.45916724205017}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test with a polynomial of degree 4\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Degree 4 polynomial failed\"\n\n# Test with a polynomial of degree 2\nassert derivative([1, 2, 3]) == [2, 6], \"Degree 2 polynomial failed\"\n\n# Test with a constant polynomial (should return an empty list)\nassert derivative([5]) == [], \"Constant polynomial failed\"\n\n# Test with a linear polynomial (degree 1)\nassert derivative([3, 2]) == [2], \"Linear polynomial failed\"\n\n# Test with a cubic polynomial\nassert derivative([0, 0, 3, 1]) == [0, 6, 3], \"Cubic polynomial with leading 0s failed\"\n\n# Test with negative coefficients\nassert derivative([-3, 5, -2, 4]) == [5, -4, 12], \"Polynomial with negative coefficients failed\"\n\n# Test with a polynomial where the derivative has a 0 coefficient\nassert derivative([2, 0, 4]) == [0, 8], \"Polynomial resulting in 0 coefficient in derivative failed\"\n\n# Test with an empty polynomial (should probably return an empty list as well)\nassert derivative([]) == [], \"Empty list failed\"\n\n# Test with a polynomial that has a 0 coefficient in the middle\nassert derivative([1, 3, 0, 2]) == [3, 0, 6], \"Polynomial with 0 coefficient in the middle failed\"\n\n# Test with large coefficients\nassert derivative([100, 200, 300]) == [200, 600], \"Polynomial with large coefficients failed\"", "prompt_tokens": 772, "completion_tokens": 771, "duration": 20.830705642700195}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 869, "completion_tokens": 460, "duration": 17.201690912246704}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    return sum(1 for char in s if char.lower() in vowels or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 774, "completion_tokens": 391, "duration": 22.646526098251343}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 989, "completion_tokens": 739, "duration": 29.5701801776886}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 904, "completion_tokens": 521, "duration": 20.319427967071533}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    \n    return n - apples - oranges", "prompt_tokens": 1009, "completion_tokens": 444, "duration": 36.34032845497131}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(index, node) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_value = min(even_nodes, key=lambda x: x[1])[1]\n    smallest_value_indices = [index for index, node in even_nodes if node == smallest_value]\n    return [smallest_value, min(smallest_value_indices)]\n\n# Test cases are unchanged", "prompt_tokens": 1337, "completion_tokens": 633, "duration": 26.933518886566162}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    result = -1\n    for num, freq in freq_map.items():\n        if num > freq and freq >= result:\n            result = num\n\n    return result", "prompt_tokens": 910, "completion_tokens": 480, "duration": 32.29757499694824}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 912, "completion_tokens": 530, "duration": 38.490477323532104}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 842, "completion_tokens": 509, "duration": 64.79164838790894}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q,w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1226, "completion_tokens": 608, "duration": 116.18468046188354}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 959, "completion_tokens": 516, "duration": 22.95076632499695}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 <= sum2 else lst2", "prompt_tokens": 1113, "completion_tokens": 599, "duration": 22.386077642440796}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    factors = []\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n            factors.append(i)\n    return count == 3 and len(set(factors)) == 3", "prompt_tokens": 1691, "completion_tokens": 1302, "duration": 44.72669053077698}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n**int(x**(1/n))", "prompt_tokens": 1139, "completion_tokens": 695, "duration": 41.617602825164795}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 749, "completion_tokens": 394, "duration": 14.880951642990112}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 1214, "completion_tokens": 469, "duration": 18.30241346359253}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 851, "completion_tokens": 414, "duration": 15.77329683303833}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 760, "completion_tokens": 410, "duration": 15.118580102920532}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1178, "completion_tokens": 671, "duration": 25.007063150405884}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 666, "completion_tokens": 393, "duration": 24.787182331085205}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return 2 * 9 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 1021, "completion_tokens": 677, "duration": 23.075733184814453}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 997, "completion_tokens": 570, "duration": 23.54846501350403}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 772, "completion_tokens": 518, "duration": 22.805189609527588}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 990, "completion_tokens": 586, "duration": 22.050259113311768}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))", "prompt_tokens": 2280, "completion_tokens": 1294, "duration": 56.55591940879822}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array) if (array[0] + array[-1]) % 2 == 1 else sorted(array, reverse=True)", "prompt_tokens": 1234, "completion_tokens": 683, "duration": 25.086569786071777}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                start = ord('a')\n            else:\n                start = ord('A')\n            result += chr((ord(char) - start + shift) % 26 + start)\n        else:\n            result += char\n    return result", "prompt_tokens": 758, "completion_tokens": 440, "duration": 15.397537469863892}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst = [x for x in lst if x != smallest]\n    if not lst:\n        return None\n    return min(lst)", "prompt_tokens": 827, "completion_tokens": 452, "duration": 18.06858491897583}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split('[.!?]', S) if sentence.strip().startswith(\"I\"))\n\nimport re", "prompt_tokens": 743, "completion_tokens": 382, "duration": 22.09251046180725}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 883, "completion_tokens": 485, "duration": 27.402632236480713}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = chr(ord(char) + 2)\n            else:\n                new_char = char.swapcase()\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 815, "completion_tokens": 502, "duration": 21.98062562942505}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))\n\nassert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\nassert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\nassert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\nassert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\nassert skjkasdkd([0,81,12,3,1,21]) == 3\nassert skjkasdkd([0,8,1,2,1,7]) == 7", "prompt_tokens": 1445, "completion_tokens": 1032, "duration": 52.41831111907959}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    keys = list(dict.keys())\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\n    return False", "prompt_tokens": 913, "completion_tokens": 452, "duration": 24.443241119384766}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 986, "completion_tokens": 594, "duration": 22.727411031723022}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 697, "completion_tokens": 348, "duration": 14.842365026473999}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 618, "completion_tokens": 329, "duration": 41.980769634246826}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5 if float(value) > 0 else float(value) - 0.5)", "prompt_tokens": 3381, "completion_tokens": 1920, "duration": 46.71130728721619}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 1066, "completion_tokens": 687, "duration": 39.17015790939331}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r',|\\s', s)", "prompt_tokens": 764, "completion_tokens": 369, "duration": 17.4896342754364}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y + 1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 824, "completion_tokens": 508, "duration": 23.84216856956482}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 860, "completion_tokens": 436, "duration": 31.4521586894989}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 767, "completion_tokens": 417, "duration": 15.039577722549438}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [names[num-1] for num in filtered_arr]", "prompt_tokens": 1128, "completion_tokens": 469, "duration": 20.402831554412842}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 1003, "completion_tokens": 655, "duration": 27.61352014541626}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1014, "completion_tokens": 492, "duration": 28.541919946670532}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sum_of_digits = sum(int(d) for d in str(abs(num)))\n        if sum_of_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 716, "completion_tokens": 351, "duration": 18.46791172027588}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr_sorted = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == arr_sorted:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1270, "completion_tokens": 555, "duration": 28.797417879104614}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 0 for x in lst1) == len(lst1) else \"NO\"", "prompt_tokens": 1048, "completion_tokens": 513, "duration": 20.24314594268799}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 923, "completion_tokens": 501, "duration": 22.34474205970764}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1074, "completion_tokens": 604, "duration": 33.2302508354187}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), i+1, sum(int(d) % 2 != 0 for d in s), i+1) for i, s in enumerate(lst)]", "prompt_tokens": 2083, "completion_tokens": 1366, "duration": 49.71978688240051}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 814, "completion_tokens": 523, "duration": 31.117849826812744}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total = 0\n    for row in grid:\n        total += sum(row)\n    return math.ceil(total / capacity)", "prompt_tokens": 3457, "completion_tokens": 1833, "duration": 61.750887632369995}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 977, "completion_tokens": 496, "duration": 18.62304377555847}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiou\"\n        return sum(1 for letter in word if letter.isalpha() and letter.lower() not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1169, "completion_tokens": 696, "duration": 25.577298402786255}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 898, "completion_tokens": 510, "duration": 26.749497890472412}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1046, "completion_tokens": 640, "duration": 23.867318153381348}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k]", "prompt_tokens": 1094, "completion_tokens": 495, "duration": 29.573193073272705}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 782, "completion_tokens": 444, "duration": 16.483219861984253}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    total = 0\n    count = 0\n    for num in arr:\n        if 10 <= abs(num) <= 99 and count < k:\n            total += num\n            count += 1\n    return total", "prompt_tokens": 995, "completion_tokens": 616, "duration": 32.50534224510193}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1257, "completion_tokens": 686, "duration": 30.64321732521057}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1096, "completion_tokens": 591, "duration": 27.232086420059204}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 951, "completion_tokens": 548, "duration": 24.58131194114685}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst) or lst != sorted(lst):\n        return False\n    return True", "prompt_tokens": 1078, "completion_tokens": 430, "duration": 20.327608823776245}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 1209, "completion_tokens": 632, "duration": 21.829635620117188}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n\n    return product * sum_magnitudes", "prompt_tokens": 861, "completion_tokens": 513, "duration": 22.389251708984375}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    def backtrack(path, visited):\n        if len(path) == k:\n            return path\n        for i in range(n):\n            for j in range(n):\n                if (i, j) not in visited:\n                    new_path = path + [grid[i][j]]\n                    new_visited = visited.union({(i, j)})\n                    res = backtrack(new_path, new_visited)\n                    if res:\n                        return res\n    return backtrack([], set())", "prompt_tokens": 2974, "completion_tokens": 1620, "duration": 42.057045459747314}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    \n    result = [3, 2]\n    a, b, c = 3, 2, 8\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            next_val = 1 + i // 2\n        else:\n            next_val = a + b + c\n            a, b, c = b, c, next_val\n        \n        result.append(next_val)\n    \n    return result", "prompt_tokens": 1087, "completion_tokens": 579, "duration": 19.376713037490845}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "prompt_tokens": 603, "completion_tokens": 324, "duration": 21.76132869720459}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    close_brackets = 0\n    \n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > close_brackets:\n            close_brackets += 1\n    \n    return open_brackets > 0 and open_brackets == close_brackets", "prompt_tokens": 1408, "completion_tokens": 819, "duration": 24.57387900352478}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num) ** 2\n    return total", "prompt_tokens": 847, "completion_tokens": 385, "duration": 19.15976595878601}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum())", "prompt_tokens": 853, "completion_tokens": 431, "duration": 28.45948314666748}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    idx = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            idx = i - 1\n    return idx", "prompt_tokens": 817, "completion_tokens": 477, "duration": 27.51493763923645}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [n for n in lst if n < 0]\n    positives = [p for p in lst if p > 0]\n    \n    max_neg = max(negatives) if negatives else None\n    min_pos = min(positives) if positives else None\n    \n    return (max_neg, min_pos)", "prompt_tokens": 904, "completion_tokens": 521, "duration": 32.47052478790283}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == int and type(b) == int:\n        return max(a, b)\n    if type(a) == float and type(b) == float:\n        return max(a, b)\n    if type(a) == str and type(b) == str:\n        if \".\" in a and \".\" in b:\n            return max(float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\")), key=float)\n        return max(a, b)\n    if type(a) == int and type(b) == float:\n        return max(float(a), b)\n    if type(a) == float and type(b) == int:\n        return max(a, float(b))\n    if (type(a) == int or type(a) == float) and type(b) == str:\n        return max(float(a), float(b.replace(\",\", \".\")), key=float)\n    if type(a) == str and (type(b) == int or type(b) == float):\n        return max(float(a.replace(\",\", \".\"), b), key=float)", "prompt_tokens": 1249, "completion_tokens": 1012, "duration": 44.5353569984436}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True", "prompt_tokens": 697, "completion_tokens": 392, "duration": 18.67725706100464}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)", "prompt_tokens": 873, "completion_tokens": 535, "duration": 34.61802816390991}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result.rstrip(\"-\") + \"-\"\n        else:\n            result += \"_\" if consecutive_spaces <= 2 else \"-\"\n            result += char\n            consecutive_spaces = 0\n    return result.rstrip(\"-\").replace(\" \", \"_\")", "prompt_tokens": 716, "completion_tokens": 416, "duration": 18.10540246963501}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name[0].isalpha() or len(file_name.split('.')[0]) == 0 or len(file_name.split('.')[1]) != 3 or not file_name.split('.')[1].isalpha() or sum(1 for c in file_name if c.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1076, "completion_tokens": 546, "duration": 24.384273052215576}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1162, "completion_tokens": 716, "duration": 28.813889026641846}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_primes(words):\n        return [word for word in words if is_prime(len(word))]\n\n    return ' '.join(get_primes(sentence.split()))", "prompt_tokens": 1745, "completion_tokens": 1125, "duration": 44.12754821777344}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 1146, "completion_tokens": 717, "duration": 38.88498258590698}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 961, "completion_tokens": 594, "duration": 24.201660633087158}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 806, "completion_tokens": 449, "duration": 23.36371898651123}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 905, "completion_tokens": 485, "duration": 18.295891046524048}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 1174, "completion_tokens": 699, "duration": 27.045926570892334}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 994, "completion_tokens": 466, "duration": 18.3525812625885}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "prompt_tokens": 685, "completion_tokens": 407, "duration": 15.378362894058228}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)\n\n# Test with a mix of odd and even positive numbers, including zero\nassert double_the_difference([1, 3, 2, 0]) == 10\n\n# Test with all negative numbers\nassert double_the_difference([-1, -2, 0]) == 0\n\n# Test with a mix of a positive odd number and a negative number\nassert double_the_difference([9, -2]) == 81\n\n# Test with a single zero\nassert double_the_difference([0]) == 0\n\n# Test with an empty list\nassert double_the_difference([]) == 0\n\n# Test with all odd positive numbers\nassert double_the_difference([1, 3, 5]) == 35\n\n# Test with all even positive numbers, including zero\nassert double_the_difference([2, 4, 0]) == 0\n\n# Test with non-integer values in the list (these should be ignored)\nassert double_the_difference([1.5, 2.5, 3, 4]) == 9\n\n# Test with negative odd numbers (they should be ignored)\nassert double_the_difference([-3, -5, -7]) == 0\n\n# Test with a large mix of numbers\nassert double_the_difference([10, 23, -1, 0, 5.5, 7, 42]) == 23**2 + 7**2\n\n# Test with all non-integer types, including floats and strings (they should all be ignored)\nassert double_the_difference([\"hello\", 1.2, 3.4, False]) == 0", "prompt_tokens": 797, "completion_tokens": 714, "duration": 23.462443828582764}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - pred) if score != pred else 0 for score, pred in zip(game, guess)]", "prompt_tokens": 1121, "completion_tokens": 514, "duration": 22.623530387878418}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1229, "completion_tokens": 570, "duration": 23.70763397216797}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 1249, "completion_tokens": 852, "duration": 43.7838408946991}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 572, "completion_tokens": 329, "duration": 17.621331691741943}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        return \"\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 858, "completion_tokens": 653, "duration": 31.604589462280273}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 759, "completion_tokens": 411, "duration": 17.850801944732666}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars_count = unique_chars(word)\n        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars_count\n\n    return max_word", "prompt_tokens": 816, "completion_tokens": 486, "duration": 29.080153703689575}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1176, "completion_tokens": 487, "duration": 18.99564242362976}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1073, "completion_tokens": 592, "duration": 24.692364931106567}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result", "prompt_tokens": 717, "completion_tokens": 383, "duration": 13.711384057998657}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 744, "completion_tokens": 440, "duration": 15.57682752609253}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 870, "completion_tokens": 513, "duration": 28.530043840408325}
