{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 971, "completion_tokens": 607, "duration": 36.22597312927246}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_str = ''\n    for char in paren_string.replace(\" \", ''):\n        if char == '(':\n            count += 1\n            current_str += char\n        elif char == ')':\n            count -= 1\n            current_str += char\n            if count == 0:\n                result.append(current_str)\n                current_str = ''\n    return result", "prompt_tokens": 875, "completion_tokens": 567, "duration": 20.441658973693848}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 779, "completion_tokens": 447, "duration": 30.079198598861694}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 819, "completion_tokens": 452, "duration": 17.447282075881958}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)", "prompt_tokens": 941, "completion_tokens": 575, "duration": 21.80473804473877}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 772, "completion_tokens": 466, "duration": 29.598119735717773}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n    \n    return result", "prompt_tokens": 844, "completion_tokens": 532, "duration": 19.561384439468384}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 808, "completion_tokens": 478, "duration": 20.931225061416626}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 785, "completion_tokens": 448, "duration": 25.49284338951111}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(max(result[-1], numbers[i]))\n    \n    return result", "prompt_tokens": 870, "completion_tokens": 555, "duration": 23.037864446640015}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(1, len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 996, "completion_tokens": 684, "duration": 23.882622718811035}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Strings must have equal length\")\n    \n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result", "prompt_tokens": 820, "completion_tokens": 565, "duration": 32.61583733558655}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 785, "completion_tokens": 447, "duration": 17.04222059249878}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "prompt_tokens": 653, "completion_tokens": 367, "duration": 24.56867814064026}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string)+1)]\n    return prefixes", "prompt_tokens": 581, "completion_tokens": 320, "duration": 17.34419560432434}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 832, "completion_tokens": 367, "duration": 17.165727376937866}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 661, "completion_tokens": 355, "duration": 20.508060932159424}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in notes]", "prompt_tokens": 2577, "completion_tokens": 1573, "duration": 88.6380262374878}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 783, "completion_tokens": 488, "duration": 26.951351642608643}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 663, "completion_tokens": 378, "duration": 14.891053199768066}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            pair = (numbers[i], numbers[i+1])\n    \n    return pair", "prompt_tokens": 1057, "completion_tokens": 639, "duration": 84.83639669418335}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 1015, "completion_tokens": 643, "duration": 24.076518058776855}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 662, "completion_tokens": 335, "duration": 20.644107341766357}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 490, "completion_tokens": 240, "duration": 15.429075002670288}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n//2+1):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 614, "completion_tokens": 378, "duration": 18.22268772125244}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nfrom collections import Counter\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors\n\n\n# Test with prime number\nassert factorize(7) == [7], \"Should return the prime number itself\"\n\n# Test with number having multiple different prime factors\nassert factorize(30) == [2, 3, 5], \"Should return all prime factors\"\n\n# Test with perfect square of a prime number\nassert factorize(49) == [7, 7], \"Should return the prime factor repeated\"\n\n# Test with number having the same prime factor repeated multiple times\nassert factorize(8) == [2, 2, 2], \"Should return the repeated factor\"\n\n# Test with 1 (edge case)\nassert factorize(1) == [], \"Should return an empty list for 1\"\n\n# Test with a large number\nassert factorize(1001) == [7, 11, 13], \"Should handle large numbers correctly\"\n\n# Test with a number that is a product of two primes\nassert factorize(15) == [3, 5], \"Should return two different prime factors\"\n\n# Test with a cube of a prime number\nassert factorize(27) == [3, 3, 3], \"Should return the prime factor repeated three times\"\n\n# Test with a product of prime numbers and their powers\nassert factorize(2*2*3*3*5) == [2, 2, 3, 3, 5], \"Should handle products of prime numbers and their powers\"\n\n# Test with 0 (edge case, assuming function should handle gracefully)\n# Note: Depending on implementation and requirements, factorizing 0 might not be valid.\n# This test assumes the function will return an empty list, but this behavior might need to be defined.\nassert factorize(0) == [], \"Should return an empty list for 0, assuming 0 cannot be factorized\"", "prompt_tokens": 823, "completion_tokens": 859, "duration": 28.779130697250366}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for idx, num in enumerate(numbers) if num not in numbers[:idx] + numbers[idx + 1:]]", "prompt_tokens": 816, "completion_tokens": 515, "duration": 27.609808206558228}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 591, "completion_tokens": 344, "duration": 17.648163318634033}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 615, "completion_tokens": 344, "duration": 22.142454624176025}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 692, "completion_tokens": 374, "duration": 21.10871648788452}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 707, "completion_tokens": 323, "duration": 17.09085750579834}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 573, "completion_tokens": 249, "duration": 11.542853832244873}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    return -xs[0] / xs[1]", "prompt_tokens": 3300, "completion_tokens": 2061, "duration": 60.42704939842224}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i, val in zip(indices, sorted_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1128, "completion_tokens": 725, "duration": 30.019104480743408}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 781, "completion_tokens": 469, "duration": 28.517632722854614}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 726, "completion_tokens": 395, "duration": 26.133317947387695}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 887, "completion_tokens": 609, "duration": 28.354313135147095}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = l.copy()\n    result[::2] = sorted(result[::2])\n    return result", "prompt_tokens": 1077, "completion_tokens": 682, "duration": 38.956191301345825}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    return s[-1] + s[:-1]", "prompt_tokens": 889, "completion_tokens": 491, "duration": 18.39249610900879}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 731, "completion_tokens": 509, "duration": 35.95991039276123}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1134, "completion_tokens": 700, "duration": 45.336753368377686}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n ** 2", "prompt_tokens": 867, "completion_tokens": 395, "duration": 19.551404237747192}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 759, "completion_tokens": 383, "duration": 16.820707321166992}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l) if len(l) > 1 else False", "prompt_tokens": 1003, "completion_tokens": 532, "duration": 35.40731120109558}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 805, "completion_tokens": 496, "duration": 20.747628211975098}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 626, "completion_tokens": 373, "duration": 19.672428607940674}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    a, b, c, d = 0, 0, 2, 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    for _ in range(3, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 894, "completion_tokens": 476, "duration": 23.75126051902771}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]", "prompt_tokens": 817, "completion_tokens": 549, "duration": 22.197468757629395}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 816, "completion_tokens": 506, "duration": 23.550183057785034}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 841, "completion_tokens": 473, "duration": 26.68023419380188}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 1699, "completion_tokens": 815, "duration": 34.398035764694214}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiou')", "prompt_tokens": 834, "completion_tokens": 435, "duration": 20.146878957748413}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 729, "completion_tokens": 414, "duration": 25.94737982749939}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 543, "completion_tokens": 275, "duration": 13.875752210617065}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 844, "completion_tokens": 409, "duration": 28.180957794189453}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "prompt_tokens": 701, "completion_tokens": 467, "duration": 26.942997932434082}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 751, "completion_tokens": 442, "duration": 17.93809962272644}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    else:\n        return False", "prompt_tokens": 808, "completion_tokens": 519, "duration": 21.867842435836792}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 918, "completion_tokens": 537, "duration": 32.58831071853638}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 693, "completion_tokens": 432, "duration": 18.90993642807007}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 609, "completion_tokens": 263, "duration": 11.838240146636963}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 727, "completion_tokens": 429, "duration": 18.98049783706665}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i*coeff for i, coeff in enumerate(xs)][1:]\n\n# Test with a 5th degree polynomial coefficients\nassert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Failed on 5th degree polynomial\"\n\n# Test with a 3rd degree polynomial coefficients\nassert derivative([1, 2, 3]) == [2, 6], \"Failed on 3rd degree polynomial\"\n\n# Test with a quadratic polynomial coefficients\nassert derivative([2, 4, 6]) == [4, 12], \"Failed on quadratic polynomial\"\n\n# Test with a linear polynomial coefficients\nassert derivative([5, 7]) == [7], \"Failed on linear polynomial\"\n\n# Test with a constant term only (0th degree polynomial)\nassert derivative([3]) == [], \"Failed on constant term\"\n\n# Test with an empty list, which implies a 0 polynomial\nassert derivative([]) == [], \"Failed on empty list as input\"\n\n# Test with high-degree polynomial with zeros in between non-zero coefficients\nassert derivative([1, 0, 2, 0, 3]) == [0, 4, 0, 12], \"Failed on polynomial with zeros in between coefficients\"\n\n# Test with a polynomial having a negative coefficient\nassert derivative([-1, 2, -3, 4]) == [2, -6, 12], \"Failed on polynomial with a negative coefficient\"\n\n# Test with a polynomial that has a large coefficient\nassert derivative([1000, 500]) == [500], \"Failed on polynomial with large coefficient\"\n\n# Test with coefficients that are floats\nassert derivative([0.5, 2.5, 3.5]) == [2.5, 7.0], \"Failed on polynomial with float coefficients\"", "prompt_tokens": 776, "completion_tokens": 774, "duration": 29.48658537864685}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 958, "completion_tokens": 549, "duration": 29.366780281066895}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char.lower() in vowels and (char.lower() != 'y' or s[-1].lower() == 'y'))", "prompt_tokens": 1020, "completion_tokens": 404, "duration": 15.29561972618103}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 689, "completion_tokens": 396, "duration": 16.572518825531006}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 960, "completion_tokens": 577, "duration": 23.787286281585693}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1124, "completion_tokens": 564, "duration": 34.061347007751465}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [n for n in arr if n % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    return [min_even_value, min_even_index]", "prompt_tokens": 1198, "completion_tokens": 461, "duration": 16.289796590805054}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if num > freq and freq > result:\n            result = freq\n    return result", "prompt_tokens": 1176, "completion_tokens": 718, "duration": 38.564085960388184}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    for i in range(len(lst)//2):\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[-(i+1)])\n    \n    if len(lst) % 2 == 1:\n        result.append(sorted_lst[len(lst)//2])\n    \n    return result", "prompt_tokens": 804, "completion_tokens": 458, "duration": 21.94454574584961}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 793, "completion_tokens": 460, "duration": 17.62503170967102}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1183, "completion_tokens": 566, "duration": 26.986594200134277}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 954, "completion_tokens": 511, "duration": 28.441022157669067}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 973, "completion_tokens": 475, "duration": 18.184103965759277}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "prompt_tokens": 809, "completion_tokens": 592, "duration": 34.109135389328}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and n > 0 and x == n ** int(x ** (1/n))", "prompt_tokens": 1111, "completion_tokens": 678, "duration": 38.92887330055237}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and (a ** (1/3)).is_integer()) or (a < 0 and ((-a) ** (1/3)).is_integer())", "prompt_tokens": 997, "completion_tokens": 427, "duration": 16.08932590484619}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = \"2357BD\"\n    return sum(1 for digit in num if digit in primes)", "prompt_tokens": 1142, "completion_tokens": 392, "duration": 24.145137786865234}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return \"db0db\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 1002, "completion_tokens": 583, "duration": 21.792282581329346}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 862, "completion_tokens": 512, "duration": 28.21675944328308}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1252, "completion_tokens": 792, "duration": 28.10751962661743}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if string == '':\n        return False\n    return is_prime(len(string))\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 751, "completion_tokens": 484, "duration": 27.33159899711609}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 611, "completion_tokens": 373, "duration": 17.31342124938965}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(x) for x in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 869, "completion_tokens": 453, "duration": 20.740926265716553}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)", "prompt_tokens": 804, "completion_tokens": 549, "duration": 20.673741817474365}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 886, "completion_tokens": 482, "duration": 24.058666944503784}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, col in enumerate(row):\n                if col == x:\n                    coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 1378, "completion_tokens": 749, "duration": 32.21675944328308}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    def get_sum(arr):\n        return arr[0] + arr[-1]\n\n    if get_sum(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1296, "completion_tokens": 762, "duration": 32.59534978866577}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                shifted = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                shifted = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result += shifted\n        else:\n            result += char\n    return result", "prompt_tokens": 762, "completion_tokens": 464, "duration": 21.259800910949707}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]", "prompt_tokens": 870, "completion_tokens": 474, "duration": 29.686675548553467}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.replace('!', '.').replace('?', '.').split('.') if sentence.strip().startswith('I') and sentence.strip() != 'I')", "prompt_tokens": 1714, "completion_tokens": 1164, "duration": 79.93669700622559}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 899, "completion_tokens": 479, "duration": 34.61697316169739}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"AEIOUaeiou\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2).upper() if char.islower() else chr(ord(char) + 2).lower()\n            else:\n                encoded_message += char.upper() if char.islower() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 866, "completion_tokens": 570, "duration": 26.063252449035645}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in lst if is_prime(n)]\n    \n    if not primes:\n        return 0\n\n    largest_prime = max(primes)\n    \n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 2199, "completion_tokens": 1178, "duration": 44.53016424179077}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 954, "completion_tokens": 492, "duration": 23.882339000701904}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1144, "completion_tokens": 756, "duration": 31.532465934753418}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 605, "completion_tokens": 256, "duration": 15.167367935180664}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')", "prompt_tokens": 935, "completion_tokens": 646, "duration": 37.54742097854614}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5 if float(value) > 0 else float(value) - 0.5)", "prompt_tokens": 1953, "completion_tokens": 1238, "duration": 61.84648084640503}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 986, "completion_tokens": 607, "duration": 27.18826723098755}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]\n\n# Test with spaces and no commas\nassert words_string(\"Hello World\") == [\"Hello\", \"World\"]\n\n# Test with commas and no spaces\nassert words_string(\"First,Second,Third\") == [\"First\", \"Second\", \"Third\"]\n\n# Test with both commas and spaces\nassert words_string(\"Apple, Banana, Cherry, Date\") == [\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n\n# Test with a single word (no commas or spaces)\nassert words_string(\"Solo\") == [\"Solo\"]\n\n# Test an empty string\nassert words_string(\"\") == []\n\n# Test with leading and trailing spaces\nassert words_string(\"  Leading and trailing  \") == [\"Leading\", \"and\", \"trailing\"]\n\n# Test with leading and trailing commas\nassert words_string(\",Leading,Trailing,\") == [\"Leading\", \"Trailing\"]\n\n# Test with multiple spaces between words\nassert words_string(\"Multiple   Spaces\") == [\"Multiple\", \"Spaces\"]\n\n# Test with multiple commas between words\nassert words_string(\"One,,Two,,,Three\") == [\"One\", \"Two\", \"Three\"]\n\n# Test with a mix of multiple commas and spaces\nassert words_string(\"Mix, ,of , ,Commas,  and Spaces\") == [\"Mix\", \"of\", \"Commas\", \"and\", \"Spaces\"]\n\n# Test with numbers in string\nassert words_string(\"1, 2, 3, Four, Five\") == [\"1\", \"2\", \"3\", \"Four\", \"Five\"]\n\n# Test with special characters\nassert words_string(\"!@#$,^&*\") == [\"!@#$\", \"^&*\"]\n\n# Test with only commas (no actual words)\nassert words_string(\",,,,\") == []\n\n# Test with only spaces (no actual words)\nassert words_string(\"     \") == []", "prompt_tokens": 791, "completion_tokens": 779, "duration": 28.03352928161621}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0:\n            max_even = max(max_even, num)\n    return max_even", "prompt_tokens": 1025, "completion_tokens": 708, "duration": 31.541826963424683}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 875, "completion_tokens": 451, "duration": 32.32205104827881}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted(num for num in x if all(int(digit) % 2 != 0 for digit in str(num)))", "prompt_tokens": 850, "completion_tokens": 498, "duration": 30.557218074798584}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered_arr = sorted([num for num in arr if num in valid_numbers], reverse=True)\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [number_names[num - 1] for num in filtered_arr]", "prompt_tokens": 1250, "completion_tokens": 622, "duration": 45.112990379333496}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    return [1 if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "prompt_tokens": 957, "completion_tokens": 568, "duration": 30.652149438858032}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n    \n    return (even_count, odd_count)", "prompt_tokens": 1054, "completion_tokens": 552, "duration": 34.12755584716797}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "prompt_tokens": 838, "completion_tokens": 442, "duration": 21.070131540298462}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    sorted_arr = sorted(arr)\n    return arr[min_idx:] + arr[:min_idx] == sorted_arr", "prompt_tokens": 1197, "completion_tokens": 473, "duration": 27.7963764667511}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 0 for x in lst1) == len(lst1) else \"NO\"", "prompt_tokens": 1187, "completion_tokens": 652, "duration": 43.081345081329346}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for letter in test.split():\n        hist[letter] = hist.get(letter, 0) + 1\n\n    max_count = max(hist.values())\n    result = {key: val for key, val in hist.items() if val == max_count}\n    \n    return result", "prompt_tokens": 1018, "completion_tokens": 603, "duration": 32.511496782302856}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 915, "completion_tokens": 450, "duration": 17.322510480880737}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(x) % 2 != 0 for x in s), sum(str(i) for i in range(10)).replace(\"0\", \"\"), sum(str(i) for i in range(10)).replace(\"0\", \"\"), sum(str(i) for i in range(10)).replace(\"0\", \"\")) for s in lst]", "prompt_tokens": 1149, "completion_tokens": 720, "duration": 76.79766321182251}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum", "prompt_tokens": 911, "completion_tokens": 611, "duration": 34.44041609764099}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    lowers = 0\n    for row in grid:\n        lowers += math.ceil(sum(row) / capacity)\n    return lowers", "prompt_tokens": 1680, "completion_tokens": 893, "duration": 82.50829720497131}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1113, "completion_tokens": 618, "duration": 23.50178050994873}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = sum(1 for letter in word if letter.lower() not in 'aeiou' and letter.isalpha())\n        return consonants\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 1031, "completion_tokens": 565, "duration": 29.020182847976685}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n\n    return \"\"", "prompt_tokens": 862, "completion_tokens": 474, "duration": 19.743831157684326}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    str1, str2 = lst\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 1073, "completion_tokens": 655, "duration": 37.53057599067688}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1131, "completion_tokens": 532, "duration": 77.98793911933899}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 875, "completion_tokens": 537, "duration": 19.84247326850891}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum_two_digits = sum(x for x in arr[:k] if 10 <= abs(x) < 100)\n    return sum_two_digits", "prompt_tokens": 1043, "completion_tokens": 646, "duration": 27.595032930374146}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted(set(collatz) - {1})", "prompt_tokens": 1030, "completion_tokens": 457, "duration": 28.449140310287476}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    elif month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    elif month == 2:\n        if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True", "prompt_tokens": 1386, "completion_tokens": 901, "duration": 33.317174434661865}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 == 1)", "prompt_tokens": 1015, "completion_tokens": 623, "duration": 36.29601716995239}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(i) <= 1 for i in set(lst))", "prompt_tokens": 1193, "completion_tokens": 557, "duration": 30.891960620880127}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1279, "completion_tokens": 720, "duration": 44.949808835983276}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 956, "completion_tokens": 587, "duration": 31.92933440208435}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(x, y, visited, path):\n        if len(path) == k:\n            return path\n        neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n        for nx, ny in neighbors:\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited:\n                new_visited = visited.copy()\n                new_visited.add((nx, ny))\n                new_path = path + [grid[nx][ny]]\n                res = dfs(nx, ny, new_visited, new_path)\n                if res:\n                    return res\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            start = grid[i][j]\n            visited = {(i, j)}\n            path = [start]\n            res = dfs(i, j, visited, path)\n            if res:\n                return res", "prompt_tokens": 1553, "completion_tokens": 793, "duration": 41.1457142829895}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [1]\n    if n == 0:\n        return seq\n    seq.append(3)\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    \n    return seq", "prompt_tokens": 1334, "completion_tokens": 779, "duration": 33.27898573875427}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result", "prompt_tokens": 600, "completion_tokens": 321, "duration": 18.77266836166382}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = []\n    \n    for char in string:\n        if char == '[':\n            open_brackets.append(char)\n        elif char == ']' and open_brackets:\n            open_brackets.pop()\n    \n    return len(open_brackets) < len(string) // 2", "prompt_tokens": 710, "completion_tokens": 329, "duration": 18.024771690368652}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (int(num) + (num % 1 > 0)) ** 2\n    return total", "prompt_tokens": 933, "completion_tokens": 482, "duration": 23.709146738052368}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    else:\n        return False", "prompt_tokens": 880, "completion_tokens": 471, "duration": 19.689685106277466}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 830, "completion_tokens": 492, "duration": 31.59266495704651}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    \n    max_neg = max(neg) if neg else None\n    min_pos = min(pos) if pos else None\n    \n    return (max_neg, min_pos)", "prompt_tokens": 924, "completion_tokens": 538, "duration": 23.415018796920776}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 981, "completion_tokens": 585, "duration": 39.916176319122314}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 8 == 0", "prompt_tokens": 1226, "completion_tokens": 727, "duration": 31.871782779693604}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be greater than 0\")\n    result = 1\n    for i in range(1, n + 1):\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 751, "completion_tokens": 458, "duration": 30.674440145492554}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace('   ', '-')\n    text = text.replace('  ', '__')\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 737, "completion_tokens": 383, "duration": 30.97409749031067}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1001, "completion_tokens": 494, "duration": 18.362592220306396}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 1139, "completion_tokens": 701, "duration": 29.926026105880737}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "prompt_tokens": 838, "completion_tokens": 500, "duration": 25.26714015007019}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    return (num1*num2) % (den1*den2) == 0", "prompt_tokens": 1236, "completion_tokens": 801, "duration": 29.352659225463867}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 940, "completion_tokens": 558, "duration": 23.0634024143219}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])", "prompt_tokens": 827, "completion_tokens": 473, "duration": 25.57284665107727}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1053, "completion_tokens": 637, "duration": 37.123233795166016}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n        \n    return tuple([planet for planet in planets if start_index < planets.index(planet) < end_index])", "prompt_tokens": 1074, "completion_tokens": 601, "duration": 38.686789989471436}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words", "prompt_tokens": 954, "completion_tokens": 453, "duration": 28.180758714675903}
{"task_id": "HumanEval/150", "generated_code": "import sympy\n\ndef x_or_y(n, x, y):\n    return x if sympy.isprime(n) else y", "prompt_tokens": 727, "completion_tokens": 402, "duration": 22.21091341972351}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)", "prompt_tokens": 948, "completion_tokens": 530, "duration": 21.60544514656067}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1128, "completion_tokens": 525, "duration": 37.46385145187378}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1250, "completion_tokens": 591, "duration": 26.281670570373535}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 855, "completion_tokens": 466, "duration": 28.081555128097534}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 1)\n    return (even_count, odd_count)", "prompt_tokens": 677, "completion_tokens": 414, "duration": 21.785338401794434}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    if not isinstance(number, int) or number < 1 or number > 1000:\n        return \"Invalid input\"\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    \n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n\n    return roman_num.lower()", "prompt_tokens": 836, "completion_tokens": 641, "duration": 28.621642589569092}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "prompt_tokens": 844, "completion_tokens": 498, "duration": 29.742589712142944}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n\n    return max(words, key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1707, "completion_tokens": 897, "duration": 26.66061019897461}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    remaining = max(0, remaining - need)\n    return [eaten, remaining]", "prompt_tokens": 1329, "completion_tokens": 635, "duration": 35.95557117462158}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i + 1]\n        elif operators[i] == '-':\n            result -= operands[i + 1]\n        elif operators[i] == '*':\n            result *= operands[i + 1]\n        elif operators[i] == '//':\n            result //= operands[i + 1]\n        elif operators[i] == '**':\n            result **= operands[i + 1]\n    return result", "prompt_tokens": 1083, "completion_tokens": 604, "duration": 35.41863799095154}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n            has_letter = True\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 719, "completion_tokens": 391, "duration": 21.858505487442017}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 732, "completion_tokens": 431, "duration": 27.336543321609497}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 762, "completion_tokens": 405, "duration": 22.726480960845947}
