{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 928, "completion_tokens": 564, "duration": 32.06836175918579}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char in \"()\":\n            current += char\n            if current.count(\"(\") == current.count(\")\"):\n                result.append(current)\n                current = \"\"\n    return result", "prompt_tokens": 766, "completion_tokens": 420, "duration": 29.326038360595703}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 734, "completion_tokens": 402, "duration": 25.796621561050415}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 881, "completion_tokens": 514, "duration": 27.277106523513794}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_num = mean(numbers)\n    return sum(abs(num - mean_num) for num in numbers) / len(numbers)", "prompt_tokens": 826, "completion_tokens": 460, "duration": 25.265398025512695}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 879, "completion_tokens": 573, "duration": 31.067660570144653}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    count = 0\n    max_count = 0\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            max_count = max(max_count, count)\n        elif char == ')':\n            count -= 1\n        \n        if char == ' ':\n            levels.append(max_count)\n            max_count = 0\n    \n    levels.append(max_count)\n    \n    return levels", "prompt_tokens": 845, "completion_tokens": 549, "duration": 24.100483655929565}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 459, "duration": 27.106410026550293}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 889, "completion_tokens": 552, "duration": 21.235130071640015}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result", "prompt_tokens": 800, "completion_tokens": 481, "duration": 23.68365168571472}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n    return string", "prompt_tokens": 897, "completion_tokens": 583, "duration": 28.545480966567993}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    res = \"\"\n    for char1, char2 in zip(a, b):\n        res += str(int(char1) ^ int(char2))\n    return res", "prompt_tokens": 784, "completion_tokens": 502, "duration": 23.988295555114746}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 742, "completion_tokens": 381, "duration": 18.785795211791992}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 686, "completion_tokens": 392, "duration": 27.13879132270813}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 593, "completion_tokens": 334, "duration": 25.186294555664062}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 783, "completion_tokens": 318, "duration": 14.681442022323608}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 768, "completion_tokens": 466, "duration": 20.583371877670288}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [durations[note] for note in notes if note in durations]\n\n# Test with a single whole note\nassert parse_music('o') == [4], \"Test with a single whole note should return [4]\"\n\n# Test with a single half note\nassert parse_music('o|') == [2], \"Test with a single half note should return [2]\"\n\n# Test with a single quarter note\nassert parse_music('.|') == [1], \"Test with a single quarter note should return [1]\"\n\n# Test with a combination of all note types\nassert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4], \"Combination of all note types\"\n\n# Test with multiple whole notes\nassert parse_music('o o o') == [4, 4, 4], \"Test with multiple whole notes\"\n\n# Test with multiple half notes\nassert parse_music('o| o| o|') == [2, 2, 2], \"Test with multiple half notes\"\n\n# Test with multiple quarter notes\nassert parse_music('.| .| .|') == [1, 1, 1], \"Test with multiple quarter notes\"\n\n# Test with empty string\nassert parse_music('') == [], \"Empty string should return an empty list\"\n\n# Test with spaces between notes\nassert parse_music('o   o|  .|     o|') == [4, 2, 1, 2], \"Test with spaces between notes\"\n\n# Test with no space between notes (invalid format but should handle gracefully if assumed)\n# Assuming the function will treat each character individually if not separated by space (not part of original spec)\nassert parse_music('oo|.|o|o|.||.|o') == [], \"Test with no space between notes should return empty list or handle gracefully\"\n\n# Test with an invalid note\nassert parse_music('x y z') == [], \"Test with an invalid note should return an empty list or handle gracefully\"\n\n# Test with only spaces (no notes)\nassert parse_music('     ') == [], \"String with only spaces should return an empty list\"", "prompt_tokens": 1804, "completion_tokens": 1543, "duration": 46.938170433044434}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if substring == \"\":\n        return len(string) + 1\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 850, "completion_tokens": 559, "duration": 29.93525457382202}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4', 'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 654, "completion_tokens": 372, "duration": 14.41625714302063}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = min((abs(a - b), a, b) for a in numbers for b in numbers if a != b)\n    return (closest_pair[1], closest_pair[2])", "prompt_tokens": 1005, "completion_tokens": 557, "duration": 36.34925055503845}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 883, "completion_tokens": 511, "duration": 22.218056201934814}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 721, "completion_tokens": 394, "duration": 16.74338960647583}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 517, "completion_tokens": 267, "duration": 12.779345989227295}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 715, "completion_tokens": 469, "duration": 20.528206825256348}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors", "prompt_tokens": 850, "completion_tokens": 476, "duration": 18.580222845077515}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 728, "completion_tokens": 416, "duration": 20.74824595451355}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 561, "completion_tokens": 317, "duration": 16.941171646118164}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 763, "completion_tokens": 492, "duration": 28.929547548294067}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 786, "completion_tokens": 468, "duration": 18.379642963409424}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 866, "completion_tokens": 478, "duration": 18.13186478614807}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 659, "completion_tokens": 334, "duration": 19.12817144393921}
{"task_id": "HumanEval/32", "generated_code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1236, "completion_tokens": 697, "duration": 25.377514123916626}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_third_values = [l[i] for i in third_indices]\n    sorted_third_values.sort()\n    \n    result = l.copy()\n    for i in third_indices:\n        result[i] = sorted_third_values.pop(0)\n    \n    return result", "prompt_tokens": 972, "completion_tokens": 574, "duration": 24.08861494064331}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 860, "completion_tokens": 548, "duration": 29.89756488800049}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 727, "completion_tokens": 396, "duration": 15.827424049377441}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 814, "completion_tokens": 536, "duration": 19.75217366218567}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1007, "completion_tokens": 621, "duration": 25.72021770477295}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1174, "completion_tokens": 832, "duration": 46.51544523239136}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    i = 1\n    count = 0\n    while count < n:\n        num = fib(i)\n        if is_prime(num):\n            count += 1\n        i += 1\n    return num", "prompt_tokens": 733, "completion_tokens": 538, "duration": 20.550398349761963}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1003, "completion_tokens": 569, "duration": 23.434619426727295}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * 2", "prompt_tokens": 769, "completion_tokens": 297, "duration": 13.373656034469604}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 786, "completion_tokens": 410, "duration": 16.486074209213257}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 950, "completion_tokens": 493, "duration": 19.54751229286194}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.insert(0, str(x % base))\n        x //= base\n    return ''.join(digits)", "prompt_tokens": 775, "completion_tokens": 470, "duration": 17.90769124031067}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 492, "completion_tokens": 239, "duration": 9.264874458312988}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 980, "completion_tokens": 565, "duration": 29.40626859664917}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 753, "completion_tokens": 482, "duration": 21.096052169799805}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    text = ''.join([char for char in text if char.isalnum()]).lower()\n    return text == text[::-1]", "prompt_tokens": 710, "completion_tokens": 423, "duration": 19.131875038146973}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 850, "completion_tokens": 482, "duration": 17.78543996810913}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 678, "completion_tokens": 358, "duration": 20.146159648895264}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 927, "completion_tokens": 534, "duration": 37.10582995414734}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)", "prompt_tokens": 865, "completion_tokens": 550, "duration": 24.252341508865356}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 450, "completion_tokens": 182, "duration": 7.288718223571777}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 774, "completion_tokens": 339, "duration": 18.28167700767517}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 680, "completion_tokens": 469, "duration": 24.447061777114868}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return not stack", "prompt_tokens": 648, "completion_tokens": 340, "duration": 20.178090572357178}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing", "prompt_tokens": 774, "completion_tokens": 477, "duration": 22.75983476638794}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 927, "completion_tokens": 546, "duration": 34.23881936073303}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_factors(num):\n        factors = []\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        return factors\n\n    factors = get_factors(n)\n    prime_factors = [factor for factor in factors if is_prime(factor)]\n    return max(prime_factors)", "prompt_tokens": 596, "completion_tokens": 435, "duration": 15.308189868927002}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 681, "completion_tokens": 335, "duration": 19.551918983459473}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 699, "completion_tokens": 399, "duration": 18.267288208007812}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * c for i, c in enumerate(xs)][1:]", "prompt_tokens": 1016, "completion_tokens": 641, "duration": 23.558363676071167}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 935, "completion_tokens": 516, "duration": 24.883954763412476}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouy'\n    \n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    \n    if s[-1].lower() == 'y':\n        count -= 1\n    \n    return count", "prompt_tokens": 812, "completion_tokens": 440, "duration": 14.674646854400635}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 741, "completion_tokens": 446, "duration": 16.124977827072144}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if 'A' <= char <= 'Z')", "prompt_tokens": 861, "completion_tokens": 483, "duration": 29.772783994674683}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[4])\n    return n - apples - oranges", "prompt_tokens": 989, "completion_tokens": 425, "duration": 25.868929624557495}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, num) for i, num in enumerate(arr) if num % 2 == 0]\n    if not evens:\n        return []\n\n    smallest_even = min(evens, key=lambda x: (x[1], x[0]))\n    return [smallest_even[1], smallest_even[0]]", "prompt_tokens": 1283, "completion_tokens": 556, "duration": 22.79792022705078}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    \n    result = -1\n    for num, count in counts.items():\n        if num > 0 and count >= num:\n            result = max(result, num)\n    \n    return result", "prompt_tokens": 1061, "completion_tokens": 622, "duration": 24.028389930725098}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 922, "completion_tokens": 540, "duration": 23.30786442756653}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 979, "completion_tokens": 646, "duration": 35.252397298812866}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False", "prompt_tokens": 1311, "completion_tokens": 702, "duration": 38.16616439819336}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "prompt_tokens": 1009, "completion_tokens": 566, "duration": 19.529040575027466}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 969, "completion_tokens": 471, "duration": 19.414443254470825}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test with the example given in the docstring\nassert is_multiply_prime(30) == True\n\n# Test with a number that is not the multiplication of exactly 3 prime numbers\nassert is_multiply_prime(10) == False\n\n# Test with 1, which is not a prime nor the product of primes\nassert is_multiply_prime(1) == False\n\n# Test with a prime number itself (should return false as it's not a product of 3 primes)\nassert is_multiply_prime(5) == False\n\n# Test with a number that is the multiplication of a prime number by itself and another prime\nassert is_multiply_prime(27) == False\n\n# Test with a number that is the multiplication of the same prime number 3 times\nassert is_multiply_prime(8) == False\n\n# Test with the largest number less than 100 that is the product of 3 primes\nassert is_multiply_prime(97) == False\n\n# Test with a number that is the multiplication of 3 primes where one of the primes is the largest prime less than 10\nassert is_multiply_prime(3*5*7) == True\n\n# Test with the number 2*2*2 which is below 100 but not valid as it's not 3 different primes\nassert is_multiply_prime(8) == False\n\n# Test with a valid larger number that is the product of 3 primes\nassert is_multiply_prime(2*7*11) == True\n\n# Test with a negative number, should return false as primes are positive\nassert is_multiply_prime(-30) == False\n\n# Test with zero, should return false as it's not a product of primes\nassert is_multiply_prime(0) == False", "prompt_tokens": 890, "completion_tokens": 1009, "duration": 44.44008207321167}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n <= 1:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 2134, "completion_tokens": 1233, "duration": 48.33947491645813}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a > 0 and int(a ** (1/3) + 0.00000001) ** 3 == a) or (a < 0 and int((-a) ** (1/3) + 0.00000001) ** 3 == -a)", "prompt_tokens": 1345, "completion_tokens": 804, "duration": 22.8877055644989}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1177, "completion_tokens": 436, "duration": 18.81216073036194}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 838, "completion_tokens": 405, "duration": 14.893692016601562}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 995, "completion_tokens": 645, "duration": 33.17491292953491}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1177, "completion_tokens": 658, "duration": 19.55919909477234}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 610, "completion_tokens": 326, "duration": 11.925817012786865}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 18 * 10 ** (n - 2)", "prompt_tokens": 511, "completion_tokens": 263, "duration": 13.480910062789917}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total = sum(int(digit) for digit in str(N))\n    return bin(total)[2:]", "prompt_tokens": 2962, "completion_tokens": 1868, "duration": 51.67754077911377}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0)", "prompt_tokens": 633, "completion_tokens": 378, "duration": 14.44069218635559}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 862, "completion_tokens": 458, "duration": 25.19516634941101}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n# Test cases have been corrected and the function implementation is now correct", "prompt_tokens": 1463, "completion_tokens": 842, "duration": 45.25397777557373}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1317, "completion_tokens": 772, "duration": 42.81444597244263}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                base = ord('A')\n            else:\n                base = ord('a')\n            result += chr((ord(char) - base + shift) % 26 + base)\n        else:\n            result += char\n    return result", "prompt_tokens": 820, "completion_tokens": 502, "duration": 26.577782154083252}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 815, "completion_tokens": 435, "duration": 16.080931425094604}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.?!]', S) if sentence.strip().startswith('I'))\n\nimport re\n# Test with a string that doesn't contain any sentences starting with \"I\"\nassert is_bored(\"Hello world. The sky is blue. Everyone is happy.\") == 0\n\n# Test with a single sentence that starts with \"I\"\nassert is_bored(\"I am feeling bored.\") == 1\n\n# Test with multiple sentences, one of which starts with \"I\"\nassert is_bored(\"The sky is blue. I love sunny days. What about you?\") == 1\n\n# Test with multiple sentences, more than one starts with \"I\"\nassert is_bored(\"I am bored. I want to go outside. The weather is nice.\") == 2\n\n# Test with sentences that start with \"I\" but are not immediately after the delimiter\nassert is_bored(\" The sky is blue. I love sunny days.  I want to go outside.\") == 2\n\n# Test with no sentences in the string\nassert is_bored(\"\") == 0\n\n# Test with only delimiters in the string\nassert is_bored(\".?!\") == 0\n\n# Test with sentences that have \"I\" not as the starting word\nassert is_bored(\"Hello, I am here. You know I am always early.\") == 0\n\n# Test with sentences that start with lowercase \"i\"\nassert is_bored(\"i am feeling bored today. i want to do something exciting.\") == 0\n\n# Test with sentences that contain \"I\" in quotes or as part of another word\nassert is_bored('\"I am here.\" Is it really you? Imagining the best for everyone.') == 1\n\n# Test with sentences that start with \"I\" followed by punctuation\nassert is_bored(\"I'm feeling great. Isn't it a wonderful day? I've been better.\") == 3\n\n# Test with a long string and multiple sentences with various conditions\nassert is_bored(\"Today is a good day. I think I'll go for a walk. Have you seen my shoes? I haven't found them yet. Let's go together!\") == 2", "prompt_tokens": 832, "completion_tokens": 902, "duration": 24.138030767440796}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 996, "completion_tokens": 597, "duration": 24.607550859451294}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for letter in message:\n        if letter.isalpha():\n            if letter.lower() in vowels:\n                new_letter = chr((ord(letter) + 2 - ord('a')) % 26 + ord('A')) if letter.isupper() else chr((ord(letter) + 2 - ord('a')) % 26 + ord('a'))\n                encoded_message += new_letter\n            else:\n                encoded_message += letter.swapcase()\n        else:\n            encoded_message += letter\n    return encoded_message", "prompt_tokens": 709, "completion_tokens": 436, "duration": 14.603863716125488}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = max(filter(is_prime, lst), default=0)\n    return sum_digits(max_prime)", "prompt_tokens": 1530, "completion_tokens": 878, "duration": 44.787405014038086}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(isinstance(key, str) and key.islower() for key in dict.keys()) or all(isinstance(key, str) and key.isupper() for key in dict.keys())", "prompt_tokens": 940, "completion_tokens": 474, "duration": 22.103281497955322}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]\n\n# Test with n=0, expecting an empty list because there are no primes less than 0\nassert count_up_to(0) == []\n\n# Test with n=1, expecting an empty list because there are no primes less than 1\nassert count_up_to(1) == []\n\n# Test with n=2, expecting an empty list because there are no primes less than 2\nassert count_up_to(2) == []\n\n# Test with a small number, n=5, expecting [2, 3] because these are the primes less than 5\nassert count_up_to(5) == [2, 3]\n\n# Test with n=11, which includes several primes less than itself\nassert count_up_to(11) == [2, 3, 5, 7]\n\n# Test with n=20, which includes multiple primes less than itself\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\n# Test with n=18, a number that is not prime but has primes less than itself\nassert count_up_to(18) == [2, 3, 5, 7, 11, 13, 17]\n\n# Test with a larger number to ensure the function scales, n=30\nassert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n# Edge case: Test with a prime number to see if it correctly excludes the number itself, n=13\nassert count_up_to(13) == [2, 3, 5, 7, 11]\n\n# Test the function with a negative number, even though the function specifies non-negative integers, to see if it handles it gracefully\n# This might depend on how strictly the function adheres to its contract; it might raise an error, or it could return an empty list.\n# For the sake of this unit test, let's expect an empty list, but this behavior is undefined based on the docstring.\nassert count_up_to(-1) == []\n\n# Test with a very close prime number, n=3, expecting [2] because 2 is the only prime less than 3\nassert count_up_to(3) == [2]", "prompt_tokens": 957, "completion_tokens": 1059, "duration": 38.46427392959595}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 738, "completion_tokens": 389, "duration": 23.497285842895508}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')", "prompt_tokens": 1341, "completion_tokens": 874, "duration": 33.33715057373047}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(float(value) + 0.5) if float(value) % 1 >= 0.5 else int(float(value) - 0.5)", "prompt_tokens": 973, "completion_tokens": 522, "duration": 30.801717281341553}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            result.append(n + 2*i)\n        else:\n            result.append(n + 2*i + 1)\n    return result", "prompt_tokens": 841, "completion_tokens": 457, "duration": 20.078598737716675}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 833, "completion_tokens": 439, "duration": 20.863295078277588}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max(i for i in range(x, y + 1) if i % 2 == 0) if any(i % 2 == 0 for i in range(x, y + 1)) else -1", "prompt_tokens": 803, "completion_tokens": 491, "duration": 26.88912272453308}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(round(avg))[2:]", "prompt_tokens": 874, "completion_tokens": 453, "duration": 20.414406299591064}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 932, "completion_tokens": 597, "duration": 22.354600429534912}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    sorted_arr = sorted(num for num in arr if 1 <= num <= 9)\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[num-1] for num in reversed_arr]", "prompt_tokens": 1087, "completion_tokens": 435, "duration": 27.437540531158447}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 948, "completion_tokens": 600, "duration": 41.782065868377686}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))\n    odd_count = sum(1 for i in range(1, n+1) if i % 2 != 0 and is_palindrome(i))\n\n    return (even_count, odd_count)", "prompt_tokens": 1141, "completion_tokens": 637, "duration": 35.021859884262085}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 809, "completion_tokens": 424, "duration": 16.044238805770874}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    return sorted(arr) == arr or sorted(arr) == arr[-1:] + arr[:-1]", "prompt_tokens": 2262, "completion_tokens": 1124, "duration": 31.304039001464844}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    total_even_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    return \"YES\" if total_even_lst1 == len(lst1) or total_even_lst1 <= len(lst1) + len(lst2) else \"NO\"", "prompt_tokens": 1126, "completion_tokens": 619, "duration": 23.003952741622925}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values())\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 1049, "completion_tokens": 627, "duration": 32.107179164886475}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\".join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1020, "completion_tokens": 550, "duration": 30.24386215209961}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(sum(1 for char in string if int(char) % 2 != 0)) for string in lst]", "prompt_tokens": 1262, "completion_tokens": 795, "duration": 34.50338339805603}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 829, "completion_tokens": 528, "duration": 20.884159564971924}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    def calculate_buckets_needed(row, capacity):\n        return math.ceil(sum(row) / capacity)\n    \n    buckets_needed = sum(calculate_buckets_needed(row, capacity) for row in grid)\n    return buckets_needed", "prompt_tokens": 1392, "completion_tokens": 621, "duration": 22.467714548110962}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 1153, "completion_tokens": 658, "duration": 27.298300743103027}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]\n\nassert select_words(\"\", 3) == [], \"Empty string should return an empty list\"\nassert select_words(\"Hello\", 3) == [\"Hello\"], \"Single word with 3 consonants should be returned\"\nassert select_words(\"Sky\", 2) == [], \"Single word without 2 consonants should not be returned\"\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Words with exactly 3 consonants should be returned\"\nassert select_words(\"simple white space\", 2) == [], \"No words with exactly 2 consonants should return an empty list\"\nassert select_words(\"big big bridge\", 4) == [\"bridge\"], \"Only 'bridge' has exactly 4 consonants\"\nassert select_words(\"A big Little dog\", 3) == [\"big\", \"dog\"], \"Words with exactly 3 consonants, ignoring case\"\nassert select_words(\"  Hello world  \", 4) == [\"world\"], \"Leading/trailing spaces should be ignored, 'world' has 4 consonants\"\nassert select_words(\"Crazy rhythm\", 5) == [\"rhythm\"], \"'rhythm' has exactly 5 consonants including y\"\nassert select_words(\"I am in a queue\", 0) == [\"I\", \"a\"], \"Words without consonants should be returned\"\nassert select_words(\"This is a particularly long test to see if the function can handle a lot of consonants\", 10) == [\"particularly\", \"consonants\"], \"Words with exactly 10 consonants should be returned\"", "prompt_tokens": 3769, "completion_tokens": 2490, "duration": 67.99274754524231}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 1026, "completion_tokens": 640, "duration": 21.63857364654541}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 1025, "completion_tokens": 577, "duration": 20.714543104171753}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1222, "completion_tokens": 623, "duration": 42.70013236999512}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 723, "completion_tokens": 385, "duration": 21.8910174369812}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 1040, "completion_tokens": 632, "duration": 85.12828183174133}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1382, "completion_tokens": 803, "duration": 40.98477244377136}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n        if not (1 <= month <= 12) or not (1 <= day <= 31):\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if ((year % 4 == 0 and year % 100 != 0) or year % 400 == 0) and day > 29:\n                return False\n            elif day > 28:\n                return False\n        return True\n    except:\n        return False", "prompt_tokens": 1273, "completion_tokens": 708, "duration": 23.832679748535156}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([char for char in txt if char.islower() and ord(char) % 2 != 0])", "prompt_tokens": 987, "completion_tokens": 584, "duration": 36.89697194099426}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted_lst", "prompt_tokens": 1165, "completion_tokens": 521, "duration": 23.401052951812744}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    length = end - start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1312, "completion_tokens": 752, "duration": 37.7051043510437}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for num in arr:\n        product *= 1 if num >= 0 else -1\n        sum_magnitude += abs(num)\n    return product * sum_magnitude", "prompt_tokens": 872, "completion_tokens": 513, "duration": 25.880472898483276}
{"task_id": "HumanEval/129", "generated_code": "[improved impl]: \ndef minPath(grid, k):\n    def dfs(curr, path):\n        if len(path) == k:\n            return path\n        x, y = curr\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and (new_x, new_y) not in path:\n                new_path = dfs((new_x, new_y), path + [(new_x, new_y)])\n                if new_path:\n                    return new_path\n        return None\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = dfs((i, j), [(i, j)])\n            if path:\n                return [grid[x][y] for x, y in path]", "prompt_tokens": 5625, "completion_tokens": 2904, "duration": 71.395423412323}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    res = [3]\n    if n == 0:\n        return res\n    res.append(1)\n    if n == 1:\n        return res\n    res.append(2)\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            res.append(1 + i // 2)\n        else:\n            res.append(res[i-1] + res[i-2] + res[i-3])\n    return res", "prompt_tokens": 1139, "completion_tokens": 595, "duration": 32.114752769470215}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product", "prompt_tokens": 575, "completion_tokens": 305, "duration": 20.687208890914917}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = []\n    \n    for bracket in string:\n        if bracket == '[':\n            open_brackets.append(bracket)\n        elif bracket == ']' and open_brackets:\n            open_brackets.pop()\n    \n    return len(open_brackets) < len(string) // 2 and len(open_brackets) > 0", "prompt_tokens": 802, "completion_tokens": 431, "duration": 22.262945890426636}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    total = sum((int(x) ** 2 for x in lst))\n    return total", "prompt_tokens": 1100, "completion_tokens": 632, "duration": 29.748159646987915}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt.strip()[-1] not in set(txt.strip().split()[-1])", "prompt_tokens": 1600, "completion_tokens": 952, "duration": 26.73362159729004}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 732, "completion_tokens": 395, "duration": 21.515784740447998}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 1018, "completion_tokens": 636, "duration": 23.09320044517517}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return a if a > b else b\n    elif type(a) == float and type(b) == float:\n        return a if a > b else b\n    elif type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return a if float(a) > float(b) else b\n    elif type(a) == int and type(b) == float:\n        return b if a < b else a\n    elif type(a) == float and type(b) == int:\n        return b if a < b else a\n    elif type(a) == str:\n        a = a.replace(',', '.')\n        return a if float(a) > b else b\n    elif type(b) == str:\n        b = b.replace(',', '.')\n        return a if a > float(b) else b\n    else:\n        return None", "prompt_tokens": 997, "completion_tokens": 746, "duration": 34.438124895095825}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 2 == 0 and n >= 8", "prompt_tokens": 683, "completion_tokens": 370, "duration": 16.500319004058838}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i ** i\n    return result", "prompt_tokens": 668, "completion_tokens": 333, "duration": 13.89063811302185}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-1] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 1008, "completion_tokens": 699, "duration": 27.02986240386963}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n\n    if '.' not in file_name:\n        return 'No'\n\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1198, "completion_tokens": 690, "duration": 35.67223024368286}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 1226, "completion_tokens": 749, "duration": 38.9068706035614}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_words(sentence):\n        words = sentence.split()\n        prime_words = [word for word in words if is_prime(len(word))]\n        return ' '.join(prime_words)\n\n    return get_prime_words(sentence)", "prompt_tokens": 863, "completion_tokens": 494, "duration": 21.589343786239624}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    return (x_num * n_num) % (x_denom * n_denom) == 0", "prompt_tokens": 996, "completion_tokens": 566, "duration": 22.66585063934326}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 883, "completion_tokens": 501, "duration": 44.18664741516113}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 876, "completion_tokens": 500, "duration": 26.07111954689026}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1029, "completion_tokens": 613, "duration": 33.715410470962524}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 1116, "completion_tokens": 637, "duration": 35.03846526145935}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1042, "completion_tokens": 514, "duration": 30.452746629714966}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 684, "completion_tokens": 412, "duration": 15.180046558380127}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) * 2", "prompt_tokens": 1007, "completion_tokens": 594, "duration": 27.656009197235107}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1103, "completion_tokens": 500, "duration": 20.42999839782715}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for char in extension if char.isupper())\n        sm_count = sum(1 for char in extension if char.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1284, "completion_tokens": 629, "duration": 23.04118037223816}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a , b):\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False", "prompt_tokens": 949, "completion_tokens": 552, "duration": 21.46252989768982}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even, odd", "prompt_tokens": 630, "completion_tokens": 382, "duration": 20.71785593032837}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value in sorted(roman_numerals, reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n\n    return result.lower()", "prompt_tokens": 796, "completion_tokens": 550, "duration": 18.896291255950928}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or c**2 + a**2 == b**2:\n        return True\n    else:\n        return False", "prompt_tokens": 908, "completion_tokens": 571, "duration": 39.7091760635376}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 791, "completion_tokens": 459, "duration": 20.98051142692566}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left]", "prompt_tokens": 1310, "completion_tokens": 616, "duration": 26.479120016098022}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1046, "completion_tokens": 565, "duration": 19.149603605270386}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = []\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(result)", "prompt_tokens": 726, "completion_tokens": 415, "duration": 16.805384874343872}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 759, "completion_tokens": 455, "duration": 19.591647386550903}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start = a if a % 2 == 0 else a + 1\n    return [i for i in range(start, b+1, 2)]", "prompt_tokens": 2422, "completion_tokens": 1466, "duration": 89.33346652984619}
