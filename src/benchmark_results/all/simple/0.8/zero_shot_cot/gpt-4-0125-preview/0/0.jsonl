{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 909, "completion_tokens": 545, "duration": 24.33568263053894}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    for char in paren_string:\n        if char in '()':\n            group += char\n            if group.count('(') == group.count(')'):\n                result.append(group)\n                group = ''\n    return result", "prompt_tokens": 815, "completion_tokens": 474, "duration": 25.77783513069153}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 642, "completion_tokens": 310, "duration": 14.85291576385498}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 921, "completion_tokens": 554, "duration": 39.96397638320923}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    return statistics.mean([abs(x - mean) for x in numbers])", "prompt_tokens": 973, "completion_tokens": 602, "duration": 36.51223945617676}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.extend([num, delimiter])\n    result.pop()  # Remove the extra delimiter at the end\n    return result", "prompt_tokens": 840, "completion_tokens": 535, "duration": 17.442633152008057}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    max_level = 0\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            max_level = max(max_level, current_level)\n        elif char == ')':\n            current_level -= 1\n\n    levels.append(max_level)\n    return levels", "prompt_tokens": 989, "completion_tokens": 676, "duration": 34.48639440536499}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 865, "completion_tokens": 535, "duration": 17.71040368080139}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    result_sum = sum(numbers)\n    result_product = 1\n    for num in numbers:\n        result_product *= num\n    return result_sum, result_product", "prompt_tokens": 904, "completion_tokens": 574, "duration": 23.17389988899231}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(max(numbers[:i+1]))\n    return result", "prompt_tokens": 896, "completion_tokens": 563, "duration": 30.21615433692932}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    def find_palindrome_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n        return ''\n\n    return string + find_palindrome_suffix(string)[::-1]", "prompt_tokens": 1018, "completion_tokens": 701, "duration": 42.63886475563049}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        result += str(int(char_a) ^ int(char_b))\n    return result", "prompt_tokens": 600, "completion_tokens": 318, "duration": 15.62637209892273}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), -strings.index(x)))", "prompt_tokens": 860, "completion_tokens": 523, "duration": 22.655592918395996}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 653, "completion_tokens": 366, "duration": 14.248658895492554}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i] for i in range(1, len(string) + 1)]\n    return prefixes", "prompt_tokens": 557, "completion_tokens": 298, "duration": 14.156676292419434}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 611, "completion_tokens": 319, "duration": 18.974960803985596}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 759, "completion_tokens": 457, "duration": 29.021241664886475}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_list = music_string.split()\n    return [notes.get(note, 0) for note in music_list]", "prompt_tokens": 1083, "completion_tokens": 631, "duration": 21.61396837234497}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 805, "completion_tokens": 516, "duration": 31.858311414718628}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: numberals.index(x)))", "prompt_tokens": 684, "completion_tokens": 363, "duration": 16.053580045700073}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = min(((numbers[i], numbers[i+1]) for i in range(len(numbers) - 1)), key=lambda pair: pair[1] - pair[0])\n    return closest_pair", "prompt_tokens": 1489, "completion_tokens": 775, "duration": 28.54668116569519}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 893, "completion_tokens": 521, "duration": 23.731053113937378}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n# Test with a mix of integers, floats, and strings\nassert filter_integers([1, 2.5, 'string', 3]) == [1, 3]\n\n# Test with only integers\nassert filter_integers([4, 5, 6]) == [4, 5, 6]\n\n# Test with no integers\nassert filter_integers(['a', 'b', 3.14, []]) == []\n\n# Test with empty list\nassert filter_integers([]) == []\n\n# Test with non-numeric types only (strings, lists, dictionaries)\nassert filter_integers(['hello', [], {}, 'world']) == []\n\n# Test with negative integers and zeros\nassert filter_integers([-1, 0, -5, 10]) == [-1, 0, -5, 10]\n\n# Test with booleans (which are technically integers in Python)\nassert filter_integers([True, False, 1, 'string']) == [True, False, 1]\n\n# Test with a mix of float and integer values that are the same numerically but different types\nassert filter_integers([1, 1.0, 2.0, 2]) == [1, 2]\n\n# Test with complex numbers which should be filtered out\nassert filter_integers([1+2j, 3, 4.5]) == [3]\n\n# Test with nested lists and dictionaries which should be filtered out\nassert filter_integers([[1,2,3], 3, {'a': 1}, 4]) == [3, 4]", "prompt_tokens": 701, "completion_tokens": 706, "duration": 28.750731945037842}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 509, "completion_tokens": 259, "duration": 20.995799779891968}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            result = i\n    return result", "prompt_tokens": 592, "completion_tokens": 357, "duration": 16.041642904281616}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 1110, "completion_tokens": 756, "duration": 44.54263114929199}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 803, "completion_tokens": 491, "duration": 29.107179164886475}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 620, "completion_tokens": 377, "duration": 23.561457633972168}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 627, "completion_tokens": 356, "duration": 13.652426719665527}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 896, "completion_tokens": 578, "duration": 20.575955152511597}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 693, "completion_tokens": 309, "duration": 23.756419897079468}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "prompt_tokens": 704, "completion_tokens": 425, "duration": 15.722228765487671}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"", "prompt_tokens": 1151, "completion_tokens": 611, "duration": 81.3059892654419}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    new_list = l[:]\n    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_indices_divisible_by_three = [l[i] for i in indices_divisible_by_three]\n    sorted_values = sorted(values_at_indices_divisible_by_three)\n    for i, val in zip(indices_divisible_by_three, sorted_values):\n        new_list[i] = val\n    return new_list", "prompt_tokens": 1092, "completion_tokens": 715, "duration": 24.168424367904663}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 767, "completion_tokens": 455, "duration": 20.507446765899658}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 788, "completion_tokens": 457, "duration": 28.464069366455078}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 986, "completion_tokens": 708, "duration": 40.46677541732788}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l)) if i % 2 == 0 or l[i] == l[i-1]]", "prompt_tokens": 1025, "completion_tokens": 657, "duration": 71.29733920097351}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    return \"\".join([(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)])", "prompt_tokens": 2369, "completion_tokens": 865, "duration": 24.642080068588257}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)", "prompt_tokens": 867, "completion_tokens": 673, "duration": 30.122560262680054}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 1004, "completion_tokens": 570, "duration": 20.32938003540039}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n**2", "prompt_tokens": 856, "completion_tokens": 383, "duration": 34.454808712005615}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 704, "completion_tokens": 322, "duration": 21.599929809570312}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 983, "completion_tokens": 526, "duration": 26.542047262191772}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x < 0:\n        sign = \"-\"\n        x = abs(x)\n    else:\n        sign = \"\"\n\n    if x == 0:\n        return \"0\"\n\n    digits = []\n    while x:\n        digits.insert(0, str(x % base))\n        x //= base\n\n    return sign + \"\".join(digits)", "prompt_tokens": 981, "completion_tokens": 700, "duration": 37.71154570579529}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 525, "completion_tokens": 272, "duration": 12.970041275024414}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 935, "completion_tokens": 533, "duration": 24.577914714813232}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 835, "completion_tokens": 564, "duration": 23.40959119796753}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 581, "completion_tokens": 271, "duration": 12.588148593902588}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 892, "completion_tokens": 524, "duration": 33.73220896720886}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 728, "completion_tokens": 449, "duration": 15.14083981513977}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiouAEIOU'])", "prompt_tokens": 1582, "completion_tokens": 959, "duration": 45.208475828170776}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 795, "completion_tokens": 480, "duration": 17.041197299957275}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 490, "completion_tokens": 222, "duration": 8.606349229812622}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 857, "completion_tokens": 422, "duration": 28.38677954673767}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 669, "completion_tokens": 416, "duration": 25.250802516937256}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0", "prompt_tokens": 703, "completion_tokens": 399, "duration": 13.95972990989685}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing", "prompt_tokens": 866, "completion_tokens": 569, "duration": 32.605417251586914}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 1122, "completion_tokens": 518, "duration": 24.96914029121399}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num):\n        factors = []\n        d = 2\n        while d * d <= num:\n            if num % d == 0:\n                factors.append(d)\n                num //= d\n            else:\n                d += 1\n        if num > 1:\n            factors.append(num)\n        return factors\n\n    factors = prime_factors(n)\n    return max(factor for factor in factors if is_prime(factor))", "prompt_tokens": 609, "completion_tokens": 452, "duration": 22.612929105758667}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 701, "completion_tokens": 355, "duration": 15.973956823348999}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 700, "completion_tokens": 397, "duration": 14.316180229187012}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    result = [xs[i] * i for i in range(1, len(xs))]\n    return result\n\n# Test when polynomial is a constant (derivative should be [0])\nassert derivative([5]) == [], \"Derivative of a constant should be an empty list\"\n\n# Test a linear polynomial (should return the coefficient as the only element in the list)\nassert derivative([3, 5]) == [5], \"Derivative of a linear polynomial should be its coefficient\"\n\n# Test when polynomial coefficients are zeros\nassert derivative([0, 0, 0, 0]) == [0, 0, 0], \"Derivative of all zeros should maintain zeros except the last term\"\n\n# Test a quadratic polynomial\nassert derivative([2, 3, 4]) == [3, 8], \"Coefficient of x should be 3 and coefficient of x^2 term should be 8 after derivation\"\n\n# Test a cubic polynomial\nassert derivative([1, -1, 2, -3]) == [-1, 4, -9], \"Cubic polynomial should correctly calculate derivative coefficients\"\n\n# Test with negative coefficients\nassert derivative([-4, -3, -2, -1]) == [-3, -4, -3], \"Negative coefficients should be derived correctly\"\n\n# Test with a higher degree polynomial\nassert derivative([0, 1, 0, 3, 0, 5]) == [1, 0, 9, 0, 25], \"Polynomial with zero and non-zero coefficients should be derived correctly\"\n\n# Test with a single zero coefficient\nassert derivative([0]) == [], \"Derivative of a zero constant should be an empty list\"\n\n# Test polynomial with decimal coefficients\nassert derivative([0.5, 1.5, 2.5]) == [1.5, 5.0], \"Decimal coefficients should be derived correctly\"\n\n# Test an empty list (should raise an error or return an empty list based on design decision)\n# This test assumes the function should return an empty list for an empty input, which might vary depending on requirements\nassert derivative([]) == [], \"Derivative of an empty list should return an empty list\"\n\n# Test with large coefficients and high degree\nassert derivative([10, 100, 1000, 10000, 100000]) == [100, 2000, 30000, 400000], \"Large coefficients and high degrees should be handled correctly\"", "prompt_tokens": 896, "completion_tokens": 1023, "duration": 35.901225566864014}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 966, "completion_tokens": 557, "duration": 41.52578353881836}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s)-1))\n    return count", "prompt_tokens": 673, "completion_tokens": 289, "duration": 10.338056325912476}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 812, "completion_tokens": 513, "duration": 23.320483684539795}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 827, "completion_tokens": 444, "duration": 19.682711124420166}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges", "prompt_tokens": 1235, "completion_tokens": 675, "duration": 75.40864086151123}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    evens = [(i, x) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n\n    smallest_even_value = min(evens, key=lambda x: (x[1], x[0]))\n    return [smallest_even_value[1], smallest_even_value[0]]", "prompt_tokens": 1267, "completion_tokens": 543, "duration": 17.796342134475708}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 1042, "completion_tokens": 581, "duration": 46.83297824859619}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    return [lst.pop(0) if i%2==0 else lst.pop() for i in range(len(lst))]\n\n# Test with a standard list of consecutive integers\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n\n# Test with a list of identical elements\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\n# Test with an empty list\nassert strange_sort_list([]) == []\n\n# Test with a list of negative and positive integers\nassert strange_sort_list([-3, 1, 2, -2]) == [-3, 2, -2, 1]\n\n# Test with a list that has a large range of numbers\nassert strange_sort_list([100, -100, 50, -50]) == [-100, 100, -50, 50]\n\n# Test with a list of non-consecutive integers\nassert strange_sort_list([10, 7, 2, 15, 3]) == [2, 15, 3, 10, 7]\n\n# Test with a list containing only one element\nassert strange_sort_list([42]) == [42]\n\n# Test with a list containing two elements\nassert strange_sort_list([2, 1]) == [1, 2]\n\n# Test with a list containing three elements\nassert strange_sort_list([3, 2, 1]) == [1, 3, 2]\n\n# Test with a list of integers in descending order\nassert strange_sort_list([4, 3, 2, 1]) == [1, 4, 2, 3]\n\n# Test with a list containing both small and large numbers\nassert strange_sort_list([1000, 3, 2, 100, -2000]) == [-2000, 1000, 2, 100, 3]", "prompt_tokens": 915, "completion_tokens": 912, "duration": 26.945700883865356}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 756, "completion_tokens": 423, "duration": 17.86586022377014}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1158, "completion_tokens": 541, "duration": 21.494240045547485}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 1067, "completion_tokens": 624, "duration": 26.3856098651886}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 932, "completion_tokens": 433, "duration": 62.09921836853027}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n    return count == 3\n\n# Test with a number that is a product of three distinct prime numbers\nassert is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n\n# Test with a number that is not the product of three prime numbers (only two prime factors)\nassert is_multiply_prime(6) == False  # 6 = 2 * 3\n\n# Test with a number that is the product of a prime number repeated 3 times\nassert is_multiply_prime(8) == False  # 8 = 2 * 2 * 2, repetition of the same prime\n\n# Test with a prime number (only one prime factor)\nassert is_multiply_prime(7) == False  # 7 is a prime number itself\n\n# Test with a number that is a product of three prime numbers, but one of them repeated\nassert is_multiply_prime(18) == False  # 18 = 2 * 3 * 3, repetition of the prime 3\n\n# Test with a number that is the product of more than three prime numbers\nassert is_multiply_prime(210) == False  # 210 = 2 * 3 * 5 * 7, more than three prime factors\n\n# Test with 1, which is neither prime nor composite\nassert is_multiply_prime(1) == False  # 1 is not a product of prime numbers\n\n# Test with a negative number (invalid input as per the docstring, but good for robustness)\n# Assuming the function is only meant for positive integers < 100\nassert is_multiply_prime(-30) == False  # Negative numbers are outside the expected domain\n\n# Test with a number at the upper limit of the domain (since a is less than 100, let's try 99)\n# 99 = 3 * 3 * 11, which is a valid case but one prime is repeated\nassert is_multiply_prime(99) == False  # 99 = 3 * 3 * 11\n\n# Test with 0, which is a special case and should return false\nassert is_multiply_prime(0) == False  # 0 cannot be expressed as a product of prime numbers\n\n# Test with a number that is a product of three distinct prime numbers, and one of the primes is the largest prime < 100\nassert is_multiply_prime(5 * 7 * 97) == True  # 5 * 7 * 97 = 3395, which is beyond the specified domain, but this tests the logic", "prompt_tokens": 872, "completion_tokens": 1161, "duration": 41.59849500656128}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 0:\n        return x == 1\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x < 0 or n < 0:\n        return False\n    if x == n:\n        return True\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x", "prompt_tokens": 1033, "completion_tokens": 667, "duration": 42.549657106399536}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0 and round(a ** (1/3)) ** 3 == a) or (a < 0 and round(abs(a) ** (1/3)) ** 3 == abs(a))", "prompt_tokens": 721, "completion_tokens": 373, "duration": 16.018487215042114}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = \"2357BD\"\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 1130, "completion_tokens": 389, "duration": 21.642468452453613}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 888, "completion_tokens": 451, "duration": 23.598544597625732}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 1032, "completion_tokens": 680, "duration": 29.738301277160645}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1135, "completion_tokens": 675, "duration": 22.356485605239868}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    return is_prime(len(string))\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "prompt_tokens": 624, "completion_tokens": 348, "duration": 16.97824263572693}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) + 8 * (n - 1) * 10 ** (n - 2)", "prompt_tokens": 611, "completion_tokens": 383, "duration": 15.873374700546265}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 889, "completion_tokens": 462, "duration": 19.726803302764893}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 704, "completion_tokens": 450, "duration": 16.144413709640503}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 955, "completion_tokens": 551, "duration": 37.91331219673157}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    \n    return result", "prompt_tokens": 1193, "completion_tokens": 564, "duration": 27.49908471107483}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    arr = array[:]\n    if (arr[0] + arr[-1]) % 2 == 0:\n        return sorted(arr, reverse=True)\n    else:\n        return sorted(arr)", "prompt_tokens": 1347, "completion_tokens": 807, "duration": 32.546887159347534}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 820, "completion_tokens": 508, "duration": 47.07965040206909}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 880, "completion_tokens": 500, "duration": 30.898386001586914}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return S.count('I ') + S.count('I.') + S.count('I?') + S.count('I!')", "prompt_tokens": 950, "completion_tokens": 588, "duration": 43.968621492385864}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y)", "prompt_tokens": 897, "completion_tokens": 482, "duration": 31.3763644695282}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message", "prompt_tokens": 956, "completion_tokens": 640, "duration": 27.66232943534851}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    max_prime = max(prime_values)\n    return sum_of_digits(max_prime)", "prompt_tokens": 1296, "completion_tokens": 665, "duration": 84.73079776763916}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dictionary):\n    if not dictionary:\n        return False\n    \n    lower_case = all(key.islower() for key in dictionary if isinstance(key, str))\n    upper_case = all(key.isupper() for key in dictionary if isinstance(key, str))\n    \n    return lower_case or upper_case", "prompt_tokens": 990, "completion_tokens": 534, "duration": 25.707011699676514}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        for i in range(2, num):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    return primes", "prompt_tokens": 970, "completion_tokens": 554, "duration": 24.210837602615356}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 782, "completion_tokens": 433, "duration": 25.340052843093872}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i] in 'AEIOU')", "prompt_tokens": 713, "completion_tokens": 423, "duration": 31.01578378677368}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 914, "completion_tokens": 464, "duration": 111.6567006111145}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    if n <= 0:\n        return []\n    \n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        pile.append(n)\n    \n    return pile", "prompt_tokens": 926, "completion_tokens": 550, "duration": 36.95946741104126}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip(\",\") for word in s.replace(\",\", \" \").split() if word.strip(\",\")]", "prompt_tokens": 1620, "completion_tokens": 1028, "duration": 45.4085328578949}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    return biggest_even", "prompt_tokens": 818, "completion_tokens": 502, "duration": 32.99445652961731}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)", "prompt_tokens": 1596, "completion_tokens": 931, "duration": 27.561194896697998}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 995, "completion_tokens": 432, "duration": 17.60793662071228}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [mapping[x] for x in filtered]", "prompt_tokens": 1149, "completion_tokens": 525, "duration": 23.412028074264526}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 831, "completion_tokens": 483, "duration": 33.46595358848572}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return even_count, odd_count", "prompt_tokens": 1058, "completion_tokens": 557, "duration": 20.39743995666504}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 809, "completion_tokens": 409, "duration": 25.514856100082397}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1275, "completion_tokens": 555, "duration": 30.954343557357788}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(num % 2 == 1 for num in lst1) <= sum(num % 2 == 0 for num in lst2) else \"NO\"", "prompt_tokens": 1104, "completion_tokens": 579, "duration": 68.65139126777649}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n\n    max_count = max(hist.values())\n\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 962, "completion_tokens": 540, "duration": 37.758788108825684}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1211, "completion_tokens": 741, "duration": 42.7742965221405}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(c) % 2 != 0 for c in s)}n the str{s}ng {s} of the {s}nput.\" for s in lst]", "prompt_tokens": 1109, "completion_tokens": 637, "duration": 36.64960217475891}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 815, "completion_tokens": 524, "duration": 32.872336626052856}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, bucket_capacity):\n    import math\n    \n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / bucket_capacity)", "prompt_tokens": 1559, "completion_tokens": 771, "duration": 37.74367618560791}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 1042, "completion_tokens": 561, "duration": 32.47767376899719}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1116, "completion_tokens": 644, "duration": 39.74202084541321}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    for i in range(len(word)-3, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n\n    return \"\"", "prompt_tokens": 885, "completion_tokens": 509, "duration": 64.9224374294281}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for string in lst:\n        for char in string:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 966, "completion_tokens": 512, "duration": 19.828792572021484}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 1088, "completion_tokens": 489, "duration": 32.07737755775452}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 751, "completion_tokens": 413, "duration": 29.024765491485596}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 864, "completion_tokens": 456, "duration": 20.853150367736816}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 1041, "completion_tokens": 470, "duration": 30.058732986450195}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 1208, "completion_tokens": 712, "duration": 27.01767063140869}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count", "prompt_tokens": 843, "completion_tokens": 445, "duration": 71.72371792793274}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and all(lst.count(num) <= 1 for num in set(lst))", "prompt_tokens": 1596, "completion_tokens": 593, "duration": 40.41048049926758}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1256, "completion_tokens": 696, "duration": 43.016024589538574}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    for num in arr:\n        product *= 1 if num == 0 else abs(num) * (1 if num > 0 else -1)\n\n    return sum(product)", "prompt_tokens": 1072, "completion_tokens": 706, "duration": 23.320677042007446}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    import itertools\n    n = len(grid)\n    cells = [(i, j) for i in range(n) for j in range(n)]\n    paths = list(itertools.combinations(cells, k))\n    min_path = min(paths, key=lambda p: sum(grid[i][j] for i, j in p))\n    return [grid[i][j] for i, j in min_path]", "prompt_tokens": 1743, "completion_tokens": 861, "duration": 33.04774332046509}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    a, b, c = 3, 2, 1\n    for i in range(n):\n        tribonacci.append(a)\n        a, b, c = b, c, a + b + c\n    return tribonacci", "prompt_tokens": 1084, "completion_tokens": 498, "duration": 16.1404390335083}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_digits_product *= int(digit)\n    return odd_digits_product", "prompt_tokens": 554, "completion_tokens": 281, "duration": 10.69361138343811}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    open_brackets = 0\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']' and open_brackets > 0:\n            open_brackets -= 1\n    return open_brackets == 0", "prompt_tokens": 1335, "completion_tokens": 729, "duration": 32.55076789855957}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 1014, "completion_tokens": 542, "duration": 20.9157075881958}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and txt[-2] == ' '", "prompt_tokens": 801, "completion_tokens": 372, "duration": 14.615971326828003}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 934, "completion_tokens": 597, "duration": 27.63757300376892}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints = [i for i in lst if i > 0]\n    \n    largest_neg = None if not neg_ints else max(neg_ints)\n    smallest_pos = None if not pos_ints else min(pos_ints)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 941, "completion_tokens": 552, "duration": 21.942689180374146}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == int and type(b) == int:\n        return None if a == b else max(a, b)\n    if type(a) == float or type(b) == float:\n        return None if float(a) == float(b) else max(float(a), float(b))\n    if type(a) == str and type(b) == str:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        return None if float(a) == float(b) else max(float(a), float(b))\n    return None if a == b else max(a, b)", "prompt_tokens": 1052, "completion_tokens": 720, "duration": 28.115208864212036}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0", "prompt_tokens": 677, "completion_tokens": 359, "duration": 12.50432538986206}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 966, "completion_tokens": 652, "duration": 21.240102767944336}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    return text", "prompt_tokens": 769, "completion_tokens": 428, "duration": 31.00502896308899}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if len([char for char in name if char.isdigit()]) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1033, "completion_tokens": 532, "duration": 24.378806352615356}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total", "prompt_tokens": 966, "completion_tokens": 520, "duration": 16.592390298843384}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 905, "completion_tokens": 522, "duration": 30.65615725517273}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) % 1 == 0", "prompt_tokens": 1192, "completion_tokens": 731, "duration": 29.469387531280518}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 858, "completion_tokens": 475, "duration": 17.599730730056763}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 875, "completion_tokens": 535, "duration": 33.44498610496521}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 945, "completion_tokens": 537, "duration": 20.990318298339844}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start < end:\n        return tuple(planets[start + 1:end])\n    elif start > end:\n        return tuple(planets[end + 1:start][::-1])\n    else:\n        return ()", "prompt_tokens": 966, "completion_tokens": 488, "duration": 19.87724494934082}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "prompt_tokens": 888, "completion_tokens": 377, "duration": 12.591733455657959}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 733, "completion_tokens": 462, "duration": 17.392993450164795}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if type(x) == int and x > 0 and x % 2 != 0)\n\n# Test with a mix of positive odd, positive even, and zero\nassert double_the_difference([1, 3, 2, 0]) == 10, \"Test with odd, even, and zero\"\n\n# Test with all negative numbers and zero\nassert double_the_difference([-1, -2, 0]) == 0, \"Test with negatives and zero\"\n\n# Test with a single positive odd number and a negative\nassert double_the_difference([9, -2]) == 81, \"Test with a single positive odd and a negative\"\n\n# Test with only zero\nassert double_the_difference([0]) == 0, \"Test with zero\"\n\n# Test with an empty list\nassert double_the_difference([]) == 0, \"Test with an empty list\"\n\n# Test with all positive even numbers\nassert double_the_difference([2, 4, 6]) == 0, \"Test with positive evens\"\n\n# Test with large numbers\nassert double_the_difference([1001, 10003]) == 1001**2 + 10003**2, \"Test with large numbers\"\n\n# Test with floating point numbers (which should be ignored)\nassert double_the_difference([1.5, 2.5, 3.5, 4.5]) == 0, \"Test with floating point numbers\"\n\n# Test with only negative odd numbers\nassert double_the_difference([-3, -5, -7]) == 0, \"Test with negative odds\"\n\n# Test with non-integer types mixed in\nassert double_the_difference([1, 'a', 3, None]) == 10, \"Test with non-integer types\"", "prompt_tokens": 807, "completion_tokens": 734, "duration": 19.858476638793945}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1094, "completion_tokens": 491, "duration": 35.217573404312134}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1195, "completion_tokens": 556, "duration": 23.16624140739441}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False", "prompt_tokens": 953, "completion_tokens": 551, "duration": 18.97063136100769}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 638, "completion_tokens": 375, "duration": 22.75300097465515}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = ''\n    for value, numeral in sorted(roman_nums.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result.lower()", "prompt_tokens": 971, "completion_tokens": 724, "duration": 42.22214865684509}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 865, "completion_tokens": 517, "duration": 17.203859329223633}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def unique_chars(word):\n        return len(set(word))\n    \n    return min(words, key=lambda x: (-unique_chars(x), x))", "prompt_tokens": 1535, "completion_tokens": 938, "duration": 33.46922039985657}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total = number + remaining\n    eaten = min(total, need)\n    remaining = max(0, total - need)\n    return [eaten, remaining]", "prompt_tokens": 1179, "completion_tokens": 489, "duration": 21.792593717575073}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i+1]\n        elif operators[i] == '-':\n            result -= operands[i+1]\n        elif operators[i] == '*':\n            result *= operands[i+1]\n        elif operators[i] == '//':\n            result //= operands[i+1]\n        elif operators[i] == '**':\n            result **= operands[i+1]\n    return result", "prompt_tokens": 1528, "completion_tokens": 1044, "duration": 42.01764750480652}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 877, "completion_tokens": 563, "duration": 18.04412317276001}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 698, "completion_tokens": 394, "duration": 26.505739212036133}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0 and i != 0]", "prompt_tokens": 860, "completion_tokens": 508, "duration": 76.81990599632263}
