{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 65, "duration": 6.741673231124878}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces from the input string\n    stack = []\n    result = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If the stack is empty, we have a complete group\n                result.append(''.join(current_group))\n                current_group = []  # Reset current group for the next one\n\n    return result", "prompt_tokens": 165, "completion_tokens": 142, "duration": 14.776389837265015}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.619093418121338}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 6.549208879470825}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.637730121612549}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.438265562057495}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "prompt_tokens": 162, "completion_tokens": 103, "duration": 11.388912677764893}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 90, "duration": 11.832865953445435}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 78, "duration": 6.453197002410889}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_max_list = [max_so_far]\n    for number in numbers[1:]:\n        if number > max_so_far:\n            max_so_far = number\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list", "prompt_tokens": 150, "completion_tokens": 78, "duration": 4.7600343227386475}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]\n    return string + string[::-1]", "prompt_tokens": 192, "completion_tokens": 74, "duration": 6.549520492553711}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.517400026321411}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 81, "duration": 6.185535669326782}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.7004730701446533}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 74, "duration": 5.645420789718628}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 8.860125064849854}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.764340877532959}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    parsed_notes = []\n    i = 0\n    while i < len(notes):\n        if i + 1 < len(notes) and notes[i] + '|' == notes[i+1]:\n            parsed_notes.append(note_to_beats[notes[i] + notes[i+1]])\n            i += 2\n        else:\n            parsed_notes.append(note_to_beats[notes[i]])\n            i += 1\n    return parsed_notes", "prompt_tokens": 222, "completion_tokens": 146, "duration": 11.603878259658813}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 6.480946063995361}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 155, "completion_tokens": 111, "duration": 9.332120180130005}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 6.580606698989868}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 162, "duration": 9.883909463882446}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 10.184370279312134}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.923236846923828}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 4.375608921051025}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 68, "duration": 4.885304689407349}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 3.695247173309326}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.6563565731048584}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 56, "duration": 3.9903221130371094}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 98, "duration": 8.290903091430664}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.142662525177002}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.967134952545166}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non-zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 192, "duration": 14.374675512313843}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"Sorts elements at indices divisible by 3 in a list.\"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements at indices divisible by 3 with sorted elements\n    for i in range(len(divisible_by_three)):\n        l[i * 3] = divisible_by_three_sorted[i]\n    return l", "prompt_tokens": 200, "completion_tokens": 123, "duration": 11.14093017578125}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 2.2455809116363525}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.5774054527282715}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.50212836265564}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = l[::2]\n    even_indices.sort()\n    result = []\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result", "prompt_tokens": 173, "completion_tokens": 84, "duration": 6.39231538772583}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycling of elements in each group unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 14.434202909469604}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        current_fib = next(fib_gen)\n        if current_fib > 1 and is_prime(current_fib):\n            count += 1\n            if count == n:\n                return current_fib", "prompt_tokens": 147, "completion_tokens": 161, "duration": 10.267558097839355}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 5.579068183898926}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars have the same speed and there are equal numbers of cars moving\n    in opposite directions, each car moving left to right will eventually collide\n    with each car moving right to left. Thus, the number of collisions is simply\n    the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 87, "duration": 4.661757946014404}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.360375642776489}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.9493601322174072}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 3.503272771835327}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"\n    Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 56, "duration": 5.004941940307617}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 2\n    elif n == 3: return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 5.538315057754517}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.890472412109375}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.512031078338623}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 155, "completion_tokens": 97, "duration": 8.448768615722656}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.2885901927948}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 172, "completion_tokens": 57, "duration": 5.6732518672943115}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 2.9492740631103516}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.123518943786621}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.5387790203094482}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 46, "duration": 3.030364751815796}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.464614391326904}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 5.215243577957153}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 28, "duration": 2.7992873191833496}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n > 1:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:  # n is itself a prime number larger than any factor found so far\n        prime_factor = n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 171, "duration": 14.995337724685669}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 144, "completion_tokens": 43, "duration": 4.5241782665252686}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 9.26419448852539}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.363732099533081}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "prompt_tokens": 199, "completion_tokens": 93, "duration": 9.934950351715088}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 4.163088321685791}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 97, "duration": 8.12384819984436}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.5578091144561768}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 260, "completion_tokens": 48, "duration": 3.883467674255371}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.632183313369751}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for number, frequency in counts.items():\n        if number <= frequency:\n            result = max(result, number)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 5.118736505508423}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))  # Append smallest\n        if sorted_list:  # Check if list is not empty after popping smallest\n            result.append(sorted_list.pop())  # Append largest\n    return result", "prompt_tokens": 174, "completion_tokens": 116, "duration": 4.9561192989349365}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 203, "duration": 13.632932424545288}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.598679542541504}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 7.597705841064453}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    return lst1 if len_lst1 <= len_lst2 else lst2", "prompt_tokens": 243, "completion_tokens": 59, "duration": 4.752641916275024}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a // i) % j == 0 and is_prime(j) and is_prime(a // i // j):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 133, "duration": 9.991474866867065}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.69733452796936}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    root = a**(1/3)\n    if round(root) ** 3 == a:\n        return True\n    else:\n        return False", "prompt_tokens": 160, "completion_tokens": 40, "duration": 2.478339672088623}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    \"\"\"\n    Returns the count of prime hexadecimal digits in the given string.\n    \"\"\"\n    prime_hex_digits = set('2357BD')\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 53, "duration": 4.881047010421753}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.469590902328491}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 4.492349863052368}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades based on the specified criteria.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 269, "duration": 12.108550310134888}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.874074697494507}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (2 * (10**(n-1))) - (10**(n-2))", "prompt_tokens": 94, "completion_tokens": 77, "duration": 8.281901359558105}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 3.046696901321411}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(el for i, el in enumerate(lst) if i % 2 == 1 and el % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 37, "duration": 4.731053829193115}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Reorders each word in the string based on the ascii values of its characters.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 48, "duration": 4.895821809768677}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Finds all occurrences of integer x in a 2D list and returns a list of tuples representing their positions.\n    Positions are sorted first by row in ascending order, then by column in descending order within each row.\n    \"\"\"\n    positions = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                positions.append((i, j))\n    # Sort by row in ascending order, and then by column in descending order\n    return sorted(positions, key=lambda position: (position[0], -position[1]))", "prompt_tokens": 309, "completion_tokens": 132, "duration": 11.278947114944458}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 122, "duration": 9.826232671737671}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 5.605860710144043}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    else:\n        return unique_sorted[1]", "prompt_tokens": 174, "completion_tokens": 42, "duration": 4.927601337432861}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms (sentences starting with \"I\") in a given string.\n    \n    Parameters:\n    S (str): The input string containing sentences.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences using '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    \n    # Count sentences starting with \"I\"\n    boredom_count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    \n    return boredom_count", "prompt_tokens": 157, "completion_tokens": 131, "duration": 8.229970932006836}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.869601011276245}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += vowels[char]\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 126, "duration": 6.3609795570373535}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum([int(digit) for digit in str(max_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 7.5026891231536865}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 114, "duration": 8.657312393188477}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.687696933746338}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 5.071485996246338}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 116, "duration": 6.040271759033203}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    number = float(value)\n    if number > 0:\n        if number - int(number) < 0.5:\n            return int(number)\n        else:\n            return int(number) + 1\n    else:\n        if abs(number) - abs(int(number)) < 0.5:\n            return int(number)\n        else:\n            return int(number) - 1", "prompt_tokens": 206, "completion_tokens": 88, "duration": 5.535425662994385}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 168, "duration": 8.20918607711792}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    # Split based on comma or space, while removing empty strings resulted from multiple separators\n    return [word for word in re.split(r'[,\\s]+', s) if word]", "prompt_tokens": 166, "completion_tokens": 51, "duration": 4.021735429763794}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    Args:\n    x (int): The start of the range.\n    y (int): The end of the range.\n\n    Returns:\n    int: The biggest even integer in the range [x, y], or -1 if none exists.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 145, "duration": 7.83551287651062}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 3.257307291030884}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 152, "completion_tokens": 53, "duration": 4.766668796539307}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    number_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [number_names[i] for i in filtered]", "prompt_tokens": 326, "completion_tokens": 101, "duration": 5.535786151885986}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x <= 1:\n            return 1\n        return x * factorial(x - 1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 103, "duration": 6.918280124664307}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 8.313866376876831}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n        else:\n            return sum(int(d) for d in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 80, "duration": 4.551341772079468}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:  # Check if array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:  # Compare current element with the next element in a circular way\n            count += 1\n        if count > 1:  # If there are more than one element which is greater than its next element, return False\n            return False\n    return True", "prompt_tokens": 349, "completion_tokens": 117, "duration": 9.666754007339478}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 84, "duration": 6.7633538246154785}
{"task_id": "HumanEval/111", "generated_code": "def histogram(text):\n    # Split the text into words\n    words = text.split()\n    # Create an empty dictionary to store letter frequency\n    freq = {}\n    # Iterate over each word in the list\n    for word in words:\n        # Increment the letter's count in freq\n        freq[word] = freq.get(word, 0) + 1\n    # Find the maximum count\n    max_count = max(freq.values(), default=0)\n    # Return letters that have the maximum count\n    return {letter: count for letter, count in freq.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 128, "duration": 9.893021821975708}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_str = ''.join(filter(lambda x: x not in c, s))\n    return result_str, result_str == result_str[::-1]", "prompt_tokens": 212, "completion_tokens": 41, "duration": 5.2620673179626465}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for item in lst:\n        odd_count = sum(1 for char in item if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 9.132431507110596}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        if current_sum > 0:\n            current_sum = num\n        else:\n            current_sum += num\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 146, "duration": 9.928865432739258}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_units_of_water = sum(sum(row) for row in grid)\n    return math.ceil(total_units_of_water / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 3.952404737472534}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of integers based on the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 66, "duration": 6.103790760040283}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    return [word for word in s.split() if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 66, "duration": 5.9763336181640625}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    # Iterate over the word in reverse, skipping the first and last characters\n    for i in range(len(word) - 2, 0, -1):\n        # Check if the current character is a vowel and surrounded by consonants\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 106, "duration": 9.007990837097168}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    # If both strings are already balanced, any order works.\n    if first.count('(') == first.count(')') and second.count('(') == second.count(')'):\n        return 'Yes'\n    # If concatenating first + second is balanced, it works.\n    elif first.count('(') - first.count(')') == second.count(')') - second.count('('):\n        return 'Yes'\n    # If concatenating second + first is balanced, it works.\n    elif second.count('(') - second.count(')') == first.count(')') - first.count('('):\n        return 'Yes'\n    # No way to make a good string\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 161, "duration": 6.6692328453063965}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 3.8135151863098145}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.4316670894622803}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.9041860103607178}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 99, "duration": 4.536102294921875}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    date_parts = date.split(\"-\")\n    if len(date_parts) != 3:\n        return False\n    month, day, year = date_parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day = int(month), int(day)\n    if not (1 <= month <= 12):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= day <= 31):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    return True", "prompt_tokens": 313, "completion_tokens": 197, "duration": 9.58939790725708}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 6.684280633926392}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 7.910358905792236}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    # Calculate the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start\n    \n    # Check if they actually intersect\n    if length < 0:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 304, "completion_tokens": 135, "duration": 8.461577415466309}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= 1 if num > 0 else -1 if num < 0 else 0\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 5.12823748588562}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    value_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    \n    def neighbors(val):\n        i, j = value_to_pos[val]\n        for di, dj in moves:\n            if 0 <= i + di < N and 0 <= j + dj < N:\n                yield grid[i + di][j + dj]\n                \n    def dijkstra():\n        pq = [(0, [grid[0][0]])]  # cost, path\n        seen = {(grid[0][0], 1): 0}\n        while pq:\n            cost, path = heappop(pq)\n            if len(path) == k:\n                return path\n            for nei in neighbors(path[-1]):\n                new_cost = cost + 1\n                new_path = path + [nei]\n                if (nei, len(new_path)) not in seen or seen[(nei, len(new_path))] > new_cost:\n                    seen[(nei, len(new_path))] = new_cost\n                    heappush(pq, (new_cost, new_path))\n    \n    return dijkstra()", "prompt_tokens": 446, "completion_tokens": 298, "duration": 11.739988803863525}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Cache to store calculated values\n    cache = {1: 3}\n\n    # Helper function to calculate tribonacci using memoization\n    def helper(x):\n        if x in cache:\n            return cache[x]\n        if x % 2 == 0:\n            cache[x] = 1 + x / 2\n        else:\n            cache[x] = helper(x-1) + helper(x-2) + helper(x+1)\n        return cache[x]\n\n    # Calculate tribonacci numbers up to n+1\n    for i in range(2, n + 2):\n        helper(i)\n    \n    # Return the first n+1 tribonacci numbers\n    return [cache[i] for i in range(1, n + 2)]", "prompt_tokens": 285, "completion_tokens": 166, "duration": 17.576688051223755}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 72, "duration": 6.013747692108154}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 61, "duration": 5.485050439834595}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 2.61728835105896}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    if not txt or not txt.strip() or not txt[-1].isalpha():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())", "prompt_tokens": 187, "completion_tokens": 166, "duration": 11.29193663597107}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 3.3003997802734375}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 4.2603113651275635}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        try:\n            return float(x.replace(',', '.'))\n        except ValueError:\n            return float(x)\n        except AttributeError:\n            return float(x)\n\n    a_float, b_float = to_float(a), to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 93, "duration": 5.066149473190308}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    # As the smallest even numbers are 2, and the sum of four 2s is 8, \n    # any number less than 8 cannot be expressed as the sum of 4 even numbers\n    if n < 8:\n        return False\n    # For any number greater than or equal to 8, if it is even, it can always be expressed \n    # as the sum of four even numbers. Example: n = 8 -> 2+2+2+2, n = 10 -> 2+2+2+4, etc.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 168, "duration": 12.997329711914062}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 72, "duration": 3.751528263092041}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace more than two spaces with \"-\"\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (now all single or double) with \"_\"\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 159, "duration": 10.10552167892456}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 97, "duration": 8.54243540763855}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 2.7183897495269775}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 4.8655781745910645}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 3.8137803077697754}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts a list of integers in ascending order based on the sum of their digits.\n    If several items have a similar sum, they are ordered by their index in the original list.\n\n    Args:\n    nums (List[int]): The list of integers to sort.\n\n    Returns:\n    List[int]: The sorted list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 104, "duration": 4.543268918991089}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(num):\n        str_num = str(abs(num))\n        return int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0\n\n    return sum(1 for num in nums if num > 10 and is_odd(num))", "prompt_tokens": 169, "completion_tokens": 70, "duration": 5.72499942779541}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Generating the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counting the occurrences of numbers modulo 3\n    mod_count = [0] * 3\n    for num in a:\n        mod_count[num % 3] += 1\n    \n    # Calculating the number of valid triples\n    # a[i], a[j], and a[k] can form a multiple of 3 if their remainders are all 0, or all different (0, 1, 2)\n    count = 0\n    # Case 1: All numbers have a remainder of 0 when divided by 3\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    # Case 2: One number from each remainder group (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 245, "duration": 17.28359365463257}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 121, "duration": 7.442179918289185}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Delete strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first by length of the word, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 237, "completion_tokens": 78, "duration": 4.361392974853516}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 3.600510835647583}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 71, "duration": 5.995046377182007}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 3.9715845584869385}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(name):\n        CAP = sum(1 for char in name if char.isupper())\n        SM = sum(1 for char in name if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 78, "duration": 7.029290676116943}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a * 2\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 70, "duration": 3.9890267848968506}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 4.982439994812012}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numeral_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    result = ''\n    for value, numeral in roman_numeral_map:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 151, "completion_tokens": 225, "duration": 12.569027185440063}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 2.9176855087280273}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word", "prompt_tokens": 170, "completion_tokens": 73, "duration": 5.50246787071228}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 2.5689210891723633}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 111, "duration": 7.773964881896973}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "prompt_tokens": 157, "completion_tokens": 51, "duration": 3.1502363681793213}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 6.5511932373046875}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 3.890976905822754}
