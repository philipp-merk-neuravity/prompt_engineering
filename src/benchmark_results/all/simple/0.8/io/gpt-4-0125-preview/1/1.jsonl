{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 64, "duration": 5.926371097564697}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove all spaces\n    stack = []\n    result = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If the stack is empty, we've closed a group\n                result.append(''.join(current_group))\n                current_group = []  # Reset for next group\n                \n    return result", "prompt_tokens": 165, "completion_tokens": 136, "duration": 6.849583625793457}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.1886823177337646}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 5.4603259563446045}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 110, "duration": 7.0609917640686035}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result += [delimeter, number]\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 5.819343566894531}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 114, "duration": 7.117127418518066}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 40, "duration": 5.126919507980347}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 114, "duration": 7.742015600204468}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_so_far = numbers[0] if numbers else 0\n    rolling_maxes = []\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 103, "duration": 10.76568603515625}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\"\"\"\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 64, "duration": 3.801347255706787}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.7595343589782715}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 6.507554292678833}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 4.733363151550293}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 56, "duration": 6.102732181549072}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 118, "completion_tokens": 30, "duration": 4.039191007614136}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.2456328868865967}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.81525444984436}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 92, "duration": 5.325397491455078}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 107, "duration": 8.07196855545044}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i + 1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 124, "duration": 9.992826461791992}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 173, "completion_tokens": 58, "duration": 4.030084848403931}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 92, "duration": 6.067535400390625}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 46, "duration": 3.6890406608581543}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 3.4496817588806152}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Handle 2 separately to simplify the loop\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors from 3 onwards\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 138, "duration": 9.826066493988037}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 49, "duration": 5.127566576004028}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 3.329491376876831}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 62, "duration": 2.4979076385498047}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 59, "duration": 5.253531217575073}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 5.948008298873901}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.29856538772583}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root_scalar\n    \n    # Define a function representing the polynomial\n    def f(x):\n        return poly(xs, x)\n    \n    # Find a root using the Brent method (suitable for a wide range of problems)\n    result = root_scalar(f, bracket=[-100, 100], method='brentq')\n    \n    return result.root", "prompt_tokens": 309, "completion_tokens": 241, "duration": 10.467966794967651}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these extracted elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements at indices divisible by 3 with sorted ones\n    for i, value in enumerate(divisible_by_three_sorted):\n        l[i * 3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 107, "duration": 5.329700946807861}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 7.038347959518433}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 4.728349208831787}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 60, "duration": 5.225181341171265}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i, value in enumerate(even_indices_values):\n        l[i * 2] = value\n    return l", "prompt_tokens": 173, "completion_tokens": 121, "duration": 9.615773916244507}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # split encoded string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group to decode, unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 117, "duration": 7.8239991664886475}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count, i = 0, 0\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1", "prompt_tokens": 147, "completion_tokens": 159, "duration": 9.931488990783691}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 209, "completion_tokens": 123, "duration": 6.555413484573364}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move with the same speed and start far away from each other, each car moving left to right will collide\n    with each car moving right to left exactly once. Therefore, the number of collisions is simply the product of the\n    number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 83, "duration": 5.162527322769165}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 8.205367803573608}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.639274835586548}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 141, "completion_tokens": 60, "duration": 3.853573799133301}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.3739142417907715}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 8.72641897201538}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.143999099731445}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 4.961712121963501}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    # To prevent large number computations, use power with modulo\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 57, "duration": 4.393983364105225}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.275651454925537}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 3.26786208152771}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 45, "duration": 2.8946714401245117}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.4240076541900635}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.331973075866699}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 46, "duration": 2.7691681385040283}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.663950681686401}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 67, "duration": 5.443613052368164}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 42, "duration": 4.689674377441406}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factor = n\n    while factor > 1:\n        if n % factor == 0 and is_prime(factor):\n            return factor\n        factor -= 1\n    return factor", "prompt_tokens": 113, "completion_tokens": 108, "duration": 5.746238470077515}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 109, "duration": 7.658491134643555}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 4.996758460998535}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.1917080879211426}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 100, "duration": 4.894617319107056}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s if char in \"aeiou\")\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"python\"))  # Expected output: 1\nprint(vowels_count(\"fly\"))  # Expected output: 1\nprint(vowels_count(\"qwrtypsdfghjklzxcvbnm\"))  # Expected output: 0\nprint(vowels_count(\"Y\"))  # Expected output: 1", "prompt_tokens": 176, "completion_tokens": 163, "duration": 10.350478172302246}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    elif shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 70, "duration": 4.560260057449341}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.142157793045044}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 2.5743701457977295}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(value, idx) for idx, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 4.1426637172698975}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each number in the list\n    freq = Counter(lst)\n\n    # Sort the items of the frequency counter by the key in descending order\n    sorted_items = sorted(freq.items(), key=lambda x: x[0], reverse=True)\n\n    # Iterate over each item\n    for number, count in sorted_items:\n        # Check if the count is greater than or equal to the number itself\n        if count >= number:\n            return number\n    return -1", "prompt_tokens": 215, "completion_tokens": 114, "duration": 6.0565736293792725}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 3.4755654335021973}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 169, "duration": 7.503359317779541}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.245915174484253}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 5.180081605911255}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.0569779872894287}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        # Count the number of 2s that divide n\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        # n must be odd at this point\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        # If n is a prime number greater than 2\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3 and all(is_prime(f) for f in factors)", "prompt_tokens": 129, "completion_tokens": 219, "duration": 14.099563598632812}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    current = n\n    while current <= x:\n        if current == x:\n            return True\n        current *= n\n    return False", "prompt_tokens": 192, "completion_tokens": 56, "duration": 4.289622783660889}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 3.408017158508301}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Prime hexadecimal digits: 2, 3, 5, 7, B, D\n    prime_hex_digits = set(\"2357BD\")\n    return sum(1 for char in num if char in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 58, "duration": 4.006504774093628}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 3.224893808364868}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 5.285136699676514}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts numerical grades to letter grades based on a specific grading scale.\n    \n    Args:\n    grades (list of float): List of numerical grades.\n    \n    Returns:\n    list of str: List of letter grades corresponding to the numerical grades.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 305, "duration": 18.9630446434021}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 6.20522665977478}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one 1-digit number starts or ends with 1, which is 1 itself.\n    else:\n        # For n > 1, we have 2 sets of numbers to consider:\n        # 1. Numbers starting with 1, which are 10^(n-1) in count.\n        # 2. Numbers ending with 1, which also are 10^(n-1) in count.\n        # However, the intersection (numbers both starting and ending with 1)\n        # has been counted twice, so we subtract the count of this intersection, which is 10^(n-2).\n        return 2 * 10**(n-1) - 10**(n-2)", "prompt_tokens": 94, "completion_tokens": 203, "duration": 16.379863739013672}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 50, "duration": 3.075090169906616}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 3.512141466140747}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 4.0060505867004395}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    coords = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coords.append((i, j))\n    # Sort by rows in ascending order, and then by columns in descending order\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords", "prompt_tokens": 309, "completion_tokens": 171, "duration": 13.460101127624512}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array: # check if array is empty\n        return array\n    sorted_array = sorted(array) # sort in ascending order\n    if (array[0] + array[-1]) % 2 == 0: # check if sum of first and last elements is even\n        sorted_array.reverse() # sort in descending order\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 155, "duration": 6.795162916183472}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 66, "duration": 4.483242034912109}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element in a list or None if there is no such element.\n    \"\"\"\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "prompt_tokens": 174, "completion_tokens": 60, "duration": 5.10710883140564}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \n    Parameters:\n    - S: A string containing sentences separated by '.', '?' or '!'.\n    \n    Returns:\n    - An integer representing the count of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences based on '.', '?', and '!'\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    # Count the sentences starting with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences)\n    return count", "prompt_tokens": 157, "completion_tokens": 127, "duration": 10.466196298599243}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 5.398932218551636}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join([vowels[char] if char in vowels else char.swapcase() for char in message])", "prompt_tokens": 159, "completion_tokens": 95, "duration": 6.754531383514404}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 112, "duration": 11.257872581481934}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.9350104331970215}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 4.850081443786621}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 29, "duration": 3.3409087657928467}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = \"AEIOU\"\n    return sum(1 for i in range(0, len(s), 2) if s[i] in upper_vowels)", "prompt_tokens": 122, "completion_tokens": 109, "duration": 7.283982276916504}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    lower = int(num)\n    higher = lower + 1 if num > 0 else lower - 1\n    if num - lower < higher - num:\n        return lower\n    elif num - lower > higher - num:\n        return higher\n    else:  # Equidistant\n        return higher if num > 0 else lower", "prompt_tokens": 206, "completion_tokens": 87, "duration": 4.58693265914917}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 122, "duration": 8.925745725631714}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 3.4989233016967773}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"Returns the biggest even integer number in the range [x, y] inclusive, or -1 if there's no such number.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 72, "duration": 4.630430459976196}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 7.1176323890686035}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit.\n    \"\"\"\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 75, "duration": 4.364504098892212}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    digits_to_words = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered = [i for i in arr if 1 <= i <= 9]\n    filtered.sort(reverse=True)\n    return [digits_to_words[i] for i in filtered]", "prompt_tokens": 326, "completion_tokens": 174, "duration": 12.239786148071289}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        return 1 if x == 0 else x * factorial(x - 1)\n    \n    def sum_numbers(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 100, "duration": 7.629024982452393}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 8.013628005981445}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(map(int, str(n)[2:]))\n        else:\n            return sum(map(int, str(n)))\n            \n    return sum(1 for x in arr if digit_sum(x) > 0)", "prompt_tokens": 174, "completion_tokens": 73, "duration": 4.553790807723999}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    \"\"\"\n    Returns True if it's possible to sort the array in non-decreasing order by performing right shift operations,\n    otherwise returns False.\n    \"\"\"\n    if not arr:  # Check if the array is empty\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n            index = i\n    if count > 1:\n        return False\n    if count == 0:\n        return True\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 349, "completion_tokens": 144, "duration": 10.45751166343689}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count odd numbers in lst1 and even numbers in lst2\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    # If the count of odd numbers in lst1 is less than or equal to the count of even numbers in lst2, return \"YES\"\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 128, "duration": 8.409627199172974}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {word: count for word, count in hist.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 72, "duration": 3.8485307693481445}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 2.716210126876831}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    def count_odd_digits(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n    \n    return [\n        f\"the number of odd elements {count_odd_digits(s)}n the str{count_odd_digits(s)}ng {count_odd_digits(s)} of the {count_odd_digits(s)}nput.\"\n        for s in lst\n    ]", "prompt_tokens": 223, "completion_tokens": 89, "duration": 7.854595422744751}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    current_sum = float('inf')  # Initialize current_sum to infinity\n    min_sum = float('inf')  # Initialize min_sum to infinity\n    for num in nums:\n        current_sum = min(num, current_sum + num)  # Update current_sum\n        min_sum = min(min_sum, current_sum)  # Update min_sum\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 89, "duration": 5.09822678565979}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 2.6481566429138184}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.4664487838745117}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Return list of words from string s containing exactly n consonants.\"\"\"\n    # Define vowels for reference\n    vowels = \"aeiouAEIOU\"\n    # Split the string into words\n    words = s.split()\n    # Initialize an empty list to store the valid words\n    result = []\n    # Iterate through each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        # Check each character in the word\n        for char in word:\n            # If character is not a vowel and is an alphabet, increment the consonant count\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 194, "duration": 15.342053890228271}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 76, "duration": 5.056382656097412}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') and first.count(')') <= second.count('('):\n        return 'Yes'\n    if second.count('(') >= first.count(')') and second.count(')') <= first.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 79, "duration": 6.1709675788879395}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 5.1533894538879395}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 37, "duration": 4.206255912780762}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.4409608840942383}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Including 1 as it is also part of the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 113, "duration": 7.710980415344238}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check for the correct format\n    if not isinstance(date, str) or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    # Check if month, day, and year are integers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n\n    # Check month range\n    if month < 1 or month > 12:\n        return False\n\n    # Check day range based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 265, "duration": 17.5426127910614}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 5.021777391433716}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 299, "completion_tokens": 62, "duration": 3.689384937286377}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 136, "duration": 8.464835405349731}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign_product *= (-1 if num < 0 else 1 if num > 0 else 0)\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 77, "duration": 5.506127595901489}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    start_values = [(grid[i][j], i, j) for i in range(N) for j in range(N)]\n    start_values.sort()  # Sort starting points by value\n    \n    def neighbors(i, j):\n        for ni, nj in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= ni < N and 0 <= nj < N:\n                yield ni, nj\n    \n    # BFS with priority queue for lexigraphically smallest path\n    for value, x, y in start_values:\n        visited = {(x, y): [value]}\n        queue = [(value, x, y, [value])]\n        \n        while queue:\n            _, i, j, path = heappop(queue)\n            if len(path) == k:\n                return path\n            \n            for ni, nj in neighbors(i, j):\n                new_path = path + [grid[ni][nj]]\n                if (ni, nj) not in visited or len(visited[(ni, nj)]) < len(new_path):\n                    visited[(ni, nj)] = new_path\n                    heappush(queue, (grid[ni][nj], ni, nj, new_path))", "prompt_tokens": 446, "completion_tokens": 287, "duration": 24.05436635017395}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    \n    # Initialize the sequence with base cases\n    sequence = [1, 3, 2]  # Given base values for n = 0, 1, and tri(2) = 2\n    \n    for i in range(3, n + 1):\n        if i % 2 == 0:  # n is even\n            sequence.append(1 + i / 2)\n        else:  # n is odd\n            next_value = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n            sequence.append(next_value)\n    return sequence[:n + 1]", "prompt_tokens": 285, "completion_tokens": 168, "duration": 7.240394592285156}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 91, "duration": 7.7271037101745605}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 183, "completion_tokens": 61, "duration": 4.475686550140381}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.972116708755493}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    return txt.endswith(\" \") == False and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == \" \")", "prompt_tokens": 187, "completion_tokens": 86, "duration": 4.184277057647705}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 2.9605798721313477}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 90, "duration": 7.493666887283325}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        try:\n            if isinstance(x, str):\n                x = x.replace(',', '.')\n            return float(x)\n        except ValueError:\n            return None\n\n    val_a = to_float(a)\n    val_b = to_float(b)\n\n    if val_a is None or val_b is None or val_a == val_b:\n        return None\n    elif val_a > val_b:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 105, "duration": 10.891874313354492}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8\n    # And any larger even number can be achieved by adding 2 to one of those parts\n    # Every even number greater than or equal to 8 can be written as the sum of exactly 4 positive even numbers\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 119, "duration": 7.383481025695801}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 65, "duration": 5.204723358154297}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with -\n    text = re.sub(r' {1,2}', '_', text)  # Replace 1 or 2 spaces with _\n    return text", "prompt_tokens": 156, "completion_tokens": 162, "duration": 8.291782140731812}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    allowed_extensions = ['txt', 'exe', 'dll']\n    \n    # Check if there is exactly one dot in the file name.\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a latin alphabet letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in allowed_extensions:\n        return 'No'\n    \n    # Check if there are more than three digits in the file name\n    digits = sum(c.isdigit() for c in name)\n    if digits > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 184, "duration": 8.464843511581421}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**3 if i % 4 == 0 and i % 3 != 0 else x**2 if i % 3 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 55, "duration": 4.191877365112305}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 96, "duration": 4.833415508270264}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 3.500352144241333}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, orders them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 6.681987285614014}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_last_digit_odd(n):\n        n_str = str(abs(n))  # Convert to string and handle negative numbers\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n\n    return sum(1 for num in nums if num > 10 and is_first_last_digit_odd(num))", "prompt_tokens": 169, "completion_tokens": 81, "duration": 5.105182409286499}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    # Generate the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Count the numbers in a that are multiples of 3, 1 more than a multiple of 3, and 2 more than a multiple of 3\n    mod0 = mod1 = mod2 = 0\n    for num in a:\n        if num % 3 == 0:\n            mod0 += 1\n        elif num % 3 == 1:\n            mod1 += 1\n        else:\n            mod2 += 1\n    # Calculate the number of valid triples\n    # Choose 3 from mod0, choose 2 from mod0 and 1 from mod1, etc.\n    return mod0 * (mod0 - 1) * (mod0 - 2) // 6 + mod1 * (mod1 - 1) * (mod1 - 2) // 6 + mod2 * (mod2 - 1) * (mod2 - 2) // 6 + mod0 * mod1 * mod2", "prompt_tokens": 215, "completion_tokens": 249, "duration": 16.228270053863525}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "prompt_tokens": 261, "completion_tokens": 122, "duration": 9.649281740188599}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Delete strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_lst.sort()\n    even_length_lst.sort(key=len)\n    return even_length_lst", "prompt_tokens": 237, "completion_tokens": 73, "duration": 3.899129867553711}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 6.922916889190674}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)", "prompt_tokens": 187, "completion_tokens": 71, "duration": 4.788933753967285}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 4.340090990066528}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        return CAP - SM\n    \n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 3.6853623390197754}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a: str, b: str) -> bool:\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 67, "duration": 3.1606760025024414}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 4.969770431518555}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    roman_string = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n    return roman_string", "prompt_tokens": 151, "completion_tokens": 233, "duration": 11.515043497085571}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 79, "duration": 5.996814966201782}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"Return the word with the maximum number of unique characters.\"\"\"\n    # Sort the words lexicographically and by their unique character count\n    sorted_words = sorted(words, key=lambda x: (-len(set(x)), x))\n    # Return the first word from the sorted list\n    return sorted_words[0] if sorted_words else \"\"", "prompt_tokens": 170, "completion_tokens": 78, "duration": 3.612762928009033}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Calculates the total number of eaten carrots and the remaining carrots after eating.\n\n    Parameters:\n    number (int): Initial number of eaten carrots.\n    need (int): Number of carrots needed to eat.\n    remaining (int): Number of carrots available to eat.\n\n    Returns:\n    list: A list containing total number of eaten carrots and remaining carrots.\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 117, "duration": 6.981229305267334}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 107, "duration": 5.530412912368774}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 3.317150115966797}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    result = hashlib.md5(text.encode())\n    return result.hexdigest()", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.906963586807251}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 71, "duration": 4.056934595108032}
