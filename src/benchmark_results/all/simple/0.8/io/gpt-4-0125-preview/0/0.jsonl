{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 4.215535402297974}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Removing all spaces\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If the stack is empty, a group has been completed\n                result.append(\"\".join(current_group))\n                current_group = []  # Resetting the current group for next\n    return result", "prompt_tokens": 165, "completion_tokens": 139, "duration": 9.663567781448364}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.5024280548095703}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.621227979660034}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return deviation", "prompt_tokens": 167, "completion_tokens": 54, "duration": 4.714491128921509}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 6.39639139175415}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth > 0:\n            max_depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    if max_depth > 0:\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 145, "duration": 6.218926668167114}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 58, "duration": 5.0177531242370605}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 78, "duration": 7.34895658493042}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    rolling_maxes = [max_so_far]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "prompt_tokens": 150, "completion_tokens": 78, "duration": 7.753406763076782}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 86, "duration": 4.960249900817871}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.607167959213257}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 5.468886613845825}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 53, "duration": 5.755060911178589}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 2.993777275085449}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 3.1994285583496094}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.0939178466796875}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats[note] if note in beats else beats[note[:-1]] for note in notes]", "prompt_tokens": 222, "completion_tokens": 75, "duration": 4.251827001571655}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 88, "duration": 6.362990617752075}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 112, "duration": 7.030977010726929}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i+1] - numbers[i]) < min_diff:\n            min_diff = abs(numbers[i+1] - numbers[i])\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 121, "duration": 6.080221652984619}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]", "prompt_tokens": 173, "completion_tokens": 61, "duration": 3.8903744220733643}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 141, "completion_tokens": 103, "duration": 6.70148777961731}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.062354564666748}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.7539732456207275}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 69, "duration": 5.270337104797363}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 81, "duration": 6.709573030471802}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.5914952754974365}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 56, "duration": 3.755160331726074}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 59, "duration": 4.75383734703064}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 6.915452241897583}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.714720010757446}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(xs, x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    func = lambda x: poly(xs, x)\n    zero_point = fsolve(func, 0.0)[0]\n    return zero_point", "prompt_tokens": 309, "completion_tokens": 199, "duration": 9.604637622833252}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by 3\"\"\"\n    # Extract elements at indices divisible by 3\n    elements_to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    elements_to_sort.sort()\n    # Replace elements at indices divisible by 3 with sorted ones\n    for i, val in enumerate(elements_to_sort):\n        l[i*3] = val\n    return l", "prompt_tokens": 200, "completion_tokens": 108, "duration": 9.123043060302734}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.558945417404175}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.055562973022461}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 6.276531934738159}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_indices_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 66, "duration": 5.076592683792114}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 114, "duration": 12.96019697189331}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count, fib_gen = 0, fib()\n    while True:\n        current_fib = next(fib_gen)\n        if current_fib > 1 and is_prime(current_fib):\n            count += 1\n            if count == n:\n                return current_fib", "prompt_tokens": 147, "completion_tokens": 160, "duration": 11.036502361297607}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l_len = len(l)\n    for i in range(l_len):\n        for j in range(i + 1, l_len):\n            for k in range(j + 1, l_len):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 121, "duration": 7.97174859046936}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since each car going in one direction will inevitably collide with each car going in the opposite direction,\n    and there are n cars going in each direction, the number of collisions will be the product of the two counts.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 69, "duration": 5.710111856460571}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 9.6701819896698}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.451622486114502}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 48, "duration": 3.833250045776367}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.344719886779785}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 8.019958019256592}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 4.078545570373535}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.951218843460083}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 116, "duration": 10.134371519088745}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.6742289066314697}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(filter(lambda x: x not in vowels, text))", "prompt_tokens": 172, "completion_tokens": 57, "duration": 4.593768835067749}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 47, "duration": 3.2924511432647705}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 3.693246841430664}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.5803513526916504}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 12.889102697372437}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    open_count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            open_count += 1\n        elif bracket == '>':\n            if open_count == 0:\n                return False\n            open_count -= 1\n    return open_count == 0", "prompt_tokens": 142, "completion_tokens": 76, "duration": 5.169649839401245}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.2051193714141846}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 42, "duration": 3.863790512084961}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(number: int) -> bool:\n        if number <= 1:\n            return False\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    largest_prime = 2\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            n //= i\n    if n > 2:\n        largest_prime = n\n    return largest_prime", "prompt_tokens": 113, "completion_tokens": 164, "duration": 7.409489393234253}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 144, "completion_tokens": 43, "duration": 3.729595899581909}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.595891952514648}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.414870500564575}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 103, "duration": 8.05147099494934}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 5.433408498764038}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str) if shift < len(x_str) else len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift != len(x_str) else x_str[::-1]", "prompt_tokens": 132, "completion_tokens": 65, "duration": 5.923167943954468}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.590646982192993}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    apples, oranges = numbers\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 43, "duration": 2.499716281890869}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 2.850639581680298}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for key, value in freq.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 3.057253360748291}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_lst = sorted(lst)\n    strange_sorted_lst = []\n    while sorted_lst:\n        strange_sorted_lst.append(sorted_lst.pop(0))\n        if sorted_lst:\n            strange_sorted_lst.append(sorted_lst.pop(-1))\n    return strange_sorted_lst", "prompt_tokens": 174, "completion_tokens": 173, "duration": 10.124032735824585}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    '''\n    # Check if it's a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 170, "duration": 7.865799427032471}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 1.9097533226013184}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 68, "duration": 3.8786118030548096}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    char_count1 = sum(len(s) for s in lst1)\n    char_count2 = sum(len(s) for s in lst2)\n    \n    if char_count1 <= char_count2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 67, "duration": 3.8710649013519287}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 142, "duration": 11.737401962280273}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    current_power = 1\n    while current_power < x:\n        current_power *= n\n    return current_power == x", "prompt_tokens": 192, "completion_tokens": 53, "duration": 5.777877569198608}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a ** (1/3))\n    else:\n        root = round(-((-a) ** (1/3)))\n    return root**3 == a", "prompt_tokens": 160, "completion_tokens": 52, "duration": 3.2714757919311523}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    # Prime hex digits are 2, 3, 5, 7, B, D\n    prime_hex_digits = '2357BD'\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 57, "duration": 3.4048643112182617}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal).replace('0b', '')\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 32, "duration": 2.250955820083618}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 80, "duration": 3.994255304336548}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of numeric GPAs into their corresponding letter grades.\n    \"\"\"\n    def get_letter_grade(gpa):\n        if gpa == 4.0: return 'A+'\n        elif gpa > 3.7: return 'A'\n        elif gpa > 3.3: return 'A-'\n        elif gpa > 3.0: return 'B+'\n        elif gpa > 2.7: return 'B'\n        elif gpa > 2.3: return 'B-'\n        elif gpa > 2.0: return 'C+'\n        elif gpa > 1.7: return 'C'\n        elif gpa > 1.3: return 'C-'\n        elif gpa > 1.0: return 'D+'\n        elif gpa > 0.7: return 'D'\n        elif gpa > 0.0: return 'D-'\n        else: return 'E'\n    \n    return [get_letter_grade(gpa) for gpa in grades]", "prompt_tokens": 320, "completion_tokens": 236, "duration": 9.25399899482727}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 5.6521923542022705}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9 ** (n - 1) - 8 ** (n - 1)", "prompt_tokens": 94, "completion_tokens": 81, "duration": 6.925491094589233}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.8508968353271484}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 59, "duration": 5.127884387969971}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split(' ')])", "prompt_tokens": 180, "completion_tokens": 28, "duration": 2.8191022872924805}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 309, "completion_tokens": 68, "duration": 6.19317626953125}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # if the array is empty\n        return array\n\n    sorted_array = sorted(array)  # sort in ascending order\n\n    if (array[0] + array[-1]) % 2 == 0:  # if the sum of first and last is even\n        sorted_array = sorted_array[::-1]  # reverse for descending order\n\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 162, "duration": 10.48158049583435}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n            elif char.isupper():\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 99, "duration": 6.835639953613281}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 4.18868350982666}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string.\n    \n    Parameters:\n    - S (str): A string of words.\n    \n    Returns:\n    - int: The number of sentences that start with \"I\".\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith('I') for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 97, "duration": 7.474106073379517}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 5.263477087020874}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    vowel_replace = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replace[char]\n        else:\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 138, "duration": 8.674664974212646}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    return sum(int(digit) for digit in str(max_prime))", "prompt_tokens": 336, "completion_tokens": 111, "duration": 8.155044555664062}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 12.034804344177246}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Returns an array of the first n integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 100, "duration": 6.260275602340698}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Returns the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 42, "duration": 3.7839901447296143}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 104, "duration": 6.238644599914551}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value_float = float(value)\n    lower = int(value_float)\n    upper = lower + 1 if value_float > 0 else lower - 1\n    if abs(value_float - lower) < abs(value_float - upper):\n        return lower\n    else:\n        return upper", "prompt_tokens": 206, "completion_tokens": 68, "duration": 5.239818572998047}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 144, "duration": 10.87008285522461}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 50, "duration": 4.190852642059326}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x, y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    if x > y:  # If the start is greater than the end, no such number exists\n        return -1\n    if y % 2 == 0:  # If y is even, it's the largest even number in the range\n        return y\n    elif (y - 1) >= x:  # If y is odd, check if (y-1) is within the range\n        return y - 1\n    else:\n        return -1", "prompt_tokens": 144, "completion_tokens": 165, "duration": 10.330073833465576}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.058377027511597}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(n):\n        return all(int(d) % 2 != 0 for d in str(n))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 152, "completion_tokens": 92, "duration": 4.943778991699219}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    sorted_and_filtered = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [digit_names[i] for i in sorted_and_filtered]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 6.935419082641602}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    \"\"\" Returns a list according to the specified conditions. \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_up_to(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 120, "duration": 9.799826860427856}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 5.462702751159668}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Counts the number of elements in an array whose sum of digits is greater than 0.\n    \"\"\"\n    def sum_of_digits(n):\n        # Handle negative numbers by converting to positive\n        # and keep track if the number was originally negative\n        is_negative = n < 0\n        n = abs(n)\n        total = 0\n        while n:\n            total += n % 10\n            n //= 10\n        return -total if is_negative else total\n    \n    return sum(filter(lambda x: sum_of_digits(x) > 0, arr))", "prompt_tokens": 174, "completion_tokens": 128, "duration": 10.228215217590332}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it's possible to get an array sorted in non-decreasing order\n    by performing any number of right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n\n    # Count the number of times an element is greater than its next element\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    \n    # It's possible to sort the array with right shifts if there's at most one such inversion\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 135, "duration": 6.703647613525391}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of even and odd numbers in lst1\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n\n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # If there are more or equal even numbers in lst2 than odd numbers in lst1,\n    # it's possible to make an exchange to make all elements of lst1 even\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 163, "duration": 7.238964796066284}
{"task_id": "HumanEval/111", "generated_code": "def histogram(text):\n    words = text.split()\n    counts = {}\n    for word in words:\n        counts[word] = counts.get(word, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {word: count for word, count in counts.items() if count == max_count}", "prompt_tokens": 201, "completion_tokens": 73, "duration": 6.719006299972534}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 3.816924810409546}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 5.780261278152466}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 3.5919981002807617}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_units_of_water = sum(sum(row) for row in grid)\n    return math.ceil(total_units_of_water / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 3.884479522705078}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 2.4884135723114014}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n    \n    def consonant_count(word):\n        return sum(1 for char in word if is_consonant(char))\n    \n    words = s.split()\n    return [word for word in words if consonant_count(word) == n]", "prompt_tokens": 231, "completion_tokens": 85, "duration": 5.5715556144714355}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i-1] not in vowels and word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 10.051503658294678}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    # Count open and close parentheses in both strings\n    open_first, close_first = first.count('('), first.count(')')\n    open_second, close_second = second.count('('), second.count(')')\n    \n    # Check if either string has more close parentheses than open ones\n    if close_first > open_first or close_second > open_second:\n        return 'No'\n    \n    # If total open parentheses equals total close parentheses, it's possible to balance\n    if open_first + open_second == close_first + close_second:\n        return 'Yes'\n    \n    return 'No'", "prompt_tokens": 218, "completion_tokens": 136, "duration": 7.939422369003296}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.421879768371582}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.095278024673462}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.8014817237854004}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:  # Check if odd\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Include 1 as specified\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 112, "duration": 6.006362438201904}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split date into components\n    parts = date.split('-')\n    \n    # Check if date format is correct\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Define days per month with February as 29 for simplicity\n    days_in_month = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check day range\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 213, "duration": 12.709072589874268}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 4.492292165756226}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):  # Check for duplicate numbers\n        count_dict = {x: lst.count(x) for x in lst}\n        for key in count_dict:\n            if count_dict[key] > 2:\n                return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 70, "duration": 4.032757520675659}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    if is_prime(end - start):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 125, "duration": 5.715258598327637}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 82, "duration": 4.301503658294678}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    moves = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    pq = [(grid[i][j], i, j, [(grid[i][j])]) for i in range(N) for j in range(N)]\n    visited = set()\n    \n    while pq:\n        val, x, y, path = heappop(pq)\n        if (x, y, len(path)) in visited:\n            continue\n        visited.add((x, y, len(path)))\n        if len(path) == k:\n            return path\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(pq, (newPath[0], nx, ny, newPath))", "prompt_tokens": 446, "completion_tokens": 219, "duration": 15.025826930999756}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Initialize the Tribonacci sequence list with base cases\n    tribonacci = [1, 3]\n    # Handle base cases\n    if n == 0: return [1]\n    if n == 1: return tribonacci\n\n    # Fill in the Tribonacci sequence up to n\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # Even case\n            tribonacci.append(1 + i // 2)\n        else:  # Odd case\n            # Ensure there's a value after current i for odd case calculation\n            tribonacci.append(0)  # Placeholder for tri(i+1)\n            tribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1]\n\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 180, "duration": 8.456067085266113}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 5.84595251083374}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    balance = 0\n    nested = False\n    for char in string:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n            if balance > 0:\n                nested = True\n        if balance < 0:\n            return False\n    return nested and balance == 0", "prompt_tokens": 183, "completion_tokens": 82, "duration": 5.717133522033691}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 3.3261513710021973}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty or the last character is not a letter\n    if not txt or not txt.rstrip().endswith(tuple('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')):\n        return False\n    # Check if the last character is not part of a word (preceded by a space)\n    if len(txt.rstrip()) > 1 and txt.rstrip()[-2] != ' ':\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 99, "duration": 7.005407094955444}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 3.6687912940979004}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if not negatives and not positives:\n        return (None, None)\n    elif not negatives:\n        return (None, min(positives))\n    elif not positives:\n        return (max(negatives), None)\n    else:\n        return (max(negatives), min(positives))", "prompt_tokens": 188, "completion_tokens": 103, "duration": 6.724389553070068}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        try:\n            if isinstance(x, str):\n                x = x.replace(',', '.')\n            return float(x)\n        except ValueError:\n            return None\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 99, "duration": 4.726456642150879}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2 = 8,\n    # any number less than 8 cannot be expressed as such a sum.\n    if n < 8:\n        return False\n    # For numbers greater than or equal to 8, if it's even then it can be represented\n    # as the sum of 4 even numbers (since even numbers are divisible by 2 and the sum of\n    # even numbers is always even).\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 153, "duration": 7.032167196273804}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 72, "duration": 4.946848392486572}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces (1 or 2 spaces) with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 162, "duration": 9.959300756454468}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    # Check for the conditions using regex\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]{0,}[^0-9]*\\.(txt|exe|dll)$', file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 90, "duration": 7.515896558761597}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 3.9252676963806152}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence, returns a string containing words of prime length from the original sentence.\n    \"\"\"\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)", "prompt_tokens": 197, "completion_tokens": 116, "duration": 5.944236755371094}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    \n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 2.5874335765838623}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, they are ordered based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 82, "duration": 5.498131990432739}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_last_odd(n):\n        # Convert number to positive and to string to check digits\n        n_str = str(abs(n))\n        return n_str[0] in '13579' and n_str[-1] in '13579'\n    \n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))", "prompt_tokens": 169, "completion_tokens": 83, "duration": 6.932860612869263}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, creates an integer array a of length n where each a[i] = i*i - i + 1.\n    Returns the number of triples (a[i], a[j], a[k]) in a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count occurrences of numbers modulo 3 in the array\n    modulo_counts = [0, 0, 0]\n    for number in a:\n        modulo_counts[number % 3] += 1\n    \n    # Count valid triples\n    # A triple's sum is a multiple of 3 if all elements are 0 mod 3, or if one element is 0 mod 3 and two elements are 1 and 2 mod 3, respectively\n    count = 0\n    # All elements are 0 mod 3\n    count += modulo_counts[0] * (modulo_counts[0] - 1) * (modulo_counts[0] - 2) // 6\n    # One element is 0 mod 3, and the other two are 1 and 2 mod 3, respectively\n    count += modulo_counts[0] * modulo_counts[1] * modulo_counts[2]\n    # All elements are 1 mod 3\n    count += modulo_counts[1] * (modulo_counts[1] - 1) * (modulo_counts[1] - 2) // 6\n    # All elements are 2 mod 3\n    count += modulo_counts[2] * (modulo_counts[2] - 1) * (modulo_counts[2] - 2) // 6\n    \n    return count", "prompt_tokens": 215, "completion_tokens": 409, "duration": 17.164414405822754}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    \n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx2+1:idx1])", "prompt_tokens": 261, "completion_tokens": 123, "duration": 7.641606569290161}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort the filtered list by length first, then alphabetically\n    even_length_list.sort(key=lambda x: (len(x), x))\n    return even_length_list", "prompt_tokens": 237, "completion_tokens": 76, "duration": 3.4651918411254883}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 4.045790672302246}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.4653356075286865}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.683464765548706}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 76, "duration": 6.457854270935059}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a  # Extend the string to catch rotations\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]  # Generate all possible rotations of b\n        if rotated_b in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 86, "duration": 5.645525217056274}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 4.4703216552734375}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 9.065140008926392}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 2.2504734992980957}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda x: (-len(set(x)), x)))", "prompt_tokens": 170, "completion_tokens": 26, "duration": 2.00569748878479}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 42, "duration": 2.459355592727661}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 105, "duration": 6.228149890899658}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 55, "duration": 3.6233668327331543}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 7.525274038314819}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [n for n in range(a, b + 1) if n % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 141, "duration": 8.233215808868408}
