{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 94, "duration": 8.810195922851562}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            stack.pop()\n            current_group.append(char)\n            if not stack:\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 165, "completion_tokens": 104, "duration": 5.342617988586426}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, return the decimal part of the number.\"\"\"\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 38, "duration": 4.212554693222046}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 5.671715021133423}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 106, "duration": 8.772273778915405}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 3.9798827171325684}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 109, "duration": 10.549544095993042}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 90, "duration": 5.2542595863342285}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 113, "duration": 6.295121192932129}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for number in numbers[1:]:\n        if number > max_so_far:\n            max_so_far = number\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 72, "duration": 11.02979850769043}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    \"\"\"\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 86, "duration": 5.549645900726318}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 4.6508777141571045}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 7.8427414894104}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.1687610149383545}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 58, "duration": 8.504439115524292}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.7133474349975586}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 3.579576015472412}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_mapping = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    \n    parsed_notes = []\n    skip_next = False\n    for i, note in enumerate(notes):\n        if skip_next:\n            skip_next = False\n            continue\n        if i < len(notes) - 1 and note + notes[i + 1] in notes_mapping:\n            parsed_notes.append(notes_mapping[note + notes[i + 1]])\n            skip_next = True\n        else:\n            parsed_notes.append(notes_mapping[note])\n    \n    return parsed_notes", "prompt_tokens": 222, "completion_tokens": 153, "duration": 11.992587566375732}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 7.192302465438843}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 107, "duration": 9.289348363876343}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 104, "duration": 7.826736688613892}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 105, "duration": 5.985294342041016}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 5.2520740032196045}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 46, "duration": 4.372587203979492}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 4.739562034606934}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 4.783125877380371}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "prompt_tokens": 134, "completion_tokens": 81, "duration": 9.733081102371216}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)", "prompt_tokens": 98, "completion_tokens": 35, "duration": 3.0159785747528076}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.864791393280029}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 59, "duration": 6.83349347114563}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 3.701014280319214}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 5.739548683166504}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    return fsolve(lambda x: poly(xs, x), 0)[0]", "prompt_tokens": 309, "completion_tokens": 190, "duration": 11.262267351150513}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements at indices divisible by 3 with sorted elements\n    l_prime = [divisible_by_three_sorted.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n    return l_prime", "prompt_tokens": 200, "completion_tokens": 118, "duration": 15.906116008758545}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 77, "duration": 6.765938758850098}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.532667636871338}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 7.001180648803711}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 128, "duration": 7.167821645736694}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 134, "duration": 10.542417526245117}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_gen():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    count, fib_sequence = 0, fib_gen()\n    while True:\n        fib_num = next(fib_sequence)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "prompt_tokens": 147, "completion_tokens": 153, "duration": 12.351834297180176}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 9.425826787948608}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n, the number of cars moving left to right and the same number moving right to left,\n    calculates the number of collisions when they pass each other.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 58, "duration": 5.675738573074341}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.627655744552612}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 3.1395578384399414}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = \"\"\n    while x:\n        digits = str(x % base) + digits\n        x //= base\n    return digits", "prompt_tokens": 141, "completion_tokens": 58, "duration": 5.6650214195251465}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 5.24919056892395}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d", "prompt_tokens": 221, "completion_tokens": 125, "duration": 8.600426435470581}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.6132447719573975}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 23, "duration": 2.9702553749084473}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    # Using modular exponentiation to avoid large numbers\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base ** 2) % p\n        n = n // 2\n    return result", "prompt_tokens": 155, "completion_tokens": 109, "duration": 8.466993570327759}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 62, "duration": 6.6760687828063965}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 5.944682359695435}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.576521396636963}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 5.067978382110596}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 2.79823899269104}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "prompt_tokens": 102, "completion_tokens": 46, "duration": 4.492690086364746}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 5.021050930023193}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 4.354365587234497}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 124, "duration": 6.7186713218688965}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    factor = 2\n    last_prime = 2\n    while n > 1:\n        if n % factor == 0 and is_prime(factor):\n            last_prime = factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1\n    return last_prime", "prompt_tokens": 113, "completion_tokens": 132, "duration": 10.106117963790894}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "prompt_tokens": 144, "completion_tokens": 44, "duration": 3.0638632774353027}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 6.137076377868652}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 31, "duration": 2.3477749824523926}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 108, "duration": 5.4762678146362305}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 76, "duration": 6.45811653137207}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift = shift % length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 58, "duration": 6.138278961181641}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    \"\"\"Returns the sum of the ASCII codes of upper characters only in the given string\"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 42, "duration": 3.5767529010772705}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 6.646757125854492}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(value, i) for i, value in enumerate(arr) if value % 2 == 0]\n    if not even_values:\n        return []\n    return list(min(even_values))", "prompt_tokens": 362, "completion_tokens": 52, "duration": 3.044921398162842}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    frequencies = Counter(lst)\n    valid_numbers = [number for number, freq in frequencies.items() if number <= freq]\n    if valid_numbers:\n        return max(valid_numbers)\n    else:\n        return -1", "prompt_tokens": 215, "completion_tokens": 58, "duration": 5.2533204555511475}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 44, "duration": 3.640948534011841}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Heron's formula\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 96, "duration": 6.762035608291626}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.2787411212921143}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i-1]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 49, "duration": 2.9007999897003174}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 3.680460214614868}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a / i) % j == 0 and is_prime(j) and is_prime(a // (i * j)):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 134, "duration": 10.032755136489868}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 4.5467610359191895}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return int(root + 0.5) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 38, "duration": 3.894605875015259}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex)", "prompt_tokens": 349, "completion_tokens": 51, "duration": 7.672341585159302}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"", "prompt_tokens": 189, "completion_tokens": 42, "duration": 3.098001480102539}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 3.437873601913452}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"Convert numerical GPAs to letter grades.\"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 262, "duration": 23.12535071372986}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.952389717102051}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only one number when n is 1, which is 1 itself.\n    else:\n        # For any n-digit number, there are 9 options (2-9) for each digit except the first and the last.\n        # The first and the last digit can each be 1, making 2*n options - but 11, 111, etc. are counted twice.\n        return 2 * 9 ** (n - 1) + 1", "prompt_tokens": 94, "completion_tokens": 152, "duration": 10.143840789794922}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    # Convert the given number N to its sum of digits\n    sum_of_digits = sum(map(int, str(N)))\n    # Convert the sum of digits to binary and return\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 54, "duration": 3.047516345977783}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n    lst: List[int] - A non-empty list of integers.\n\n    Returns:\n    int - The sum of even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 116, "duration": 6.600748300552368}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all characters arranged in ascending order based on ASCII value.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 65, "duration": 5.1952736377716064}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Function to find the occurrences of an integer in a 2D list and return their positions.\n    \"\"\"\n    positions = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row[::-1]):  # Reverse the row for descending order of columns\n            if value == x:\n                positions.append((i, len(row) - 1 - j))  # Correct the column index due to the reversal\n    return sorted(positions, key=lambda k: (k[0], -k[1]))  # Sort primarily by row, then by column in descending", "prompt_tokens": 309, "completion_tokens": 135, "duration": 20.733112812042236}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 61, "duration": 5.060333490371704}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 5.399670124053955}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list, or None if not applicable.\n    \"\"\"\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "prompt_tokens": 174, "completion_tokens": 58, "duration": 4.945482492446899}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n\n    Parameters:\n    S (str): A string of sentences.\n\n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences based on '.', '?' or '!'\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n\n    # Count the number of sentences that start with \"I\"\n    boredom_count = sum(sentence.startswith(\"I\") for sentence in sentences)\n\n    return boredom_count", "prompt_tokens": 157, "completion_tokens": 123, "duration": 9.622047901153564}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 102, "duration": 5.138677358627319}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowel_replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                          'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = \"\"\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacements[char]\n        else:\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 141, "duration": 8.386796474456787}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum_digits(lst):\n    from math import sqrt\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n            \n    return sum(map(int, str(largest_prime)))", "prompt_tokens": 336, "completion_tokens": 109, "duration": 7.466094732284546}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n    if all(isinstance(key, str) and key.islower() for key in keys):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):\n        return True\n    else:\n        return False", "prompt_tokens": 219, "completion_tokens": 124, "duration": 10.698819398880005}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 82, "duration": 7.128920078277588}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 49, "duration": 3.942547559738159}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.521749496459961}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if num - int(num) > -0.5:\n            return int(num)\n        else:\n            return int(num) - 1", "prompt_tokens": 206, "completion_tokens": 85, "duration": 5.511986494064331}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [2*i + n % 2 + n - 1 for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 32, "duration": 3.1799352169036865}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 3.053699254989624}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"Return the largest even number in the range [x, y], or -1 if there is none.\"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 67, "duration": 5.056525468826294}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 3.649698257446289}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Filter elements without even digits\n    filtered = filter(lambda num: all(int(digit) % 2 != 0 for digit in str(num)), x)\n    # Return sorted list\n    return sorted(filtered)", "prompt_tokens": 152, "completion_tokens": 95, "duration": 8.771302461624146}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    valid_nums = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in valid_nums]", "prompt_tokens": 326, "completion_tokens": 105, "duration": 6.791156530380249}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 167, "duration": 7.994074106216431}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 99, "duration": 9.33735990524292}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n) if d.isdigit()) - 2*int(str(n)[0] == '-')\n    return sum(sum_of_digits(num) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 60, "duration": 3.9878809452056885}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    \"\"\"\n    Check if it's possible to sort the array in non-decreasing order by\n    right shift operations.\n    \"\"\"\n    if not arr:\n        return True  # Empty array is considered sorted\n\n    # Count of inversions needed to sort the array in non-decreasing order\n    inversions = 0\n\n    # Find the index where the array stops being sorted in non-decreasing order\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            inversions += 1\n            index_of_inversion = i\n\n    # More than one inversion means it cannot be sorted by right shift operations\n    if inversions > 1:\n        return False\n\n    # Check if the array can be sorted by a single rotation\n    # This is true if the last element is less than the element just before the inversion point\n    # Or if the array is already sorted (inversions == 0)\n    return inversions == 0 or arr[-1] <= arr[index_of_inversion - 2]", "prompt_tokens": 349, "completion_tokens": 231, "duration": 11.946321249008179}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 6.270165681838989}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    max_freq = max(frequency.values(), default=0)\n    return {k: v for k, v in frequency.items() if v == max_freq}", "prompt_tokens": 201, "completion_tokens": 73, "duration": 6.007996559143066}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([ch for ch in s if ch not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 6.632956027984619}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for item in lst:\n        odd_count = sum(1 for char in item if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 6.26688814163208}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 4.509361267089844}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)  # Ceiling division", "prompt_tokens": 373, "completion_tokens": 38, "duration": 3.0903329849243164}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 136, "duration": 9.495569229125977}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 72, "duration": 10.039785623550415}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for char in reversed(word[1:-1]):  # Skip the first and the last character\n        if char in vowels and word[word.index(char) - 1] not in vowels and word[word.index(char) + 1] not in vowels:\n            return char\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 82, "duration": 4.649590969085693}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Given a list of two strings consisting of open '(' and close ')' parentheses,\n    checks if it's possible to concatenate them in any order to form a balanced string.\n    Returns 'Yes' if possible, and 'No' otherwise.\n    '''\n    first, second = lst\n    # Check if concatenating first before second forms a good string\n    if first.count('(') >= second.count(')') and first.count(')') <= second.count('('):\n        return 'Yes'\n    # Check if concatenating second before first forms a good string\n    if second.count('(') >= first.count(')') and second.count(')') <= first.count('('):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 159, "duration": 10.092400550842285}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 13.707370042800903}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 2.991436719894409}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.300891160964966}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_collatz.append(1)  # Since 1 is always in the sequence, and is odd.\n    return sorted(odd_collatz)", "prompt_tokens": 281, "completion_tokens": 117, "duration": 6.407527685165405}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # Split the date string to extract day, month, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n\n    # Check if month, day, and year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month, day, year = int(month), int(day), int(year)\n\n    # Check if month and day numbers are valid\n    if month < 1 or month > 12 or day < 1 or year < 1:\n        return False\n\n    # Define the maximum number of days per month\n    max_days = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n                7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    if day > max_days[month]:\n        return False\n\n    return True", "prompt_tokens": 313, "completion_tokens": 282, "duration": 30.71405601501465}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 4.323923587799072}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(set(lst)) != len(lst) - lst.count(max(lst, default=0)):\n        return False\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 40, "duration": 3.6302287578582764}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 125, "duration": 8.456730604171753}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        sign_product *= (1 if num > 0 else -1 if num < 0 else 0)\n    magnitude_sum = sum(abs(num) for num in arr)\n    return magnitude_sum * sign_product", "prompt_tokens": 172, "completion_tokens": 76, "duration": 15.13284945487976}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    # Convert grid to value-coordinate map for quick access to positions\n    val_to_pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n\n    # Min-heap to maintain paths with their costs\n    # Each element in the heap: (path_cost_list, last_val, last_row, last_col, path_length)\n    heap = [([val], val, val_to_pos[val][0], val_to_pos[val][1], 1) for val in range(1, N*N + 1)]\n    \n    while heap:\n        path, last_val, r, c, length = heappop(heap)\n        if length == k:\n            return path\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < N and 0 <= nc < N:\n                new_val = grid[nr][nc]\n                heappush(heap, (path + [new_val], new_val, nr, nc, length + 1))", "prompt_tokens": 446, "completion_tokens": 287, "duration": 19.586313247680664}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    sequence = [1, 3, 2]  # Initialize with the first three values\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    return sequence[:n + 1]", "prompt_tokens": 285, "completion_tokens": 141, "duration": 7.623950004577637}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 9.457270383834839}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) > 0", "prompt_tokens": 183, "completion_tokens": 183, "duration": 12.37477707862854}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 3.1790096759796143}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1:].isalpha() and not txt[-2:].isspace()", "prompt_tokens": 187, "completion_tokens": 31, "duration": 3.185067892074585}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 3.4702024459838867}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 80, "duration": 10.365452527999878}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert(val):\n        try:\n            return float(val.replace(\",\", \".\"))\n        except AttributeError:\n            return float(val)\n    \n    a_val, b_val = convert(a), convert(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 82, "duration": 4.508026838302612}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest even number is 2, the smallest sum of 4 positive even numbers is 2+2+2+2=8\n    if n < 8:\n        return False\n    # For any even number greater than or equal to 8, it can be written as the sum of 2 four times or other combinations\n    # of even numbers, as long as n is even itself.\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 131, "duration": 10.757347106933594}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 68, "duration": 4.1397247314453125}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Replace spaces with underscores or hyphens based on the condition.\n    \"\"\"\n    # Replace more than two consecutive spaces with a hyphen\n    text = text.replace(\"   \", \"-\")\n    # Replace the remaining spaces with underscores\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 156, "completion_tokens": 72, "duration": 5.767503976821899}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    if re.match(r'^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$', file_name) is None:\n        return 'No'\n    name_part, extension_part = file_name.split('.')\n    if len(re.findall(r'\\d', name_part)) > 3:\n        return 'No'\n    if extension_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 111, "duration": 5.3508830070495605}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 3.077766180038452}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 6.605595111846924}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    return (Fraction(x) * Fraction(n)).denominator == 1", "prompt_tokens": 205, "completion_tokens": 32, "duration": 2.732753276824951}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 2.8440444469451904}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        n_str = str(abs(n))  # Convert number to string and handle negative numbers\n        return n_str[0] in \"13579\" and n_str[-1] in \"13579\"  # Check if first and last digits are odd\n\n    return sum(1 for num in nums if num > 10 and is_odd(num))", "prompt_tokens": 169, "completion_tokens": 87, "duration": 4.418716192245483}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Function to find the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Initialize the count for the remainders\n    remainder_counts = [0, 0, 0]\n    \n    # Calculate the value for each a[i] and update remainder counts\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Choose any three with remainder 0, or one of each remainder\n    valid_triples = (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6 +\n                     remainder_counts[1] * remainder_counts[2] * remainder_counts[0] +\n                     remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6 +\n                     remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6)\n    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 290, "duration": 13.09773588180542}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 5.829305171966553}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Return the sorted list after removing strings with odd lengths.\"\"\"\n    # Remove strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list first by length and then alphabetically\n    return sorted(filtered_lst, key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 81, "duration": 4.315516948699951}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 13.775016069412231}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.378242015838623}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - h) if g != h else 0 for g, h in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 3.1955294609069824}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension_name):\n        CAP = sum(1 for char in extension_name if char.isupper())\n        SM = sum(1 for char in extension_name if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 83, "duration": 4.371155023574829}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a + a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 69, "duration": 5.989809513092041}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 75, "duration": 3.5505287647247314}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 203, "duration": 11.356417417526245}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 3.1836893558502197}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda word: (-len(set(word)), word)))", "prompt_tokens": 170, "completion_tokens": 26, "duration": 2.4273769855499268}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after eating the needed amount and the number of carrots left.\n    \"\"\"\n    eat_more = min(need, remaining)\n    total_eaten = number + eat_more\n    remaining -= eat_more\n    return [total_eaten, remaining]", "prompt_tokens": 327, "completion_tokens": 71, "duration": 5.777702331542969}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 110, "duration": 5.084421873092651}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 4.233026504516602}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 96, "duration": 8.76567029953003}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 78, "duration": 5.4891252517700195}
