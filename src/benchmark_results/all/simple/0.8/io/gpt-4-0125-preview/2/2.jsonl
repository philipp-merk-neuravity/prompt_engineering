{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 67, "duration": 5.5440673828125}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, we've closed a group\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 124, "duration": 9.999614000320435}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.783301591873169}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 5.490355014801025}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 4.068531513214111}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 127, "duration": 8.850958585739136}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 162, "completion_tokens": 103, "duration": 8.081376075744629}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 59, "duration": 5.396952867507935}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return (sum_numbers, product_numbers)", "prompt_tokens": 160, "completion_tokens": 60, "duration": 5.44675612449646}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 116, "duration": 10.675127983093262}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 117, "duration": 12.08931589126587}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 82, "duration": 6.5673439502716064}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 39, "duration": 3.439201831817627}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 3.899195909500122}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 4.944354295730591}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "prompt_tokens": 118, "completion_tokens": 28, "duration": 3.365025758743286}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.7065486907958984}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split(' ')\n    parsed_notes = []\n    i = 0\n    while i < len(notes):\n        if i+1 < len(notes) and notes[i+1] == '|':\n            note = notes[i] + notes[i+1]\n            i += 2\n        else:\n            note = notes[i]\n            i += 1\n        parsed_notes.append(notes_dict[note])\n    return parsed_notes", "prompt_tokens": 222, "completion_tokens": 139, "duration": 11.680254936218262}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 92, "duration": 7.0463011264801025}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 9.124921798706055}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 161, "duration": 10.537710905075073}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]", "prompt_tokens": 173, "completion_tokens": 162, "duration": 13.91243577003479}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 4.0633745193481445}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.7180111408233643}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.4184536933898926}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.46324610710144}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 124, "duration": 6.035865306854248}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 98, "completion_tokens": 20, "duration": 3.7254819869995117}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 4.612710475921631}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 59, "duration": 4.6951658725738525}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 128, "duration": 7.232435703277588}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.740358352661133}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import fsolve\n    def func(x):\n        return poly(xs, x)\n    root = fsolve(func, 0)[0]\n    return root", "prompt_tokens": 309, "completion_tokens": 201, "duration": 13.769375085830688}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by 3 in a list.\"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Replace elements in the original list with sorted values at the correct indices\n    for i, value in enumerate(divisible_by_three_sorted):\n        l[i*3] = value\n    return l", "prompt_tokens": 200, "completion_tokens": 121, "duration": 5.109331846237183}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.7566542625427246}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 5.725538015365601}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 5.4493632316589355}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices_sorted = sorted(l[::2])\n    return [even_indices_sorted.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 51, "duration": 4.776437282562256}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling of elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 138, "duration": 10.011157751083374}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 1, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fib()\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            prime_fibs.append(fib_number)\n    return prime_fibs[-1]", "prompt_tokens": 147, "completion_tokens": 159, "duration": 9.739872455596924}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 149, "duration": 6.9599573612213135}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculates the number of collisions between two sets of n cars moving towards each other on a straight line.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 46, "duration": 4.084660053253174}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 6.538407802581787}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 84, "duration": 6.322559118270874}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "prompt_tokens": 141, "completion_tokens": 48, "duration": 3.1535892486572266}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.4476494789123535}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 5.047945022583008}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]", "prompt_tokens": 125, "completion_tokens": 70, "duration": 3.636253595352173}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 5.283895015716553}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 44, "duration": 4.50454044342041}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 65, "duration": 5.442595720291138}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 58, "duration": 5.088842868804932}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.435581922531128}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 9.179571151733398}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.8006579875946045}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 5.104242324829102}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"<\":\n            count += 1\n        elif char == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 3.4748501777648926}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 6.9021782875061035}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 124, "duration": 9.173114538192749}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Initialize the largest factor to the smallest possible prime number\n    largest_factor = 2\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        n //= 2\n    # Start checking for odd factors from 3 onwards\n    factor = 3\n    while n != 1:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    return largest_factor", "prompt_tokens": 113, "completion_tokens": 141, "duration": 8.772371053695679}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "prompt_tokens": 144, "completion_tokens": 44, "duration": 4.080585479736328}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 5.88459324836731}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i*x for i, x in enumerate(xs) if i > 0]", "prompt_tokens": 158, "completion_tokens": 29, "duration": 3.02536940574646}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 101, "duration": 4.766420602798462}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and s[-1] in 'yY':\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"python\"))  # 1\nprint(vowels_count(\"Yy\"))  # 1\nprint(vowels_count(\"\"))  # 0\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"quickly\"))  # 2", "prompt_tokens": 176, "completion_tokens": 156, "duration": 6.905841112136841}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        shift = shift % len(x_str)\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 58, "duration": 4.375299453735352}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.4716827869415283}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.273221969604492}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    \"\"\"\n    smallest_even = None\n    smallest_index = None\n    for i, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = i\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "prompt_tokens": 362, "completion_tokens": 124, "duration": 8.673580884933472}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    counts = Counter(lst)\n    result = -1\n    for key, value in counts.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 215, "completion_tokens": 53, "duration": 3.0325846672058105}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 4.386264801025391}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 171, "completion_tokens": 141, "duration": 6.183779954910278}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.0628037452697754}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 55, "duration": 4.6781322956085205}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 49, "duration": 2.9835364818573}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a):\n                if a % (i * j) == 0 and is_prime(j):\n                    k = a // (i * j)\n                    if is_prime(k) and k != i and k != j and k > 1:\n                        return True\n    return False", "prompt_tokens": 129, "completion_tokens": 152, "duration": 9.43315076828003}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    current_power = n\n    while current_power <= x:\n        if current_power == x:\n            return True\n        current_power *= n\n    return False", "prompt_tokens": 192, "completion_tokens": 71, "duration": 5.792901039123535}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    root = abs(a) ** (1/3)\n    return round(root) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 3.1326844692230225}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 48, "duration": 6.1520044803619385}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_representation = bin(decimal)[2:]  # Convert to binary and remove the \"0b\" prefix\n    return f\"db{binary_representation}db\"", "prompt_tokens": 189, "completion_tokens": 44, "duration": 6.003890037536621}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 76, "duration": 7.892435789108276}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of numerical grades to letter grades based on a defined scale.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:  # grade == 0.0\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 281, "duration": 17.151099681854248}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.529428482055664}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * 9**(n-1) - 8**(n-1)", "prompt_tokens": 94, "completion_tokens": 77, "duration": 3.6267921924591064}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\" Given a positive integer N, return the total sum of its digits in binary. \"\"\"\n    # Calculate the sum of digits\n    digit_sum = sum(int(digit) for digit in str(N))\n    # Return the binary representation of the digit sum\n    return bin(digit_sum)[2:]", "prompt_tokens": 183, "completion_tokens": 70, "duration": 4.820040464401245}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 2.539172649383545}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are\n    replaced by a new word where all the characters are arranged in ascending order\n    based on ASCII value.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 69, "duration": 5.349750280380249}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Finds the positions of integer x in a 2D list and returns a sorted list of tuples representing these positions.\n    \"\"\"\n    positions = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                positions.append((i, j))\n    # Sorting primarily by row number in ascending order, then by column number in descending order within each row\n    positions.sort(key=lambda pos: (pos[0], -pos[1]))\n    return positions", "prompt_tokens": 309, "completion_tokens": 118, "duration": 10.62565016746521}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:\n        return []\n    \n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 253, "completion_tokens": 123, "duration": 12.40316104888916}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 93, "duration": 8.072036981582642}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "prompt_tokens": 174, "completion_tokens": 39, "duration": 5.1193952560424805}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with the word \"I\".\n    \n    Parameters:\n    - S (str): A string of words.\n    \n    Returns:\n    - int: The number of boredoms.\n    \"\"\"\n    # Split the string into sentences\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    # Count the sentences that start with \"I \"\n    bored_count = sum(sentence.strip().startswith('I ') for sentence in sentences)\n    return bored_count", "prompt_tokens": 157, "completion_tokens": 113, "duration": 9.213613271713257}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 3.3303253650665283}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing vowels with the letter 2 places ahead.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    replace_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'm', 'u': 'w',\n                   'A': 'C', 'E': 'G', 'I': 'K', 'O': 'M', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += replace_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 150, "duration": 9.995484352111816}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(map(int, str(largest_prime)))", "prompt_tokens": 336, "completion_tokens": 109, "duration": 8.04013204574585}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(k, str) and k.islower() for k in dict.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 3.7451021671295166}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return [i for i in range(2, n) if is_prime(i)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 7.149500370025635}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 49, "duration": 5.016745567321777}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)", "prompt_tokens": 122, "completion_tokens": 63, "duration": 5.249727487564087}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if num - int(num) <= -0.5:\n            return int(num) - 1\n        else:\n            return int(num)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 7.4965245723724365}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    stones = [n]\n    for _ in range(1, n):\n        stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 182, "completion_tokens": 162, "duration": 11.708779096603394}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 45, "duration": 4.452895641326904}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 44, "duration": 5.251135587692261}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 3.801642656326294}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 3.812455415725708}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 108, "duration": 5.823425531387329}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    \"\"\"\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 174, "duration": 11.69701337814331}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 100, "duration": 7.223931074142456}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(abs(n)))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 49, "duration": 4.277783393859863}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count += 1\n    if arr[n - 1] > arr[0]:\n        count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 85, "duration": 5.694074392318726}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 83, "duration": 7.030279874801636}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    # Split the input string into individual letters, ignoring spaces\n    letters = test.replace(\" \", \"\")\n    letter_counts = {}\n\n    # Count occurrences of each letter\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Identify the maximum occurrence of any letter\n    max_count = max(letter_counts.values(), default=0)\n\n    # Create a dictionary of letters with the maximum occurrence\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return result", "prompt_tokens": 201, "completion_tokens": 186, "duration": 8.618261575698853}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 3.80438494682312}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 80, "duration": 5.896137237548828}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Finds the minimum sum of any non-empty sub-array of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 78, "duration": 5.508498668670654}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 37, "duration": 3.8100037574768066}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sort an array of integers according to the number of ones in their binary representation. \n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 63, "duration": 4.4959516525268555}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        count = 0\n        for char in word:\n            if char.lower() in \"bcdfghjklmnpqrstvwxyz\":\n                count += 1\n        return count\n\n    words = s.split()\n    result = [word for word in words if consonant_count(word) == n]\n    return result", "prompt_tokens": 231, "completion_tokens": 86, "duration": 5.880857229232788}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 4.3802876472473145}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    str1, str2 = lst\n    # Case when concatenating first string to the second results in a balanced string\n    if str1.count('(') >= str2.count(')') and (str1 + str2).count('(') == (str1 + str2).count(')'):\n        return 'Yes'\n    # Case when concatenating second string to the first results in a balanced string\n    if str2.count('(') >= str1.count(')') and (str2 + str1).count('(') == (str2 + str1).count(')'):\n        return 'Yes'\n    return 'No'", "prompt_tokens": 218, "completion_tokens": 143, "duration": 9.660451173782349}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 5.498938798904419}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.6813652515411377}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x <= 99)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 3.6082193851470947}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3*n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 at the end since the sequence always ends with 1.\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 115, "duration": 9.062329292297363}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date string into components\n    parts = date.split('-')\n    \n    # Check if all parts are numeric\n    if not (parts[0].isdigit() and parts[1].isdigit() and parts[2].isdigit()):\n        return False\n    \n    # Convert parts to integers\n    month, day, year = map(int, parts)\n    \n    # Check month range\n    if month < 1 or month > 12:\n        return False\n    \n    # Define days per month with February as 29 (leap year check not required by the problem statement)\n    days_per_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the day is valid for the given month\n    if day < 1 or day > days_per_month[month]:\n        return False\n    \n    # If all checks passed, the date is valid\n    return True", "prompt_tokens": 313, "completion_tokens": 290, "duration": 16.502638339996338}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # == 3", "prompt_tokens": 190, "completion_tokens": 121, "duration": 9.339540719985962}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 299, "completion_tokens": 293, "duration": 17.219584226608276}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    length = end_min - start_max + 1\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 134, "duration": 6.0519859790802}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 172, "completion_tokens": 99, "duration": 7.0517964363098145}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    \"\"\"\n    Find the minimum path of length k in a grid.\n    \"\"\"\n    N = len(grid)\n    # Directions: Up, Down, Left, Right\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    # Priority queue: (path cost, length of path so far, current row, current col, path)\n    pq = [(grid[i][j], 1, i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    while pq:\n        cost, length, r, c, path = heappop(pq)\n        if length == k:\n            return path\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < N and 0 <= nc < N:\n                newPath = path + [grid[nr][nc]]\n                heappush(pq, (cost * (N * N) + grid[nr][nc], length + 1, nr, nc, newPath))", "prompt_tokens": 446, "completion_tokens": 249, "duration": 11.85103702545166}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            if i + 1 <= n:  # If the next value can be directly calculated\n                tribonacci.append(1 + (i + 1) // 2)\n            else:  # If the next value is out of range, use the formula\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 1] + tribonacci[i - 2] + 1 + (i // 2))\n    \n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 192, "duration": 9.214569568634033}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 3.345212459564209}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    # Check if stack is not empty and contains at least one '[',\n    # indicating there was a nested structure at some point.\n    return len(stack) > 0", "prompt_tokens": 183, "completion_tokens": 209, "duration": 12.723164081573486}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Given a list of numbers, returns the sum of squares of the numbers after rounding them to the ceiling.\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 53, "duration": 4.907441139221191}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    # Strip trailing spaces\n    txt = txt.rstrip()\n    # Check if the last char is a letter and the second last is not (or doesn't exist)\n    return txt[-1:].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 187, "completion_tokens": 114, "duration": 7.688997268676758}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 5.765192031860352}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 188, "completion_tokens": 81, "duration": 6.193767309188843}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 89, "duration": 4.547563314437866}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Check if n is less than the smallest possible sum of 4 positive even numbers\n    if n < 8:\n        return False\n    # Since any even number can be written as 2 + 2 + 2 + (n-6), where (n-6) is even when n is even and >= 8\n    return n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 115, "duration": 4.938545227050781}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "prompt_tokens": 145, "completion_tokens": 72, "duration": 5.65149450302124}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text.replace(\"   \", \"-\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\" \", \"_\")\n    return text", "prompt_tokens": 156, "completion_tokens": 137, "duration": 11.141171216964722}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    # Regular expression to match the conditions\n    pattern = r\"^[a-zA-Z][a-zA-Z0-9]{0,}[a-zA-Z]{2}[0-9]{0,3}\\.[txt|exe|dll]{3}$\"\n    return \"Yes\" if re.match(pattern, file_name) else \"No\"", "prompt_tokens": 264, "completion_tokens": 84, "duration": 7.2274792194366455}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 4.606012344360352}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 81, "duration": 5.590418338775635}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    result = (num_x * num_n) / (den_x * den_n)\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 62, "duration": 4.215679407119751}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 58, "duration": 4.217273473739624}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n = abs(n)  # to deal with negative numbers\n        first_digit = int(str(n)[0])\n        last_digit = int(str(n)[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n    \n    count = 0\n    for num in nums:\n        if num > 10 and is_first_and_last_digit_odd(num):\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 110, "duration": 7.999021530151367}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n: int) -> int:\n    # Create the array as per the given condition\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of values that when divided by 3 give remainders 0, 1, and 2 respectively\n    remainder_counts = [0, 0, 0]\n    for value in a:\n        remainder_counts[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Combinations of three numbers where each number has a different remainder when divided by 3\n    # Plus combinations where all three numbers have the same remainder\n    valid_triples = (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6) + \\\n                    (remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6) + \\\n                    (remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6) + \\\n                    (remainder_counts[0] * remainder_counts[1] * remainder_counts[2])\n                    \n    return valid_triples", "prompt_tokens": 215, "completion_tokens": 287, "duration": 16.04843020439148}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 261, "completion_tokens": 119, "duration": 8.737904787063599}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by removing odd-length strings and sorting the remaining ones by length and alphabetically.\"\"\"\n    # Remove strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length first, then alphabetically\n    even_length_strings.sort(key=lambda s: (len(s), s))\n    return even_length_strings", "prompt_tokens": 237, "completion_tokens": 98, "duration": 9.22882890701294}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 3.7719247341156006}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.21915864944458}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - h) if g != h else 0 for g, h in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.8944742679595947}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 327, "completion_tokens": 78, "duration": 4.569649696350098}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 83, "duration": 3.7958970069885254}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 77, "duration": 5.849831581115723}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 252, "duration": 11.764895677566528}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 3.471052646636963}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda x: (-len(set(x)), x)), key=len(set), default=\"\")", "prompt_tokens": 170, "completion_tokens": 32, "duration": 3.3966429233551025}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]", "prompt_tokens": 327, "completion_tokens": 32, "duration": 2.978182077407837}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operands[0])\n    for i in range(1, len(operands)):\n        expression += operators[i-1] + str(operands[i])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 109, "duration": 6.355273962020874}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if all(not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 3.968672752380371}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 126, "completion_tokens": 105, "duration": 6.165716886520386}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 79, "duration": 4.8233420848846436}
