{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 85, "duration": 5.030629873275757}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = ''\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')' and stack:\n            stack.pop()\n            current_group += char\n            if not stack:  # If stack is empty, a group has ended\n                result.append(current_group)\n                current_group = ''\n\n    return result", "prompt_tokens": 165, "completion_tokens": 125, "duration": 9.296921014785767}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 3.502267360687256}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 5.074315071105957}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 85, "duration": 6.173562288284302}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result", "prompt_tokens": 142, "completion_tokens": 63, "duration": 4.892194032669067}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ' and max_depth != 0:\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    \n    if max_depth != 0:  # In case the last group does not end with a space\n        depths.append(max_depth)\n\n    return depths", "prompt_tokens": 162, "completion_tokens": 151, "duration": 13.475732564926147}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 104, "duration": 7.238694190979004}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 65, "duration": 3.8155887126922607}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "prompt_tokens": 150, "completion_tokens": 65, "duration": 6.67053484916687}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 192, "completion_tokens": 70, "duration": 6.313928842544556}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 40, "duration": 3.3377151489257812}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    max_length = len(max(strings, key=len))\n    for string in strings:\n        if len(string) == max_length:\n            return string", "prompt_tokens": 152, "completion_tokens": 102, "duration": 8.836910486221313}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 4.906047821044922}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 4.6435136795043945}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 6.841965675354004}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 5.004233121871948}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 222, "completion_tokens": 83, "duration": 5.189576864242554}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 79, "duration": 6.7202064990997314}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list, key=lambda word: num_dict[word])\n    return ' '.join(sorted_list)", "prompt_tokens": 155, "completion_tokens": 114, "duration": 10.871566534042358}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = numbers[1] - numbers[0]\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < min_diff:\n            min_diff = numbers[i + 1] - numbers[i]\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 121, "duration": 9.714614629745483}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "prompt_tokens": 173, "completion_tokens": 104, "duration": 5.1204447746276855}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 3.2740938663482666}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 3.5050525665283203}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 64, "duration": 2.905557870864868}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 82, "duration": 8.141488075256348}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 63, "duration": 6.067788600921631}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 4.013396739959717}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 61, "duration": 5.0483925342559814}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 82, "duration": 5.487092733383179}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 125, "duration": 8.27246379852295}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 5.162748336791992}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    from scipy.optimize import root\n    \n    def poly_func(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    sol = root(poly_func, 0) # Use 0 as an initial guess\n    return sol.x[0]", "prompt_tokens": 309, "completion_tokens": 225, "duration": 17.205068111419678}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract values at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted values\n    divisible_by_three.sort()\n    \n    # Replace the original values with sorted ones\n    for i, value in enumerate(divisible_by_three):\n        l[i * 3] = value\n    \n    return l", "prompt_tokens": 200, "completion_tokens": 164, "duration": 7.2581727504730225}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 123, "completion_tokens": 16, "duration": 2.7699670791625977}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.12323522567749}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 5.6733152866363525}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_index_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 66, "duration": 6.258786678314209}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 103, "duration": 8.415688276290894}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count, num = 0, 0\n    while count < n:\n        num += 1\n        if is_prime(fib(num)) and fib(num) > 1:\n            count += 1\n    return fib(num)", "prompt_tokens": 147, "completion_tokens": 156, "duration": 12.727407693862915}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 209, "completion_tokens": 106, "duration": 8.83770489692688}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars\n    moving in opposite directions on an infinitely long straight line.\n    \"\"\"\n    return n * n", "prompt_tokens": 201, "completion_tokens": 51, "duration": 4.075838804244995}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 7.98151969909668}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 5.994755029678345}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 4.740940093994141}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 39, "duration": 4.5032689571380615}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 123, "duration": 8.27733588218689}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 125, "completion_tokens": 61, "duration": 3.645983934402466}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.081122636795044}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p using an efficient algorithm.\n    \"\"\"\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base ** 2) % p\n        n //= 2\n\n    return result", "prompt_tokens": 155, "completion_tokens": 96, "duration": 7.324654817581177}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 4.089726209640503}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 60, "duration": 4.649882555007935}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.7268497943878174}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.641515254974365}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.384315013885498}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 79, "duration": 6.131611347198486}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 6.639734745025635}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 55, "duration": 4.363129138946533}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 116, "duration": 5.610694169998169}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n\n    if n > 2 and is_prime(n):\n        prime_factor = n\n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 153, "duration": 4.263693332672119}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 109, "duration": 6.9028003215789795}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == \"(\":\n            count += 1\n        elif char == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 8.572794675827026}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 2.839869499206543}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for i in range(3, n + 1):\n        d = a + b + c\n        a, b, c = b, c, d\n    return c", "prompt_tokens": 199, "completion_tokens": 98, "duration": 11.666536808013916}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Counts the vowels in a string, considering 'y' as a vowel only if it is at the end.\n    \"\"\"\n    count = 0\n    vowels = 'aeiouAEIOU'\n    if len(s) > 0 and s[-1].lower() == 'y':\n        count += 1\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Additional Test Cases\nprint(vowels_count(\"rhythm\"))  # Should return 1 because 'y' is at the end\nprint(vowels_count(\"SYZYGY\"))  # Should return 1\nprint(vowels_count(\"\"))  # Should return 0\nprint(vowels_count(\"quick\"))  # Should return 2\nprint(vowels_count(\"sly\"))  # Should return 1", "prompt_tokens": 176, "completion_tokens": 189, "duration": 8.759924173355103}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 46, "duration": 2.7575430870056152}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.2261550426483154}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 2.9799466133117676}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    \"\"\"\n    even_numbers = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_numbers:\n        return []\n    return list(min(even_numbers))", "prompt_tokens": 362, "completion_tokens": 88, "duration": 12.581623554229736}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    frequency = Counter(lst)\n    result = [key for key, value in frequency.items() if key <= value]\n    return max(result) if result else -1", "prompt_tokens": 215, "completion_tokens": 49, "duration": 2.944193124771118}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst_sorted = sorted(lst)\n    result = []\n    while lst_sorted:\n        result.append(lst_sorted.pop(0))\n        if lst_sorted:\n            result.append(lst_sorted.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 3.109788179397583}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 138, "duration": 9.67644715309143}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 4.500626087188721}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.8063342571258545}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has total number of chars in the all strings of the list less than the other list.\n    If the two lists have the same number of chars, return the first list.\n    '''\n    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    return lst1 if len_lst1 <= len_lst2 else lst2", "prompt_tokens": 243, "completion_tokens": 110, "duration": 8.046766996383667}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            for j in range(i+1, a // i):\n                if (a / i) % j == 0 and is_prime(j) and is_prime(a / i / j):\n                    return True\n    return False", "prompt_tokens": 129, "completion_tokens": 133, "duration": 9.182512044906616}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n == 0 or n == 1:\n        return False\n    current_power = n\n    while current_power <= x:\n        if current_power == x:\n            return True\n        current_power *= n\n    return False", "prompt_tokens": 192, "completion_tokens": 73, "duration": 4.629249811172485}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a >= 0:\n        root = round(a**(1/3))\n    else:\n        root = round(-((-a)**(1/3)))\n    return root**3 == a", "prompt_tokens": 160, "completion_tokens": 50, "duration": 3.988736629486084}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes_in_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in primes_in_hex)", "prompt_tokens": 349, "completion_tokens": 48, "duration": 6.710173845291138}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "prompt_tokens": 189, "completion_tokens": 25, "duration": 2.6806931495666504}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 57, "duration": 4.773415565490723}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert numerical grades to letter grades.\n\n    :param grades: A list of numerical grades (floats or integers).\n    :return: A list of corresponding letter grades as strings.\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 293, "duration": 10.928301095962524}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 69, "duration": 4.420327186584473}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Only '1' meets the criteria\n    else:\n        # For numbers starting with 1: 1xxxx...x (10^(n-1) choices)\n        # For numbers ending with 1: x...x1 (9 * 10^(n-2) choices, since the first digit can't be 0)\n        # Total = 10^(n-1) + 9 * 10^(n-2)\n        # But '1' at the start and end are counted twice if n > 1, so subtract 1 to correct\n        return 10**(n-1) + 9 * 10**(n-2) - (1 if n > 1 else 0)", "prompt_tokens": 94, "completion_tokens": 205, "duration": 9.014344692230225}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 33, "duration": 2.93288254737854}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 3.8866119384765625}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are\n    replaced by a new word with characters arranged in ascending order based on ascii value.\n    \"\"\"\n    # Split the string into words\n    words = s.split(' ')\n    # For each word, order the letters and join them back\n    ordered_words = [''.join(sorted(word)) for word in words]\n    # Join the ordered words back into a string with spaces\n    return ' '.join(ordered_words)", "prompt_tokens": 180, "completion_tokens": 112, "duration": 5.223942518234253}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list lst and an integer x, finds all occurrences of x in the list,\n    and returns a list of tuples, each representing the coordinates (row, column) of x,\n    sorted first by rows in ascending order, and then by columns in descending order within each row.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda element: (element[0], -element[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 134, "duration": 6.137956380844116}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 58, "duration": 3.7225537300109863}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 102, "duration": 8.646613121032715}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list or None if there is no such element.\n    \"\"\"\n    unique_sorted_list = sorted(set(lst))\n    if len(unique_sorted_list) < 2:\n        return None\n    else:\n        return unique_sorted_list[1]", "prompt_tokens": 174, "completion_tokens": 69, "duration": 9.820358753204346}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in the given string. A boredom is defined as\n    a sentence that starts with the word \"I\". Sentences are separated by '.', '?', or '!'.\n    \n    Parameters:\n    - S (str): The input string containing sentences.\n    \n    Returns:\n    - int: The number of boredoms.\n    \"\"\"\n    sentences = [s.strip() for s in S.replace('?', '.').replace('!', '.').split('.')]\n    return sum(s.startswith(\"I\") for s in sentences if s)", "prompt_tokens": 157, "completion_tokens": 123, "duration": 6.553356170654297}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 5.078691244125366}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    return ''.join(vowels[c] if c in vowels else c.swapcase() for c in message)", "prompt_tokens": 159, "completion_tokens": 94, "duration": 4.685455322265625}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum([int(digit) for digit in str(largest_prime)])", "prompt_tokens": 336, "completion_tokens": 111, "duration": 9.441696166992188}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 67, "duration": 3.9250900745391846}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [num for num in range(2, n) if is_prime(num)]", "prompt_tokens": 195, "completion_tokens": 81, "duration": 4.694676399230957}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 49, "duration": 6.9115283489227295}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 116, "duration": 8.027334451675415}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if num - int(num) <= -0.5:\n            return int(num) - 1\n        else:\n            return int(num)", "prompt_tokens": 206, "completion_tokens": 85, "duration": 4.944230794906616}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 122, "duration": 9.139992952346802}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 3.240830659866333}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 144, "completion_tokens": 125, "duration": 7.9730916023254395}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 6.543561935424805}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 152, "completion_tokens": 98, "duration": 6.78084397315979}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", \n                   6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = sorted([x for x in arr if x >= 1 and x <= 9], reverse=True)\n    return [digit_names[x] for x in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 107, "duration": 8.233104944229126}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # Even\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 115, "duration": 4.890441656112671}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 6.951143741607666}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            return sum(int(digit) for digit in str(num)[1:]) - 2*int(str(num)[1])\n        else:\n            return sum(int(digit) for digit in str(num))\n    return len([num for num in arr if sum_of_digits(num) > 0])", "prompt_tokens": 174, "completion_tokens": 83, "duration": 5.666219472885132}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 5.662218332290649}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_lst1 <= even_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 79, "duration": 7.623986721038818}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    count_dict = {}\n    for word in words:\n        if word in count_dict:\n            count_dict[word] += 1\n        else:\n            count_dict[word] = 1\n\n    max_count = max(count_dict.values(), default=0)\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    return result", "prompt_tokens": 201, "completion_tokens": 92, "duration": 4.438734292984009}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 2.9538707733154297}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 223, "completion_tokens": 75, "duration": 6.435700178146362}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n        \n    return min_sum", "prompt_tokens": 138, "completion_tokens": 88, "duration": 4.080663442611694}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 35, "duration": 2.83721923828125}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 3.2656726837158203}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 231, "completion_tokens": 98, "duration": 4.703054189682007}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 4.1203742027282715}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    if first.count('(') >= second.count(')') or second.count('(') >= first.count(')'):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 218, "completion_tokens": 54, "duration": 3.049647808074951}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 54, "duration": 3.4757072925567627}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 40, "duration": 3.853253126144409}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if 0 < x < 100)", "prompt_tokens": 178, "completion_tokens": 70, "duration": 6.204916954040527}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 102, "duration": 8.368201732635498}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Try to convert month, day, and year into integers\n    try:\n        month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    \n    return True", "prompt_tokens": 313, "completion_tokens": 254, "duration": 15.094961881637573}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 190, "completion_tokens": 66, "duration": 5.317545413970947}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 299, "completion_tokens": 104, "duration": 7.144849061965942}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    intersection_length = end_min - start_max + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 137, "duration": 6.699918031692505}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod_sign = 1\n    sum_magnitude = 0\n    for num in arr:\n        prod_sign *= (1 if num > 0 else -1 if num < 0 else 0)\n        sum_magnitude += abs(num)\n    return sum_magnitude * prod_sign", "prompt_tokens": 172, "completion_tokens": 80, "duration": 9.139127969741821}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    \n    # Find the starting point with the minimum value\n    start_val = min(min(row) for row in grid)\n    start_positions = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == start_val]\n\n    # Priority queue: (current path cost, current path length, current row, current column, path list)\n    pq = []\n    for i, j in start_positions:\n        heappush(pq, (start_val, 1, i, j, [start_val]))\n\n    visited = set()\n\n    while pq:\n        cost, length, x, y, path = heappop(pq)\n        if length == k:\n            return path\n        if (x, y, length) in visited:\n            continue\n        visited.add((x, y, length))\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_cost = grid[nx][ny]\n                new_path = path + [new_cost]\n                heappush(pq, (new_cost, length + 1, nx, ny, new_path))", "prompt_tokens": 446, "completion_tokens": 310, "duration": 19.911710739135742}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Returns the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 2]\n    \n    trib = [3, 2, 8]  # Base cases for tri(0), tri(1), and tri(2) as defined\n    while len(trib) <= n:\n        if len(trib) % 2 == 0:  # If the next index is even\n            trib.append(1 + len(trib) / 2)\n        else:\n            next_val = trib[-1] + trib[-2] + trib[-3]\n            trib.append(next_val)\n    \n    return trib[:n+1]", "prompt_tokens": 285, "completion_tokens": 166, "duration": 10.065166711807251}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 4.034481048583984}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 183, "completion_tokens": 59, "duration": 3.9367053508758545}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 207, "completion_tokens": 26, "duration": 2.500405788421631}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    if not txt or not txt.rstrip().endswith(' ') or not txt.rstrip()[-1].isalpha():\n        return False\n    return True", "prompt_tokens": 187, "completion_tokens": 101, "duration": 9.476650476455688}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 49, "duration": 5.5296244621276855}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 76, "duration": 5.521310567855835}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(\",\", \".\")\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b", "prompt_tokens": 191, "completion_tokens": 89, "duration": 7.21867823600769}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # As the smallest 4 positive even numbers are 2, 4, 6, 8 and their sum is 20,\n    # any number less than 20 cannot be written as the sum of 4 positive even numbers.\n    # Also, the sum of any 4 even numbers is even, so n must be even to be written as such a sum.\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 127, "duration": 16.88341760635376}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result", "prompt_tokens": 145, "completion_tokens": 70, "duration": 5.925570249557495}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 60, "duration": 7.462370157241821}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Check for the number of dots and split the filename\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n\n    # Check the extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check the name starts with a latin alphapet letter and contains at most 3 digits\n    if not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 129, "duration": 10.05147385597229}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(lst[i]**2 if i % 3 == 0 else lst[i]**3 if i % 4 == 0 else lst[i] for i in range(len(lst)))", "prompt_tokens": 219, "completion_tokens": 49, "duration": 4.523901462554932}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 197, "completion_tokens": 101, "duration": 7.588726997375488}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 2.7546679973602295}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 35, "duration": 2.2569358348846436}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_and_greater_than_10(num):\n        num_str = str(abs(num))\n        return num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n\n    return sum(1 for num in nums if is_odd_and_greater_than_10(num))", "prompt_tokens": 169, "completion_tokens": 80, "duration": 4.592467546463013}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    count_0, count_1, count_2 = 0, 0, 0\n    for i in range(1, n + 1):\n        value = (i * i - i + 1) % 3\n        if value == 0:\n            count_0 += 1\n        elif value == 1:\n            count_1 += 1\n        else:  # value == 2\n            count_2 += 1\n\n    # Compute combinations: C(n, 3) = n! / (3!(n - 3)!)\n    # And since a[i] + a[j] + a[k] is multiple of 3, we have three cases:\n    # 1. All elements are of form 3k, i.e., mod 3 == 0\n    # 2. One of each mod 3 == 0, 1, 2\n    return (count_0 * (count_0 - 1) * (count_0 - 2) // 6) + \\\n           (count_1 * count_2 * count_0) + \\\n           (count_1 * (count_1 - 1) * (count_1 - 2) // 6) + \\\n           (count_2 * (count_2 - 1) * (count_2 - 2) // 6)", "prompt_tokens": 215, "completion_tokens": 325, "duration": 12.744510650634766}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    p1_index, p2_index = planets.index(planet1), planets.index(planet2)\n    if p1_index < p2_index:\n        return tuple(planets[p1_index+1:p2_index])\n    else:\n        return tuple(planets[p2_index+1:p1_index])", "prompt_tokens": 261, "completion_tokens": 127, "duration": 8.819069862365723}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    # Sort the filtered list by length then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 237, "completion_tokens": 74, "duration": 5.074669599533081}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 3.3150296211242676}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 34, "duration": 2.713024139404297}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.7319769859313965}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 327, "completion_tokens": 80, "duration": 6.155840158462524}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Checks if the second word or any of its rotations is a substring in the first word.\"\"\"\n    if len(b) > len(a):\n        return False\n    extended_a = a + a  # Extend the first word to account for rotations\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]  # Rotate the second word\n        if rotated_b in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 106, "duration": 9.083403587341309}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # Convert to positive to simplify digit extraction\n    even_count, odd_count = 0, 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 149, "duration": 9.757900714874268}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 151, "completion_tokens": 204, "duration": 9.553987503051758}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 3.400822401046753}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return min(sorted(words, key=lambda x: (-len(set(x)), x)), key=len(set), default=\"\")", "prompt_tokens": 170, "completion_tokens": 32, "duration": 2.543724536895752}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    to_eat = min(need, remaining)\n    return [number + to_eat, remaining - to_eat]", "prompt_tokens": 327, "completion_tokens": 38, "duration": 3.208195924758911}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 108, "duration": 8.727076292037964}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 7.1936280727386475}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    result = hashlib.md5(text.encode())\n    return result.hexdigest()", "prompt_tokens": 126, "completion_tokens": 101, "duration": 6.352427005767822}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    return sorted([x for x in range(min(a, b), max(a, b) + 1) if x % 2 == 0])", "prompt_tokens": 154, "completion_tokens": 72, "duration": 3.239166498184204}
