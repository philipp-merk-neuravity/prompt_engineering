{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 64, "duration": 5.581328630447388}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    from typing import List\n    result = []\n    stack = []\n    group = \"\"\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            stack.append(char)\n            group += char\n        elif char == \")\" and stack:\n            stack.pop()\n            group += char\n            if not stack:\n                result.append(group)\n                group = \"\"\n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 8.210364580154419}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 4.715981483459473}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 4.28460168838501}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 3.6885251998901367}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "prompt_tokens": 142, "completion_tokens": 65, "duration": 4.771254062652588}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    max_depths = []\n    for group in paren_string.split():\n        max_depth = depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 162, "completion_tokens": 101, "duration": 8.127307176589966}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 58, "duration": 3.8652679920196533}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:  # Check if the list is empty\n        return (0, 1)\n    sum_of_numbers = sum(numbers)  # Sum of all numbers in the list\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number  # Product of all numbers in the list\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 160, "completion_tokens": 155, "duration": 7.075575590133667}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 150, "completion_tokens": 63, "duration": 6.735131025314331}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if string == string[::-1]:  # Check if the entire string is a palindrome\n        return string\n    \n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[i-1::-1]\n    return string", "prompt_tokens": 192, "completion_tokens": 140, "duration": 7.56583309173584}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 45, "duration": 3.8163511753082275}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 152, "completion_tokens": 80, "duration": 6.76589560508728}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 6.825084924697876}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 78, "duration": 7.441609859466553}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 118, "completion_tokens": 31, "duration": 3.3064184188842773}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.7604334354400635}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_dict = {'o': 4, 'o|': 2, '.|': 1}\n    parsed_notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                parsed_notes.append(notes_dict['o|'])\n                i += 2\n            else:\n                parsed_notes.append(notes_dict['o'])\n                i += 1\n        elif music_string[i] == '.':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                parsed_notes.append(notes_dict['.|'])\n                i += 2\n        else:\n            i += 1\n    return parsed_notes", "prompt_tokens": 222, "completion_tokens": 194, "duration": 10.02106523513794}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            break\n    return count", "prompt_tokens": 138, "completion_tokens": 72, "duration": 4.800658464431763}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 155, "completion_tokens": 105, "duration": 6.164632081985474}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 119, "duration": 6.340186595916748}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]", "prompt_tokens": 173, "completion_tokens": 102, "duration": 8.974308490753174}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 141, "completion_tokens": 53, "duration": 5.570631504058838}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 2.3855884075164795}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 3.321319580078125}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 176, "completion_tokens": 79, "duration": 5.072426795959473}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    counts = {}\n    for number in numbers:\n        counts[number] = counts.get(number, 0) + 1\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 134, "completion_tokens": 96, "duration": 5.308220863342285}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 4.082936763763428}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 56, "duration": 5.2512853145599365}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 39, "duration": 4.3638482093811035}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 2.888314962387085}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 4.713128566741943}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    poly_func = lambda x: poly(xs, x)\n    zero_point = fsolve(poly_func, 0)[0]\n    return zero_point", "prompt_tokens": 309, "completion_tokens": 204, "duration": 15.698263168334961}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    third_elements = sorted(l[2::3])\n    for i, val in enumerate(third_elements):\n        l[i * 3 + 2] = val\n    return l", "prompt_tokens": 200, "completion_tokens": 50, "duration": 3.7169840335845947}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 78, "duration": 8.178572416305542}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 85, "duration": 6.863293409347534}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 129, "completion_tokens": 63, "duration": 11.032592058181763}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    for i in range(0, len(l), 2):\n        l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 173, "completion_tokens": 65, "duration": 3.9376347064971924}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group in reverse, unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 118, "duration": 7.736653804779053}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib():\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    fib_gen = fib()\n    count = 0\n    while True:\n        f = next(fib_gen)\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "prompt_tokens": 147, "completion_tokens": 146, "duration": 10.350810289382935}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        a = l[i]\n        start = i + 1\n        end = n - 1\n        while start < end:\n            b = l[start]\n            c = l[end]\n            if a + b + c == 0:\n                return True\n            elif a + b + c > 0:\n                end -= 1\n            else:\n                start += 1\n    return False", "prompt_tokens": 209, "completion_tokens": 117, "duration": 8.400221109390259}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Given n cars driving left to right and a different set of n cars driving right to left,\n    this function calculates the number of collisions that occur.\n    \"\"\"\n    return n**2", "prompt_tokens": 201, "completion_tokens": 56, "duration": 5.156688690185547}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "prompt_tokens": 158, "completion_tokens": 118, "duration": 18.738418102264404}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 207, "completion_tokens": 42, "duration": 4.562258243560791}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 59, "duration": 5.662138223648071}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 55, "duration": 3.7422635555267334}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 18.667383432388306}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 61, "duration": 5.310206890106201}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 80, "duration": 6.770730972290039}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 116, "duration": 7.343106031417847}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 43, "duration": 3.168250322341919}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])", "prompt_tokens": 172, "completion_tokens": 146, "duration": 20.533711910247803}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.3285837173461914}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 103, "completion_tokens": 60, "duration": 4.241535425186157}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 190, "completion_tokens": 31, "duration": 3.7806942462921143}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "prompt_tokens": 102, "completion_tokens": 66, "duration": 7.234406471252441}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 142, "completion_tokens": 71, "duration": 4.63768196105957}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 61, "duration": 9.93020486831665}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 164, "completion_tokens": 39, "duration": 4.076505184173584}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_factor = 1\n    i = 2\n\n    while i <= n ** 0.5 or n == 1:\n        if n % i == 0 and is_prime(i):\n            prime_factor = i\n            while n % i == 0:\n                n //= i\n        i += 1\n\n    if n > 1 and is_prime(n):  # n is itself a prime number.\n        prime_factor = n\n\n    return prime_factor", "prompt_tokens": 113, "completion_tokens": 172, "duration": 8.175097227096558}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 144, "completion_tokens": 29, "duration": 3.2771034240722656}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 7.486255407333374}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 28, "duration": 4.141913652420044}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            d = a + b + c\n            a, b, c = b, c, d\n        return c", "prompt_tokens": 199, "completion_tokens": 108, "duration": 6.842869520187378}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Add more test cases.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"sky\"))    # Expected output: 1\nprint(vowels_count(\"Y\"))      # Expected output: 1\nprint(vowels_count(\"rhythm\")) # Expected output: 0", "prompt_tokens": 176, "completion_tokens": 154, "duration": 12.598028421401978}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 132, "completion_tokens": 56, "duration": 5.686939001083374}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.379664897918701}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    nums = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(nums)", "prompt_tokens": 260, "completion_tokens": 35, "duration": 3.7793915271759033}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0 and value >= 0]\n    if even_nodes:\n        return list(min(even_nodes))\n    else:\n        return []", "prompt_tokens": 362, "completion_tokens": 59, "duration": 4.6847169399261475}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num in sorted(count_dict.keys(), reverse=True):\n        if count_dict[num] >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 77, "duration": 7.245289325714111}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 174, "completion_tokens": 51, "duration": 5.9647438526153564}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 128, "duration": 5.898936748504639}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.486767292022705}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    i, j = 0, len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 67, "duration": 6.112732172012329}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 243, "completion_tokens": 70, "duration": 6.078593015670776}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while is_prime(i) and a % i == 0:\n            prime_factors.append(i)\n            a = a // i\n            \n    return len(prime_factors) == 3", "prompt_tokens": 129, "completion_tokens": 119, "duration": 6.613494873046875}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 192, "completion_tokens": 49, "duration": 5.883483409881592}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    if a >= 0:\n        return round(a ** (1/3)) ** 3 == a\n    else:\n        return round(abs(a) ** (1/3)) ** 3 == abs(a)", "prompt_tokens": 160, "completion_tokens": 54, "duration": 4.7302892208099365}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    # Define the prime hex digits\n    prime_hex_digits = set('2357BD')\n    # Count and return the number of prime hex digits in the input string\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 349, "completion_tokens": 65, "duration": 9.188143968582153}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to binary format with 'db' at the beginning and end of the string.\"\"\"\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"", "prompt_tokens": 189, "completion_tokens": 52, "duration": 3.182936906814575}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 171, "completion_tokens": 55, "duration": 3.3458943367004395}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for g in grades:\n        if g == 4.0:\n            letter_grades.append('A+')\n        elif g > 3.7:\n            letter_grades.append('A')\n        elif g > 3.3:\n            letter_grades.append('A-')\n        elif g > 3.0:\n            letter_grades.append('B+')\n        elif g > 2.7:\n            letter_grades.append('B')\n        elif g > 2.3:\n            letter_grades.append('B-')\n        elif g > 2.0:\n            letter_grades.append('C+')\n        elif g > 1.7:\n            letter_grades.append('C')\n        elif g > 1.3:\n            letter_grades.append('C-')\n        elif g > 1.0:\n            letter_grades.append('D+')\n        elif g > 0.7:\n            letter_grades.append('D')\n        elif g > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 252, "duration": 11.765854597091675}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 6.230456352233887}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # Special case where n = 1, the only number is 1 itself\n    else:\n        # First digit can be 1 (9 options for last digit) or last digit can be 1 (9 options for first digit)\n        # Subtract the case where both are 1 to avoid double counting\n        return 9 * 2 * (10 ** (n - 2)) - (10 ** (n - 2))", "prompt_tokens": 94, "completion_tokens": 145, "duration": 6.472146511077881}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum([int(digit) for digit in str(N)])\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 183, "completion_tokens": 34, "duration": 3.5597920417785645}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 40, "duration": 7.198549747467041}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 180, "completion_tokens": 27, "duration": 3.5253074169158936}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, -col_idx))\n    result.sort(key=lambda x: (x[0], x[1]))\n    return [(i, -j) for i, j in result]", "prompt_tokens": 309, "completion_tokens": 83, "duration": 7.224628925323486}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:\n        return []\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 253, "completion_tokens": 128, "duration": 10.131223440170288}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            result += chr(start + (ord(char) - start + 4) % 26)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 73, "duration": 5.669232130050659}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 45, "duration": 4.388175964355469}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\" in the given string.\n    Sentences are considered to be delimited by '.', '?', or '!'.\n    \n    Args:\n    S (str): The input string to be analyzed.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    # Split the string into sentences based on '.', '?', and '!'\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence]\n    \n    # Count sentences starting with \"I\"\n    count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    \n    return count", "prompt_tokens": 157, "completion_tokens": 149, "duration": 8.76697063446045}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 185, "completion_tokens": 56, "duration": 4.699907064437866}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping cases and replacing vowels with the letter 2 places ahead.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                         'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n\n    for char in message:\n        if char in vowels:\n            encoded_message += vowel_replacement[char]\n        else:\n            encoded_message += char.swapcase()\n\n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 149, "duration": 9.378015279769897}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 336, "completion_tokens": 111, "duration": 8.018366575241089}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 219, "completion_tokens": 69, "duration": 4.431954860687256}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(2, n) if is_prime(x)]", "prompt_tokens": 195, "completion_tokens": 79, "duration": 7.800419092178345}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Function to return the product of the unit digits of two integers.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 148, "completion_tokens": 44, "duration": 3.5839672088623047}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 122, "completion_tokens": 116, "duration": 10.389268636703491}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 4.424325466156006}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 182, "completion_tokens": 25, "duration": 3.6851608753204346}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 166, "completion_tokens": 27, "duration": 3.2978928089141846}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 144, "completion_tokens": 95, "duration": 5.642376661300659}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 190, "completion_tokens": 43, "duration": 4.673601865768433}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \"\"\"\n    def has_no_even_digit(number):\n        return all(int(digit) % 2 != 0 for digit in str(number))\n    \n    return sorted(filter(has_no_even_digit, x))", "prompt_tokens": 152, "completion_tokens": 76, "duration": 4.861547231674194}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_names[num] for num in filtered_arr]", "prompt_tokens": 326, "completion_tokens": 109, "duration": 6.421237230300903}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_n(x):\n        return (x * (x + 1)) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 174, "completion_tokens": 109, "duration": 13.817272901535034}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 101, "duration": 10.230448722839355}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num >= 0:\n            return sum([int(digit) for digit in str(num)])\n        else:\n            return int(str(num)[0]) + sum([int(digit) for digit in str(num)[1:]])\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 174, "completion_tokens": 84, "duration": 5.031834125518799}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n    return count <= 1", "prompt_tokens": 349, "completion_tokens": 58, "duration": 4.146140098571777}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    # Count the number of even numbers in lst1 and odd numbers in lst2\n    even_in_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_in_lst2 = sum(1 for x in lst2 if x % 2 != 0)\n\n    # Count the total number of odd numbers in lst1\n    total_odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n\n    # If the number of odd numbers in lst1 is less than or equal to the number of odd numbers in lst2\n    # and the total of even numbers in lst1 and odd numbers in lst2 is equal or greater than the length of lst1,\n    # then it is possible to make all elements in lst1 even by exchange.\n    if total_odd_in_lst1 <= odd_in_lst2 and (even_in_lst1 + odd_in_lst2) >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 247, "completion_tokens": 226, "duration": 16.667943000793457}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        if word in hist:\n            hist[word] += 1\n        else:\n            hist[word] = 1\n    max_count = max(hist.values(), default=0)\n    return {k: v for k, v in hist.items() if v == max_count}", "prompt_tokens": 201, "completion_tokens": 81, "duration": 5.034252882003784}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 212, "completion_tokens": 39, "duration": 3.041813373565674}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    def count_odd(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n\n    return [\n        \"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\".format(count_odd(s))\n        for s in lst\n    ]", "prompt_tokens": 223, "completion_tokens": 79, "duration": 7.540863990783691}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 87, "duration": 5.260586500167847}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 373, "completion_tokens": 35, "duration": 2.980168342590332}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation in ascending order.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 68, "duration": 6.078686952590942}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    # Define a function to count consonants in a word\n    def count_consonants(word):\n        vowels = \"aeiouAEIOU\"\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter words with exactly n consonants\n    result = [word for word in words if count_consonants(word) == n]\n\n    return result", "prompt_tokens": 231, "completion_tokens": 108, "duration": 9.73867416381836}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 1, -1):\n        if word[i-1] not in vowels and word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 74, "duration": 6.496296167373657}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    # Count open and close parentheses in both strings\n    first_open = first.count('(')\n    first_close = first.count(')')\n    second_open = second.count('(')\n    second_close = second.count(')')\n\n    # If total number of open and close parentheses doesn't match, it's impossible to form a good string\n    if first_open + second_open != first_close + second_close:\n        return 'No'\n\n    # If first string has more close parentheses than open parentheses in the second string, \n    # and you start with the first string, it will be impossible to form a good string\n    if first_close > second_open:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 160, "duration": 7.333803176879883}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 267, "completion_tokens": 20, "duration": 2.5705881118774414}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 3.085975170135498}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= x < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 2.6671359539031982}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 281, "completion_tokens": 115, "duration": 6.652695178985596}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if not (1 <= month <= 12):\n        return False\n\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        return 1 <= day <= 31\n    elif month in {4, 6, 9, 11}:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29\n    else:\n        return False", "prompt_tokens": 313, "completion_tokens": 136, "duration": 6.589113712310791}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 55, "duration": 4.655111074447632}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        counter = {}\n        for num in lst:\n            if num in counter:\n                counter[num] += 1\n                if counter[num] > 2:\n                    return False\n            else:\n                counter[num] = 1\n    return lst == sorted(lst)", "prompt_tokens": 299, "completion_tokens": 74, "duration": 5.575672388076782}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    if start_max > end_min:\n        return \"NO\"\n    \n    intersection_length = end_min - start_max + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "prompt_tokens": 304, "completion_tokens": 138, "duration": 6.49137544631958}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n    return sum(abs(x) for x in arr) * sign_product", "prompt_tokens": 172, "completion_tokens": 85, "duration": 7.8687522411346436}
{"task_id": "HumanEval/129", "generated_code": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up\n    # Convert grid to value -> (row, column) for easier tracking of positions\n    val_to_pos = {grid[i][j]: (i, j) for i in range(n) for j in range(n)}\n    # Priority queue for BFS: (lexicographical list, current position, steps left)\n    pq = []\n    for val, (i, j) in val_to_pos.items():\n        heappush(pq, ([val], i, j, k - 1))\n\n    while pq:\n        path, r, c, steps_left = heappop(pq)\n        if steps_left == 0:\n            return path\n        for dr, dc in moves:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                new_path = path + [grid[nr][nc]]\n                heappush(pq, (new_path, nr, nc, steps_left - 1))", "prompt_tokens": 446, "completion_tokens": 271, "duration": 19.494613647460938}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    # Base cases\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 2]\n    elif n == 2:\n        return [3, 2, 8]\n    \n    # Initialize list with base Tribonacci values\n    tribonacci = [3, 2, 8]\n    \n    # Calculate Tribonacci values from 3 to n\n    for i in range(3, n + 1):\n        if i % 2 == 0:  # Even case\n            tribonacci.append(1 + i // 2)\n        else:  # Odd case\n            next_value = tribonacci[-1] + tribonacci[-2] + tribonacci[-3]\n            tribonacci.append(next_value)\n    \n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 177, "duration": 13.2414391040802}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 121, "completion_tokens": 63, "duration": 7.254751920700073}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    balance = 0\n    for char in string:\n        if char == '[':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "prompt_tokens": 183, "completion_tokens": 60, "duration": 4.429814100265503}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 3.818533182144165}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    return txt.rstrip()[-1:].isalpha() and txt.rstrip()[-2:-1] == ' '", "prompt_tokens": 187, "completion_tokens": 92, "duration": 7.4584314823150635}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 153, "completion_tokens": 46, "duration": 3.2553417682647705}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    a = max(negative) if negative else None\n    b = min(positive) if positive else None\n    return (a, b)", "prompt_tokens": 188, "completion_tokens": 73, "duration": 6.230119228363037}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    # Function to convert a string with . or , as the decimal point to a float\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(\",\", \".\")\n            return float(x)\n        return x\n\n    # Convert inputs to floats for comparison, while keeping original format for return\n    val_a = to_float(a)\n    val_b = to_float(b)\n\n    # Compare the numerical values\n    if val_a > val_b:\n        return a\n    elif val_b > val_a:\n        return b\n    else:\n        return None", "prompt_tokens": 191, "completion_tokens": 130, "duration": 11.323709964752197}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 127, "completion_tokens": 27, "duration": 4.169273376464844}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    \n    return result", "prompt_tokens": 145, "completion_tokens": 74, "duration": 5.320474624633789}
{"task_id": "HumanEval/140", "generated_code": "import re\n\ndef fix_spaces(text: str) -> str:\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 156, "completion_tokens": 64, "duration": 3.5901541709899902}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    import re\n    # Define the regular expression pattern for valid file names\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}[^0-9]*\\.(txt|exe|dll)$'\n    # Use regular expression to match the pattern with the given file name\n    if re.match(pattern, file_name) and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 264, "completion_tokens": 113, "duration": 6.777982950210571}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 219, "completion_tokens": 47, "duration": 2.7332682609558105}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))", "prompt_tokens": 197, "completion_tokens": 84, "duration": 7.77202582359314}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 205, "completion_tokens": 35, "duration": 3.6673507690429688}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Sorts the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with similar sum of their digits, order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 81, "duration": 5.282969951629639}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_and_last_digit_odd(n):\n        n_str = str(abs(n))\n        return int(n_str[0]) % 2 != 0 and int(n_str[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_first_and_last_digit_odd(num):\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 92, "duration": 7.747548818588257}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Function to count the number of valid triples.\n    \"\"\"\n    # Calculate array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counters for remainders\n    remainder_counts = [0, 0, 0]\n    for val in a:\n        remainder_counts[val % 3] += 1\n    \n    # Calculate the number of triples\n    # Combination formula: nC3 = n! / (3! * (n-3)!)\n    # Since a[i] + a[j] + a[k] being multiple of 3 can be formed by either all elements being multiple of 3\n    # or one of each remainder class 0, 1, and 2.\n    triples = (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6) + \\\n              (remainder_counts[1] * remainder_counts[2] * remainder_counts[0]) + \\\n              (remainder_counts[1] * (remainder_counts[1] - 1) * (remainder_counts[1] - 2) // 6) + \\\n              (remainder_counts[2] * (remainder_counts[2] - 1) * (remainder_counts[2] - 2) // 6)\n    \n    return triples", "prompt_tokens": 215, "completion_tokens": 306, "duration": 22.5659818649292}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1 + 1:idx2])\n    else:\n        return tuple(planets[idx2 + 1:idx1])", "prompt_tokens": 261, "completion_tokens": 123, "duration": 6.018585443496704}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Deleting strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    # Sorting the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda word: (len(word), word))\n    return sorted_lst", "prompt_tokens": 237, "completion_tokens": 74, "duration": 4.11421537399292}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 136, "completion_tokens": 61, "duration": 5.3312156200408936}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.3724312782287598}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 35, "duration": 2.5314319133758545}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'", "prompt_tokens": 327, "completion_tokens": 76, "duration": 3.9655630588531494}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    extended_a = a * 2\n    for i in range(len(b)):\n        if b[i:] + b[:i] in extended_a:\n            return True\n    return False", "prompt_tokens": 179, "completion_tokens": 64, "duration": 6.220695972442627}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))  # Convert to string to iterate through each digit and abs for negative numbers\n    even_count, odd_count = 0, 0  # Initialize counters for even and odd digits\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 102, "duration": 6.2095253467559814}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 151, "completion_tokens": 204, "duration": 9.998652458190918}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 158, "completion_tokens": 45, "duration": 3.8882906436920166}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"Return the word with the maximum number of unique characters. In case of a tie, return the lexicographically first word.\"\"\"\n    # Sort the list first based on lexicographical order then on the length of unique characters in descending order\n    sorted_words = sorted(words, key=lambda x: (-len(set(x)), x))\n    # Return the last element because the list is sorted in descending order of unique characters (and ascending lexicographically)\n    return sorted_words[-1]", "prompt_tokens": 170, "completion_tokens": 108, "duration": 5.7468085289001465}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots and the number of carrots left after eating.\n    \n    :param number: int, the number of carrots already eaten.\n    :param need: int, the number of additional carrots needed.\n    :param remaining: int, the number of carrots available.\n    :return: list, [total number of eaten carrots, number of carrots left].\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 327, "completion_tokens": 123, "duration": 5.668219804763794}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f' {op} {str(num)}'\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 109, "duration": 5.698623418807983}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 157, "completion_tokens": 58, "duration": 4.474376440048218}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()", "prompt_tokens": 126, "completion_tokens": 103, "duration": 7.695634603500366}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end + 1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 79, "duration": 5.676907062530518}
