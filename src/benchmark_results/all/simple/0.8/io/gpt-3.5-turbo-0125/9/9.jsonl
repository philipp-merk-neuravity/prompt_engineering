{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False", "prompt_tokens": 174, "completion_tokens": 58, "duration": 2.530103921890259}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        group += char\n        \n        if count == 0:\n            result.append(group.replace(\" \", \"\"))\n            group = ''\n    \n    return result", "prompt_tokens": 165, "completion_tokens": 98, "duration": 2.915585517883301}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.1695830821990967}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 53, "duration": 2.4843740463256836}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 49, "duration": 2.319308280944824}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimeter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 142, "completion_tokens": 57, "duration": 2.863295555114746}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "prompt_tokens": 162, "completion_tokens": 98, "duration": 3.309746503829956}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.2584266662597656}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 160, "completion_tokens": 60, "duration": 2.741173505783081}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers[:i+1]))\n    return max_numbers", "prompt_tokens": 150, "completion_tokens": 45, "duration": 2.24725341796875}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    \n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n\nmake_palindrome('cat')", "prompt_tokens": 192, "completion_tokens": 71, "duration": 2.9343953132629395}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 43, "duration": 2.2388134002685547}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 152, "completion_tokens": 53, "duration": 2.451540470123291}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.302018165588379}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 109, "completion_tokens": 37, "duration": 2.2333080768585205}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 118, "completion_tokens": 30, "duration": 2.0252087116241455}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 1.9409735202789307}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = [legend[note] for note in music_list]\n    return result", "prompt_tokens": 222, "completion_tokens": 65, "duration": 2.4782721996307373}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 75, "duration": 2.8167803287506104}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)", "prompt_tokens": 155, "completion_tokens": 106, "duration": 3.3935978412628174}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 216, "completion_tokens": 103, "duration": 2.8235106468200684}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 173, "completion_tokens": 53, "duration": 2.3014001846313477}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 141, "completion_tokens": 31, "duration": 2.1891376972198486}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.8585586547851562}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 44, "duration": 2.252532720565796}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 176, "completion_tokens": 65, "duration": 2.612252712249756}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 134, "completion_tokens": 38, "duration": 2.0831470489501953}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.110248327255249}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.069101333618164}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 2.064575433731079}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9776499271392822}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 51, "duration": 2.0446343421936035}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    a = max(xs, key=abs)\n    b = -a\n    \n    def poly(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    x = (a + b) / 2\n    \n    while abs(poly(x)) > 1e-10:\n        if poly(a) * poly(x) < 0:\n            b = x\n        else:\n            a = x\n        x = (a + b) / 2\n        \n    return x", "prompt_tokens": 309, "completion_tokens": 142, "duration": 5.081058740615845}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l[i:i+3] = sorted(l[i:i+3])\n    return l", "prompt_tokens": 200, "completion_tokens": 54, "duration": 2.1593716144561768}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.8681590557098389}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 1.6977958679199219}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 4.2994842529296875}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i%2==0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 41, "duration": 2.020843029022217}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.8576526641845703}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def is_fib(num):\n        a, b = 1, 1\n        while b < num:\n            a, b = b, a + b\n        return b == num\n    \n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_fib(num) and is_prime(num):\n            count += 1\n    return num", "prompt_tokens": 147, "completion_tokens": 151, "duration": 3.622666358947754}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 209, "completion_tokens": 70, "duration": 2.5179171562194824}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 3.228576898574829}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 158, "completion_tokens": 22, "duration": 3.210829734802246}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    return any(-x in l for x in l if x != 0)", "prompt_tokens": 207, "completion_tokens": 28, "duration": 3.242454767227173}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 141, "completion_tokens": 66, "duration": 3.7949705123901367}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 17, "duration": 3.1746158599853516}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d", "prompt_tokens": 221, "completion_tokens": 119, "duration": 4.502384185791016}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2 - 1] + sorted_list[length // 2]) / 2\n    else:\n        return sorted_list[length // 2]", "prompt_tokens": 125, "completion_tokens": 71, "duration": 4.001330614089966}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.109971523284912}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 3.4794604778289795}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 3.7634716033935547}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])", "prompt_tokens": 172, "completion_tokens": 37, "duration": 3.5343573093414307}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 29, "duration": 3.106067180633545}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 20, "duration": 2.848487138748169}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 4.064838409423828}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 37, "duration": 3.155627727508545}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 66, "duration": 3.5706307888031006}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 137, "completion_tokens": 58, "duration": 3.631063222885132}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 397, "completion_tokens": 58, "duration": 4.633086681365967}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.0528647899627686}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return (n*(n+1)) // 2", "prompt_tokens": 144, "completion_tokens": 20, "duration": 2.960353374481201}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 139, "completion_tokens": 67, "duration": 3.299666404724121}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 158, "completion_tokens": 26, "duration": 2.9010627269744873}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 199, "completion_tokens": 99, "duration": 3.7664196491241455}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    if s[-1].lower() == 'y':\n        vowels = vowels.replace('y', '')\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 68, "duration": 4.3738744258880615}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    shifted = x_str[-shift:] + x_str[:-shift]\n    return shifted", "prompt_tokens": 132, "completion_tokens": 55, "duration": 4.4132239818573}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 2.8811967372894287}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 37, "duration": 3.9410250186920166}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n\n    min_even_value = min(even_values)\n    index = arr.index(min_even_value)\n    return [min_even_value, index]", "prompt_tokens": 362, "completion_tokens": 65, "duration": 4.601921796798706}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_num = -1\n    for num in set(lst):\n        if lst.count(num) >= num and num > 0:\n            max_num = max(max_num, num)\n    return max_num", "prompt_tokens": 215, "completion_tokens": 51, "duration": 2.926389694213867}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_list = []\n    lst.sort()\n    while lst:\n        sorted_list.append(lst.pop(0))\n        if lst:\n            sorted_list.append(lst.pop())\n    return sorted_list", "prompt_tokens": 174, "completion_tokens": 48, "duration": 4.030500888824463}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 4.6683189868927}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.837822198867798}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.2708771228790283}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) >= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 3.0212228298187256}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    if count == 3:\n        return True\n    return False", "prompt_tokens": 129, "completion_tokens": 110, "duration": 4.664634704589844}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return n > 0 and x > 0 and (n**int(x**(1/n))) == x", "prompt_tokens": 192, "completion_tokens": 36, "duration": 3.9093575477600098}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 2.8965225219726562}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in primes)\n    return count", "prompt_tokens": 349, "completion_tokens": 49, "duration": 4.034329414367676}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 189, "completion_tokens": 29, "duration": 2.7738699913024902}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))", "prompt_tokens": 171, "completion_tokens": 62, "duration": 4.262517690658569}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 320, "completion_tokens": 254, "duration": 5.46552038192749}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 70, "duration": 3.2479121685028076}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 94, "completion_tokens": 64, "duration": 3.20924973487854}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.5897483825683594}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.657017469406128}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.1301512718200684}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 70, "duration": 2.683040142059326}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.reverse()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 45, "duration": 2.357879877090454}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 2 * 2\n            if char.islower():\n                if shift > ord('z'):\n                    shift -= 26\n            else:\n                if shift > ord('Z'):\n                    shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 160, "completion_tokens": 92, "duration": 2.821547746658325}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 52, "duration": 2.5346078872680664}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 157, "completion_tokens": 43, "duration": 2.110577344894409}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 185, "completion_tokens": 54, "duration": 2.3245136737823486}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    result = \"\"\n    vowels = 'AEIOUaeiou'\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                result += chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n        else:\n            result += char\n    return result", "prompt_tokens": 159, "completion_tokens": 100, "duration": 2.9541256427764893}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 110, "duration": 2.909538984298706}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = dict.keys()\n    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 60, "duration": 2.420733690261841}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 86, "duration": 2.853787660598755}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)", "prompt_tokens": 148, "completion_tokens": 19, "duration": 1.842214584350586}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in \"AEIOU\")", "prompt_tokens": 122, "completion_tokens": 43, "duration": 2.096749782562256}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.2596874237060547}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        result.append(n)\n    return result", "prompt_tokens": 182, "completion_tokens": 61, "duration": 2.4676496982574463}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.7471575736999512}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.1453254222869873}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 190, "completion_tokens": 40, "duration": 2.133678674697876}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 152, "completion_tokens": 37, "duration": 1.9948737621307373}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    if not arr:\n        return []\n    \n    valid_nums = [x for x in arr if 1 <= x <= 9]\n    sorted_nums = sorted(valid_nums)\n    reversed_nums = sorted_nums[::-1]\n    \n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    return [num_to_word[num] for num in reversed_nums]", "prompt_tokens": 326, "completion_tokens": 141, "duration": 3.6692206859588623}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.427252769470215}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 105, "duration": 2.7667083740234375}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)", "prompt_tokens": 174, "completion_tokens": 31, "duration": 1.8024473190307617}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr_sorted = sorted(arr)\n    return arr == arr_sorted or sorted(arr[:-1]) == arr_sorted[1:]", "prompt_tokens": 349, "completion_tokens": 44, "duration": 2.0638344287872314}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for x in lst1 if x % 2 == 1) <= len(lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 44, "duration": 2.0588958263397217}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letter_count = {}\n    for letter in test.split():\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values())\n    return {key: val for key, val in letter_count.items() if val == max_count}", "prompt_tokens": 201, "completion_tokens": 69, "duration": 2.2797834873199463}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    new_s = ''.join([char for char in s if char not in c])\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 212, "completion_tokens": 42, "duration": 2.040729522705078}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 223, "completion_tokens": 66, "duration": 2.4316625595092773}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 70, "duration": 2.1958563327789307}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 1.8578577041625977}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.6457667350769043}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    for word in words:\n        count = sum(1 for letter in word if letter in consonants)\n        if count == n:\n            result.append(word)\n    return result", "prompt_tokens": 231, "completion_tokens": 90, "duration": 2.552250623703003}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    word = word.strip('aeiouAEIOU')\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiouAEIOU' and word[i-1] not in 'aeiouAEIOU' and word[i+1] not in 'aeiouAEIOU':\n            return word[i]\n    return \"\"", "prompt_tokens": 199, "completion_tokens": 91, "duration": 2.5176215171813965}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 1.9407877922058105}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 3.055605411529541}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.7772791385650635}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum([x for x in arr[:k] if 10 <= x <= 99])", "prompt_tokens": 178, "completion_tokens": 32, "duration": 1.7717721462249756}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz(number):\n        sequence = [number]\n        while number != 1:\n            if number % 2 == 0:\n                number = number // 2\n            else:\n                number = 3 * number + 1\n            sequence.append(number)\n        return sequence\n    \n    return sorted([num for num in collatz(n) if num % 2 != 0])", "prompt_tokens": 281, "completion_tokens": 92, "duration": 4.076055288314819}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    else:\n        return False", "prompt_tokens": 313, "completion_tokens": 215, "duration": 3.7567625045776367}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and ',' in txt:\n        return txt.split(',')\n    elif len(words) == 1:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)\n    return words", "prompt_tokens": 190, "completion_tokens": 71, "duration": 2.2049105167388916}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    sorted_lst = sorted(lst)\n    return sorted_lst == lst and all(lst.count(x) == 1 for x in lst)", "prompt_tokens": 299, "completion_tokens": 36, "duration": 1.8024358749389648}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"", "prompt_tokens": 304, "completion_tokens": 229, "duration": 5.645829200744629}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 172, "completion_tokens": 75, "duration": 3.720562219619751}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    coords = [(i, j) for i in range(n) for j in range(n)]\n    start = min(coords, key=lambda x: grid[x[0]][x[1]])\n    \n    result = [grid[start[0]][start[1]]]\n    visited = {start}\n    \n    def neighbors(coord):\n        i, j = coord\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < n and 0 <= y < n:\n                yield x, y\n    \n    def dfs(coord, path):\n        if len(path) == k:\n            return path\n        \n        options = [(grid[x][y], (x, y)) for x, y in neighbors(coord) if (x, y) not in visited]\n        next_coord = min(options, key=lambda x: (x[0], x[1]))\n        visited.add(next_coord[1])\n        return dfs(next_coord[1], path + [next_coord[0]])\n    \n    result += dfs(start, [])\n    \n    return result", "prompt_tokens": 446, "completion_tokens": 255, "duration": 6.364569902420044}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    return tribonacci[:n + 1]", "prompt_tokens": 285, "completion_tokens": 97, "duration": 4.120797872543335}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    result = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            result *= int(digit)\n    return result if result != 1 else 0", "prompt_tokens": 121, "completion_tokens": 48, "duration": 3.837491035461426}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return len(stack) < 2", "prompt_tokens": 183, "completion_tokens": 60, "duration": 3.512352705001831}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 27, "duration": 1.9102427959442139}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalnum()):\n        return True\n    return False", "prompt_tokens": 187, "completion_tokens": 61, "duration": 3.4040653705596924}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 3.150789976119995}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [i for i in lst if i < 0]\n    pos_integers = [i for i in lst if i > 0]\n\n    if neg_integers:\n        largest_neg = max(neg_integers)\n    else:\n        largest_neg = None\n\n    if pos_integers:\n        smallest_pos = min(pos_integers)\n    else:\n        smallest_pos = None\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 188, "completion_tokens": 105, "duration": 3.7794861793518066}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    if type(a) == type(b):\n        if type(a) == int:\n            return a if a > b else b\n        if type(a) == float:\n            return a if a > b else b\n        if type(a) == str:\n            a_num = float(a.replace(',', '.'))\n            b_num = float(b.replace(',', '.'))\n            return a if a_num > b_num else b\n    return None", "prompt_tokens": 191, "completion_tokens": 110, "duration": 3.922712802886963}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 8", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.988631248474121}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result *= fact\n    return result", "prompt_tokens": 145, "completion_tokens": 60, "duration": 3.3785932064056396}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s', '_', text)\n    return text", "prompt_tokens": 156, "completion_tokens": 44, "duration": 3.4061620235443115}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits = sum(c.isdigit() for c in file_name)\n    if digits > 3:\n        return 'No'\n    if len(file_name.split('.')) != 2:\n        return 'No'\n    file_parts = file_name.split('.')\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 114, "duration": 3.8633687496185303}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 46, "duration": 3.372175455093384}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 197, "completion_tokens": 94, "duration": 3.653421640396118}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x = eval(x)\n    n = eval(n)\n    result = x * n\n    return result.is_integer()", "prompt_tokens": 205, "completion_tokens": 35, "duration": 2.880377769470215}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 32, "duration": 3.0217134952545166}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count", "prompt_tokens": 169, "completion_tokens": 81, "duration": 3.58467435836792}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 94, "duration": 3.6346774101257324}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx < end_idx:\n        return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))\n    else:\n        return tuple(sorted(planets[end_idx+1:start_idx], key=lambda x: planets.index(x)))", "prompt_tokens": 261, "completion_tokens": 141, "duration": 5.014945030212402}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 2.9770419597625732}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y", "prompt_tokens": 136, "completion_tokens": 79, "duration": 3.811944007873535}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 3.2023122310638428}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 280, "completion_tokens": 39, "duration": 2.884338617324829}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda ext: strength(ext))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 71, "duration": 3.210055351257324}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in a+a", "prompt_tokens": 179, "completion_tokens": 32, "duration": 2.9795219898223877}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even, odd)", "prompt_tokens": 115, "completion_tokens": 67, "duration": 3.2516956329345703}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_dict.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 148, "duration": 4.1780805587768555}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 3.042013645172119}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_word = ''\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 170, "completion_tokens": 91, "duration": 4.059854030609131}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    left_over = max(0, remaining - need)\n    return [total_eaten, left_over]", "prompt_tokens": 327, "completion_tokens": 47, "duration": 2.9876708984375}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    exp = str(operands[0])\n    for i in range(len(operators)):\n        exp += operators[i] + str(operands[i+1])\n    return eval(exp)", "prompt_tokens": 257, "completion_tokens": 50, "duration": 2.725374698638916}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 2.5896873474121094}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 33, "duration": 2.833148717880249}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 154, "completion_tokens": 35, "duration": 2.814401388168335}
