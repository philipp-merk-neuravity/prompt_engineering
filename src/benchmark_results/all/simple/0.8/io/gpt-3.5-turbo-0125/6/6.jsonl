{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 174, "completion_tokens": 62, "duration": 2.7976646423339844}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    curr_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        curr_group += char\n        if count == 0:\n            result.append(curr_group.replace(\" \", \"\"))\n            curr_group = \"\"\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))", "prompt_tokens": 165, "completion_tokens": 119, "duration": 3.4806272983551025}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 135, "completion_tokens": 21, "duration": 2.212860107421875}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 169, "completion_tokens": 48, "duration": 2.5378990173339844}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_value) for x in numbers) / len(numbers)", "prompt_tokens": 167, "completion_tokens": 51, "duration": 2.7165980339050293}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result", "prompt_tokens": 142, "completion_tokens": 56, "duration": 2.492175340652466}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 162, "completion_tokens": 94, "duration": 3.0454235076904297}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 143, "completion_tokens": 35, "duration": 2.4297049045562744}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers) if numbers else 0\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result if numbers else 1", "prompt_tokens": 160, "completion_tokens": 70, "duration": 2.833749294281006}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    maximum = float('-inf')\n    for num in numbers:\n        maximum = max(maximum, num)\n        result.append(maximum)\n    return result", "prompt_tokens": 150, "completion_tokens": 57, "duration": 2.7302207946777344}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]", "prompt_tokens": 192, "completion_tokens": 75, "duration": 2.726510524749756}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 126, "completion_tokens": 39, "duration": 2.35003662109375}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=lambda x: (len(x), strings.index(x)))", "prompt_tokens": 152, "completion_tokens": 41, "duration": 2.3499767780303955}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 120, "completion_tokens": 39, "duration": 2.3226840496063232}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string)+1)]", "prompt_tokens": 109, "completion_tokens": 36, "duration": 2.2254698276519775}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 118, "completion_tokens": 27, "duration": 2.076751232147217}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 120, "completion_tokens": 23, "duration": 2.0118494033813477}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes_duration = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes_duration[note] for note in music_string.split()]", "prompt_tokens": 222, "completion_tokens": 55, "duration": 2.5253758430480957}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "prompt_tokens": 138, "completion_tokens": 74, "duration": 3.0100739002227783}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 155, "completion_tokens": 103, "duration": 2.9896304607391357}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair", "prompt_tokens": 216, "completion_tokens": 97, "duration": 2.94350266456604}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers", "prompt_tokens": 173, "completion_tokens": 60, "duration": 2.6343650817871094}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 141, "completion_tokens": 38, "duration": 2.064366579055786}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 93, "completion_tokens": 18, "duration": 1.960909366607666}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 102, "completion_tokens": 43, "duration": 2.1069836616516113}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    return factors", "prompt_tokens": 176, "completion_tokens": 70, "duration": 2.588345766067505}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return [x for x in numbers if numbers.count(x) == 1]", "prompt_tokens": 134, "completion_tokens": 33, "duration": 2.8694069385528564}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 98, "completion_tokens": 36, "duration": 2.062905788421631}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 107, "completion_tokens": 20, "duration": 2.036777973175049}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 137, "completion_tokens": 34, "duration": 2.1989991664886475}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 163, "completion_tokens": 25, "duration": 1.9271628856658936}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 149, "completion_tokens": 56, "duration": 3.7968993186950684}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    return -xs[0] / xs[1]", "prompt_tokens": 309, "completion_tokens": 23, "duration": 3.5886032581329346}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 200, "completion_tokens": 54, "duration": 3.893951177597046}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 123, "completion_tokens": 17, "duration": 1.7450690269470215}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 132, "completion_tokens": 16, "duration": 4.426605701446533}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count", "prompt_tokens": 129, "completion_tokens": 57, "duration": 2.11299467086792}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 173, "completion_tokens": 43, "duration": 2.1609535217285156}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 208, "completion_tokens": 162, "duration": 3.2791521549224854}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_prime(fib(i)):\n            count += 1\n    return fib(i)", "prompt_tokens": 147, "completion_tokens": 161, "duration": 3.82706618309021}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    return any(sum([x, y, z]) == 0 for x in l for y in l for z in l if x != y and x != z and y != z)\n\n# Testing the function\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False", "prompt_tokens": 209, "completion_tokens": 162, "duration": 5.433565855026245}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1)", "prompt_tokens": 201, "completion_tokens": 22, "duration": 1.8586571216583252}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x+1 for x in l]", "prompt_tokens": 158, "completion_tokens": 22, "duration": 3.3246071338653564}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 207, "completion_tokens": 52, "duration": 3.596453905105591}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 141, "completion_tokens": 56, "duration": 3.7610442638397217}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 96, "completion_tokens": 22, "duration": 1.8800220489501953}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(3, n+1):\n            a, b, c, d = b, c, d, a+b+c+d\n        return d", "prompt_tokens": 221, "completion_tokens": 107, "duration": 5.229100704193115}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    n = len(l)\n    sorted_list = sorted(l)\n    if n % 2 == 1:\n        return sorted_list[n//2]\n    else:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2", "prompt_tokens": 125, "completion_tokens": 67, "duration": 2.2749388217926025}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 121, "completion_tokens": 20, "duration": 3.3659098148345947}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 155, "completion_tokens": 25, "duration": 4.2988269329071045}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 140, "completion_tokens": 82, "duration": 5.135328769683838}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    return ''.join(char for char in text if char.lower() not in 'aeiouAEIOU')", "prompt_tokens": 172, "completion_tokens": 33, "duration": 3.5402615070343018}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 129, "completion_tokens": 26, "duration": 3.127307415008545}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 103, "completion_tokens": 15, "duration": 3.118804693222046}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 190, "completion_tokens": 28, "duration": 1.8222534656524658}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 102, "completion_tokens": 33, "duration": 2.9706172943115234}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 142, "completion_tokens": 68, "duration": 2.4290339946746826}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 137, "completion_tokens": 52, "duration": 3.3652920722961426}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 164, "completion_tokens": 29, "duration": 3.060009241104126}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 113, "completion_tokens": 50, "duration": 3.1844632625579834}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 144, "completion_tokens": 22, "duration": 2.99210524559021}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "prompt_tokens": 139, "completion_tokens": 71, "duration": 3.330037832260132}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i*xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]", "prompt_tokens": 158, "completion_tokens": 89, "duration": 3.7811594009399414}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 199, "completion_tokens": 72, "duration": 3.6016738414764404}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels or (i == len(s)-1 and s[i].lower() == 'y'):\n            count += 1\n    return count", "prompt_tokens": 176, "completion_tokens": 67, "duration": 5.112467527389526}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift] if shift else x_str[::-1]", "prompt_tokens": 132, "completion_tokens": 46, "duration": 3.202284097671509}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 162, "completion_tokens": 24, "duration": 3.0214335918426514}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 260, "completion_tokens": 39, "duration": 3.0084469318389893}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_even_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_even_index]", "prompt_tokens": 362, "completion_tokens": 71, "duration": 3.5992684364318848}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    for num in sorted(set(lst), reverse=True):\n        if num > 0 and lst.count(num) >= num:\n            return num\n    return -1", "prompt_tokens": 215, "completion_tokens": 42, "duration": 3.148451805114746}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result", "prompt_tokens": 174, "completion_tokens": 46, "duration": 3.2517032623291016}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 171, "completion_tokens": 92, "duration": 3.644789695739746}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.799905776977539}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 207, "completion_tokens": 52, "duration": 4.839936256408691}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 243, "completion_tokens": 43, "duration": 2.9753897190093994}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 6:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True", "prompt_tokens": 129, "completion_tokens": 52, "duration": 2.943239212036133}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(x ** (1/n))", "prompt_tokens": 192, "completion_tokens": 25, "duration": 2.9115052223205566}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (int(a ** (1/3)) ** 3 == a)", "prompt_tokens": 160, "completion_tokens": 33, "duration": 3.9218590259552}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 349, "completion_tokens": 62, "duration": 4.404141426086426}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    return 'db' + bin(decimal)[2:] + 'db'", "prompt_tokens": 189, "completion_tokens": 25, "duration": 2.729750156402588}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))", "prompt_tokens": 171, "completion_tokens": 60, "duration": 3.158189535140991}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 320, "completion_tokens": 276, "duration": 7.063144207000732}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 131, "completion_tokens": 97, "duration": 4.5727198123931885}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * 10 ** (n-1)\n    return count", "prompt_tokens": 94, "completion_tokens": 28, "duration": 2.6060221195220947}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(map(int, str(N))))[2:]", "prompt_tokens": 183, "completion_tokens": 21, "duration": 2.343865156173706}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 105, "completion_tokens": 38, "duration": 2.721256732940674}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 180, "completion_tokens": 26, "duration": 2.302663803100586}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 309, "completion_tokens": 68, "duration": 2.723024845123291}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 253, "completion_tokens": 57, "duration": 2.691967248916626}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char) - ord('a') + 2) * 2\n            encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 160, "completion_tokens": 80, "duration": 2.88478946685791}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        sorted_lst = sorted(set(lst))\n        if len(sorted_lst) < 2:\n            return None\n        else:\n            return sorted_lst[1]", "prompt_tokens": 174, "completion_tokens": 58, "duration": 2.3779349327087402}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences = [s.strip() for s in sentences if s]\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 157, "completion_tokens": 60, "duration": 2.422961711883545}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if x == y + z or y == x + z or z == x + y:\n        return all(isinstance(i, int) for i in [x, y, z])\n    else:\n        return False", "prompt_tokens": 185, "completion_tokens": 58, "duration": 2.48507022857666}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        \n        encoded_message += encoded_char\n    \n    return encoded_message", "prompt_tokens": 159, "completion_tokens": 102, "duration": 3.340773820877075}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum_of_digits(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    \n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 336, "completion_tokens": 126, "duration": 3.442659378051758}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 219, "completion_tokens": 49, "duration": 2.173826217651367}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes", "prompt_tokens": 195, "completion_tokens": 87, "duration": 2.8974900245666504}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)", "prompt_tokens": 148, "completion_tokens": 23, "duration": 1.9777700901031494}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 122, "completion_tokens": 40, "duration": 2.2164065837860107}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)", "prompt_tokens": 206, "completion_tokens": 45, "duration": 2.3729465007781982}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile", "prompt_tokens": 182, "completion_tokens": 35, "duration": 1.9230694770812988}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]", "prompt_tokens": 166, "completion_tokens": 25, "duration": 1.987436056137085}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    return max([i for i in range(x, y+1) if i % 2 == 0] + [-1])", "prompt_tokens": 144, "completion_tokens": 39, "duration": 2.0905027389526367}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    average = (n + m) // 2\n    return bin(round(average))\n\n# Test cases\nprint(rounded_avg(1, 5))   # \"0b11\"\nprint(rounded_avg(7, 5))   # -1\nprint(rounded_avg(10, 20)) # \"0b1111\"\nprint(rounded_avg(20, 33)) # \"0b11010\"", "prompt_tokens": 190, "completion_tokens": 111, "duration": 3.1544055938720703}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([i for i in x if all(int(digit) % 2 != 0 for digit in str(i))])", "prompt_tokens": 152, "completion_tokens": 33, "duration": 2.0834152698516846}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    one_to_nine = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [one_to_nine[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 326, "completion_tokens": 100, "duration": 2.936509370803833}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 174, "completion_tokens": 82, "duration": 2.458836317062378}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0)\n    odd_count = sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n    \n    return (even_count, odd_count)", "prompt_tokens": 261, "completion_tokens": 107, "duration": 3.2630953788757324}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 174, "completion_tokens": 49, "duration": 3.7111880779266357}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 349, "completion_tokens": 62, "duration": 2.2703919410705566}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= len(lst2) else \"NO\"", "prompt_tokens": 247, "completion_tokens": 44, "duration": 2.3298234939575195}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    words = test.split()\n    counts = Counter(words)\n    max_count = max(counts.values())\n    result = {key: value for key, value in counts.items() if value == max_count}\n    return result", "prompt_tokens": 201, "completion_tokens": 59, "duration": 2.469545841217041}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    res = ''.join([char for char in s if char not in c])\n    return res, res == res[::-1]", "prompt_tokens": 212, "completion_tokens": 38, "duration": 1.8853368759155273}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(len([c for c in s if int(c) % 2 != 0]), s.find(c)+1, c.find(c)+1, c.find(c)+1) for s in lst for c in s]", "prompt_tokens": 223, "completion_tokens": 76, "duration": 2.268704414367676}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 138, "completion_tokens": 60, "duration": 2.4474194049835205}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 373, "completion_tokens": 33, "duration": 2.0819077491760254}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 220, "completion_tokens": 28, "duration": 1.7516846656799316}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() not in 'aeiou')\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result", "prompt_tokens": 231, "completion_tokens": 69, "duration": 2.6020710468292236}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'\n\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 199, "completion_tokens": 97, "duration": 2.5434622764587402}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        count += s.count('(') - s.count(')')\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 218, "completion_tokens": 52, "duration": 2.535806894302368}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 267, "completion_tokens": 17, "duration": 1.4967091083526611}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 147, "completion_tokens": 38, "duration": 1.9526708126068115}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num < 100)", "prompt_tokens": 178, "completion_tokens": 31, "duration": 1.857252836227417}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(result)", "prompt_tokens": 281, "completion_tokens": 76, "duration": 5.3837127685546875}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    return True", "prompt_tokens": 313, "completion_tokens": 162, "duration": 3.2347562313079834}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 190, "completion_tokens": 60, "duration": 2.0840094089508057}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)", "prompt_tokens": 299, "completion_tokens": 44, "duration": 3.427788734436035}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 304, "completion_tokens": 158, "duration": 5.598130226135254}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign = 1\n    product = 1\n    for num in arr:\n        sign *= 1 if num >= 0 else -1\n        product *= abs(num)\n    return sign * product", "prompt_tokens": 172, "completion_tokens": 63, "duration": 2.2291653156280518}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    start = min(min(row) for row in grid)\n    path = [start]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = [[False for _ in range(n)] for _ in range(n)]\n\n    def dfs(i, j, length):\n        if length == k:\n            return True\n        visited[i][j] = True\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and not visited[ni][nj]:\n                path.append(grid[ni][nj])\n                if dfs(ni, nj, length + 1):\n                    return True\n                path.pop()\n        visited[i][j] = False\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == start:\n                if dfs(i, j, 1):\n                    return path", "prompt_tokens": 446, "completion_tokens": 232, "duration": 6.079097509384155}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n    return tribonacci", "prompt_tokens": 285, "completion_tokens": 92, "duration": 3.7986552715301514}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    odd_digits_product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            odd_digits_product *= int(digit)\n    return odd_digits_product if odd_digits_product != 1 else 0", "prompt_tokens": 121, "completion_tokens": 56, "duration": 3.624861240386963}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    opening_brackets = [i for i, char in enumerate(string) if char == '[']\n    closing_brackets = [i for i, char in enumerate(string) if char == ']']\n\n    for open_idx in opening_brackets:\n        for close_idx in closing_brackets:\n            if open_idx < close_idx:\n                return True\n\n    return False", "prompt_tokens": 183, "completion_tokens": 83, "duration": 4.0731377601623535}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x) ** 2 for x in lst])", "prompt_tokens": 207, "completion_tokens": 25, "duration": 2.9762799739837646}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')", "prompt_tokens": 187, "completion_tokens": 52, "duration": 3.393617868423462}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i-1\n    return largest_index", "prompt_tokens": 153, "completion_tokens": 52, "duration": 4.977057933807373}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    if not neg_integers:\n        max_neg = None\n    else:\n        max_neg = max(neg_integers)\n    if not pos_integers:\n        min_pos = None\n    else:\n        min_pos = min(pos_integers)\n    return (max_neg, min_pos)", "prompt_tokens": 188, "completion_tokens": 106, "duration": 4.17459774017334}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if type(a) in [int, float] and type(b) in [int, float]:\n            if float(a) > float(b):\n                return a\n            elif float(b) > float(a):\n                return b\n            else:\n                return None\n        else:\n            return a if type(a) in [int, float] else b", "prompt_tokens": 191, "completion_tokens": 118, "duration": 4.6617395877838135}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n % 8 == 0", "prompt_tokens": 127, "completion_tokens": 22, "duration": 2.962445020675659}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 145, "completion_tokens": 55, "duration": 3.352390766143799}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    return '_'.join([part if len(part) <= 2 else '-'.join(part) for part in text.split()])", "prompt_tokens": 156, "completion_tokens": 32, "duration": 2.917309522628784}
{"task_id": "HumanEval/141", "generated_code": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 264, "completion_tokens": 107, "duration": 3.7699930667877197}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x for i, x in enumerate(lst))", "prompt_tokens": 219, "completion_tokens": 48, "duration": 4.762684106826782}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    primes = [word for word in words if is_prime(len(word))]\n    return ' '.join(primes)", "prompt_tokens": 197, "completion_tokens": 92, "duration": 3.7408668994903564}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    num = x_num * n_num\n    denom = x_denom * n_denom\n\n    divisor = gcd(num, denom)\n\n    return denom // divisor == 1", "prompt_tokens": 205, "completion_tokens": 103, "duration": 5.503364324569702}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 165, "completion_tokens": 31, "duration": 3.0550220012664795}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 169, "completion_tokens": 45, "duration": 3.2234013080596924}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 215, "completion_tokens": 128, "duration": 4.150084018707275}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([p for p in planets if start_idx < planets.index(p) < end_idx])", "prompt_tokens": 261, "completion_tokens": 130, "duration": 4.322269916534424}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 237, "completion_tokens": 40, "duration": 3.134138822555542}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 136, "completion_tokens": 84, "duration": 3.4401278495788574}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x ** 2 for x in lst if x % 2 != 0 and x > 0 and isinstance(x, int))", "prompt_tokens": 187, "completion_tokens": 40, "duration": 2.8705642223358154}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) for s, g in zip(game, guess)]", "prompt_tokens": 280, "completion_tokens": 28, "duration": 2.8105995655059814}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 327, "completion_tokens": 67, "duration": 3.2418196201324463}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a + a", "prompt_tokens": 179, "completion_tokens": 28, "duration": 2.771232843399048}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = len([int(d) for d in str(abs(num)) if int(d) % 2 == 0])\n    odd_count = len([int(d) for d in str(abs(num)) if int(d) % 2 != 0])\n    return (even_count, odd_count)", "prompt_tokens": 115, "completion_tokens": 69, "duration": 3.1777777671813965}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_nums = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_nums.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 151, "completion_tokens": 148, "duration": 4.693658113479614}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 158, "completion_tokens": 52, "duration": 3.0454213619232178}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    return max(words, key=lambda x: (-len(set(x)), x))", "prompt_tokens": 170, "completion_tokens": 25, "duration": 2.661691427230835}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = min(need, number + remaining)\n    carrots_left = max(0, number + remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 327, "completion_tokens": 49, "duration": 2.9195146560668945}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 257, "completion_tokens": 48, "duration": 4.595996141433716}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return s.swapcase() if any(c.isalpha() for c in s) else s[::-1]", "prompt_tokens": 157, "completion_tokens": 30, "duration": 4.315485715866089}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 126, "completion_tokens": 36, "duration": 2.8827993869781494}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]", "prompt_tokens": 154, "completion_tokens": 44, "duration": 2.9588520526885986}
