{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 916, "completion_tokens": 424, "duration": 9.178951740264893}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 984, "completion_tokens": 547, "duration": 13.259531736373901}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 727, "completion_tokens": 273, "duration": 5.4959940910339355}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 998, "completion_tokens": 497, "duration": 10.779986381530762}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 945, "completion_tokens": 440, "duration": 8.061078310012817}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 873, "completion_tokens": 430, "duration": 9.969212055206299}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return depths\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))", "prompt_tokens": 1017, "completion_tokens": 579, "duration": 10.79591703414917}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 324, "duration": 8.178626775741577}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 919, "completion_tokens": 454, "duration": 10.530417442321777}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef sliding_window_min(nums: List[int], k: int) -> List[int]:\n    window = deque()\n    result = []\n    for i, num in enumerate(nums):\n        while window and nums[window[-1]] >= num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - k:\n            window.popleft()\n        if i >= k - 1:\n            result.append(nums[window[0]])\n    return result", "prompt_tokens": 1202, "completion_tokens": 806, "duration": 13.826824426651001}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 1036, "completion_tokens": 470, "duration": 10.814737319946289}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 847, "completion_tokens": 426, "duration": 13.92716646194458}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 846, "completion_tokens": 390, "duration": 7.497324466705322}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 905, "completion_tokens": 494, "duration": 10.621192693710327}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 761, "completion_tokens": 370, "duration": 9.484583854675293}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 751, "completion_tokens": 341, "duration": 7.55629301071167}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 807, "completion_tokens": 385, "duration": 9.305199384689331}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 970, "completion_tokens": 374, "duration": 8.285409927368164}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 865, "completion_tokens": 449, "duration": 10.017404556274414}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_nums)", "prompt_tokens": 820, "completion_tokens": 407, "duration": 8.88230013847351}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 907, "completion_tokens": 350, "duration": 7.200516939163208}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 1000, "completion_tokens": 495, "duration": 11.061678409576416}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 798, "completion_tokens": 342, "duration": 8.232870817184448}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 7.480393886566162}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 763, "completion_tokens": 397, "duration": 8.755241394042969}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 941, "completion_tokens": 449, "duration": 8.69547986984253}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 882, "completion_tokens": 461, "duration": 9.278802871704102}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 709, "completion_tokens": 343, "duration": 7.756532430648804}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 736, "completion_tokens": 331, "duration": 8.004029750823975}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 759, "completion_tokens": 305, "duration": 7.086413621902466}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 833, "completion_tokens": 327, "duration": 8.072574377059937}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 967, "completion_tokens": 520, "duration": 10.131953239440918}
{"task_id": "HumanEval/32", "generated_code": "def eval_poly_at_points(xs, points):\n    return [poly(xs, point) for point in points]", "prompt_tokens": 1154, "completion_tokens": 357, "duration": 7.612514495849609}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    for i, idx in enumerate(sorted_indices):\n        l[idx] = sorted_values[i]\n    return l", "prompt_tokens": 1033, "completion_tokens": 507, "duration": 12.209276914596558}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 722, "completion_tokens": 288, "duration": 7.305745601654053}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 716, "completion_tokens": 263, "duration": 6.429028511047363}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "prompt_tokens": 856, "completion_tokens": 442, "duration": 9.990436553955078}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices.pop(0)\n    return result", "prompt_tokens": 978, "completion_tokens": 497, "duration": 9.814725637435913}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 963, "completion_tokens": 504, "duration": 17.04714035987854}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        return all(num % i != 0 for i in range(2, int(num**0.5) + 1))\n\n    def is_fibonacci(num):\n        return (5*num*num + 4 == int((5*num*num + 4)**0.5)**2) or (5*num*num - 4 == int((5*num*num - 4)**0.5)**2)\n\n    def nth_prime(n):\n        primes = []\n        num = 2\n        while len(primes) < n:\n            if is_prime(num):\n                primes.append(num)\n            num += 1\n        return primes[-1]\n\n    def fibonacci_numbers_up_to_n(n):\n        a, b = 0, 1\n        fib_numbers = []\n        for _ in range(n):\n            fib_numbers.append(a)\n            a, b = b, a + b\n        return fib_numbers\n\n    fib_primes = []\n    num = 2\n    while len(fib_primes) < n:\n        if is_fibonacci(num) and is_prime(num):\n            fib_primes.append(num)\n        num += 1\n\n    return fib_primes[-1]", "prompt_tokens": 940, "completion_tokens": 702, "duration": 15.343274354934692}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1238, "completion_tokens": 718, "duration": 12.47801685333252}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 935, "completion_tokens": 354, "duration": 7.841434478759766}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 758, "completion_tokens": 260, "duration": 6.124856948852539}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1068, "completion_tokens": 486, "duration": 11.817989826202393}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 747, "completion_tokens": 306, "duration": 6.959062099456787}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 734, "completion_tokens": 359, "duration": 8.840559959411621}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    fib_nums = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2] + fib_nums[i-3] + fib_nums[i-4])\n    return fib_nums[n]", "prompt_tokens": 1003, "completion_tokens": 481, "duration": 10.29854941368103}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 786, "completion_tokens": 397, "duration": 8.244452238082886}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 712, "completion_tokens": 285, "duration": 9.756730794906616}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 891, "completion_tokens": 401, "duration": 7.40614128112793}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 828, "completion_tokens": 425, "duration": 8.444863080978394}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 888, "completion_tokens": 375, "duration": 7.336034774780273}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 757, "completion_tokens": 320, "duration": 7.435466766357422}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 625, "completion_tokens": 234, "duration": 4.707842826843262}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)", "prompt_tokens": 927, "completion_tokens": 370, "duration": 9.617951393127441}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 830, "completion_tokens": 458, "duration": 10.44505500793457}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 952, "completion_tokens": 529, "duration": 9.727195501327515}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 783, "completion_tokens": 362, "duration": 7.941157102584839}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 333, "duration": 7.62856388092041}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 915, "completion_tokens": 535, "duration": 8.945783853530884}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n * (n + 1) // 2", "prompt_tokens": 870, "completion_tokens": 403, "duration": 7.604878664016724}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 1084, "completion_tokens": 664, "duration": 18.815821647644043}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 883, "completion_tokens": 388, "duration": 8.980661153793335}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 957, "completion_tokens": 414, "duration": 9.547075986862183}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 873, "completion_tokens": 366, "duration": 10.279460906982422}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 764, "completion_tokens": 350, "duration": 6.842461347579956}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 843, "completion_tokens": 338, "duration": 9.811635494232178}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1058, "completion_tokens": 372, "duration": 15.655632495880127}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest:\n            smallest = num\n            smallest_index = i\n    if smallest_index != -1:\n        return [smallest, smallest_index]\n    else:\n        return []", "prompt_tokens": 1288, "completion_tokens": 439, "duration": 9.564327716827393}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, f in freq.items():\n        if num > 0 and f >= num:\n            return num\n    return -1", "prompt_tokens": 1032, "completion_tokens": 460, "duration": 9.548988580703735}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 823, "completion_tokens": 314, "duration": 7.6969358921051025}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 992, "completion_tokens": 537, "duration": 16.486559629440308}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1076, "completion_tokens": 339, "duration": 9.018469333648682}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 1041, "completion_tokens": 470, "duration": 9.17496633529663}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1098, "completion_tokens": 478, "duration": 12.842739820480347}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    factors = prime_factors(a)\n    unique_factors = set(factors)\n    return len(unique_factors) == 3", "prompt_tokens": 947, "completion_tokens": 519, "duration": 10.224879741668701}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    while x > 1:\n        if x % n != 0:\n            return False\n        x /= n\n    return x == 1", "prompt_tokens": 1040, "completion_tokens": 495, "duration": 11.750372886657715}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "prompt_tokens": 807, "completion_tokens": 307, "duration": 7.1163246631622314}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_hex_digit(digit):\n        primes = ['2', '3', '5', '7', 'B', 'D']\n        return digit in primes\n\n    count = 0\n    for digit in num:\n        if is_prime_hex_digit(digit):\n            count += 1\n\n    return count", "prompt_tokens": 1285, "completion_tokens": 458, "duration": 10.654321908950806}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 1015, "completion_tokens": 484, "duration": 9.316667079925537}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 984, "completion_tokens": 494, "duration": 12.946717739105225}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1188, "completion_tokens": 589, "duration": 14.496874809265137}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 924, "completion_tokens": 525, "duration": 11.576857805252075}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 846, "completion_tokens": 517, "duration": 12.59806203842163}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 910, "completion_tokens": 364, "duration": 9.281354904174805}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[1::2])", "prompt_tokens": 695, "completion_tokens": 297, "duration": 7.8084962368011475}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 939, "completion_tokens": 400, "duration": 7.371677398681641}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1129, "completion_tokens": 374, "duration": 9.027583599090576}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    return sorted_array", "prompt_tokens": 1199, "completion_tokens": 535, "duration": 12.440523147583008}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 2 * 2 - 97) % 26 + 97) for c in s)", "prompt_tokens": 854, "completion_tokens": 368, "duration": 6.534100532531738}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    lst.sort()\n    if len(lst) < 2 or lst[0] == lst[1]:\n        return None\n    return lst[1]", "prompt_tokens": 882, "completion_tokens": 371, "duration": 6.606012344360352}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split(r'[.!?]', S) if sentence.strip()]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 838, "completion_tokens": 367, "duration": 8.970700979232788}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y and all(isinstance(num, int) for num in [x, y, z])", "prompt_tokens": 893, "completion_tokens": 367, "duration": 7.314598798751831}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 908, "completion_tokens": 493, "duration": 10.189638376235962}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_sum(lst):\n        largest_prime = 0\n        for num in lst:\n            if is_prime(num) and num > largest_prime:\n                largest_prime = num\n        return sum(int(digit) for digit in str(largest_prime))\n\n    return largest_prime_sum(lst)", "prompt_tokens": 1263, "completion_tokens": 509, "duration": 12.335774898529053}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 911, "completion_tokens": 317, "duration": 7.465220928192139}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1069, "completion_tokens": 561, "duration": 11.174033880233765}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 798, "completion_tokens": 322, "duration": 8.128835678100586}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 795, "completion_tokens": 401, "duration": 7.364817380905151}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 969, "completion_tokens": 402, "duration": 10.189295530319214}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = []\n    stones.append(n)\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 954, "completion_tokens": 453, "duration": 10.068230390548706}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return [word.strip() for word in re.split(r'[,\\s]+', s) if word.strip()]", "prompt_tokens": 810, "completion_tokens": 305, "duration": 6.630367994308472}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 855, "completion_tokens": 417, "duration": 11.323486089706421}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)\n\n# Test cases\nprint(rounded_avg(1, 5))  # Output: 0b11\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: 0b1111\nprint(rounded_avg(20, 33))  # Output: 0b11010", "prompt_tokens": 1014, "completion_tokens": 557, "duration": 13.134214162826538}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 851, "completion_tokens": 379, "duration": 8.332652807235718}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [num_to_name[num] for num in filtered_sorted_arr]", "prompt_tokens": 1258, "completion_tokens": 520, "duration": 13.070193529129028}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 890, "completion_tokens": 425, "duration": 9.065324306488037}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 1085, "completion_tokens": 458, "duration": 8.570285081863403}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(num) if digit != '-') > 0 for num in arr)", "prompt_tokens": 923, "completion_tokens": 405, "duration": 11.43640398979187}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    sorted_arr = sorted(arr)\n    return arr == sorted_arr or arr == sorted_arr[-1:] + sorted_arr[:-1]", "prompt_tokens": 1246, "completion_tokens": 380, "duration": 8.00641417503357}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"", "prompt_tokens": 982, "completion_tokens": 319, "duration": 6.540403842926025}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for char in test.split():\n        counts[char] = counts.get(char, 0) + 1\n    max_count = max(counts.values(), default=0)\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 993, "completion_tokens": 454, "duration": 9.92938494682312}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1157, "completion_tokens": 565, "duration": 11.856987237930298}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s.index(s)} of the {s.index(s)}nput.\" for s in lst]", "prompt_tokens": 1053, "completion_tokens": 459, "duration": 10.547681331634521}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 1164, "completion_tokens": 738, "duration": 12.8630690574646}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                total_lowerings += math.ceil(1 / capacity)\n    return total_lowerings", "prompt_tokens": 1470, "completion_tokens": 575, "duration": 12.528999090194702}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 974, "completion_tokens": 357, "duration": 6.466946125030518}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 1003, "completion_tokens": 407, "duration": 7.668804883956909}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 939, "completion_tokens": 434, "duration": 9.019150257110596}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1452, "completion_tokens": 878, "duration": 18.73844051361084}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1101, "completion_tokens": 384, "duration": 6.945513963699341}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 964, "completion_tokens": 503, "duration": 9.434426546096802}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 927, "completion_tokens": 397, "duration": 7.00083327293396}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    collatz_seq = collatz_sequence(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])", "prompt_tokens": 1253, "completion_tokens": 588, "duration": 11.061145067214966}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1154, "completion_tokens": 501, "duration": 9.714747905731201}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 935, "completion_tokens": 410, "duration": 9.660913705825806}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    return all(lst[i] < lst[i+1] for i in range(len(lst)-1)) and len(set(lst)) == len(lst)", "prompt_tokens": 1178, "completion_tokens": 414, "duration": 8.055511474609375}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1239, "completion_tokens": 561, "duration": 10.877774000167847}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            product_sign *= -1\n            sum_magnitudes += abs(num)\n    return product_sign * sum_magnitudes", "prompt_tokens": 884, "completion_tokens": 424, "duration": 9.233821868896484}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                new_path = dfs(ni, nj, path + [grid[ni][nj]])\n                if new_path and (not min_path or new_path < min_path):\n                    min_path = new_path\n        \n        return min_path\n    \n    start_values = [(i, j) for i in range(n) for j in range(n)]\n    start_values.sort(key=lambda x: grid[x[0]][x[1]])\n    \n    for i, j in start_values:\n        path = dfs(i, j, [grid[i][j]])\n        if path:\n            return path", "prompt_tokens": 1859, "completion_tokens": 988, "duration": 20.37745189666748}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2])\n            else:\n                tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 1132, "completion_tokens": 499, "duration": 9.637957096099854}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else \\\n           1 if n == 0 else \\\n           eval('*'.join(digit for digit in str(n) if int(digit) % 2 != 0))", "prompt_tokens": 727, "completion_tokens": 347, "duration": 8.010513544082642}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 1085, "completion_tokens": 577, "duration": 10.097720623016357}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 1003, "completion_tokens": 410, "duration": 6.708895444869995}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip()[-1].isalpha() and (len(txt.strip()) == 1 or txt.strip()[-2] == ' ')", "prompt_tokens": 876, "completion_tokens": 341, "duration": 8.011666059494019}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 921, "completion_tokens": 463, "duration": 9.322508096694946}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_max = None\n    pos_min = None\n    for num in lst:\n        if num < 0 and (neg_max is None or num > neg_max):\n            neg_max = num\n        elif num > 0 and (pos_min is None or num < pos_min):\n            pos_min = num\n    return (neg_max, pos_min)", "prompt_tokens": 892, "completion_tokens": 398, "duration": 10.529946327209473}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 983, "completion_tokens": 467, "duration": 9.966104507446289}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        for j in range(i, n//2 + 1):\n            for k in range(j, n//2 + 1):\n                for l in range(k, n//2 + 1):\n                    if 2*i + 2*j + 2*k + 2*l == n:\n                        return True\n    return False", "prompt_tokens": 912, "completion_tokens": 550, "duration": 11.005089521408081}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)", "prompt_tokens": 846, "completion_tokens": 386, "duration": 7.223573207855225}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    while '--' in text:\n        text = text.replace('--', '-')\n    while '   ' in text:\n        text = text.replace('   ', '-')\n    return text", "prompt_tokens": 823, "completion_tokens": 360, "duration": 8.37845516204834}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1060, "completion_tokens": 432, "duration": 8.692360877990723}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([num**2 if i % 3 == 0 else num**3 if i % 4 == 0 else num for i, num in enumerate(lst)])", "prompt_tokens": 1004, "completion_tokens": 406, "duration": 10.235571384429932}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 988, "completion_tokens": 484, "duration": 12.422398328781128}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 1057, "completion_tokens": 511, "duration": 9.450687885284424}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "prompt_tokens": 869, "completion_tokens": 368, "duration": 10.195055723190308}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 877, "completion_tokens": 398, "duration": 10.946975469589233}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    def is_divisible_by_3(num):\n        return num % 3 == 0\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if is_divisible_by_3((i+1)*(i+1) - (i+1) + 1 + (j+1)*(j+1) - (j+1) + 1 + (k+1)*(k+1) - (k+1) + 1):\n                    count += 1\n    return count", "prompt_tokens": 1269, "completion_tokens": 775, "duration": 15.849844694137573}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planets[start_idx+1:end_idx])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 1045, "completion_tokens": 511, "duration": 13.215454578399658}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "prompt_tokens": 1058, "completion_tokens": 409, "duration": 8.550874948501587}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 885, "completion_tokens": 442, "duration": 11.165176153182983}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if num > 0 and num % 2 != 0)", "prompt_tokens": 874, "completion_tokens": 329, "duration": 9.465178489685059}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) for a, b in zip(game, guess)]", "prompt_tokens": 1071, "completion_tokens": 334, "duration": 9.80784821510315}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1194, "completion_tokens": 411, "duration": 11.852454662322998}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    concat = a + a\n    return b in concat or any(b[i:] + b[:i] in concat for i in range(len(b)))\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True", "prompt_tokens": 891, "completion_tokens": 475, "duration": 12.039071321487427}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 796, "completion_tokens": 435, "duration": 11.609654426574707}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_values = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_values.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 1010, "completion_tokens": 632, "duration": 13.305425882339478}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1031, "completion_tokens": 558, "duration": 15.961463689804077}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word", "prompt_tokens": 876, "completion_tokens": 422, "duration": 8.778539657592773}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 1225, "completion_tokens": 411, "duration": 11.7756667137146}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1078, "completion_tokens": 476, "duration": 9.904958724975586}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 898, "completion_tokens": 434, "duration": 9.085327863693237}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 831, "completion_tokens": 416, "duration": 12.213632583618164}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in str(range(a, b+1)) if int(digit) % 2 == 0]", "prompt_tokens": 846, "completion_tokens": 375, "duration": 8.064395904541016}
