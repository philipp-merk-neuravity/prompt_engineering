{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    return any(abs(a - b) < threshold for i, a in enumerate(numbers) for b in numbers[i+1:])", "prompt_tokens": 859, "completion_tokens": 344, "duration": 6.7661614418029785}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 967, "completion_tokens": 530, "duration": 15.105334997177124}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number % 1", "prompt_tokens": 728, "completion_tokens": 274, "duration": 8.740005493164062}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 943, "completion_tokens": 442, "duration": 10.088192224502563}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 940, "completion_tokens": 450, "duration": 10.26918888092041}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 809, "completion_tokens": 370, "duration": 8.994197845458984}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            current_depth -= 1\n    return depths", "prompt_tokens": 943, "completion_tokens": 487, "duration": 9.262028694152832}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 788, "completion_tokens": 323, "duration": 6.209629058837891}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 786, "completion_tokens": 324, "duration": 6.7236034870147705}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - len(window):\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 1062, "completion_tokens": 648, "duration": 14.445204019546509}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 939, "completion_tokens": 373, "duration": 8.622265815734863}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 822, "completion_tokens": 408, "duration": 8.965385913848877}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 860, "completion_tokens": 404, "duration": 7.9516003131866455}
{"task_id": "HumanEval/13", "generated_code": "def least_common_multiple(a, b):\n    return (a * b) // greatest_common_divisor(a, b)", "prompt_tokens": 785, "completion_tokens": 368, "duration": 7.196982145309448}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 736, "completion_tokens": 345, "duration": 6.634669780731201}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 727, "completion_tokens": 317, "duration": 7.626338243484497}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 803, "completion_tokens": 381, "duration": 9.33578610420227}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 944, "completion_tokens": 348, "duration": 8.464322566986084}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 792, "completion_tokens": 376, "duration": 8.973458051681519}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_words.index(x))\n    return ' '.join(numbers_list)", "prompt_tokens": 805, "completion_tokens": 366, "duration": 7.553398847579956}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 991, "completion_tokens": 437, "duration": 54.32442617416382}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 857, "completion_tokens": 352, "duration": 7.288936138153076}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 781, "completion_tokens": 325, "duration": 6.560946941375732}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 733, "completion_tokens": 360, "duration": 7.075205326080322}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 781, "completion_tokens": 421, "duration": 9.359874248504639}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 945, "completion_tokens": 467, "duration": 8.711045980453491}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 847, "completion_tokens": 419, "duration": 9.26999020576477}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 721, "completion_tokens": 351, "duration": 8.270588636398315}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 711, "completion_tokens": 306, "duration": 6.379777193069458}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 785, "completion_tokens": 331, "duration": 7.779138803482056}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 820, "completion_tokens": 314, "duration": 7.470870018005371}
{"task_id": "HumanEval/31", "generated_code": "def next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n", "prompt_tokens": 872, "completion_tokens": 398, "duration": 8.830093383789062}
{"task_id": "HumanEval/32", "generated_code": "def derivative(xs):\n    return [coeff * i for i, coeff in enumerate(xs)][1:]", "prompt_tokens": 1167, "completion_tokens": 368, "duration": 9.032200336456299}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    \n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    \n    return result", "prompt_tokens": 1052, "completion_tokens": 526, "duration": 12.38046908378601}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 727, "completion_tokens": 293, "duration": 8.509735107421875}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 722, "completion_tokens": 269, "duration": 5.975263833999634}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 785, "completion_tokens": 367, "duration": 8.386453628540039}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    result = l[:]\n    result[::2] = even_indices\n    return result", "prompt_tokens": 909, "completion_tokens": 398, "duration": 10.613773345947266}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 934, "completion_tokens": 475, "duration": 10.999959230422974}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef sum_prime_fib(limit):\n    total = 0\n    a, b = 0, 1\n    while a <= limit:\n        if is_prime(a):\n            total += a\n        a, b = b, a + b\n    return total\n\ndef prime_fib(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num <= 1:\n            return num\n        a, b = 0, 1\n        for _ in range(2, num + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n    return fib_num", "prompt_tokens": 912, "completion_tokens": 739, "duration": 13.242525815963745}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1141, "completion_tokens": 619, "duration": 12.745982885360718}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1098, "completion_tokens": 517, "duration": 13.327469825744629}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 794, "completion_tokens": 294, "duration": 7.73642373085022}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1175, "completion_tokens": 593, "duration": 13.40709924697876}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 749, "completion_tokens": 300, "duration": 7.7940895557403564}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(base, height):\n    return 0.5 * base * height", "prompt_tokens": 670, "completion_tokens": 295, "duration": 5.883538722991943}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1085, "completion_tokens": 544, "duration": 11.354465007781982}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 803, "completion_tokens": 416, "duration": 15.026350259780884}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 807, "completion_tokens": 380, "duration": 10.714165449142456}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 837, "completion_tokens": 347, "duration": 9.687406063079834}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 831, "completion_tokens": 428, "duration": 11.028450012207031}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 889, "completion_tokens": 376, "duration": 9.446176052093506}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 798, "completion_tokens": 370, "duration": 11.239821910858154}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 647, "completion_tokens": 256, "duration": 7.491303443908691}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 909, "completion_tokens": 350, "duration": 12.74646282196045}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 796, "completion_tokens": 422, "duration": 11.872685194015503}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 905, "completion_tokens": 479, "duration": 12.560348272323608}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 774, "completion_tokens": 353, "duration": 9.621437788009644}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 836, "completion_tokens": 328, "duration": 11.533229351043701}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 872, "completion_tokens": 491, "duration": 12.477256298065186}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 873, "completion_tokens": 395, "duration": 9.333668947219849}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 985, "completion_tokens": 561, "duration": 16.318524599075317}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [coef * exp for exp, coef in enumerate(xs)][1:]", "prompt_tokens": 887, "completion_tokens": 392, "duration": 10.074589252471924}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 927, "completion_tokens": 387, "duration": 8.596917152404785}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    return sum(1 for char in s if char in vowels)\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"Python\"))  # 1", "prompt_tokens": 909, "completion_tokens": 468, "duration": 12.230969667434692}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 905, "completion_tokens": 485, "duration": 11.822797775268555}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 809, "completion_tokens": 304, "duration": 10.526978969573975}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1066, "completion_tokens": 378, "duration": 9.66460919380188}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = float('inf')\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n    \n    if smallest_value == float('inf'):\n        return []\n    \n    return [smallest_value, smallest_index]", "prompt_tokens": 1397, "completion_tokens": 553, "duration": 14.913037538528442}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    for key, value in counts.items():\n        if value >= key and key > 0:\n            return key\n    return -1", "prompt_tokens": 979, "completion_tokens": 407, "duration": 11.763147354125977}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 859, "completion_tokens": 350, "duration": 8.29858136177063}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 859, "completion_tokens": 402, "duration": 10.960451364517212}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1150, "completion_tokens": 413, "duration": 11.550158739089966}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1249, "completion_tokens": 755, "duration": 20.71196985244751}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 1035, "completion_tokens": 432, "duration": 9.508127450942993}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    distinct_factors = set(factors)\n    return len(distinct_factors) == 3 and all(is_prime(f) for f in distinct_factors)\n\n# Test the function\nprint(is_multiply_prime(30))  # Output should be True", "prompt_tokens": 948, "completion_tokens": 696, "duration": 17.08432388305664}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and (x == 1 or n > 1 and (x == n or is_simple_power(x / n, n)))", "prompt_tokens": 960, "completion_tokens": 415, "duration": 11.35360336303711}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return (math.pow(a, 1/3)).is_integer()", "prompt_tokens": 819, "completion_tokens": 321, "duration": 7.803970098495483}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_digit(digit):\n        primes = ['2', '3', '5', '7', 'B', 'D']\n        return digit in primes\n\n    count = 0\n    for digit in num:\n        if is_prime_digit(digit):\n            count += 1\n    return count", "prompt_tokens": 1290, "completion_tokens": 461, "duration": 9.422757148742676}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 914, "completion_tokens": 360, "duration": 11.02873158454895}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 940, "completion_tokens": 469, "duration": 9.646650791168213}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1128, "completion_tokens": 548, "duration": 11.4237060546875}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 814, "completion_tokens": 416, "duration": 11.9489905834198}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 9 * (10 ** (n-1))\n    return count", "prompt_tokens": 756, "completion_tokens": 391, "duration": 11.140923500061035}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 972, "completion_tokens": 432, "duration": 13.37712812423706}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 726, "completion_tokens": 349, "duration": 12.217340230941772}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 962, "completion_tokens": 423, "duration": 11.120155096054077}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1128, "completion_tokens": 373, "duration": 9.891098022460938}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 1084, "completion_tokens": 425, "duration": 9.80131459236145}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        encrypted += chr(ord(char) + 2 * 2)\n    return encrypted", "prompt_tokens": 842, "completion_tokens": 353, "duration": 7.706111669540405}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) >= 2:\n        return sorted_lst[1]\n    return None", "prompt_tokens": 884, "completion_tokens": 370, "duration": 6.957075119018555}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))", "prompt_tokens": 804, "completion_tokens": 325, "duration": 6.317651033401489}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y and all(isinstance(num, int) for num in [x, y, z])", "prompt_tokens": 947, "completion_tokens": 421, "duration": 7.915583372116089}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isupper():\n            encoded_message += char.lower()\n        elif char.islower():\n            encoded_message += char.upper()\n        elif char in 'AEIOUaeiou':\n            encoded_message += chr(ord(char) + 2)\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 912, "completion_tokens": 471, "duration": 8.784626483917236}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits", "prompt_tokens": 1469, "completion_tokens": 730, "duration": 14.617971181869507}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 911, "completion_tokens": 317, "duration": 6.758204936981201}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1006, "completion_tokens": 498, "duration": 12.633675575256348}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 875, "completion_tokens": 403, "duration": 7.666052579879761}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.isupper() and char in ['A', 'E', 'I', 'O', 'U'])", "prompt_tokens": 825, "completion_tokens": 429, "duration": 9.311521291732788}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 >= 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n    else:\n        return int(round(num))", "prompt_tokens": 899, "completion_tokens": 339, "duration": 6.56868577003479}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 936, "completion_tokens": 432, "duration": 9.313121795654297}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 809, "completion_tokens": 293, "duration": 6.989581823348999}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 892, "completion_tokens": 454, "duration": 8.605248928070068}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 930, "completion_tokens": 393, "duration": 8.569350719451904}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 810, "completion_tokens": 338, "duration": 6.814929723739624}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[x-1] for x in reversed_arr]\n    return result", "prompt_tokens": 1166, "completion_tokens": 405, "duration": 9.093086242675781}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 855, "completion_tokens": 384, "duration": 6.6979498863220215}
{"task_id": "HumanEval/107", "generated_code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef even_odd_palindrome(n):\n    def is_even(num):\n        return num % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1078, "completion_tokens": 461, "duration": 8.517953872680664}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 892, "completion_tokens": 402, "duration": 9.10145616531372}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    max_val = max(arr)\n    while arr[-1] != max_val:\n        arr = [arr[-1]] + arr[:-1]\n    return True", "prompt_tokens": 1307, "completion_tokens": 457, "duration": 8.338785886764526}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 989, "completion_tokens": 331, "duration": 8.358693838119507}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values())\n    most_repeated_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return most_repeated_letters", "prompt_tokens": 999, "completion_tokens": 477, "duration": 8.613245010375977}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1653, "completion_tokens": 790, "duration": 17.706198692321777}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s.index(s)}ng {s.index(s)} of the {s.index(s)}nput.\" for s in lst]", "prompt_tokens": 1015, "completion_tokens": 427, "duration": 7.65900444984436}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 957, "completion_tokens": 536, "duration": 10.670667886734009}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1275, "completion_tokens": 361, "duration": 8.91949200630188}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 965, "completion_tokens": 348, "duration": 6.919994592666626}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1000, "completion_tokens": 415, "duration": 8.358472108840942}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 939, "completion_tokens": 434, "duration": 13.17607045173645}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(char)\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1155, "completion_tokens": 594, "duration": 10.002675771713257}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 1176, "completion_tokens": 457, "duration": 11.789476871490479}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 979, "completion_tokens": 518, "duration": 11.113660097122192}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= abs(num) <= 99)", "prompt_tokens": 988, "completion_tokens": 460, "duration": 11.06590485572815}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 1288, "completion_tokens": 606, "duration": 10.341830492019653}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1157, "completion_tokens": 557, "duration": 10.499253511428833}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 882, "completion_tokens": 357, "duration": 7.283640146255493}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = {}\n    for num in lst:\n        if num in seen:\n            return False\n        seen[num] = True\n    return lst == sorted(lst)", "prompt_tokens": 1086, "completion_tokens": 326, "duration": 7.91874885559082}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1239, "completion_tokens": 506, "duration": 12.023771524429321}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 1010, "completion_tokens": 532, "duration": 12.901190280914307}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < n:\n                new_path = dfs(new_x, new_y, path + [grid[new_x][new_y]])\n                if not min_path or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    return dfs(0, 0, [grid[0][0]])", "prompt_tokens": 1894, "completion_tokens": 971, "duration": 17.978477239608765}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n        return trib", "prompt_tokens": 1119, "completion_tokens": 455, "duration": 27.910820245742798}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 769, "completion_tokens": 385, "duration": 8.36052393913269}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 920, "completion_tokens": 405, "duration": 10.722133874893188}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum((int(num) + 1) ** 2 for num in lst)", "prompt_tokens": 1116, "completion_tokens": 522, "duration": 15.359183311462402}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 867, "completion_tokens": 328, "duration": 8.168320178985596}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1", "prompt_tokens": 960, "completion_tokens": 492, "duration": 12.02388596534729}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 850, "completion_tokens": 359, "duration": 9.113691329956055}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return max(a, b)\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    return a if a > b else (b if b > a else None)", "prompt_tokens": 936, "completion_tokens": 425, "duration": 14.157562971115112}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for a in range(1, n//2 + 1, 2):\n        for b in range(1, n//2 + 1, 2):\n            for c in range(1, n//2 + 1, 2):\n                d = n - a - b - c\n                if d % 2 == 0 and d >= 2:\n                    return True\n    return False", "prompt_tokens": 840, "completion_tokens": 481, "duration": 12.432887315750122}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 862, "completion_tokens": 405, "duration": 12.066710472106934}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.append('_')\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.append('_')\n    return ''.join(result)\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 834, "completion_tokens": 508, "duration": 18.288263082504272}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1053, "completion_tokens": 420, "duration": 10.482730627059937}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([num**2 if i % 3 == 0 else num**3 if i % 4 == 0 else num for i, num in enumerate(lst)])", "prompt_tokens": 942, "completion_tokens": 344, "duration": 10.024077892303467}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 1141, "completion_tokens": 632, "duration": 15.457255125045776}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1 and result.numerator % result.denominator == 0", "prompt_tokens": 1047, "completion_tokens": 477, "duration": 13.246365070343018}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 885, "completion_tokens": 381, "duration": 9.060274362564087}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 882, "completion_tokens": 406, "duration": 12.219136476516724}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1176, "completion_tokens": 641, "duration": 12.857382535934448}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 1005, "completion_tokens": 411, "duration": 13.822035312652588}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1174, "completion_tokens": 535, "duration": 16.342133283615112}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 861, "completion_tokens": 418, "duration": 13.388264179229736}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 881, "completion_tokens": 341, "duration": 16.01000428199768}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(s - g) if s != g else 0 for s, g in zip(game, guess)]", "prompt_tokens": 1084, "completion_tokens": 354, "duration": 10.446581363677979}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return extension.count('A') + extension.count('B') + extension.count('C') - extension.count('a') - extension.count('b') - extension.count('c')\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1207, "completion_tokens": 434, "duration": 11.850486516952515}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in a + a", "prompt_tokens": 900, "completion_tokens": 370, "duration": 9.81385850906372}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count", "prompt_tokens": 781, "completion_tokens": 426, "duration": 11.289180040359497}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 976, "completion_tokens": 598, "duration": 16.05205464363098}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 898, "completion_tokens": 429, "duration": 12.070045471191406}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    \n    max_unique_chars = 0\n    max_word = ''\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 949, "completion_tokens": 497, "duration": 14.348116397857666}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    left = max(0, remaining - need)\n    return [total_eaten, left]", "prompt_tokens": 1116, "completion_tokens": 298, "duration": 8.845672369003296}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1068, "completion_tokens": 466, "duration": 10.688254356384277}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(char.swapcase() if char.isalpha() else char for char in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 876, "completion_tokens": 404, "duration": 10.062185049057007}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 794, "completion_tokens": 370, "duration": 11.519269227981567}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 887, "completion_tokens": 409, "duration": 8.380449295043945}
