{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 964, "completion_tokens": 464, "duration": 9.462093114852905}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n\n    return result", "prompt_tokens": 969, "completion_tokens": 536, "duration": 30.5749089717865}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 743, "completion_tokens": 289, "duration": 9.330772638320923}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 907, "completion_tokens": 406, "duration": 8.154399871826172}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 977, "completion_tokens": 487, "duration": 12.391391277313232}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 871, "completion_tokens": 428, "duration": 9.226348161697388}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return depths", "prompt_tokens": 1011, "completion_tokens": 555, "duration": 10.51802945137024}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 786, "completion_tokens": 321, "duration": 8.469655513763428}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 773, "completion_tokens": 311, "duration": 6.654125213623047}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    window = deque()\n    result = []\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - len(window):\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 1237, "completion_tokens": 831, "duration": 13.794255018234253}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 1310, "completion_tokens": 497, "duration": 12.479693412780762}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 848, "completion_tokens": 427, "duration": 8.996215581893921}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 846, "completion_tokens": 391, "duration": 8.060575723648071}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 820, "completion_tokens": 414, "duration": 8.819750308990479}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 736, "completion_tokens": 345, "duration": 6.619037389755249}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 721, "completion_tokens": 310, "duration": 6.4694318771362305}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 824, "completion_tokens": 402, "duration": 7.91051983833313}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 943, "completion_tokens": 347, "duration": 7.061183929443359}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)", "prompt_tokens": 811, "completion_tokens": 382, "duration": 7.867648601531982}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = numbers.split()\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(number_words, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 836, "completion_tokens": 430, "duration": 8.174818515777588}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 1059, "completion_tokens": 505, "duration": 10.360598087310791}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 834, "completion_tokens": 329, "duration": 9.380683898925781}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [num for num in values if isinstance(num, int)]", "prompt_tokens": 763, "completion_tokens": 314, "duration": 6.734423398971558}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 11.588953971862793}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 771, "completion_tokens": 405, "duration": 8.06897497177124}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 943, "completion_tokens": 465, "duration": 11.206131935119629}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 752, "completion_tokens": 324, "duration": 6.78249716758728}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 709, "completion_tokens": 343, "duration": 9.765432119369507}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 730, "completion_tokens": 325, "duration": 8.253865242004395}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 778, "completion_tokens": 324, "duration": 6.463323354721069}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 822, "completion_tokens": 314, "duration": 7.335822820663452}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 940, "completion_tokens": 493, "duration": 9.070113182067871}
{"task_id": "HumanEval/32", "generated_code": "def poly_derivative(xs: list):\n    return [i * coeff for i, coeff in enumerate(xs)][1:]", "prompt_tokens": 1128, "completion_tokens": 332, "duration": 6.938990116119385}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    for i, val in zip(sorted_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 1018, "completion_tokens": 503, "duration": 10.367822170257568}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 729, "completion_tokens": 295, "duration": 6.728233814239502}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 726, "completion_tokens": 273, "duration": 5.950749397277832}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(1, n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 859, "completion_tokens": 444, "duration": 7.972398996353149}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result", "prompt_tokens": 1002, "completion_tokens": 520, "duration": 11.122413158416748}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 965, "completion_tokens": 506, "duration": 10.38059663772583}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            count += 1\n    return fib_num", "prompt_tokens": 928, "completion_tokens": 579, "duration": 13.669310331344604}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l)-2):\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1192, "completion_tokens": 660, "duration": 12.974912166595459}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1084, "completion_tokens": 503, "duration": 11.767670154571533}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 771, "completion_tokens": 273, "duration": 6.254075527191162}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1220, "completion_tokens": 638, "duration": 11.510786294937134}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 762, "completion_tokens": 313, "duration": 9.51738715171814}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 740, "completion_tokens": 365, "duration": 9.83933162689209}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1114, "completion_tokens": 573, "duration": 13.58362889289856}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 906, "completion_tokens": 519, "duration": 12.67009162902832}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 792, "completion_tokens": 365, "duration": 11.109273433685303}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n >> 1\n        base = (base * base) % p\n    return result", "prompt_tokens": 920, "completion_tokens": 480, "duration": 11.351646423339844}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 809, "completion_tokens": 406, "duration": 8.58720850944519}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 875, "completion_tokens": 362, "duration": 9.541987895965576}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 794, "completion_tokens": 366, "duration": 9.234135866165161}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 647, "completion_tokens": 252, "duration": 9.018497467041016}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 939, "completion_tokens": 378, "duration": 8.945436716079712}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 801, "completion_tokens": 429, "duration": 7.493316411972046}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "prompt_tokens": 956, "completion_tokens": 529, "duration": 13.953203439712524}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 806, "completion_tokens": 385, "duration": 12.681394577026367}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 840, "completion_tokens": 332, "duration": 11.789900541305542}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n            i += 1\n    return n", "prompt_tokens": 849, "completion_tokens": 469, "duration": 16.360320568084717}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 862, "completion_tokens": 391, "duration": 9.713096857070923}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif not stack or stack.pop() != '(':\n            return False\n    return not stack", "prompt_tokens": 933, "completion_tokens": 509, "duration": 15.103783130645752}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 833, "completion_tokens": 338, "duration": 9.692303657531738}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 978, "completion_tokens": 472, "duration": 10.298217296600342}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 844, "completion_tokens": 337, "duration": 9.873359441757202}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    return str(x)[len(str(x))-shift:] + str(x)[:len(str(x))-shift] if shift <= len(str(x)) else str(x)[::-1]", "prompt_tokens": 828, "completion_tokens": 405, "duration": 12.41531252861023}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 811, "completion_tokens": 306, "duration": 10.9541175365448}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0]) if fruits[0].isdigit() else 0\n    oranges = int(fruits[3]) if fruits[3].isdigit() else 0\n    return n - apples - oranges", "prompt_tokens": 1068, "completion_tokens": 408, "duration": 11.291526556015015}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest = float('inf')\n    smallest_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n    if smallest_index == -1:\n        return []\n    return [smallest, smallest_index]", "prompt_tokens": 1323, "completion_tokens": 475, "duration": 14.027826309204102}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    for key, value in counts.items():\n        if value >= key and key > 0:\n            return key\n    return -1", "prompt_tokens": 988, "completion_tokens": 416, "duration": 8.869243144989014}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 920, "completion_tokens": 411, "duration": 8.360835075378418}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 950, "completion_tokens": 493, "duration": 11.45632028579712}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1144, "completion_tokens": 407, "duration": 10.723241329193115}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1347, "completion_tokens": 853, "duration": 16.99716830253601}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 997, "completion_tokens": 377, "duration": 10.195909261703491}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def prime_factors(n):\n        factors = []\n        i = 2\n        while i <= n:\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n            else:\n                i += 1\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 895, "completion_tokens": 513, "duration": 12.650113105773926}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return (x > 0) and (n > 0) and (x == n ** int(round(math.log(x, n))))", "prompt_tokens": 876, "completion_tokens": 328, "duration": 8.508650302886963}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 891, "completion_tokens": 397, "duration": 9.568163394927979}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 1251, "completion_tokens": 408, "duration": 13.433823108673096}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 895, "completion_tokens": 360, "duration": 8.509695053100586}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "prompt_tokens": 902, "completion_tokens": 435, "duration": 11.037381649017334}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1131, "completion_tokens": 532, "duration": 14.263977527618408}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 869, "completion_tokens": 472, "duration": 10.961883544921875}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    total_numbers = 9 * 10**(n-1)\n    not_start_end_one = 8 * 9**(n-1)\n    return total_numbers - not_start_end_one", "prompt_tokens": 812, "completion_tokens": 469, "duration": 12.027094841003418}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 921, "completion_tokens": 375, "duration": 8.158751964569092}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if num % 2 == 0 and i % 2 != 0)", "prompt_tokens": 719, "completion_tokens": 341, "duration": 8.139749765396118}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 899, "completion_tokens": 360, "duration": 7.460765600204468}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 1145, "completion_tokens": 387, "duration": 9.16596531867981}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = sorted(array)\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "prompt_tokens": 1011, "completion_tokens": 352, "duration": 9.530617237091064}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(ord(c) + 2*2) for c in s)", "prompt_tokens": 828, "completion_tokens": 330, "duration": 7.31183648109436}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 877, "completion_tokens": 376, "duration": 11.520694971084595}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1", "prompt_tokens": 841, "completion_tokens": 411, "duration": 9.481466054916382}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 883, "completion_tokens": 359, "duration": 10.377854347229004}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiou'\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char.lower()) + 2 - ord('a')) % 26 + ord('a')).upper()\n            else:\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 921, "completion_tokens": 506, "duration": 14.100356101989746}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_sum(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    \n    largest_prime = max(prime_numbers)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1562, "completion_tokens": 799, "duration": 17.030892372131348}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict if isinstance(key, str))\n    uppercase_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 915, "completion_tokens": 337, "duration": 6.7171618938446045}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1034, "completion_tokens": 525, "duration": 15.006486177444458}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 803, "completion_tokens": 327, "duration": 8.189291000366211}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if char.isupper() and i % 2 == 0)", "prompt_tokens": 760, "completion_tokens": 347, "duration": 7.672500371932983}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 948, "completion_tokens": 381, "duration": 9.135499238967896}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + 2*i)\n        else:\n            stones.append(n + 2*i + 1)\n    return stones", "prompt_tokens": 941, "completion_tokens": 437, "duration": 11.555875301361084}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 813, "completion_tokens": 297, "duration": 6.113076686859131}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > largest:\n            largest = num\n    return largest", "prompt_tokens": 851, "completion_tokens": 409, "duration": 10.95331072807312}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 991, "completion_tokens": 454, "duration": 11.450409889221191}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 846, "completion_tokens": 374, "duration": 8.943680047988892}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 1193, "completion_tokens": 468, "duration": 13.628652095794678}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return num * (num + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 881, "completion_tokens": 436, "duration": 11.489748239517212}
{"task_id": "HumanEval/107", "generated_code": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1091, "completion_tokens": 462, "duration": 8.533263683319092}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(num) if digit.isdigit() or digit == '-') > 0 for num in arr)", "prompt_tokens": 1430, "completion_tokens": 916, "duration": 17.809951305389404}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return any(arr[-i:] + arr[:-i] == sorted_arr for i in range(len(arr)))\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 1257, "completion_tokens": 452, "duration": 11.96814775466919}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0) else \"NO\"", "prompt_tokens": 972, "completion_tokens": 330, "duration": 7.78710412979126}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values())\n    result = {key: value for key, value in letter_count.items() if value == max_count}\n    return result", "prompt_tokens": 990, "completion_tokens": 457, "duration": 10.30124831199646}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1405, "completion_tokens": 813, "duration": 18.2303569316864}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{i}ng {i} of the {i}nput.\" for i, s in enumerate(lst)]", "prompt_tokens": 1065, "completion_tokens": 474, "duration": 10.722780466079712}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 970, "completion_tokens": 549, "duration": 13.369964122772217}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_operations = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                total_operations += math.ceil(well / capacity)\n    return total_operations", "prompt_tokens": 1438, "completion_tokens": 544, "duration": 13.607138395309448}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 977, "completion_tokens": 360, "duration": 7.1270976066589355}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1008, "completion_tokens": 423, "duration": 10.92848539352417}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 932, "completion_tokens": 427, "duration": 10.385752201080322}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1097, "completion_tokens": 518, "duration": 10.049557209014893}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1089, "completion_tokens": 372, "duration": 10.241609811782837}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1012, "completion_tokens": 551, "duration": 11.68191146850586}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 927, "completion_tokens": 397, "duration": 7.722097158432007}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(num):\n        seq = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num = num // 2\n            else:\n                num = 3 * num + 1\n            seq.append(num)\n        return seq\n\n    sequence = collatz_sequence(n)\n    odd_numbers = sorted(list(set(sequence) - set([x for x in sequence if x % 2 == 0 and x != 1 and x != n and x != 0])))\n    return odd_numbers", "prompt_tokens": 1241, "completion_tokens": 599, "duration": 13.228490352630615}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n    \n    if day < 1 or day > max_days:\n        return False\n    \n    return True", "prompt_tokens": 1143, "completion_tokens": 493, "duration": 11.272858619689941}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 917, "completion_tokens": 392, "duration": 8.1632661819458}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False", "prompt_tokens": 1184, "completion_tokens": 611, "duration": 14.728463888168335}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1374, "completion_tokens": 691, "duration": 14.782537698745728}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n    return sum(abs(num) for num in arr) * product", "prompt_tokens": 869, "completion_tokens": 391, "duration": 8.45752763748169}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in path:\n                new_path = dfs(nx, ny, path + [(nx, ny)])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        \n        return min_path\n    \n    start = (0, 0)\n    start_path = [(0, 0)]\n    return [grid[x][y] for x, y in dfs(0, 0, start_path)]\n\n# Example usage\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))", "prompt_tokens": 1880, "completion_tokens": 1050, "duration": 23.833123683929443}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1, 3]\n    result = [0, 1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            result.append(1 + i // 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    return result", "prompt_tokens": 1163, "completion_tokens": 499, "duration": 11.358675479888916}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 799, "completion_tokens": 424, "duration": 8.971919775009155}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 1041, "completion_tokens": 526, "duration": 15.73637056350708}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num) ** 2 for num in lst])", "prompt_tokens": 976, "completion_tokens": 386, "duration": 10.277000427246094}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    return txt.strip() and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())", "prompt_tokens": 878, "completion_tokens": 343, "duration": 8.887924909591675}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 781, "completion_tokens": 323, "duration": 8.526676177978516}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 866, "completion_tokens": 375, "duration": 11.098948001861572}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b", "prompt_tokens": 911, "completion_tokens": 362, "duration": 7.7693400382995605}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for a in range(2, n//2 + 1, 2):\n        for b in range(2, n//2 + 1, 2):\n            for c in range(2, n//2 + 1, 2):\n                d = n - a - b - c\n                if d >= 2 and d % 2 == 0:\n                    return True\n    return False", "prompt_tokens": 886, "completion_tokens": 527, "duration": 13.773784399032593}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 893, "completion_tokens": 442, "duration": 10.51090121269226}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result.append('-')\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.append('_')\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.append('_')\n    return ''.join(result)", "prompt_tokens": 823, "completion_tokens": 432, "duration": 8.138433933258057}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1055, "completion_tokens": 417, "duration": 8.67621111869812}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1112, "completion_tokens": 535, "duration": 10.817932367324829}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 1208, "completion_tokens": 703, "duration": 13.78428053855896}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    gcd = math.gcd(result_num, result_den)\n    return result_num % result_den == 0", "prompt_tokens": 1007, "completion_tokens": 473, "duration": 9.63845705986023}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 847, "completion_tokens": 343, "duration": 6.619909763336182}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return n % 2 != 0\n\n    def has_odd_first_last(num):\n        num_str = str(abs(num))\n        return is_odd(int(num_str[0])) and is_odd(int(num_str[-1]))\n\n    return sum(1 for num in nums if num > 10 and has_odd_first_last(num))", "prompt_tokens": 893, "completion_tokens": 431, "duration": 12.234611988067627}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1246, "completion_tokens": 714, "duration": 14.274871110916138}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(sorted(planets[start_idx+1:end_idx], key=planets.index))", "prompt_tokens": 1025, "completion_tokens": 423, "duration": 9.294857263565063}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1084, "completion_tokens": 444, "duration": 12.571879863739014}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 868, "completion_tokens": 425, "duration": 10.392311573028564}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 884, "completion_tokens": 344, "duration": 9.69983720779419}
{"task_id": "HumanEval/152", "generated_code": "def compare(scores, guesses):\n    return [abs(s - g) if s != g else 0 for s, g in zip(scores, guesses)]", "prompt_tokens": 1079, "completion_tokens": 349, "duration": 8.111016750335693}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_extension = ''\n    for ext in extensions:\n        cap_count = sum(1 for char in ext if char.isupper())\n        sm_count = sum(1 for char in ext if char.islower())\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 1211, "completion_tokens": 456, "duration": 12.369082927703857}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 901, "completion_tokens": 359, "duration": 7.265662431716919}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for d in str(abs(num)) if int(d) % 2 == 0)\n    odd_count = sum(1 for d in str(abs(num)) if int(d) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 790, "completion_tokens": 424, "duration": 10.167288303375244}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 943, "completion_tokens": 570, "duration": 10.145025253295898}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 917, "completion_tokens": 444, "duration": 8.588279247283936}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 932, "completion_tokens": 479, "duration": 13.733166456222534}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total = number + need\n    remaining -= total\n    if remaining < 0:\n        remaining = 0\n    return [total, remaining]", "prompt_tokens": 1175, "completion_tokens": 360, "duration": 9.097260475158691}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += operators[i] + str(operands[i+1])\n    return eval(expression)", "prompt_tokens": 1090, "completion_tokens": 421, "duration": 12.37640643119812}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 871, "completion_tokens": 434, "duration": 10.416234731674194}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 782, "completion_tokens": 358, "duration": 9.5182626247406}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in range(a, b+1) if any(int(d) % 2 == 0 for d in str(digit))]", "prompt_tokens": 824, "completion_tokens": 358, "duration": 11.628868579864502}
