{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 963, "completion_tokens": 463, "duration": 8.695171356201172}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 950, "completion_tokens": 517, "duration": 11.96684193611145}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 742, "completion_tokens": 288, "duration": 8.069600343704224}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 976, "completion_tokens": 486, "duration": 8.721312284469604}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 951, "completion_tokens": 461, "duration": 10.912891864776611}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 829, "completion_tokens": 386, "duration": 9.17829442024231}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 967, "completion_tokens": 532, "duration": 9.661861181259155}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 788, "completion_tokens": 323, "duration": 10.29585313796997}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 777, "completion_tokens": 312, "duration": 8.663530588150024}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        if i - window[0] >= k:\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 984, "completion_tokens": 569, "duration": 10.470685005187988}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 1258, "completion_tokens": 445, "duration": 12.121880292892456}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 809, "completion_tokens": 388, "duration": 14.658034801483154}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 851, "completion_tokens": 389, "duration": 8.727300643920898}
{"task_id": "HumanEval/13", "generated_code": "from math import gcd\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return gcd(a, b)", "prompt_tokens": 817, "completion_tokens": 404, "duration": 7.4541099071502686}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 808, "completion_tokens": 417, "duration": 8.975167274475098}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 761, "completion_tokens": 351, "duration": 8.24213981628418}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 840, "completion_tokens": 418, "duration": 9.127140998840332}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 951, "completion_tokens": 355, "duration": 6.950419902801514}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 856, "completion_tokens": 435, "duration": 8.303230047225952}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_words.index(x))\n    return ' '.join(numbers_list)", "prompt_tokens": 802, "completion_tokens": 368, "duration": 8.015960931777954}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result", "prompt_tokens": 1060, "completion_tokens": 506, "duration": 11.990689277648926}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [((x - min_val) / (max_val - min_val)) for x in numbers]", "prompt_tokens": 965, "completion_tokens": 461, "duration": 8.541786670684814}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 803, "completion_tokens": 354, "duration": 8.773927927017212}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 743, "completion_tokens": 370, "duration": 9.286116600036621}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 772, "completion_tokens": 406, "duration": 8.945216655731201}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 962, "completion_tokens": 484, "duration": 9.379265069961548}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 811, "completion_tokens": 367, "duration": 8.224508285522461}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 723, "completion_tokens": 357, "duration": 8.857849597930908}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 763, "completion_tokens": 358, "duration": 7.9486916065216064}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 772, "completion_tokens": 318, "duration": 7.327319622039795}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 823, "completion_tokens": 317, "duration": 6.4903786182403564}
{"task_id": "HumanEval/31", "generated_code": "def nth_prime(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if num % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        num += 1\n    return primes[-1]", "prompt_tokens": 982, "completion_tokens": 559, "duration": 12.74502182006836}
{"task_id": "HumanEval/32", "generated_code": "def integral(xs: list):\n    return [coeff / (i + 1) for i, coeff in enumerate(xs)]", "prompt_tokens": 1137, "completion_tokens": 343, "duration": 8.582707643508911}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1049, "completion_tokens": 484, "duration": 10.621748685836792}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 727, "completion_tokens": 293, "duration": 6.002729654312134}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 6.577463865280151}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 827, "completion_tokens": 409, "duration": 7.927764892578125}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted(l[::2])\n    sorted_list = l.copy()\n    sorted_list[::2] = even_indices\n    return sorted_list", "prompt_tokens": 931, "completion_tokens": 419, "duration": 7.86345911026001}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 930, "completion_tokens": 471, "duration": 9.772949695587158}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\ndef prime_fib(n):\n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n    return fibonacci(i - 1)", "prompt_tokens": 933, "completion_tokens": 581, "duration": 11.806706190109253}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1204, "completion_tokens": 683, "duration": 13.425623655319214}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 1077, "completion_tokens": 496, "duration": 11.118593454360962}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 773, "completion_tokens": 275, "duration": 7.430182695388794}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1085, "completion_tokens": 508, "duration": 12.046350479125977}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 756, "completion_tokens": 315, "duration": 6.74350643157959}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 812, "completion_tokens": 437, "duration": 9.312976121902466}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]", "prompt_tokens": 1105, "completion_tokens": 528, "duration": 13.353855848312378}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 787, "completion_tokens": 393, "duration": 9.168026208877563}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 737, "completion_tokens": 310, "duration": 6.2807393074035645}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 826, "completion_tokens": 336, "duration": 7.761415481567383}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 823, "completion_tokens": 420, "duration": 7.721354007720947}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 871, "completion_tokens": 358, "duration": 9.059572458267212}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 793, "completion_tokens": 365, "duration": 8.576634407043457}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 644, "completion_tokens": 249, "duration": 8.058122158050537}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 879, "completion_tokens": 324, "duration": 7.036742687225342}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 845, "completion_tokens": 471, "duration": 11.867998838424683}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 983, "completion_tokens": 553, "duration": 18.083651542663574}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 785, "completion_tokens": 364, "duration": 8.328615665435791}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 839, "completion_tokens": 331, "duration": 9.08105206489563}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 885, "completion_tokens": 505, "duration": 13.932455778121948}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n*(n+1)//2", "prompt_tokens": 876, "completion_tokens": 398, "duration": 9.253517389297485}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 895, "completion_tokens": 472, "duration": 11.039541721343994}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 848, "completion_tokens": 349, "duration": 8.017974376678467}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 935, "completion_tokens": 395, "duration": 12.548181533813477}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if i == len(s) - 1 or (i == len(s) - 2 and s[i+1].lower() == 'y'):\n                count += 1\n    return count", "prompt_tokens": 876, "completion_tokens": 401, "duration": 9.688505411148071}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 830, "completion_tokens": 416, "duration": 11.83308458328247}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 806, "completion_tokens": 301, "duration": 11.119802474975586}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 1050, "completion_tokens": 364, "duration": 9.31346321105957}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest = float('inf')\n    smallest_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest, smallest_index]", "prompt_tokens": 1401, "completion_tokens": 554, "duration": 13.697442770004272}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, frequency in freq.items():\n        if num > 0 and frequency >= num:\n            return num\n    return -1", "prompt_tokens": 948, "completion_tokens": 376, "duration": 9.904061794281006}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 829, "completion_tokens": 320, "duration": 9.559373378753662}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 963, "completion_tokens": 508, "duration": 10.283926010131836}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1030, "completion_tokens": 293, "duration": 7.320514678955078}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for gap in range(1, n):\n        for l in range(n - gap):\n            r = l + gap\n            dp[l][r] = dp[l + 1][r - 1] if arr[l] == arr[r] else min(dp[l + 1][r], dp[l][r - 1]) + 1\n    return dp[0][n - 1]", "prompt_tokens": 1266, "completion_tokens": 761, "duration": 19.334262371063232}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 985, "completion_tokens": 382, "duration": 10.240354537963867}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 968, "completion_tokens": 677, "duration": 14.38154649734497}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return (x > 0) and (n > 0) and (math.log(x, n).is_integer())", "prompt_tokens": 918, "completion_tokens": 367, "duration": 8.915070295333862}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 802, "completion_tokens": 310, "duration": 5.830237627029419}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_digit(digit):\n        return digit in ['2', '3', '5', '7', 'B', 'D']\n    \n    count = 0\n    for digit in num:\n        if is_prime_digit(digit):\n            count += 1\n    return count", "prompt_tokens": 1254, "completion_tokens": 421, "duration": 11.686394691467285}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 896, "completion_tokens": 338, "duration": 9.467203617095947}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 1004, "completion_tokens": 514, "duration": 12.445013284683228}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        else:\n            result.append('E')\n    return result", "prompt_tokens": 1162, "completion_tokens": 535, "duration": 12.548276662826538}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 845, "completion_tokens": 447, "duration": 9.59836483001709}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 9**(n-1)", "prompt_tokens": 730, "completion_tokens": 359, "duration": 7.1602160930633545}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 870, "completion_tokens": 324, "duration": 8.564238786697388}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(num for i, num in enumerate(lst) if num % 2 == 0 and i % 2 != 0)", "prompt_tokens": 714, "completion_tokens": 336, "duration": 9.900160789489746}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 929, "completion_tokens": 390, "duration": 7.728468894958496}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 1141, "completion_tokens": 383, "duration": 9.798784255981445}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return array\n    sum_first_last = array[0] + array[-1]\n    return sorted(array, reverse=sum_first_last % 2 == 0)", "prompt_tokens": 1154, "completion_tokens": 491, "duration": 8.896412372589111}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 2 * 2 - 97) % 26 + 97) for c in s)", "prompt_tokens": 841, "completion_tokens": 355, "duration": 7.205714702606201}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    lst.sort()\n    if len(lst) < 2 or lst[0] == lst[1]:\n        return None\n    return lst[1]", "prompt_tokens": 882, "completion_tokens": 371, "duration": 6.88486909866333}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in re.split(r'[.?!]', S) if sentence.strip().startswith('I'))", "prompt_tokens": 813, "completion_tokens": 329, "duration": 7.7658398151397705}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 890, "completion_tokens": 366, "duration": 7.65654182434082}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            if char in 'AEIOUaeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char\n    return encoded_message", "prompt_tokens": 929, "completion_tokens": 494, "duration": 10.059025287628174}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n    \n    digit_sum = sum(int(digit) for digit in str(largest_prime))\n    return digit_sum", "prompt_tokens": 1529, "completion_tokens": 788, "duration": 13.976002216339111}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = all(key.islower() for key in dict.keys())\n    upper_keys = all(key.isupper() for key in dict.keys())\n    return lower_keys or upper_keys", "prompt_tokens": 912, "completion_tokens": 326, "duration": 10.57371211051941}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1093, "completion_tokens": 585, "duration": 12.176539897918701}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 815, "completion_tokens": 343, "duration": 7.155780076980591}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in 'AEIOU')", "prompt_tokens": 838, "completion_tokens": 427, "duration": 8.25838327407837}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 >= 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n    else:\n        return round(num)", "prompt_tokens": 957, "completion_tokens": 396, "duration": 7.826933860778809}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + i)\n        else:\n            pile.append(n + 2*i)\n    return pile", "prompt_tokens": 924, "completion_tokens": 410, "duration": 8.127751111984253}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 820, "completion_tokens": 304, "duration": 7.174643516540527}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    largest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            largest_even = num\n            break\n    return largest_even", "prompt_tokens": 865, "completion_tokens": 428, "duration": 7.607595920562744}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 1055, "completion_tokens": 518, "duration": 11.467999696731567}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 851, "completion_tokens": 379, "duration": 7.266937971115112}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [digit_names[x] for x in reversed_arr]", "prompt_tokens": 1177, "completion_tokens": 412, "duration": 8.847285747528076}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def sum_of_numbers(num):\n        return num * (num + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 976, "completion_tokens": 531, "duration": 9.514052867889404}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return count_even, count_odd", "prompt_tokens": 1165, "completion_tokens": 536, "duration": 10.08124589920044}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 891, "completion_tokens": 401, "duration": 7.841905832290649}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1250, "completion_tokens": 414, "duration": 12.401616096496582}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 956, "completion_tokens": 298, "duration": 8.469794034957886}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    counts = Counter(test.split())\n    max_count = max(counts.values(), default=0)\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 978, "completion_tokens": 424, "duration": 9.354433298110962}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1444, "completion_tokens": 581, "duration": 13.023638486862183}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), i, i, i) for i, s in enumerate(lst, 1)]", "prompt_tokens": 964, "completion_tokens": 376, "duration": 7.020117282867432}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 943, "completion_tokens": 522, "duration": 10.82462191581726}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_operations = 0\n    for row in grid:\n        for well in row:\n            total_operations += math.ceil(well / capacity)\n    return total_operations", "prompt_tokens": 1536, "completion_tokens": 631, "duration": 16.196686506271362}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 959, "completion_tokens": 342, "duration": 7.844580888748169}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in 'aeiou'\n    \n    def count_consonants(word):\n        return sum(1 for char in word if is_consonant(char))\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1004, "completion_tokens": 422, "duration": 12.509844064712524}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 936, "completion_tokens": 431, "duration": 8.63989520072937}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count_open = lst[0].count('(') + lst[1].count('(')\n    count_close = lst[0].count(')') + lst[1].count(')')\n    return 'Yes' if count_open == count_close else 'No'", "prompt_tokens": 1132, "completion_tokens": 556, "duration": 12.706343173980713}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1069, "completion_tokens": 352, "duration": 6.991954326629639}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "prompt_tokens": 1016, "completion_tokens": 554, "duration": 10.236051082611084}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 921, "completion_tokens": 391, "duration": 11.490802526473999}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 1224, "completion_tokens": 526, "duration": 12.1894850730896}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1158, "completion_tokens": 558, "duration": 11.131617546081543}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 940, "completion_tokens": 415, "duration": 8.57518219947815}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1200, "completion_tokens": 438, "duration": 9.121530771255493}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1240, "completion_tokens": 509, "duration": 11.270658493041992}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_signs = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes += abs(num)\n            product_signs *= -1\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 994, "completion_tokens": 537, "duration": 10.023099184036255}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def dfs(i, j, visited, path):\n        if len(path) == k:\n            return path\n\n        visited.add((i, j))\n        min_path = None\n\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                new_path = dfs(ni, nj, visited.copy(), path + [grid[ni][nj]])\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = new_path\n\n        return min_path\n\n    start_values = [(i, j) for i in range(n) for j in range(n)]\n    start_values.sort(key=lambda x: grid[x[0]][x[1]])\n\n    for i, j in start_values:\n        path = dfs(i, j, set(), [grid[i][j]])\n        if path:\n            return path", "prompt_tokens": 1925, "completion_tokens": 1077, "duration": 47.12248253822327}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    \n    trib = [0, 1, 1]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            trib.append(1 + i // 2)\n        else:\n            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3])\n    \n    return trib", "prompt_tokens": 1159, "completion_tokens": 510, "duration": 13.916279554367065}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    return 0 if all(int(d) % 2 == 0 for d in str(n)) else eval('*'.join(d for d in str(n) if int(d) % 2 != 0))", "prompt_tokens": 736, "completion_tokens": 341, "duration": 9.584088563919067}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0", "prompt_tokens": 1045, "completion_tokens": 536, "duration": 12.519812107086182}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(num)**2 for num in lst)", "prompt_tokens": 947, "completion_tokens": 354, "duration": 8.601372003555298}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt.strip() == '':\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and (len(txt.strip()) == 1 or not txt.strip()[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 866, "completion_tokens": 357, "duration": 11.212177276611328}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 949, "completion_tokens": 491, "duration": 11.664010047912598}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 862, "completion_tokens": 371, "duration": 14.11378002166748}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 889, "completion_tokens": 373, "duration": 12.335111618041992}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1, 2):\n        for j in range(2, n//2 + 1, 2):\n            for k in range(2, n//2 + 1, 2):\n                for l in range(2, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 937, "completion_tokens": 582, "duration": 18.496793508529663}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 864, "completion_tokens": 407, "duration": 11.801222085952759}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            elif consecutive_spaces > 0:\n                result += '_'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result[:-2] + '-'\n    elif consecutive_spaces > 0:\n        result += '_'\n    return result", "prompt_tokens": 822, "completion_tokens": 439, "duration": 14.310914754867554}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1072, "completion_tokens": 450, "duration": 16.094323873519897}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1037, "completion_tokens": 460, "duration": 7.612722635269165}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1043, "completion_tokens": 540, "duration": 12.14586353302002}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result = x_num * n_num / (x_den * n_den)\n    return result.is_integer()", "prompt_tokens": 1153, "completion_tokens": 598, "duration": 11.958827257156372}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))", "prompt_tokens": 835, "completion_tokens": 332, "duration": 10.19333028793335}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579')", "prompt_tokens": 903, "completion_tokens": 405, "duration": 9.141697645187378}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    arr = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1241, "completion_tokens": 708, "duration": 14.62817907333374}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(p for p in planets if start_idx < planets.index(p) < end_idx)", "prompt_tokens": 1045, "completion_tokens": 444, "duration": 13.492894411087036}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1047, "completion_tokens": 408, "duration": 9.767799615859985}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 884, "completion_tokens": 469, "duration": 12.670899152755737}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 883, "completion_tokens": 343, "duration": 9.622366189956665}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 1209, "completion_tokens": 483, "duration": 8.301662683486938}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return extension.count('A') - extension.count('a')\n    \n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1170, "completion_tokens": 365, "duration": 9.101808786392212}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return len(a) == len(b) and b in a + a", "prompt_tokens": 1073, "completion_tokens": 538, "duration": 14.283300399780273}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count", "prompt_tokens": 781, "completion_tokens": 426, "duration": 10.639390468597412}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, roman in roman_dict.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result", "prompt_tokens": 964, "completion_tokens": 586, "duration": 15.767461061477661}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 930, "completion_tokens": 461, "duration": 8.363405227661133}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 900, "completion_tokens": 433, "duration": 11.978725671768188}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    eaten = min(need, remaining)\n    remaining -= eaten\n    return [number + eaten, remaining]", "prompt_tokens": 1203, "completion_tokens": 379, "duration": 9.73008108139038}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1075, "completion_tokens": 473, "duration": 10.978440523147583}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 825, "completion_tokens": 361, "duration": 9.450899839401245}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()", "prompt_tokens": 819, "completion_tokens": 407, "duration": 11.583279371261597}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in ''.join(str(i) for i in range(a, b+1) if any(int(d) % 2 == 0 for d in str(i))) if int(digit) % 2 == 0]", "prompt_tokens": 843, "completion_tokens": 396, "duration": 10.657273054122925}
