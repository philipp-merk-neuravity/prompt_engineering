{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 844, "completion_tokens": 344, "duration": 7.409250259399414}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 1000, "completion_tokens": 563, "duration": 13.64922308921814}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 746, "completion_tokens": 292, "duration": 7.245375633239746}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    \n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    \n    return False", "prompt_tokens": 978, "completion_tokens": 488, "duration": 10.546780586242676}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 947, "completion_tokens": 457, "duration": 10.545049667358398}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 882, "completion_tokens": 439, "duration": 8.348979711532593}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting(s):\n        max_nest = 0\n        curr_nest = 0\n        for char in s:\n            if char == '(':\n                curr_nest += 1\n                max_nest = max(max_nest, curr_nest)\n            elif char == ')':\n                curr_nest -= 1\n        return max_nest\n\n    groups = paren_string.split()\n    return [max_nesting(group) for group in groups]", "prompt_tokens": 987, "completion_tokens": 574, "duration": 11.108200550079346}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 324, "duration": 6.532844066619873}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return sum_result, product_result", "prompt_tokens": 859, "completion_tokens": 406, "duration": 8.99766492843628}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef sliding_window_min(nums, k):\n    if not nums:\n        return []\n    \n    result = []\n    window = deque()\n    \n    for i, num in enumerate(nums):\n        while window and window[0] < i - k + 1:\n            window.popleft()\n        \n        while window and nums[window[-1]] > num:\n            window.pop()\n        \n        window.append(i)\n        \n        if i >= k - 1:\n            result.append(nums[window[0]])\n    \n    return result", "prompt_tokens": 989, "completion_tokens": 598, "duration": 10.32914400100708}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 920, "completion_tokens": 354, "duration": 7.578826427459717}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 921, "completion_tokens": 500, "duration": 11.030492305755615}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 810, "completion_tokens": 326, "duration": 6.512556076049805}
{"task_id": "HumanEval/13", "generated_code": "import math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    return math.gcd(a, b)", "prompt_tokens": 837, "completion_tokens": 424, "duration": 11.516040325164795}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 811, "completion_tokens": 420, "duration": 8.272632837295532}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 734, "completion_tokens": 323, "duration": 6.165111303329468}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 815, "completion_tokens": 393, "duration": 7.324133634567261}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 949, "completion_tokens": 353, "duration": 6.752907752990723}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 807, "completion_tokens": 391, "duration": 9.76491904258728}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 809, "completion_tokens": 403, "duration": 8.278302669525146}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 901, "completion_tokens": 344, "duration": 7.28022027015686}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "prompt_tokens": 879, "completion_tokens": 374, "duration": 7.6233320236206055}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 762, "completion_tokens": 306, "duration": 7.189087152481079}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 756, "completion_tokens": 383, "duration": 6.961489200592041}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 774, "completion_tokens": 414, "duration": 8.48274827003479}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 977, "completion_tokens": 499, "duration": 12.956465482711792}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 921, "completion_tokens": 493, "duration": 8.222005128860474}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 709, "completion_tokens": 343, "duration": 7.201878070831299}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 796, "completion_tokens": 391, "duration": 7.212440013885498}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 773, "completion_tokens": 319, "duration": 6.174938678741455}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 831, "completion_tokens": 323, "duration": 8.85809850692749}
{"task_id": "HumanEval/31", "generated_code": "def is_twin_prime(n):\n    return is_prime(n) and (is_prime(n + 2) or is_prime(n - 2))", "prompt_tokens": 866, "completion_tokens": 397, "duration": 9.88460898399353}
{"task_id": "HumanEval/32", "generated_code": "def poly(xs, x):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    if len(xs) % 2 != 0:\n        return None\n    if xs[-1] == 0:\n        return 0\n    return -xs[-2] / xs[-1]", "prompt_tokens": 1139, "completion_tokens": 391, "duration": 8.938939094543457}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    sorted_thirds = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_thirds.pop(0)\n    return result", "prompt_tokens": 1107, "completion_tokens": 577, "duration": 11.521321058273315}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 715, "completion_tokens": 281, "duration": 5.777220726013184}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l):\n    max_val = float('-inf')\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val", "prompt_tokens": 788, "completion_tokens": 355, "duration": 8.046769857406616}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))", "prompt_tokens": 816, "completion_tokens": 405, "duration": 7.6258320808410645}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices.pop(0)\n    return result", "prompt_tokens": 1001, "completion_tokens": 525, "duration": 43.26702404022217}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 924, "completion_tokens": 465, "duration": 12.034006357192993}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)\n\n# Test cases\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89", "prompt_tokens": 876, "completion_tokens": 593, "duration": 11.613091230392456}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1269, "completion_tokens": 747, "duration": 15.173856973648071}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n):\n    collisions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            collisions += 1\n    return collisions", "prompt_tokens": 1117, "completion_tokens": 554, "duration": 10.811744451522827}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [num + 1 for num in l]", "prompt_tokens": 818, "completion_tokens": 318, "duration": 7.2221410274505615}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1097, "completion_tokens": 515, "duration": 12.112496614456177}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 749, "completion_tokens": 300, "duration": 10.046562194824219}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(base, height):\n    return 0.5 * base * height", "prompt_tokens": 697, "completion_tokens": 322, "duration": 22.41723108291626}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]", "prompt_tokens": 1112, "completion_tokens": 558, "duration": 13.539551496505737}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 789, "completion_tokens": 400, "duration": 11.342277765274048}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 755, "completion_tokens": 328, "duration": 8.433117151260376}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 878, "completion_tokens": 388, "duration": 8.460821628570557}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 816, "completion_tokens": 413, "duration": 11.130815505981445}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 874, "completion_tokens": 361, "duration": 8.458439350128174}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 796, "completion_tokens": 368, "duration": 10.396395921707153}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 648, "completion_tokens": 253, "duration": 8.475619792938232}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 890, "completion_tokens": 331, "duration": 9.965671062469482}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 796, "completion_tokens": 418, "duration": 13.306164264678955}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 923, "completion_tokens": 497, "duration": 10.775983572006226}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 807, "completion_tokens": 386, "duration": 10.97531247138977}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 839, "completion_tokens": 331, "duration": 9.450741052627563}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 935, "completion_tokens": 552, "duration": 12.50539755821228}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 874, "completion_tokens": 403, "duration": 12.778149366378784}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n    return not stack", "prompt_tokens": 997, "completion_tokens": 561, "duration": 12.599823951721191}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))] if len(xs) > 1 else [0]", "prompt_tokens": 882, "completion_tokens": 394, "duration": 12.175834655761719}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c", "prompt_tokens": 1001, "completion_tokens": 495, "duration": 13.081944227218628}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 845, "completion_tokens": 338, "duration": 7.9935386180877686}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    return str(x)[::-1] if shift > len(str(x)) else str(x)[-shift:] + str(x)[:-shift]", "prompt_tokens": 866, "completion_tokens": 436, "duration": 9.718655109405518}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 806, "completion_tokens": 301, "duration": 9.93442440032959}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1065, "completion_tokens": 375, "duration": 14.287694931030273}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest:\n            smallest = num\n            smallest_index = i\n    if smallest_index == -1:\n        return []\n    return [smallest, smallest_index]", "prompt_tokens": 1271, "completion_tokens": 419, "duration": 11.72255825996399}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            return num\n    return -1", "prompt_tokens": 996, "completion_tokens": 424, "duration": 11.585713148117065}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 857, "completion_tokens": 348, "duration": 11.298526525497437}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 875, "completion_tokens": 420, "duration": 10.071175813674927}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1042, "completion_tokens": 305, "duration": 7.092220783233643}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    for i in range(len(arr)//2):\n        if arr[i] != arr[len(arr)-1-i]:\n            changes += 1\n    return changes", "prompt_tokens": 1137, "completion_tokens": 566, "duration": 13.06134819984436}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 1106, "completion_tokens": 486, "duration": 15.622899293899536}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    if len(factors) == 3 and all(is_prime(factor) for factor in factors):\n        return True\n    return False", "prompt_tokens": 919, "completion_tokens": 646, "duration": 16.74691939353943}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x > 0 and (x == 1 or n > 1 and (x == n or is_simple_power(x / n, n)))", "prompt_tokens": 920, "completion_tokens": 375, "duration": 12.099117040634155}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return math.isqrt(abs(a))**3 == abs(a)", "prompt_tokens": 896, "completion_tokens": 397, "duration": 8.37267255783081}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits and is_prime(int(digit, 16)):\n            count += 1\n    return count", "prompt_tokens": 1342, "completion_tokens": 561, "duration": 13.80713939666748}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 996, "completion_tokens": 465, "duration": 14.31049656867981}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 964, "completion_tokens": 493, "duration": 12.325618505477905}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1135, "completion_tokens": 536, "duration": 14.59238576889038}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 922, "completion_tokens": 526, "duration": 17.630162477493286}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 845, "completion_tokens": 516, "duration": 9.668755531311035}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    return bin(total)[2:]", "prompt_tokens": 944, "completion_tokens": 415, "duration": 8.382277965545654}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)", "prompt_tokens": 709, "completion_tokens": 331, "duration": 9.308104753494263}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 897, "completion_tokens": 358, "duration": 6.8939735889434814}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if col == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 1124, "completion_tokens": 366, "duration": 8.750849485397339}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    return sorted(array, reverse=sum_first_last % 2 == 0)", "prompt_tokens": 1180, "completion_tokens": 516, "duration": 13.302917957305908}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) + 2) % 26 + ord('a')) for c in s)", "prompt_tokens": 868, "completion_tokens": 377, "duration": 8.83620023727417}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    lst.sort()\n    if len(lst) < 2 or lst[0] == lst[1]:\n        return None\n    return lst[1]", "prompt_tokens": 884, "completion_tokens": 373, "duration": 11.222462177276611}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1", "prompt_tokens": 856, "completion_tokens": 412, "duration": 11.507200717926025}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(num, int) for num in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 895, "completion_tokens": 371, "duration": 8.55097484588623}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.lower()\n            else:\n                encoded_message += char.upper()\n        else:\n            if char in 'AEIOUaeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char\n    return encoded_message", "prompt_tokens": 931, "completion_tokens": 496, "duration": 10.655240058898926}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    return sum_of_digits(largest_prime)", "prompt_tokens": 1321, "completion_tokens": 571, "duration": 13.46497130393982}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = list(dict.keys())\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)", "prompt_tokens": 912, "completion_tokens": 318, "duration": 6.090444564819336}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1047, "completion_tokens": 539, "duration": 13.989295482635498}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 822, "completion_tokens": 350, "duration": 9.815641403198242}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.upper() in 'AEIOU')", "prompt_tokens": 757, "completion_tokens": 348, "duration": 6.740211486816406}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1", "prompt_tokens": 974, "completion_tokens": 417, "duration": 8.175148963928223}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2*i)\n        else:\n            pile.append(n + 2*i + 1)\n    return pile", "prompt_tokens": 933, "completion_tokens": 429, "duration": 9.826679944992065}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.findall(r'\\w+', s)", "prompt_tokens": 861, "completion_tokens": 343, "duration": 8.178411960601807}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 861, "completion_tokens": 423, "duration": 8.105884552001953}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 933, "completion_tokens": 396, "duration": 7.266082048416138}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 781, "completion_tokens": 309, "duration": 6.570261716842651}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    mapping = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    filtered_sorted_arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    reversed_arr = filtered_sorted_arr[::-1]\n    result = [mapping[num] for num in reversed_arr]\n    \n    return result", "prompt_tokens": 1219, "completion_tokens": 489, "duration": 11.055310010910034}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]", "prompt_tokens": 838, "completion_tokens": 330, "duration": 6.510824680328369}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "prompt_tokens": 1170, "completion_tokens": 541, "duration": 11.883007287979126}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(abs(num))) > 0:\n            count += 1\n    return count", "prompt_tokens": 956, "completion_tokens": 452, "duration": 10.293477296829224}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    return min_index == len(arr) - 1 or min_index == 0", "prompt_tokens": 1271, "completion_tokens": 414, "duration": 7.850828409194946}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 987, "completion_tokens": 329, "duration": 7.005887985229492}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_count = {}\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 959, "completion_tokens": 430, "duration": 8.094984531402588}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(char for char in s if char not in c)\n    return result, result == result[::-1]", "prompt_tokens": 1404, "completion_tokens": 541, "duration": 10.622191667556763}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s.index(s)+1}ng {s.index(s)+1} of the {s.index(s)+1}nput.\" for s in lst]", "prompt_tokens": 1007, "completion_tokens": 425, "duration": 9.314097881317139}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 974, "completion_tokens": 553, "duration": 11.108741998672485}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    if not grid:\n        return 0\n\n    wells = []\n    for row in grid:\n        wells.extend(row)\n\n    wells.sort(reverse=True)\n\n    buckets = [0] * capacity\n    count = 0\n\n    for well in wells:\n        min_bucket = min(buckets)\n        if well > min_bucket:\n            idx = buckets.index(min_bucket)\n            buckets[idx] += 1\n            count += 1\n        else:\n            idx = buckets.index(well)\n            buckets[idx] = 0\n\n    return count", "prompt_tokens": 1634, "completion_tokens": 806, "duration": 16.732198238372803}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 966, "completion_tokens": 349, "duration": 8.308200359344482}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        return sum(1 for char in word if char.lower() in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1000, "completion_tokens": 409, "duration": 9.202057838439941}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 935, "completion_tokens": 430, "duration": 8.581718444824219}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1091, "completion_tokens": 513, "duration": 11.329272747039795}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 1166, "completion_tokens": 447, "duration": 8.654336929321289}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "prompt_tokens": 1012, "completion_tokens": 546, "duration": 13.477145195007324}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 925, "completion_tokens": 395, "duration": 9.156537532806396}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)", "prompt_tokens": 1236, "completion_tokens": 554, "duration": 9.649268388748169}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    components = date.split('-')\n    if len(components) != 3:\n        return False\n    \n    month, day, year = map(int, components)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    \n    return False", "prompt_tokens": 1212, "completion_tokens": 572, "duration": 12.579156160354614}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 885, "completion_tokens": 360, "duration": 9.057694911956787}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False", "prompt_tokens": 1166, "completion_tokens": 593, "duration": 12.25136423110962}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1264, "completion_tokens": 581, "duration": 15.413833141326904}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 952, "completion_tokens": 491, "duration": 11.298254489898682}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n\n        min_path = None\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < m:\n                new_path = dfs(new_x, new_y, path + [grid[new_x][new_y]])\n                if new_path:\n                    if not min_path or new_path < min_path:\n                        min_path = new_path\n\n        return min_path\n\n    start_values = [(i, j) for i in range(n) for j in range(m)]\n    result = dfs(0, 0, [grid[0][0]])\n    return result", "prompt_tokens": 1972, "completion_tokens": 1087, "duration": 22.683017253875732}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n        return trib", "prompt_tokens": 1140, "completion_tokens": 476, "duration": 10.681685447692871}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    return 0 if all(int(digit) % 2 == 0 for digit in str(n)) else \\\n           1 if n == 0 else \\\n           eval('*'.join(digit for digit in str(n) if int(digit) % 2 != 0))", "prompt_tokens": 729, "completion_tokens": 349, "duration": 10.005626916885376}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return True\n    return False", "prompt_tokens": 932, "completion_tokens": 423, "duration": 8.357765913009644}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum((int(x) ** 2) for x in lst)", "prompt_tokens": 1045, "completion_tokens": 452, "duration": 7.638315439224243}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha() and not last_char.isspace()\n\n# Test cases\n# print(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\n# print(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\n# print(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "prompt_tokens": 883, "completion_tokens": 430, "duration": 10.907217264175415}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 911, "completion_tokens": 454, "duration": 10.177694320678711}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    \n    return (largest_negative, smallest_positive)", "prompt_tokens": 894, "completion_tokens": 403, "duration": 8.915087938308716}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 970, "completion_tokens": 452, "duration": 15.329526424407959}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for a in range(1, n//2 + 1, 2):\n        for b in range(1, n//2 + 1, 2):\n            for c in range(1, n//2 + 1, 2):\n                d = n - a - b - c\n                if d % 2 == 0 and d >= 2:\n                    return True\n    return False", "prompt_tokens": 833, "completion_tokens": 474, "duration": 13.606454372406006}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)", "prompt_tokens": 892, "completion_tokens": 435, "duration": 12.838842630386353}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result.rstrip('_') + '-'\n                consecutive_spaces = 0\n            else:\n                result += '_'\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 819, "completion_tokens": 459, "duration": 12.273221015930176}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1056, "completion_tokens": 423, "duration": 9.320687294006348}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n    return result", "prompt_tokens": 1047, "completion_tokens": 467, "duration": 10.317597389221191}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def is_prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime_length(word)]\n    return ' '.join(prime_words)", "prompt_tokens": 875, "completion_tokens": 383, "duration": 9.93544888496399}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 1058, "completion_tokens": 505, "duration": 13.885948419570923}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 847, "completion_tokens": 343, "duration": 8.161582469940186}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 904, "completion_tokens": 428, "duration": 12.536306619644165}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    def is_multiple_of_3(num):\n        return num % 3 == 0\n\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if is_multiple_of_3(a_i + a_j + a_k):\n                    count += 1\n    return count", "prompt_tokens": 1263, "completion_tokens": 767, "duration": 18.073976039886475}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2)", "prompt_tokens": 1029, "completion_tokens": 435, "duration": 9.206300258636475}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1050, "completion_tokens": 411, "duration": 13.963298320770264}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 872, "completion_tokens": 429, "duration": 13.319543600082397}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 884, "completion_tokens": 344, "duration": 9.646846294403076}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - g) if score != g else 0 for score, g in zip(game, guess)]", "prompt_tokens": 1093, "completion_tokens": 363, "duration": 13.211133241653442}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1237, "completion_tokens": 454, "duration": 12.929513931274414}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in a + a", "prompt_tokens": 949, "completion_tokens": 419, "duration": 14.108878135681152}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 796, "completion_tokens": 435, "duration": 12.069299697875977}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 1008, "completion_tokens": 630, "duration": 17.928502798080444}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 990, "completion_tokens": 517, "duration": 14.745133638381958}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 940, "completion_tokens": 487, "duration": 11.670488119125366}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1083, "completion_tokens": 267, "duration": 8.063512802124023}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 1198, "completion_tokens": 596, "duration": 12.366738557815552}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 825, "completion_tokens": 361, "duration": 11.022744178771973}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 826, "completion_tokens": 417, "duration": 8.55918002128601}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in str(a) if int(digit) % 2 == 0 and a <= b]\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []", "prompt_tokens": 882, "completion_tokens": 484, "duration": 10.817211627960205}
