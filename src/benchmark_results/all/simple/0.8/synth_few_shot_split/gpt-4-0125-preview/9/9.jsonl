{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 977, "completion_tokens": 489, "duration": 15.445011138916016}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')  # Remove spaces\n    stack = []\n    result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            current_group.append(char)\n            if not stack:  # If stack is empty, a group is complete\n                result.append(''.join(current_group))\n                current_group = []\n    return result", "prompt_tokens": 923, "completion_tokens": 516, "duration": 19.400773525238037}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 741, "completion_tokens": 287, "duration": 9.895010232925415}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 954, "completion_tokens": 459, "duration": 12.749560594558716}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 977, "completion_tokens": 487, "duration": 14.990440845489502}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimiter)\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 835, "completion_tokens": 413, "duration": 14.407755136489868}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 1024, "completion_tokens": 604, "duration": 16.878970623016357}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 790, "completion_tokens": 355, "duration": 15.672059059143066}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for num in numbers:\n        product_of_numbers *= num\n    return sum_of_numbers, product_of_numbers", "prompt_tokens": 855, "completion_tokens": 394, "duration": 14.481639862060547}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 1205, "completion_tokens": 791, "duration": 17.933404684066772}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 1015, "completion_tokens": 493, "duration": 15.4140145778656}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 820, "completion_tokens": 403, "duration": 12.967638969421387}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 811, "completion_tokens": 341, "duration": 11.218036651611328}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 836, "completion_tokens": 430, "duration": 12.271102666854858}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 753, "completion_tokens": 367, "duration": 13.556786298751831}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 726, "completion_tokens": 316, "duration": 10.021691083908081}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 739, "completion_tokens": 317, "duration": 9.584121942520142}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    return [durations[note] for note in music_string.split()]", "prompt_tokens": 1020, "completion_tokens": 430, "duration": 11.873725414276123}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 874, "completion_tokens": 481, "duration": 16.668983459472656}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 812, "completion_tokens": 407, "duration": 14.782838344573975}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 976, "completion_tokens": 458, "duration": 14.357100486755371}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 963, "completion_tokens": 470, "duration": 12.476022481918335}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 810, "completion_tokens": 361, "duration": 11.002024412155151}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 748, "completion_tokens": 375, "duration": 11.101813793182373}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 751, "completion_tokens": 385, "duration": 12.353410720825195}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 935, "completion_tokens": 501, "duration": 13.863731622695923}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 793, "completion_tokens": 390, "duration": 13.016924142837524}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 714, "completion_tokens": 348, "duration": 11.318430185317993}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "prompt_tokens": 758, "completion_tokens": 400, "duration": 13.565536260604858}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 766, "completion_tokens": 326, "duration": 10.639313220977783}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 821, "completion_tokens": 315, "duration": 9.655984878540039}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 1065, "completion_tokens": 618, "duration": 17.270737886428833}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n\n    def newton_method(xs, guess=0.0, max_iter=1000, tol=1e-6):\n        for _ in range(max_iter):\n            f_val = poly(xs, guess)\n            f_prime_val = poly(derivative(xs), guess)\n            if abs(f_val) < tol:\n                return guess\n            guess = guess - f_val / f_prime_val\n        return guess\n\n    return newton_method(xs)", "prompt_tokens": 1165, "completion_tokens": 711, "duration": 25.294676303863525}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    \"\"\"Sort elements at indices divisible by three in a list.\"\"\"\n    # Extract elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = []\n    # Counter for elements in divisible_by_three\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            # If index is divisible by three, add from sorted list\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            # Else, add the original element\n            result.append(l[i])\n    return result", "prompt_tokens": 980, "completion_tokens": 550, "duration": 21.252014875411987}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 725, "completion_tokens": 290, "duration": 8.798073053359985}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 718, "completion_tokens": 265, "duration": 7.219581842422485}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 829, "completion_tokens": 426, "duration": 12.49440050125122}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices.pop(0)\n    return l", "prompt_tokens": 975, "completion_tokens": 500, "duration": 13.24924612045288}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 1105, "completion_tokens": 618, "duration": 20.139669179916382}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 1\n    while True:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_index += 1", "prompt_tokens": 938, "completion_tokens": 644, "duration": 23.28706669807434}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1143, "completion_tokens": 624, "duration": 18.797873735427856}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of cars moving in opposite directions.\n    \"\"\"\n    return n * (n - 1) // 2", "prompt_tokens": 1042, "completion_tokens": 485, "duration": 10.287710905075073}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 850, "completion_tokens": 352, "duration": 9.548229455947876}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1124, "completion_tokens": 547, "duration": 11.897987604141235}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 752, "completion_tokens": 324, "duration": 7.915767669677734}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 786, "completion_tokens": 411, "duration": 13.41681957244873}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    \n    return dp[n]", "prompt_tokens": 1114, "completion_tokens": 623, "duration": 17.791240215301514}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 812, "completion_tokens": 418, "duration": 13.38511037826538}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 789, "completion_tokens": 365, "duration": 8.333213567733765}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 955, "completion_tokens": 523, "duration": 13.304449796676636}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 835, "completion_tokens": 415, "duration": 9.682015419006348}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 872, "completion_tokens": 359, "duration": 10.219903945922852}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 771, "completion_tokens": 346, "duration": 10.63266921043396}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 617, "completion_tokens": 229, "duration": 6.800337791442871}
{"task_id": "HumanEval/54", "generated_code": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return Counter(s0) == Counter(s1)", "prompt_tokens": 969, "completion_tokens": 420, "duration": 9.930190086364746}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 792, "completion_tokens": 423, "duration": 9.676093578338623}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 920, "completion_tokens": 493, "duration": 13.709811449050903}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 807, "completion_tokens": 404, "duration": 9.890938520431519}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1).intersection(set(l2))))", "prompt_tokens": 842, "completion_tokens": 341, "duration": 9.972987174987793}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    factor = 2\n    last_factor = 1\n    while n > 1:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1\n    return last_factor", "prompt_tokens": 927, "completion_tokens": 597, "duration": 16.038539171218872}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 865, "completion_tokens": 401, "duration": 12.303326845169067}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 984, "completion_tokens": 563, "duration": 14.472216606140137}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 851, "completion_tokens": 358, "duration": 10.65171766281128}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        memo[n] = helper(n-1) + helper(n-2) + helper(n-3)\n        return memo[n]\n    return helper(n)", "prompt_tokens": 985, "completion_tokens": 465, "duration": 10.932267665863037}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiou'\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s.lower().endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 846, "completion_tokens": 350, "duration": 11.246296644210815}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 839, "completion_tokens": 420, "duration": 14.060017585754395}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 847, "completion_tokens": 342, "duration": 8.483399391174316}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1017, "completion_tokens": 327, "duration": 8.182373523712158}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1376, "completion_tokens": 527, "duration": 16.698458194732666}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    counts = {}\n    for num in lst:\n        counts[num] = counts.get(num, 0) + 1\n    result = -1\n    for key, value in counts.items():\n        if key <= value:\n            result = max(result, key)\n    return result", "prompt_tokens": 959, "completion_tokens": 391, "duration": 12.556975603103638}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 835, "completion_tokens": 326, "duration": 9.17463755607605}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 906, "completion_tokens": 555, "duration": 22.296764373779297}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1052, "completion_tokens": 374, "duration": 11.672610759735107}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1281, "completion_tokens": 729, "duration": 18.961011171340942}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "prompt_tokens": 1015, "completion_tokens": 435, "duration": 15.006473064422607}
{"task_id": "HumanEval/75", "generated_code": "import sympy\n\ndef is_multiply_prime(a):\n    primes = list(sympy.primerange(1, a))\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "prompt_tokens": 952, "completion_tokens": 574, "duration": 16.32905864715576}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x % n == 0:\n        x /= n\n    return x == 1", "prompt_tokens": 913, "completion_tokens": 371, "duration": 8.855190753936768}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    root = a ** (1/3)\n    return round(root) ** 3 == a", "prompt_tokens": 846, "completion_tokens": 354, "duration": 10.499171733856201}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1243, "completion_tokens": 389, "duration": 11.29935336112976}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"", "prompt_tokens": 985, "completion_tokens": 454, "duration": 10.246904373168945}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 955, "completion_tokens": 465, "duration": 13.37192416191101}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1130, "completion_tokens": 550, "duration": 18.47869038581848}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))", "prompt_tokens": 787, "completion_tokens": 389, "duration": 11.65955400466919}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 836, "completion_tokens": 507, "duration": 14.074539184570312}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Sum the digits of N\n    sum_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return it without the '0b' prefix\n    return bin(sum_digits)[2:]", "prompt_tokens": 997, "completion_tokens": 501, "duration": 13.517009735107422}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 709, "completion_tokens": 332, "duration": 10.549005508422852}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)", "prompt_tokens": 951, "completion_tokens": 545, "duration": 17.138374090194702}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1130, "completion_tokens": 375, "duration": 14.413925170898438}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1038, "completion_tokens": 386, "duration": 13.159420251846313}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr((ord(char) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 876, "completion_tokens": 453, "duration": 16.790561199188232}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list or None if there is no such element.\n    \"\"\"\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    return unique_sorted_lst[1]", "prompt_tokens": 896, "completion_tokens": 409, "duration": 13.54582166671753}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    # Split the string into sentences\n    sentences = [sentence.strip() for sentence in S.replace('?', '.').replace('!', '.').split('.')]\n    # Count sentences that start with \"I\"\n    count = sum(sentence.startswith(\"I\") for sentence in sentences if sentence)\n    return count", "prompt_tokens": 824, "completion_tokens": 429, "duration": 24.036365270614624}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 916, "completion_tokens": 397, "duration": 13.077039003372192}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_message += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                encoded_message += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n        else:\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n    return encoded_message", "prompt_tokens": 944, "completion_tokens": 550, "duration": 24.76736307144165}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1553, "completion_tokens": 804, "duration": 24.323638677597046}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 909, "completion_tokens": 331, "duration": 11.39342975616455}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 1055, "completion_tokens": 583, "duration": 15.510551929473877}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 812, "completion_tokens": 340, "duration": 12.019654035568237}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 737, "completion_tokens": 404, "duration": 14.634850978851318}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    if num - int(num) == 0.5 or num - int(num) == -0.5:\n        return int(num) + (1 if num > 0 else -1)\n    else:\n        return round(num)", "prompt_tokens": 956, "completion_tokens": 450, "duration": 12.71749234199524}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 888, "completion_tokens": 487, "duration": 21.7914617061615}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    import re\n    return re.split(r'[,\\s]\\s*', s)", "prompt_tokens": 811, "completion_tokens": 300, "duration": 9.427209377288818}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    largest_even = -1\n    for num in range(y, x-1, -1):  # Iterate backwards to find the largest even number more efficiently\n        if num % 2 == 0:\n            largest_even = num\n            break  # Exit the loop once the largest even number is found\n    return largest_even", "prompt_tokens": 874, "completion_tokens": 543, "duration": 15.46434473991394}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 890, "completion_tokens": 345, "duration": 12.635343074798584}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 834, "completion_tokens": 383, "duration": 11.762527465820312}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1168, "completion_tokens": 420, "duration": 15.053413152694702}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_of_numbers(x):\n        return x*(x+1)//2\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 873, "completion_tokens": 423, "duration": 14.580528497695923}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1080, "completion_tokens": 452, "duration": 13.465990543365479}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 1546, "completion_tokens": 1187, "duration": 28.736133337020874}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n            index = i\n    if count == 0:\n        return True\n    if count > 1:\n        return False\n    if arr[0] >= arr[-1]:\n        return False\n    return True", "prompt_tokens": 1294, "completion_tokens": 495, "duration": 18.64058518409729}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 979, "completion_tokens": 546, "duration": 17.51893663406372}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    words = test.split()\n    letter_count = {}\n    for letter in words:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n    max_count = max(letter_count.values(), default=0)\n    return {letter: count for letter, count in letter_count.items() if count == max_count}", "prompt_tokens": 982, "completion_tokens": 499, "duration": 20.20358157157898}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1131, "completion_tokens": 541, "duration": 13.518885612487793}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 1025, "completion_tokens": 454, "duration": 13.214946508407593}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 914, "completion_tokens": 493, "duration": 16.89640235900879}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)", "prompt_tokens": 1941, "completion_tokens": 1025, "duration": 20.11864471435547}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 953, "completion_tokens": 373, "duration": 14.340940713882446}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for char in word if char.lower() not in vowels and char.isalpha())\n    \n    return [word for word in s.split() if count_consonants(word) == n]", "prompt_tokens": 999, "completion_tokens": 484, "duration": 13.994051933288574}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and i != len(word) - 1 and i != 0:\n            if word[i-1] not in vowels and word[i+1] not in vowels:\n                return word[i]\n    return \"\"", "prompt_tokens": 922, "completion_tokens": 409, "duration": 13.938264608383179}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    open_count_1, close_count_1 = lst[0].count('('), lst[0].count(')')\n    open_count_2, close_count_2 = lst[1].count('('), lst[1].count(')')\n\n    # Check if total open and close counts are equal\n    if open_count_1 + open_count_2 != close_count_1 + close_count_2:\n        return 'No'\n\n    # Check if any string has more close parentheses before concatenation\n    if close_count_1 > open_count_1 and open_count_2 > close_count_2:\n        return 'No'\n    if close_count_2 > open_count_2 and open_count_1 > close_count_1:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 1150, "completion_tokens": 838, "duration": 24.257006645202637}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1063, "completion_tokens": 346, "duration": 10.473004817962646}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 989, "completion_tokens": 528, "duration": 13.718353986740112}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 0 < num < 100)", "prompt_tokens": 916, "completion_tokens": 425, "duration": 11.782543659210205}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last odd number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 1332, "completion_tokens": 692, "duration": 19.882319688796997}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    \"\"\"Validate the given date string.\"\"\"\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    # Check if month, day, and year are integers\n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check the range of month and year\n    if month < 1 or month > 12 or year < 1:\n        return False\n    \n    # Check the range of day based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    else:\n        # Check for leap year for February\n        leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n        if leap_year:\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28", "prompt_tokens": 1211, "completion_tokens": 685, "duration": 34.74313950538635}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 918, "completion_tokens": 528, "duration": 18.000361680984497}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if i > 0 and lst[i] == lst[i - 1] and lst[i] == lst[i + 1]:\n            return False\n    return True", "prompt_tokens": 1099, "completion_tokens": 369, "duration": 12.554174423217773}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1248, "completion_tokens": 562, "duration": 16.614343881607056}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 950, "completion_tokens": 483, "duration": 15.577275276184082}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappop, heappush\n    n = len(grid)\n    # Convert grid to value-position map for quick access\n    pos_map = {grid[i][j]: (i, j) for i in range(n) for j in range(n)}\n    # Min heap to store the paths in the form (cost, length, last_value, path)\n    heap = [(0, 0, 0, [])]  # Initial path with cost 0, length 0, last_value 0, and empty path\n    \n    while heap:\n        cost, length, last_val, path = heappop(heap)\n        if length == k:\n            return path\n        for next_val in range(1, n*n + 1):\n            if next_val not in path:\n                next_pos = pos_map[next_val]\n                last_pos = pos_map[last_val] if last_val else (-1, -1)  # Handle the initial case\n                # Calculate the cost to move to the next value\n                next_cost = cost + (abs(next_pos[0] - last_pos[0]) + abs(next_pos[1] - last_pos[1]))\n                # Push the new path to the heap\n                heappush(heap, (next_cost, length + 1, next_val, path + [next_val]))", "prompt_tokens": 1931, "completion_tokens": 1124, "duration": 28.10071325302124}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    def helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 1:\n            return 3\n        if n % 2 == 0:\n            result = 1 + n // 2\n        else:\n            result = helper(n - 1, memo) + helper(n - 2, memo) + helper(n + 1, memo)\n        memo[n] = result\n        return result\n    \n    memo = {}\n    res = []\n    for i in range(1, n + 2):\n        if i not in memo:\n            helper(i, memo)\n        res.append(memo[i])\n    return res", "prompt_tokens": 1132, "completion_tokens": 504, "duration": 15.739570379257202}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 771, "completion_tokens": 396, "duration": 13.903946876525879}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if stack:\n                return True\n    return False", "prompt_tokens": 1039, "completion_tokens": 645, "duration": 16.74912667274475}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    from math import ceil\n    return sum(ceil(x)**2 for x in lst)", "prompt_tokens": 942, "completion_tokens": 352, "duration": 11.511334896087646}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 851, "completion_tokens": 383, "duration": 15.328738927841187}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 990, "completion_tokens": 521, "duration": 14.715620994567871}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 872, "completion_tokens": 381, "duration": 13.455091953277588}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    def parse_value(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n            return float(val)\n        return val\n    \n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n    \n    if parsed_a > parsed_b:\n        return a\n    elif parsed_b > parsed_a:\n        return b\n    else:\n        return None", "prompt_tokens": 946, "completion_tokens": 511, "duration": 15.14615249633789}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    if n % 2 == 0:  # If n is even, it can always be expressed as the sum of 4 even numbers\n        return True\n    return False", "prompt_tokens": 745, "completion_tokens": 371, "duration": 9.4821298122406}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 864, "completion_tokens": 454, "duration": 15.983684778213501}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with '_'\n    text = text.replace(' ', '_')\n    return text", "prompt_tokens": 808, "completion_tokens": 393, "duration": 10.267794609069824}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    # Split the file name by the dot\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot in the file name\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts\n    \n    # Check if the name part starts with a letter and is not empty\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name part\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1053, "completion_tokens": 500, "duration": 16.38311266899109}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 1025, "completion_tokens": 453, "duration": 12.707692384719849}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1041, "completion_tokens": 537, "duration": 20.648987531661987}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    new_num = num1 * num2\n    new_denom = denom1 * denom2\n    return new_num % new_denom == 0", "prompt_tokens": 1047, "completion_tokens": 503, "duration": 19.089234590530396}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 842, "completion_tokens": 445, "duration": 17.43564462661743}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_first_last_odd(num):\n        num_str = str(abs(num))\n        return int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0\n\n    return sum(1 for num in nums if num > 10 and is_first_last_odd(num))", "prompt_tokens": 879, "completion_tokens": 410, "duration": 10.87370491027832}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Generate the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count of valid triples\n    count = 0\n    \n    # Iterate through the array to find all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1292, "completion_tokens": 906, "duration": 35.854039907455444}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1023, "completion_tokens": 415, "duration": 12.789718627929688}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by length first, then alphabetically if lengths are the same\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_strings", "prompt_tokens": 1060, "completion_tokens": 465, "duration": 14.272661209106445}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 874, "completion_tokens": 475, "duration": 18.299278736114502}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and isinstance(x, int) and x % 2 != 0)", "prompt_tokens": 939, "completion_tokens": 400, "duration": 10.921992540359497}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1087, "completion_tokens": 357, "duration": 12.966526508331299}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 1198, "completion_tokens": 401, "duration": 10.440829038619995}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    a += a  # Concatenate string a with itself\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]  # Rotate string b\n        if rotated_b in a:  # Check if the rotated b is a substring of the concatenated a\n            return True\n    return False", "prompt_tokens": 902, "completion_tokens": 433, "duration": 16.21535587310791}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 789, "completion_tokens": 425, "duration": 12.479888677597046}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 1013, "completion_tokens": 711, "duration": 17.906934022903442}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 1029, "completion_tokens": 553, "duration": 13.684259414672852}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_unique = 0\n    result = \"\"\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 1068, "completion_tokens": 691, "duration": 16.786362648010254}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate the total number of eaten carrots and the remaining carrots after the meals.\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1128, "completion_tokens": 331, "duration": 14.225644826889038}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "prompt_tokens": 1118, "completion_tokens": 510, "duration": 17.55985188484192}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    \"\"\"Reverse case of letters in a string, reverse string if no letters are present.\"\"\"\n    if all(not char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)", "prompt_tokens": 884, "completion_tokens": 433, "duration": 13.104824781417847}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()", "prompt_tokens": 809, "completion_tokens": 463, "duration": 18.081194639205933}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 916, "completion_tokens": 481, "duration": 15.561644792556763}
