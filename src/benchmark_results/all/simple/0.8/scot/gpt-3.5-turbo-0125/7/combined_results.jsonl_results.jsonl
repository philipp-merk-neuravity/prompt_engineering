{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 591, "completion_tokens": 147, "duration": 6.175367116928101, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')':\n            open_braces -= 1\n        \n        current_group += char\n        \n        if open_braces == 0 and current_group.strip() != \"\":\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups", "prompt_tokens": 645, "completion_tokens": 265, "duration": 9.762203931808472, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 8.31378722190857, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 555, "completion_tokens": 109, "duration": 5.0769219398498535, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 665, "completion_tokens": 234, "duration": 10.78096866607666, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 538, "completion_tokens": 157, "duration": 7.730746507644653, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 8.69731330871582, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 7.03064751625061, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 8.181832790374756, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n\n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 183, "duration": 6.141766309738159, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 627, "completion_tokens": 106, "duration": 6.879832983016968, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 504, "completion_tokens": 153, "duration": 9.183448076248169, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "prompt_tokens": 554, "completion_tokens": 158, "duration": 5.773540735244751, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 445, "completion_tokens": 91, "duration": 6.579448223114014, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 154, "duration": 7.548970699310303, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 455, "completion_tokens": 106, "duration": 4.988987445831299, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 493, "completion_tokens": 147, "duration": 7.392009496688843, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 8.280102968215942, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 6.023836374282837, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 596, "completion_tokens": 242, "duration": 8.617305755615234, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 10.128380060195923, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 633, "completion_tokens": 199, "duration": 6.289308786392212, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = [value for value in values if type(value) is int]\n    return filtered_values", "prompt_tokens": 492, "completion_tokens": 95, "duration": 7.541998624801636, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 389, "completion_tokens": 72, "duration": 7.324683904647827, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 434, "completion_tokens": 123, "duration": 4.783074140548706, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 178, "duration": 7.753974914550781, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 491, "completion_tokens": 119, "duration": 6.652212858200073, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 461, "completion_tokens": 164, "duration": 5.929555654525757, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 7.547921180725098, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 116, "duration": 8.136552810668945, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 4.368482351303101, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 7.8831963539123535, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"Input list must have even length and largest coefficient must be non-zero\"\n    \n    def poly(xs, x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    def derivative(xs, x):\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n    \n    x = 0.0\n    while True:\n        fx = poly(xs, x)\n        if abs(fx) < 1e-9:\n            break\n        x = x - fx / derivative(xs, x)\n    \n    return x", "prompt_tokens": 894, "completion_tokens": 276, "duration": 11.269084692001343, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp = sorted([l[j] for j in range(i, len(l), 3)])\n            result.extend(temp)\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 698, "completion_tokens": 209, "duration": 5.516676425933838, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.559664011001587, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 498, "completion_tokens": 118, "duration": 4.829942941665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 167, "duration": 4.925646066665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 612, "completion_tokens": 159, "duration": 4.403379678726196, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 867, "completion_tokens": 453, "duration": 9.037723541259766, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 2\n\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 622, "completion_tokens": 333, "duration": 7.5936808586120605, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 740, "completion_tokens": 265, "duration": 6.703152418136597, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for car in range(1, n+1):\n        collisions += 2 * (n - car)\n    return collisions", "prompt_tokens": 625, "completion_tokens": 107, "duration": 6.800591468811035, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 6.12164568901062, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 4.054580450057983, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 4.699699640274048, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 68, "duration": 3.9346368312835693, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 732, "completion_tokens": 218, "duration": 8.385481834411621, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 496, "completion_tokens": 149, "duration": 6.497137546539307, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 505, "completion_tokens": 130, "duration": 3.5114712715148926, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    if n != 0:\n        result = pow(2, n, p)\n    return result", "prompt_tokens": 533, "completion_tokens": 100, "duration": 3.572932004928589, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 509, "completion_tokens": 111, "duration": 4.36420202255249, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.595567941665649, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 3.632829189300537, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.526929616928101, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    for ch in s0:\n        char_count[ch] = char_count.get(ch, 0) + 1\n    for ch in s1:\n        if ch not in char_count or char_count[ch] == 0:\n            return False\n        char_count[ch] -= 1\n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 727, "completion_tokens": 287, "duration": 6.326147079467773, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    result = 0\n\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 450, "completion_tokens": 168, "duration": 4.466182708740234, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 542, "completion_tokens": 160, "duration": 6.501768112182617, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 495, "completion_tokens": 118, "duration": 8.089212894439697, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 4.137173891067505, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n            largest_prime_factor = divisor\n        else:\n            divisor += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 175, "duration": 5.220166444778442, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 6.4979636669158936, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 162, "duration": 6.77282452583313, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 532, "completion_tokens": 144, "duration": 7.6913981437683105, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n    \n    return fibfib_list[n]", "prompt_tokens": 674, "completion_tokens": 227, "duration": 7.317212343215942, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n\n    return count", "prompt_tokens": 607, "completion_tokens": 176, "duration": 11.034168720245361, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        return num_str[::-1]\n    else:\n        split_index = length - shift\n        shifted_num = num_str[split_index:] + num_str[:split_index]\n        return shifted_num", "prompt_tokens": 582, "completion_tokens": 230, "duration": 8.889287948608398, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 536, "completion_tokens": 88, "duration": 6.474522352218628, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 833, "completion_tokens": 197, "duration": 9.852697849273682, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n\n    for index, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = index\n            found_even = True\n        elif num % 2 == 0 and num == smallest_value:\n            smallest_index = min(smallest_index, index)\n\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1052, "completion_tokens": 286, "duration": 11.444100856781006, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    greatest_integer = -1\n\n    for num in lst:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    for key in freq_dict:\n        if key > freq_dict[key] and key > greatest_integer:\n            greatest_integer = key\n\n    return greatest_integer", "prompt_tokens": 681, "completion_tokens": 166, "duration": 9.324306964874268, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    min_lst, max_lst = [], []\n    for i in range(len(lst)):\n        if len(min_lst) < len(max_lst):\n            min_lst.append(lst[i])\n        else:\n            max_lst.append(lst[i])\n    return min_lst + max_lst", "prompt_tokens": 633, "completion_tokens": 191, "duration": 10.108138799667358, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 8.272530555725098, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    sum_elements = sum(q)\n    \n    return sum_elements <= w and is_palindrome", "prompt_tokens": 926, "completion_tokens": 296, "duration": 9.91080641746521, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 701, "completion_tokens": 198, "duration": 7.747425079345703, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 781, "completion_tokens": 221, "duration": 8.752150058746338, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    for p1 in primes:\n        for p2 in primes:\n            for p3 in primes:\n                if p1 * p2 * p3 == a:\n                    return True\n    return False", "prompt_tokens": 565, "completion_tokens": 329, "duration": 9.986273288726807, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if x / power == n:\n            return True\n        power *= n\n    return False", "prompt_tokens": 627, "completion_tokens": 127, "duration": 6.838183641433716, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    result = False\n    cube_root = abs(a) ** (1/3)\n    if cube_root.is_integer():\n        result = True\n    return result", "prompt_tokens": 571, "completion_tokens": 134, "duration": 6.987730026245117, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.532759666442871, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 677, "completion_tokens": 205, "duration": 6.689095735549927, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 7.625643253326416, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 13.376813650131226, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 543, "completion_tokens": 194, "duration": 8.242356538772583, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 445, "completion_tokens": 164, "duration": 7.311645746231079, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 608, "completion_tokens": 112, "duration": 6.597620487213135, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_indices += lst[i]\n    return sum_even_odd_indices", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.9957115650177, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 637, "completion_tokens": 167, "duration": 5.962275266647339, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, value in sorted(enumerate(row, reverse=True)):\n                if value == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 919, "completion_tokens": 228, "duration": 10.725100994110107, "result": "failed: 'reverse' is an invalid keyword argument for enumerate()", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 811, "completion_tokens": 207, "duration": 10.116601943969727, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 614, "completion_tokens": 196, "duration": 9.05893611907959, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    sorted_lst = sorted(lst)\n    if sorted_lst[0] == sorted_lst[1]:\n        return None\n    else:\n        return sorted_lst[1]", "prompt_tokens": 581, "completion_tokens": 129, "duration": 8.292829990386963, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 562, "completion_tokens": 144, "duration": 5.709597826004028, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 619, "completion_tokens": 226, "duration": 6.9183220863342285, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 634, "completion_tokens": 259, "duration": 8.224285125732422, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is not None:\n        sum_digits = calculate_sum_of_digits(largest_prime)\n        return sum_digits\n    else:\n        return 0", "prompt_tokens": 1016, "completion_tokens": 367, "duration": 12.2197744846344, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 6.909929990768433, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 7.499019384384155, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 533, "completion_tokens": 103, "duration": 6.444848537445068, "result": "failed: First test error: 6", "passed": false}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    \n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    \n    return count", "prompt_tokens": 484, "completion_tokens": 145, "duration": 5.42265510559082, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 676, "completion_tokens": 181, "duration": 9.97348928451538, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    stones_list.append(stones)\n    while len(stones_list) < n:\n        if n % 2 == 1:\n            n += 2\n        else:\n            n += 1\n        stones_list.append(n)\n    return stones_list", "prompt_tokens": 636, "completion_tokens": 185, "duration": 8.18901014328003, "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 204, "duration": 6.223127603530884, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 510, "completion_tokens": 113, "duration": 8.502223491668701, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 633, "completion_tokens": 164, "duration": 7.571257829666138, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if any(int(ch) % 2 == 0 for ch in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)", "prompt_tokens": 593, "completion_tokens": 178, "duration": 5.812777280807495, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 948, "completion_tokens": 305, "duration": 10.891561508178711, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 174, "duration": 7.710442304611206, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 5.890745162963867, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.013453483581543, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_index = arr.index(min(arr))\n    n = len(arr)\n    \n    for _ in range(n):\n        arr = [arr[-1]] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 973, "completion_tokens": 184, "duration": 7.440057992935181, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    return \"NO\" if count_odd > 1 else \"YES\"", "prompt_tokens": 737, "completion_tokens": 141, "duration": 4.904036998748779, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter not in result_dict:\n            result_dict[letter] = 1\n        else:\n            result_dict[letter] += 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [letter for letter, count in result_dict.items() if count == max_count]\n    result_dict = {letter: count for letter, count in result_dict.items() if letter in max_letters}\n    \n    return result_dict", "prompt_tokens": 763, "completion_tokens": 335, "duration": 10.079177379608154, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = modified_str == modified_str[::-1]\n    return modified_str, is_palindrome", "prompt_tokens": 701, "completion_tokens": 173, "duration": 8.196405410766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(count) + \"ng \" + s + \" of the \" + str(count) + \"nput.\")\n    return result", "prompt_tokens": 723, "completion_tokens": 217, "duration": 6.592813730239868, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 8.89458179473877, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times_lowered = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times_lowered += math.ceil(well / capacity)\n    return times_lowered", "prompt_tokens": 1033, "completion_tokens": 186, "duration": 7.272010087966919, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    ones_count = {}\n    \n    for num in arr:\n        bin_num = bin(num)[2:]\n        ones_count[num] = bin_num.count('1')\n    \n    def custom_sort(num):\n        return (ones_count[num], num)\n    \n    sorted_arr = sorted(arr, key=custom_sort)\n    \n    return sorted_arr", "prompt_tokens": 764, "completion_tokens": 241, "duration": 6.887902736663818, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char in consonants)\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 793, "completion_tokens": 261, "duration": 9.617835521697998, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in consonants and word[i+1] in \"aeiouAEIOU\" and word[i+2] in consonants:\n            closest_vowel = word[i+1]\n            break\n    \n    return closest_vowel", "prompt_tokens": 685, "completion_tokens": 236, "duration": 8.390203714370728, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 774, "completion_tokens": 301, "duration": 8.125946521759033, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 775, "completion_tokens": 118, "duration": 5.975973129272461, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.358790874481201, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 5.027434349060059, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 10.976648092269897, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    if year < 1:\n        return False\n    \n    return True", "prompt_tokens": 970, "completion_tokens": 356, "duration": 12.066823244094849, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count_odd_letters = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if words_list:\n            return words_list\n        else:\n            return count_odd_letters", "prompt_tokens": 757, "completion_tokens": 307, "duration": 7.733310699462891, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicates = {}\n    \n    for num in lst:\n        if num == prev:\n            if num not in duplicates:\n                duplicates[num] = 2\n            else:\n                duplicates[num] += 1\n        prev = num\n    \n    if any(value > 2 for value in duplicates.values()):\n        return False\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    return True", "prompt_tokens": 1011, "completion_tokens": 362, "duration": 12.822230577468872, "result": "passed", "passed": true}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if intersection_length <= 1:\n        return \"NO\"\n    \n    is_prime = True\n    if intersection_length == 2:\n        is_prime = True\n    else:\n        for i in range(2, int(intersection_length**0.5) + 1):\n            if intersection_length % i == 0:\n                is_prime = False\n                break\n\n    if is_prime:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 937, "completion_tokens": 350, "duration": 11.592796325683594, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for number in arr:\n        if number > 0:\n            sum_of_magnitudes += number\n        elif number < 0:\n            sum_of_magnitudes += abs(number)\n            product_of_signs *= -1\n    \n    return product_of_signs * sum_of_magnitudes", "prompt_tokens": 624, "completion_tokens": 218, "duration": 8.959718942642212, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def is_valid(i, j):\n        return 0 <= i < len(grid) and 0 <= j < len(grid[0])\n\n    def explore_path(i, j, path):\n        if len(path) == k:\n            nonlocal min_path\n            if not min_path or path < min_path:\n                min_path = path[:]\n            return\n\n        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if is_valid(ni, nj) and not visited[ni][nj]:\n                visited[ni][nj] = True\n                explore_path(ni, nj, path + [grid[ni][nj]])\n                visited[ni][nj] = False\n\n    min_path = []\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited[i][j] = True\n            explore_path(i, j, [grid[i][j]])\n            visited[i][j] = False\n\n    return min_path", "prompt_tokens": 1292, "completion_tokens": 504, "duration": 13.52004623413086, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_seq = []\n    if n == 0:\n        tribonacci_seq.append(0)\n        return tribonacci_seq\n    if n == 1:\n        tribonacci_seq.extend([1, 3])\n        return tribonacci_seq\n    if n == 2:\n        tribonacci_seq.extend([1, 3, 2])\n        return tribonacci_seq\n    \n    tribonacci_seq.extend([0, 1, 1])\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci_seq.append(1 + i // 2)\n        else:\n            tribonacci_seq.append(tribonacci_seq[i - 1] + tribonacci_seq[i - 2] + tribonacci_seq[i - 3])\n    \n    return tribonacci_seq", "prompt_tokens": 965, "completion_tokens": 412, "duration": 10.64587664604187, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 482, "completion_tokens": 148, "duration": 20.79701042175293, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 662, "completion_tokens": 276, "duration": 12.267462968826294, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 8.807801246643066, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    return False", "prompt_tokens": 644, "completion_tokens": 172, "duration": 7.945705890655518, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 555, "completion_tokens": 141, "duration": 5.342971563339233, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 656, "completion_tokens": 220, "duration": 11.179183006286621, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 679, "completion_tokens": 249, "duration": 9.292426824569702, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i >= 2:\n            return True\n    return False", "prompt_tokens": 538, "completion_tokens": 221, "duration": 9.521284818649292, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.9672558307647705, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                updated_text += \"-\"\n                count = 0\n        else:\n            if count > 0:\n                updated_text += \"-\" * count\n                count = 0\n            updated_text += ch\n    return updated_text", "prompt_tokens": 622, "completion_tokens": 241, "duration": 7.338284254074097, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_present = False\n    valid_start_letter = False\n    valid_extension = False\n    \n    for c in file_name:\n        if c.isdigit():\n            digit_count += 1\n        elif c == '.':\n            dot_present = True\n        elif c.isalpha() and not valid_start_letter:\n            valid_start_letter = True\n        elif dot_present:\n            if file_name[file_name.index('.')+1:] in ['txt', 'exe', 'dll']:\n                valid_extension = True\n    \n    if digit_count <= 3 and dot_present and valid_start_letter and valid_extension:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 935, "completion_tokens": 397, "duration": 13.808088541030884, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 11.201125144958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 697, "completion_tokens": 236, "duration": 10.82561993598938, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num\n    if product % (x_denom * n_denom) == 0:\n        return True\n    else:\n        return False", "prompt_tokens": 687, "completion_tokens": 194, "duration": 9.178799152374268, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {}\n    for i, num in enumerate(nums):\n        digit_sums[i] = sum(int(digit) for digit in str(abs(num)))\n    sorted_indices = sorted(digit_sums, key=lambda x: (digit_sums[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 647, "completion_tokens": 235, "duration": 9.784668445587158, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 4.121816158294678, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 8.662597417831421, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result.reverse()\n        \n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 9.696654081344604, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 720, "completion_tokens": 135, "duration": 3.6262736320495605, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n\n    return x", "prompt_tokens": 493, "completion_tokens": 112, "duration": 2.9622745513916016, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num**2\n    return sum_of_squares", "prompt_tokens": 607, "completion_tokens": 137, "duration": 7.216236352920532, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 804, "completion_tokens": 138, "duration": 3.604128837585449, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    \n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 956, "completion_tokens": 245, "duration": 7.347973823547363, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    concat = a + a\n    for i in range(n):\n        temp = concat[i:i+m]\n        if temp == b:\n            return True\n    return False", "prompt_tokens": 661, "completion_tokens": 212, "duration": 6.6700263023376465, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.8265063762664795, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'm': 1000, 'cm': 900, 'd': 500, 'cd': 400, 'c': 100, 'xc': 90, 'l': 50, 'xl': 40,\n        'x': 10, 'ix': 9, 'v': 5, 'iv': 4, 'i': 1\n    }\n    \n    mini_roman = ''\n    \n    for roman_numeral, value in sorted(roman_numerals.items(), key=lambda x: x[1], reverse=True):\n        while number >= value:\n            mini_roman += roman_numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 573, "completion_tokens": 271, "duration": 9.578063011169434, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    \n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 7.607722282409668, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 7.6304168701171875, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = max(0, remaining - total_eaten_carrots)\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 164, "duration": 5.555893421173096, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 847, "completion_tokens": 284, "duration": 8.108494520187378, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 6.344592571258545, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 7.396501302719116, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 553, "completion_tokens": 148, "duration": 5.411938905715942, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 643, "completion_tokens": 217, "duration": 7.183560609817505, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n            current_group += ch\n        elif ch == ')':\n            if open_braces_count > 0:\n                open_braces_count -= 1\n                current_group += ch\n                if open_braces_count == 0:\n                    groups.append(current_group)\n                    current_group = \"\"\n    \n    return groups", "prompt_tokens": 650, "completion_tokens": 285, "duration": 9.8778555393219, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 492, "completion_tokens": 96, "duration": 6.736852407455444, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 583, "completion_tokens": 137, "duration": 6.450250864028931, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(num - mean) for num in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 234, "duration": 7.612094402313232, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 533, "completion_tokens": 152, "duration": 6.064971208572388, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 683, "completion_tokens": 308, "duration": 9.18819808959961, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 5.598246812820435, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 552, "completion_tokens": 152, "duration": 6.040181398391724, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 596, "completion_tokens": 212, "duration": 7.119022369384766, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 630, "completion_tokens": 109, "duration": 5.26535701751709, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 531, "completion_tokens": 176, "duration": 6.495096921920776, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str", "prompt_tokens": 554, "completion_tokens": 159, "duration": 6.385959625244141, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 451, "completion_tokens": 97, "duration": 4.790705442428589, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 461, "completion_tokens": 133, "duration": 5.408796787261963, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 451, "completion_tokens": 103, "duration": 4.914895534515381, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 489, "completion_tokens": 142, "duration": 5.5801098346710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 7.154277563095093, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 514, "completion_tokens": 142, "duration": 5.946964502334595, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 590, "completion_tokens": 237, "duration": 7.461097717285156, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 717, "completion_tokens": 233, "duration": 6.993157386779785, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 620, "completion_tokens": 186, "duration": 6.146928071975708, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 494, "completion_tokens": 101, "duration": 6.6636738777160645, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 4.606131553649902, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 99, "duration": 4.683546781539917, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.0644142627716064, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 485, "completion_tokens": 106, "duration": 5.030752897262573, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 5.815114259719849, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = \"\"\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 414, "completion_tokens": 80, "duration": 4.736085891723633, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 497, "completion_tokens": 96, "duration": 4.783401250839233, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 4.4783666133880615, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 5.5786004066467285, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or max(xs) == 0:\n        return None\n    \n    zero_point = None\n    for x in range(-100, 101):\n        if math.isclose(poly(xs, x), 0, abs_tol=0.0001):\n            zero_point = x\n            break\n    \n    return zero_point", "prompt_tokens": 930, "completion_tokens": 270, "duration": 8.817868709564209, "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 742, "completion_tokens": 289, "duration": 7.944775819778442, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    return sorted(unique_list)", "prompt_tokens": 477, "completion_tokens": 111, "duration": 19.249945640563965, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 497, "completion_tokens": 117, "duration": 5.151700735092163, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 511, "completion_tokens": 157, "duration": 8.4095299243927, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i: i+1]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 619, "completion_tokens": 170, "duration": 9.258842945098877, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 672, "completion_tokens": 179, "duration": 4.7373456954956055, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        square_root = int(math.sqrt(num))\n        return square_root * square_root == num\n\n    def is_fibonacci(num):\n        return is_perfect_square(5*num*num + 4) or is_perfect_square(5*num*num - 4)\n\n    def find_next_prime_fibonacci(num):\n        num = num + 1\n        while True:\n            if is_prime(num) and is_fibonacci(num):\n                return num\n            num = num + 1\n\n    count = 0\n    num = 1\n    while count < n:\n        num = find_next_prime_fibonacci(num)\n        count = count + 1\n\n    return num\n\nprint(prime_fib(1))\nprint(prime_fib(2))\nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(5))", "prompt_tokens": 664, "completion_tokens": 465, "duration": 12.6342613697052, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 10.401310443878174, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += i\n    return collisions", "prompt_tokens": 643, "completion_tokens": 119, "duration": 4.940309047698975, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_num = num + 1\n        new_list.append(new_num)\n    return new_list", "prompt_tokens": 533, "completion_tokens": 99, "duration": 6.279994964599609, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 677, "completion_tokens": 153, "duration": 8.231300592422485, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 8.468075513839722, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 6.9709930419921875, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 729, "completion_tokens": 215, "duration": 8.464184761047363, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 492, "completion_tokens": 145, "duration": 8.393677234649658, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 507, "completion_tokens": 131, "duration": 10.068448066711426, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    for i in range(1, n+1):\n        result = (result * 2) % p\n    return result", "prompt_tokens": 524, "completion_tokens": 102, "duration": 6.326677083969116, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_string = \"\"\n    for ch in s:\n        decoded_char = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_string += decoded_char\n    return decoded_string", "prompt_tokens": 524, "completion_tokens": 144, "duration": 9.176758766174316, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 606, "completion_tokens": 143, "duration": 8.7490816116333, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 7.769758939743042, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    sum = x + y\n    return sum", "prompt_tokens": 398, "completion_tokens": 51, "duration": 7.736727476119995, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_freq = {}\n    for char in s0:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char in s1:\n        if char not in char_freq:\n            return False\n        else:\n            char_freq[char] -= 1\n            if char_freq[char] == 0:\n                del char_freq[char]\n    \n    return not char_freq", "prompt_tokens": 699, "completion_tokens": 270, "duration": 10.07138180732727, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n\n    for i in range(2, n+1):\n        next_fib = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_fib)\n\n    return fib_sequence[n]", "prompt_tokens": 454, "completion_tokens": 178, "duration": 5.953885078430176, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 561, "completion_tokens": 181, "duration": 9.712087869644165, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            is_increasing = False\n        if l[i] < l[i+1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 539, "completion_tokens": 196, "duration": 5.977038145065308, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 9.18131709098816, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            if all(factor % i != 0 for i in range(2, int(factor ** 0.5) + 1)):\n                largest_prime_factor = factor\n        factor += 1\n    return largest_prime_factor", "prompt_tokens": 499, "completion_tokens": 206, "duration": 9.008180618286133, "result": "timed out", "passed": false}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.327701807022095, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 160, "duration": 10.870551586151123, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 530, "completion_tokens": 142, "duration": 9.224936246871948, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 242, "duration": 12.03084659576416, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 12.330225229263306, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        result = num_str[::-1]\n        return result\n    else:\n        new_index = shift % length\n        result = num_str[new_index:] + num_str[:new_index]\n        return result", "prompt_tokens": 590, "completion_tokens": 240, "duration": 8.618862390518188, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 6.867517709732056, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 817, "completion_tokens": 186, "duration": 8.224671363830566, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(smallest_index, i)\n        elif found_even and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1087, "completion_tokens": 344, "duration": 10.950971364974976, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for key, value in freq_map.items():\n        if key > 0 and value >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 725, "completion_tokens": 226, "duration": 11.243441820144653, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n        else:\n            break\n    return result_lst", "prompt_tokens": 630, "completion_tokens": 180, "duration": 8.882842063903809, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 189, "duration": 8.333760023117065, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left = 0\n    right = len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 279, "duration": 10.742411375045776, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[right] = arr[left]\n            else:\n                arr[left] = arr[right]\n        left += 1\n        right -= 1\n\n    return min_changes", "prompt_tokens": 706, "completion_tokens": 230, "duration": 9.244953155517578, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 775, "completion_tokens": 208, "duration": 11.546189069747925, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    for p in range(2, 100):\n        while a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 159, "duration": 7.368374347686768, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 617, "completion_tokens": 115, "duration": 8.5433030128479, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    a = abs(a)\n    cube_root = 0\n    for i in range(1, a+1):\n        if i**3 == a:\n            cube_root = i\n            break\n    return cube_root != 0", "prompt_tokens": 595, "completion_tokens": 174, "duration": 9.038493394851685, "result": "failed: 1st edge test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 9.724230766296387, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 670, "completion_tokens": 198, "duration": 9.840562582015991, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 598, "completion_tokens": 171, "duration": 5.39320182800293, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 14.796185493469238, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 530, "completion_tokens": 168, "duration": 7.98073148727417, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-1)\n    return count", "prompt_tokens": 446, "completion_tokens": 161, "duration": 7.393248081207275, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return bin(sum)[2:]", "prompt_tokens": 607, "completion_tokens": 115, "duration": 6.474208116531372, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 6.788534879684448, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 629, "completion_tokens": 168, "duration": 6.041985273361206, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 929, "completion_tokens": 226, "duration": 9.190724849700928, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "prompt_tokens": 846, "completion_tokens": 230, "duration": 9.85428500175476, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 202, "duration": 6.417766332626343, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 7.170332908630371, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.087404012680054, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 137, "duration": 5.225245475769043, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_ch = chr((index + 2) % 26 + ord('A')) if ch.isupper() else chr((index + 2) % 26 + ord('a'))\n            else:\n                new_ch = ch.swapcase()\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 246, "duration": 10.425498962402344, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 8.599056243896484, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 740, "completion_tokens": 236, "duration": 7.664423942565918, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n            if len(prime_numbers) == n:\n                break\n    return prime_numbers", "prompt_tokens": 654, "completion_tokens": 191, "duration": 8.134186267852783, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    product = unit_digit_a * unit_digit_b\n    return product", "prompt_tokens": 579, "completion_tokens": 171, "duration": 8.148329973220825, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 4.70204758644104, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = abs(value - floor_val)\n    diff_ceil = abs(value - ceil_val)\n    \n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 687, "completion_tokens": 192, "duration": 7.7764952182769775, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n    return stones_list", "prompt_tokens": 602, "completion_tokens": 142, "duration": 7.101842403411865, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 6.6415183544158936, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0 and num > biggest_even_num:\n            biggest_even_num = num\n    return biggest_even_num", "prompt_tokens": 507, "completion_tokens": 120, "duration": 7.6723151206970215, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 631, "completion_tokens": 169, "duration": 7.267750263214111, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 577, "completion_tokens": 160, "duration": 5.580322980880737, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 996, "completion_tokens": 354, "duration": 10.737722635269165, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            sum_val = sum(range(1, i+1))\n            result.append(sum_val)\n    return result", "prompt_tokens": 617, "completion_tokens": 197, "duration": 8.757534265518188, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 5.686341762542725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 10.040840148925781, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[-min_idx:] + arr[:-min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 954, "completion_tokens": 151, "duration": 7.475046634674072, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n    if even_count == len(lst1):\n        return \"YES\"\n    return \"NO\"", "prompt_tokens": 786, "completion_tokens": 232, "duration": 6.387203693389893, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 726, "completion_tokens": 249, "duration": 8.46573805809021, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 719, "completion_tokens": 186, "duration": 8.899869441986084, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements \" + str(count) + \"n the str\" + str(lst.index(s)+1) + \"ng \" + s + \" of the \" + str(lst.index(s)+1) + \"nput.\")\n    return result", "prompt_tokens": 756, "completion_tokens": 258, "duration": 7.340878248214722, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 8.443040609359741, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 174, "duration": 10.585772275924683, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 719, "completion_tokens": 162, "duration": 5.3196868896484375, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 730, "completion_tokens": 194, "duration": 8.326245546340942, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels:\n            last_consonant_index = i\n        elif word[i].lower() in vowels:\n            if last_consonant_index != -1:\n                closest_vowel = word[i]\n                break\n                \n    return closest_vowel", "prompt_tokens": 724, "completion_tokens": 285, "duration": 11.048164367675781, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 308, "duration": 8.405280351638794, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 776, "completion_tokens": 119, "duration": 7.532916307449341, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 6.369812250137329, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 5.268137454986572, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 10.992625713348389, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['01', '03', '05', '07', '08', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['04', '06', '09', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '02':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    if not date[2] == date[5] == '-':\n        return False\n    \n    return True", "prompt_tokens": 975, "completion_tokens": 378, "duration": 12.64316701889038, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 753, "completion_tokens": 298, "duration": 10.234142780303955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev_num = None\n    has_duplicate = False\n    for num in lst:\n        if num == prev_num:\n            has_duplicate = True\n        if prev_num is not None and num < prev_num:\n            return False\n        prev_num = num\n    return not has_duplicate", "prompt_tokens": 884, "completion_tokens": 194, "duration": 7.554407835006714, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 947, "completion_tokens": 331, "duration": 12.905360698699951, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 615, "completion_tokens": 191, "duration": 5.036545515060425, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def isValidCell(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n\n    def dfs(row, col, length, currentPath):\n        if length == k:\n            nonlocal minPath\n            if not minPath or currentPath < minPath:\n                minPath = currentPath[:]\n            return\n\n        visited[row][col] = True\n        currentPath.append(grid[row][col])\n\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if isValidCell(new_row, new_col) and not visited[new_row][new_col]:\n                dfs(new_row, new_col, length + 1, currentPath)\n\n        visited[row][col] = False\n        currentPath.pop()\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    minPath = []\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, 1, [])\n\n    return minPath", "prompt_tokens": 1297, "completion_tokens": 504, "duration": 12.823254585266113, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = []\n    if n == 0:\n        seq.append(0)\n    elif n == 1:\n        seq.append(1)\n    elif n == 2:\n        seq.extend([1, 1])\n    else:\n        seq.extend([0, 1, 1])\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 889, "completion_tokens": 291, "duration": 12.326824426651001, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 485, "completion_tokens": 151, "duration": 7.270780563354492, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 657, "completion_tokens": 193, "duration": 9.408217430114746, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares = sum_squares + squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 127, "duration": 7.667160987854004, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 640, "completion_tokens": 174, "duration": 7.040568828582764, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 535, "completion_tokens": 115, "duration": 8.230712413787842, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 657, "completion_tokens": 224, "duration": 12.009346723556519, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 6.924177646636963, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 530, "completion_tokens": 206, "duration": 8.373971223831177, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 5.183630704879761, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text.rstrip() + \"-\"\n            else:\n                new_text += \"_\"\n                count = 0\n        else:\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 615, "completion_tokens": 233, "duration": 5.284398794174194, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    valid_extensions = ['txt', 'exe', 'dll']\n    valid_start_chars = set('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n    dot_count = 0\n    before_dot = ''\n    after_dot = ''\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        elif ch == '.':\n            dot_count += 1\n            before_dot = file_name.split('.')[0]\n            after_dot = file_name.split('.')[1] if len(file_name.split('.')) > 1 else ''\n    \n    if digit_count > 3 or dot_count != 1 or not before_dot or before_dot[0] not in valid_start_chars or after_dot not in valid_extensions:\n        result = 'No'\n    else:\n        result = 'Yes'\n    \n    return result", "prompt_tokens": 944, "completion_tokens": 435, "duration": 13.233089685440063, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 700, "completion_tokens": 185, "duration": 9.179734945297241, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 683, "completion_tokens": 223, "duration": 7.6690051555633545, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    product = x_num * n_num\n    return product % x_denom == 0 and product % n_denom == 0", "prompt_tokens": 680, "completion_tokens": 178, "duration": 7.441579818725586, "result": "failed: test4", "passed": false}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    sum_dict = {i: digit_sum(num) for i, num in enumerate(nums)}\n    sorted_indices = sorted(sum_dict, key=lambda x: (sum_dict[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 639, "completion_tokens": 228, "duration": 7.6738598346710205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.16401481628418, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n):\n        a_i = i * i - i + 1\n        for j in range(i+1, n):\n            a_j = j * j - j + 1\n            for k in range(j+1, n):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count = count + 1\n    return count", "prompt_tokens": 742, "completion_tokens": 270, "duration": 8.51718783378601, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result.reverse()\n        \n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 9.086148738861084, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 722, "completion_tokens": 137, "duration": 5.959472179412842, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.136435031890869, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 6.7691850662231445, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 5.942113399505615, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 946, "completion_tokens": 232, "duration": 5.406497240066528, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s1 in s2 + s2\n\n    for i in range(len(b)):\n        if is_rotation(b, a[i:] + a[:i]):\n            return True\n    return False", "prompt_tokens": 575, "completion_tokens": 129, "duration": 6.271657228469849, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 483, "completion_tokens": 164, "duration": 6.415409564971924, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 568, "completion_tokens": 250, "duration": 7.819406986236572, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n    \n    if side_a_squared + side_b_squared == side_c_squared or side_a_squared + side_c_squared == side_b_squared or side_b_squared + side_c_squared == side_a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 626, "completion_tokens": 239, "duration": 5.841665267944336, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.92866587638855, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_needed = number + need\n    if remaining >= total_needed:\n        total_eaten_carrots = number + need\n        remaining_carrots = remaining - need\n    else:\n        total_eaten_carrots = remaining + number\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 927, "completion_tokens": 195, "duration": 4.016172409057617, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 849, "completion_tokens": 286, "duration": 9.233059883117676, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        return result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 195, "duration": 5.6998114585876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.350121974945068, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 582, "completion_tokens": 179, "duration": 9.642117977142334, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 637, "completion_tokens": 202, "duration": 6.325738906860352, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    open_paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            current_group += char\n        elif char == ')':\n            if open_paren_count > 0:\n                open_paren_count -= 1\n                current_group += char\n                if open_paren_count == 0:\n                    separate_groups.append(current_group)\n                    current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 652, "completion_tokens": 290, "duration": 9.90813136100769, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 5.950274467468262, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 569, "completion_tokens": 123, "duration": 5.4396796226501465, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 234, "duration": 6.893814563751221, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 6.328705787658691, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    levels = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        levels.append(max_depth)\n    \n    return levels", "prompt_tokens": 688, "completion_tokens": 313, "duration": 13.225834846496582, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.63375997543335, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 7.826607942581177, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 587, "completion_tokens": 203, "duration": 10.362234354019165, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 663, "completion_tokens": 142, "duration": 5.245331764221191, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 520, "completion_tokens": 165, "duration": 6.335536479949951, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string) or (len(string) == len(longest_string) and string < longest_string):\n            longest_string = string\n\n    return longest_string", "prompt_tokens": 559, "completion_tokens": 178, "duration": 6.0949530601501465, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 454, "completion_tokens": 100, "duration": 4.707902669906616, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current_prefix = \"\"\n    for ch in string:\n        current_prefix += ch\n        prefixes.append(current_prefix)\n    return prefixes", "prompt_tokens": 471, "completion_tokens": 144, "duration": 5.476663827896118, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i)\n        if i != n:\n            result += \" \"\n    return result", "prompt_tokens": 456, "completion_tokens": 107, "duration": 4.696252107620239, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 5.865429878234863, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 721, "completion_tokens": 206, "duration": 7.762658357620239, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 5.207258462905884, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    numeral_words = numbers.split()\n    numerals = [numeral_dict[word] for word in numeral_words]\n    sorted_numerals = [word for _, word in sorted(zip(numerals, numeral_words))]\n    \n    sorted_numbers = ' '.join(sorted_numerals)\n    \n    return sorted_numbers", "prompt_tokens": 703, "completion_tokens": 377, "duration": 10.54274034500122, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 716, "completion_tokens": 225, "duration": 7.454983472824097, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 644, "completion_tokens": 210, "duration": 6.370738983154297, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 498, "completion_tokens": 98, "duration": 4.763832092285156, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 4.4683239459991455, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 127, "duration": 5.482736587524414, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 5.508680105209351, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 4.941206693649292, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 5.581441879272461, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = \"\"\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 416, "completion_tokens": 77, "duration": 5.425240993499756, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.159984111785889, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 4.679619073867798, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 6.2741711139678955, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    x = None\n    if len(xs) % 2 == 0 and max(xs) != 0:\n        for i, coeff in enumerate(xs):\n            x = -coeff / xs[i + 1]\n        return x", "prompt_tokens": 872, "completion_tokens": 153, "duration": 51.680914640426636, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[0])\n            temp = temp[1:]\n    return result", "prompt_tokens": 719, "completion_tokens": 251, "duration": 8.214733600616455, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.286048889160156, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 499, "completion_tokens": 119, "duration": 3.7675418853759766, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 523, "completion_tokens": 174, "duration": 5.844151973724365, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted([x for x in l if l.index(x) % 2 == 0]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 605, "completion_tokens": 167, "duration": 8.027554750442505, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = []\n    for i in range((len(s) + 2) // 3):\n        groups.append(s[(3 * i):min((3 * i + 3), len(s))])\n    \n    for group in groups:\n        if len(group) == 3:\n            group = group[1:] + group[0]\n    \n    encoded_str = \"\".join(groups)\n    return encoded_str", "prompt_tokens": 819, "completion_tokens": 339, "duration": 8.19619107246399, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return b\n\n    counter = 0\n    index = 1\n    while counter < n:\n        fib_num = fibonacci(index)\n        if is_prime(fib_num):\n            counter += 1\n            if counter == n:\n                return fib_num\n        index += 1", "prompt_tokens": 647, "completion_tokens": 386, "duration": 13.29592514038086, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 735, "completion_tokens": 260, "duration": 8.458449840545654, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    leftCars = [i for i in range(1, n+1)]\n    rightCars = [i for i in range(n, 0, -1)]\n    leftIndex = 0\n    rightIndex = n - 1\n    \n    while leftIndex < n and rightIndex >= 0:\n        if leftCars[leftIndex] < rightCars[rightIndex]:\n            collisions += (rightIndex - leftIndex)\n            leftIndex += 1\n        else:\n            rightIndex -= 1\n    \n    return collisions", "prompt_tokens": 697, "completion_tokens": 260, "duration": 7.963723421096802, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    res = []\n    for num in l:\n        res.append(num + 1)\n    return res", "prompt_tokens": 539, "completion_tokens": 95, "duration": 3.570134162902832, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False", "prompt_tokens": 653, "completion_tokens": 123, "duration": 6.597896099090576, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 548, "completion_tokens": 154, "duration": 8.000454425811768, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 4.190767288208008, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_next = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(fib4_next)\n    return fib4_list[-1]", "prompt_tokens": 733, "completion_tokens": 222, "duration": 11.820514678955078, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 513, "completion_tokens": 166, "duration": 9.602555990219116, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 495, "completion_tokens": 119, "duration": 9.79697561264038, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    if n != 0:\n        result = pow(2, n, p)\n    return result", "prompt_tokens": 533, "completion_tokens": 105, "duration": 8.17357349395752, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 668, "completion_tokens": 310, "duration": 8.75917911529541, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 579, "completion_tokens": 116, "duration": 7.358411073684692, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for n in l:\n        if n >= t:\n            return False\n    return True", "prompt_tokens": 473, "completion_tokens": 84, "duration": 8.507699012756348, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    sum = x + y\n    return sum", "prompt_tokens": 398, "completion_tokens": 51, "duration": 6.378519535064697, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count_s0 = {}\n    char_count_s1 = {}\n    \n    for ch in s0:\n        char_count_s0[ch] = char_count_s0.get(ch, 0) + 1\n    \n    for ch in s1:\n        char_count_s1[ch] = char_count_s1.get(ch, 0) + 1\n    \n    return char_count_s0 == char_count_s1", "prompt_tokens": 758, "completion_tokens": 322, "duration": 11.786884069442749, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        temp = a + b\n        a, b = b, temp\n\n    return b", "prompt_tokens": 447, "completion_tokens": 159, "duration": 8.443997383117676, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 542, "completion_tokens": 160, "duration": 7.33944845199585, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    isIncreasing = True\n    isDecreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            isIncreasing = False\n        if l[i] < l[i+1]:\n            isDecreasing = False\n\n    return isIncreasing or isDecreasing", "prompt_tokens": 531, "completion_tokens": 176, "duration": 8.17375373840332, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 23.21514630317688, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 487, "completion_tokens": 166, "duration": 7.283190488815308, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.117041110992432, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 534, "completion_tokens": 154, "duration": 9.495983123779297, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 551, "completion_tokens": 112, "duration": 8.511474370956421, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 673, "completion_tokens": 224, "duration": 10.710008144378662, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        elif i == len(s) - 1 and s[i] == 'y':\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\")) # 2\nprint(vowels_count(\"ACEDY\")) # 3\nprint(vowels_count(\"hello\")) # 2\nprint(vowels_count(\"python\")) # 1", "prompt_tokens": 593, "completion_tokens": 220, "duration": 8.06146788597107, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return num_str\n    result = num_str[-shift:] + num_str[:-shift]\n    return result", "prompt_tokens": 554, "completion_tokens": 198, "duration": 8.438182592391968, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 6.438067197799683, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 833, "completion_tokens": 192, "duration": 8.335724353790283, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n        elif node % 2 == 0 and node == smallest_even_value:\n            smallest_even_index = min(i, smallest_even_index)\n    \n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 1057, "completion_tokens": 294, "duration": 10.317675352096558, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key, value in freq_map.items():\n        if key > value and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 710, "completion_tokens": 206, "duration": 8.126131534576416, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 7.288259983062744, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 192, "duration": 9.020129203796387, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 815, "completion_tokens": 122, "duration": 8.314765453338623, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 716, "completion_tokens": 212, "duration": 9.888236999511719, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 760, "completion_tokens": 193, "duration": 9.202739715576172, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2 or a > 100:\n        return False\n\n    prime_factors = []\n    for i in range(2, a+1):\n        while a % i == 0:\n            prime_factors.append(i)\n            a //= i\n\n    if len(prime_factors) != 3:\n        return False\n\n    return all(is_prime(factor) for factor in prime_factors)", "prompt_tokens": 594, "completion_tokens": 319, "duration": 9.096834182739258, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 611, "completion_tokens": 112, "duration": 6.332601308822632, "result": "timed out", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    b = round(abs(a) ** (1/3))\n    return b ** 3 == abs(a)", "prompt_tokens": 543, "completion_tokens": 94, "duration": 8.054641723632812, "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 8.711262226104736, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\" + bin(decimal)[2:] + \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 114, "duration": 6.503493785858154, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 7.959896802902222, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1093, "completion_tokens": 557, "duration": 13.638757228851318, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 5.844974756240845, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 7.858846187591553, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum", "prompt_tokens": 603, "completion_tokens": 114, "duration": 5.749872922897339, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.956650972366333, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 636, "completion_tokens": 166, "duration": 6.100876092910767, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 917, "completion_tokens": 215, "duration": 8.823343276977539, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n    return sorted_array", "prompt_tokens": 788, "completion_tokens": 169, "duration": 6.132441759109497, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 6.52505350112915, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 627, "completion_tokens": 223, "duration": 8.615846157073975, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.484896183013916, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 137, "duration": 5.265101432800293, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_index = (index + 2) % 26\n                new_ch = chr(ord('A') + new_index) if ch.isupper() else chr(ord('a') + new_index)\n                encoded_message += new_ch\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 659, "completion_tokens": 348, "duration": 10.702332496643066, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 9.152183532714844, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 235, "duration": 7.372809648513794, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers", "prompt_tokens": 645, "completion_tokens": 179, "duration": 7.6176347732543945, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 533, "completion_tokens": 106, "duration": 3.6439998149871826, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 5.163027763366699, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 692, "completion_tokens": 197, "duration": 5.21354341506958, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    stones_list.append(stones)\n    for _ in range(n - 1):\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n        stones_list.append(stones)\n    return stones_list", "prompt_tokens": 639, "completion_tokens": 189, "duration": 7.926565885543823, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 5.925601005554199, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even = num\n            break\n    return biggest_even", "prompt_tokens": 499, "completion_tokens": 106, "duration": 6.302265644073486, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 624, "completion_tokens": 156, "duration": 7.158075571060181, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 599, "completion_tokens": 206, "duration": 6.774924993515015, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 936, "completion_tokens": 285, "duration": 9.942957639694214, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 174, "duration": 7.673169851303101, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            if len(num_str) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 772, "completion_tokens": 183, "duration": 5.9000513553619385, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 7.876019239425659, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[min_idx:] + arr[:min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 961, "completion_tokens": 157, "duration": 4.811349153518677, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 6.083164215087891, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter in result_dict:\n            result_dict[letter] += 1\n        else:\n            result_dict[letter] = 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [key for key, value in result_dict.items() if value == max_count]\n    max_dict = {letter: max_count for letter in max_letters}\n    \n    return max_dict", "prompt_tokens": 762, "completion_tokens": 324, "duration": 10.718456745147705, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start, end = 0, len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 772, "completion_tokens": 289, "duration": 9.204214096069336, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for idx, string in enumerate(lst):\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{idx}ng {string} of the {idx}nput.\")\n    return result_lst", "prompt_tokens": 729, "completion_tokens": 207, "duration": 6.600450038909912, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = 0\n\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum", "prompt_tokens": 529, "completion_tokens": 164, "duration": 4.593306541442871, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1038, "completion_tokens": 180, "duration": 7.368067502975464, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 704, "completion_tokens": 146, "duration": 5.233784437179565, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.lower() in consonants)\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 793, "completion_tokens": 257, "duration": 8.173205375671387, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants:\n            if word[i+1] in vowels and word[i+2] in consonants:\n                closest_vowel = word[i+1]\n                break\n                \n    return closest_vowel", "prompt_tokens": 770, "completion_tokens": 380, "duration": 11.669082403182983, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 774, "completion_tokens": 310, "duration": 6.65639591217041, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr_copy = arr.copy()\n    arr_copy.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr_copy[i])\n    return result", "prompt_tokens": 788, "completion_tokens": 140, "duration": 7.889159440994263, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 534, "completion_tokens": 140, "duration": 6.291079759597778, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 612, "completion_tokens": 163, "duration": 5.229433298110962, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_numbers.append(1)\n\n    return sorted(odd_numbers)", "prompt_tokens": 823, "completion_tokens": 193, "duration": 7.768603563308716, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == \"\":\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['1', '3', '5', '7', '8', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['4', '6', '9', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '2':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    return True", "prompt_tokens": 971, "completion_tokens": 374, "duration": 13.281129598617554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 6.810254335403442, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    sorted = True\n\n    for num in lst:\n        if num == prev:\n            has_duplicate = True\n        if prev is not None and num < prev:\n            sorted = False\n            break\n        prev = num\n\n    if has_duplicate:\n        sorted = False\n\n    return sorted", "prompt_tokens": 907, "completion_tokens": 229, "duration": 11.059670209884644, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if length < 2:\n        return \"NO\"\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1014, "completion_tokens": 399, "duration": 10.237725496292114, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 636, "completion_tokens": 217, "duration": 5.923164129257202, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(cell):\n        neighbors = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = cell[0] + dx, cell[1] + dy\n            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]):\n                neighbors.append((new_x, new_y))\n        return neighbors\n\n    def is_within_boundaries(cell):\n        return 0 <= cell[0] < len(grid) and 0 <= cell[1] < len(grid[0])\n\n    def dfs(cell, path, visited):\n        visited.add(cell)\n        path.append(grid[cell[0]][cell[1]])\n\n        if len(path) == k:\n            return path\n\n        for neighbor in get_neighbors(cell):\n            if neighbor not in visited:\n                new_path = dfs(neighbor, path.copy(), visited.copy())\n                if new_path:\n                    return new_path\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited_cells = set()\n            path = dfs((i, j), [], visited_cells)\n            if path:\n                if min_path is None or path < min_path:\n                    min_path = path\n\n    return min_path", "prompt_tokens": 1284, "completion_tokens": 524, "duration": 11.527818441390991, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = []\n    if n == 0:\n        seq.append(0)\n    elif n == 1:\n        seq.append(1)\n    elif n == 2:\n        seq.append(1)\n    else:\n        seq.extend([0, 1, 1])\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n    return seq", "prompt_tokens": 885, "completion_tokens": 281, "duration": 11.6746985912323, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 480, "completion_tokens": 139, "duration": 7.451700448989868, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 658, "completion_tokens": 186, "duration": 10.535932302474976, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.386896371841431, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 649, "completion_tokens": 195, "duration": 6.7638750076293945, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 532, "completion_tokens": 112, "duration": 4.974611759185791, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 231, "duration": 8.826000928878784, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 744, "completion_tokens": 314, "duration": 10.924941778182983, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 210, "duration": 8.240001678466797, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 8.492324113845825, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            if count > 2:\n                new_text += \"-\"\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 614, "completion_tokens": 233, "duration": 6.946147203445435, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(c.isdigit() for c in file_name)\n    dot_index = file_name.find('.')\n    \n    if digits_count <= 3 and dot_index != -1 and file_name.count('.') == 1:\n        before_dot = file_name[:dot_index]\n        after_dot = file_name[dot_index + 1:]\n        \n        if before_dot and before_dot[0].isalpha() and after_dot in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    \n    return 'No'", "prompt_tokens": 835, "completion_tokens": 263, "duration": 10.559362411499023, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 9.032660961151123, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 698, "completion_tokens": 238, "duration": 6.955670118331909, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_den * n_den)\n    \n    return product.is_integer()", "prompt_tokens": 653, "completion_tokens": 145, "duration": 9.8668794631958, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    sum_dict = {}\n    for i, num in enumerate(nums):\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        sum_dict[num] = (sum_digits, i)\n    sorted_indices = sorted(sum_dict.items(), key=lambda x: (x[1][0], x[1][1]))\n    sorted_nums = [item[0] for item in sorted_indices]\n    return sorted_nums", "prompt_tokens": 678, "completion_tokens": 286, "duration": 11.766062498092651, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.140268325805664, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 9.672067642211914, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    result.sort(key=lambda x: planet_positions[x])\n    \n    return tuple(result)", "prompt_tokens": 849, "completion_tokens": 330, "duration": 9.95184850692749, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 744, "completion_tokens": 159, "duration": 7.074122905731201, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 9.108837127685547, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares if sum_of_squares > 0 else 0", "prompt_tokens": 623, "completion_tokens": 165, "duration": 7.6355743408203125, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 7.053365230560303, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 943, "completion_tokens": 232, "duration": 6.605475902557373, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a = a + a\n    for i in range(n):\n        if b in a[i:i+n]:\n            return True\n    return False", "prompt_tokens": 649, "completion_tokens": 180, "duration": 7.334062099456787, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 6.69780707359314, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    roman_values = [(value, symbol) for value, symbol in roman_numerals.items()]\n    roman_values.sort(reverse=True)\n    \n    for value, symbol in roman_values:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n            \n    return roman_numeral", "prompt_tokens": 613, "completion_tokens": 321, "duration": 8.25016164779663, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 543, "completion_tokens": 111, "duration": 6.271080017089844, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 599, "completion_tokens": 186, "duration": 7.641234636306763, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if total_eaten_carrots <= remaining else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 171, "duration": 4.557669401168823, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 849, "completion_tokens": 286, "duration": 7.781427621841431, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 7.428126096725464, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.958842515945435, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 540, "completion_tokens": 135, "duration": 8.14941930770874, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 641, "completion_tokens": 215, "duration": 5.202189207077026, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 693, "completion_tokens": 332, "duration": 9.394906282424927, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 7.2301366329193115, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 4.379031419754028, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return absolute_diff", "prompt_tokens": 674, "completion_tokens": 236, "duration": 7.734328508377075, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 525, "completion_tokens": 144, "duration": 5.888391733169556, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        depth_counter = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth_counter += 1\n            elif char == ')':\n                depth_counter -= 1\n            max_depth = max(max_depth, depth_counter)\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 6.485997438430786, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 5.338972330093384, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 7.319028377532959, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 587, "completion_tokens": 203, "duration": 5.4105916023254395, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 637, "completion_tokens": 115, "duration": 5.031491994857788, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 499, "completion_tokens": 144, "duration": 5.64988374710083, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n        elif len(string) == len(longest_str):\n            if string < longest_str:\n                longest_str = string\n\n    return longest_str", "prompt_tokens": 583, "completion_tokens": 209, "duration": 4.906757116317749, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 6.382936000823975, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 476, "completion_tokens": 147, "duration": 5.768659830093384, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 451, "completion_tokens": 103, "duration": 3.1327784061431885, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 495, "completion_tokens": 149, "duration": 5.363557815551758, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 730, "completion_tokens": 213, "duration": 9.309628009796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 140, "duration": 3.8696680068969727, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    numerals = numbers.split()\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_to_int[x])\n    \n    return ' '.join(sorted_numerals)", "prompt_tokens": 592, "completion_tokens": 262, "duration": 7.614884376525879, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 722, "completion_tokens": 230, "duration": 6.9162187576293945, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 620, "completion_tokens": 186, "duration": 7.1168882846832275, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = [value for value in values if type(value) == int]\n    return filtered_values", "prompt_tokens": 491, "completion_tokens": 94, "duration": 6.656501293182373, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 4.590239524841309, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 433, "completion_tokens": 122, "duration": 3.815062999725342, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.245833396911621, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 491, "completion_tokens": 119, "duration": 5.418781995773315, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 458, "completion_tokens": 162, "duration": 4.109272241592407, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 4.567178964614868, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.039777994155884, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    res = [num for num in l if num > 0]\n    return res", "prompt_tokens": 538, "completion_tokens": 81, "duration": 4.035557985305786, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 167, "duration": 7.466082572937012, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n\n    x = 0.0\n    tolerance = 1e-6\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        fx = poly(xs, x)\n        if abs(fx) < tolerance:\n            return x\n        x -= fx / poly([i * coeff for i, coeff in enumerate(xs)], x)\n\n    return None", "prompt_tokens": 919, "completion_tokens": 253, "duration": 8.219380617141724, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    temp.sort()\n    \n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    \n    return result", "prompt_tokens": 742, "completion_tokens": 293, "duration": 6.697790861129761, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return sorted(unique_list)", "prompt_tokens": 462, "completion_tokens": 96, "duration": 4.815876245498657, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 536, "completion_tokens": 154, "duration": 8.050278663635254, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 511, "completion_tokens": 157, "duration": 4.009467124938965, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 673, "completion_tokens": 274, "duration": 8.671151876449585, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    decoded_groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)", "prompt_tokens": 718, "completion_tokens": 227, "duration": 8.769471406936646, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_num = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_num)\n\n        if is_prime(next_num):\n            num = next_num\n            count += 1\n\n    return num", "prompt_tokens": 594, "completion_tokens": 277, "duration": 7.571521759033203, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 731, "completion_tokens": 256, "duration": 7.687140464782715, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    \n    for i in range(n):\n        left_to_right[i] = True\n        right_to_left[i] = True\n        \n    for i in range(n):\n        if left_to_right[i] and right_to_left[i]:\n            collisions += 1\n            \n    return collisions", "prompt_tokens": 711, "completion_tokens": 243, "duration": 7.2898266315460205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 4.930763483047485, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 137, "duration": 5.747577905654907, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 549, "completion_tokens": 155, "duration": 9.706682682037354, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 68, "duration": 2.194321393966675, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(sum(fib4_list[-4:]))\n    return fib4_list[n]", "prompt_tokens": 713, "completion_tokens": 186, "duration": 8.318433046340942, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 518, "completion_tokens": 171, "duration": 6.786031484603882, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True", "prompt_tokens": 511, "completion_tokens": 172, "duration": 4.1636974811553955, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent //= 2\n    return result", "prompt_tokens": 592, "completion_tokens": 207, "duration": 9.073427438735962, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 623, "completion_tokens": 265, "duration": 12.750241994857788, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 4.459715366363525, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 6.128603219985962, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.497955560684204, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 693, "completion_tokens": 260, "duration": 6.761663198471069, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 7.206234455108643, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack", "prompt_tokens": 544, "completion_tokens": 160, "duration": 3.601958990097046, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 495, "completion_tokens": 118, "duration": 2.9664864540100098, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    set1 = set(l1)\n    set2 = set(l2)\n    for elem in sorted(set1):\n        if elem in set2:\n            common_elements.append(elem)\n    return common_elements", "prompt_tokens": 589, "completion_tokens": 163, "duration": 9.850294828414917, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 169, "duration": 9.287101984024048, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 3.0047435760498047, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 540, "completion_tokens": 164, "duration": 4.371818542480469, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 562, "completion_tokens": 174, "duration": 5.773558855056763, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 6.724377632141113, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 601, "completion_tokens": 160, "duration": 6.011983633041382, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    digits = str(x)\n    length = len(digits)\n    \n    if shift > length:\n        result = digits[::-1]\n    else:\n        new_position = shift % length\n        result = digits[new_position:] + digits[:new_position]\n    \n    return result", "prompt_tokens": 584, "completion_tokens": 226, "duration": 5.009269714355469, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 4.016589164733887, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 763, "completion_tokens": 125, "duration": 4.8399388790130615, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1052, "completion_tokens": 287, "duration": 8.941118717193604, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    greatest_int = -1\n\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            greatest_int = max(greatest_int, num)\n\n    return greatest_int", "prompt_tokens": 706, "completion_tokens": 206, "duration": 6.159113883972168, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 620, "completion_tokens": 159, "duration": 5.8702733516693115, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 189, "duration": 5.760178089141846, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    reversed_q = q[::-1]\n    if q != reversed_q:\n        return False\n    sum_elements = sum(q)\n    if sum_elements <= w:\n        return True\n    return False", "prompt_tokens": 873, "completion_tokens": 206, "duration": 4.421625375747681, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n            \n    return min_changes", "prompt_tokens": 742, "completion_tokens": 265, "duration": 7.159626245498657, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 759, "completion_tokens": 192, "duration": 3.9367597103118896, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 218, "duration": 7.626732110977173, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == n:\n        return True\n    if n == 1:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 626, "completion_tokens": 168, "duration": 7.436757802963257, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 564, "completion_tokens": 118, "duration": 2.9864273071289062, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.05222487449646, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    binary_str += bin(decimal)[2:]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 120, "duration": 5.591553449630737, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 590, "completion_tokens": 163, "duration": 10.05155086517334, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 10.378295660018921, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 7.451884031295776, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 425, "completion_tokens": 140, "duration": 5.365512132644653, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 634, "completion_tokens": 149, "duration": 10.186700344085693, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 5.060767650604248, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 623, "completion_tokens": 163, "duration": 3.816547155380249, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in reversed(list(enumerate(row))):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 928, "completion_tokens": 228, "duration": 5.835828542709351, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 885, "completion_tokens": 281, "duration": 8.54258131980896, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 4.707912445068359, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for element in lst:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif element < second_smallest and element != smallest:\n            second_smallest = element\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 628, "completion_tokens": 224, "duration": 7.116870164871216, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 3.8493218421936035, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 616, "completion_tokens": 155, "duration": 4.263761043548584, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in 'aeiou':\n                encoded_message += chr((ord(ch) - ord('a') + 2) % 26 + ord('A'))\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 594, "completion_tokens": 201, "duration": 6.194804668426514, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        return False\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 9.298041343688965, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    if is_lower and is_upper:\n        return False\n    else:\n        return True", "prompt_tokens": 720, "completion_tokens": 220, "duration": 5.124977350234985, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes", "prompt_tokens": 651, "completion_tokens": 184, "duration": 7.349036455154419, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 534, "completion_tokens": 107, "duration": 3.8192601203918457, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 462, "completion_tokens": 112, "duration": 3.362002372741699, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    diff_floor = num - floor_num\n    diff_ceil = ceil_num - num\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 699, "completion_tokens": 200, "duration": 7.885636806488037, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(1, n+1):\n        stones_list.append(stones)\n\n        if n % 2 == 1:\n            stones = stones + 2\n        else:\n            stones = stones + 1\n\n    return stones_list", "prompt_tokens": 601, "completion_tokens": 150, "duration": 6.990697145462036, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 619, "completion_tokens": 198, "duration": 4.46977424621582, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 5.090397357940674, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = 0\n        count = 0\n        for i in range(n, m+1):\n            total_sum += i\n            count += 1\n        avg = round(total_sum / count)\n        return bin(avg)", "prompt_tokens": 634, "completion_tokens": 168, "duration": 6.1039347648620605, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 574, "completion_tokens": 183, "duration": 4.478252410888672, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 981, "completion_tokens": 339, "duration": 9.865277290344238, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 6.072218894958496, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            if len(num_str) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 773, "completion_tokens": 184, "duration": 4.600625038146973, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 6.463974237442017, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[-min_idx:] + arr[:-min_idx]\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "prompt_tokens": 966, "completion_tokens": 177, "duration": 6.053122282028198, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 != 0 and even_count > 0:\n            even_count -= 1\n    if even_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 769, "completion_tokens": 209, "duration": 5.240158557891846, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 727, "completion_tokens": 250, "duration": 7.6201863288879395, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    reversed_str = modified_str[::-1]\n    palindrome_check = modified_str == reversed_str\n    return modified_str, palindrome_check", "prompt_tokens": 716, "completion_tokens": 193, "duration": 7.08928370475769, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 729, "completion_tokens": 210, "duration": 6.689289093017578, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.608747720718384, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                times += math.ceil(1 / capacity)\n    return times", "prompt_tokens": 1053, "completion_tokens": 200, "duration": 8.078535318374634, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 721, "completion_tokens": 164, "duration": 4.208631992340088, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.lower() in consonants)\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 792, "completion_tokens": 254, "duration": 8.062381982803345, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n            closest_vowel = word[i+1]\n            break\n    \n    return closest_vowel", "prompt_tokens": 693, "completion_tokens": 232, "duration": 6.74184513092041, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 705, "completion_tokens": 193, "duration": 5.0170087814331055, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 775, "completion_tokens": 118, "duration": 6.528962850570679, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 5.155088663101196, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 4.5974650382995605, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.593236207962036, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 966, "completion_tokens": 340, "duration": 8.731836795806885, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 5.990063190460205, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if prev is not None:\n            if num < prev:\n                sorted = False\n                break\n            elif num == prev:\n                duplicate_count += 1\n                if duplicate_count > 1:\n                    sorted = False\n                    break\n            else:\n                duplicate_count = 1\n        prev = num\n    \n    return sorted", "prompt_tokens": 946, "completion_tokens": 288, "duration": 7.624547243118286, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 986, "completion_tokens": 369, "duration": 11.592144250869751, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        sum_magnitude += abs(num) * (-1 if num < 0 else 1)\n        product_sign *= (1 if num > 0 else (-1 if num < 0 else 0))\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 628, "completion_tokens": 217, "duration": 4.453997611999512, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(grid, cell):\n        neighbors = []\n        rows, cols = len(grid), len(grid[0])\n        x, y = cell\n        if x > 0:\n            neighbors.append((x - 1, y))\n        if x < rows - 1:\n            neighbors.append((x + 1, y))\n        if y > 0:\n            neighbors.append((x, y - 1))\n        if y < cols - 1:\n            neighbors.append((x, y + 1))\n        return neighbors\n\n    current_cell = (0, 0)\n    path = [grid[current_cell[0]][current_cell[1]]]\n    visited_cells = set([current_cell])\n\n    while len(path) < k:\n        neighbors = get_neighbors(grid, current_cell)\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]] if cell not in visited_cells else float('inf'))\n        path.append(grid[next_cell[0]][next_cell[1]])\n        visited_cells.add(next_cell)\n        current_cell = next_cell\n\n    return path", "prompt_tokens": 1275, "completion_tokens": 463, "duration": 12.12430191040039, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [0, 1]\n    if n < 2:\n        return seq[:n+1]\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(sum(seq[-3:]))\n    \n    return seq", "prompt_tokens": 839, "completion_tokens": 191, "duration": 8.803564071655273, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 482, "completion_tokens": 148, "duration": 3.56023907661438, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True", "prompt_tokens": 665, "completion_tokens": 282, "duration": 7.992246866226196, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 11.97780990600586, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 655, "completion_tokens": 204, "duration": 6.6148459911346436, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 550, "completion_tokens": 133, "duration": 8.011286735534668, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 660, "completion_tokens": 224, "duration": 7.86450719833374, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 329, "duration": 7.728757381439209, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 536, "completion_tokens": 219, "duration": 6.111661434173584, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.744043588638306, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += \"_\"\n        else:\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += ch\n            count = 0\n    return updated_text", "prompt_tokens": 615, "completion_tokens": 237, "duration": 8.214155912399292, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_present = False\n    valid_start_letter = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        if ch == '.':\n            dot_present = True\n        if ch.isalpha() and not valid_start_letter:\n            valid_start_letter = True\n        if dot_present and ch == 't' and file_name[file_name.index('.')+1:] in ['txt', 'exe', 'dll']:\n            valid_extension = True\n    \n    if digit_count <= 3 and dot_present and valid_start_letter and valid_extension:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 951, "completion_tokens": 416, "duration": 14.806900024414062, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 703, "completion_tokens": 188, "duration": 5.850692272186279, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 658, "completion_tokens": 199, "duration": 5.941842079162598, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    return product_num % product_den == 0", "prompt_tokens": 674, "completion_tokens": 173, "duration": 10.341116189956665, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (sum_of_digits(num), i) for i, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 617, "completion_tokens": 222, "duration": 6.7119834423065186, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = str(num)[0]\n            last_digit = str(num)[-1]\n            if int(first_digit) % 2 != 0 and int(last_digit) % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 592, "completion_tokens": 173, "duration": 5.5124428272247314, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 5.470510244369507, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    result = []\n    \n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        result = planets[start_index+1:end_index]\n    else:\n        result = planets[end_index+1:start_index]\n    \n    return tuple(sorted(result, key=lambda x: planets.index(x)))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 861, "completion_tokens": 395, "duration": 15.740866661071777, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 725, "completion_tokens": 140, "duration": 7.427424430847168, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 5.732486009597778, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 4.636084318161011, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.294835329055786, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 941, "completion_tokens": 228, "duration": 4.724808216094971, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    \n    if m > n:\n        return False\n    \n    a_concat = a + a\n    \n    for i in range(n - m + 1):\n        sub_a = a_concat[i:i+m]\n        sorted_sub_a = ''.join(sorted(sub_a))\n        sorted_b = ''.join(sorted(b))\n        \n        if sorted_sub_a == sorted_b:\n            return True\n    \n    return False", "prompt_tokens": 715, "completion_tokens": 300, "duration": 8.536213874816895, "result": "failed: test #2", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.730943918228149, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 566, "completion_tokens": 248, "duration": 7.852856397628784, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    \n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 4.89111065864563, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 593, "completion_tokens": 173, "duration": 3.769953489303589, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + remaining\n    remaining_carrots = remaining - (need - number)\n    if remaining_carrots < 0:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 936, "completion_tokens": 187, "duration": 7.01627254486084, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 764, "completion_tokens": 201, "duration": 6.764551877975464, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 586, "completion_tokens": 194, "duration": 3.9321882724761963, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 5.073227405548096, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 570, "completion_tokens": 151, "duration": 5.2439563274383545, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 594, "completion_tokens": 156, "duration": 4.91956353187561, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    balance = 0\n    \n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            \n        if balance == 0:\n            separate_groups.append(current_group)\n            current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 644, "completion_tokens": 260, "duration": 5.7337188720703125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 51.663491010665894, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 4.4272141456604, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 235, "duration": 7.112070560455322, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 527, "completion_tokens": 147, "duration": 5.763195514678955, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 689, "completion_tokens": 314, "duration": 7.48541784286499, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 101, "duration": 4.061604022979736, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 5.233131647109985, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num >= rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 592, "completion_tokens": 217, "duration": 6.038506984710693, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 632, "completion_tokens": 110, "duration": 4.269609689712524, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 502, "completion_tokens": 147, "duration": 4.702597379684448, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 583, "completion_tokens": 202, "duration": 5.765356063842773, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 3.7417712211608887, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 158, "duration": 4.291517496109009, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 455, "completion_tokens": 101, "duration": 4.180405139923096, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 4.962226152420044, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 720, "completion_tokens": 205, "duration": 5.922952890396118, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 143, "duration": 4.708606958389282, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numbers = [num_dict[numeral] for numeral in numerals]\n    sorted_numbers = sorted(numbers)\n    sorted_numerals = [key for value in sorted_numbers for key, num in num_dict.items() if num == value]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 588, "completion_tokens": 265, "duration": 7.5679216384887695, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 5.168859243392944, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_val = maximum - minimum\n    rescaled_numbers = [(num - minimum) / range_val for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 630, "completion_tokens": 191, "duration": 5.3534324169158936, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 497, "completion_tokens": 104, "duration": 4.826690912246704, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 3.620826244354248, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 99, "duration": 4.107605457305908, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 616, "completion_tokens": 173, "duration": 4.943999528884888, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 4.245501756668091, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.632277965545654, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 3.8373284339904785, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 4.547562122344971, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 540, "completion_tokens": 78, "duration": 3.3640975952148438, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 4.470333099365234, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        return None\n    \n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    for x in range(-1000, 1001):\n        result = poly(xs, x)\n        if abs(result) < 0.0001:\n            return x / 100.0\n    \n    return None", "prompt_tokens": 893, "completion_tokens": 249, "duration": 5.996089458465576, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 724, "completion_tokens": 271, "duration": 7.416188716888428, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return sorted(unique_list)", "prompt_tokens": 461, "completion_tokens": 95, "duration": 3.9047911167144775, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 116, "duration": 4.493762493133545, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count", "prompt_tokens": 522, "completion_tokens": 173, "duration": 6.246347904205322, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        if i % 2 != 0 or i == len(l) - 1:\n            result.extend(sorted(temp))\n            temp = []\n    return result", "prompt_tokens": 623, "completion_tokens": 193, "duration": 6.013986110687256, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 750, "completion_tokens": 257, "duration": 6.290401220321655, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for i in range(len(fib_list) - 1, -1, -1):\n        if is_prime(fib_list[i]):\n            num = fib_list[i]\n            break\n\n    return num", "prompt_tokens": 575, "completion_tokens": 287, "duration": 11.658894777297974, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 734, "completion_tokens": 259, "duration": 6.988856077194214, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    left_to_right_cars = [random.random() for _ in range(n)]\n    right_to_left_cars = [random.random() for _ in range(n)]\n    left_to_right_cars.sort()\n    right_to_left_cars.sort(reverse=True)\n    \n    for i in range(n):\n        if left_to_right_cars[i] < right_to_left_cars[i]:\n            collisions += 1\n    \n    return collisions", "prompt_tokens": 742, "completion_tokens": 284, "duration": 8.782756328582764, "result": "failed: name 'random' is not defined", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_l = []\n    for num in l:\n        new_num = num + 1\n        new_l.append(new_num)\n    return new_l", "prompt_tokens": 533, "completion_tokens": 99, "duration": 4.317986249923706, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 679, "completion_tokens": 155, "duration": 4.871266841888428, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 5.6255176067352295, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 4.3902716636657715, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 724, "completion_tokens": 204, "duration": 9.785308361053467, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 4.322832345962524, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 506, "completion_tokens": 131, "duration": 7.456548452377319, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 547, "completion_tokens": 101, "duration": 3.960958242416382, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 621, "completion_tokens": 263, "duration": 10.058894157409668, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.727717161178589, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 474, "completion_tokens": 81, "duration": 1.8834302425384521, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 4.558561086654663, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    \n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 699, "completion_tokens": 267, "duration": 8.779561758041382, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 156, "duration": 6.970234632492065, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 565, "completion_tokens": 185, "duration": 8.336809396743774, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 493, "completion_tokens": 116, "duration": 9.286455631256104, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 6.399100303649902, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 9.567576169967651, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.980905771255493, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 531, "completion_tokens": 158, "duration": 7.4610021114349365, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 554, "completion_tokens": 115, "duration": 4.196539640426636, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 679, "completion_tokens": 239, "duration": 7.28963041305542, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n\n    for i, ch in enumerate(s):\n        if ch in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if ch == 'y' and i == len(s) - 1:\n            count += 1\n\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 610, "completion_tokens": 239, "duration": 7.414624929428101, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    \n    if shift > length:\n        result = num_str[::-1]\n    else:\n        split_index = length - shift\n        result = num_str[split_index:] + num_str[:split_index]\n    \n    return result", "prompt_tokens": 585, "completion_tokens": 233, "duration": 6.901093482971191, "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 5.901568651199341, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 811, "completion_tokens": 174, "duration": 7.144964694976807, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1048, "completion_tokens": 283, "duration": 8.271170616149902, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    max_val = -1\n    for num in lst:\n        freq_map[num] = freq_map.get(num, 0) + 1\n        if num > 0 and freq_map[num] >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 735, "completion_tokens": 217, "duration": 8.527355432510376, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    min_ptr = 0\n    max_ptr = len(lst) - 1\n    while min_ptr <= max_ptr:\n        result_lst.append(lst[min_ptr])\n        if min_ptr != max_ptr:\n            result_lst.append(lst[max_ptr])\n        min_ptr += 1\n        max_ptr -= 1\n    return result_lst", "prompt_tokens": 643, "completion_tokens": 222, "duration": 13.05530858039856, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 6.674649715423584, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 5.975691080093384, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 715, "completion_tokens": 221, "duration": 8.966758966445923, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 199, "duration": 9.658582210540771, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, a):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 517, "completion_tokens": 217, "duration": 5.831201791763306, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 614, "completion_tokens": 112, "duration": 9.679574489593506, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 550, "completion_tokens": 103, "duration": 7.368892431259155, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 926, "completion_tokens": 120, "duration": 5.1055357456207275, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 672, "completion_tokens": 200, "duration": 5.564323663711548, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 3.519352674484253, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 13.155153036117554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 5.343882083892822, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 5.525898218154907, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 613, "completion_tokens": 128, "duration": 4.580447673797607, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 6.54119610786438, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 626, "completion_tokens": 166, "duration": 6.784099578857422, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 913, "completion_tokens": 230, "duration": 10.814305305480957, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 885, "completion_tokens": 281, "duration": 5.729260683059692, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 623, "completion_tokens": 206, "duration": 6.989534378051758, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for num in lst:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n        if second_smallest == float('inf'):\n            return None\n        else:\n            return second_smallest", "prompt_tokens": 625, "completion_tokens": 219, "duration": 7.189769268035889, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.15781569480896, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 147, "duration": 5.224349737167358, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = (ord(ch.lower()) - ord('a') + 2) % 26\n                new_ch = chr(ord('a') + index)\n                encoded_message += new_ch.swapcase()\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 630, "completion_tokens": 299, "duration": 9.346577644348145, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    sum_digits = calculate_sum_of_digits(largest_prime)\n    return sum_digits", "prompt_tokens": 1010, "completion_tokens": 357, "duration": 10.612030506134033, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 7.414623498916626, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 5.366224050521851, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 3.9320497512817383, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 117, "duration": 3.4213221073150635, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 687, "completion_tokens": 191, "duration": 8.260610580444336, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n\n        if stones % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 9.353951930999756, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 622, "completion_tokens": 204, "duration": 5.094830751419067, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        largest_even = -1\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                largest_even = num\n                break\n        return largest_even", "prompt_tokens": 524, "completion_tokens": 145, "duration": 5.979604005813599, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 171, "duration": 6.11946439743042, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                break\n        else:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 600, "completion_tokens": 189, "duration": 6.134400367736816, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 955, "completion_tokens": 305, "duration": 9.855578422546387, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 581, "completion_tokens": 154, "duration": 6.634573459625244, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 8.999771118164062, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.13324522972107, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr = arr[-1:] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 987, "completion_tokens": 199, "duration": 8.803287506103516, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 789, "completion_tokens": 226, "duration": 6.773572206497192, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values(), default=0)\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 733, "completion_tokens": 250, "duration": 6.861614942550659, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 701, "completion_tokens": 167, "duration": 6.0306737422943115, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, s, s, s))\n    return result", "prompt_tokens": 728, "completion_tokens": 200, "duration": 5.291006803512573, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.3846375942230225, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    total_water = sum(sum(row) for row in grid)\n    count = math.ceil(total_water / capacity)\n    return count", "prompt_tokens": 1033, "completion_tokens": 174, "duration": 7.933289051055908, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 741, "completion_tokens": 184, "duration": 4.711436033248901, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for word in s.split():\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 770, "completion_tokens": 226, "duration": 9.30891752243042, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_consonant = False\n    vowels = \"aeiouAEIOU\"\n    \n    for i in range(len(word) - 1, 1, -1):\n        if word[i] not in vowels and found_consonant:\n            if word[i-1] in vowels:\n                closest_vowel = word[i-1]\n                break\n        if word[i] not in vowels:\n            found_consonant = True\n    \n    return closest_vowel", "prompt_tokens": 710, "completion_tokens": 266, "duration": 6.6567158699035645, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 305, "duration": 7.457734823226929, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 776, "completion_tokens": 104, "duration": 6.488182544708252, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 7.538103103637695, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if arr[i] >= 10 and arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 619, "completion_tokens": 174, "duration": 7.64709210395813, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 7.241335391998291, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == \"\":\n        return False\n\n    month, day, year = date.split('-')\n\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    if year < 1 or year > 9999:\n        return False\n\n    if len(str(year)) != 4:\n        return False\n\n    return True", "prompt_tokens": 974, "completion_tokens": 402, "duration": 10.212189197540283, "result": "failed: not enough values to unpack (expected 3, got 1)", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split(' ')\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if count > 0:\n            return count\n    return words", "prompt_tokens": 751, "completion_tokens": 293, "duration": 10.070661544799805, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicates = 0\n    for num in lst:\n        if num <= prev:\n            duplicates += 1\n        if duplicates > 1:\n            return False\n        prev = num\n    return True", "prompt_tokens": 910, "completion_tokens": 209, "duration": 7.108954191207886, "result": "failed: '<=' not supported between instances of 'int' and 'NoneType'", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 993, "completion_tokens": 373, "duration": 11.359389305114746, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        if num > 0:\n            sum_magnitude += abs(num)\n        elif num < 0:\n            sum_magnitude -= abs(num)\n        \n        product_sign *= num // abs(num) if num != 0 else 1\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 651, "completion_tokens": 245, "duration": 11.246510982513428, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(grid, cell):\n        neighbors = []\n        row, col = cell\n        if row > 0:\n            neighbors.append((row - 1, col))\n        if row < len(grid) - 1:\n            neighbors.append((row + 1, col))\n        if col > 0:\n            neighbors.append((row, col - 1))\n        if col < len(grid[0]) - 1:\n            neighbors.append((row, col + 1))\n        return neighbors\n\n    current_cell = (0, 0)\n    path = []\n    visited_cells = set()\n\n    while len(path) < k:\n        path.append(grid[current_cell[0]][current_cell[1]])\n        visited_cells.add(current_cell)\n        neighbors = get_neighbors(grid, current_cell)\n        next_cell = min(neighbors, key=lambda x: grid[x[0]][x[1]] if x not in visited_cells else float('inf'))\n        current_cell = next_cell\n\n    return path", "prompt_tokens": 1402, "completion_tokens": 567, "duration": 10.971845149993896, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n <= 1:\n        return sequence[:n+1]\n    if n == 2:\n        return sequence\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence", "prompt_tokens": 920, "completion_tokens": 293, "duration": 10.77800989151001, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 7.077935457229614, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 663, "completion_tokens": 277, "duration": 11.414725542068481, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.811894655227661, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 640, "completion_tokens": 174, "duration": 3.861126184463501, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 560, "completion_tokens": 146, "duration": 5.319288015365601, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        elif num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 644, "completion_tokens": 185, "duration": 6.228416204452515, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    else:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n        \n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 700, "completion_tokens": 303, "duration": 13.760346412658691, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4:\n            if even_sum == n:\n                return True\n    return False", "prompt_tokens": 545, "completion_tokens": 207, "duration": 6.987517356872559, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.561175346374512, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                if updated_text.endswith(\"-\"):\n                    updated_text = updated_text[:-1] + \"-\"\n                else:\n                    updated_text += \"-\"\n        else:\n            if count > 2:\n                updated_text = updated_text.replace(\" \" * (count - 1), \"-\")\n                count = 0\n            if ch == \" \":\n                updated_text += \"_\"\n            else:\n                updated_text += ch\n    return updated_text", "prompt_tokens": 640, "completion_tokens": 300, "duration": 8.990325927734375, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_found = False\n    valid_extension = False\n    \n    for char in file_name:\n        if char.isdigit():\n            digit_count += 1\n        elif char == '.':\n            if dot_found or file_name.index(char) == 0 or file_name.index(char) == len(file_name) - 1:\n                valid_extension = False\n                break\n            dot_found = True\n        elif char.isalpha():\n            if not dot_found:\n                valid_extension = True\n        else:\n            valid_extension = False\n            break\n    \n    if digit_count > 3 or not dot_found or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 926, "completion_tokens": 394, "duration": 9.805090427398682, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 10.15857744216919, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 668, "completion_tokens": 210, "duration": 6.212286472320557, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_denom * n_denom)\n    \n    return product.is_integer()", "prompt_tokens": 674, "completion_tokens": 169, "duration": 7.251677513122559, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {num: sum(int(digit) for digit in str(abs(num))) for num in nums}\n    return sorted(nums, key=lambda x: (digit_sums[x], nums.index(x)))", "prompt_tokens": 595, "completion_tokens": 158, "duration": 3.1915698051452637, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 8.350568532943726, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 10.315535068511963, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_order = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    \n    start = min(planet_order[planet1], planet_order[planet2])\n    end = max(planet_order[planet1], planet_order[planet2])\n    \n    result = [planet for planet in planets if start < planet_order[planet] < end]\n    \n    return tuple(result)", "prompt_tokens": 830, "completion_tokens": 295, "duration": 9.169644832611084, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 758, "completion_tokens": 178, "duration": 6.273123741149902, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.178083896636963, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 5.509126663208008, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 851, "completion_tokens": 185, "duration": 11.01564073562622, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 965, "completion_tokens": 253, "duration": 9.247348546981812, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if n != m:\n        return False\n    concat_a = a + a\n    for i in range(m):\n        sub_a = concat_a[i:i+m]\n        if sub_a == b:\n            return True\n    return False", "prompt_tokens": 677, "completion_tokens": 232, "duration": 7.9993133544921875, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.571279764175415, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    roman_values = [(k, v) for k, v in roman_numerals.items()]\n    \n    for value, numeral in roman_values:\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 600, "completion_tokens": 300, "duration": 9.868966579437256, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    longest_side = max(side_a_squared, side_b_squared, side_c_squared)\n\n    if longest_side == side_a_squared + side_b_squared:\n        return True\n    elif longest_side == side_a_squared + side_c_squared:\n        return True\n    elif longest_side == side_b_squared + side_c_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 675, "completion_tokens": 314, "duration": 7.4550793170928955, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_unique_chars = len(unique_chars)\n            max_word = word\n\n    return max_word", "prompt_tokens": 592, "completion_tokens": 172, "duration": 4.818901300430298, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    if remaining >= total_eaten_carrots:\n        remaining_carrots = remaining - total_eaten_carrots\n        total_eaten_carrots = total_eaten_carrots\n    else:\n        total_eaten_carrots = remaining + number\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 950, "completion_tokens": 230, "duration": 4.539747476577759, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 773, "completion_tokens": 210, "duration": 8.481446027755737, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 585, "completion_tokens": 188, "duration": 6.071267127990723, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if text == '':\n        return None\n    \n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 97, "duration": 3.918323516845703, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 550, "completion_tokens": 145, "duration": 5.199394464492798, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 643, "completion_tokens": 208, "duration": 5.237311601638794, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    \n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')' and open_braces_count > 0:\n            groups.append(current_group)\n            current_group = \"\"\n            open_braces_count -= 1\n        elif c != ' ':\n            current_group += c\n    \n    groups.append(current_group)\n    \n    return groups", "prompt_tokens": 666, "completion_tokens": 296, "duration": 7.372938394546509, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 6.138922214508057, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 584, "completion_tokens": 138, "duration": 4.183948755264282, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 659, "completion_tokens": 226, "duration": 6.181090354919434, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 527, "completion_tokens": 147, "duration": 6.450979948043823, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 665, "completion_tokens": 290, "duration": 7.125262975692749, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 3.677290439605713, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 552, "completion_tokens": 152, "duration": 6.208163738250732, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    dq = deque()\n    k = 3  # Change k to the desired window size\n    \n    for i, num in enumerate(numbers):\n        while dq and numbers[dq[-1]] < num:\n            dq.pop()\n        dq.append(i)\n        \n        if dq[0] <= i - k:\n            dq.popleft()\n        \n        if i >= k - 1:\n            rolling_max_list.append(numbers[dq[0]])\n    \n    return rolling_max_list", "prompt_tokens": 669, "completion_tokens": 337, "duration": 7.43684458732605, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 624, "completion_tokens": 103, "duration": 4.331697702407837, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 508, "completion_tokens": 153, "duration": 6.102219343185425, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 545, "completion_tokens": 149, "duration": 4.867215394973755, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 5.357494592666626, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    prefixes.append(string)\n    return prefixes", "prompt_tokens": 481, "completion_tokens": 159, "duration": 7.023209095001221, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 109, "duration": 3.915764570236206, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 495, "completion_tokens": 149, "duration": 6.636470794677734, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 715, "completion_tokens": 200, "duration": 4.708323001861572, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 143, "duration": 4.620907306671143, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    numerical_values = [numeral_dict[num] for num in numeral_list]\n    sorted_numerical_values = sorted(numerical_values)\n    sorted_numeral_words = [key for value, key in sorted(zip(sorted_numerical_values, numeral_dict.keys()))]\n    sorted_numbers = ' '.join(sorted_numeral_words)\n    return sorted_numbers", "prompt_tokens": 604, "completion_tokens": 294, "duration": 6.744554758071899, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 707, "completion_tokens": 213, "duration": 7.022672653198242, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 626, "completion_tokens": 192, "duration": 5.73028826713562, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 5.656878232955933, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 403, "completion_tokens": 86, "duration": 5.512821435928345, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 439, "completion_tokens": 129, "duration": 4.482482671737671, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.8080220222473145, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 3.79831862449646, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 439, "completion_tokens": 143, "duration": 4.681668043136597, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_str = \"\"\n    for string in strings:\n        concatenated_str += string\n    return concatenated_str", "prompt_tokens": 416, "completion_tokens": 82, "duration": 4.941165208816528, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 108, "duration": 5.909080743789673, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 3.445049285888672, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 6.6223273277282715, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        return None\n\n    largest_coeff = max([abs(coeff) for coeff in xs[1:]])\n    zero_point = None\n\n    if largest_coeff == 0:\n        return None\n\n    if xs[0] == 0:\n        zero_point = 0\n    else:\n        zero_point = -xs[0] / xs[1]\n\n    return zero_point", "prompt_tokens": 905, "completion_tokens": 234, "duration": 7.908505439758301, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    l_sorted = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            l_sorted.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            l_sorted.append(temp.pop(0))\n    return l_sorted", "prompt_tokens": 705, "completion_tokens": 235, "duration": 9.232660293579102, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.612415552139282, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 500, "completion_tokens": 120, "duration": 5.049317121505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 526, "completion_tokens": 172, "duration": 4.758879661560059, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 610, "completion_tokens": 157, "duration": 7.307777404785156, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 698, "completion_tokens": 205, "duration": 6.390688896179199, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    count = 0\n    num = 1\n    fib_list = [0, 1]\n\n    while count < n:\n        num += 1\n        if is_fibonacci(num) and is_prime(num):\n            count += 1\n            fib_list.append(num)\n\n    return fib_list[-1]", "prompt_tokens": 546, "completion_tokens": 265, "duration": 5.412487745285034, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    \n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    \n    return False", "prompt_tokens": 763, "completion_tokens": 300, "duration": 11.939795017242432, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = (n * n) // 2\n    return collisions", "prompt_tokens": 632, "completion_tokens": 97, "duration": 4.522968769073486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 3.5348281860351562, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 651, "completion_tokens": 121, "duration": 6.107326507568359, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 6.006358861923218, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 4.458855152130127, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 724, "completion_tokens": 204, "duration": 4.746692419052124, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 491, "completion_tokens": 144, "duration": 3.566606044769287, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 510, "completion_tokens": 135, "duration": 4.1673643589019775, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    for i in range(1, n+1):\n        result = (2 * result) % p\n    return result", "prompt_tokens": 516, "completion_tokens": 93, "duration": 5.379172086715698, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 509, "completion_tokens": 111, "duration": 3.628209352493286, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 5.774252414703369, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 2.7301828861236572, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.9436984062194824, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in s1:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n\n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 688, "completion_tokens": 247, "duration": 6.576354742050171, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 445, "completion_tokens": 157, "duration": 7.0263214111328125, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 549, "completion_tokens": 167, "duration": 4.446654558181763, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing", "prompt_tokens": 546, "completion_tokens": 181, "duration": 5.316895246505737, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for element in l1:\n        if element in l2 and element not in common_elements:\n            common_elements.append(element)\n    return sorted(common_elements)", "prompt_tokens": 556, "completion_tokens": 120, "duration": 5.879591941833496, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 169, "duration": 6.877089262008667, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.448570728302002, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 162, "duration": 6.1830973625183105, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 530, "completion_tokens": 81, "duration": 2.208200216293335, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n    \n    return fibfib_list[n]", "prompt_tokens": 681, "completion_tokens": 243, "duration": 5.502418756484985, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 609, "completion_tokens": 241, "duration": 6.073139667510986, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_part = x_str[-shift:]\n    remaining_part = x_str[:-shift]\n    result = shifted_part + remaining_part\n    return result", "prompt_tokens": 608, "completion_tokens": 265, "duration": 6.163639545440674, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 538, "completion_tokens": 90, "duration": 5.17096209526062, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 814, "completion_tokens": 183, "duration": 7.882573366165161, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1055, "completion_tokens": 290, "duration": 5.474552869796753, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 716, "completion_tokens": 217, "duration": 5.2314980030059814, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    min_lst, max_lst = [], []\n    for num in lst:\n        if len(min_lst) < len(max_lst):\n            min_lst.append(num)\n        else:\n            max_lst.append(num)\n    sorted_lst = min_lst + max_lst\n    return sorted_lst", "prompt_tokens": 634, "completion_tokens": 200, "duration": 5.963356018066406, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        area = round(area, 2)\n        return area\n    else:\n        return -1", "prompt_tokens": 648, "completion_tokens": 242, "duration": 6.4527907371521, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left = 0\n    right = len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if not is_palindrome:\n        return False\n    \n    if sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 882, "completion_tokens": 264, "duration": 7.587210416793823, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 701, "completion_tokens": 198, "duration": 4.615744352340698, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 771, "completion_tokens": 211, "duration": 8.877831935882568, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for p in primes:\n        if a % p == 0:\n            count += 1\n        if count == 3:\n            is_prime = True\n            break\n    if count < 3:\n        is_prime = False\n    return is_prime", "prompt_tokens": 623, "completion_tokens": 353, "duration": 8.001867294311523, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n**power <= x:\n        power += 1\n    return n**power == x", "prompt_tokens": 635, "completion_tokens": 130, "duration": 6.556688547134399, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 578, "completion_tokens": 132, "duration": 3.368424654006958, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.9510180950164795, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 675, "completion_tokens": 203, "duration": 7.490999460220337, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 3.765608310699463, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for GPA in grades:\n        if GPA == 4.0:\n            letter_grades.append('A+')\n        elif GPA > 3.7:\n            letter_grades.append('A')\n        elif GPA > 3.3:\n            letter_grades.append('A-')\n        elif GPA > 3.0:\n            letter_grades.append('B+')\n        elif GPA > 2.7:\n            letter_grades.append('B')\n        elif GPA > 2.3:\n            letter_grades.append('B-')\n        elif GPA > 2.0:\n            letter_grades.append('C+')\n        elif GPA > 1.7:\n            letter_grades.append('C')\n        elif GPA > 1.3:\n            letter_grades.append('C-')\n        elif GPA > 1.0:\n            letter_grades.append('D+')\n        elif GPA > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1073, "completion_tokens": 507, "duration": 12.788928985595703, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 8.505308151245117, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 8.016274213790894, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 613, "completion_tokens": 128, "duration": 2.993560552597046, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 5.531757354736328, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 627, "completion_tokens": 158, "duration": 3.935482978820801, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 929, "completion_tokens": 245, "duration": 11.657720804214478, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 811, "completion_tokens": 207, "duration": 7.3114683628082275, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        idx = alphabet.index(ch)\n        new_idx = (idx + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_idx]\n    return encrypted_s", "prompt_tokens": 620, "completion_tokens": 202, "duration": 8.594851970672607, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 614, "completion_tokens": 185, "duration": 4.12590217590332, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 7.281903505325317, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 609, "completion_tokens": 137, "duration": 6.605517625808716, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 644, "completion_tokens": 270, "duration": 7.074285984039307, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 11.66793155670166, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 737, "completion_tokens": 233, "duration": 7.591031789779663, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_nums = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(num)\n    return prime_nums", "prompt_tokens": 645, "completion_tokens": 179, "duration": 8.299441576004028, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n\n    if unit_a == 0 or unit_b == 0:\n        product = 0\n    else:\n        product = unit_a * unit_b\n\n    return product", "prompt_tokens": 529, "completion_tokens": 140, "duration": 5.902255296707153, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 2.9908270835876465, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = num - floor_num\n    diff_ceil = ceil_num - num\n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 699, "completion_tokens": 201, "duration": 10.286883115768433, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    levels = []\n    stones = n\n    levels.append(stones)\n    while n > 1:\n        if n % 2 == 1:\n            n += 2\n        else:\n            n += 1\n        levels.append(n)\n    return levels", "prompt_tokens": 632, "completion_tokens": 174, "duration": 5.761449098587036, "result": "timed out", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 626, "completion_tokens": 205, "duration": 5.086545944213867, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 534, "completion_tokens": 140, "duration": 4.755591630935669, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 631, "completion_tokens": 162, "duration": 6.114668607711792, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                break\n        else:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 598, "completion_tokens": 187, "duration": 7.1680006980896, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 949, "completion_tokens": 299, "duration": 9.870949268341064, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 6.679916620254517, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 5.257690906524658, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 9.017770290374756, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr.index(min_val) != min_idx:\n            min_idx = arr.index(min_val)\n            if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n                return True\n    \n    return False", "prompt_tokens": 999, "completion_tokens": 242, "duration": 11.576450109481812, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 4.623936176300049, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 734, "completion_tokens": 257, "duration": 6.467563152313232, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start = 0\n    end = len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 744, "completion_tokens": 261, "duration": 7.296605587005615, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    res_lst = []\n    for idx, s in enumerate(lst):\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        res_lst.append(f\"the number of odd elements {odd_count}n the str{idx+1}ng {s} of the {idx+1}nput.\")\n    return res_lst", "prompt_tokens": 745, "completion_tokens": 229, "duration": 6.006542921066284, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 538, "completion_tokens": 168, "duration": 6.3745574951171875, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 179, "duration": 6.822980165481567, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def custom_sort(num):\n        return bin(num).count('1'), num\n    \n    return sorted(arr, key=custom_sort)", "prompt_tokens": 703, "completion_tokens": 139, "duration": 4.2627081871032715, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    for word in s.split():\n        consonant_count = sum(1 for ch in word if ch in consonants)\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 792, "completion_tokens": 260, "duration": 8.964709281921387, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels and word[i].isalpha():\n            last_consonant_index = i\n        elif word[i].lower() in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 727, "completion_tokens": 292, "duration": 8.010913372039795, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 299, "duration": 5.674225807189941, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    max_list = []\n    for i in range(k):\n        max_list.append(arr[i])\n    return max_list", "prompt_tokens": 776, "completion_tokens": 122, "duration": 4.529371500015259, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for index, num in enumerate(lst):\n        if index % 2 == 0 and num % 2 != 0:\n            sum_odd_even += num\n    return sum_odd_even", "prompt_tokens": 523, "completion_tokens": 124, "duration": 7.534182548522949, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 13.368202209472656, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 7.896486759185791, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 938, "completion_tokens": 312, "duration": 9.006616115570068, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 7.035758972167969, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if num < prev:\n            return False\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        prev = num\n    return True", "prompt_tokens": 927, "completion_tokens": 239, "duration": 7.242189407348633, "result": "failed: '<' not supported between instances of 'int' and 'NoneType'", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 988, "completion_tokens": 337, "duration": 7.080994606018066, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 625, "completion_tokens": 208, "duration": 12.077463388442993, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def explore_path(i, j, path):\n        if len(path) == k:\n            paths.append(path[:])\n            return\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            x, y = i + dx, j + dy\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y]:\n                visited[x][y] = True\n                path.append(grid[x][y])\n                explore_path(x, y, path)\n                path.pop()\n                visited[x][y] = False\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n            visited[i][j] = True\n            explore_path(i, j, [grid[i][j]])\n\n    return min(paths)\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))", "prompt_tokens": 1247, "completion_tokens": 473, "duration": 14.839126348495483, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_seq = []\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    if n == 3:\n        return [0, 1, 1, 2]\n    \n    tribonacci_seq.extend([0, 1, 1])\n    a, b, c = 0, 1, 1\n    for _ in range(n - 2):\n        next_num = a + b + c\n        tribonacci_seq.append(next_num)\n        a, b, c = b, c, next_num\n    \n    return tribonacci_seq", "prompt_tokens": 951, "completion_tokens": 379, "duration": 10.660963296890259, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 482, "completion_tokens": 141, "duration": 5.717070579528809, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)", "prompt_tokens": 671, "completion_tokens": 215, "duration": 6.467620134353638, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.948954343795776, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 645, "completion_tokens": 191, "duration": 5.321662664413452, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 559, "completion_tokens": 145, "duration": 6.025643348693848, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 661, "completion_tokens": 225, "duration": 6.678054094314575, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 737, "completion_tokens": 317, "duration": 8.894037008285522, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    while even_count < 4:\n        even_count += 1\n        even_sum += 2 * even_count\n        if even_sum == n:\n            return True\n    return False", "prompt_tokens": 522, "completion_tokens": 173, "duration": 5.52256441116333, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 525, "completion_tokens": 136, "duration": 6.75367283821106, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\"\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            modified_text += ch\n            count = 0\n    return modified_text", "prompt_tokens": 615, "completion_tokens": 234, "duration": 6.981843709945679, "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = 0\n    dot_found = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digits_count += 1\n        elif ch == '.':\n            dot_found = True\n        elif ch.isalpha():\n            if not dot_found:\n                valid_extension = True\n        elif file_name.endswith(('txt', 'exe', 'dll')) and dot_found:\n            valid_extension = True\n    \n    if digits_count > 3 or not dot_found or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 899, "completion_tokens": 342, "duration": 10.482345581054688, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.466768503189087, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 685, "completion_tokens": 227, "duration": 8.50976037979126, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "prompt_tokens": 647, "completion_tokens": 122, "duration": 6.5125412940979, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (digit_sum(num), index) for index, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 612, "completion_tokens": 215, "duration": 5.891512155532837, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        num_str = str(abs(num))\n        if num > 10 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n            count += 1\n    return count", "prompt_tokens": 579, "completion_tokens": 152, "duration": 6.091697692871094, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 7.250752687454224, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n            return tuple(result)\n        else:\n            result = planets[index2+1:index1]\n            return tuple(result)\n    else:\n        return ()", "prompt_tokens": 826, "completion_tokens": 274, "duration": 6.823869466781616, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 735, "completion_tokens": 150, "duration": 3.601186752319336, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 5.5693066120147705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 6.785792589187622, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.243971109390259, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 948, "completion_tokens": 236, "duration": 9.663626909255981, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    combined_str = a + a\n    found = False\n    for i in range(n):\n        temp_str = combined_str[i:i+m]\n        if temp_str == b or temp_str in [b[j:]+b[:j] for j in range(1, m)]:\n            found = True\n            break\n    return found", "prompt_tokens": 711, "completion_tokens": 287, "duration": 8.520428895950317, "result": "failed: test #0", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 3.7339107990264893, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 570, "completion_tokens": 252, "duration": 6.782955169677734, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 541, "completion_tokens": 109, "duration": 4.593951225280762, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.12496280670166, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if total_eaten_carrots <= remaining else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 916, "completion_tokens": 162, "duration": 6.587135076522827, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 854, "completion_tokens": 291, "duration": 10.15608835220337, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 195, "duration": 5.0162293910980225, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 478, "completion_tokens": 98, "duration": 5.08317494392395, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start_point = min(a, b)\n    end_point = max(a, b)\n    even_digits = [num for num in range(start_point, end_point+1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 605, "completion_tokens": 199, "duration": 6.636149644851685, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 641, "completion_tokens": 206, "duration": 6.284785747528076, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 704, "completion_tokens": 343, "duration": 9.496237516403198, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return float('0.' + str(number).split('.')[1])\n\n# Test the function\nprint(truncate_number(3.5))", "prompt_tokens": 506, "completion_tokens": 117, "duration": 3.6379776000976562, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 586, "completion_tokens": 140, "duration": 4.160196542739868, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 665, "completion_tokens": 234, "duration": 6.920557737350464, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 7.9563024044036865, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 678, "completion_tokens": 303, "duration": 7.115109205245972, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.129131317138672, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 4.493175029754639, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_values = []\n    for num in numbers:\n        max_values.append(num)\n        rolling_max_list.append(max(max_values))\n    return rolling_max_list", "prompt_tokens": 573, "completion_tokens": 172, "duration": 5.017832279205322, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 4.285319566726685, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 504, "completion_tokens": 149, "duration": 4.972975254058838, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    \n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str", "prompt_tokens": 553, "completion_tokens": 158, "duration": 5.640849590301514, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 95, "duration": 4.553696632385254, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 154, "duration": 4.486613512039185, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 101, "duration": 4.104446172714233, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 479, "completion_tokens": 132, "duration": 5.275317192077637, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 715, "completion_tokens": 200, "duration": 5.3178791999816895, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 4.8977673053741455, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 595, "completion_tokens": 242, "duration": 7.0068206787109375, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 724, "completion_tokens": 232, "duration": 7.076241493225098, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 628, "completion_tokens": 194, "duration": 5.727594375610352, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 496, "completion_tokens": 101, "duration": 3.909799575805664, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 3.799011468887329, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "\ndef largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 100, "duration": 3.9184134006500244, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 178, "duration": 5.716728210449219, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 481, "completion_tokens": 102, "duration": 4.152513265609741, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.482231378555298, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 3.678504228591919, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.481303453445435, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 3.7614824771881104, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 5.08723521232605, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    leading_coeff_index = max((i for i, coeff in enumerate(xs) if coeff != 0), default=0)\n    leading_coeff = xs[leading_coeff_index]\n    degree = len(xs) - 1\n    \n    def f(x):\n        return poly(xs, x)\n    \n    def f_prime(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n    \n    x0 = 1.0  # Initial guess for Newton's method\n    tolerance = 1e-6\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        x1 = x0 - f(x0) / f_prime(x0)\n        if abs(x1 - x0) < tolerance:\n            return x1\n        x0 = x1\n    \n    return x0", "prompt_tokens": 902, "completion_tokens": 373, "duration": 8.594699382781982, "result": "failed: float division by zero", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    l_sorted = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            l_sorted.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            l_sorted.append(temp.pop(0))\n    return l_sorted", "prompt_tokens": 707, "completion_tokens": 237, "duration": 6.742997169494629, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 460, "completion_tokens": 99, "duration": 4.503652095794678, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 501, "completion_tokens": 121, "duration": 4.563456773757935, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 155, "duration": 5.261054277420044, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i:]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 618, "completion_tokens": 166, "duration": 4.378357172012329, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 799, "completion_tokens": 306, "duration": 29.832319974899292, "result": "failed: name 'decode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for i in range(len(fib_list) - 1, -1, -1):\n        if is_prime(fib_list[i]):\n            num = fib_list[i]\n            break\n\n    return num", "prompt_tokens": 579, "completion_tokens": 291, "duration": 7.611079931259155, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 740, "completion_tokens": 265, "duration": 5.790521144866943, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(1, n+1):\n        collisions += i\n    return collisions", "prompt_tokens": 610, "completion_tokens": 86, "duration": 5.75803017616272, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 3.7255194187164307, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 7.197416305541992, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 550, "completion_tokens": 157, "duration": 7.417611598968506, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 395, "completion_tokens": 64, "duration": 2.1189210414886475, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n+1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 228, "duration": 7.007486820220947, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 491, "completion_tokens": 144, "duration": 5.3077263832092285, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 493, "completion_tokens": 117, "duration": 6.228509902954102, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 505, "completion_tokens": 59, "duration": 7.119846820831299, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 523, "completion_tokens": 126, "duration": 5.197058200836182, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch.lower() not in ['a', 'e', 'i', 'o', 'u']:\n            result += ch\n    return result", "prompt_tokens": 597, "completion_tokens": 144, "duration": 5.364953279495239, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 6.177593946456909, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.856693267822266, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    \n    for ch in s0:\n        if ch not in char_count:\n            char_count[ch] = 1\n        else:\n            char_count[ch] += 1\n    \n    for ch in s1:\n        if ch not in char_count:\n            return False\n        else:\n            char_count[ch] -= 1\n    \n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 721, "completion_tokens": 288, "duration": 5.581364631652832, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a = b\n        b = result\n    \n    return result", "prompt_tokens": 444, "completion_tokens": 157, "duration": 7.316165924072266, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 561, "completion_tokens": 181, "duration": 6.910905361175537, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            is_increasing = False\n        if l[i] < l[i+1]:\n            is_decreasing = False\n    \n    if is_increasing or is_decreasing:\n        return True\n    else:\n        return False", "prompt_tokens": 549, "completion_tokens": 201, "duration": 10.959497928619385, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2 and e1 not in common_elements:\n                common_elements.append(e1)\n    return sorted(common_elements)", "prompt_tokens": 597, "completion_tokens": 173, "duration": 4.848912954330444, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 487, "completion_tokens": 166, "duration": 6.005181550979614, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 7.141904354095459, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 535, "completion_tokens": 159, "duration": 5.6553356647491455, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 563, "completion_tokens": 113, "duration": 7.94254469871521, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 681, "completion_tokens": 241, "duration": 6.1438148021698, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 4.75241231918335, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    str_x = str(x)\n    len_x = len(str_x)\n    effective_shift = shift % len_x\n    if effective_shift == 0:\n        return str_x\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    return shifted_str", "prompt_tokens": 553, "completion_tokens": 198, "duration": 7.486724615097046, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 7.746034383773804, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 775, "completion_tokens": 137, "duration": 6.80122971534729, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for index, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_value is None or node < smallest_value):\n            smallest_value = node\n            smallest_index = index\n        elif node % 2 == 0 and node == smallest_value and index < smallest_index:\n            smallest_index = index\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1037, "completion_tokens": 267, "duration": 7.393988609313965, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    greatest_integer = -1\n\n    for num in lst:\n        if num > 0:\n            freq_dict[num] = freq_dict.get(num, 0) + 1\n            if freq_dict[num] >= num:\n                greatest_integer = max(greatest_integer, num)\n\n    return greatest_integer", "prompt_tokens": 700, "completion_tokens": 185, "duration": 7.971911907196045, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result_lst = []\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 621, "completion_tokens": 165, "duration": 4.546850681304932, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 7.551446914672852, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left_index = 0\n    right_index = len(q) - 1\n    \n    while left_index < right_index:\n        if q[left_index] != q[right_index]:\n            is_palindrome = False\n            break\n        left_index += 1\n        right_index -= 1\n    \n    sum_elements = sum(q)\n    \n    return is_palindrome and sum_elements <= w", "prompt_tokens": 954, "completion_tokens": 333, "duration": 7.578756332397461, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 742, "completion_tokens": 265, "duration": 10.039920091629028, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 733, "completion_tokens": 167, "duration": 3.7346208095550537, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    count = 0\n    for i in range(2, a+1):\n        if a % i == 0:\n            factors = []\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n                elif j == i - 1:\n                    factors.append(i)\n            if len(factors) > 0:\n                count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 557, "completion_tokens": 246, "duration": 5.280768394470215, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == 1 and n == 1:\n        return False\n    if x != 1 and n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False", "prompt_tokens": 641, "completion_tokens": 192, "duration": 6.702702522277832, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 548, "completion_tokens": 101, "duration": 5.066116809844971, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 6.906466245651245, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    while decimal > 0:\n        binary_str += str(decimal % 2)\n        decimal //= 2\n    return binary_str[::-1] + 'db'", "prompt_tokens": 665, "completion_tokens": 177, "duration": 8.288952827453613, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 596, "completion_tokens": 169, "duration": 6.1874096393585205, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1106, "completion_tokens": 570, "duration": 11.69307541847229, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    count = 0\n    for char in string:\n        count += 1\n    if count <= 1:\n        return False\n    if count == 2:\n        return True\n    for i in range(2, count):\n        if count % i == 0:\n            return False\n    return True", "prompt_tokens": 536, "completion_tokens": 189, "duration": 4.74776554107666, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 422, "completion_tokens": 137, "duration": 7.7386064529418945, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 601, "completion_tokens": 99, "duration": 50.807650566101074, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_index = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_index += lst[i]\n    return sum_even_odd_index", "prompt_tokens": 448, "completion_tokens": 136, "duration": 5.5536346435546875, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    return ' '.join(ordered_words)", "prompt_tokens": 629, "completion_tokens": 162, "duration": 7.190356492996216, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 220, "duration": 6.244744777679443, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    \n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    \n    return sorted_array", "prompt_tokens": 809, "completion_tokens": 207, "duration": 5.512868642807007, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 8.106237649917603, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 618, "completion_tokens": 189, "duration": 4.636129140853882, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 565, "completion_tokens": 147, "duration": 5.2463343143463135, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return any(num == total - num2 for num in [x, y, z] for num2 in [x, y, z])\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 625, "completion_tokens": 242, "duration": 8.127578020095825, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.islower():\n            encoded_message += ch.upper()\n        elif ch.isupper():\n            encoded_message += ch.lower()\n        elif ch.lower() in ['a', 'e', 'i', 'o', 'u']:\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 661, "completion_tokens": 308, "duration": 8.49216341972351, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num //= 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return calculate_sum_of_digits(largest_prime)", "prompt_tokens": 1013, "completion_tokens": 351, "duration": 10.147541999816895, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n    \n    if (is_lower and not is_upper) or (is_upper and not is_lower):\n        return False\n    else:\n        return True", "prompt_tokens": 740, "completion_tokens": 245, "duration": 13.259324550628662, "result": "failed: First test error: False", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n            if len(primes) == n:\n                break\n    return primes", "prompt_tokens": 648, "completion_tokens": 181, "duration": 8.1415376663208, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 543, "completion_tokens": 116, "duration": 4.982342720031738, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 6.422186374664307, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 687, "completion_tokens": 192, "duration": 7.680562734603882, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 6.727881908416748, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    \n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    \n    if current_word:\n        words.append(current_word)\n    \n    return words", "prompt_tokens": 621, "completion_tokens": 203, "duration": 6.313127517700195, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    return biggest_even", "prompt_tokens": 500, "completion_tokens": 109, "duration": 8.154462575912476, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    sum = 0\n    count = 0\n\n    for i in range(n, m+1):\n        sum += i\n        count += 1\n\n    avg = round(sum / count)\n    return bin(avg)", "prompt_tokens": 627, "completion_tokens": 155, "duration": 7.705349683761597, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 553, "completion_tokens": 162, "duration": 5.768787622451782, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = [ \n        \"One\" if num == 1 else \n        \"Two\" if num == 2 else \n        \"Three\" if num == 3 else \n        \"Four\" if num == 4 else \n        \"Five\" if num == 5 else \n        \"Six\" if num == 6 else \n        \"Seven\" if num == 7 else \n        \"Eight\" if num == 8 else \n        \"Nine\" for num in filtered_arr\n    ]\n    return result", "prompt_tokens": 989, "completion_tokens": 324, "duration": 7.491101503372192, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 581, "completion_tokens": 154, "duration": 9.788037776947021, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 190, "duration": 6.4323554039001465, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num != 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 9.068573951721191, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    shift = len(arr) - min_idx - 1\n    new_arr = arr[-shift:] + arr[:-shift]\n    return new_arr == sorted(new_arr)", "prompt_tokens": 988, "completion_tokens": 199, "duration": 9.819271326065063, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count = 0\n    even_count = 0\n    \n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    for num in lst2:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if odd_count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 827, "completion_tokens": 291, "duration": 8.53469705581665, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    histogram_dict = {}\n    for letter in letters:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    \n    max_count = max(histogram_dict.values())\n    max_letters_dict = {letter: count for letter, count in histogram_dict.items() if count == max_count}\n    \n    return max_letters_dict", "prompt_tokens": 731, "completion_tokens": 265, "duration": 8.137101650238037, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 720, "completion_tokens": 189, "duration": 7.828601121902466, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for i, string in enumerate(lst):\n        odd_count = sum(1 for ch in string if ch.isdigit() and int(ch) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{i+1}ng {string} of the {i+1}nput.\")\n    return result_lst", "prompt_tokens": 745, "completion_tokens": 228, "duration": 5.732527256011963, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum", "prompt_tokens": 549, "completion_tokens": 183, "duration": 3.711538076400757, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    num_buckets = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                buckets_needed = math.ceil(well / capacity)\n                num_buckets += buckets_needed\n    return num_buckets", "prompt_tokens": 1037, "completion_tokens": 194, "duration": 4.072603464126587, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    ones_count = {}\n    for num in arr:\n        bin_num = bin(num)[2:]\n        ones_count[num] = bin_num.count('1')\n    sorted_arr = sorted(arr, key=lambda x: (ones_count[x], x))\n    return sorted_arr", "prompt_tokens": 765, "completion_tokens": 229, "duration": 9.573634147644043, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    def is_consonant(char):\n        return char.isalpha() and char.lower() not in 'aeiou'\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 751, "completion_tokens": 221, "duration": 8.920737743377686, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    found_vowel = False\n    \n    for char in word[::-1]:\n        if char in consonants:\n            if found_vowel:\n                break\n        elif char.lower() in \"aeiou\":\n            if not found_vowel:\n                closest_vowel = char\n                found_vowel = True\n    \n    return closest_vowel", "prompt_tokens": 705, "completion_tokens": 256, "duration": 6.259339809417725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    new_string = lst[0] + lst[1]\n    for ch in new_string:\n        if ch == '(':\n            count += 1\n        elif ch == ')':\n            count -= 1\n        if count < 0:\n            return 'No'\n    return 'Yes'", "prompt_tokens": 717, "completion_tokens": 199, "duration": 6.8491950035095215, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 775, "completion_tokens": 118, "duration": 4.7431254386901855, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 526, "completion_tokens": 129, "duration": 6.005075454711914, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 5.426632404327393, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 7.2311928272247314, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 944, "completion_tokens": 318, "duration": 9.359246015548706, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split()\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if count > 0:\n            return count\n    return words", "prompt_tokens": 758, "completion_tokens": 299, "duration": 6.239216327667236, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    count = 0\n    sorted = True\n    for num in lst:\n        if num == prev:\n            count += 1\n            if count > 1:\n                sorted = False\n                break\n        if prev is not None and num < prev:\n            sorted = False\n            break\n        prev = num\n    return sorted", "prompt_tokens": 941, "completion_tokens": 269, "duration": 8.441248893737793, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 992, "completion_tokens": 363, "duration": 8.847057580947876, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num) if num != 0 else 0\n        product_signs *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 656, "completion_tokens": 248, "duration": 7.044531583786011, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "from collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def get_neighbors(x, y):\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                neighbors.append((nx, ny))\n        return neighbors\n\n    start_value = min(min(row) for row in grid)\n    start_cell = [(i, j) for i in range(n) for j in range(n) if grid[i][j] == start_value][0]\n\n    path = []\n    visited_cells = set()\n    queue = deque([(start_cell, [grid[start_cell[0]][start_cell[1]]])])\n    visited_cells.add(start_cell)\n\n    while queue and len(path) < k:\n        current_cell, current_path = queue.popleft()\n        path = current_path\n\n        for neighbor in get_neighbors(current_cell[0], current_cell[1]):\n            if neighbor not in visited_cells:\n                new_path = current_path + [grid[neighbor[0]][neighbor[1]]]\n                queue.append((neighbor, new_path))\n                visited_cells.add(neighbor)\n\n    return path[:k]\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]", "prompt_tokens": 1296, "completion_tokens": 625, "duration": 12.688423871994019, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [1, 3]\n    if n < 2:\n        return seq[:n+1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(sum(seq[-3:]))\n    return seq", "prompt_tokens": 832, "completion_tokens": 182, "duration": 9.385645627975464, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 480, "completion_tokens": 146, "duration": 6.890628099441528, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True", "prompt_tokens": 676, "completion_tokens": 278, "duration": 9.364821434020996, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.274614095687866, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alone = False\n    if txt == \"\":\n        return False\n    else:\n        txt = txt.rstrip()\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n            is_last_char_alone = True\n    return is_last_char_alone", "prompt_tokens": 659, "completion_tokens": 214, "duration": 8.286710262298584, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 568, "completion_tokens": 154, "duration": 5.250373840332031, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        if num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 645, "completion_tokens": 186, "duration": 6.833147764205933, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif type(a) == int or type(a) == float:\n        if type(b) == str:\n            if ',' in b:\n                return b\n            else:\n                return float(b.replace(',', '.'))\n        else:\n            return None\n    elif type(b) == int or type(b) == float:\n        if type(a) == str:\n            if ',' in a:\n                return a\n            else:\n                return float(a.replace(',', '.'))\n        else:\n            return None\n    else:\n        return None", "prompt_tokens": 686, "completion_tokens": 297, "duration": 8.745056390762329, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        if (n - i) % 2 == 0 and (n - i) > 0:\n            count += 1\n    return count == 4", "prompt_tokens": 523, "completion_tokens": 191, "duration": 11.682735204696655, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.665174245834351, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    fixed_text = \"\"\n    consecutive_spaces = 0\n    \n    for i, ch in enumerate(text):\n        if ch == \" \":\n            consecutive_spaces += 1\n        if ch != \" \" or i == len(text) - 1:\n            if consecutive_spaces > 2:\n                fixed_text += \"-\"\n            else:\n                fixed_text += \"_\"\n            consecutive_spaces = 0\n            fixed_text += ch\n    \n    return fixed_text", "prompt_tokens": 655, "completion_tokens": 283, "duration": 10.214813470840454, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_flag = False\n    valid_start_letter = False\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n        elif ch == '.':\n            if dot_flag:\n                return 'No'\n            dot_flag = True\n        elif ch.isalpha():\n            if not dot_flag:\n                valid_start_letter = True\n        elif ch.isspace():\n            return 'No'\n\n    if not dot_flag or not valid_start_letter:\n        return 'No'\n\n    extension = file_name.split('.')[-1]\n    if extension not in valid_extensions:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 929, "completion_tokens": 413, "duration": 10.79479193687439, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 8.222208261489868, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 678, "completion_tokens": 219, "duration": 8.004085540771484, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False", "prompt_tokens": 638, "completion_tokens": 156, "duration": 4.936930179595947, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (sum_of_digits(num), index) for index, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 622, "completion_tokens": 227, "duration": 9.655009984970093, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) % 10\n            last_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 9.990268468856812, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 8.994028806686401, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_order = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    \n    lower_bound = min(planet_order[planet1], planet_order[planet2])\n    upper_bound = max(planet_order[planet1], planet_order[planet2])\n    \n    result = [planet for planet in planets if lower_bound < planet_order[planet] < upper_bound]\n    \n    return tuple(sorted(result, key=lambda x: planet_order[x]))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 851, "completion_tokens": 404, "duration": 9.732525825500488, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 746, "completion_tokens": 166, "duration": 7.4357054233551025, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 7.717387676239014, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 607, "completion_tokens": 138, "duration": 9.215291500091553, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 5.6832873821258545, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 947, "completion_tokens": 235, "duration": 5.50665545463562, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a_concat = a + a\n    for i in range(n):\n        if b in a_concat[i:i+m]:\n            return True\n    return False", "prompt_tokens": 645, "completion_tokens": 193, "duration": 5.485499620437622, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 8.021527767181396, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 575, "completion_tokens": 257, "duration": 8.563689231872559, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 561, "completion_tokens": 129, "duration": 7.229608535766602, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 5.989634990692139, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + remaining\n    if total_eaten_carrots >= need:\n        remaining_carrots = remaining - (need - number)\n        total_eaten_carrots = need\n    else:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 934, "completion_tokens": 198, "duration": 7.091036319732666, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 843, "completion_tokens": 280, "duration": 8.766911506652832, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 8.876758813858032, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 6.213048458099365, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 539, "completion_tokens": 134, "duration": 5.484690189361572, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 636, "completion_tokens": 210, "duration": 6.376991271972656, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group += char\n        elif char == ')':\n            balance -= 1\n            current_group += char\n\n        if balance == 0 and current_group:\n            separate_groups.append(current_group)\n            current_group = \"\"\n\n    return separate_groups", "prompt_tokens": 651, "completion_tokens": 269, "duration": 7.909946918487549, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 3.557555913925171, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 569, "completion_tokens": 123, "duration": 4.493557691574097, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 642, "completion_tokens": 201, "duration": 7.6919920444488525, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 528, "completion_tokens": 147, "duration": 6.96806001663208, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 680, "completion_tokens": 305, "duration": 8.153812646865845, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.7216668128967285, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return (sum, product)", "prompt_tokens": 550, "completion_tokens": 144, "duration": 4.407012462615967, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_deque = deque()\n\n    for number in numbers:\n        while max_deque and max_deque[-1] < number:\n            max_deque.pop()\n        \n        max_deque.append(number)\n        rolling_max_list.append(max_deque[0])\n\n    return rolling_max_list", "prompt_tokens": 565, "completion_tokens": 195, "duration": 5.365058422088623, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 6.677182912826538, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "prompt_tokens": 510, "completion_tokens": 155, "duration": 5.553218841552734, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 180, "duration": 5.445969581604004, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 4.6642842292785645, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = ''\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 462, "completion_tokens": 132, "duration": 3.907388925552368, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 109, "duration": 4.122391700744629, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 131, "duration": 4.607311487197876, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_list = []\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 726, "completion_tokens": 209, "duration": 5.349542140960693, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 143, "duration": 4.123765468597412, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    numeral_values = [numeral_dict[num] for num in numeral_list]\n    sorted_numerals = [key for key, value in sorted(numeral_dict.items(), key=lambda item: item[1]) if value in numeral_values]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 578, "completion_tokens": 254, "duration": 5.953656435012817, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 716, "completion_tokens": 224, "duration": 10.924373388290405, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 4.838588237762451, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 7.606402635574341, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length = length + 1\n    return length", "prompt_tokens": 442, "completion_tokens": 132, "duration": 3.9332540035247803, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 127, "duration": 4.673597812652588, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 5.850026369094849, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    count = {}\n\n    for number in numbers:\n        if number not in count:\n            count[number] = 1\n        else:\n            count[number] += 1\n\n    for number in numbers:\n        if count[number] == 1:\n            result.append(number)\n\n    return result", "prompt_tokens": 518, "completion_tokens": 174, "duration": 4.415703058242798, "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 4.468891382217407, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 6.336193084716797, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 7.529408931732178, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 533, "completion_tokens": 78, "duration": 3.494612693786621, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 520, "completion_tokens": 118, "duration": 3.761273145675659, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    max_coeff_index = max(range(len(xs)), key=lambda i: abs(xs[i]))\n    degree = max_coeff_index\n    \n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    \n    zero_point = round(next(x for x in range(-1000, 1000) if abs(poly(x)) < 0.0001), 2)\n    \n    return zero_point", "prompt_tokens": 885, "completion_tokens": 238, "duration": 5.448017120361328, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, val in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted(l[i]))\n        else:\n            result.append(val)\n    return result", "prompt_tokens": 653, "completion_tokens": 146, "duration": 4.138951778411865, "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 460, "completion_tokens": 98, "duration": 7.22820782661438, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 534, "completion_tokens": 152, "duration": 3.613391637802124, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 526, "completion_tokens": 172, "duration": 6.089594841003418, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[0])\n            temp = temp[1:]\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 641, "completion_tokens": 227, "duration": 6.187095880508423, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 669, "completion_tokens": 176, "duration": 6.0708677768707275, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for number in fib_list[::-1]:\n        if is_prime(number):\n            num = number\n            break\n\n    return num", "prompt_tokens": 575, "completion_tokens": 270, "duration": 5.2032952308654785, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 739, "completion_tokens": 266, "duration": 5.413661956787109, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return (n * n) // 2", "prompt_tokens": 637, "completion_tokens": 97, "duration": 9.62145185470581, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = []\n    for num in l:\n        new_num = num + 1\n        new_list.append(new_num)\n    return new_list", "prompt_tokens": 533, "completion_tokens": 99, "duration": 3.5735726356506348, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False", "prompt_tokens": 658, "completion_tokens": 128, "duration": 2.869791030883789, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 4.924888610839844, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 21.940230131149292, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        next_element = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(next_element)\n    return fib4_list[-1]", "prompt_tokens": 730, "completion_tokens": 216, "duration": 7.133304119110107, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 != 0:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 11.836814165115356, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 500, "completion_tokens": 124, "duration": 4.882314205169678, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 500, "completion_tokens": 54, "duration": 4.032924652099609, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 597, "completion_tokens": 238, "duration": 7.592600107192993, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 4.19210958480835, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 471, "completion_tokens": 82, "duration": 2.7796881198883057, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.1987531185150146, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    for ch in s0:\n        if ch not in char_count:\n            char_count[ch] = 1\n        else:\n            char_count[ch] += 1\n\n    for ch in s1:\n        if ch not in char_count or char_count[ch] == 0:\n            return False\n        char_count[ch] -= 1\n\n    return all(value == 0 for value in char_count.values())", "prompt_tokens": 736, "completion_tokens": 307, "duration": 8.129437446594238, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    result = 0\n\n    for i in range(2, n+1):\n        result = a + b\n        a, b = b, result\n\n    return result", "prompt_tokens": 450, "completion_tokens": 168, "duration": 4.316298007965088, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 559, "completion_tokens": 179, "duration": 6.797789812088013, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 497, "completion_tokens": 120, "duration": 3.4064807891845703, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 5.222197532653809, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            largest_prime_factor = i\n        else:\n            i += 1\n    return largest_prime_factor", "prompt_tokens": 489, "completion_tokens": 171, "duration": 5.657769680023193, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.563994884490967, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 543, "completion_tokens": 168, "duration": 3.9105448722839355, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))", "prompt_tokens": 532, "completion_tokens": 118, "duration": 3.64492130279541, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 8.62964391708374, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 5.887240409851074, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "prompt_tokens": 544, "completion_tokens": 189, "duration": 4.406188011169434, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 536, "completion_tokens": 75, "duration": 3.741593360900879, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 836, "completion_tokens": 194, "duration": 4.560436010360718, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n        elif node % 2 == 0 and node == smallest_even_value:\n            smallest_even_index = min(smallest_even_index, i)\n    \n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 1054, "completion_tokens": 292, "duration": 6.878138542175293, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num in freq_map:\n            freq_map[num] += 1\n        else:\n            freq_map[num] = 1\n\n    greatest_int = -1\n\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num and num > greatest_int:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 732, "completion_tokens": 232, "duration": 8.452452659606934, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 611, "completion_tokens": 150, "duration": 3.950101852416992, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 5.943930387496948, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 5.720966815948486, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 726, "completion_tokens": 250, "duration": 9.894085168838501, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 199, "duration": 4.1368632316589355, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2 or a > 100:\n        return False\n\n    prime_count = 0\n    prime_factors = []\n\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n                prime_count += 1\n\n    return prime_count == 3", "prompt_tokens": 577, "completion_tokens": 295, "duration": 9.73422360420227, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        if n == 1:\n            return True\n        else:\n            return False\n    if x < n:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 638, "completion_tokens": 178, "duration": 7.1255714893341064, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (abs(a) ** (1/3)).is_integer()", "prompt_tokens": 565, "completion_tokens": 109, "duration": 6.637127637863159, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 7.957622528076172, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str += str(remainder)\n        decimal //= 2\n    return binary_str[::-1] + 'db'", "prompt_tokens": 671, "completion_tokens": 189, "duration": 8.041976928710938, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 596, "completion_tokens": 169, "duration": 5.617703676223755, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1087, "completion_tokens": 533, "duration": 10.839491605758667, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 550, "completion_tokens": 201, "duration": 4.45439600944519, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 441, "completion_tokens": 156, "duration": 6.062939882278442, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 607, "completion_tokens": 111, "duration": 6.023615837097168, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 5.088280439376831, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 613, "completion_tokens": 144, "duration": 3.991285800933838, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, val in reversed(list(enumerate(row))):\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 909, "completion_tokens": 210, "duration": 9.338116645812988, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 788, "completion_tokens": 184, "duration": 7.093217134475708, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        idx = alphabet.index(ch)\n        new_idx = (idx + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_idx]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 202, "duration": 6.067945241928101, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 618, "completion_tokens": 189, "duration": 6.027439832687378, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 540, "completion_tokens": 122, "duration": 7.962588787078857, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 628, "completion_tokens": 235, "duration": 7.104789972305298, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_ch = chr((index + 2) % 26 + ord('A') if ch.isupper() else ord('a'))\n            else:\n                new_ch = ch.swapcase()\n        else:\n            new_ch = ch\n        encoded_message += new_ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 608, "completion_tokens": 283, "duration": 8.347395658493042, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    largest_prime = 0\n    sum_digits = 0\n\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    if largest_prime == 0:\n        return 0\n\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 981, "completion_tokens": 289, "duration": 10.487165927886963, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 6.73490309715271, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 5.443256139755249, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 6.5532519817352295, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 110, "duration": 7.939717054367065, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 679, "completion_tokens": 184, "duration": 5.584461688995361, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 4.62390398979187, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 207, "duration": 55.51340961456299, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even if max_even != -1 else -1", "prompt_tokens": 560, "completion_tokens": 176, "duration": 4.221925735473633, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 620, "completion_tokens": 119, "duration": 7.5695531368255615, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 586, "completion_tokens": 195, "duration": 6.102115631103516, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 996, "completion_tokens": 354, "duration": 10.42526912689209, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 8.708776473999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 3.850065231323242, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 210, "duration": 5.455563306808472, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[min_idx:] + arr[:min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 964, "completion_tokens": 160, "duration": 4.01318359375, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    if count_odd == 0:\n        return \"YES\"\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd -= 1\n            if count_odd < 0:\n                return \"NO\"\n    return \"YES\"", "prompt_tokens": 787, "completion_tokens": 221, "duration": 7.871028661727905, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n    max_count = max(hist_dict.values())\n    max_dict = {k: v for k, v in hist_dict.items() if v == max_count}\n    return max_dict", "prompt_tokens": 713, "completion_tokens": 242, "duration": 7.9302544593811035, "result": "failed: max() arg is an empty sequence", "passed": false}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start, end = 0, len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 743, "completion_tokens": 259, "duration": 11.612468719482422, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    res_lst = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                odd_count += 1\n        res_lst.append(\"the number of odd elements \" + str(odd_count) + \"n the str\" + str(lst.index(s) + 1) + \"ng \" + str(lst.index(s) + 1) + \" of the \" + str(lst.index(s) + 1) + \"nput.\")\n    return res_lst", "prompt_tokens": 766, "completion_tokens": 287, "duration": 7.258925676345825, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 7.557124137878418, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    \n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    \n    return times", "prompt_tokens": 981, "completion_tokens": 117, "duration": 8.55326533317566, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 711, "completion_tokens": 154, "duration": 8.024902105331421, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    for word in s.split():\n        consonant_count = 0\n        for ch in word:\n            if ch.lower() not in \"aeiou\" and ch.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 764, "completion_tokens": 218, "duration": 7.0682291984558105, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_vowel = False\n    consonant_count = 0\n    vowels = \"aeiouAEIOU\"\n    \n    for char in word[::-1]:\n        if char.isalpha():\n            if char not in vowels:\n                consonant_count += 1\n            else:\n                if consonant_count > 0 and not found_vowel:\n                    closest_vowel = char\n                    found_vowel = True\n                    break\n    \n    return closest_vowel", "prompt_tokens": 719, "completion_tokens": 273, "duration": 10.6350417137146, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 772, "completion_tokens": 308, "duration": 7.152438163757324, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 775, "completion_tokens": 118, "duration": 5.659008741378784, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.277292966842651, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 6.656434774398804, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 7.885303258895874, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == '':\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['1', '3', '5', '7', '8', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['4', '6', '9', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '2':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    return True", "prompt_tokens": 986, "completion_tokens": 370, "duration": 6.182483911514282, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        words_list = count\n    return words_list", "prompt_tokens": 749, "completion_tokens": 289, "duration": 8.751160383224487, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if num < prev:\n            sorted = False\n            break\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        prev = num\n    \n    return sorted", "prompt_tokens": 922, "completion_tokens": 247, "duration": 7.435222625732422, "result": "failed: '<' not supported between instances of 'int' and 'NoneType'", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 989, "completion_tokens": 356, "duration": 10.187160968780518, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum = 0\n    product = 1\n    \n    for num in arr:\n        sum += abs(num) if num >= 0 else -abs(num)\n        product *= 1 if num >= 0 else -1 if num < 0 else 0\n    \n    return sum * product", "prompt_tokens": 617, "completion_tokens": 194, "duration": 6.332318305969238, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def isValidCell(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0]) and not visited[row][col]\n\n    def dfs(row, col, currPath):\n        visited[row][col] = True\n        currPath.append(grid[row][col])\n        if len(currPath) == k:\n            path.extend(currPath)\n            return\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if isValidCell(new_row, new_col):\n                dfs(new_row, new_col, currPath)\n        visited[row][col] = False\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [])\n    return path[:k]", "prompt_tokens": 1353, "completion_tokens": 527, "duration": 12.03089427947998, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sum(sequence[-3:]))\n    return sequence", "prompt_tokens": 898, "completion_tokens": 274, "duration": 8.7275710105896, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 9.217714071273804, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 656, "completion_tokens": 192, "duration": 7.730978488922119, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 3.605164051055908, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt == \"\":\n        return False\n    else:\n        txt = txt.rstrip()\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 662, "completion_tokens": 220, "duration": 4.296495199203491, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 568, "completion_tokens": 154, "duration": 7.481680870056152, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 661, "completion_tokens": 225, "duration": 4.70233416557312, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif type(a) == int and type(b) == float:\n        return b\n    elif type(a) == float and type(b) == int:\n        return a\n    elif type(a) == str and type(b) == int:\n        return a\n    elif type(a) == int and type(b) == str:\n        return b\n    elif type(a) == str and type(b) == float:\n        return b\n    elif type(a) == float and type(b) == str:\n        return a", "prompt_tokens": 697, "completion_tokens": 309, "duration": 8.513134479522705, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 563, "completion_tokens": 223, "duration": 4.093355655670166, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 5.444758892059326, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                if modified_text.endswith(\"-\"):\n                    modified_text = modified_text[:-1] + \"-\"\n                else:\n                    modified_text += \"-\"\n        else:\n            if count > 0:\n                if modified_text.endswith(\"-\"):\n                    modified_text = modified_text[:-1] + \"_\"\n                else:\n                    modified_text += \"_\"\n                count = 0\n            modified_text += ch\n    return modified_text", "prompt_tokens": 634, "completion_tokens": 288, "duration": 9.050966501235962, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    counter = 0\n    dot_count = 0\n    valid_start = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            counter += 1\n        elif ch == '.':\n            dot_count += 1\n        elif ch.isalpha():\n            valid_start = True\n        elif file_name.endswith('.txt') or file_name.endswith('.exe') or file_name.endswith('.dll'):\n            valid_extension = True\n    \n    if counter > 3 or dot_count != 1 or not valid_start or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 925, "completion_tokens": 377, "duration": 10.71251130104065, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 5.879130125045776, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 679, "completion_tokens": 221, "duration": 7.862503290176392, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num * x_denom * n_denom\n    return product % (x_denom * n_denom) == 0", "prompt_tokens": 675, "completion_tokens": 179, "duration": 7.648371934890747, "result": "failed: test2", "passed": false}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums", "prompt_tokens": 617, "completion_tokens": 178, "duration": 9.545153617858887, "result": "failed: 1 is not in list", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 196, "duration": 6.824813604354858, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 7.460894823074341, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n            return tuple(result)\n        else:\n            result = planets[index2+1:index1]\n            return tuple(reversed(result))\n    else:\n        return ()", "prompt_tokens": 828, "completion_tokens": 278, "duration": 10.185388326644897, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 721, "completion_tokens": 136, "duration": 4.930646896362305, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 6.782893419265747, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 610, "completion_tokens": 139, "duration": 6.415651798248291, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 821, "completion_tokens": 155, "duration": 5.3989667892456055, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 947, "completion_tokens": 235, "duration": 7.095845460891724, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    aa = a + a\n    for i in range(n):\n        sub = aa[i:i+n]\n        if sub == b:\n            return True\n    return False", "prompt_tokens": 648, "completion_tokens": 184, "duration": 7.223369598388672, "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 4.8844640254974365, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    roman_values = [(value, numeral) for value, numeral in sorted(roman_numerals.items(), reverse=True)]\n    \n    for value, numeral in roman_values:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 590, "completion_tokens": 294, "duration": 6.134992361068726, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    max_side = max(a_squared, b_squared, c_squared)\n\n    if max_side == a_squared:\n        is_right_angle = (b_squared + c_squared == a_squared)\n    elif max_side == b_squared:\n        is_right_angle = (a_squared + c_squared == b_squared)\n    else:\n        is_right_angle = (a_squared + b_squared == c_squared)\n\n    return is_right_angle", "prompt_tokens": 663, "completion_tokens": 309, "duration": 7.276432037353516, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 600, "completion_tokens": 187, "duration": 7.262150049209595, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 920, "completion_tokens": 166, "duration": 5.049717664718628, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 774, "completion_tokens": 211, "duration": 5.14583945274353, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        return result[::-1]\n    return result", "prompt_tokens": 586, "completion_tokens": 187, "duration": 7.0084147453308105, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 4.7767415046691895, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for i in range(start, end+1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 591, "completion_tokens": 188, "duration": 6.515177488327026, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 607, "completion_tokens": 162, "duration": 5.194280624389648, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n\n    for ch in paren_string:\n        if ch == '(':\n            current_group += ch\n        elif ch == ')' and current_group:\n            current_group += ch\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups", "prompt_tokens": 641, "completion_tokens": 231, "duration": 7.233784914016724, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 4.360194683074951, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 584, "completion_tokens": 138, "duration": 4.403274297714233, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 660, "completion_tokens": 227, "duration": 5.890254974365234, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimiter])\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 546, "completion_tokens": 162, "duration": 4.3023083209991455, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 688, "completion_tokens": 313, "duration": 7.310832262039185, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 109, "duration": 3.7038228511810303, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 7.146819353103638, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n\n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 185, "duration": 5.802306175231934, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 660, "completion_tokens": 139, "duration": 4.704140663146973, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 509, "completion_tokens": 154, "duration": 4.397855758666992, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 584, "completion_tokens": 203, "duration": 6.744420528411865, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 4.963267087936401, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 154, "duration": 3.923682928085327, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    \n    return result.strip()", "prompt_tokens": 449, "completion_tokens": 90, "duration": 3.8100087642669678, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 6.447961330413818, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 721, "completion_tokens": 206, "duration": 6.392109394073486, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 140, "duration": 4.700505971908569, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numerical_values = [numeral_dict[numeral] for numeral in numerals]\n    sorted_numerical_values = sorted(numerical_values)\n    sorted_numerals = [key for value, key in sorted([(value, key) for key, value in numeral_dict.items()])]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 660, "completion_tokens": 345, "duration": 9.387235879898071, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 751, "completion_tokens": 259, "duration": 7.739701509475708, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 5.121269464492798, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if type(value) is int:\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 491, "completion_tokens": 102, "duration": 6.118877649307251, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 5.634109735488892, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 428, "completion_tokens": 112, "duration": 3.9492721557617188, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 4.455210208892822, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 489, "completion_tokens": 119, "duration": 4.831758975982666, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.835552215576172, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 4.552155017852783, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 3.3375039100646973, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    res = []\n    for num in l:\n        if num > 0:\n            res.append(num)\n    return res", "prompt_tokens": 536, "completion_tokens": 86, "duration": 3.4512858390808105, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 5.616543769836426, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    largest_non_zero = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    tolerance = 1e-10\n    for x in range(-1000, 1000):  # Iterate through possible values of x\n        if abs(poly(xs, x)) < tolerance:\n            return x\n    \n    return \"Error: Zero point not found\"\n\n# Test cases\nprint(find_zero([1, 2]))  # -0.5\nprint(find_zero([-6, 11, -6, 1]))  # 1.0", "prompt_tokens": 1457, "completion_tokens": 509, "duration": 13.260350227355957, "result": "failed: must be real number, not str", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    if temp:\n        temp.sort()\n    \n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    \n    return result", "prompt_tokens": 730, "completion_tokens": 285, "duration": 6.778493642807007, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 5.410121202468872, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 116, "duration": 3.7425377368927, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 167, "duration": 5.815437078475952, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = sorted([v for i, v in enumerate(l) if i % 2 == 0])\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 640, "completion_tokens": 224, "duration": 7.569316864013672, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 180, "duration": 10.003640413284302, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    fib_list = [0, 1]\n    count = 0\n    num = 1\n\n    while count < n:\n        num += 1\n        if is_fibonacci(num) and is_prime(num):\n            count += 1\n            fib_list.append(num)\n\n    return fib_list[-1]", "prompt_tokens": 544, "completion_tokens": 263, "duration": 6.31753134727478, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 6.071836471557617, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            collisions += 1\n    return collisions", "prompt_tokens": 619, "completion_tokens": 98, "duration": 6.84752893447876, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 2.7546005249023438, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 667, "completion_tokens": 142, "duration": 8.979983568191528, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 6.639495849609375, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 3.5278985500335693, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    return fib4_list[n]", "prompt_tokens": 725, "completion_tokens": 221, "duration": 9.701601266860962, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 513, "completion_tokens": 166, "duration": 3.5656299591064453, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 493, "completion_tokens": 117, "duration": 3.0552961826324463, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 204, "duration": 5.862710952758789, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_str = \"\"\n    for ch in s:\n        decoded_ch = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_str += decoded_ch\n    return decoded_str", "prompt_tokens": 526, "completion_tokens": 146, "duration": 5.845369577407837, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 3.203664779663086, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 2.272878646850586, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 398, "completion_tokens": 46, "duration": 1.6336419582366943, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_freq = {}\n    \n    for char in s0:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char in s1:\n        if char not in char_freq:\n            return False\n        else:\n            char_freq[char] -= 1\n    \n    return all(value == 0 for value in char_freq.values())", "prompt_tokens": 688, "completion_tokens": 254, "duration": 6.035218715667725, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 3.7997584342956543, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 169, "duration": 9.56165099143982, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            is_decreasing = False\n        elif l[i] < l[i-1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 540, "completion_tokens": 196, "duration": 4.441322326660156, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    l1.sort()\n    l2.sort()\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 151, "duration": 3.176682710647583, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 489, "completion_tokens": 168, "duration": 5.764230728149414, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.422589540481567, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 543, "completion_tokens": 167, "duration": 4.276453256607056, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 560, "completion_tokens": 111, "duration": 6.449157953262329, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 680, "completion_tokens": 240, "duration": 8.313374996185303, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 178, "duration": 6.319784164428711, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len if shift > num_len else shift\n    if shift == 0:\n        return num_str\n    result = num_str[-shift:] + num_str[:-shift]\n    return result", "prompt_tokens": 556, "completion_tokens": 203, "duration": 11.177227258682251, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 3.724388837814331, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 787, "completion_tokens": 151, "duration": 6.387650728225708, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n            found_even = True\n        elif num % 2 == 0 and num == smallest_value:\n            smallest_index = min(i, smallest_index)\n\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1049, "completion_tokens": 283, "duration": 8.41575288772583, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    greatest_int = -1\n\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n            if freq[num] >= num:\n                greatest_int = max(greatest_int, num)\n\n    return greatest_int", "prompt_tokens": 701, "completion_tokens": 182, "duration": 6.281515121459961, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 3.96691632270813, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 190, "duration": 4.5555784702301025, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    sum_q = sum(q)\n    is_balanced = True\n    length_q = len(q)\n    half_length_q = (length_q + 1) // 2 if length_q % 2 != 0 else length_q // 2\n    \n    if q[:half_length_q] != q[-half_length_q:][::-1]:\n        is_balanced = False\n    \n    return sum_q <= w and is_balanced", "prompt_tokens": 947, "completion_tokens": 328, "duration": 6.395340204238892, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 723, "completion_tokens": 247, "duration": 5.525659799575806, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 188, "duration": 6.565004110336304, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    prime_count = len(primes)\n\n    if prime_count < 3:\n        return False\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False", "prompt_tokens": 579, "completion_tokens": 321, "duration": 6.837357759475708, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x != 1 and n == 1:\n        return False\n    if x == 1 and n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False", "prompt_tokens": 639, "completion_tokens": 190, "duration": 6.877852916717529, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 549, "completion_tokens": 102, "duration": 5.517141819000244, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 926, "completion_tokens": 120, "duration": 7.797909736633301, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    quotient = decimal\n    while quotient > 0:\n        remainder = quotient % 2\n        binary_str = str(remainder) + binary_str\n        quotient = quotient // 2\n    binary_str += 'db'\n    return binary_str", "prompt_tokens": 668, "completion_tokens": 198, "duration": 4.913509845733643, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 6.411120891571045, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 11.8518385887146, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 562, "completion_tokens": 214, "duration": 7.096374988555908, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 5.440328121185303, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N)))[2:]\n    return binary_sum", "prompt_tokens": 612, "completion_tokens": 117, "duration": 4.738508224487305, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd += lst[i]\n    return sum_even_odd", "prompt_tokens": 448, "completion_tokens": 133, "duration": 6.56306529045105, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 616, "completion_tokens": 156, "duration": 5.849979639053345, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, r in enumerate(lst):\n        if x in r:\n            for j, v in sorted(enumerate(r), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 906, "completion_tokens": 222, "duration": 8.918439388275146, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 816, "completion_tokens": 212, "duration": 11.146629333496094, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 9.019571304321289, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 9.06101131439209, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 540, "completion_tokens": 122, "duration": 6.20250678062439, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 627, "completion_tokens": 225, "duration": 9.185778856277466, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    for ch in message:\n        if ch.lower() in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            encoded_ch = chr(ord('a') + index)\n        elif ch.isalpha():\n            encoded_ch = ch.swapcase()\n        else:\n            encoded_ch = ch\n        encoded_message += encoded_ch\n    return encoded_message", "prompt_tokens": 601, "completion_tokens": 224, "duration": 7.575077772140503, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 984, "completion_tokens": 285, "duration": 7.591843366622925, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    return is_lower == is_upper", "prompt_tokens": 715, "completion_tokens": 204, "duration": 8.416926383972168, "result": "failed: First test error: False", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 8.206509590148926, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 6.5962066650390625, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 6.465622186660767, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = value - floor_val\n    diff_ceil = ceil_val - value\n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 701, "completion_tokens": 203, "duration": 7.3194475173950195, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 4.97838282585144, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 644, "completion_tokens": 226, "duration": 9.923293352127075, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            max_even = num\n            break\n    return max_even", "prompt_tokens": 512, "completion_tokens": 119, "duration": 6.20695424079895, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total_sum = 0\n    count = 0\n\n    for i in range(n, m+1):\n        total_sum += i\n        count += 1\n\n    average = round(total_sum / count)\n    return bin(average)", "prompt_tokens": 629, "completion_tokens": 161, "duration": 5.801945924758911, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 577, "completion_tokens": 160, "duration": 4.511173963546753, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 981, "completion_tokens": 339, "duration": 11.305529832839966, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 181, "duration": 6.013857126235962, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 190, "duration": 8.68829345703125, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 210, "duration": 7.233004093170166, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    arr = arr[min_index:] + arr[:min_index]\n    return arr == sorted(arr)", "prompt_tokens": 954, "completion_tokens": 143, "duration": 4.438493490219116, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    return \"YES\" if count_odd % 2 == 0 else \"NO\"", "prompt_tokens": 759, "completion_tokens": 190, "duration": 7.731027841567993, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter not in result_dict:\n            result_dict[letter] = 1\n        else:\n            result_dict[letter] += 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [letter for letter, count in result_dict.items() if count == max_count]\n    result_dict = {letter: count for letter, count in result_dict.items() if letter in max_letters}\n    \n    return result_dict", "prompt_tokens": 763, "completion_tokens": 335, "duration": 9.815523386001587, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = True\n    start, end = 0, len(modified_str) - 1\n    while start < end:\n        if modified_str[start] != modified_str[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (modified_str, is_palindrome)", "prompt_tokens": 754, "completion_tokens": 278, "duration": 8.085844993591309, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, s, s, s))\n    return result", "prompt_tokens": 728, "completion_tokens": 200, "duration": 8.359406232833862, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.460769176483154, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1025, "completion_tokens": 166, "duration": 7.853759527206421, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 769, "completion_tokens": 211, "duration": 7.259668588638306, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word_list = s.split()\n    for word in word_list:\n        consonant_count = 0\n        for ch in word:\n            if ch.lower() in consonants:\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 845, "completion_tokens": 375, "duration": 10.163742542266846, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_vowel = False\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    for char in word[::-1]:\n        if char.isalpha() and char not in vowels:\n            if found_vowel and char in vowels:\n                closest_vowel = char\n                break\n        elif char in vowels:\n            found_vowel = True\n            \n    return closest_vowel", "prompt_tokens": 743, "completion_tokens": 302, "duration": 9.49827790260315, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')' and stack:\n                stack.pop()\n            elif ch == ')' and not stack:\n                return 'No'\n    return 'Yes'", "prompt_tokens": 717, "completion_tokens": 190, "duration": 6.435169696807861, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 779, "completion_tokens": 122, "duration": 6.552870750427246, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 5.397143125534058, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 3.8930723667144775, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n    odd_collatz_list.sort()\n\n    return odd_collatz_list", "prompt_tokens": 859, "completion_tokens": 234, "duration": 10.159324884414673, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 965, "completion_tokens": 392, "duration": 10.736183643341064, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 8.339233636856079, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    sorted = True\n    for num in lst:\n        if prev is not None:\n            if num < prev:\n                sorted = False\n                break\n            elif num == prev:\n                if has_duplicate:\n                    sorted = False\n                    break\n                else:\n                    has_duplicate = True\n        prev = num\n    return sorted", "prompt_tokens": 931, "completion_tokens": 261, "duration": 7.670827388763428, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 938, "completion_tokens": 323, "duration": 9.11833119392395, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitude = 0\n    product_sign = 1\n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= 1 if num >= 0 else -1\n    return sum_magnitude * product_sign", "prompt_tokens": 632, "completion_tokens": 200, "duration": 10.033693075180054, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    path = []\n    visited = set()\n    pq = [(grid[0][0], 0, 0)]\n    \n    while pq and k > 0:\n        val, i, j = heapq.heappop(pq)\n        if (i, j) not in visited:\n            path.append(val)\n            visited.add((i, j))\n            k -= 1\n            for dx, dy in [(0, 1), (1, 0)]:\n                ni, nj = i + dx, j + dy\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                    heapq.heappush(pq, (grid[ni][nj], ni, nj))\n    \n    return path", "prompt_tokens": 1295, "completion_tokens": 423, "duration": 9.183695316314697, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_i = 1 + i // 2\n            else:\n                tri_i = seq[i - 1] + seq[i - 2] + seq[i - 3]\n            seq.append(tri_i)\n        return seq", "prompt_tokens": 867, "completion_tokens": 259, "duration": 8.81025743484497, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 491, "completion_tokens": 150, "duration": 7.30369758605957, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 649, "completion_tokens": 176, "duration": 7.047084093093872, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 4.205636024475098, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 639, "completion_tokens": 177, "duration": 10.435324668884277, "result": "passed", "passed": true}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 541, "completion_tokens": 124, "duration": 23.390871047973633, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n\n    if not lst:\n        return (a, b)\n\n    max_neg = float('-inf')\n    min_pos = float('inf')\n\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        if num > 0 and num < min_pos:\n            min_pos = num\n\n    if max_neg == float('-inf'):\n        a = None\n    else:\n        a = max_neg\n\n    if min_pos == float('inf'):\n        b = None\n    else:\n        b = min_pos\n\n    return (a, b)", "prompt_tokens": 702, "completion_tokens": 311, "duration": 53.52479410171509, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 12.098675966262817, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 194, "duration": 6.115696430206299, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 5.473838806152344, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text = modified_text[:-1] + \"-\"\n        else:\n            if count > 2:\n                modified_text = modified_text[:-count] + \"-\"\n                count = 0\n            modified_text += ch\n    return modified_text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 632, "completion_tokens": 319, "duration": 6.130920648574829, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    counter = 0\n    dot_count = 0\n    valid_start = True\n    valid_extension = True\n    \n    for ch in file_name:\n        if ch.isdigit():\n            counter += 1\n        elif ch == '.':\n            dot_count += 1\n        if ch.isalpha() and valid_start:\n            valid_start = False\n        if dot_count == 1 and not ch.isalpha() and ch != '.':\n            valid_extension = False\n    \n    if counter > 3 or dot_count != 1 or valid_start or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 963, "completion_tokens": 415, "duration": 11.259027242660522, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.253223180770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 665, "completion_tokens": 207, "duration": 8.849939584732056, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product = x_num * n_num\n    return product % x_den == 0 and product % n_den == 0", "prompt_tokens": 688, "completion_tokens": 182, "duration": 8.105469703674316, "result": "failed: test4", "passed": false}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {i: sum(map(int, str(abs(num)))) for i, num in enumerate(nums)}\n    sorted_indices = sorted(digit_sums, key=digit_sums.get)\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 629, "completion_tokens": 202, "duration": 6.15041446685791, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = str(num)[0]\n            last_digit = str(num)[-1]\n            if int(first_digit) % 2 != 0 and int(last_digit) % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 601, "completion_tokens": 182, "duration": 6.7092859745025635, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 9.920671701431274, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    \n    return tuple(result)", "prompt_tokens": 837, "completion_tokens": 307, "duration": 8.264135599136353, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 718, "completion_tokens": 133, "duration": 4.928792476654053, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return None\n    if n == 2:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 506, "completion_tokens": 136, "duration": 5.868448495864868, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 613, "completion_tokens": 144, "duration": 4.761510848999023, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 8.738674879074097, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    \n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 940, "completion_tokens": 229, "duration": 6.359302043914795, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    concat_str = a + a\n    for i in range(n):\n        temp_str = concat_str[i:i+m]\n        if temp_str == b:\n            return True\n    return False", "prompt_tokens": 667, "completion_tokens": 222, "duration": 10.554168224334717, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 3.442915201187134, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90,\n        'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n    \n    roman_numeral = ''\n    \n    roman_symbols = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n        ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5),\n        ('IV', 4), ('I', 1)\n    ]\n    \n    for roman_symbol, value in roman_symbols:\n        while number >= value:\n            roman_numeral += roman_symbol\n            number -= value\n    \n    return roman_numeral.lower()", "prompt_tokens": 620, "completion_tokens": 393, "duration": 7.9046361446380615, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    longest_side = max(a, b, c)\n\n    if longest_side == a:\n        return side_a_squared == side_b_squared + side_c_squared\n    elif longest_side == b:\n        return side_b_squared == side_a_squared + side_c_squared\n    else:\n        return side_c_squared == side_a_squared + side_b_squared", "prompt_tokens": 671, "completion_tokens": 306, "duration": 11.231921911239624, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars_count or (len(unique_chars) == max_unique_chars_count and word < max_word):\n            max_unique_chars_count = len(unique_chars)\n            max_word = word\n    \n    return max_word", "prompt_tokens": 675, "completion_tokens": 260, "duration": 4.856414794921875, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    if remaining >= total_eaten_carrots:\n        remaining_carrots = remaining - total_eaten_carrots\n    else:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 940, "completion_tokens": 196, "duration": 4.3438451290130615, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 841, "completion_tokens": 279, "duration": 9.197893619537354, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 587, "completion_tokens": 190, "duration": 4.525606870651245, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.104294061660767, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 574, "completion_tokens": 171, "duration": 5.222534894943237, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 603, "completion_tokens": 158, "duration": 5.11864709854126, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 692, "completion_tokens": 331, "duration": 10.37520432472229, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 499, "completion_tokens": 103, "duration": 4.909381628036499, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 554, "completion_tokens": 108, "duration": 3.750537157058716, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 646, "completion_tokens": 205, "duration": 5.342156410217285, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 3.979726791381836, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        depth_counter = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth_counter += 1\n            elif char == ')':\n                depth_counter -= 1\n            max_depth = max(max_depth, depth_counter)\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 675, "completion_tokens": 300, "duration": 7.4376044273376465, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 2.8899080753326416, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 4.616933822631836, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 581, "completion_tokens": 205, "duration": 6.231878757476807, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 662, "completion_tokens": 141, "duration": 4.950571775436401, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 503, "completion_tokens": 148, "duration": 5.2081568241119385, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    \n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string", "prompt_tokens": 554, "completion_tokens": 159, "duration": 4.733865737915039, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 95, "duration": 3.318887948989868, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 156, "duration": 6.439905166625977, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 110, "duration": 3.3120436668395996, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 492, "completion_tokens": 146, "duration": 5.354295015335083, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 734, "completion_tokens": 217, "duration": 6.008431911468506, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 4.715419769287109, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 592, "completion_tokens": 238, "duration": 5.960716724395752, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 720, "completion_tokens": 229, "duration": 10.582080364227295, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 624, "completion_tokens": 190, "duration": 6.042001485824585, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 494, "completion_tokens": 104, "duration": 3.1980905532836914, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 84, "duration": 3.238895893096924, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 443, "completion_tokens": 132, "duration": 4.406160593032837, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 620, "completion_tokens": 177, "duration": 6.394998550415039, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 489, "completion_tokens": 117, "duration": 6.17383074760437, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 4.6963722705841064, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 5.649359464645386, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.875747203826904, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 540, "completion_tokens": 78, "duration": 3.4616897106170654, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 4.167027950286865, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and len(xs) > 0, \"Input list must have even number of coefficients and not be empty\"\n    \n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    zero_point = 0.0\n    \n    if xs[-1] == largest_non_zero_coeff:\n        zero_point = -xs[0] / xs[1]\n    else:\n        # Use Newton's method to find zero_point\n        def poly_derivative(xs, x):\n            return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n        \n        x = 1.0  # Initial guess\n        while abs(poly(xs, x)) > 1e-6:\n            x = x - poly(xs, x) / poly_derivative(xs, x)\n        \n        zero_point = x\n    \n    return zero_point", "prompt_tokens": 911, "completion_tokens": 341, "duration": 13.69795274734497, "result": "failed: name 'poly' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    temp.sort()\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp.pop(0))\n    \n    return result", "prompt_tokens": 715, "completion_tokens": 245, "duration": 9.775279521942139, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 3.387085199356079, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 531, "completion_tokens": 149, "duration": 4.956223249435425, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 524, "completion_tokens": 170, "duration": 5.372229814529419, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        if i % 2 != 0 or i == len(l) - 1:\n            temp.sort()\n            result.extend(temp)\n            result.append(v)\n            temp = []\n    return result", "prompt_tokens": 619, "completion_tokens": 197, "duration": 5.782246112823486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 180, "duration": 6.652739763259888, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 625, "completion_tokens": 333, "duration": 8.185688734054565, "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 760, "completion_tokens": 297, "duration": 7.477399826049805, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for car in range(1, n+1):\n        collisions += n - car\n    return collisions", "prompt_tokens": 639, "completion_tokens": 117, "duration": 4.180127143859863, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 5.439035415649414, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 648, "completion_tokens": 130, "duration": 3.63043212890625, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 50.666847705841064, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 3.0996060371398926, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(sum(fib4_list[-4:]))\n    return fib4_list[n]", "prompt_tokens": 713, "completion_tokens": 186, "duration": 4.868746042251587, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 512, "completion_tokens": 165, "duration": 7.264183521270752, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 513, "completion_tokens": 138, "duration": 13.557806015014648, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent //= 2\n    return result", "prompt_tokens": 583, "completion_tokens": 198, "duration": 6.86790132522583, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 525, "completion_tokens": 128, "duration": 4.8929431438446045, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 592, "completion_tokens": 129, "duration": 3.4827260971069336, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 2.7793755531311035, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.4256041049957275, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count:\n            return False\n        else:\n            char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 694, "completion_tokens": 256, "duration": 6.056830406188965, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n\n    for i in range(2, n+1):\n        next_fib = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_fib)\n\n    return fib_sequence[n]", "prompt_tokens": 461, "completion_tokens": 185, "duration": 6.8693788051605225, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count_open = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count_open += 1\n        elif bracket == \">\":\n            if count_open == 0:\n                return False\n            else:\n                count_open -= 1\n\n    return count_open == 0", "prompt_tokens": 537, "completion_tokens": 168, "duration": 6.402524709701538, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    isIncreasing = True\n    isDecreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            isIncreasing = False\n        if l[i] < l[i+1]:\n            isDecreasing = False\n\n    if isIncreasing or isDecreasing:\n        return True\n    else:\n        return False", "prompt_tokens": 541, "completion_tokens": 197, "duration": 9.484352588653564, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 582, "completion_tokens": 146, "duration": 4.7399492263793945, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 175, "duration": 6.319316864013672, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 2.99748158454895, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 163, "duration": 61.65370488166809, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 560, "completion_tokens": 121, "duration": 6.8232033252716064, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 675, "completion_tokens": 226, "duration": 8.19586730003357, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 605, "completion_tokens": 234, "duration": 8.751907587051392, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    effective_shift = shift % length\n    if effective_shift == 0:\n        return x_str\n    result = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return result", "prompt_tokens": 559, "completion_tokens": 200, "duration": 5.551836729049683, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 536, "completion_tokens": 88, "duration": 4.818455934524536, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 784, "completion_tokens": 149, "duration": 7.481364727020264, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for index, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = index\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(smallest_index, index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1050, "completion_tokens": 286, "duration": 9.748672246932983, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key:\n            if greatest_int == -1 or key > greatest_int:\n                greatest_int = key\n\n    return greatest_int", "prompt_tokens": 724, "completion_tokens": 233, "duration": 8.224002599716187, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if len(lst) > 1:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 619, "completion_tokens": 159, "duration": 5.670620679855347, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 5.520233392715454, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n\n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 8.3289053440094, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 713, "completion_tokens": 219, "duration": 7.684802770614624, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 772, "completion_tokens": 212, "duration": 6.271288871765137, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 519, "completion_tokens": 220, "duration": 8.805132627487183, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 611, "completion_tokens": 114, "duration": 5.022988796234131, "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    result = False\n    cube_root = abs(a) ** (1/3)\n    if cube_root.is_integer():\n        result = True\n    return result", "prompt_tokens": 553, "completion_tokens": 115, "duration": 4.34030556678772, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.955401182174683, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    binary_str += bin(decimal)[2:]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 120, "duration": 4.444589138031006, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 6.128353118896484, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for GPA in grades:\n        if GPA == 4.0:\n            letter_grades.append('A+')\n        elif GPA > 3.7:\n            letter_grades.append('A')\n        elif GPA > 3.3:\n            letter_grades.append('A-')\n        elif GPA > 3.0:\n            letter_grades.append('B+')\n        elif GPA > 2.7:\n            letter_grades.append('B')\n        elif GPA > 2.3:\n            letter_grades.append('B-')\n        elif GPA > 2.0:\n            letter_grades.append('C+')\n        elif GPA > 1.7:\n            letter_grades.append('C')\n        elif GPA > 1.3:\n            letter_grades.append('C-')\n        elif GPA > 1.0:\n            letter_grades.append('D+')\n        elif GPA > 0.7:\n            letter_grades.append('D')\n        elif GPA > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1093, "completion_tokens": 544, "duration": 12.053129196166992, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 546, "completion_tokens": 197, "duration": 4.059236526489258, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 8.168240070343018, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return bin(sum)[2:]", "prompt_tokens": 612, "completion_tokens": 120, "duration": 3.0996477603912354, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.489278793334961, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 643, "completion_tokens": 173, "duration": 6.631078243255615, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, value in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if value == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 919, "completion_tokens": 236, "duration": 6.920659780502319, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n    return sorted_array", "prompt_tokens": 801, "completion_tokens": 182, "duration": 4.854761600494385, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 7.0436928272247314, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 641, "completion_tokens": 233, "duration": 6.379380941390991, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 565, "completion_tokens": 147, "duration": 5.881462097167969, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 131, "duration": 3.067723274230957, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = (ord(ch.lower()) - ord('a') + 2) % 26\n                encoded_ch = chr(ord('a') + index)\n                if ch.isupper():\n                    encoded_ch = encoded_ch.upper()\n            else:\n                encoded_ch = ch.swapcase()\n        else:\n            encoded_ch = ch\n        encoded_message += encoded_ch\n    return encoded_message", "prompt_tokens": 585, "completion_tokens": 228, "duration": 5.800746440887451, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is not None:\n        sum_digits = calculate_sum_of_digits(largest_prime)\n        return sum_digits\n    else:\n        return 0", "prompt_tokens": 1015, "completion_tokens": 366, "duration": 8.51224970817566, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n    \n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 226, "duration": 9.146577835083008, "result": "passed", "passed": true}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 3.481778144836426, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 4.6398069858551025, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n\n    return count", "prompt_tokens": 489, "completion_tokens": 155, "duration": 7.43027138710022, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = value - floor_val\n    diff_ceil = ceil_val - value\n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 693, "completion_tokens": 195, "duration": 7.704236030578613, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 5.283491849899292, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words", "prompt_tokens": 581, "completion_tokens": 118, "duration": 5.522193908691406, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 4.868109703063965, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 171, "duration": 10.87568736076355, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(digit not in ['0', '2', '4', '6', '8'] for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 573, "completion_tokens": 165, "duration": 5.986195802688599, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 953, "completion_tokens": 310, "duration": 6.064132928848267, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 601, "completion_tokens": 174, "duration": 7.050501585006714, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 4.950037717819214, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            num = abs(num)\n            sum_digits = -1\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.619477033615112, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_index = arr.index(min(arr))\n    n = len(arr)\n    \n    for i in range(n):\n        if all(arr[j] <= arr[(j+1)%n] for j in range(n)):\n            return True\n        arr = [arr[(j-1)%n] for j in range(n)]\n    \n    return False", "prompt_tokens": 978, "completion_tokens": 209, "duration": 6.035843133926392, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 9.094948291778564, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    letters_list = test.split()\n    max_count = 0\n    \n    for letter in letters_list:\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n        \n        if histogram_dict[letter] > max_count:\n            max_count = histogram_dict[letter]\n    \n    result_letters = [key for key, value in histogram_dict.items() if value == max_count]\n    result = {letter: histogram_dict[letter] for letter in result_letters}\n    \n    return result", "prompt_tokens": 803, "completion_tokens": 369, "duration": 13.037577867507935, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = True\n    start_index = 0\n    end_index = len(modified_str) - 1\n    while start_index < end_index:\n        if modified_str[start_index] != modified_str[end_index]:\n            is_palindrome = False\n            break\n        start_index += 1\n        end_index -= 1\n    return (modified_str, is_palindrome)", "prompt_tokens": 756, "completion_tokens": 288, "duration": 6.94468355178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, s, count))\n    return result", "prompt_tokens": 724, "completion_tokens": 196, "duration": 8.117076396942139, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j+1])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum", "prompt_tokens": 557, "completion_tokens": 186, "duration": 8.266404628753662, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1036, "completion_tokens": 183, "duration": 9.643679141998291, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    ones_count = {}\n    \n    for num in arr:\n        ones_count[num] = bin(num).count('1')\n    \n    def custom_sort(num):\n        return (ones_count[num], num)\n    \n    return sorted(arr, key=custom_sort)", "prompt_tokens": 773, "completion_tokens": 234, "duration": 7.166351079940796, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 748, "completion_tokens": 201, "duration": 4.288333415985107, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() not in vowels and word[i].isalpha():\n            last_consonant_index = i\n        elif word[i].lower() in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 726, "completion_tokens": 293, "duration": 8.967321395874023, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    \n    return 'Yes' if not stack else 'No'", "prompt_tokens": 706, "completion_tokens": 188, "duration": 6.5913472175598145, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 776, "completion_tokens": 118, "duration": 5.480337381362915, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 5.227520704269409, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 7.690825700759888, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.7253029346466064, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) == 3:\n        month, day, year = map(int, parts)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2 and (day < 1 or day > 29):\n            return False\n        if year < 1:\n            return False\n        return True\n    return False", "prompt_tokens": 1031, "completion_tokens": 412, "duration": 10.760137557983398, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 11.77054238319397, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    for num in lst:\n        if prev is not None and num <= prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        prev = num\n    return sorted and duplicate_count <= 1", "prompt_tokens": 923, "completion_tokens": 245, "duration": 7.642646074295044, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    length1 = interval1[1] - interval1[0] + 1\n    length2 = interval2[1] - interval2[0] + 1\n\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        intersection_length = intersection_end - intersection_start + 1\n\n        if intersection_length <= 1:\n            return \"NO\"\n        else:\n            is_prime = True\n            for i in range(2, int(intersection_length**0.5) + 1):\n                if intersection_length % i == 0:\n                    is_prime = False\n                    break\n\n            if is_prime:\n                return \"YES\"\n            else:\n                return \"NO\"", "prompt_tokens": 975, "completion_tokens": 408, "duration": 10.835817098617554, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_sign = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    \n    return product_sign * sum_magnitudes", "prompt_tokens": 632, "completion_tokens": 217, "duration": 7.850783586502075, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    path = []\n    visited = set()\n    pq = [(grid[0][0], 0, 0)]\n    \n    while pq and k > 0:\n        val, i, j = heapq.heappop(pq)\n        if (i, j) not in visited:\n            path.append(val)\n            visited.add((i, j))\n            k -= 1\n            for x, y in [(i+1, j), (i, j+1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                    heapq.heappush(pq, (grid[x][y], x, y))\n    \n    return path", "prompt_tokens": 1294, "completion_tokens": 410, "duration": 11.802284955978394, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [0, 1]\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    \n    return sequence", "prompt_tokens": 844, "completion_tokens": 217, "duration": 9.494784832000732, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 7.578305244445801, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 661, "completion_tokens": 197, "duration": 7.304407119750977, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 644, "completion_tokens": 124, "duration": 8.624085187911987, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 645, "completion_tokens": 179, "duration": 6.460416316986084, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 539, "completion_tokens": 122, "duration": 7.446899890899658, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 662, "completion_tokens": 213, "duration": 7.724966526031494, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 685, "completion_tokens": 251, "duration": 10.343018293380737, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 194, "duration": 4.830546617507935, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 7.914444208145142, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += \"_\"\n        else:\n            if count > 2:\n                updated_text += \"-\"\n                count = 0\n            updated_text += ch\n    if count > 2:\n        updated_text += \"-\"\n    return updated_text", "prompt_tokens": 634, "completion_tokens": 265, "duration": 8.100115060806274, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_flag = False\n    valid_start_letter = False\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n        elif ch == '.':\n            if dot_flag:\n                return 'No'\n            dot_flag = True\n        elif ch.isalpha():\n            if not dot_flag:\n                valid_start_letter = True\n        if dot_flag and ch == file_name[-1]:\n            if file_name[file_name.index('.') + 1:] not in valid_extensions:\n                return 'No'\n\n    if valid_start_letter and dot_flag:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 929, "completion_tokens": 414, "duration": 9.991113185882568, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.652416467666626, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 688, "completion_tokens": 227, "duration": 8.735840559005737, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "prompt_tokens": 657, "completion_tokens": 131, "duration": 4.412745952606201, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    sum_dict = {}\n    sum_list = []\n    \n    for i, num in enumerate(nums):\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        sum_list.append((sum_digits, i, num))\n    \n    sum_list.sort(key=lambda x: (x[0], x[1]))\n    \n    sorted_nums = [num for _, _, num in sum_list]\n    \n    return sorted_nums", "prompt_tokens": 670, "completion_tokens": 277, "duration": 7.666252851486206, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.442403078079224, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 8.18468189239502, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1][::-1]\n\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 828, "completion_tokens": 272, "duration": 10.10201621055603, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 732, "completion_tokens": 147, "duration": 7.083354949951172, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return x\n    else:\n        return y", "prompt_tokens": 516, "completion_tokens": 158, "duration": 7.591780662536621, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 610, "completion_tokens": 139, "duration": 5.423506259918213, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 4.671461582183838, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 945, "completion_tokens": 233, "duration": 6.825535297393799, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a += a\n    for i in range(n):\n        if b in a[i:i+n]:\n            return True\n    return False", "prompt_tokens": 634, "completion_tokens": 162, "duration": 4.861336946487427, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 3.1471097469329834, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 566, "completion_tokens": 253, "duration": 6.377119064331055, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 568, "completion_tokens": 150, "duration": 3.662692070007324, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 592, "completion_tokens": 172, "duration": 6.485175132751465, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 916, "completion_tokens": 162, "duration": 7.813855409622192, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = result + operand[i+1]\n        elif operator[i] == '-':\n            result = result - operand[i+1]\n        elif operator[i] == '*':\n            result = result * operand[i+1]\n        elif operator[i] == '//':\n            result = result // operand[i+1]\n        elif operator[i] == '**':\n            result = result ** operand[i+1]\n    return result", "prompt_tokens": 833, "completion_tokens": 279, "duration": 7.693090915679932, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 592, "completion_tokens": 200, "duration": 7.192621231079102, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 4.614485025405884, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = [num for num in range(min(a, b), max(a, b)+1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 576, "completion_tokens": 156, "duration": 4.585540771484375, "result": "failed: Test 1", "passed": false}
