{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 607, "completion_tokens": 162, "duration": 5.194280624389648}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n\n    for ch in paren_string:\n        if ch == '(':\n            current_group += ch\n        elif ch == ')' and current_group:\n            current_group += ch\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups", "prompt_tokens": 641, "completion_tokens": 231, "duration": 7.233784914016724}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 4.360194683074951}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 584, "completion_tokens": 138, "duration": 4.403274297714233}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 660, "completion_tokens": 227, "duration": 5.890254974365234}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers) - 1):\n        result.extend([numbers[i], delimiter])\n    result.append(numbers[-1])\n    return result", "prompt_tokens": 546, "completion_tokens": 162, "duration": 4.3023083209991455}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 688, "completion_tokens": 313, "duration": 7.310832262039185}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 109, "duration": 3.7038228511810303}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 7.146819353103638}
{"task_id": "HumanEval/9", "generated_code": "from typing import List, Tuple\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n\n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 185, "duration": 5.802306175231934}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 660, "completion_tokens": 139, "duration": 4.704140663146973}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 509, "completion_tokens": 154, "duration": 4.397855758666992}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 584, "completion_tokens": 203, "duration": 6.744420528411865}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 4.963267087936401}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 154, "duration": 3.923682928085327}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    \n    return result.strip()", "prompt_tokens": 449, "completion_tokens": 90, "duration": 3.8100087642669678}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 6.447961330413818}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 721, "completion_tokens": 206, "duration": 6.392109394073486}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 140, "duration": 4.700505971908569}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numerical_values = [numeral_dict[numeral] for numeral in numerals]\n    sorted_numerical_values = sorted(numerical_values)\n    sorted_numerals = [key for value, key in sorted([(value, key) for key, value in numeral_dict.items()])]\n    return ' '.join(sorted_numerals)", "prompt_tokens": 660, "completion_tokens": 345, "duration": 9.387235879898071}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 751, "completion_tokens": 259, "duration": 7.739701509475708}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 5.121269464492798}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if type(value) is int:\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 491, "completion_tokens": 102, "duration": 6.118877649307251}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 5.634109735488892}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 428, "completion_tokens": 112, "duration": 3.9492721557617188}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 4.455210208892822}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 489, "completion_tokens": 119, "duration": 4.831758975982666}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 4.835552215576172}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 4.552155017852783}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 3.3375039100646973}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    res = []\n    for num in l:\n        if num > 0:\n            res.append(num)\n    return res", "prompt_tokens": 536, "completion_tokens": 86, "duration": 3.4512858390808105}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 116, "duration": 5.616543769836426}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return \"Error: List must have an even number of coefficients\"\n    \n    largest_non_zero = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    tolerance = 1e-10\n    for x in range(-1000, 1000):  # Iterate through possible values of x\n        if abs(poly(xs, x)) < tolerance:\n            return x\n    \n    return \"Error: Zero point not found\"\n\n# Test cases\nprint(find_zero([1, 2]))  # -0.5\nprint(find_zero([-6, 11, -6, 1]))  # 1.0", "prompt_tokens": 1457, "completion_tokens": 509, "duration": 13.260350227355957}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    if temp:\n        temp.sort()\n    \n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    \n    return result", "prompt_tokens": 730, "completion_tokens": 285, "duration": 6.778493642807007}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 5.410121202468872}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 496, "completion_tokens": 116, "duration": 3.7425377368927}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for digit in str(i):\n                if digit == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 167, "duration": 5.815437078475952}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = sorted([v for i, v in enumerate(l) if i % 2 == 0])\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 640, "completion_tokens": 224, "duration": 7.569316864013672}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 180, "duration": 10.003640413284302}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    fib_list = [0, 1]\n    count = 0\n    num = 1\n\n    while count < n:\n        num += 1\n        if is_fibonacci(num) and is_prime(num):\n            count += 1\n            fib_list.append(num)\n\n    return fib_list[-1]", "prompt_tokens": 544, "completion_tokens": 263, "duration": 6.31753134727478}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 6.071836471557617}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            collisions += 1\n    return collisions", "prompt_tokens": 619, "completion_tokens": 98, "duration": 6.84752893447876}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 2.7546005249023438}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 667, "completion_tokens": 142, "duration": 8.979983568191528}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 6.639495849609375}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 3.5278985500335693}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4])\n    return fib4_list[n]", "prompt_tokens": 725, "completion_tokens": 221, "duration": 9.701601266860962}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 513, "completion_tokens": 166, "duration": 3.5656299591064453}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 493, "completion_tokens": 117, "duration": 3.0552961826324463}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 204, "duration": 5.862710952758789}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_str = \"\"\n    for ch in s:\n        decoded_ch = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_str += decoded_ch\n    return decoded_str", "prompt_tokens": 526, "completion_tokens": 146, "duration": 5.845369577407837}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 3.203664779663086}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 2.272878646850586}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    return x + y", "prompt_tokens": 398, "completion_tokens": 46, "duration": 1.6336419582366943}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_freq = {}\n    \n    for char in s0:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char in s1:\n        if char not in char_freq:\n            return False\n        else:\n            char_freq[char] -= 1\n    \n    return all(value == 0 for value in char_freq.values())", "prompt_tokens": 688, "completion_tokens": 254, "duration": 6.035218715667725}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 3.7997584342956543}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 169, "duration": 9.56165099143982}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            is_decreasing = False\n        elif l[i] < l[i-1]:\n            is_increasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 540, "completion_tokens": 196, "duration": 4.441322326660156}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    l1.sort()\n    l2.sort()\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 151, "duration": 3.176682710647583}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 489, "completion_tokens": 168, "duration": 5.764230728149414}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 5.422589540481567}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 543, "completion_tokens": 167, "duration": 4.276453256607056}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 560, "completion_tokens": 111, "duration": 6.449157953262329}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 680, "completion_tokens": 240, "duration": 8.313374996185303}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 178, "duration": 6.319784164428711}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len if shift > num_len else shift\n    if shift == 0:\n        return num_str\n    result = num_str[-shift:] + num_str[:-shift]\n    return result", "prompt_tokens": 556, "completion_tokens": 203, "duration": 11.177227258682251}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 3.724388837814331}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 787, "completion_tokens": 151, "duration": 6.387650728225708}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_value:\n            smallest_value = num\n            smallest_index = i\n            found_even = True\n        elif num % 2 == 0 and num == smallest_value:\n            smallest_index = min(i, smallest_index)\n\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1049, "completion_tokens": 283, "duration": 8.41575288772583}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    greatest_int = -1\n\n    for num in lst:\n        if num > 0:\n            freq[num] = freq.get(num, 0) + 1\n            if freq[num] >= num:\n                greatest_int = max(greatest_int, num)\n\n    return greatest_int", "prompt_tokens": 701, "completion_tokens": 182, "duration": 6.281515121459961}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 3.96691632270813}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 190, "duration": 4.5555784702301025}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    sum_q = sum(q)\n    is_balanced = True\n    length_q = len(q)\n    half_length_q = (length_q + 1) // 2 if length_q % 2 != 0 else length_q // 2\n    \n    if q[:half_length_q] != q[-half_length_q:][::-1]:\n        is_balanced = False\n    \n    return sum_q <= w and is_balanced", "prompt_tokens": 947, "completion_tokens": 328, "duration": 6.395340204238892}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 723, "completion_tokens": 247, "duration": 5.525659799575806}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 188, "duration": 6.565004110336304}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    prime_count = len(primes)\n\n    if prime_count < 3:\n        return False\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False", "prompt_tokens": 579, "completion_tokens": 321, "duration": 6.837357759475708}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x != 1 and n == 1:\n        return False\n    if x == 1 and n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False", "prompt_tokens": 639, "completion_tokens": 190, "duration": 6.877852916717529}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 549, "completion_tokens": 102, "duration": 5.517141819000244}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 926, "completion_tokens": 120, "duration": 7.797909736633301}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    quotient = decimal\n    while quotient > 0:\n        remainder = quotient % 2\n        binary_str = str(remainder) + binary_str\n        quotient = quotient // 2\n    binary_str += 'db'\n    return binary_str", "prompt_tokens": 668, "completion_tokens": 198, "duration": 4.913509845733643}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 6.411120891571045}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 11.8518385887146}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 562, "completion_tokens": 214, "duration": 7.096374988555908}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 5.440328121185303}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N)))[2:]\n    return binary_sum", "prompt_tokens": 612, "completion_tokens": 117, "duration": 4.738508224487305}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd += lst[i]\n    return sum_even_odd", "prompt_tokens": 448, "completion_tokens": 133, "duration": 6.56306529045105}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 616, "completion_tokens": 156, "duration": 5.849979639053345}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, r in enumerate(lst):\n        if x in r:\n            for j, v in sorted(enumerate(r), key=lambda x: x[0], reverse=True):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 906, "completion_tokens": 222, "duration": 8.918439388275146}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 816, "completion_tokens": 212, "duration": 11.146629333496094}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 9.019571304321289}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 9.06101131439209}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 540, "completion_tokens": 122, "duration": 6.20250678062439}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 627, "completion_tokens": 225, "duration": 9.185778856277466}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    for ch in message:\n        if ch.lower() in vowels:\n            index = (ord(ch.lower()) - ord('a') + 2) % 26\n            encoded_ch = chr(ord('a') + index)\n        elif ch.isalpha():\n            encoded_ch = ch.swapcase()\n        else:\n            encoded_ch = ch\n        encoded_message += encoded_ch\n    return encoded_message", "prompt_tokens": 601, "completion_tokens": 224, "duration": 7.575077772140503}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 984, "completion_tokens": 285, "duration": 7.591843366622925}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    return is_lower == is_upper", "prompt_tokens": 715, "completion_tokens": 204, "duration": 8.416926383972168}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 8.206509590148926}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 6.5962066650390625}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 6.465622186660767}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = value - floor_val\n    diff_ceil = ceil_val - value\n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 701, "completion_tokens": 203, "duration": 7.3194475173950195}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 4.97838282585144}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 644, "completion_tokens": 226, "duration": 9.923293352127075}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            max_even = num\n            break\n    return max_even", "prompt_tokens": 512, "completion_tokens": 119, "duration": 6.20695424079895}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total_sum = 0\n    count = 0\n\n    for i in range(n, m+1):\n        total_sum += i\n        count += 1\n\n    average = round(total_sum / count)\n    return bin(average)", "prompt_tokens": 629, "completion_tokens": 161, "duration": 5.801945924758911}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 577, "completion_tokens": 160, "duration": 4.511173963546753}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 981, "completion_tokens": 339, "duration": 11.305529832839966}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 181, "duration": 6.013857126235962}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 190, "duration": 8.68829345703125}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 210, "duration": 7.233004093170166}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    arr = arr[min_index:] + arr[:min_index]\n    return arr == sorted(arr)", "prompt_tokens": 954, "completion_tokens": 143, "duration": 4.438493490219116}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    return \"YES\" if count_odd % 2 == 0 else \"NO\"", "prompt_tokens": 759, "completion_tokens": 190, "duration": 7.731027841567993}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter not in result_dict:\n            result_dict[letter] = 1\n        else:\n            result_dict[letter] += 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [letter for letter, count in result_dict.items() if count == max_count]\n    result_dict = {letter: count for letter, count in result_dict.items() if letter in max_letters}\n    \n    return result_dict", "prompt_tokens": 763, "completion_tokens": 335, "duration": 9.815523386001587}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = True\n    start, end = 0, len(modified_str) - 1\n    while start < end:\n        if modified_str[start] != modified_str[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (modified_str, is_palindrome)", "prompt_tokens": 754, "completion_tokens": 278, "duration": 8.085844993591309}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, s, s, s))\n    return result", "prompt_tokens": 728, "completion_tokens": 200, "duration": 8.359406232833862}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.460769176483154}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1025, "completion_tokens": 166, "duration": 7.853759527206421}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 769, "completion_tokens": 211, "duration": 7.259668588638306}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    word_list = s.split()\n    for word in word_list:\n        consonant_count = 0\n        for ch in word:\n            if ch.lower() in consonants:\n                consonant_count += 1\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 845, "completion_tokens": 375, "duration": 10.163742542266846}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_vowel = False\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    for char in word[::-1]:\n        if char.isalpha() and char not in vowels:\n            if found_vowel and char in vowels:\n                closest_vowel = char\n                break\n        elif char in vowels:\n            found_vowel = True\n            \n    return closest_vowel", "prompt_tokens": 743, "completion_tokens": 302, "duration": 9.49827790260315}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')' and stack:\n                stack.pop()\n            elif ch == ')' and not stack:\n                return 'No'\n    return 'Yes'", "prompt_tokens": 717, "completion_tokens": 190, "duration": 6.435169696807861}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 779, "completion_tokens": 122, "duration": 6.552870750427246}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 5.397143125534058}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 3.8930723667144775}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n    odd_collatz_list.sort()\n\n    return odd_collatz_list", "prompt_tokens": 859, "completion_tokens": 234, "duration": 10.159324884414673}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 965, "completion_tokens": 392, "duration": 10.736183643341064}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 8.339233636856079}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    sorted = True\n    for num in lst:\n        if prev is not None:\n            if num < prev:\n                sorted = False\n                break\n            elif num == prev:\n                if has_duplicate:\n                    sorted = False\n                    break\n                else:\n                    has_duplicate = True\n        prev = num\n    return sorted", "prompt_tokens": 931, "completion_tokens": 261, "duration": 7.670827388763428}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 938, "completion_tokens": 323, "duration": 9.11833119392395}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitude = 0\n    product_sign = 1\n    for num in arr:\n        sum_magnitude += abs(num)\n        product_sign *= 1 if num >= 0 else -1\n    return sum_magnitude * product_sign", "prompt_tokens": 632, "completion_tokens": 200, "duration": 10.033693075180054}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    path = []\n    visited = set()\n    pq = [(grid[0][0], 0, 0)]\n    \n    while pq and k > 0:\n        val, i, j = heapq.heappop(pq)\n        if (i, j) not in visited:\n            path.append(val)\n            visited.add((i, j))\n            k -= 1\n            for dx, dy in [(0, 1), (1, 0)]:\n                ni, nj = i + dx, j + dy\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                    heapq.heappush(pq, (grid[ni][nj], ni, nj))\n    \n    return path", "prompt_tokens": 1295, "completion_tokens": 423, "duration": 9.183695316314697}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_i = 1 + i // 2\n            else:\n                tri_i = seq[i - 1] + seq[i - 2] + seq[i - 3]\n            seq.append(tri_i)\n        return seq", "prompt_tokens": 867, "completion_tokens": 259, "duration": 8.81025743484497}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 491, "completion_tokens": 150, "duration": 7.30369758605957}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 649, "completion_tokens": 176, "duration": 7.047084093093872}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 4.205636024475098}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 639, "completion_tokens": 177, "duration": 10.435324668884277}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 541, "completion_tokens": 124, "duration": 23.390871047973633}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n\n    if not lst:\n        return (a, b)\n\n    max_neg = float('-inf')\n    min_pos = float('inf')\n\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n        if num > 0 and num < min_pos:\n            min_pos = num\n\n    if max_neg == float('-inf'):\n        a = None\n    else:\n        a = max_neg\n\n    if min_pos == float('inf'):\n        b = None\n    else:\n        b = min_pos\n\n    return (a, b)", "prompt_tokens": 702, "completion_tokens": 311, "duration": 53.52479410171509}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 12.098675966262817}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 194, "duration": 6.115696430206299}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 5.473838806152344}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text = modified_text[:-1] + \"-\"\n        else:\n            if count > 2:\n                modified_text = modified_text[:-count] + \"-\"\n                count = 0\n            modified_text += ch\n    return modified_text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 632, "completion_tokens": 319, "duration": 6.130920648574829}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    counter = 0\n    dot_count = 0\n    valid_start = True\n    valid_extension = True\n    \n    for ch in file_name:\n        if ch.isdigit():\n            counter += 1\n        elif ch == '.':\n            dot_count += 1\n        if ch.isalpha() and valid_start:\n            valid_start = False\n        if dot_count == 1 and not ch.isalpha() and ch != '.':\n            valid_extension = False\n    \n    if counter > 3 or dot_count != 1 or valid_start or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 963, "completion_tokens": 415, "duration": 11.259027242660522}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.253223180770874}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 665, "completion_tokens": 207, "duration": 8.849939584732056}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product = x_num * n_num\n    return product % x_den == 0 and product % n_den == 0", "prompt_tokens": 688, "completion_tokens": 182, "duration": 8.105469703674316}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {i: sum(map(int, str(abs(num)))) for i, num in enumerate(nums)}\n    sorted_indices = sorted(digit_sums, key=digit_sums.get)\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 629, "completion_tokens": 202, "duration": 6.15041446685791}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = str(num)[0]\n            last_digit = str(num)[-1]\n            if int(first_digit) % 2 != 0 and int(last_digit) % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 601, "completion_tokens": 182, "duration": 6.7092859745025635}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 9.920671701431274}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    \n    return tuple(result)", "prompt_tokens": 837, "completion_tokens": 307, "duration": 8.264135599136353}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 718, "completion_tokens": 133, "duration": 4.928792476654053}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n <= 1:\n        return None\n    if n == 2:\n        return x\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 506, "completion_tokens": 136, "duration": 5.868448495864868}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 613, "completion_tokens": 144, "duration": 4.761510848999023}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 8.738674879074097}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    \n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 940, "completion_tokens": 229, "duration": 6.359302043914795}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    concat_str = a + a\n    for i in range(n):\n        temp_str = concat_str[i:i+m]\n        if temp_str == b:\n            return True\n    return False", "prompt_tokens": 667, "completion_tokens": 222, "duration": 10.554168224334717}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 3.442915201187134}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90,\n        'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n    \n    roman_numeral = ''\n    \n    roman_symbols = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n        ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5),\n        ('IV', 4), ('I', 1)\n    ]\n    \n    for roman_symbol, value in roman_symbols:\n        while number >= value:\n            roman_numeral += roman_symbol\n            number -= value\n    \n    return roman_numeral.lower()", "prompt_tokens": 620, "completion_tokens": 393, "duration": 7.9046361446380615}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    longest_side = max(a, b, c)\n\n    if longest_side == a:\n        return side_a_squared == side_b_squared + side_c_squared\n    elif longest_side == b:\n        return side_b_squared == side_a_squared + side_c_squared\n    else:\n        return side_c_squared == side_a_squared + side_b_squared", "prompt_tokens": 671, "completion_tokens": 306, "duration": 11.231921911239624}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars_count or (len(unique_chars) == max_unique_chars_count and word < max_word):\n            max_unique_chars_count = len(unique_chars)\n            max_word = word\n    \n    return max_word", "prompt_tokens": 675, "completion_tokens": 260, "duration": 4.856414794921875}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    if remaining >= total_eaten_carrots:\n        remaining_carrots = remaining - total_eaten_carrots\n    else:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 940, "completion_tokens": 196, "duration": 4.3438451290130615}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 841, "completion_tokens": 279, "duration": 9.197893619537354}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(char.isalpha() for char in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 587, "completion_tokens": 190, "duration": 4.525606870651245}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.104294061660767}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 574, "completion_tokens": 171, "duration": 5.222534894943237}
