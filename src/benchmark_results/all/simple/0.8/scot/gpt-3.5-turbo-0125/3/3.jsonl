{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                result = True\n                break\n        if result:\n            break\n    return result", "prompt_tokens": 641, "completion_tokens": 215, "duration": 5.202189207077026}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 693, "completion_tokens": 332, "duration": 9.394906282424927}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 7.2301366329193115}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 4.379031419754028}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff = sum(abs(num - mean) for num in numbers) / len(numbers)\n    return absolute_diff", "prompt_tokens": 674, "completion_tokens": 236, "duration": 7.734328508377075}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 525, "completion_tokens": 144, "duration": 5.888391733169556}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        depth_counter = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth_counter += 1\n            elif char == ')':\n                depth_counter -= 1\n            max_depth = max(max_depth, depth_counter)\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 6.485997438430786}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 5.338972330093384}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 7.319028377532959}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 587, "completion_tokens": 203, "duration": 5.4105916023254395}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 637, "completion_tokens": 115, "duration": 5.031491994857788}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 499, "completion_tokens": 144, "duration": 5.64988374710083}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n        elif len(string) == len(longest_str):\n            if string < longest_str:\n                longest_str = string\n\n    return longest_str", "prompt_tokens": 583, "completion_tokens": 209, "duration": 4.906757116317749}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 94, "duration": 6.382936000823975}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    prefix = \"\"\n    for ch in string:\n        prefix += ch\n        prefixes.append(prefix)\n    return prefixes", "prompt_tokens": 476, "completion_tokens": 147, "duration": 5.768659830093384}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 451, "completion_tokens": 103, "duration": 3.1327784061431885}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 495, "completion_tokens": 149, "duration": 5.363557815551758}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 730, "completion_tokens": 213, "duration": 9.309628009796143}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 140, "duration": 3.8696680068969727}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    \n    numerals = numbers.split()\n    sorted_numerals = sorted(numerals, key=lambda x: numeral_to_int[x])\n    \n    return ' '.join(sorted_numerals)", "prompt_tokens": 592, "completion_tokens": 262, "duration": 7.614884376525879}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 722, "completion_tokens": 230, "duration": 6.9162187576293945}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 620, "completion_tokens": 186, "duration": 7.1168882846832275}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = [value for value in values if type(value) == int]\n    return filtered_values", "prompt_tokens": 491, "completion_tokens": 94, "duration": 6.656501293182373}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 4.590239524841309}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 433, "completion_tokens": 122, "duration": 3.815062999725342}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.245833396911621}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 491, "completion_tokens": 119, "duration": 5.418781995773315}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 458, "completion_tokens": 162, "duration": 4.109272241592407}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 4.567178964614868}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.039777994155884}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    res = [num for num in l if num > 0]\n    return res", "prompt_tokens": 538, "completion_tokens": 81, "duration": 4.035557985305786}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 167, "duration": 7.466082572937012}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        return None\n\n    x = 0.0\n    tolerance = 1e-6\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        fx = poly(xs, x)\n        if abs(fx) < tolerance:\n            return x\n        x -= fx / poly([i * coeff for i, coeff in enumerate(xs)], x)\n\n    return None", "prompt_tokens": 919, "completion_tokens": 253, "duration": 8.219380617141724}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    temp.sort()\n    \n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    \n    return result", "prompt_tokens": 742, "completion_tokens": 293, "duration": 6.697790861129761}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return sorted(unique_list)", "prompt_tokens": 462, "completion_tokens": 96, "duration": 4.815876245498657}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 536, "completion_tokens": 154, "duration": 8.050278663635254}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 511, "completion_tokens": 157, "duration": 4.009467124938965}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 673, "completion_tokens": 274, "duration": 8.671151876449585}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    decoded_groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)", "prompt_tokens": 718, "completion_tokens": 227, "duration": 8.769471406936646}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_num = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_num)\n\n        if is_prime(next_num):\n            num = next_num\n            count += 1\n\n    return num", "prompt_tokens": 594, "completion_tokens": 277, "duration": 7.571521759033203}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 731, "completion_tokens": 256, "duration": 7.687140464782715}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    left_to_right = [False] * n\n    right_to_left = [False] * n\n    \n    for i in range(n):\n        left_to_right[i] = True\n        right_to_left[i] = True\n        \n    for i in range(n):\n        if left_to_right[i] and right_to_left[i]:\n            collisions += 1\n            \n    return collisions", "prompt_tokens": 711, "completion_tokens": 243, "duration": 7.2898266315460205}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 4.930763483047485}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 137, "duration": 5.747577905654907}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 549, "completion_tokens": 155, "duration": 9.706682682037354}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 68, "duration": 2.194321393966675}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(sum(fib4_list[-4:]))\n    return fib4_list[n]", "prompt_tokens": 713, "completion_tokens": 186, "duration": 8.318433046340942}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 518, "completion_tokens": 171, "duration": 6.786031484603882}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True", "prompt_tokens": 511, "completion_tokens": 172, "duration": 4.1636974811553955}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent //= 2\n    return result", "prompt_tokens": 592, "completion_tokens": 207, "duration": 9.073427438735962}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 623, "completion_tokens": 265, "duration": 12.750241994857788}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 107, "duration": 4.459715366363525}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 6.128603219985962}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 5.497955560684204}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count or char_count[char] == 0:\n            return False\n        char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 693, "completion_tokens": 260, "duration": 6.761663198471069}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 7.206234455108643}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack", "prompt_tokens": 544, "completion_tokens": 160, "duration": 3.601958990097046}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 495, "completion_tokens": 118, "duration": 2.9664864540100098}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    set1 = set(l1)\n    set2 = set(l2)\n    for elem in sorted(set1):\n        if elem in set2:\n            common_elements.append(elem)\n    return common_elements", "prompt_tokens": 589, "completion_tokens": 163, "duration": 9.850294828414917}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 169, "duration": 9.287101984024048}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 3.0047435760498047}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 540, "completion_tokens": 164, "duration": 4.371818542480469}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 562, "completion_tokens": 174, "duration": 5.773558855056763}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 6.724377632141113}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels or (s[i] == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 601, "completion_tokens": 160, "duration": 6.011983633041382}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    digits = str(x)\n    length = len(digits)\n    \n    if shift > length:\n        result = digits[::-1]\n    else:\n        new_position = shift % length\n        result = digits[new_position:] + digits[:new_position]\n    \n    return result", "prompt_tokens": 584, "completion_tokens": 226, "duration": 5.009269714355469}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 4.016589164733887}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 763, "completion_tokens": 125, "duration": 4.8399388790130615}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1052, "completion_tokens": 287, "duration": 8.941118717193604}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    greatest_int = -1\n\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            greatest_int = max(greatest_int, num)\n\n    return greatest_int", "prompt_tokens": 706, "completion_tokens": 206, "duration": 6.159113883972168}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 620, "completion_tokens": 159, "duration": 5.8702733516693115}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 189, "duration": 5.760178089141846}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    reversed_q = q[::-1]\n    if q != reversed_q:\n        return False\n    sum_elements = sum(q)\n    if sum_elements <= w:\n        return True\n    return False", "prompt_tokens": 873, "completion_tokens": 206, "duration": 4.421625375747681}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            if arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n        else:\n            left += 1\n            right -= 1\n            \n    return min_changes", "prompt_tokens": 742, "completion_tokens": 265, "duration": 7.159626245498657}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 759, "completion_tokens": 192, "duration": 3.9367597103118896}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 218, "duration": 7.626732110977173}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == n:\n        return True\n    if n == 1:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 626, "completion_tokens": 168, "duration": 7.436757802963257}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 564, "completion_tokens": 118, "duration": 2.9864273071289062}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.05222487449646}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    binary_str += bin(decimal)[2:]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 120, "duration": 5.591553449630737}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 590, "completion_tokens": 163, "duration": 10.05155086517334}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 10.378295660018921}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 7.451884031295776}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 425, "completion_tokens": 140, "duration": 5.365512132644653}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N //= 10\n    return bin(sum)[2:]", "prompt_tokens": 634, "completion_tokens": 149, "duration": 10.186700344085693}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 141, "duration": 5.060767650604248}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 623, "completion_tokens": 163, "duration": 3.816547155380249}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, v in reversed(list(enumerate(row))):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 928, "completion_tokens": 228, "duration": 5.835828542709351}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = array.copy()\n    if sum_first_last % 2 == 1:\n        sorted_array.sort()\n    else:\n        sorted_array.sort(reverse=True)\n    return sorted_array", "prompt_tokens": 885, "completion_tokens": 281, "duration": 8.54258131980896}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 4.707912445068359}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for element in lst:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif element < second_smallest and element != smallest:\n            second_smallest = element\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 628, "completion_tokens": 224, "duration": 7.116870164871216}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 3.8493218421936035}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 616, "completion_tokens": 155, "duration": 4.263761043548584}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in 'aeiou':\n                encoded_message += chr((ord(ch) - ord('a') + 2) % 26 + ord('A'))\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 594, "completion_tokens": 201, "duration": 6.194804668426514}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n        return False\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 9.298041343688965}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    if is_lower and is_upper:\n        return False\n    else:\n        return True", "prompt_tokens": 720, "completion_tokens": 220, "duration": 5.124977350234985}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n        if len(primes) == n:\n            break\n    return primes", "prompt_tokens": 651, "completion_tokens": 184, "duration": 7.349036455154419}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 534, "completion_tokens": 107, "duration": 3.8192601203918457}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 462, "completion_tokens": 112, "duration": 3.362002372741699}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    diff_floor = num - floor_num\n    diff_ceil = ceil_num - num\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 699, "completion_tokens": 200, "duration": 7.885636806488037}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(1, n+1):\n        stones_list.append(stones)\n\n        if n % 2 == 1:\n            stones = stones + 2\n        else:\n            stones = stones + 1\n\n    return stones_list", "prompt_tokens": 601, "completion_tokens": 150, "duration": 6.990697145462036}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 619, "completion_tokens": 198, "duration": 4.46977424621582}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 5.090397357940674}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total_sum = 0\n        count = 0\n        for i in range(n, m+1):\n            total_sum += i\n            count += 1\n        avg = round(total_sum / count)\n        return bin(avg)", "prompt_tokens": 634, "completion_tokens": 168, "duration": 6.1039347648620605}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 574, "completion_tokens": 183, "duration": 4.478252410888672}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 981, "completion_tokens": 339, "duration": 9.865277290344238}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 173, "duration": 6.072218894958496}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            if len(num_str) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 773, "completion_tokens": 184, "duration": 4.600625038146973}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 6.463974237442017}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[-min_idx:] + arr[:-min_idx]\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "prompt_tokens": 966, "completion_tokens": 177, "duration": 6.053122282028198}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = 0\n    for num in lst1:\n        if num % 2 == 0:\n            even_count += 1\n    for num in lst2:\n        if num % 2 != 0 and even_count > 0:\n            even_count -= 1\n    if even_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 769, "completion_tokens": 209, "duration": 5.240158557891846}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 727, "completion_tokens": 250, "duration": 7.6201863288879395}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    reversed_str = modified_str[::-1]\n    palindrome_check = modified_str == reversed_str\n    return modified_str, palindrome_check", "prompt_tokens": 716, "completion_tokens": 193, "duration": 7.08928370475769}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 729, "completion_tokens": 210, "duration": 6.689289093017578}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 171, "duration": 5.608747720718384}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                times += math.ceil(1 / capacity)\n    return times", "prompt_tokens": 1053, "completion_tokens": 200, "duration": 8.078535318374634}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 721, "completion_tokens": 164, "duration": 4.208631992340088}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n\n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.lower() in consonants)\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 792, "completion_tokens": 254, "duration": 8.062381982803345}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] not in vowels and word[i+1] in vowels and word[i+2] not in vowels:\n            closest_vowel = word[i+1]\n            break\n    \n    return closest_vowel", "prompt_tokens": 693, "completion_tokens": 232, "duration": 6.74184513092041}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 705, "completion_tokens": 193, "duration": 5.0170087814331055}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 775, "completion_tokens": 118, "duration": 6.528962850570679}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 5.155088663101196}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 613, "completion_tokens": 164, "duration": 4.5974650382995605}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.593236207962036}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 966, "completion_tokens": 340, "duration": 8.731836795806885}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 5.990063190460205}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if prev is not None:\n            if num < prev:\n                sorted = False\n                break\n            elif num == prev:\n                duplicate_count += 1\n                if duplicate_count > 1:\n                    sorted = False\n                    break\n            else:\n                duplicate_count = 1\n        prev = num\n    \n    return sorted", "prompt_tokens": 946, "completion_tokens": 288, "duration": 7.624547243118286}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start + 1\n    if length < 2:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 986, "completion_tokens": 369, "duration": 11.592144250869751}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitude = 0\n    product_sign = 1\n    \n    for num in arr:\n        sum_magnitude += abs(num) * (-1 if num < 0 else 1)\n        product_sign *= (1 if num > 0 else (-1 if num < 0 else 0))\n    \n    return sum_magnitude * product_sign", "prompt_tokens": 628, "completion_tokens": 217, "duration": 4.453997611999512}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(grid, cell):\n        neighbors = []\n        rows, cols = len(grid), len(grid[0])\n        x, y = cell\n        if x > 0:\n            neighbors.append((x - 1, y))\n        if x < rows - 1:\n            neighbors.append((x + 1, y))\n        if y > 0:\n            neighbors.append((x, y - 1))\n        if y < cols - 1:\n            neighbors.append((x, y + 1))\n        return neighbors\n\n    current_cell = (0, 0)\n    path = [grid[current_cell[0]][current_cell[1]]]\n    visited_cells = set([current_cell])\n\n    while len(path) < k:\n        neighbors = get_neighbors(grid, current_cell)\n        next_cell = min(neighbors, key=lambda cell: grid[cell[0]][cell[1]] if cell not in visited_cells else float('inf'))\n        path.append(grid[next_cell[0]][next_cell[1]])\n        visited_cells.add(next_cell)\n        current_cell = next_cell\n\n    return path", "prompt_tokens": 1275, "completion_tokens": 463, "duration": 12.12430191040039}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = [0, 1]\n    if n < 2:\n        return seq[:n+1]\n    \n    for i in range(2, n+1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(sum(seq[-3:]))\n    \n    return seq", "prompt_tokens": 839, "completion_tokens": 191, "duration": 8.803564071655273}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 482, "completion_tokens": 148, "duration": 3.56023907661438}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return bool(stack)\n\n# Test cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True", "prompt_tokens": 665, "completion_tokens": 282, "duration": 7.992246866226196}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 11.97780990600586}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    txt = txt.rstrip()\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 655, "completion_tokens": 204, "duration": 6.6148459911346436}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 550, "completion_tokens": 133, "duration": 8.011286735534668}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 660, "completion_tokens": 224, "duration": 7.86450719833374}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 329, "duration": 7.728757381439209}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 536, "completion_tokens": 219, "duration": 6.111661434173584}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 6.744043588638306}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += \"_\"\n        else:\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += ch\n            count = 0\n    return updated_text", "prompt_tokens": 615, "completion_tokens": 237, "duration": 8.214155912399292}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_present = False\n    valid_start_letter = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        if ch == '.':\n            dot_present = True\n        if ch.isalpha() and not valid_start_letter:\n            valid_start_letter = True\n        if dot_present and ch == 't' and file_name[file_name.index('.')+1:] in ['txt', 'exe', 'dll']:\n            valid_extension = True\n    \n    if digit_count <= 3 and dot_present and valid_start_letter and valid_extension:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 951, "completion_tokens": 416, "duration": 14.806900024414062}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 703, "completion_tokens": 188, "duration": 5.850692272186279}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 658, "completion_tokens": 199, "duration": 5.941842079162598}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    return product_num % product_den == 0", "prompt_tokens": 674, "completion_tokens": 173, "duration": 10.341116189956665}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums_with_sum = {num: (sum_of_digits(num), i) for i, num in enumerate(nums)}\n    sorted_nums = [num for num, _ in sorted(nums_with_sum.items(), key=lambda x: (x[1][0], x[1][1]))]\n    return sorted_nums", "prompt_tokens": 617, "completion_tokens": 222, "duration": 6.7119834423065186}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = str(num)[0]\n            last_digit = str(num)[-1]\n            if int(first_digit) % 2 != 0 and int(last_digit) % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 592, "completion_tokens": 173, "duration": 5.5124428272247314}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 5.470510244369507}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    result = []\n    \n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index < end_index:\n        result = planets[start_index+1:end_index]\n    else:\n        result = planets[end_index+1:start_index]\n    \n    return tuple(sorted(result, key=lambda x: planets.index(x)))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))  # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))  # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")", "prompt_tokens": 861, "completion_tokens": 395, "duration": 15.740866661071777}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 725, "completion_tokens": 140, "duration": 7.427424430847168}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 5.732486009597778}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 4.636084318161011}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.294835329055786}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 941, "completion_tokens": 228, "duration": 4.724808216094971}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    \n    if m > n:\n        return False\n    \n    a_concat = a + a\n    \n    for i in range(n - m + 1):\n        sub_a = a_concat[i:i+m]\n        sorted_sub_a = ''.join(sorted(sub_a))\n        sorted_b = ''.join(sorted(b))\n        \n        if sorted_sub_a == sorted_b:\n            return True\n    \n    return False", "prompt_tokens": 715, "completion_tokens": 300, "duration": 8.536213874816895}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 5.730943918228149}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 566, "completion_tokens": 248, "duration": 7.852856397628784}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n    \n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 4.89111065864563}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 593, "completion_tokens": 173, "duration": 3.769953489303589}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + remaining\n    remaining_carrots = remaining - (need - number)\n    if remaining_carrots < 0:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 936, "completion_tokens": 187, "duration": 7.01627254486084}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 764, "completion_tokens": 201, "duration": 6.764551877975464}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 586, "completion_tokens": 194, "duration": 3.9321882724761963}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 5.073227405548096}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 570, "completion_tokens": 151, "duration": 5.2439563274383545}
