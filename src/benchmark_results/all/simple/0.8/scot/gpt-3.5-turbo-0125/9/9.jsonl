{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 603, "completion_tokens": 158, "duration": 5.11864709854126}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n\n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            current_group += ch\n            open_braces_count -= 1\n            if open_braces_count == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif ch != ' ':\n            current_group += ch\n\n    return groups", "prompt_tokens": 692, "completion_tokens": 331, "duration": 10.37520432472229}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 499, "completion_tokens": 103, "duration": 4.909381628036499}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 554, "completion_tokens": 108, "duration": 3.750537157058716}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 646, "completion_tokens": 205, "duration": 5.342156410217285}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 3.979726791381836}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        depth_counter = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth_counter += 1\n            elif char == ')':\n                depth_counter -= 1\n            max_depth = max(max_depth, depth_counter)\n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 675, "completion_tokens": 300, "duration": 7.4376044273376465}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 2.8899080753326416}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 4.616933822631836}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 581, "completion_tokens": 205, "duration": 6.231878757476807}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 662, "completion_tokens": 141, "duration": 4.950571775436401}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 503, "completion_tokens": 148, "duration": 5.2081568241119385}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    \n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string", "prompt_tokens": 554, "completion_tokens": 159, "duration": 4.733865737915039}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 95, "duration": 3.318887948989868}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 483, "completion_tokens": 156, "duration": 6.439905166625977}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 110, "duration": 3.3120436668395996}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 492, "completion_tokens": 146, "duration": 5.354295015335083}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 734, "completion_tokens": 217, "duration": 6.008431911468506}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 4.715419769287109}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 592, "completion_tokens": 238, "duration": 5.960716724395752}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair", "prompt_tokens": 720, "completion_tokens": 229, "duration": 10.582080364227295}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 624, "completion_tokens": 190, "duration": 6.042001485824585}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    filtered_values = []\n    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n    return filtered_values", "prompt_tokens": 494, "completion_tokens": 104, "duration": 3.1980905532836914}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 84, "duration": 3.238895893096924}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 443, "completion_tokens": 132, "duration": 4.406160593032837}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 620, "completion_tokens": 177, "duration": 6.394998550415039}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result", "prompt_tokens": 489, "completion_tokens": 117, "duration": 6.17383074760437}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 4.6963722705841064}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 427, "completion_tokens": 93, "duration": 5.649359464645386}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.875747203826904}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 540, "completion_tokens": 78, "duration": 3.4616897106170654}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 4.167027950286865}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and len(xs) > 0, \"Input list must have even number of coefficients and not be empty\"\n    \n    largest_non_zero_coeff = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    zero_point = 0.0\n    \n    if xs[-1] == largest_non_zero_coeff:\n        zero_point = -xs[0] / xs[1]\n    else:\n        # Use Newton's method to find zero_point\n        def poly_derivative(xs, x):\n            return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0])\n        \n        x = 1.0  # Initial guess\n        while abs(poly(xs, x)) > 1e-6:\n            x = x - poly(xs, x) / poly_derivative(xs, x)\n        \n        zero_point = x\n    \n    return zero_point", "prompt_tokens": 911, "completion_tokens": 341, "duration": 13.69795274734497}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    \n    temp.sort()\n    \n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp.pop(0))\n    \n    return result", "prompt_tokens": 715, "completion_tokens": 245, "duration": 9.775279521942139}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 3.387085199356079}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 531, "completion_tokens": 149, "duration": 4.956223249435425}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 524, "completion_tokens": 170, "duration": 5.372229814529419}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        if i % 2 != 0 or i == len(l) - 1:\n            temp.sort()\n            result.extend(temp)\n            result.append(v)\n            temp = []\n    return result", "prompt_tokens": 619, "completion_tokens": 197, "duration": 5.782246112823486}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 673, "completion_tokens": 180, "duration": 6.652739763259888}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n\n    return num", "prompt_tokens": 625, "completion_tokens": 333, "duration": 8.185688734054565}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 760, "completion_tokens": 297, "duration": 7.477399826049805}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for car in range(1, n+1):\n        collisions += n - car\n    return collisions", "prompt_tokens": 639, "completion_tokens": 117, "duration": 4.180127143859863}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 5.439035415649414}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False", "prompt_tokens": 648, "completion_tokens": 130, "duration": 3.63043212890625}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 50.666847705841064}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 3.0996060371398926}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_list.append(sum(fib4_list[-4:]))\n    return fib4_list[n]", "prompt_tokens": 713, "completion_tokens": 186, "duration": 4.868746042251587}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 512, "completion_tokens": 165, "duration": 7.264183521270752}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 513, "completion_tokens": 138, "duration": 13.557806015014648}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent //= 2\n    return result", "prompt_tokens": 583, "completion_tokens": 198, "duration": 6.86790132522583}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 525, "completion_tokens": 128, "duration": 4.8929431438446045}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 592, "completion_tokens": 129, "duration": 3.4827260971069336}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 2.7793755531311035}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 2.4256041049957275}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count:\n            return False\n        else:\n            char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 694, "completion_tokens": 256, "duration": 6.056830406188965}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n\n    for i in range(2, n+1):\n        next_fib = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_fib)\n\n    return fib_sequence[n]", "prompt_tokens": 461, "completion_tokens": 185, "duration": 6.8693788051605225}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count_open = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count_open += 1\n        elif bracket == \">\":\n            if count_open == 0:\n                return False\n            else:\n                count_open -= 1\n\n    return count_open == 0", "prompt_tokens": 537, "completion_tokens": 168, "duration": 6.402524709701538}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    isIncreasing = True\n    isDecreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            isIncreasing = False\n        if l[i] < l[i+1]:\n            isDecreasing = False\n\n    if isIncreasing or isDecreasing:\n        return True\n    else:\n        return False", "prompt_tokens": 541, "completion_tokens": 197, "duration": 9.484352588653564}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 582, "completion_tokens": 146, "duration": 4.7399492263793945}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 175, "duration": 6.319316864013672}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 2.99748158454895}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 163, "duration": 61.65370488166809}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 560, "completion_tokens": 121, "duration": 6.8232033252716064}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 675, "completion_tokens": 226, "duration": 8.19586730003357}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1", "prompt_tokens": 605, "completion_tokens": 234, "duration": 8.751907587051392}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    effective_shift = shift % length\n    if effective_shift == 0:\n        return x_str\n    result = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return result", "prompt_tokens": 559, "completion_tokens": 200, "duration": 5.551836729049683}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum", "prompt_tokens": 536, "completion_tokens": 88, "duration": 4.818455934524536}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 784, "completion_tokens": 149, "duration": 7.481364727020264}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for index, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = index\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(smallest_index, index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1050, "completion_tokens": 286, "duration": 9.748672246932983}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key:\n            if greatest_int == -1 or key > greatest_int:\n                greatest_int = key\n\n    return greatest_int", "prompt_tokens": 724, "completion_tokens": 233, "duration": 8.224002599716187}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if len(lst) > 1:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 619, "completion_tokens": 159, "duration": 5.670620679855347}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 191, "duration": 5.520233392715454}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n\n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 8.3289053440094}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n            left += 1\n        else:\n            left += 1\n            right -= 1\n    \n    return min_changes", "prompt_tokens": 713, "completion_tokens": 219, "duration": 7.684802770614624}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 772, "completion_tokens": 212, "duration": 6.271288871765137}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 519, "completion_tokens": 220, "duration": 8.805132627487183}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 611, "completion_tokens": 114, "duration": 5.022988796234131}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    result = False\n    cube_root = abs(a) ** (1/3)\n    if cube_root.is_integer():\n        result = True\n    return result", "prompt_tokens": 553, "completion_tokens": 115, "duration": 4.34030556678772}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 5.955401182174683}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    binary_str += bin(decimal)[2:]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 120, "duration": 4.444589138031006}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 166, "duration": 6.128353118896484}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for GPA in grades:\n        if GPA == 4.0:\n            letter_grades.append('A+')\n        elif GPA > 3.7:\n            letter_grades.append('A')\n        elif GPA > 3.3:\n            letter_grades.append('A-')\n        elif GPA > 3.0:\n            letter_grades.append('B+')\n        elif GPA > 2.7:\n            letter_grades.append('B')\n        elif GPA > 2.3:\n            letter_grades.append('B-')\n        elif GPA > 2.0:\n            letter_grades.append('C+')\n        elif GPA > 1.7:\n            letter_grades.append('C')\n        elif GPA > 1.3:\n            letter_grades.append('C-')\n        elif GPA > 1.0:\n            letter_grades.append('D+')\n        elif GPA > 0.7:\n            letter_grades.append('D')\n        elif GPA > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1093, "completion_tokens": 544, "duration": 12.053129196166992}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 546, "completion_tokens": 197, "duration": 4.059236526489258}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 8.168240070343018}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return bin(sum)[2:]", "prompt_tokens": 612, "completion_tokens": 120, "duration": 3.0996477603912354}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.489278793334961}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 643, "completion_tokens": 173, "duration": 6.631078243255615}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, value in sorted(enumerate(row), key=lambda x: x[0], reverse=True):\n                if value == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 919, "completion_tokens": 236, "duration": 6.920659780502319}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n    return sorted_array", "prompt_tokens": 801, "completion_tokens": 182, "duration": 4.854761600494385}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 7.0436928272247314}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 641, "completion_tokens": 233, "duration": 6.379380941390991}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 565, "completion_tokens": 147, "duration": 5.881462097167969}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 131, "duration": 3.067723274230957}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = (ord(ch.lower()) - ord('a') + 2) % 26\n                encoded_ch = chr(ord('a') + index)\n                if ch.isupper():\n                    encoded_ch = encoded_ch.upper()\n            else:\n                encoded_ch = ch.swapcase()\n        else:\n            encoded_ch = ch\n        encoded_message += encoded_ch\n    return encoded_message", "prompt_tokens": 585, "completion_tokens": 228, "duration": 5.800746440887451}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_digits = 0\n        while num > 0:\n            digit = num % 10\n            sum_digits += digit\n            num = num // 10\n        return sum_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is not None:\n        sum_digits = calculate_sum_of_digits(largest_prime)\n        return sum_digits\n    else:\n        return 0", "prompt_tokens": 1015, "completion_tokens": 366, "duration": 8.51224970817566}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n    \n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 226, "duration": 9.146577835083008}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 155, "duration": 3.481778144836426}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 525, "completion_tokens": 98, "duration": 4.6398069858551025}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n\n    return count", "prompt_tokens": 489, "completion_tokens": 155, "duration": 7.43027138710022}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = value - floor_val\n    diff_ceil = ceil_val - value\n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 693, "completion_tokens": 195, "duration": 7.704236030578613}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones += 2\n        else:\n            stones += 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 5.283491849899292}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words", "prompt_tokens": 581, "completion_tokens": 118, "duration": 5.522193908691406}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 4.868109703063965}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 171, "duration": 10.87568736076355}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if all(digit not in ['0', '2', '4', '6', '8'] for digit in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 573, "completion_tokens": 165, "duration": 5.986195802688599}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 953, "completion_tokens": 310, "duration": 6.064132928848267}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 601, "completion_tokens": 174, "duration": 7.050501585006714}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 185, "duration": 4.950037717819214}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            num = abs(num)\n            sum_digits = -1\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.619477033615112}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_index = arr.index(min(arr))\n    n = len(arr)\n    \n    for i in range(n):\n        if all(arr[j] <= arr[(j+1)%n] for j in range(n)):\n            return True\n        arr = [arr[(j-1)%n] for j in range(n)]\n    \n    return False", "prompt_tokens": 978, "completion_tokens": 209, "duration": 6.035843133926392}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 9.094948291778564}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    histogram_dict = {}\n    letters_list = test.split()\n    max_count = 0\n    \n    for letter in letters_list:\n        if letter not in histogram_dict:\n            histogram_dict[letter] = 1\n        else:\n            histogram_dict[letter] += 1\n        \n        if histogram_dict[letter] > max_count:\n            max_count = histogram_dict[letter]\n    \n    result_letters = [key for key, value in histogram_dict.items() if value == max_count]\n    result = {letter: histogram_dict[letter] for letter in result_letters}\n    \n    return result", "prompt_tokens": 803, "completion_tokens": 369, "duration": 13.037577867507935}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = \"\"\n    for ch in s:\n        if ch not in c:\n            modified_str += ch\n    is_palindrome = True\n    start_index = 0\n    end_index = len(modified_str) - 1\n    while start_index < end_index:\n        if modified_str[start_index] != modified_str[end_index]:\n            is_palindrome = False\n            break\n        start_index += 1\n        end_index -= 1\n    return (modified_str, is_palindrome)", "prompt_tokens": 756, "completion_tokens": 288, "duration": 6.94468355178833}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, s, count))\n    return result", "prompt_tokens": 724, "completion_tokens": 196, "duration": 8.117076396942139}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array_sum = sum(nums[i:j+1])\n            min_sum = min(min_sum, sub_array_sum)\n    return min_sum", "prompt_tokens": 557, "completion_tokens": 186, "duration": 8.266404628753662}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1036, "completion_tokens": 183, "duration": 9.643679141998291}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    ones_count = {}\n    \n    for num in arr:\n        ones_count[num] = bin(num).count('1')\n    \n    def custom_sort(num):\n        return (ones_count[num], num)\n    \n    return sorted(arr, key=custom_sort)", "prompt_tokens": 773, "completion_tokens": 234, "duration": 7.166351079940796}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 748, "completion_tokens": 201, "duration": 4.288333415985107}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    last_consonant_index = -1\n    \n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() not in vowels and word[i].isalpha():\n            last_consonant_index = i\n        elif word[i].lower() in vowels and last_consonant_index != -1:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 726, "completion_tokens": 293, "duration": 8.967321395874023}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            else:\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    \n    return 'Yes' if not stack else 'No'", "prompt_tokens": 706, "completion_tokens": 188, "duration": 6.5913472175598145}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 776, "completion_tokens": 118, "duration": 5.480337381362915}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 5.227520704269409}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 7.690825700759888}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 6.7253029346466064}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) == 3:\n        month, day, year = map(int, parts)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n            return False\n        if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n            return False\n        if month == 2 and (day < 1 or day > 29):\n            return False\n        if year < 1:\n            return False\n        return True\n    return False", "prompt_tokens": 1031, "completion_tokens": 412, "duration": 10.760137557983398}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if count > 0 else None\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 11.77054238319397}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    for num in lst:\n        if prev is not None and num <= prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        prev = num\n    return sorted and duplicate_count <= 1", "prompt_tokens": 923, "completion_tokens": 245, "duration": 7.642646074295044}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    length1 = interval1[1] - interval1[0] + 1\n    length2 = interval2[1] - interval2[0] + 1\n\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        intersection_start = max(interval1[0], interval2[0])\n        intersection_end = min(interval1[1], interval2[1])\n        intersection_length = intersection_end - intersection_start + 1\n\n        if intersection_length <= 1:\n            return \"NO\"\n        else:\n            is_prime = True\n            for i in range(2, int(intersection_length**0.5) + 1):\n                if intersection_length % i == 0:\n                    is_prime = False\n                    break\n\n            if is_prime:\n                return \"YES\"\n            else:\n                return \"NO\"", "prompt_tokens": 975, "completion_tokens": 408, "duration": 10.835817098617554}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product_sign = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    \n    return product_sign * sum_magnitudes", "prompt_tokens": 632, "completion_tokens": 217, "duration": 7.850783586502075}
{"task_id": "HumanEval/129", "generated_code": "import heapq\n\ndef minPath(grid, k):\n    path = []\n    visited = set()\n    pq = [(grid[0][0], 0, 0)]\n    \n    while pq and k > 0:\n        val, i, j = heapq.heappop(pq)\n        if (i, j) not in visited:\n            path.append(val)\n            visited.add((i, j))\n            k -= 1\n            for x, y in [(i+1, j), (i, j+1)]:\n                if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and (x, y) not in visited:\n                    heapq.heappush(pq, (grid[x][y], x, y))\n    \n    return path", "prompt_tokens": 1294, "completion_tokens": 410, "duration": 11.802284955978394}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [0, 1]\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 1]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n    \n    return sequence", "prompt_tokens": 844, "completion_tokens": 217, "duration": 9.494784832000732}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 142, "duration": 7.578305244445801}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for c in string:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 661, "completion_tokens": 197, "duration": 7.304407119750977}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 644, "completion_tokens": 124, "duration": 8.624085187911987}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 645, "completion_tokens": 179, "duration": 6.460416316986084}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 539, "completion_tokens": 122, "duration": 7.446899890899658}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 662, "completion_tokens": 213, "duration": 7.724966526031494}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        a = float(a.replace(\",\", \".\"))\n        b = float(b.replace(\",\", \".\"))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 685, "completion_tokens": 251, "duration": 10.343018293380737}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_count += 1\n        even_sum += i\n        if even_count == 4 and even_sum == n:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 194, "duration": 4.830546617507935}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 7.914444208145142}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                updated_text += \"-\"\n            else:\n                updated_text += \"_\"\n        else:\n            if count > 2:\n                updated_text += \"-\"\n                count = 0\n            updated_text += ch\n    if count > 2:\n        updated_text += \"-\"\n    return updated_text", "prompt_tokens": 634, "completion_tokens": 265, "duration": 8.100115060806274}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_flag = False\n    valid_start_letter = False\n    valid_extensions = ['txt', 'exe', 'dll']\n\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n            if digit_count > 3:\n                return 'No'\n        elif ch == '.':\n            if dot_flag:\n                return 'No'\n            dot_flag = True\n        elif ch.isalpha():\n            if not dot_flag:\n                valid_start_letter = True\n        if dot_flag and ch == file_name[-1]:\n            if file_name[file_name.index('.') + 1:] not in valid_extensions:\n                return 'No'\n\n    if valid_start_letter and dot_flag:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 929, "completion_tokens": 414, "duration": 9.991113185882568}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 6.652416467666626}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 688, "completion_tokens": 227, "duration": 8.735840559005737}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product == int(product)", "prompt_tokens": 657, "completion_tokens": 131, "duration": 4.412745952606201}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    sum_dict = {}\n    sum_list = []\n    \n    for i, num in enumerate(nums):\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        sum_list.append((sum_digits, i, num))\n    \n    sum_list.sort(key=lambda x: (x[0], x[1]))\n    \n    sorted_nums = [num for _, _, num in sum_list]\n    \n    return sorted_nums", "prompt_tokens": 670, "completion_tokens": 277, "duration": 7.666252851486206}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.442403078079224}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 8.18468189239502}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1][::-1]\n\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 828, "completion_tokens": 272, "duration": 10.10201621055603}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 732, "completion_tokens": 147, "duration": 7.083354949951172}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n\n    is_prime = True\n    for i in range(2, n):\n        if n % i == 0:\n            is_prime = False\n            break\n\n    if is_prime:\n        return x\n    else:\n        return y", "prompt_tokens": 516, "completion_tokens": 158, "duration": 7.591780662536621}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 610, "completion_tokens": 139, "duration": 5.423506259918213}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 4.671461582183838}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 945, "completion_tokens": 233, "duration": 6.825535297393799}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a += a\n    for i in range(n):\n        if b in a[i:i+n]:\n            return True\n    return False", "prompt_tokens": 634, "completion_tokens": 162, "duration": 4.861336946487427}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 3.1471097469329834}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    mini_roman = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            mini_roman += numeral\n            number -= value\n    \n    return mini_roman", "prompt_tokens": 566, "completion_tokens": 253, "duration": 6.377119064331055}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 568, "completion_tokens": 150, "duration": 3.662692070007324}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n\n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 592, "completion_tokens": 172, "duration": 6.485175132751465}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 916, "completion_tokens": 162, "duration": 7.813855409622192}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result = result + operand[i+1]\n        elif operator[i] == '-':\n            result = result - operand[i+1]\n        elif operator[i] == '*':\n            result = result * operand[i+1]\n        elif operator[i] == '//':\n            result = result // operand[i+1]\n        elif operator[i] == '**':\n            result = result ** operand[i+1]\n    return result", "prompt_tokens": 833, "completion_tokens": 279, "duration": 7.693090915679932}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 592, "completion_tokens": 200, "duration": 7.192621231079102}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 95, "duration": 4.614485025405884}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = [num for num in range(min(a, b), max(a, b)+1) if num % 2 == 0]\n    return even_digits", "prompt_tokens": 576, "completion_tokens": 156, "duration": 4.585540771484375}
