{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 637, "completion_tokens": 202, "duration": 6.325738906860352}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    separate_groups = []\n    current_group = \"\"\n    open_paren_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_paren_count += 1\n            current_group += char\n        elif char == ')':\n            if open_paren_count > 0:\n                open_paren_count -= 1\n                current_group += char\n                if open_paren_count == 0:\n                    separate_groups.append(current_group)\n                    current_group = \"\"\n    \n    return separate_groups", "prompt_tokens": 652, "completion_tokens": 290, "duration": 9.90813136100769}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 5.950274467468262}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 569, "completion_tokens": 123, "duration": 5.4396796226501465}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 666, "completion_tokens": 234, "duration": 6.893814563751221}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 6.328705787658691}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    levels = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        levels.append(max_depth)\n    \n    return levels", "prompt_tokens": 688, "completion_tokens": 313, "duration": 13.225834846496582}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.63375997543335}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for number in numbers:\n        sum_result += number\n        product_result *= number\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 7.826607942581177}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num > rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 587, "completion_tokens": 203, "duration": 10.362234354019165}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 663, "completion_tokens": 142, "duration": 5.245331764221191}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 520, "completion_tokens": 165, "duration": 6.335536479949951}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string) or (len(string) == len(longest_string) and string < longest_string):\n            longest_string = string\n\n    return longest_string", "prompt_tokens": 559, "completion_tokens": 178, "duration": 6.0949530601501465}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 454, "completion_tokens": 100, "duration": 4.707902669906616}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    current_prefix = \"\"\n    for ch in string:\n        current_prefix += ch\n        prefixes.append(current_prefix)\n    return prefixes", "prompt_tokens": 471, "completion_tokens": 144, "duration": 5.476663827896118}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i)\n        if i != n:\n            result += \" \"\n    return result", "prompt_tokens": 456, "completion_tokens": 107, "duration": 4.696252107620239}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 491, "completion_tokens": 145, "duration": 5.865429878234863}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    \n    return beats_list", "prompt_tokens": 721, "completion_tokens": 206, "duration": 7.762658357620239}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 5.207258462905884}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    numeral_words = numbers.split()\n    numerals = [numeral_dict[word] for word in numeral_words]\n    sorted_numerals = [word for _, word in sorted(zip(numerals, numeral_words))]\n    \n    sorted_numbers = ' '.join(sorted_numerals)\n    \n    return sorted_numbers", "prompt_tokens": 703, "completion_tokens": 377, "duration": 10.54274034500122}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 716, "completion_tokens": 225, "duration": 7.454983472824097}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 644, "completion_tokens": 210, "duration": 6.370738983154297}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 498, "completion_tokens": 98, "duration": 4.763832092285156}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 4.4683239459991455}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 127, "duration": 5.482736587524414}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 5.508680105209351}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 4.941206693649292}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 5.581441879272461}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = \"\"\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 416, "completion_tokens": 77, "duration": 5.425240993499756}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 5.159984111785889}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 4.679619073867798}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 6.2741711139678955}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    x = None\n    if len(xs) % 2 == 0 and max(xs) != 0:\n        for i, coeff in enumerate(xs):\n            x = -coeff / xs[i + 1]\n        return x", "prompt_tokens": 872, "completion_tokens": 153, "duration": 51.680914640426636}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[0])\n            temp = temp[1:]\n    return result", "prompt_tokens": 719, "completion_tokens": 251, "duration": 8.214733600616455}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.286048889160156}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 499, "completion_tokens": 119, "duration": 3.7675418853759766}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 523, "completion_tokens": 174, "duration": 5.844151973724365}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.append(sorted([x for x in l if l.index(x) % 2 == 0]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 605, "completion_tokens": 167, "duration": 8.027554750442505}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = []\n    for i in range((len(s) + 2) // 3):\n        groups.append(s[(3 * i):min((3 * i + 3), len(s))])\n    \n    for group in groups:\n        if len(group) == 3:\n            group = group[1:] + group[0]\n    \n    encoded_str = \"\".join(groups)\n    return encoded_str", "prompt_tokens": 819, "completion_tokens": 339, "duration": 8.19619107246399}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num == 0:\n            return 0\n        elif num == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num + 1):\n                a, b = b, a + b\n            return b\n\n    counter = 0\n    index = 1\n    while counter < n:\n        fib_num = fibonacci(index)\n        if is_prime(fib_num):\n            counter += 1\n            if counter == n:\n                return fib_num\n        index += 1", "prompt_tokens": 647, "completion_tokens": 386, "duration": 13.29592514038086}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        j = i + 1\n        k = len(l) - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 735, "completion_tokens": 260, "duration": 8.458449840545654}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    leftCars = [i for i in range(1, n+1)]\n    rightCars = [i for i in range(n, 0, -1)]\n    leftIndex = 0\n    rightIndex = n - 1\n    \n    while leftIndex < n and rightIndex >= 0:\n        if leftCars[leftIndex] < rightCars[rightIndex]:\n            collisions += (rightIndex - leftIndex)\n            leftIndex += 1\n        else:\n            rightIndex -= 1\n    \n    return collisions", "prompt_tokens": 697, "completion_tokens": 260, "duration": 7.963723421096802}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    res = []\n    for num in l:\n        res.append(num + 1)\n    return res", "prompt_tokens": 539, "completion_tokens": 95, "duration": 3.570134162902832}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False", "prompt_tokens": 653, "completion_tokens": 123, "duration": 6.597896099090576}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 548, "completion_tokens": 154, "duration": 8.000454425811768}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 4.190767288208008}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_next = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(fib4_next)\n    return fib4_list[-1]", "prompt_tokens": 733, "completion_tokens": 222, "duration": 11.820514678955078}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 513, "completion_tokens": 166, "duration": 9.602555990219116}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 495, "completion_tokens": 119, "duration": 9.79697561264038}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    if n != 0:\n        result = pow(2, n, p)\n    return result", "prompt_tokens": 533, "completion_tokens": 105, "duration": 8.17357349395752}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 668, "completion_tokens": 310, "duration": 8.75917911529541}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 579, "completion_tokens": 116, "duration": 7.358411073684692}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for n in l:\n        if n >= t:\n            return False\n    return True", "prompt_tokens": 473, "completion_tokens": 84, "duration": 8.507699012756348}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    sum = x + y\n    return sum", "prompt_tokens": 398, "completion_tokens": 51, "duration": 6.378519535064697}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count_s0 = {}\n    char_count_s1 = {}\n    \n    for ch in s0:\n        char_count_s0[ch] = char_count_s0.get(ch, 0) + 1\n    \n    for ch in s1:\n        char_count_s1[ch] = char_count_s1.get(ch, 0) + 1\n    \n    return char_count_s0 == char_count_s1", "prompt_tokens": 758, "completion_tokens": 322, "duration": 11.786884069442749}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        temp = a + b\n        a, b = b, temp\n\n    return b", "prompt_tokens": 447, "completion_tokens": 159, "duration": 8.443997383117676}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 542, "completion_tokens": 160, "duration": 7.33944845199585}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    isIncreasing = True\n    isDecreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            isIncreasing = False\n        if l[i] < l[i+1]:\n            isDecreasing = False\n\n    return isIncreasing or isDecreasing", "prompt_tokens": 531, "completion_tokens": 176, "duration": 8.17375373840332}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 23.21514630317688}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime = factor\n        else:\n            factor += 1\n    return largest_prime", "prompt_tokens": 487, "completion_tokens": 166, "duration": 7.283190488815308}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.117041110992432}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 534, "completion_tokens": 154, "duration": 9.495983123779297}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    derivative = []\n    for i in range(1, len(xs)):\n        derivative.append(xs[i] * i)\n    return derivative", "prompt_tokens": 551, "completion_tokens": 112, "duration": 8.511474370956421}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 673, "completion_tokens": 224, "duration": 10.710008144378662}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        elif i == len(s) - 1 and s[i] == 'y':\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\")) # 2\nprint(vowels_count(\"ACEDY\")) # 3\nprint(vowels_count(\"hello\")) # 2\nprint(vowels_count(\"python\")) # 1", "prompt_tokens": 593, "completion_tokens": 220, "duration": 8.06146788597107}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    num_str = str(x)\n    length = len(num_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return num_str\n    result = num_str[-shift:] + num_str[:-shift]\n    return result", "prompt_tokens": 554, "completion_tokens": 198, "duration": 8.438182592391968}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 6.438067197799683}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[-2])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 833, "completion_tokens": 192, "duration": 8.335724353790283}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_even_value:\n            smallest_even_value = node\n            smallest_even_index = i\n        elif node % 2 == 0 and node == smallest_even_value:\n            smallest_even_index = min(i, smallest_even_index)\n    \n    if smallest_even_index != -1:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []", "prompt_tokens": 1057, "completion_tokens": 294, "duration": 10.317675352096558}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key, value in freq_map.items():\n        if key > value and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 710, "completion_tokens": 206, "duration": 8.126131534576416}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 615, "completion_tokens": 150, "duration": 7.288259983062744}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 192, "duration": 9.020129203796387}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 815, "completion_tokens": 122, "duration": 8.314765453338623}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 716, "completion_tokens": 212, "duration": 9.888236999511719}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 760, "completion_tokens": 193, "duration": 9.202739715576172}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2 or a > 100:\n        return False\n\n    prime_factors = []\n    for i in range(2, a+1):\n        while a % i == 0:\n            prime_factors.append(i)\n            a //= i\n\n    if len(prime_factors) != 3:\n        return False\n\n    return all(is_prime(factor) for factor in prime_factors)", "prompt_tokens": 594, "completion_tokens": 319, "duration": 9.096834182739258}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 611, "completion_tokens": 112, "duration": 6.332601308822632}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    b = round(abs(a) ** (1/3))\n    return b ** 3 == abs(a)", "prompt_tokens": 543, "completion_tokens": 94, "duration": 8.054641723632812}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for d in num:\n        if d in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 8.711262226104736}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\" + bin(decimal)[2:] + \"db\"\n    return binary_str", "prompt_tokens": 621, "completion_tokens": 114, "duration": 6.503493785858154}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 7.959896802902222}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1093, "completion_tokens": 557, "duration": 13.638757228851318}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 5.844974756240845}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 429, "completion_tokens": 148, "duration": 7.858846187591553}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    binary_sum = bin(total_sum)[2:]\n    return binary_sum", "prompt_tokens": 603, "completion_tokens": 114, "duration": 5.749872922897339}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for index in range(1, len(lst), 2):\n        if lst[index] % 2 == 0:\n            sum_even_odd_idx += lst[index]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.956650972366333}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        ordered_words.append(sorted_word)\n\n    return ' '.join(ordered_words)", "prompt_tokens": 636, "completion_tokens": 166, "duration": 6.100876092910767}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 917, "completion_tokens": 215, "duration": 8.823343276977539}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array, reverse=(sum_first_last % 2 == 0))\n    return sorted_array", "prompt_tokens": 788, "completion_tokens": 169, "duration": 6.132441759109497}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 6.52505350112915}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 627, "completion_tokens": 223, "duration": 8.615846157073975}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 5.484896183013916}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 137, "duration": 5.265101432800293}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                index = ord(ch.lower()) - ord('a')\n                new_index = (index + 2) % 26\n                new_ch = chr(ord('A') + new_index) if ch.isupper() else chr(ord('a') + new_index)\n                encoded_message += new_ch\n            else:\n                encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "prompt_tokens": 659, "completion_tokens": 348, "duration": 10.702332496643066}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 9.152183532714844}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n        else:\n            return False\n    \n    return is_lower != is_upper", "prompt_tokens": 744, "completion_tokens": 235, "duration": 7.372809648513794}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers", "prompt_tokens": 645, "completion_tokens": 179, "duration": 7.6176347732543945}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 533, "completion_tokens": 106, "duration": 3.6439998149871826}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 5.163027763366699}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 692, "completion_tokens": 197, "duration": 5.21354341506958}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    stones_list.append(stones)\n    for _ in range(n - 1):\n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n        stones_list.append(stones)\n    return stones_list", "prompt_tokens": 639, "completion_tokens": 189, "duration": 7.926565885543823}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 195, "duration": 5.925601005554199}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even = num\n            break\n    return biggest_even", "prompt_tokens": 499, "completion_tokens": 106, "duration": 6.302265644073486}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 624, "completion_tokens": 156, "duration": 7.158075571060181}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 599, "completion_tokens": 206, "duration": 6.774924993515015}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr))\n    arr.reverse()\n    for num in arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 936, "completion_tokens": 285, "duration": 9.942957639694214}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 600, "completion_tokens": 174, "duration": 7.673169851303101}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        num_str = str(num)\n        if num_str == num_str[::-1]:\n            if len(num_str) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 772, "completion_tokens": 183, "duration": 5.9000513553619385}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 7.876019239425659}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[min_idx:] + arr[:min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 961, "completion_tokens": 157, "duration": 4.811349153518677}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 6.083164215087891}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    result_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter in result_dict:\n            result_dict[letter] += 1\n        else:\n            result_dict[letter] = 1\n        \n        if result_dict[letter] > max_count:\n            max_count = result_dict[letter]\n    \n    max_letters = [key for key, value in result_dict.items() if value == max_count]\n    max_dict = {letter: max_count for letter in max_letters}\n    \n    return max_dict", "prompt_tokens": 762, "completion_tokens": 324, "duration": 10.718456745147705}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start, end = 0, len(result) - 1\n    while start < end:\n        if result[start] != result[end]:\n            is_palindrome = False\n            break\n        start += 1\n        end -= 1\n    return (result, is_palindrome)", "prompt_tokens": 772, "completion_tokens": 289, "duration": 9.204214096069336}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for idx, string in enumerate(lst):\n        count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{idx}ng {string} of the {idx}nput.\")\n    return result_lst", "prompt_tokens": 729, "completion_tokens": 207, "duration": 6.600450038909912}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = 0\n\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum", "prompt_tokens": 529, "completion_tokens": 164, "duration": 4.593306541442871}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1038, "completion_tokens": 180, "duration": 7.368067502975464}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 704, "completion_tokens": 146, "duration": 5.233784437179565}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n    \n    consonants = set(\"bcdfghjklmnpqrstvwxyz\")\n    \n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.lower() in consonants)\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 793, "completion_tokens": 257, "duration": 8.173205375671387}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in consonants:\n            if word[i+1] in vowels and word[i+2] in consonants:\n                closest_vowel = word[i+1]\n                break\n                \n    return closest_vowel", "prompt_tokens": 770, "completion_tokens": 380, "duration": 11.669082403182983}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    \n    for char in lst[0]:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    for char in lst[1]:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    \n    if not stack:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 774, "completion_tokens": 310, "duration": 6.65639591217041}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr_copy = arr.copy()\n    arr_copy.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr_copy[i])\n    return result", "prompt_tokens": 788, "completion_tokens": 140, "duration": 7.889159440994263}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 534, "completion_tokens": 140, "duration": 6.291079759597778}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 612, "completion_tokens": 163, "duration": 5.229433298110962}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_numbers.append(1)\n\n    return sorted(odd_numbers)", "prompt_tokens": 823, "completion_tokens": 193, "duration": 7.768603563308716}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if date == \"\":\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not (1 <= int(month) <= 12):\n        return False\n    \n    if month in ['1', '3', '5', '7', '8', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['4', '6', '9', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month == '2':\n        if not (1 <= int(day) <= 29):\n            return False\n    else:\n        return False\n    \n    if len(year) != 4:\n        return False\n    \n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    return True", "prompt_tokens": 971, "completion_tokens": 374, "duration": 13.281129598617554}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list", "prompt_tokens": 752, "completion_tokens": 292, "duration": 6.810254335403442}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    sorted = True\n\n    for num in lst:\n        if num == prev:\n            has_duplicate = True\n        if prev is not None and num < prev:\n            sorted = False\n            break\n        prev = num\n\n    if has_duplicate:\n        sorted = False\n\n    return sorted", "prompt_tokens": 907, "completion_tokens": 229, "duration": 11.059670209884644}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if length < 2:\n        return \"NO\"\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 1014, "completion_tokens": 399, "duration": 10.237725496292114}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= 1 if num > 0 else -1 if num < 0 else 0\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 636, "completion_tokens": 217, "duration": 5.923164129257202}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def get_neighbors(cell):\n        neighbors = []\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = cell[0] + dx, cell[1] + dy\n            if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]):\n                neighbors.append((new_x, new_y))\n        return neighbors\n\n    def is_within_boundaries(cell):\n        return 0 <= cell[0] < len(grid) and 0 <= cell[1] < len(grid[0])\n\n    def dfs(cell, path, visited):\n        visited.add(cell)\n        path.append(grid[cell[0]][cell[1]])\n\n        if len(path) == k:\n            return path\n\n        for neighbor in get_neighbors(cell):\n            if neighbor not in visited:\n                new_path = dfs(neighbor, path.copy(), visited.copy())\n                if new_path:\n                    return new_path\n\n    min_path = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited_cells = set()\n            path = dfs((i, j), [], visited_cells)\n            if path:\n                if min_path is None or path < min_path:\n                    min_path = path\n\n    return min_path", "prompt_tokens": 1284, "completion_tokens": 524, "duration": 11.527818441390991}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    seq = []\n    if n == 0:\n        seq.append(0)\n    elif n == 1:\n        seq.append(1)\n    elif n == 2:\n        seq.append(1)\n    else:\n        seq.extend([0, 1, 1])\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i // 2)\n            else:\n                seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n    return seq", "prompt_tokens": 885, "completion_tokens": 281, "duration": 11.6746985912323}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 480, "completion_tokens": 139, "duration": 7.451700448989868}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 658, "completion_tokens": 186, "duration": 10.535932302474976}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.386896371841431}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    else:\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 649, "completion_tokens": 195, "duration": 6.7638750076293945}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 532, "completion_tokens": 112, "duration": 4.974611759185791}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 231, "duration": 8.826000928878784}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 744, "completion_tokens": 314, "duration": 10.924941778182983}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and n - 2*i > 0:\n            return True\n    return False", "prompt_tokens": 534, "completion_tokens": 210, "duration": 8.240001678466797}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 8.492324113845825}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            if count > 2:\n                new_text += \"-\"\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 614, "completion_tokens": 233, "duration": 6.946147203445435}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(c.isdigit() for c in file_name)\n    dot_index = file_name.find('.')\n    \n    if digits_count <= 3 and dot_index != -1 and file_name.count('.') == 1:\n        before_dot = file_name[:dot_index]\n        after_dot = file_name[dot_index + 1:]\n        \n        if before_dot and before_dot[0].isalpha() and after_dot in ['txt', 'exe', 'dll']:\n            return 'Yes'\n    \n    return 'No'", "prompt_tokens": 835, "completion_tokens": 263, "duration": 10.559362411499023}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 9.032660961151123}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 698, "completion_tokens": 238, "duration": 6.955670118331909}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_den * n_den)\n    \n    return product.is_integer()", "prompt_tokens": 653, "completion_tokens": 145, "duration": 9.8668794631958}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    sum_dict = {}\n    for i, num in enumerate(nums):\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        sum_dict[num] = (sum_digits, i)\n    sorted_indices = sorted(sum_dict.items(), key=lambda x: (x[1][0], x[1][1]))\n    sorted_nums = [item[0] for item in sorted_indices]\n    return sorted_nums", "prompt_tokens": 678, "completion_tokens": 286, "duration": 11.766062498092651}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 7.140268325805664}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 9.672067642211914}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    result.sort(key=lambda x: planet_positions[x])\n    \n    return tuple(result)", "prompt_tokens": 849, "completion_tokens": 330, "duration": 9.95184850692749}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 744, "completion_tokens": 159, "duration": 7.074122905731201}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 9.108837127685547}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares if sum_of_squares > 0 else 0", "prompt_tokens": 623, "completion_tokens": 165, "duration": 7.6355743408203125}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 7.053365230560303}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension", "prompt_tokens": 943, "completion_tokens": 232, "duration": 6.605475902557373}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a = a + a\n    for i in range(n):\n        if b in a[i:i+n]:\n            return True\n    return False", "prompt_tokens": 649, "completion_tokens": 180, "duration": 7.334062099456787}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 6.69780707359314}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    roman_values = [(value, symbol) for value, symbol in roman_numerals.items()]\n    roman_values.sort(reverse=True)\n    \n    for value, symbol in roman_values:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n            \n    return roman_numeral", "prompt_tokens": 613, "completion_tokens": 321, "duration": 8.25016164779663}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 543, "completion_tokens": 111, "duration": 6.271080017089844}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 599, "completion_tokens": 186, "duration": 7.641234636306763}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if total_eaten_carrots <= remaining else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 171, "duration": 4.557669401168823}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 849, "completion_tokens": 286, "duration": 7.781427621841431}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 7.428126096725464}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.958842515945435}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 540, "completion_tokens": 135, "duration": 8.14941930770874}
