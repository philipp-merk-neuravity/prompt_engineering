{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 639, "completion_tokens": 222, "duration": 9.208916664123535}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for ch in paren_string.replace(\" \", \"\"):\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')' and open_braces_count > 0:\n            open_braces_count -= 1\n        current_group += ch\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 691, "completion_tokens": 324, "duration": 15.22823977470398}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 500, "completion_tokens": 144, "duration": 9.65717101097107}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 583, "completion_tokens": 137, "duration": 9.322961330413818}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 659, "completion_tokens": 287, "duration": 14.230491638183594}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 8.963373184204102}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 685, "completion_tokens": 308, "duration": 12.345755577087402}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 8.46518325805664}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_ = 0\n    product = 1\n    \n    for number in numbers:\n        sum_ += number\n        product *= number\n    \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 10.842932224273682}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n\n        if max_queue[0] == rolling_max_list[-1]:\n            max_queue.popleft()\n\n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 203, "duration": 11.213273048400879}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 662, "completion_tokens": 253, "duration": 12.894204139709473}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 502, "completion_tokens": 147, "duration": 8.562981843948364}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 546, "completion_tokens": 150, "duration": 8.721436977386475}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 143, "duration": 10.270833969116211}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 475, "completion_tokens": 164, "duration": 7.726522207260132}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 102, "duration": 7.059383153915405}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 492, "completion_tokens": 146, "duration": 8.458094358444214}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 720, "completion_tokens": 203, "duration": 10.589447498321533}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 9.354124307632446}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    numerals_list = numbers.split()\n    integers_list = [numeral_to_int[numeral] for numeral in numerals_list]\n    sorted_integers = sorted(integers_list)\n    sorted_numerals = [int_to_numeral[integer] for integer in sorted_integers]\n    sorted_numbers = ' '.join(sorted_numerals)\n    return sorted_numbers", "prompt_tokens": 592, "completion_tokens": 298, "duration": 21.41685938835144}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 720, "completion_tokens": 227, "duration": 11.28113317489624}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    rescaled_numbers = [(number - min_val) / range_val for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 624, "completion_tokens": 231, "duration": 9.892218351364136}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 494, "completion_tokens": 159, "duration": 11.48165774345398}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for _ in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 5.52422022819519}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 127, "duration": 7.190659999847412}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 165, "duration": 9.05937123298645}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 494, "completion_tokens": 167, "duration": 10.75610065460205}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 457, "completion_tokens": 161, "duration": 8.867329359054565}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 6.6247053146362305}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 7.910706520080566}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 185, "duration": 14.421489238739014}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 520, "completion_tokens": 132, "duration": 8.768439769744873}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and any(xs):\n        def derivative(xs):\n            return [i * xs[i] for i in range(1, len(xs))]\n        \n        def newton_method(xs, x0, tol=1e-10, max_iter=1000):\n            x = x0\n            for _ in range(max_iter):\n                fx = poly(xs, x)\n                if abs(fx) < tol:\n                    return x\n                f_prime_x = poly(derivative(xs), x)\n                if f_prime_x == 0:\n                    break\n                x = x - fx / f_prime_x\n            return x\n        \n        return newton_method(xs, 0)\n    else:\n        raise ValueError(\"List of coefficients must have an even number of elements and at least one non-zero coefficient.\")", "prompt_tokens": 915, "completion_tokens": 474, "duration": 27.587584018707275}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    l_prime = []\n    temp = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    temp.sort()\n    temp_index = 0\n\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l_prime.append(temp[temp_index])\n            temp_index += 1\n        else:\n            l_prime.append(l[i])\n\n    return l_prime", "prompt_tokens": 703, "completion_tokens": 315, "duration": 10.784327745437622}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    l.sort()\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    return unique_list", "prompt_tokens": 479, "completion_tokens": 177, "duration": 11.318433046340942}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]  # Initialize max_num with the first element of the list\n\n    for num in l:  # Iterate through each element in the list\n        if num > max_num:  # Check if the current element is greater than the current max_num\n            max_num = num  # Update max_num if the current element is greater\n\n    return max_num  # Return the maximum element found in the list", "prompt_tokens": 534, "completion_tokens": 223, "duration": 9.572781324386597}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 511, "completion_tokens": 164, "duration": 7.2395360469818115}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 620, "completion_tokens": 257, "duration": 10.792798280715942}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group to the left. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 669, "completion_tokens": 232, "duration": 9.37399935722351}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    fib1 = 1\n    fib2 = 1\n\n    while count < n:\n        next_fib = fib1 + fib2\n        fib1 = fib2\n        fib2 = next_fib\n\n        if is_prime(next_fib):\n            num = next_fib\n            count += 1\n\n    return num", "prompt_tokens": 607, "completion_tokens": 326, "duration": 14.52138614654541}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 255, "duration": 9.021990299224854}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for car in range(1, n + 1):\n        collisions += car\n    return collisions", "prompt_tokens": 631, "completion_tokens": 111, "duration": 7.023405313491821}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 6.080280065536499}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 665, "completion_tokens": 135, "duration": 8.387272119522095}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 541, "completion_tokens": 186, "duration": 10.733167886734009}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 96, "duration": 9.063554286956787}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 232, "duration": 10.50660753250122}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2", "prompt_tokens": 489, "completion_tokens": 152, "duration": 8.152675151824951}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return reversed_text == text", "prompt_tokens": 503, "completion_tokens": 188, "duration": 10.57959508895874}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 549, "completion_tokens": 159, "duration": 12.046961069107056}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 525, "completion_tokens": 150, "duration": 10.395299434661865}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 128, "duration": 9.670132398605347}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 493, "completion_tokens": 128, "duration": 8.871586561203003}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 394, "completion_tokens": 50, "duration": 7.187646865844727}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 743, "completion_tokens": 233, "duration": 9.500805139541626}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 189, "duration": 8.67067575454712}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 548, "completion_tokens": 171, "duration": 9.348119735717773}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing", "prompt_tokens": 537, "completion_tokens": 255, "duration": 10.477093935012817}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 582, "completion_tokens": 147, "duration": 7.652148008346558}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 178, "duration": 11.508687973022461}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 8.734393835067749}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack", "prompt_tokens": 536, "completion_tokens": 162, "duration": 7.323770523071289}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 552, "completion_tokens": 149, "duration": 5.582426071166992}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 673, "completion_tokens": 228, "duration": 11.42417860031128}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Input: s: a string representing a word\n    Output: count: number of vowels in the string\n    \"\"\"\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i, c in enumerate(s):\n        if c in vowels:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 196, "duration": 8.96978497505188}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    length = len(num_str)\n    shift = shift % length if shift > length else shift\n    if shift == 0:\n        return num_str\n    shifted_num = num_str[-shift:] + num_str[:-shift]\n    return shifted_num", "prompt_tokens": 549, "completion_tokens": 236, "duration": 11.64295482635498}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    \"\"\"Returns the sum of the ASCII codes of uppercase characters in the input string.\"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 536, "completion_tokens": 92, "duration": 6.698439836502075}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 779, "completion_tokens": 134, "duration": 8.767317056655884}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_value:\n            smallest_value = value\n            smallest_index = index\n            found_even = True\n        elif value % 2 == 0 and value == smallest_value:\n            smallest_index = min(smallest_index, index)\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1049, "completion_tokens": 284, "duration": 13.470276117324829}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n    greatest_int = -1\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num and num > greatest_int:\n            greatest_int = num\n    return greatest_int", "prompt_tokens": 730, "completion_tokens": 231, "duration": 12.248820781707764}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 619, "completion_tokens": 154, "duration": 9.263570785522461}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)", "prompt_tokens": 634, "completion_tokens": 266, "duration": 13.089754343032837}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]", "prompt_tokens": 798, "completion_tokens": 104, "duration": 6.932757139205933}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 727, "completion_tokens": 223, "duration": 10.271169185638428}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Input: lst1: a list of strings, lst2: a list of strings\n    Output: result: a list of strings\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 775, "completion_tokens": 231, "duration": 13.294454336166382}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 3", "prompt_tokens": 516, "completion_tokens": 233, "duration": 17.11506724357605}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == 1 and n == 1:\n        return False\n    if n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 633, "completion_tokens": 181, "duration": 10.515978574752808}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    '''\n    cube_root = round(a ** (1/3))\n    return cube_root**3 == a", "prompt_tokens": 594, "completion_tokens": 174, "duration": 7.084287881851196}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 926, "completion_tokens": 134, "duration": 6.834668397903442}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    if decimal == 0:\n        binary_str += '0'\n    while decimal > 0:\n        binary_str += str(decimal % 2)\n        decimal = decimal // 2\n    binary_str = binary_str[::-1] + 'db'\n    return binary_str", "prompt_tokens": 674, "completion_tokens": 209, "duration": 8.100006103515625}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy.\"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 593, "completion_tokens": 175, "duration": 7.993905067443848}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1087, "completion_tokens": 551, "duration": 20.537195205688477}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 550, "completion_tokens": 226, "duration": 11.073181867599487}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n\n    return count", "prompt_tokens": 429, "completion_tokens": 180, "duration": 10.88591742515564}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 603, "completion_tokens": 125, "duration": 6.957016229629517}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_indices = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_indices += lst[i]\n    return sum_even_odd_indices", "prompt_tokens": 453, "completion_tokens": 162, "duration": 10.324217557907104}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 637, "completion_tokens": 214, "duration": 14.877268314361572}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 918, "completion_tokens": 294, "duration": 14.936927318572998}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    if not array:  # Handle empty array\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:  # Even sum\n        return sorted(array, reverse=True)\n    else:  # Odd sum\n        return sorted(array)", "prompt_tokens": 852, "completion_tokens": 330, "duration": 12.12913990020752}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet by 2 multiplied by 2 places.\"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        new_index = (alphabet.index(ch) + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 216, "duration": 11.613437414169312}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for element in lst:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif element < second_smallest and element != smallest:\n            second_smallest = element\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 628, "completion_tokens": 219, "duration": 9.6287202835083}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    return count", "prompt_tokens": 543, "completion_tokens": 134, "duration": 8.376881837844849}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 609, "completion_tokens": 183, "duration": 15.201896667480469}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encode a message by swapping case of all letters and replacing all vowels with the letter \n    that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                if ch.islower():\n                    new_ch = alphabet[(alphabet.index(ch.lower()) + 2) % 26]\n                else:\n                    new_ch = alphabet[(alphabet.index(ch.lower()) + 2) % 26].upper()\n            else:\n                new_ch = ch.swapcase()\n        else:\n            new_ch = ch\n        encoded_message += new_ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 284, "duration": 15.15296220779419}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_largest_prime_digits(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime > 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 287, "duration": 11.41358733177185}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    is_lower = False\n    is_upper = False\n\n    for key in dict:\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        else:\n            return False\n\n    return (is_lower and not is_upper) or (is_upper and not is_lower)", "prompt_tokens": 725, "completion_tokens": 225, "duration": 10.61639142036438}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers", "prompt_tokens": 645, "completion_tokens": 179, "duration": 9.344110488891602}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 533, "completion_tokens": 126, "duration": 6.739551544189453}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 135, "duration": 6.630388021469116}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    if num - floor_num >= 0.5:\n        return floor_num + 1 if num > 0 else floor_num - 1\n    else:\n        return floor_num", "prompt_tokens": 690, "completion_tokens": 226, "duration": 11.046363115310669}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 240, "duration": 14.505300045013428}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Splits the string into words and returns an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 214, "duration": 10.793357849121094}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    biggest_even = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even = num\n            break\n    return biggest_even", "prompt_tokens": 499, "completion_tokens": 157, "duration": 10.777064561843872}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    count = m - n + 1\n    avg = round(sum / count)\n    return bin(avg)", "prompt_tokens": 628, "completion_tokens": 154, "duration": 7.209700345993042}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 558, "completion_tokens": 168, "duration": 7.6668174266815186}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort and reverse the filtered array\n    filtered_arr.sort(reverse=True)\n    \n    # Dictionary to map numbers to their names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Convert numbers to names\n    result = [num_to_name[num] for num in filtered_arr]\n    \n    return result", "prompt_tokens": 992, "completion_tokens": 413, "duration": 13.898238897323608}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result", "prompt_tokens": 579, "completion_tokens": 173, "duration": 11.103535413742065}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 784, "completion_tokens": 201, "duration": 8.579674243927002}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 240, "duration": 12.692564249038696}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    n = len(arr)\n    for i in range(n):\n        if arr[(min_index + i) % n] != sorted(arr)[i]:\n            return False\n    return True", "prompt_tokens": 975, "completion_tokens": 183, "duration": 8.77725863456726}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    total_odd_elements = 0\n    total_even_elements = 0\n\n    for element in lst1:\n        if element % 2 == 0:\n            total_even_elements += 1\n        else:\n            total_odd_elements += 1\n\n    for element in lst2:\n        if element % 2 == 0 and total_odd_elements > 0:\n            total_odd_elements -= 1\n            total_even_elements += 1\n\n    if total_odd_elements == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 786, "completion_tokens": 258, "duration": 13.086307525634766}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    letters = test.replace(\" \", \"\")\n    hist_dict = {}\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n    max_count = max(hist_dict.values(), default=0)\n    max_dict = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return max_dict", "prompt_tokens": 718, "completion_tokens": 300, "duration": 13.82212519645691}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 708, "completion_tokens": 169, "duration": 7.601751804351807}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for s in lst:\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_str = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result_lst.append(result_str)\n    return result_lst", "prompt_tokens": 736, "completion_tokens": 223, "duration": 9.874499320983887}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = nums[0]\n    current_sum = nums[0]\n\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum", "prompt_tokens": 529, "completion_tokens": 235, "duration": 9.982690334320068}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1032, "completion_tokens": 179, "duration": 8.615825891494751}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 739, "completion_tokens": 181, "duration": 8.281171798706055}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    words = []\n    if not s:\n        return words\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word_list = s.split()\n    for word in word_list:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            words.append(word)\n    return words", "prompt_tokens": 773, "completion_tokens": 272, "duration": 13.047263622283936}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and i < len(word) - 1 and word[i+1] not in vowels:\n            closest_vowel = word[i]\n            break\n    return closest_vowel", "prompt_tokens": 734, "completion_tokens": 273, "duration": 11.065364122390747}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                open_count -= 1\n                if open_count < 0:\n                    break\n        if open_count < 0:\n            break\n    if open_count == 0:\n        return 'Yes'\n    # Check if swapping makes it valid\n    open_count = 0\n    for s in reversed(lst):\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                open_count -= 1\n                if open_count < 0:\n                    return 'No'\n    return 'Yes'", "prompt_tokens": 772, "completion_tokens": 361, "duration": 12.154896974563599}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 776, "completion_tokens": 139, "duration": 7.632448434829712}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 529, "completion_tokens": 139, "duration": 8.017932891845703}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 0 < arr[i] < 100:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 201, "duration": 14.781487703323364}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 223, "duration": 10.275217771530151}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    \"\"\"Validates a given date string.\"\"\"\n    # Split the date string by '-' into parts: month, day, year\n    parts = date.split('-')\n    \n    # Check if the split parts are exactly 3 (mm, dd, yyyy)\n    if len(parts) != 3:\n        return False\n    \n    try:\n        month, day, year = map(int, parts)\n    except ValueError:\n        # If conversion to integers fails\n        return False\n    \n    # Check month validity\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the maximum day for each month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month in [4, 6, 9, 11]:\n        max_day = 30\n    else:  # February\n        max_day = 29\n    \n    # Check day validity\n    if day < 1 or day > max_day:\n        return False\n    \n    # If all checks pass\n    return True", "prompt_tokens": 947, "completion_tokens": 399, "duration": 17.55307674407959}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 9.556148052215576}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:  # If the list is empty, consider it sorted\n        return True\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < prev:  # List is not in ascending order\n            return False\n        if lst[i] == prev:  # Found a duplicate\n            return False  # More than one duplicate of the same number is not allowed\n        prev = lst[i]\n    return True", "prompt_tokens": 935, "completion_tokens": 286, "duration": 15.677894830703735}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 992, "completion_tokens": 358, "duration": 13.788965702056885}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    \"\"\"\n    Returns sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    \"\"\"\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 639, "completion_tokens": 259, "duration": 8.316084384918213}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    best_path = [float('inf')] * k\n\n    def dfs(row, col, length, currentPath):\n        if length == k:\n            nonlocal best_path\n            best_path = min(best_path, currentPath.copy())\n            return\n        if length > k:\n            return\n        for dr, dc in directions:\n            newRow, newCol = row + dr, col + dc\n            if 0 <= newRow < N and 0 <= newCol < N:\n                currentPath.append(grid[newRow][newCol])\n                dfs(newRow, newCol, length + 1, currentPath)\n                currentPath.pop()\n\n    for row in range(N):\n        for col in range(N):\n            dfs(row, col, 1, [grid[row][col]])\n\n    return best_path", "prompt_tokens": 1364, "completion_tokens": 521, "duration": 29.900135278701782}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n == 0:\n        return [1]\n    if n == 1:\n        return sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[-1] + sequence[-2] + 3)  # Adjusted to match the given recurrence\n    return sequence", "prompt_tokens": 874, "completion_tokens": 251, "duration": 13.503422975540161}
{"task_id": "HumanEval/131", "generated_code": "def digits(n: int) -> int:\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    return product if product != 1 else 0", "prompt_tokens": 483, "completion_tokens": 147, "duration": 12.529984951019287}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 654, "completion_tokens": 185, "duration": 9.021528244018555}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 95, "duration": 6.881875991821289}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if txt and txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2].isspace():\n            return True\n    return False", "prompt_tokens": 654, "completion_tokens": 207, "duration": 10.766520261764526}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 539, "completion_tokens": 213, "duration": 10.30076813697815}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a, b = None, None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        elif num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 647, "completion_tokens": 187, "duration": 11.803065061569214}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert strings to floats for comparison, handling both '.' and ',' as decimal points\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n\n    a_converted = convert_to_float(a)\n    b_converted = convert_to_float(b)\n\n    # Check if types are different after potential conversion\n    if type(a) != type(b):\n        return None\n\n    # Compare and return based on the original types\n    if a_converted > b_converted:\n        return a\n    elif b_converted > a_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 749, "completion_tokens": 414, "duration": 16.64839243888855}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any n < 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # For any n >= 8, if n is even, it can always be written as the sum of 4 positive even numbers\n    return n % 2 == 0", "prompt_tokens": 547, "completion_tokens": 253, "duration": 15.44646430015564}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 133, "duration": 7.846211910247803}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            else:\n                modified_text += \"_\" * count\n            modified_text += ch\n            count = 0\n    if count > 2:\n        modified_text += \"-\"\n    else:\n        modified_text += \"_\" * count\n    return modified_text", "prompt_tokens": 616, "completion_tokens": 251, "duration": 11.179112434387207}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digit_count = 0\n    dot_present = False\n    valid_start = False\n    valid_extensions = ['txt', 'exe', 'dll']\n    for ch in file_name:\n        if ch.isdigit():\n            digit_count += 1\n        if ch == '.':\n            dot_present = True\n        if ch.isalpha() and file_name.index(ch) < file_name.index('.'):\n            valid_start = True\n    if digit_count > 3 or not dot_present or not valid_start:\n        return 'No'\n    name, extension = file_name.split('.')\n    if name == '' or extension not in valid_extensions:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 937, "completion_tokens": 398, "duration": 16.839211225509644}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 700, "completion_tokens": 181, "duration": 12.98477840423584}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 689, "completion_tokens": 240, "duration": 11.484848976135254}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0", "prompt_tokens": 676, "completion_tokens": 174, "duration": 7.975411891937256}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    sum_list = [(sum(int(digit) for digit in str(abs(num))), i, num) for i, num in enumerate(nums)]\n    sum_list.sort()\n    sorted_nums = [num for _, _, num in sum_list]\n    return sorted_nums", "prompt_tokens": 679, "completion_tokens": 306, "duration": 14.715869903564453}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 598, "completion_tokens": 184, "duration": 15.476698398590088}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 320, "duration": 18.972648859024048}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 839, "completion_tokens": 276, "duration": 13.725444793701172}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    return sorted(even_length_words, key=lambda x: (len(x), x))", "prompt_tokens": 733, "completion_tokens": 149, "duration": 10.088003396987915}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 9.96437954902649}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 612, "completion_tokens": 117, "duration": 9.010191202163696}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 806, "completion_tokens": 124, "duration": 9.270620822906494}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 939, "completion_tokens": 227, "duration": 9.172232389450073}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if any rotation of b is a substring of a.\"\"\"\n    n = len(a)\n    a_doubled = a + a\n    for i in range(n):\n        if b in a_doubled[i:i+n]:\n            return True\n    return False", "prompt_tokens": 642, "completion_tokens": 193, "duration": 9.123442888259888}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 9.406718254089355}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    roman = \"\"\n    for numeral, value in roman_numerals.items():\n        while num >= value:\n            roman += numeral\n            num -= value\n    return roman.lower()", "prompt_tokens": 572, "completion_tokens": 295, "duration": 18.87089204788208}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    if side_a_squared + side_b_squared == side_c_squared or \\\n       side_a_squared + side_c_squared == side_b_squared or \\\n       side_b_squared + side_c_squared == side_a_squared:\n       return True\n    else:\n       return False", "prompt_tokens": 625, "completion_tokens": 276, "duration": 12.953990459442139}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 274, "duration": 13.432586669921875}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need:\n        total_eaten_carrots = number + need\n        remaining_carrots = remaining - need\n    else:\n        total_eaten_carrots = number + remaining\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 920, "completion_tokens": 200, "duration": 12.18047833442688}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 856, "completion_tokens": 284, "duration": 9.59583568572998}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 587, "completion_tokens": 189, "duration": 10.682975769042969}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 11.21983814239502}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 530, "completion_tokens": 154, "duration": 12.403817892074585}
