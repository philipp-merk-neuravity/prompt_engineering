{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 641, "completion_tokens": 197, "duration": 11.506041288375854}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    current_group = \"\"\n    open_count = 0  # Track open parentheses\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')' and open_count > 0:\n            open_count -= 1\n            current_group += char\n            if open_count == 0:  # Group is balanced\n                groups.append(current_group)\n                current_group = \"\"\n    return groups", "prompt_tokens": 644, "completion_tokens": 292, "duration": 26.932796955108643}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 500, "completion_tokens": 144, "duration": 9.631211519241333}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 554, "completion_tokens": 108, "duration": 7.296490907669067}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diff_list = [abs(number - mean) for number in numbers]\n    mad = sum(abs_diff_list) / len(numbers)\n    return mad", "prompt_tokens": 672, "completion_tokens": 302, "duration": 13.246046781539917}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 525, "completion_tokens": 145, "duration": 8.585342168807983}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    levels = []\n    for group in groups:\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n            elif char == ')':\n                max_level = max(max_level, current_level)\n                current_level -= 1\n        levels.append(max_level)\n    return levels", "prompt_tokens": 682, "completion_tokens": 305, "duration": 17.662166595458984}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 7.709342002868652}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 567, "completion_tokens": 159, "duration": 8.82662057876587}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    window = deque()\n    \n    for number in numbers:\n        while window and window[-1] < number:\n            window.pop()\n        \n        window.append(number)\n        rolling_max_list.append(window[0])\n    \n    return rolling_max_list", "prompt_tokens": 555, "completion_tokens": 175, "duration": 11.23471474647522}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 626, "completion_tokens": 237, "duration": 21.757036685943604}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 504, "completion_tokens": 149, "duration": 7.490090847015381}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 204, "duration": 11.775682210922241}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 143, "duration": 10.364535331726074}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 478, "completion_tokens": 186, "duration": 9.416877746582031}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 162, "duration": 8.397809028625488}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 495, "completion_tokens": 149, "duration": 9.457137107849121}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 732, "completion_tokens": 215, "duration": 14.744804859161377}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 7.605550527572632}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    sorted_numbers = ' '.join(num_list)\n    return sorted_numbers", "prompt_tokens": 586, "completion_tokens": 230, "duration": 14.10381293296814}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 725, "completion_tokens": 235, "duration": 14.932491302490234}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 733, "completion_tokens": 298, "duration": 14.673529148101807}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 494, "completion_tokens": 154, "duration": 13.044738054275513}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 442, "completion_tokens": 130, "duration": 9.296181917190552}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 450, "completion_tokens": 162, "duration": 7.450846910476685}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 180, "duration": 8.71117115020752}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return [num for num in numbers if numbers.count(num) == 1]", "prompt_tokens": 485, "completion_tokens": 126, "duration": 6.892319679260254}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for ch in string:\n        if ch.islower():\n            flipped_string += ch.upper()\n        elif ch.isupper():\n            flipped_string += ch.lower()\n        else:\n            flipped_string += ch\n    return flipped_string", "prompt_tokens": 465, "completion_tokens": 173, "duration": 7.089600086212158}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 419, "completion_tokens": 85, "duration": 7.636454820632935}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 8.842696189880371}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 536, "completion_tokens": 84, "duration": 6.463265419006348}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 518, "completion_tokens": 130, "duration": 8.469228982925415}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 0 and any(xs):\n        poly_func = lambda x: poly(xs, x)\n        zero_point = fsolve(poly_func, 0)[0]\n        return zero_point\n    else:\n        return None", "prompt_tokens": 944, "completion_tokens": 391, "duration": 15.20112133026123}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"Sort elements at indices divisible by 3 in a list.\"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three.sort()\n    \n    # Initialize an index for the sorted divisible_by_three list\n    index = 0\n    # Create a new list to store the result\n    result = []\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            # Replace the element with the sorted one\n            result.append(divisible_by_three[index])\n            index += 1\n        else:\n            # Keep the element as it is\n            result.append(l[i])\n    \n    return result", "prompt_tokens": 686, "completion_tokens": 301, "duration": 15.288223266601562}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 482, "completion_tokens": 181, "duration": 12.18811583518982}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 498, "completion_tokens": 130, "duration": 5.846118211746216}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += str(i).count('7')\n    return count", "prompt_tokens": 514, "completion_tokens": 167, "duration": 11.27576494216919}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices_values.sort()\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 621, "completion_tokens": 263, "duration": 16.281323432922363}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 774, "completion_tokens": 336, "duration": 16.133366107940674}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count, i, nth_prime_fib = 0, 0, 0\n    while count < n:\n        i += 1\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n            nth_prime_fib = fib_num\n            if count == n:\n                break\n    return nth_prime_fib", "prompt_tokens": 566, "completion_tokens": 294, "duration": 12.764607906341553}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 724, "completion_tokens": 252, "duration": 13.64368748664856}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions in a car race with n cars moving left to right and n cars moving right to left.\n    \"\"\"\n    collisions = 0\n    for i in range(1, n):\n        collisions += min(i, n-i)\n    return collisions", "prompt_tokens": 640, "completion_tokens": 151, "duration": 12.505246877670288}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 100, "duration": 9.417705059051514}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 670, "completion_tokens": 146, "duration": 8.867480993270874}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 537, "completion_tokens": 145, "duration": 10.080568075180054}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return 0.5 * a * h", "prompt_tokens": 391, "completion_tokens": 75, "duration": 6.914292097091675}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_element = sum(fib4_list[-4:])\n        fib4_list.append(next_element)\n    return fib4_list[n]", "prompt_tokens": 724, "completion_tokens": 207, "duration": 13.445636510848999}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 492, "completion_tokens": 208, "duration": 14.009868144989014}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 503, "completion_tokens": 131, "duration": 8.366355657577515}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 295, "duration": 13.624025106430054}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str) -> str:\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 595, "completion_tokens": 280, "duration": 15.67681884765625}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    return ''.join(ch for ch in text if ch not in 'aeiouAEIOU')", "prompt_tokens": 601, "completion_tokens": 148, "duration": 8.013804912567139}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 107, "duration": 8.136123657226562}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 91, "duration": 6.2571632862091064}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if set(s0) == set(s1):\n        return True\n    return False", "prompt_tokens": 698, "completion_tokens": 196, "duration": 11.095430850982666}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        temp = a + b\n        a = b\n        b = temp\n        i += 1\n\n    return b", "prompt_tokens": 462, "completion_tokens": 192, "duration": 11.158861875534058}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 560, "completion_tokens": 183, "duration": 9.53347396850586}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 493, "completion_tokens": 113, "duration": 12.139962434768677}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 580, "completion_tokens": 145, "duration": 5.56601881980896}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 174, "duration": 11.187894582748413}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 9.115288019180298}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 535, "completion_tokens": 158, "duration": 7.338713645935059}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 534, "completion_tokens": 101, "duration": 4.162907600402832}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 247, "duration": 11.845257043838501}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Input: s: a string representing a word\n    Output: count: number of vowels in the string\n    \"\"\"\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i, c in enumerate(s):\n        if c in vowels:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 605, "completion_tokens": 195, "duration": 14.750010967254639}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    num_len = len(num_str)\n    shift = shift % num_len if shift > num_len else shift\n    if shift == 0:\n        return num_str\n    result = num_str[-shift:] + num_str[:num_len - shift]\n    return result", "prompt_tokens": 555, "completion_tokens": 246, "duration": 10.65488886833191}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 6.857206344604492}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    :param s: str, a string representing the number of apples and oranges\n    :param n: int, the total number of fruits in the basket\n    :return: int, the number of mango fruits in the basket\n    \"\"\"\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 780, "completion_tokens": 199, "duration": 9.073814868927002}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1055, "completion_tokens": 289, "duration": 15.205639362335205}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key:\n            if greatest_int == -1 or key > greatest_int:\n                greatest_int = key\n\n    return greatest_int", "prompt_tokens": 724, "completion_tokens": 233, "duration": 18.895838260650635}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 619, "completion_tokens": 154, "duration": 8.323975563049316}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        from math import sqrt\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 621, "completion_tokens": 275, "duration": 11.785500764846802}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    # Check if q is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of elements in q is less than or equal to w\n    return sum(q) <= w", "prompt_tokens": 892, "completion_tokens": 231, "duration": 7.53426456451416}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 714, "completion_tokens": 209, "duration": 12.692657232284546}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 775, "completion_tokens": 191, "duration": 14.418646335601807}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    count = 0\n    for p in primes:\n        if a % p == 0:\n            a //= p\n            count += 1\n        if count == 3 and a == 1:\n            return True\n    return False", "prompt_tokens": 494, "completion_tokens": 209, "duration": 10.725174188613892}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n == 1:\n        return True\n    if n == 1:\n        return False\n\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power = power + 1\n\n    return False", "prompt_tokens": 617, "completion_tokens": 149, "duration": 7.849649429321289}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 559, "completion_tokens": 142, "duration": 9.409999132156372}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    \"\"\"Counts the number of prime hexadecimal digits in a string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 927, "completion_tokens": 139, "duration": 7.673485994338989}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with \"db\" at the beginning\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = str(remainder) + binary_str  # Add the remainder to the beginning of binary_str\n        decimal = decimal // 2  # Update decimal by integer division by 2\n    binary_str = binary_str + \"db\"  # Add \"db\" at the end of the binary string\n    return binary_str", "prompt_tokens": 674, "completion_tokens": 275, "duration": 14.858528852462769}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy.\"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 596, "completion_tokens": 178, "duration": 6.220651388168335}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    \"\"\"Converts a list of GPAs into a list of letter grades based on a grading scale.\"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1068, "completion_tokens": 553, "duration": 26.46702742576599}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 545, "completion_tokens": 221, "duration": 9.010565757751465}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 2  # Special case for single-digit numbers\n    else:\n        # For n-digit numbers starting with 1: 10^(n-1) possibilities\n        # For n-digit numbers ending with 1: 10^(n-1) possibilities\n        # Subtract the overlap (numbers that both start and end with 1): 10^(n-2)\n        return 2 * 10**(n-1) - 10**(n-2)", "prompt_tokens": 422, "completion_tokens": 221, "duration": 8.216413974761963}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 595, "completion_tokens": 117, "duration": 6.604572534561157}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 162, "duration": 9.995169878005981}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all the characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 645, "completion_tokens": 223, "duration": 9.629035711288452}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 218, "duration": 12.43955659866333}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array or len(array) == 1:\n        return array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 903, "completion_tokens": 305, "duration": 10.921222686767578}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_str = ''\n    for ch in s:\n        if ch.islower():\n            new_index = (alphabet.index(ch) + 2 * 2) % len(alphabet)\n            encrypted_str += alphabet[new_index]\n        else:\n            encrypted_str += ch\n    return encrypted_str", "prompt_tokens": 658, "completion_tokens": 252, "duration": 10.21233081817627}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest is float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 12.559937715530396}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    # Split the input string into sentences\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    count = 0\n    # Check each sentence\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count", "prompt_tokens": 563, "completion_tokens": 189, "duration": 11.230143785476685}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return all(isinstance(i, int) for i in [x, y, z]) and (x == y + z or y == x + z or z == x + y)", "prompt_tokens": 657, "completion_tokens": 177, "duration": 7.472756862640381}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encode the message by swapping case of all letters and replacing vowels with the letter that appears 2 places ahead.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    \n    for ch in message:\n        if ch in vowels:\n            encoded_message += vowel_replacement[ch]\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 633, "completion_tokens": 319, "duration": 17.61666202545166}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 931, "completion_tokens": 233, "duration": 13.341444730758667}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            elif key.isupper():\n                is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 745, "completion_tokens": 283, "duration": 12.926505327224731}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    prime_numbers = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_numbers.append(num)\n    return prime_numbers", "prompt_tokens": 661, "completion_tokens": 195, "duration": 9.050615549087524}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (a % 10) * (b % 10)", "prompt_tokens": 534, "completion_tokens": 123, "duration": 7.203782320022583}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 140, "duration": 10.450228452682495}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num // 1)\n    ceil_num = floor_num if num == floor_num else floor_num + 1\n    if num - floor_num < ceil_num - num:\n        return floor_num\n    elif num - floor_num > ceil_num - num:\n        return ceil_num\n    else:  # Equidistant case, round away from zero\n        return ceil_num if num > 0 else floor_num", "prompt_tokens": 683, "completion_tokens": 263, "duration": 12.310209512710571}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 143, "duration": 9.723265171051025}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 227, "duration": 10.365005254745483}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 503, "completion_tokens": 149, "duration": 9.968837022781372}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        count = m - n + 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 631, "completion_tokens": 168, "duration": 8.473466396331787}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(d in '13579' for d in str(num)):\n            result.append(num)\n    return sorted(result)", "prompt_tokens": 589, "completion_tokens": 208, "duration": 9.885787963867188}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    result = [num_to_word[num] for num in filtered_arr]\n    return result", "prompt_tokens": 984, "completion_tokens": 354, "duration": 46.44377422332764}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_n(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 201, "duration": 8.511114120483398}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 8.991652011871338}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num != 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 261, "duration": 15.733227491378784}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    shifted_arr = arr[min_index:] + arr[:min_index]\n    return shifted_arr == sorted(arr)", "prompt_tokens": 955, "completion_tokens": 146, "duration": 7.4562156200408936}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    if count_odd == 0:\n        return \"YES\"\n    for num in lst2:\n        if num % 2 == 0:\n            count_odd -= 1\n            if count_odd <= 0:\n                return \"YES\"\n    return \"NO\"", "prompt_tokens": 779, "completion_tokens": 213, "duration": 10.17635726928711}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    letter_counts = {}\n    max_count = 0\n    for letter in words:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n        if letter_counts[letter] > max_count:\n            max_count = letter_counts[letter]\n    \n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return max_letters", "prompt_tokens": 741, "completion_tokens": 289, "duration": 10.182523488998413}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = modified_str == modified_str[::-1]\n    return (modified_str, is_palindrome)", "prompt_tokens": 746, "completion_tokens": 213, "duration": 9.56506085395813}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 723, "completion_tokens": 195, "duration": 8.09867811203003}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 543, "completion_tokens": 200, "duration": 8.982621192932129}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                count += math.ceil(well / capacity)\n    return count", "prompt_tokens": 1035, "completion_tokens": 182, "duration": 7.750084161758423}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 720, "completion_tokens": 162, "duration": 7.435068607330322}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    words = []\n    if not s:\n        return words\n\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    split_words = s.split()\n    for word in split_words:\n        count = sum(1 for char in word if char in consonants)\n        if count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 756, "completion_tokens": 255, "duration": 10.643939971923828}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            if last_consonant_index != -1:\n                for j in range(last_consonant_index, i, -1):\n                    if word[j] in vowels:\n                        closest_vowel = word[j]\n                        break\n                break\n            else:\n                last_consonant_index = i\n    return closest_vowel", "prompt_tokens": 714, "completion_tokens": 287, "duration": 12.663148641586304}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 282, "duration": 11.742294311523438}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 776, "completion_tokens": 139, "duration": 7.889536619186401}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 527, "completion_tokens": 112, "duration": 6.40903639793396}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum", "prompt_tokens": 611, "completion_tokens": 179, "duration": 8.121892213821411}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 229, "duration": 11.799462080001831}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or '-' not in date:\n        return False\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 980, "completion_tokens": 390, "duration": 15.428704977035522}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 753, "completion_tokens": 274, "duration": 9.633357048034668}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    for num in lst:\n        if num == prev:\n            has_duplicate = True\n        if prev is not None and num < prev:\n            return False\n        prev = num\n    if has_duplicate:\n        return False\n    return True", "prompt_tokens": 889, "completion_tokens": 201, "duration": 8.804523229598999}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length_of_intersection = (min_end - max_start) + 1\n\n    if length_of_intersection < 2:\n        return \"NO\"\n\n    return \"YES\" if is_prime(length_of_intersection) else \"NO\"", "prompt_tokens": 944, "completion_tokens": 330, "duration": 18.285626649856567}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 631, "completion_tokens": 213, "duration": 10.10712718963623}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            min_path = min(min_path, path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 1283, "completion_tokens": 406, "duration": 19.79779815673828}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    # Corrected sequence definition according to the given problem statement\n    if n == 0:\n        return [1]\n    tribonacci_seq = [1, 3]\n    if n == 1:\n        return tribonacci_seq[:n+1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci_seq.append(1 + i / 2)\n        else:\n            tribonacci_seq.append(tribonacci_seq[i - 1] + tribonacci_seq[i - 2] + tribonacci_seq[i - 3])\n    return tribonacci_seq", "prompt_tokens": 955, "completion_tokens": 378, "duration": 17.51992702484131}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 483, "completion_tokens": 221, "duration": 9.962451696395874}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) > 0", "prompt_tokens": 652, "completion_tokens": 186, "duration": 14.626044988632202}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 95, "duration": 7.864893198013306}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    # Step 1: Initialize is_last_char_letter as False\n    is_last_char_letter = False\n    \n    # Step 2: If txt is empty, return False\n    if not txt:\n        return False\n    \n    # Step 3: Otherwise, process the string\n    else:\n        # Remove any trailing spaces from txt\n        txt = txt.rstrip()\n        \n        # Get the last character of txt\n        if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n            # If the last character is an alphabetical character and not part of a word\n            is_last_char_letter = True\n    \n    # Step 4: Return is_last_char_letter\n    return is_last_char_letter", "prompt_tokens": 655, "completion_tokens": 331, "duration": 16.55330729484558}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 561, "completion_tokens": 144, "duration": 9.655455350875854}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 230, "duration": 14.407601594924927}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert strings to float for comparison, handling both '.' and ',' as decimal points\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n\n    # Check if types are different or values are equal\n    if type(a) != type(b) or convert_to_float(a) == convert_to_float(b):\n        return None\n\n    # Compare values\n    if convert_to_float(a) > convert_to_float(b):\n        return a\n    else:\n        return b", "prompt_tokens": 749, "completion_tokens": 390, "duration": 16.051345586776733}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # The smallest sum of 4 positive even numbers is 2+4+6+8 = 20\n    if n < 20 or n % 2 != 0:\n        return False\n    # For any even number n >= 20, it can be written as the sum of 4 positive even numbers\n    return True", "prompt_tokens": 542, "completion_tokens": 233, "duration": 14.303978443145752}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 8.863584280014038}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    fixed_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 0:\n                if count > 2:\n                    fixed_text += \"-\"\n                else:\n                    fixed_text += \"_\" * count\n                count = 0\n            fixed_text += ch\n    if count > 0:\n        if count > 2:\n            fixed_text += \"-\"\n        else:\n            fixed_text += \"_\" * count\n    return fixed_text", "prompt_tokens": 640, "completion_tokens": 286, "duration": 12.089030265808105}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = sum(c.isdigit() for c in file_name)\n    parts = file_name.split('.')\n    has_dot = len(parts) == 2\n    valid_extension = parts[-1] in ['txt', 'exe', 'dll'] if has_dot else False\n    starts_with_letter = parts[0][0].isalpha() if parts[0] else False\n    \n    if count_digits <= 3 and has_dot and valid_extension and starts_with_letter:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 906, "completion_tokens": 337, "duration": 13.97634220123291}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 698, "completion_tokens": 179, "duration": 10.474382162094116}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 694, "completion_tokens": 230, "duration": 9.980559587478638}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0", "prompt_tokens": 643, "completion_tokens": 141, "duration": 9.04768991470337}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 709, "completion_tokens": 308, "duration": 11.847936630249023}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 605, "completion_tokens": 195, "duration": 10.835175514221191}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Initialize count of valid triples\n    count = 0\n    \n    # Calculate remainders of each a[i] when divided by 3\n    rem = [0, 0, 0]\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        rem[a_i % 3] += 1\n    \n    # Calculate the number of valid triples\n    # Using the combination formula to find the number of ways to pick triples that sum up to a multiple of 3\n    count += rem[0] * (rem[0] - 1) * (rem[0] - 2) // 6  # All elements are multiples of 3\n    count += rem[1] * rem[2] * (rem[1] - 1) // 2  # Two elements with remainder 1 and one with remainder 2\n    count += rem[2] * rem[1] * (rem[2] - 1) // 2  # Two elements with remainder 2 and one with remainder 1\n    count += rem[1] * rem[2] * rem[0]  # One element from each remainder group\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 492, "duration": 22.10453510284424}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n    else:\n        return ()", "prompt_tokens": 826, "completion_tokens": 264, "duration": 11.742533683776855}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [w for w in lst if len(w) % 2 == 0]\n    return sorted(sorted_lst, key=lambda x: (len(x), x))", "prompt_tokens": 722, "completion_tokens": 134, "duration": 4.758230447769165}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 495, "completion_tokens": 154, "duration": 12.2081880569458}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 621, "completion_tokens": 163, "duration": 8.331018209457397}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 804, "completion_tokens": 118, "duration": 4.680386543273926}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 938, "completion_tokens": 224, "duration": 10.63973093032837}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if b or any of its rotations is a substring in a.\"\"\"\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a = a + a  # Concatenate string a with itself\n    for i in range(n):\n        if b in a[i:i+m]:\n            return True\n    return False", "prompt_tokens": 656, "completion_tokens": 226, "duration": 13.69324803352356}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count, odd_count = 0, 0\n    for digit in str(abs(num)):\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 499, "completion_tokens": 184, "duration": 8.822529792785645}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 595, "completion_tokens": 312, "duration": 14.868920087814331}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 548, "completion_tokens": 116, "duration": 8.217434883117676}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "prompt_tokens": 598, "completion_tokens": 185, "duration": 9.682249307632446}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 933, "completion_tokens": 172, "duration": 5.208059549331665}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 762, "completion_tokens": 251, "duration": 12.427204370498657}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 593, "completion_tokens": 196, "duration": 10.359099864959717}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 7.218646049499512}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start, end = min(a, b), max(a, b)\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 575, "completion_tokens": 172, "duration": 10.210813045501709}
