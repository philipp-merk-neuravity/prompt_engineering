{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 644, "completion_tokens": 200, "duration": 9.674630403518677}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_braces_count += 1\n        elif char == ')':\n            open_braces_count -= 1\n        if char in \"()\":\n            current_group += char\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 638, "completion_tokens": 265, "duration": 11.908190727233887}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 501, "completion_tokens": 145, "duration": 11.693390846252441}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 586, "completion_tokens": 140, "duration": 7.565727233886719}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 667, "completion_tokens": 296, "duration": 11.756733417510986}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 525, "completion_tokens": 145, "duration": 8.387120962142944}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 681, "completion_tokens": 304, "duration": 13.56123685836792}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 122, "duration": 8.048518657684326}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    \n    return (sum_of_numbers, product_of_numbers)", "prompt_tokens": 549, "completion_tokens": 155, "duration": 9.605407953262329}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n    \n    for number in numbers:\n        while max_queue and max_queue[-1] < number:\n            max_queue.pop()\n        \n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n        \n        if max_queue[0] == rolling_max_list[-2]:\n            max_queue.popleft()\n    \n    return rolling_max_list", "prompt_tokens": 559, "completion_tokens": 206, "duration": 12.016742467880249}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "prompt_tokens": 659, "completion_tokens": 249, "duration": 13.266526937484741}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 499, "completion_tokens": 144, "duration": 8.531660318374634}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 204, "duration": 12.224407434463501}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 449, "completion_tokens": 143, "duration": 8.721927404403687}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 478, "completion_tokens": 186, "duration": 9.556906700134277}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 162, "duration": 9.495108127593994}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 183, "duration": 10.704983711242676}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 721, "completion_tokens": 204, "duration": 10.509986639022827}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 8.201419115066528}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numerals_sorted = sorted(numerals, key=lambda x: numeral_to_int[x])\n    return ' '.join(numerals_sorted)", "prompt_tokens": 592, "completion_tokens": 236, "duration": 18.80829906463623}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 723, "completion_tokens": 229, "duration": 9.672368288040161}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 9.803548574447632}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 9.38237476348877}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 403, "completion_tokens": 91, "duration": 6.166950225830078}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 421, "completion_tokens": 128, "duration": 9.011193752288818}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 180, "duration": 12.611493587493896}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 494, "completion_tokens": 167, "duration": 11.431618928909302}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        else:\n            result += ch.lower()\n    return result", "prompt_tokens": 440, "completion_tokens": 132, "duration": 9.774769306182861}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_str = ''\n    for string in strings:\n        concatenated_str += string\n    return concatenated_str", "prompt_tokens": 427, "completion_tokens": 93, "duration": 8.05746603012085}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 167, "duration": 11.230425596237183}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 536, "completion_tokens": 174, "duration": 8.652372598648071}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "prompt_tokens": 544, "completion_tokens": 182, "duration": 9.665022373199463}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0 or not xs:\n        return None\n    def func(x):\n        return poly(xs, x)\n    zero_point, = fsolve(func, 0)\n    return zero_point", "prompt_tokens": 940, "completion_tokens": 382, "duration": 12.164240837097168}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    third_elements = sorted(l[2::3])\n    result = [third_elements.pop(0) if (i+1) % 3 == 0 else val for i, val in enumerate(l)]\n    return result", "prompt_tokens": 695, "completion_tokens": 257, "duration": 9.431205987930298}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 158, "duration": 12.368647575378418}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 501, "completion_tokens": 133, "duration": 8.099162578582764}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 522, "completion_tokens": 176, "duration": 9.725117206573486}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 622, "completion_tokens": 259, "duration": 15.717530965805054}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 746, "completion_tokens": 308, "duration": 12.963229894638062}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "prompt_tokens": 636, "completion_tokens": 375, "duration": 18.826579093933105}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j, k = i + 1, n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 738, "completion_tokens": 266, "duration": 10.358055353164673}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 666, "completion_tokens": 124, "duration": 6.082070589065552}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 8.271678924560547}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 651, "completion_tokens": 121, "duration": 8.392696380615234}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 544, "completion_tokens": 158, "duration": 6.934032917022705}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 395, "completion_tokens": 97, "duration": 6.947464942932129}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        fib4_i = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(fib4_i)\n    return fib4_list[n]", "prompt_tokens": 736, "completion_tokens": 245, "duration": 14.790752172470093}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 490, "completion_tokens": 143, "duration": 10.071044206619263}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    reversed_text = text[::-1]\n    return reversed_text == text", "prompt_tokens": 492, "completion_tokens": 119, "duration": 9.053974628448486}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 207, "duration": 13.376221656799316}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 525, "completion_tokens": 150, "duration": 11.55313777923584}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 570, "completion_tokens": 216, "duration": 11.564769983291626}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for n in l:\n        if n >= t:\n            return False\n    return True", "prompt_tokens": 474, "completion_tokens": 155, "duration": 8.574501752853394}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 63, "duration": 8.257160663604736}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if len(set(s0)) != len(set(s1)):\n        return False\n    for char in set(s0):\n        if char not in s1:\n            return False\n    return True", "prompt_tokens": 695, "completion_tokens": 215, "duration": 11.149380445480347}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n\n    return result", "prompt_tokens": 444, "completion_tokens": 169, "duration": 11.684873104095459}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 172, "duration": 9.738940954208374}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 484, "completion_tokens": 184, "duration": 8.924719095230103}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 586, "completion_tokens": 139, "duration": 10.89041018486023}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 178, "duration": 6.664766550064087}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 8.8236243724823}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 539, "completion_tokens": 162, "duration": 8.677069902420044}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    \"\"\"Return the derivative of a polynomial represented by its coefficients.\"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 535, "completion_tokens": 102, "duration": 7.282512187957764}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 247, "duration": 16.211735486984253}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"\n    Input: s: a string representing a word\n    Output: count: number of vowels in the string\n    \"\"\"\n    count = 0\n    s = s.lower()\n    vowels = 'aeiou'\n    for i, ch in enumerate(s):\n        if ch in vowels:\n            count += 1\n        if ch == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 196, "duration": 8.957391262054443}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    length = len(num_str)\n    if shift >= length:\n        result = num_str[::-1]\n    else:\n        new_pos = shift % length\n        result = num_str[-new_pos:] + num_str[:-new_pos]\n    return result", "prompt_tokens": 566, "completion_tokens": 253, "duration": 13.44176721572876}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    \"\"\"Returns the sum of the ASCII codes of uppercase characters in the string s.\"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 94, "duration": 8.443982362747192}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges in a basket, and the total number of fruits,\n    returns the number of mango fruits in the basket.\n    \"\"\"\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 773, "completion_tokens": 177, "duration": 9.820530652999878}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = None\n    smallest_index = None\n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []", "prompt_tokens": 1039, "completion_tokens": 243, "duration": 10.233945369720459}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    greatest_int = -1\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            greatest_int = max(greatest_int, num)\n    return greatest_int", "prompt_tokens": 699, "completion_tokens": 194, "duration": 13.994056940078735}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    min_idx, max_idx = 0, len(lst) - 1\n    while min_idx <= max_idx:\n        sorted_lst.append(lst[min_idx])\n        if min_idx != max_idx:\n            sorted_lst.append(lst[max_idx])\n        min_idx += 1\n        max_idx -= 1\n    return sorted_lst", "prompt_tokens": 632, "completion_tokens": 210, "duration": 9.163186311721802}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 237, "duration": 15.544582843780518}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    '''\n    # Check if q is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Check if sum of q is less than or equal to w and q is a palindrome\n    return sum(q) <= w and is_palindrome", "prompt_tokens": 895, "completion_tokens": 258, "duration": 13.686416387557983}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 748, "completion_tokens": 243, "duration": 9.537534713745117}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 771, "completion_tokens": 187, "duration": 13.083870887756348}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            while a % i == 0:\n                a //= i\n    return count == 3", "prompt_tokens": 575, "completion_tokens": 279, "duration": 11.403936386108398}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    \"\"\"Returns true if x is a simple power of n, false otherwise.\"\"\"\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 620, "completion_tokens": 139, "duration": 7.091242074966431}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 549, "completion_tokens": 102, "duration": 8.471273422241211}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    return sum(d in '2357BD' for d in num)", "prompt_tokens": 927, "completion_tokens": 92, "duration": 6.346432209014893}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 676, "completion_tokens": 218, "duration": 11.228638172149658}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy.\"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 590, "completion_tokens": 172, "duration": 8.982816457748413}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 22.147120237350464}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n    return True", "prompt_tokens": 549, "completion_tokens": 232, "duration": 8.204761743545532}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)  # Count of numbers starting with 1\n        else:\n            count += 2 * 10 ** (n - 2)  # Count of numbers ending with 1\n\n    return count", "prompt_tokens": 449, "completion_tokens": 220, "duration": 12.819648742675781}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 605, "completion_tokens": 127, "duration": 7.471312046051025}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 443, "completion_tokens": 152, "duration": 9.923978328704834}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words are replaced by a new word\n    with all characters arranged in ascending order based on ascii value.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 620, "completion_tokens": 197, "duration": 7.766099691390991}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 918, "completion_tokens": 294, "duration": 12.232900381088257}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 871, "completion_tokens": 257, "duration": 9.439092636108398}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    \"\"\"Encrypts a string by rotating the alphabet down by 2 multiplied by 2 places.\"\"\"\n    encrypted_s = \"\"\n    for ch in s:\n        if ch.islower():\n            encrypted_ch = chr(((ord(ch) - 97 + 2*2) % 26) + 97)\n            encrypted_s += encrypted_ch\n        else:\n            encrypted_s += ch\n    return encrypted_s", "prompt_tokens": 556, "completion_tokens": 167, "duration": 10.33383560180664}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 624, "completion_tokens": 215, "duration": 13.210034370422363}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in the given string.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in re.split(r'[.?!]', S) if sentence]\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 146, "duration": 9.815232992172241}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 165, "duration": 7.721372127532959}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing all vowels with the letter \n    that appears 2 places ahead of that vowel in the english alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    \n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                if ch.islower():\n                    new_char = alphabet[(alphabet.index(ch.lower()) + 2) % 26]\n                else:\n                    new_char = alphabet[(alphabet.index(ch.lower()) + 2) % 26].upper()\n            else:\n                new_char = ch.swapcase()\n            encoded_message += new_char\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 598, "completion_tokens": 286, "duration": 13.424578666687012}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    largest_prime = 0\n    for num in lst:\n        if num > 1:\n            is_prime = True\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime and num > largest_prime:\n                largest_prime = num\n\n    sum_digits = 0\n    if largest_prime != 0:\n        while largest_prime > 0:\n            sum_digits += largest_prime % 10\n            largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 288, "duration": 15.740804195404053}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = is_upper = False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        if key.isupper():\n            is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 738, "completion_tokens": 230, "duration": 8.630008459091187}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Return an array of the first n integers that are prime numbers and less than n.\"\"\"\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 634, "completion_tokens": 181, "duration": 10.29885458946228}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (a % 10) * (b % 10)", "prompt_tokens": 534, "completion_tokens": 123, "duration": 6.501400470733643}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 135, "duration": 8.890637159347534}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num if num == floor_num else floor_num + 1\n    if num - floor_num < ceil_num - num:\n        return floor_num\n    else:\n        return ceil_num if num > 0 else floor_num - 1", "prompt_tokens": 696, "completion_tokens": 247, "duration": 20.47285032272339}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones_list = []\n    stones = n\n    for i in range(n):\n        stones_list.append(stones)\n        if n % 2 == 0:  # If n is even\n            stones += 2\n        else:  # If n is odd\n            stones += 2\n    return stones_list", "prompt_tokens": 604, "completion_tokens": 255, "duration": 10.57482361793518}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Splits the given string into words separated by commas or spaces and returns an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in \", \":\n            current_word += c\n        else:\n            if current_word:\n                words.append(current_word)\n                current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 625, "completion_tokens": 229, "duration": 9.115918636322021}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    if x > y:\n        return -1\n    else:\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                return num\n        return -1", "prompt_tokens": 525, "completion_tokens": 185, "duration": 9.775535106658936}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    count = 0\n    for i in range(n, m + 1):\n        sum += i\n        count += 1\n    average = round(sum / count)\n    avg_binary = bin(average)\n    return avg_binary", "prompt_tokens": 685, "completion_tokens": 222, "duration": 9.172824382781982}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    result.sort()\n    return result", "prompt_tokens": 551, "completion_tokens": 177, "duration": 9.543071985244751}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    result = [num_to_word[num] for num in filtered_arr]\n    return result", "prompt_tokens": 996, "completion_tokens": 366, "duration": 16.99649143218994}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 600, "completion_tokens": 201, "duration": 10.687104225158691}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 199, "duration": 10.040729522705078}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= abs(num) % 10\n            num = abs(num) // 10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 267, "duration": 12.373892784118652}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 978, "completion_tokens": 179, "duration": 7.1932532787323}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 == 0 and count_odd > 0:\n            count_odd -= 1\n    return \"YES\" if count_odd == 0 else \"NO\"", "prompt_tokens": 759, "completion_tokens": 193, "duration": 10.23118543624878}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    letter_count = {}\n    for letter in words:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values(), default=0)\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result", "prompt_tokens": 735, "completion_tokens": 267, "duration": 10.821283340454102}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    modified_str = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = modified_str == modified_str[::-1]\n    return (modified_str, is_palindrome)", "prompt_tokens": 745, "completion_tokens": 212, "duration": 7.843225479125977}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    res_lst = []\n    for s in lst:\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        res_lst.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return res_lst", "prompt_tokens": 740, "completion_tokens": 220, "duration": 8.461634874343872}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 198, "duration": 7.22575831413269}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 986, "completion_tokens": 121, "duration": 7.136764287948608}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 785, "completion_tokens": 213, "duration": 6.741463899612427}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    words = []\n    if not s:\n        return words\n    for word in s.split():\n        consonant_count = sum(1 for ch in word if ch.lower() not in \"aeiou\" and ch.isalpha())\n        if consonant_count == n:\n            words.append(word)\n    return words", "prompt_tokens": 784, "completion_tokens": 264, "duration": 11.566678762435913}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    found_consonant = False\n    for char in reversed(word):\n        if char not in vowels:\n            if found_consonant:\n                return closest_vowel\n            found_consonant = True\n        else:\n            closest_vowel = char\n            found_consonant = False\n    return \"\"", "prompt_tokens": 712, "completion_tokens": 245, "duration": 8.685895681381226}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 282, "duration": 12.766029834747314}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 779, "completion_tokens": 139, "duration": 6.66712212562561}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 529, "completion_tokens": 114, "duration": 6.508672475814819}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n    return sum", "prompt_tokens": 613, "completion_tokens": 181, "duration": 10.600773572921753}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 826, "completion_tokens": 197, "duration": 9.422535419464111}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string by '-' and store the parts in month, day, year variables.\n    parts = date.split('-')\n    # Check if the date string contains 3 parts after splitting. If not, return False.\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    # Check if month, day, and year are all numeric values. If not, return False.\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    # Convert month, day, and year to integers.\n    month, day, year = int(month), int(day), int(year)\n    # Check if month is between 1 and 12 (inclusive). If not, return False.\n    if month < 1 or month > 12:\n        return False\n    # Check if day is between 1 and 31 for months 1, 3, 5, 7, 8, 10, 12; \n    # between 1 and 30 for months 4, 6, 9, 11; and between 1 and 29 for February. If not, return False.\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    # If all conditions are satisfied, return True.\n    return True", "prompt_tokens": 1005, "completion_tokens": 587, "duration": 22.613484859466553}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 7.710303544998169}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:  # Check if the list is empty\n        return True\n    prev = lst[0]\n    duplicate_count = 0\n    for num in lst[1:]:\n        if num < prev:\n            return False\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        else:\n            duplicate_count = 0\n        prev = num\n    return True", "prompt_tokens": 929, "completion_tokens": 273, "duration": 13.514803171157837}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    if max_start > min_end:\n        return \"NO\"\n    length = min_end - max_start\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 987, "completion_tokens": 333, "duration": 10.783575534820557}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    product_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1 if num < 0 else 0)\n    return sum_magnitudes * product_signs", "prompt_tokens": 656, "completion_tokens": 238, "duration": 12.338338375091553}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = []\n\n    def isValidCell(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    def dfs(x, y, length, current_path):\n        if length == k:\n            if not min_path or current_path < min_path[0]:\n                min_path.clear()\n                min_path.append(current_path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValidCell(nx, ny):\n                dfs(nx, ny, length + 1, current_path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, 1, [grid[i][j]])\n\n    return min_path[0]", "prompt_tokens": 1355, "completion_tokens": 521, "duration": 18.316539525985718}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    seq = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i // 2)\n        else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i - 3])\n    return seq", "prompt_tokens": 904, "completion_tokens": 284, "duration": 14.63741135597229}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n = n // 10\n\n    if not has_odd:\n        return 0\n    else:\n        return product", "prompt_tokens": 483, "completion_tokens": 223, "duration": 9.495372772216797}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 667, "completion_tokens": 199, "duration": 7.663023233413696}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 96, "duration": 4.879412889480591}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 646, "completion_tokens": 201, "duration": 8.533215522766113}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 556, "completion_tokens": 139, "duration": 6.647698402404785}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    max_neg, min_pos = None, None\n    \n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        if num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    \n    return (max_neg, min_pos)", "prompt_tokens": 662, "completion_tokens": 225, "duration": 10.365426063537598}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \"\"\"\n    # Convert strings to float for comparison, handling ',' as decimal point\n    def to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n    \n    a_converted, b_converted = to_float(a), to_float(b)\n    \n    # Check for equality\n    if a_converted == b_converted:\n        return None\n    \n    # Return the original variable type of the larger value\n    if a_converted > b_converted:\n        return a\n    else:\n        return b", "prompt_tokens": 699, "completion_tokens": 341, "duration": 17.85952639579773}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, int(n/2) + 1, 2):\n        count += 1\n        if count == 4 and (n - 2*i) % 2 == 0 and (n - 2*i) > 0:\n            return True\n    return False", "prompt_tokens": 524, "completion_tokens": 226, "duration": 9.79877495765686}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 147, "duration": 9.150134801864624}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    updated_text = \"\"\n    count = 0\n    for i, ch in enumerate(text):\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                updated_text += \"-\" + ch\n            else:\n                updated_text += \"_\" * count + ch\n            count = 0\n    if count > 2:\n        updated_text += \"-\"\n    else:\n        updated_text += \"_\" * count\n    return updated_text.replace(\"_\", \" \").replace(\"-\", \"  \").strip().replace(\"  \", \"-\").replace(\" \", \"_\")", "prompt_tokens": 634, "completion_tokens": 290, "duration": 8.131456136703491}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 838, "completion_tokens": 247, "duration": 7.671604633331299}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 698, "completion_tokens": 179, "duration": 6.6883509159088135}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 674, "completion_tokens": 225, "duration": 10.06621265411377}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product.denominator == 1", "prompt_tokens": 647, "completion_tokens": 124, "duration": 7.433324337005615}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 612, "completion_tokens": 260, "duration": 11.848223209381104}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 196, "duration": 11.260679244995117}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 326, "duration": 14.161813259124756}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result = reversed(result)\n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 274, "duration": 13.208203077316284}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [w for w in lst if len(w) % 2 == 0]\n    return sorted(sorted_lst, key=lambda x: (len(x), x))", "prompt_tokens": 735, "completion_tokens": 147, "duration": 7.88104510307312}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 8.489806175231934}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 622, "completion_tokens": 164, "duration": 11.130658864974976}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 806, "completion_tokens": 113, "duration": 6.288946628570557}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension", "prompt_tokens": 954, "completion_tokens": 242, "duration": 8.472134828567505}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"Check if b or any of its rotations is a substring in a\"\"\"\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a_concat = a + a\n    for i in range(n):\n        if b in a_concat[i:i+m]:\n            return True\n    return False", "prompt_tokens": 646, "completion_tokens": 210, "duration": 6.210484981536865}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 9.41141939163208}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 596, "completion_tokens": 313, "duration": 11.596965551376343}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    side1_square = a * a\n    side2_square = b * b\n    side3_square = c * c\n\n    if (side1_square + side2_square == side3_square) or \\\n       (side1_square + side3_square == side2_square) or \\\n       (side2_square + side3_square == side1_square):\n       return True\n    else:\n       return False", "prompt_tokens": 632, "completion_tokens": 288, "duration": 12.538291931152344}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 165, "duration": 10.761079788208008}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after your meals and the number of carrots left.\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 182, "duration": 6.0538060665130615}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i+1]\n        elif op == '-':\n            result -= operand[i+1]\n        elif op == '*':\n            result *= operand[i+1]\n        elif op == '//':\n            result //= operand[i+1]\n        elif op == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 842, "completion_tokens": 324, "duration": 12.667729139328003}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 9.8905770778656}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 8.372408866882324}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start, end = min(a, b), max(a, b)\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            even_digits.append(i)\n    return even_digits", "prompt_tokens": 577, "completion_tokens": 202, "duration": 5.547943830490112}
