{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 641, "completion_tokens": 198, "duration": 10.850431680679321}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    current_group = \"\"\n    open_count = 0  # Track open parentheses\n    for c in paren_string:\n        if c == '(':\n            open_count += 1\n            current_group += c\n        elif c == ')':\n            open_count -= 1\n            current_group += c\n            if open_count == 0:  # Group is balanced\n                groups.append(current_group)\n                current_group = \"\"\n    return groups", "prompt_tokens": 619, "completion_tokens": 261, "duration": 11.867859125137329}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)", "prompt_tokens": 500, "completion_tokens": 144, "duration": 12.078111171722412}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 569, "completion_tokens": 123, "duration": 7.962027311325073}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 662, "completion_tokens": 217, "duration": 11.082786798477173}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 524, "completion_tokens": 144, "duration": 12.08621621131897}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 679, "completion_tokens": 302, "duration": 11.025138139724731}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]", "prompt_tokens": 506, "completion_tokens": 99, "duration": 6.281351089477539}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_ = 0\n    product = 1\n    \n    for number in numbers:\n        sum_ += number\n        product *= number\n    \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 8.420518636703491}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    max_queue = deque()\n\n    for number in numbers:\n        while max_queue and number >= max_queue[-1]:\n            max_queue.pop()\n        max_queue.append(number)\n        rolling_max_list.append(max_queue[0])\n        if number == max_queue[0]:\n            max_queue.popleft()\n\n    return rolling_max_list", "prompt_tokens": 543, "completion_tokens": 180, "duration": 10.851359844207764}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string + string[::-1]", "prompt_tokens": 659, "completion_tokens": 271, "duration": 15.184506177902222}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 507, "completion_tokens": 152, "duration": 9.436536312103271}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 561, "completion_tokens": 204, "duration": 9.96738076210022}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 142, "duration": 7.548725605010986}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 460, "completion_tokens": 132, "duration": 12.362684726715088}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 110, "duration": 6.377407550811768}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in distinct_chars:\n            distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 493, "completion_tokens": 147, "duration": 7.501299858093262}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 721, "completion_tokens": 204, "duration": 11.381686210632324}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 8.047958850860596}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    int_to_numeral = {v: k for k, v in numeral_to_int.items()}\n    numerals_list = numbers.split()\n    integers_list = [numeral_to_int[numeral] for numeral in numerals_list]\n    sorted_integers = sorted(integers_list)\n    sorted_numerals = [int_to_numeral[i] for i in sorted_integers]\n    sorted_numbers = ' '.join(sorted_numerals)\n    return sorted_numbers", "prompt_tokens": 592, "completion_tokens": 298, "duration": 13.27721881866455}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    return closest_pair", "prompt_tokens": 705, "completion_tokens": 215, "duration": 11.907646417617798}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 228, "duration": 10.100003957748413}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 10.34354281425476}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for _ in string:\n        length += 1\n    return length", "prompt_tokens": 404, "completion_tokens": 92, "duration": 7.559680700302124}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 421, "completion_tokens": 128, "duration": 7.814801454544067}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 617, "completion_tokens": 176, "duration": 9.989140510559082}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    result = []\n    seen = set()\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        else:\n            if number not in seen:\n                seen.add(number)\n    return result", "prompt_tokens": 495, "completion_tokens": 168, "duration": 8.802932024002075}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for character in string:\n        if character.islower():\n            flipped_string += character.upper()\n        elif character.isupper():\n            flipped_string += character.lower()\n        else:\n            flipped_string += character\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 141, "duration": 9.00917100906372}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 128, "duration": 8.094733238220215}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 128, "duration": 7.373529434204102}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    positive_nums = [num for num in l if num > 0]\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 95, "duration": 8.803683757781982}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "prompt_tokens": 544, "completion_tokens": 182, "duration": 10.218843221664429}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients should be even\")\n\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non-zero coefficient should be non-zero\")\n\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n\n    # Use bisection method to find zero point\n    low = -1000\n    high = 1000\n    while low <= high:\n        mid = (low + high) / 2\n        val = poly(xs, mid)\n        if abs(val) < 0.0001:\n            return round(mid, 2)\n        elif val < 0:\n            low = mid + 0.0001  # Adjust to avoid infinite loop\n        else:\n            high = mid - 0.0001  # Adjust to avoid infinite loop\n\n    return None", "prompt_tokens": 959, "completion_tokens": 535, "duration": 24.351619482040405}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    result = [divisible_by_three_elements_sorted.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n    \n    return result", "prompt_tokens": 683, "completion_tokens": 308, "duration": 15.232348203659058}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 481, "completion_tokens": 180, "duration": 14.059680461883545}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 498, "completion_tokens": 190, "duration": 8.768497943878174}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 167, "duration": 7.732249021530151}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    even_values = sorted(l[::2])\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:  # even index\n            result.append(even_values[even_index])\n            even_index += 1\n        else:  # odd index\n            result.append(l[i])\n    return result", "prompt_tokens": 620, "completion_tokens": 259, "duration": 10.957529306411743}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group to decode. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 675, "completion_tokens": 237, "duration": 14.292949438095093}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib", "prompt_tokens": 591, "completion_tokens": 277, "duration": 19.202372074127197}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    if n < 3:\n        return False\n    for i in range(n-2):\n        j, k = i+1, n-1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 762, "completion_tokens": 299, "duration": 11.237475156784058}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for car in range(1, n + 1):\n        collisions += (n - car)\n    return collisions", "prompt_tokens": 640, "completion_tokens": 123, "duration": 9.217124700546265}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 93, "duration": 7.194630146026611}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False", "prompt_tokens": 660, "completion_tokens": 130, "duration": 5.3612329959869385}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    return result", "prompt_tokens": 541, "completion_tokens": 186, "duration": 9.515641689300537}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 96, "duration": 7.181765556335449}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        next_fib4 = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_fib4)\n    return fib4_list[n]", "prompt_tokens": 722, "completion_tokens": 232, "duration": 10.546796798706055}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 492, "completion_tokens": 145, "duration": 11.39360523223877}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True", "prompt_tokens": 510, "completion_tokens": 173, "duration": 10.255469560623169}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "prompt_tokens": 626, "completion_tokens": 272, "duration": 12.542007207870483}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 509, "completion_tokens": 134, "duration": 12.046122312545776}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(ch for ch in text if ch not in 'aeiouAEIOU')", "prompt_tokens": 570, "completion_tokens": 205, "duration": 10.574504852294922}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 107, "duration": 9.639307975769043}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 91, "duration": 8.231244325637817}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if len(s0) != len(s1):\n        return False\n    from collections import Counter\n    return Counter(s0) == Counter(s1)", "prompt_tokens": 704, "completion_tokens": 215, "duration": 7.4956347942352295}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    for i in range(2, n + 1):\n        result = a + b\n        a = b\n        b = result\n\n    return result", "prompt_tokens": 445, "completion_tokens": 170, "duration": 13.371047019958496}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 172, "duration": 9.645204067230225}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 493, "completion_tokens": 193, "duration": 12.646639585494995}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 143, "duration": 10.391035318374634}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor = 2\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n = n // divisor\n            largest_prime_factor = divisor\n        else:\n            divisor += 1\n    return largest_prime_factor", "prompt_tokens": 489, "completion_tokens": 225, "duration": 11.313579797744751}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "prompt_tokens": 492, "completion_tokens": 87, "duration": 8.836952209472656}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 541, "completion_tokens": 164, "duration": 9.595531463623047}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [(i + 1) * xs[i + 1] for i in range(len(xs) - 1)]", "prompt_tokens": 568, "completion_tokens": 130, "duration": 5.665029764175415}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        fibfib_i = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(fibfib_i)\n\n    return fibfib_list[n]", "prompt_tokens": 679, "completion_tokens": 243, "duration": 12.04690408706665}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string s. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in 'aeiou' or (c == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 187, "duration": 8.818321704864502}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    num_str = str(x)\n    length = len(num_str)\n    if shift > length:\n        reversed_num_str = num_str[::-1]\n        return reversed_num_str\n    else:\n        split_index = length - (shift % length)\n        shifted_num = num_str[split_index:] + num_str[:split_index]\n        return shifted_num", "prompt_tokens": 593, "completion_tokens": 293, "duration": 14.440576553344727}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s: str) -> int:\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 82, "duration": 7.16873836517334}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges, and an integer representing the total number of fruits,\n    returns the number of mango fruits in the basket.\n    \"\"\"\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 780, "completion_tokens": 184, "duration": 9.014498233795166}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_value is None or num < smallest_value:\n                smallest_value = num\n                smallest_index = index\n            elif num == smallest_value and index < smallest_index:\n                smallest_index = index\n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1025, "completion_tokens": 247, "duration": 10.667505264282227}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    max_freq_int = -1\n    for num, freq in freq_dict.items():\n        if num > max_freq_int and freq >= num:\n            max_freq_int = num\n    return max_freq_int", "prompt_tokens": 726, "completion_tokens": 226, "duration": 18.18774437904358}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result_lst = []\n    lst.sort()\n    while lst:\n        result_lst.append(lst.pop(0))\n        if lst:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 621, "completion_tokens": 160, "duration": 9.542515754699707}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 237, "duration": 12.025079011917114}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    is_palindrome = q == q[::-1]\n    total_weight = sum(q)\n    return is_palindrome and total_weight <= w", "prompt_tokens": 926, "completion_tokens": 306, "duration": 17.9028000831604}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 748, "completion_tokens": 243, "duration": 11.192783832550049}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 781, "completion_tokens": 204, "duration": 9.96551251411438}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2 or a > 100:\n        return False\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    if is_prime(a):\n        return False\n    \n    prime_factors = []\n    counter = 0\n    for i in range(2, a + 1):\n        while a % i == 0:\n            if is_prime(i):\n                prime_factors.append(i)\n                a = a // i\n                counter += 1\n            else:\n                break\n        if a == 1:\n            break\n    \n    return counter == 3", "prompt_tokens": 578, "completion_tokens": 329, "duration": 18.387770891189575}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 0\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 620, "completion_tokens": 123, "duration": 8.21906852722168}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    '''\n    cube_root = int(abs(a) ** (1/3))\n    return cube_root**3 == abs(a)", "prompt_tokens": 579, "completion_tokens": 162, "duration": 11.089930057525635}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    \"\"\"Count the number of prime hexadecimal digits in a given hexadecimal number string.\"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count", "prompt_tokens": 927, "completion_tokens": 142, "duration": 8.209141969680786}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = 'db'\n    binary_str += bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    binary_str += 'db'\n    return binary_str", "prompt_tokens": 632, "completion_tokens": 145, "duration": 6.803417444229126}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 596, "completion_tokens": 169, "duration": 9.385380506515503}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 21.47622561454773}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    length = len(string)\n    if length <= 1:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 537, "completion_tokens": 214, "duration": 11.60178279876709}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)  # numbers starting with 1\n        else:\n            count += 2 * 10 ** (n - 2)  # numbers ending with 1\n\n    return count", "prompt_tokens": 445, "completion_tokens": 212, "duration": 9.048863649368286}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 610, "completion_tokens": 132, "duration": 7.321155309677124}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 180, "duration": 8.651571035385132}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 666, "completion_tokens": 283, "duration": 11.254345417022705}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 929, "completion_tokens": 218, "duration": 9.483603954315186}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 764, "completion_tokens": 150, "duration": 7.796737909317017}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 625, "completion_tokens": 208, "duration": 10.225375890731812}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 619, "completion_tokens": 210, "duration": 21.067718029022217}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S: str) -> int:\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \n    Args:\n    S: A string of words.\n    \n    Returns:\n    int: The number of sentences starting with \"I\".\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 541, "completion_tokens": 171, "duration": 9.147927284240723}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 609, "completion_tokens": 183, "duration": 11.440678834915161}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters and replacing vowels with the letter \n    that appears 2 places ahead of that vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacement = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = \"\"\n\n    for ch in message:\n        if ch in vowels:\n            encoded_message += vowel_replacement[ch]\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n\n    return encoded_message", "prompt_tokens": 576, "completion_tokens": 271, "duration": 12.355145692825317}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_digits_of_largest_prime(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 934, "completion_tokens": 236, "duration": 15.071712493896484}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = False\n    is_upper = False\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                is_lower = True\n            if key.isupper():\n                is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 736, "completion_tokens": 227, "duration": 11.449812889099121}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 165, "duration": 10.065159797668457}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b", "prompt_tokens": 532, "completion_tokens": 135, "duration": 8.418049573898315}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 137, "duration": 9.177711248397827}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_val = int(num)\n    ceil_val = floor_val if num >= 0 else floor_val - 1\n    if num >= 0:\n        ceil_val += 1\n    if abs(num - floor_val) < abs(num - ceil_val):\n        closest_int = floor_val\n    else:\n        closest_int = ceil_val\n    return closest_int", "prompt_tokens": 718, "completion_tokens": 237, "duration": 11.909186601638794}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones_list = []\n    stones = n\n    increment = 2 if n % 2 == 0 else 1\n\n    for i in range(n):\n        stones_list.append(stones)\n        stones += increment\n        increment = 2  # After the first increment, all subsequent increments should be by 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 258, "duration": 13.615743398666382}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 213, "duration": 10.405833721160889}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 499, "completion_tokens": 145, "duration": 10.08059811592102}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 641, "completion_tokens": 140, "duration": 9.05213975906372}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    for num in x:\n        num_str = str(num)\n        has_even_digit = False\n        for ch in num_str:\n            if ch in ('0', '2', '4', '6', '8'):\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    result.sort()\n    return result", "prompt_tokens": 616, "completion_tokens": 280, "duration": 13.745243787765503}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Sorts integers between 1 and 9 in an array, reverses them, and replaces each digit with its name.\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_sorted_reversed = sorted([num for num in arr if 1 <= num <= 9], reverse=True)\n    return [num_to_word[num] for num in filtered_sorted_reversed]", "prompt_tokens": 954, "completion_tokens": 281, "duration": 26.77912163734436}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_to_x(x):\n        return sum(range(1, x+1))\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_x(i))\n    return result", "prompt_tokens": 599, "completion_tokens": 195, "duration": 10.580604076385498}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 779, "completion_tokens": 197, "duration": 10.415580987930298}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 279, "duration": 10.678252220153809}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 978, "completion_tokens": 179, "duration": 8.290820360183716}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = sum(1 for num in lst1 if num % 2 != 0)\n    count_even = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if count_odd <= count_even else \"NO\"", "prompt_tokens": 834, "completion_tokens": 249, "duration": 9.081796884536743}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    letter_counts = {}\n    max_count = 0\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n        if letter_counts[letter] > max_count:\n            max_count = letter_counts[letter]\n    \n    result_dict = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    return result_dict", "prompt_tokens": 763, "completion_tokens": 311, "duration": 12.327182292938232}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 733, "completion_tokens": 196, "duration": 7.4727654457092285}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result_lst", "prompt_tokens": 735, "completion_tokens": 210, "duration": 7.755235433578491}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 198, "duration": 9.322664022445679}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    times = math.ceil(total_water / capacity)\n    return times", "prompt_tokens": 1037, "completion_tokens": 173, "duration": 8.614365577697754}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 738, "completion_tokens": 180, "duration": 11.003792524337769}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\"\"\"\n    words = []\n    if not s:\n        return words\n    \n    vowels = \"aeiouAEIOU\"\n    s_words = s.split()\n    for word in s_words:\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            words.append(word)\n    \n    return words", "prompt_tokens": 752, "completion_tokens": 253, "duration": 12.943666219711304}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    found_vowel = False\n    for char in reversed(word):\n        if char.lower() not in vowels:\n            if found_vowel:\n                break\n        else:\n            if not found_vowel:\n                closest_vowel = char\n                found_vowel = True\n    return closest_vowel", "prompt_tokens": 713, "completion_tokens": 267, "duration": 23.95510482788086}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    # Check if concatenating in any order forms a good string\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n                if balance < 0:\n                    return False\n        return balance == 0\n\n    # Check both possible concatenations\n    if is_good(lst[0] + lst[1]) or is_good(lst[1] + lst[0]):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 720, "completion_tokens": 279, "duration": 14.275233745574951}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 779, "completion_tokens": 142, "duration": 6.671839237213135}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 529, "completion_tokens": 137, "duration": 9.576688051223755}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 0 < arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 610, "completion_tokens": 178, "duration": 7.302502870559692}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_list = []\n    collatz_list.append(n)\n\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_list.append(n)\n\n    odd_collatz_list = [number for number in collatz_list if number % 2 != 0]\n    odd_collatz_list.sort()\n    return odd_collatz_list", "prompt_tokens": 859, "completion_tokens": 268, "duration": 11.120343685150146}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Split the date string by '-' into parts: month, day, year\n    parts = date.split('-')\n    # Check if the length of the split parts is 3\n    if len(parts) != 3:\n        return False\n    month_str, day_str, year_str = parts\n    # Check if all parts are numeric\n    if not (month_str.isdigit() and day_str.isdigit() and year_str.isdigit()):\n        return False\n    # Convert month, day, year to integers\n    month, day, year = int(month_str), int(day_str), int(year_str)\n    # Check if month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    # Check if day is between 1 and 31 for months 1, 3, 5, 7, 8, 10, 12\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    # Check if day is between 1 and 30 for months 4, 6, 9, 11\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    # Check if day is between 1 and 29 for February\n    if month == 2 and (day < 1 or day > 29):\n        return False\n    # If all conditions are met, return True\n    return True", "prompt_tokens": 976, "completion_tokens": 537, "duration": 35.771968364715576}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - ord('a')) % 2 == 0 for c in txt if c.islower())", "prompt_tokens": 752, "completion_tokens": 273, "duration": 10.440242290496826}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    has_duplicate = False\n    sorted = True\n    for num in lst:\n        if num == prev:\n            has_duplicate = True\n        if prev is not None and num < prev:\n            sorted = False\n            break\n        prev = num\n    if has_duplicate:\n        sorted = False\n    return sorted", "prompt_tokens": 941, "completion_tokens": 264, "duration": 11.580160856246948}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    if max_start > min_end:\n        return \"NO\"\n    length = min_end - max_start + 1\n    if length <= 1:\n        return \"NO\"\n    return \"YES\" if is_prime(length) else \"NO\"", "prompt_tokens": 929, "completion_tokens": 307, "duration": 14.36452865600586}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product_sign *= 1\n        elif num < 0:\n            product_sign *= -1\n        sum_magnitudes += abs(num)\n    return product_sign * sum_magnitudes", "prompt_tokens": 632, "completion_tokens": 277, "duration": 14.051682233810425}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    minHeap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    minHeap.sort()\n    for value, x, y, path in minHeap:\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                newPath = path + [grid[nx][ny]]\n                heappush(minHeap, (newPath[-1], nx, ny, newPath))", "prompt_tokens": 1386, "completion_tokens": 520, "duration": 16.741047382354736}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    tribonacci_seq = [3]\n    for i in range(1, n + 1):\n        if i == 1:\n            tribonacci_seq.append(3)\n        elif i % 2 == 0:\n            tribonacci_seq.append(1 + i / 2)\n        else:\n            tribonacci_seq.append(tribonacci_seq[i - 1] + tribonacci_seq[i - 2] + tribonacci_seq[i - 3])\n    return tribonacci_seq[:n + 1]", "prompt_tokens": 916, "completion_tokens": 314, "duration": 14.310514450073242}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 484, "completion_tokens": 214, "duration": 23.417402982711792}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 654, "completion_tokens": 186, "duration": 11.614912748336792}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list after rounding each element to the upper int.\"\"\"\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 117, "duration": 10.777917861938477}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:\n        return False\n    return txt[-1].isalpha() and txt[-2] == ' ' if len(txt) > 1 else txt[-1].isalpha()", "prompt_tokens": 665, "completion_tokens": 237, "duration": 12.695613384246826}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i\n    return max_index", "prompt_tokens": 556, "completion_tokens": 139, "duration": 7.44570779800415}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 662, "completion_tokens": 228, "duration": 10.978277683258057}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        converted_a = float(a.replace(',', '.'))\n        converted_b = float(b.replace(',', '.'))\n        if converted_a > converted_b:\n            return a\n        elif converted_b > converted_a:\n            return b\n        else:\n            return None", "prompt_tokens": 720, "completion_tokens": 296, "duration": 11.415035963058472}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # If n is less than 8, it cannot be written as the sum of 4 positive even numbers\n    if n < 8:\n        return False\n    # Since we are looking for the sum of exactly 4 positive even numbers, check if the remainder of n divided by 2 is 0\n    # and if n minus 6 (the smallest sum of three even numbers) is even and greater than 0\n    return n % 2 == 0 and (n - 6) % 2 == 0 and n - 6 > 0", "prompt_tokens": 517, "completion_tokens": 258, "duration": 11.54658818244934}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 9.883148670196533}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 0:\n                if count == 1:\n                    modified_text += \"_\"\n                else:\n                    modified_text += \"-\"\n                count = 0\n            modified_text += ch\n    if count > 0:\n        if count == 1:\n            modified_text += \"_\"\n        else:\n            modified_text += \"-\"\n    return modified_text", "prompt_tokens": 636, "completion_tokens": 278, "duration": 24.44436764717102}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = 0\n    count_dots = 0\n    valid_extension = False\n    for ch in file_name:\n        if ch.isdigit():\n            count_digits += 1\n        if ch == '.':\n            count_dots += 1\n    if count_digits > 3 or count_dots != 1:\n        return 'No'\n    else:\n        name_parts = file_name.split('.')\n        if name_parts[0] and name_parts[0][0].isalpha():\n            if name_parts[1] in ['txt', 'exe', 'dll']:\n                valid_extension = True\n    return 'Yes' if valid_extension else 'No'", "prompt_tokens": 916, "completion_tokens": 376, "duration": 22.197391271591187}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the integer entry if its index is a multiple of 3, cubes the integer entry if its index is a multiple of 4 and not a multiple of 3, and returns the sum of all entries.\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 699, "completion_tokens": 236, "duration": 17.576117277145386}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 694, "completion_tokens": 246, "duration": 11.775039672851562}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    product_num = num_x * num_n\n    product_den = den_x * den_n\n    return product_num % product_den == 0", "prompt_tokens": 680, "completion_tokens": 178, "duration": 14.19737982749939}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    sum_list = [(sum(int(digit) for digit in str(abs(num))), i, num) for i, num in enumerate(nums)]\n    sum_list.sort()\n    sorted_nums = [num for _, _, num in sum_list]\n    return sorted_nums", "prompt_tokens": 664, "completion_tokens": 291, "duration": 15.576591491699219}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd(n):\n        return n in ['1', '3', '5', '7', '9']\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if is_odd(str_num[0]) and is_odd(str_num[-1]):\n                count += 1\n    return count", "prompt_tokens": 596, "completion_tokens": 185, "duration": 10.273812770843506}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 731, "completion_tokens": 326, "duration": 18.584100246429443}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "prompt_tokens": 850, "completion_tokens": 285, "duration": 12.874144554138184}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by removing odd length strings and sorting the rest by length and alphabetically.\"\"\"\n    # Filter out strings with odd lengths\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    # Sort the list first alphabetically, then by length\n    even_length_words.sort()  # Alphabetical sort\n    even_length_words.sort(key=len)  # Length sort\n    return even_length_words", "prompt_tokens": 720, "completion_tokens": 193, "duration": 9.78228235244751}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    is_prime = True\n    if n < 2:\n        is_prime = False\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                is_prime = False\n                break\n    if is_prime:\n        return x\n    else:\n        return y", "prompt_tokens": 555, "completion_tokens": 242, "duration": 11.910855293273926}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    '''\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0)", "prompt_tokens": 612, "completion_tokens": 154, "duration": 11.883766651153564}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 809, "completion_tokens": 127, "duration": 9.391149520874023}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    return class_name + \".\" + strongest_extension_name", "prompt_tokens": 939, "completion_tokens": 227, "duration": 13.666138648986816}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a = a + a\n    return b in a", "prompt_tokens": 644, "completion_tokens": 172, "duration": 9.244411945343018}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 459, "completion_tokens": 140, "duration": 7.549655437469482}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral", "prompt_tokens": 596, "completion_tokens": 313, "duration": 15.158125400543213}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    '''\n    side_a_squared = a * a\n    side_b_squared = b * b\n    side_c_squared = c * c\n\n    if side_a_squared + side_b_squared == side_c_squared or \\\n       side_a_squared + side_c_squared == side_b_squared or \\\n       side_b_squared + side_c_squared == side_a_squared:\n       return True\n    else:\n       return False", "prompt_tokens": 626, "completion_tokens": 277, "duration": 11.45982313156128}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        \n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 165, "duration": 10.939301013946533}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots after meals and the number of carrots left.\n    \"\"\"\n    if remaining >= need - number:\n        total_eaten_carrots = number + (need - number)\n        remaining_carrots = remaining - (need - number)\n    else:\n        total_eaten_carrots = number + remaining\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 915, "completion_tokens": 203, "duration": 8.703552007675171}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 778, "completion_tokens": 267, "duration": 11.928295850753784}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 191, "duration": 12.00972032546997}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n\n    import hashlib\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 128, "duration": 9.509462833404541}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    if a > b:\n        a, b = b, a\n\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits", "prompt_tokens": 539, "completion_tokens": 163, "duration": 9.928832054138184}
