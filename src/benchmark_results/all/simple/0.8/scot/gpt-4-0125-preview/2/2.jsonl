{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 639, "completion_tokens": 195, "duration": 9.218622207641602}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    for c in paren_string:\n        if c == '(':\n            open_braces_count += 1\n        elif c == ')':\n            open_braces_count -= 1\n        if c in '()':\n            current_group += c\n        if open_braces_count == 0 and current_group:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups", "prompt_tokens": 637, "completion_tokens": 265, "duration": 16.22158694267273}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    \"\"\"Return the decimal part of the number.\"\"\"\n    return number - int(number)", "prompt_tokens": 506, "completion_tokens": 106, "duration": 8.068236112594604}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 7.192913293838501}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 644, "completion_tokens": 264, "duration": 11.30466103553772}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 536, "completion_tokens": 157, "duration": 8.157532930374146}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    for group in groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, depth)\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 668, "completion_tokens": 287, "duration": 12.345680475234985}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 106, "duration": 10.633220911026001}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_ = 0\n    product = 1\n    \n    for number in numbers:\n        sum_ += number\n        product *= number\n    \n    return (sum_, product)", "prompt_tokens": 549, "completion_tokens": 145, "duration": 8.235535144805908}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "prompt_tokens": 576, "completion_tokens": 180, "duration": 7.895815372467041}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string", "prompt_tokens": 627, "completion_tokens": 238, "duration": 9.760247468948364}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 510, "completion_tokens": 160, "duration": 8.31870174407959}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 546, "completion_tokens": 148, "duration": 8.97595763206482}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 108, "duration": 7.021831035614014}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "prompt_tokens": 475, "completion_tokens": 184, "duration": 9.543396472930908}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 478, "completion_tokens": 164, "duration": 9.809031009674072}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 480, "completion_tokens": 185, "duration": 9.808153867721558}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 715, "completion_tokens": 198, "duration": 8.199885368347168}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 8.357943296432495}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    numeral_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    sorted_numbers = sorted(words, key=lambda word: numeral_to_number[word])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 590, "completion_tokens": 233, "duration": 13.774680376052856}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 727, "completion_tokens": 239, "duration": 12.710747957229614}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(number - min_value) / range_value for number in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 8.031222581863403}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 498, "completion_tokens": 158, "duration": 14.255601406097412}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 5.498731374740601}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 421, "completion_tokens": 128, "duration": 8.525458812713623}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n = n // i\n        else:\n            i += 1\n    return factors", "prompt_tokens": 610, "completion_tokens": 168, "duration": 8.370139837265015}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    count_dict = {}\n    \n    for number in numbers:\n        if number not in count_dict:\n            count_dict[number] = 1\n        else:\n            count_dict[number] += 1\n    \n    for number in numbers:\n        if count_dict[number] == 1:\n            result.append(number)\n    \n    return result", "prompt_tokens": 530, "completion_tokens": 193, "duration": 8.498724699020386}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 461, "completion_tokens": 164, "duration": 6.958684206008911}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = ''\n    for string in strings:\n        result += string\n    return result", "prompt_tokens": 422, "completion_tokens": 121, "duration": 8.718472480773926}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 108, "duration": 7.755667448043823}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]", "prompt_tokens": 546, "completion_tokens": 94, "duration": 5.169617414474487}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "prompt_tokens": 544, "completion_tokens": 182, "duration": 10.245875120162964}
{"task_id": "HumanEval/32", "generated_code": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List of coefficients must have an even number of elements.\")\n    def poly_to_solve(x):\n        return poly(xs, x)\n    zero_point = fsolve(poly_to_solve, 0)[0]\n    return zero_point", "prompt_tokens": 900, "completion_tokens": 354, "duration": 11.921359300613403}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3 and sort them\n    sorted_thirds = sorted(l[i] for i in range(2, len(l), 3))\n    \n    # Initialize an iterator for the sorted elements\n    sorted_iter = iter(sorted_thirds)\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    return [next(sorted_iter) if (i+1) % 3 == 0 else v for i, v in enumerate(l)]", "prompt_tokens": 668, "completion_tokens": 283, "duration": 11.086248397827148}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_list = []\n    for e in l:\n        if e not in unique_list:\n            unique_list.append(e)\n    unique_list.sort()\n    return unique_list", "prompt_tokens": 481, "completion_tokens": 180, "duration": 11.79905652999878}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 498, "completion_tokens": 130, "duration": 9.292757511138916}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 521, "completion_tokens": 170, "duration": 13.084255456924438}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    even_indices_values = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_indices_values[even_index]\n            even_index += 1\n    return l", "prompt_tokens": 605, "completion_tokens": 242, "duration": 9.7551908493042}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group in reverse. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 676, "completion_tokens": 238, "duration": 8.886256694793701}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 0\n    num = 0\n\n    while count < n:\n        num = fib_list[-1] + fib_list[-2]\n        fib_list.append(num)\n\n        if is_prime(num):\n            count += 1\n\n    return num", "prompt_tokens": 591, "completion_tokens": 291, "duration": 10.877304553985596}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        j, k = i + 1, n - 1\n        while j < k:\n            total = l[i] + l[j] + l[k]\n            if total == 0:\n                return True\n            elif total < 0:\n                j += 1\n            else:\n                k -= 1\n    return False", "prompt_tokens": 738, "completion_tokens": 266, "duration": 15.83827018737793}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the total number of collisions between two sets of n cars moving in opposite directions.\n    \"\"\"\n    return n", "prompt_tokens": 641, "completion_tokens": 119, "duration": 5.882434844970703}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 100, "duration": 8.168588876724243}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        complement = -num\n        if complement in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 676, "completion_tokens": 152, "duration": 7.641131401062012}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result", "prompt_tokens": 537, "completion_tokens": 176, "duration": 5.933706045150757}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 394, "completion_tokens": 96, "duration": 6.824377059936523}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n + 1):\n        fib4_next = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(fib4_next)\n    return fib4_list[-1]", "prompt_tokens": 735, "completion_tokens": 228, "duration": 8.574767827987671}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 491, "completion_tokens": 207, "duration": 11.509087800979614}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 508, "completion_tokens": 193, "duration": 9.790862798690796}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    for i in range(n):\n        result = (2 * result) % p\n    return result", "prompt_tokens": 516, "completion_tokens": 91, "duration": 6.9388747215271}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 525, "completion_tokens": 150, "duration": 13.476057767868042}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 601, "completion_tokens": 159, "duration": 10.42888855934143}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 474, "completion_tokens": 109, "duration": 6.942062616348267}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "prompt_tokens": 398, "completion_tokens": 91, "duration": 7.661912202835083}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    if set(s0) == set(s1):\n        return True\n    return False", "prompt_tokens": 698, "completion_tokens": 196, "duration": 9.613058805465698}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        temp = a + b\n        a = b\n        b = temp\n        i += 1\n\n    return b", "prompt_tokens": 478, "completion_tokens": 208, "duration": 11.332840204238892}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == \"<\":\n            stack.append(ch)\n        elif ch == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "prompt_tokens": 542, "completion_tokens": 165, "duration": 6.774107456207275}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 539, "completion_tokens": 198, "duration": 8.91988229751587}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort()\n    return common_elements", "prompt_tokens": 578, "completion_tokens": 143, "duration": 10.63955283164978}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n = n / factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 487, "completion_tokens": 174, "duration": 9.895843029022217}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n+1))", "prompt_tokens": 492, "completion_tokens": 149, "duration": 13.519086599349976}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack", "prompt_tokens": 535, "completion_tokens": 161, "duration": 10.037685871124268}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 565, "completion_tokens": 119, "duration": 7.959660530090332}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 247, "duration": 11.735442161560059}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    \"\"\"Returns the number of vowels in the string. 'y' is considered a vowel if it is at the end of the word.\"\"\"\n    count = 0\n    s = s.lower()\n    for i, ch in enumerate(s):\n        if ch in 'aeiou' or (ch == 'y' and i == len(s) - 1):\n            count += 1\n    return count", "prompt_tokens": 595, "completion_tokens": 175, "duration": 13.134434223175049}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shifted_str = x_str[::-1]\n    else:\n        split_index = length - (shift % length)\n        shifted_str = x_str[split_index:] + x_str[:split_index]\n    return shifted_str", "prompt_tokens": 560, "completion_tokens": 252, "duration": 13.598657608032227}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    \"\"\"Returns the sum of the ASCII codes of uppercase characters in the string s.\"\"\"\n    return sum(ord(ch) for ch in s if ch.isupper())", "prompt_tokens": 538, "completion_tokens": 94, "duration": 8.253352403640747}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges, and an integer representing the total number of fruits,\n    returns the number of mango fruits in the basket.\n    \"\"\"\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 780, "completion_tokens": 185, "duration": 11.174509763717651}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    min_even_value = float('inf')\n    min_index = -1\n    found_even = False\n    for index, element in enumerate(arr):\n        if element % 2 == 0 and element < min_even_value:\n            min_even_value = element\n            min_index = index\n            found_even = True\n    if found_even:\n        return [min_even_value, min_index]\n    else:\n        return []", "prompt_tokens": 1052, "completion_tokens": 264, "duration": 11.206307649612427}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    '''\n    Input: lst: a list of positive integers\n    Output: greatest_int: the greatest integer that is greater than zero and has a frequency greater than or equal to the value of the integer itself\n    '''\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num and num > greatest_int:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 730, "completion_tokens": 276, "duration": 13.769541025161743}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop(-1))\n    return sorted_lst", "prompt_tokens": 609, "completion_tokens": 150, "duration": 9.11953353881836}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 239, "duration": 16.111905336380005}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = q == q[::-1]\n    return is_palindrome and sum(q) <= w", "prompt_tokens": 895, "completion_tokens": 210, "duration": 12.14522910118103}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    min_changes = 0\n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    return min_changes", "prompt_tokens": 715, "completion_tokens": 211, "duration": 12.431874752044678}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "prompt_tokens": 781, "completion_tokens": 197, "duration": 11.886871576309204}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a+1) if is_prime(i)]\n    count = 0\n    for p in primes:\n        if a % p == 0:\n            a //= p\n            count += 1\n        if count == 3 and a == 1:\n            return True\n    return False", "prompt_tokens": 498, "completion_tokens": 215, "duration": 10.800946235656738}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False", "prompt_tokens": 609, "completion_tokens": 112, "duration": 6.915469408035278}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    '''\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 581, "completion_tokens": 164, "duration": 9.723679780960083}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    return sum(d in '2357BD' for d in num)", "prompt_tokens": 927, "completion_tokens": 92, "duration": 3.4713423252105713}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"  # Initialize the binary string with \"db\" at the beginning\n    if decimal == 0:\n        return \"db0db\"\n    while decimal > 0:\n        remainder = decimal % 2  # Get the remainder when dividing by 2\n        binary_str = str(remainder) + binary_str  # Add the remainder to the beginning of the binary string\n        decimal = decimal // 2  # Update the decimal number by integer division by 2\n    binary_str = binary_str + \"db\"  # Add \"db\" at the end of the binary string\n    return binary_str", "prompt_tokens": 680, "completion_tokens": 284, "duration": 10.498478889465332}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    \"\"\"Check if the string is happy.\"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 174, "duration": 9.454924583435059}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1087, "completion_tokens": 551, "duration": 26.699233055114746}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\"\"\"\n    n = len(string)\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 551, "completion_tokens": 227, "duration": 10.51067304611206}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 2  # Special case for 1-digit numbers: only 1 and 11 meet the criteria\n    else:\n        # For n-digit numbers starting with 1: 10^(n-1) to 10^n - 1, there are 9 * 10^(n-2) numbers ending with 1\n        # For n-digit numbers ending with 1: 10^(n-1) to 10^n - 1, there are 10^(n-1) possibilities\n        # Subtract the overlap (numbers both starting and ending with 1), which is 10^(n-2)\n        return 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)", "prompt_tokens": 422, "completion_tokens": 282, "duration": 10.979357957839966}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]", "prompt_tokens": 610, "completion_tokens": 132, "duration": 8.723999261856079}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 453, "completion_tokens": 162, "duration": 10.213414907455444}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 636, "completion_tokens": 252, "duration": 12.98064136505127}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    \"\"\"\n    Given a 2D list and an integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda k: (k[0], -k[1]))\n    return result", "prompt_tokens": 891, "completion_tokens": 270, "duration": 12.622294187545776}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 902, "completion_tokens": 295, "duration": 10.832960844039917}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2 * 2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 202, "duration": 10.071394443511963}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for element in lst:\n        if element < smallest:\n            second_smallest = smallest\n            smallest = element\n        elif element < second_smallest and element != smallest:\n            second_smallest = element\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 628, "completion_tokens": 224, "duration": 11.241609811782837}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    Counts the number of sentences starting with \"I\".\n    \"\"\"\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 140, "duration": 9.811960935592651}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 598, "completion_tokens": 172, "duration": 10.733323574066162}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def swap_case(ch):\n        if ch.islower():\n            return ch.upper()\n        else:\n            return ch.lower()\n\n    def replace_vowel(ch):\n        vowels = 'aeiouAEIOU'\n        if ch in vowels:\n            alphabet = 'abcdefghijklmnopqrstuvwxyz'\n            index = alphabet.index(ch.lower())\n            new_index = (index + 2) % 26\n            new_ch = alphabet[new_index]\n            if ch.isupper():\n                return new_ch.upper()\n            else:\n                return new_ch\n        else:\n            return ch\n\n    encoded_message = ''\n    for ch in message:\n        if ch.isalpha():\n            ch = swap_case(ch)\n            ch = replace_vowel(ch)\n        encoded_message += ch\n    return encoded_message", "prompt_tokens": 650, "completion_tokens": 333, "duration": 19.41580820083618}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_sum_of_digits(num):\n        sum_of_digits = 0\n        while num > 0:\n            sum_of_digits += num % 10\n            num = num // 10\n        return sum_of_digits\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num) and (largest_prime is None or num > largest_prime):\n            largest_prime = num\n\n    if largest_prime is None:\n        return 0\n\n    return calculate_sum_of_digits(largest_prime)", "prompt_tokens": 1010, "completion_tokens": 348, "duration": 21.578468322753906}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    is_lower = is_upper = False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        if key.isupper():\n            is_upper = True\n        if is_lower and is_upper:\n            return False\n    return is_lower or is_upper", "prompt_tokens": 741, "completion_tokens": 233, "duration": 10.352214336395264}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Returns an array of the first n integers that are prime numbers and less than n.\"\"\"\n    prime_nums = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(num)\n    return prime_nums", "prompt_tokens": 661, "completion_tokens": 214, "duration": 11.952177047729492}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\"\"\"\n    return (a % 10) * (b % 10)", "prompt_tokens": 525, "completion_tokens": 114, "duration": 7.247930526733398}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 137, "duration": 9.424415349960327}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num if floor_num == num else floor_num + 1\n    if num - floor_num < ceil_num - num:\n        return floor_num\n    else:\n        return ceil_num if num > 0 else floor_num - 1", "prompt_tokens": 677, "completion_tokens": 228, "duration": 10.521960735321045}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    for i in range(1, n + 1):\n        stones_list.append(stones)\n        if n % 2 == 0:\n            stones += 2\n        else:\n            stones += 2\n    return stones_list", "prompt_tokens": 601, "completion_tokens": 147, "duration": 8.395540475845337}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words and return an array of the words.\n    \"\"\"\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 616, "completion_tokens": 213, "duration": 11.594425439834595}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 509, "completion_tokens": 185, "duration": 9.463617086410522}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        for i in range(n, m + 1):\n            sum += i\n        count = m - n + 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 170, "duration": 9.216439247131348}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    result = []\n    \n    for number in x:\n        has_even_digit = False\n        \n        for digit in str(number):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        \n        if not has_even_digit:\n            result.append(number)\n    \n    result.sort()\n    return result", "prompt_tokens": 561, "completion_tokens": 214, "duration": 11.00156831741333}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort(reverse=True)\n    result = [num_to_word[num] for num in filtered_arr]\n    return result", "prompt_tokens": 992, "completion_tokens": 362, "duration": 17.70073676109314}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x-1)\n    \n    def sum_numbers(x):\n        return sum(range(1, x+1))\n    \n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res.append(factorial(i))\n        else:\n            res.append(sum_numbers(i))\n    return res", "prompt_tokens": 580, "completion_tokens": 174, "duration": 8.915587663650513}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(s):\n        return s == s[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(str(num)):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)", "prompt_tokens": 773, "completion_tokens": 188, "duration": 10.4118971824646}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= 1\n            num *= -1\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 259, "duration": 14.592118501663208}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:  # Step 1\n        return True\n    n = len(arr)\n    for i in range(n):  # Step 3\n        if arr == sorted(arr):  # Step 4\n            return True\n        arr = [arr[-1]] + arr[:-1]  # Perform right shift operation\n    return False  # Step 6", "prompt_tokens": 978, "completion_tokens": 209, "duration": 10.072983264923096}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 == 0:\n            count_odd -= 1\n    return \"YES\" if count_odd <= 0 else \"NO\"", "prompt_tokens": 759, "completion_tokens": 187, "duration": 9.780301332473755}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    hist_dict = {}\n    max_count = 0\n    for letter in words:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    result_dict = {letter: count for letter, count in hist_dict.items() if count == max_count}\n    return result_dict", "prompt_tokens": 759, "completion_tokens": 306, "duration": 21.995781898498535}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join(ch for ch in s if ch not in c)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "prompt_tokens": 736, "completion_tokens": 199, "duration": 7.7950990200042725}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result", "prompt_tokens": 728, "completion_tokens": 200, "duration": 15.283111333847046}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 541, "completion_tokens": 198, "duration": 10.148715734481812}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1035, "completion_tokens": 166, "duration": 7.561574697494507}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 710, "completion_tokens": 138, "duration": 6.813284635543823}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, returns a list of all words from string s that contain exactly n consonants.\"\"\"\n    words = []\n    if not s:\n        return words\n\n    def count_consonants(word):\n        count = 0\n        for c in word.lower():\n            if c in \"bcdfghjklmnpqrstvwxyz\":\n                count += 1\n        return count\n\n    word_list = s.split()\n\n    for word in word_list:\n        if count_consonants(word) == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 773, "completion_tokens": 283, "duration": 18.29166555404663}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    found_consonant = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels and found_consonant and i + 1 < len(word) and word[i + 1] in vowels:\n            closest_vowel = word[i + 1]\n            break\n        if word[i] not in vowels:\n            found_consonant = True\n    return closest_vowel", "prompt_tokens": 710, "completion_tokens": 274, "duration": 14.481035709381104}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    Input: lst: a list of two strings\n    Output: result: 'Yes' or 'No'\n    '''\n    count = 0\n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                count += 1\n            elif ch == ')':\n                count -= 1\n            if count < 0:\n                return 'No'\n    return 'Yes' if count == 0 else 'No'", "prompt_tokens": 702, "completion_tokens": 212, "duration": 11.248847961425781}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "prompt_tokens": 776, "completion_tokens": 139, "duration": 6.998480558395386}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 527, "completion_tokens": 137, "duration": 7.48861289024353}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    sum = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 611, "completion_tokens": 179, "duration": 9.714905023574829}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n\n    odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 229, "duration": 14.417937278747559}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date or \"-\" not in date:\n        return False\n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True", "prompt_tokens": 1028, "completion_tokens": 446, "duration": 18.406315088272095}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 702, "completion_tokens": 227, "duration": 9.922680616378784}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst:  # If the list is empty, it's considered sorted\n        return True\n    prev = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < prev:  # If the current number is less than the previous, it's not sorted\n            return False\n        if lst[i] == prev:  # If there's a duplicate\n            if i - 2 >= 0 and lst[i - 2] == prev:  # Check if there's more than one duplicate\n                return False\n        prev = lst[i]\n    return True", "prompt_tokens": 941, "completion_tokens": 321, "duration": 20.408064126968384}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    \"\"\"Determines if the length of the intersection of two intervals is a prime number.\"\"\"\n    from math import sqrt\n\n    # Check if intervals do not intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    \n    # Calculate intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if intersection length is less than 2 or equal to 1 (not prime)\n    if intersection_length <= 1:\n        return \"NO\"\n\n    # Check if intersection length is prime\n    for i in range(2, int(sqrt(intersection_length)) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"", "prompt_tokens": 948, "completion_tokens": 384, "duration": 14.94003677368164}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_sign = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            sum_magnitudes += -num\n            product_sign *= -1\n        # No else needed as 0 does not affect the result\n    return product_sign * sum_magnitudes", "prompt_tokens": 667, "completion_tokens": 265, "duration": 16.539281606674194}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            nonlocal min_path\n            min_path = min(min_path, path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 1214, "completion_tokens": 337, "duration": 16.720879077911377}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    \"\"\"Return the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n == 0:\n        return [3]\n    seq = [3]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            seq.append(1 + (i / 2))\n        else:\n            if i == 1:\n                seq.append(seq[i - 1])\n            elif i == 2:\n                seq.append(seq[i - 1] + seq[i - 2] + 3)  # tri(4) = 3, as per the given example\n            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1 - 3])\n    return seq", "prompt_tokens": 876, "completion_tokens": 317, "duration": 22.687450170516968}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 483, "completion_tokens": 210, "duration": 13.27398133277893}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 663, "completion_tokens": 195, "duration": 12.164039373397827}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list after rounding each element to the upper int.\"\"\"\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 643, "completion_tokens": 117, "duration": 8.768736362457275}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    '''\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n    return False", "prompt_tokens": 647, "completion_tokens": 200, "duration": 8.799784183502197}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            index = i\n    return index", "prompt_tokens": 534, "completion_tokens": 205, "duration": 10.419495582580566}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_neg = None\n    smallest_pos = None\n\n    if not lst:\n        return (None, None)\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 230, "duration": 11.6551353931427}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(\",\", \".\")\n        return float(x)\n    \n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 633, "completion_tokens": 179, "duration": 12.89445161819458}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    # Since the smallest sum of 4 positive even numbers is 2+2+2+2=8, any number less than 8 cannot be written as such a sum\n    if n < 8:\n        return False\n    # For any n >= 8, it can be written as the sum of 2+2+2+(n-6) if n-6 is even and positive\n    return (n - 6) % 2 == 0", "prompt_tokens": 539, "completion_tokens": 259, "duration": 12.346693754196167}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the special factorial of n.\"\"\"\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 146, "duration": 11.253581762313843}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n        else:\n            if count > 2:\n                modified_text += \"-\"\n            elif count > 0:\n                modified_text += \"_\" * count\n            modified_text += ch\n            count = 0\n    if count > 2:\n        modified_text += \"-\"\n    elif count > 0:\n        modified_text += \"_\" * count\n    return modified_text", "prompt_tokens": 634, "completion_tokens": 274, "duration": 15.395602941513062}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 831, "completion_tokens": 240, "duration": 12.11263108253479}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 700, "completion_tokens": 181, "duration": 12.21716046333313}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 695, "completion_tokens": 246, "duration": 13.480744361877441}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    product = x_fraction * n_fraction\n    return product.denominator == 1", "prompt_tokens": 649, "completion_tokens": 127, "duration": 8.874765396118164}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    \"\"\"\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 711, "completion_tokens": 305, "duration": 12.149083852767944}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 196, "duration": 19.41090679168701}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n where a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Initialize count of valid triples\n    count = 0\n    \n    # Precompute the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 731, "completion_tokens": 350, "duration": 16.03114342689514}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 828, "completion_tokens": 265, "duration": 12.221474885940552}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    \"\"\"Sorts a list of strings by removing odd length strings and sorting the rest by length and alphabetically.\"\"\"\n    # Filter out strings with odd lengths and sort the remaining by length then alphabetically\n    sorted_lst = sorted([w for w in lst if len(w) % 2 == 0], key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 741, "completion_tokens": 194, "duration": 11.367031335830688}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 150, "duration": 9.366697311401367}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(num**2 for num in lst if isinstance(num, int) and num > 0 and num % 2 == 1)", "prompt_tokens": 612, "completion_tokens": 117, "duration": 6.7155632972717285}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]", "prompt_tokens": 806, "completion_tokens": 113, "duration": 7.774597883224487}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension_name = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension_name = extension\n    return f\"{class_name}.{strongest_extension_name}\"", "prompt_tokens": 957, "completion_tokens": 247, "duration": 16.423725843429565}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    aa = a + a\n    for i in range(n):\n        if aa[i:i+m] == b:\n            return True\n        # Check all rotations of b\n        for j in range(1, m):\n            rotated_b = b[j:] + b[:j]\n            if aa[i:i+m] == rotated_b:\n                return True\n    return False", "prompt_tokens": 650, "completion_tokens": 242, "duration": 12.043203830718994}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 480, "completion_tokens": 161, "duration": 8.510243892669678}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    mini_roman = \"\"\n    for value, roman_numeral in roman_numerals:\n        while number >= value:\n            mini_roman += roman_numeral\n            number -= value\n    return mini_roman", "prompt_tokens": 581, "completion_tokens": 302, "duration": 12.991458654403687}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 566, "completion_tokens": 134, "duration": 7.059874773025513}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        \n        if len(unique_chars) > max_unique_chars or (len(unique_chars) == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = len(unique_chars)\n\n    return max_word", "prompt_tokens": 592, "completion_tokens": 173, "duration": 15.764696836471558}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Returns the total number of eaten carrots and the number of carrots left after eating.\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(0, remaining - need)\n    return [total_eaten, remaining_carrots]", "prompt_tokens": 921, "completion_tokens": 177, "duration": 9.072754383087158}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n    \"\"\"\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 878, "completion_tokens": 368, "duration": 10.994905710220337}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not any(c.isalpha() for c in result):\n        result = result[::-1]\n    return result", "prompt_tokens": 590, "completion_tokens": 192, "duration": 10.45044994354248}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 466, "completion_tokens": 119, "duration": 8.912588596343994}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    even_digits = []\n    start, end = sorted([a, b])\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 574, "completion_tokens": 195, "duration": 8.492142915725708}
