{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "prompt_tokens": 849, "completion_tokens": 356, "duration": 15.221280574798584}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    return result", "prompt_tokens": 943, "completion_tokens": 519, "duration": 16.699766159057617}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 727, "completion_tokens": 287, "duration": 11.302218675613403}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 976, "completion_tokens": 486, "duration": 14.51641845703125}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 977, "completion_tokens": 492, "duration": 14.772937774658203}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimiter, num])\n    return result", "prompt_tokens": 847, "completion_tokens": 439, "duration": 16.29128861427307}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        max_depths.append(max_count)\n    return max_depths", "prompt_tokens": 936, "completion_tokens": 512, "duration": 14.108475685119629}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]", "prompt_tokens": 786, "completion_tokens": 351, "duration": 11.951738357543945}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    for number in numbers:\n        product *= number\n    return sum(numbers), product", "prompt_tokens": 790, "completion_tokens": 314, "duration": 12.195480108261108}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 1091, "completion_tokens": 677, "duration": 18.79286813735962}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    if string == string[::-1]:\n        return string\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 944, "completion_tokens": 425, "duration": 15.250200033187866}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:]", "prompt_tokens": 780, "completion_tokens": 364, "duration": 12.954492807388306}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 807, "completion_tokens": 337, "duration": 11.189190864562988}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 804, "completion_tokens": 398, "duration": 13.233295202255249}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 763, "completion_tokens": 413, "duration": 11.834280490875244}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 725, "completion_tokens": 315, "duration": 12.156722784042358}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "prompt_tokens": 818, "completion_tokens": 448, "duration": 15.553045272827148}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats", "prompt_tokens": 948, "completion_tokens": 377, "duration": 18.6798677444458}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 796, "completion_tokens": 379, "duration": 14.829752683639526}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 839, "completion_tokens": 434, "duration": 19.7738299369812}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i+1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 1105, "completion_tokens": 585, "duration": 17.925829887390137}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "prompt_tokens": 877, "completion_tokens": 389, "duration": 12.616766929626465}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 789, "completion_tokens": 340, "duration": 12.98743462562561}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 746, "completion_tokens": 373, "duration": 12.2724609375}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 756, "completion_tokens": 390, "duration": 13.782412052154541}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "prompt_tokens": 899, "completion_tokens": 409, "duration": 13.837462663650513}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result", "prompt_tokens": 852, "completion_tokens": 446, "duration": 15.74533200263977}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 710, "completion_tokens": 344, "duration": 10.521220207214355}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)", "prompt_tokens": 736, "completion_tokens": 354, "duration": 11.943905353546143}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 775, "completion_tokens": 335, "duration": 10.73474645614624}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 822, "completion_tokens": 316, "duration": 10.341914653778076}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 959, "completion_tokens": 512, "duration": 15.101159572601318}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    def derivative(xs):\n        return [coeff * i for i, coeff in enumerate(xs)][1:]\n\n    def newton_method(xs, x0, tol=1e-10, max_iter=1000):\n        x = x0\n        for _ in range(max_iter):\n            fx = poly(xs, x)\n            if abs(fx) < tol:\n                return x\n            f_prime_x = poly(derivative(xs), x)\n            if f_prime_x == 0:\n                break\n            x = x - fx / f_prime_x\n        return x\n\n    # Use Newton's method with an initial guess of 0\n    return newton_method(xs, 0)", "prompt_tokens": 1141, "completion_tokens": 620, "duration": 31.697898626327515}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    \n    # Create a new list to hold the result\n    result = []\n    # Counter for elements in divisible_by_three_sorted\n    sort_counter = 0\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            # Replace element at index divisible by 3 with the sorted element\n            result.append(divisible_by_three_sorted[sort_counter])\n            sort_counter += 1\n        else:\n            # Copy the element from the original list\n            result.append(l[i])\n    \n    return result", "prompt_tokens": 923, "completion_tokens": 560, "duration": 21.812535285949707}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(list(set(l)))", "prompt_tokens": 724, "completion_tokens": 300, "duration": 11.266288995742798}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 733, "completion_tokens": 280, "duration": 9.974583148956299}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 794, "completion_tokens": 421, "duration": 14.606154203414917}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indexed_elements = l[::2]\n    even_indexed_elements.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements[i//2]\n    return l", "prompt_tokens": 983, "completion_tokens": 495, "duration": 12.352839469909668}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 937, "completion_tokens": 453, "duration": 14.829872608184814}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    fib = [0, 1]\n    while len(fib) < n + 1:\n        fib.append(fib[-1] + fib[-2])\n    return fib[n]\n\ndef prime_fib(n: int):\n    count = 0\n    fib_index = 1\n    while True:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n        fib_index += 1", "prompt_tokens": 916, "completion_tokens": 583, "duration": 21.0415141582489}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, n-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 1219, "completion_tokens": 717, "duration": 21.159826278686523}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Since all cars move at the same speed and there are equal numbers of cars moving in opposite directions,\n    each car moving left to right will collide with each car moving right to left exactly once. Therefore,\n    the total number of collisions is simply the product of the number of cars in each direction.\n    \"\"\"\n    return n * n", "prompt_tokens": 1076, "completion_tokens": 555, "duration": 16.930917739868164}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 773, "completion_tokens": 278, "duration": 10.550721645355225}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1120, "completion_tokens": 543, "duration": 14.140119791030884}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "prompt_tokens": 762, "completion_tokens": 334, "duration": 11.59720492362976}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "prompt_tokens": 744, "completion_tokens": 402, "duration": 9.919209003448486}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n    \n    for i in range(4, n + 1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    \n    return dp[n]", "prompt_tokens": 1099, "completion_tokens": 604, "duration": 33.020819902420044}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 786, "completion_tokens": 392, "duration": 11.281928539276123}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 738, "completion_tokens": 314, "duration": 21.580334186553955}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "prompt_tokens": 865, "completion_tokens": 394, "duration": 11.444321393966675}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 770, "completion_tokens": 350, "duration": 15.575624704360962}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 873, "completion_tokens": 360, "duration": 9.881488800048828}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 782, "completion_tokens": 357, "duration": 13.577829599380493}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 643, "completion_tokens": 255, "duration": 7.296574592590332}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 916, "completion_tokens": 362, "duration": 12.734829187393188}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 796, "completion_tokens": 427, "duration": 10.971691608428955}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 928, "completion_tokens": 501, "duration": 15.17192792892456}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 806, "completion_tokens": 388, "duration": 16.06716537475586}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list) -> list:\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 838, "completion_tokens": 337, "duration": 9.660685777664185}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int):\n    largest_factor = None\n    while n % 2 == 0:\n        largest_factor = 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n = n // i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "prompt_tokens": 921, "completion_tokens": 596, "duration": 15.603182315826416}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2", "prompt_tokens": 865, "completion_tokens": 418, "duration": 11.375905513763428}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 998, "completion_tokens": 577, "duration": 16.73672842979431}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 910, "completion_tokens": 417, "duration": 12.130340099334717}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int, memo={}):\n    \"\"\"Compute the n-th element of the FibFib sequence.\"\"\"\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 997, "completion_tokens": 505, "duration": 12.796849966049194}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = sum(1 for char in s if char in vowels)\n    if s and (s[-1] == 'y' or s[-1] == 'Y'):\n        count += 1\n    return count", "prompt_tokens": 863, "completion_tokens": 372, "duration": 10.99716830253601}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        shift = shift % len(x_str)\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 830, "completion_tokens": 419, "duration": 14.682885646820068}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 811, "completion_tokens": 306, "duration": 7.90186619758606}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(numbers)", "prompt_tokens": 1061, "completion_tokens": 371, "duration": 8.55066728591919}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if index == -1:\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 1417, "completion_tokens": 568, "duration": 16.112998723983765}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    max_val = -1\n    for key, value in frequency.items():\n        if key <= value and key > max_val:\n            max_val = key\n    return max_val", "prompt_tokens": 921, "completion_tokens": 367, "duration": 8.522252082824707}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 929, "completion_tokens": 427, "duration": 11.854894161224365}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 913, "completion_tokens": 564, "duration": 17.904486894607544}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1167, "completion_tokens": 430, "duration": 14.066413640975952}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 1359, "completion_tokens": 953, "duration": 25.82943034172058}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list with fewer total characters. \n    If both lists have the same total number of characters, returns the first list.\n    '''\n    count1 = sum(len(s) for s in lst1)\n    count2 = sum(len(s) for s in lst2)\n    return lst1 if count1 <= count2 else lst2", "prompt_tokens": 1027, "completion_tokens": 429, "duration": 13.65493392944336}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a = a // i\n    \n    return len(prime_factors) == 3", "prompt_tokens": 902, "completion_tokens": 558, "duration": 16.45868968963623}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 920, "completion_tokens": 380, "duration": 9.338552236557007}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cbrt_a = a ** (1/3)\n    return round(cbrt_a) ** 3 == a", "prompt_tokens": 821, "completion_tokens": 335, "duration": 7.8778791427612305}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = '2357BD'\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 1289, "completion_tokens": 435, "duration": 11.67007827758789}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 994, "completion_tokens": 463, "duration": 10.873355388641357}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 969, "completion_tokens": 479, "duration": 11.694830894470215}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1322, "completion_tokens": 742, "duration": 24.343058347702026}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 1082, "completion_tokens": 685, "duration": 12.129400730133057}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 845, "completion_tokens": 516, "duration": 16.563872814178467}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\"\"\"\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 920, "completion_tokens": 423, "duration": 10.704004764556885}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 918, "completion_tokens": 543, "duration": 13.51510238647461}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split(' '))", "prompt_tokens": 967, "completion_tokens": 548, "duration": 18.882774353027344}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1137, "completion_tokens": 382, "duration": 11.148218631744385}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # Check if the array is empty\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1042, "completion_tokens": 591, "duration": 21.78257727622986}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2*2) % 26 + 97) for c in s)", "prompt_tokens": 826, "completion_tokens": 339, "duration": 10.022476196289062}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) >= 2:\n        return unique_lst[1]\n    return None", "prompt_tokens": 881, "completion_tokens": 367, "duration": 11.183568000793457}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    sentences = [sentence.strip() for sentence in re.split('[.?!]', S) if sentence]\n    return sum(sentence.startswith('I') for sentence in sentences)", "prompt_tokens": 797, "completion_tokens": 374, "duration": 11.910703897476196}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 903, "completion_tokens": 383, "duration": 10.586987018585205}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    \n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            return chr(((ord(char.lower()) - 97 + 2) % 26) + 97).upper() if char.isupper() else chr(((ord(char) - 97 + 2) % 26) + 97)\n        else:\n            return char\n    \n    return ''.join(replace_vowel(swap_case(char)) for char in message)", "prompt_tokens": 834, "completion_tokens": 444, "duration": 16.5421245098114}
{"task_id": "HumanEval/94", "generated_code": "def largest_prime_digit_sum(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(map(int, str(max_prime)))", "prompt_tokens": 1547, "completion_tokens": 823, "duration": 23.58229684829712}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return all_lower or all_upper", "prompt_tokens": 922, "completion_tokens": 348, "duration": 11.788156509399414}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 1058, "completion_tokens": 586, "duration": 19.37824559211731}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 803, "completion_tokens": 331, "duration": 9.852753639221191}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in vowels)", "prompt_tokens": 769, "completion_tokens": 424, "duration": 11.768859148025513}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 951, "completion_tokens": 379, "duration": 11.716850996017456}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones", "prompt_tokens": 893, "completion_tokens": 492, "duration": 16.543017387390137}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    \"\"\"\n    Split the string into words separated by commas or spaces and return an array of the words.\n    \"\"\"\n    import re\n    return re.findall(r'\\b\\w+\\b', s)", "prompt_tokens": 816, "completion_tokens": 329, "duration": 10.550264596939087}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 878, "completion_tokens": 429, "duration": 11.049132823944092}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "prompt_tokens": 912, "completion_tokens": 370, "duration": 10.541544914245605}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    return sorted([num for num in x if has_no_even_digit(num)])", "prompt_tokens": 827, "completion_tokens": 371, "duration": 10.910691499710083}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    return [digit_names[num] for num in filtered_arr]", "prompt_tokens": 1206, "completion_tokens": 458, "duration": 12.851430654525757}
{"task_id": "HumanEval/106", "generated_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef sum_up_to_n(n):\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to_n(i))\n    return result", "prompt_tokens": 888, "completion_tokens": 454, "duration": 12.4669828414917}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 1075, "completion_tokens": 448, "duration": 11.812632083892822}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n))) - 2*int(str(n)[0]) if str(n)[0] == '-' else sum(int(digit) for digit in str(n))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 1030, "completion_tokens": 571, "duration": 14.82501769065857}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = arr[-1:] + arr[:-1]\n    return False", "prompt_tokens": 1199, "completion_tokens": 357, "duration": 11.694527626037598}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    \"\"\"\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 964, "completion_tokens": 455, "duration": 14.599178075790405}
{"task_id": "HumanEval/111", "generated_code": "from collections import Counter\n\ndef histogram(test):\n    counts = Counter(test.replace(\" \", \"\"))\n    max_count = max(counts.values(), default=0)\n    return {char: count for char, count in counts.items() if count == max_count}", "prompt_tokens": 970, "completion_tokens": 418, "duration": 12.388935089111328}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])", "prompt_tokens": 1361, "completion_tokens": 771, "duration": 18.927656173706055}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 964, "completion_tokens": 393, "duration": 11.53260087966919}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 952, "completion_tokens": 531, "duration": 12.85879111289978}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 1535, "completion_tokens": 617, "duration": 14.407333135604858}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers based on the number of ones in their binary representation.\n    For similar number of ones, sorts based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 952, "completion_tokens": 372, "duration": 10.633092641830444}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.lower() not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 993, "completion_tokens": 401, "duration": 13.528841972351074}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"", "prompt_tokens": 942, "completion_tokens": 413, "duration": 15.047515869140625}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                close_count += 1\n            if close_count > open_count:\n                return 'No'\n    return 'Yes' if open_count == close_count else 'No'", "prompt_tokens": 1173, "completion_tokens": 775, "duration": 22.76322340965271}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1069, "completion_tokens": 352, "duration": 9.198322772979736}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 1048, "completion_tokens": 587, "duration": 12.708047151565552}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(num for num in arr[:k] if 1 <= num <= 99)", "prompt_tokens": 1070, "completion_tokens": 579, "duration": 16.048571348190308}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last odd number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 1229, "completion_tokens": 589, "duration": 19.73263907432556}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    # Check if the date format is correct\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    \n    # Check if month, day, and year are digits\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    \n    month, day, year = int(month), int(day), int(year)\n    \n    # Check the range of month and day\n    if month < 1 or month > 12 or day < 1:\n        return False\n    \n    # Check the number of days in each month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True", "prompt_tokens": 1158, "completion_tokens": 591, "duration": 15.409893274307251}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)", "prompt_tokens": 891, "completion_tokens": 366, "duration": 11.909419775009155}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1] or lst.count(lst[i]) > 1:\n            return False\n    return True", "prompt_tokens": 1194, "completion_tokens": 491, "duration": 16.089354515075684}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    import math\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start):\n            return \"YES\"\n    return \"NO\"", "prompt_tokens": 1262, "completion_tokens": 568, "duration": 14.076197862625122}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        product_of_signs *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * product_of_signs", "prompt_tokens": 1047, "completion_tokens": 590, "duration": 13.900081634521484}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    dp = [[float('inf')] * (k + 1) for _ in range(N * N)]\n    pos = {grid[i][j]: (i, j) for i in range(N) for j in range(N)}\n    \n    for i in range(1, N * N + 1):\n        dp[i - 1][1] = i\n    \n    for step in range(2, k + 1):\n        for val in range(1, N * N + 1):\n            x, y = pos[val]\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N:\n                    prev_val = grid[nx][ny]\n                    dp[val - 1][step] = min(dp[val - 1][step], dp[prev_val - 1][step - 1] * (N * N + 1) + val)\n    \n    min_path_val = min(dp[i][k] for i in range(N * N))\n    path = []\n    for _ in range(k):\n        path.append(min_path_val % (N * N + 1))\n        min_path_val //= (N * N + 1)\n    \n    return path[::-1]", "prompt_tokens": 2001, "completion_tokens": 1218, "duration": 34.71250128746033}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    memo = {1: 3, 2: 2}\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n % 2 == 0:\n            memo[n] = 1 + n // 2\n        else:\n            memo[n] = helper(n - 1) + helper(n - 2) + helper(n + 1)\n        return memo[n]\n    for i in range(1, n + 2):\n        helper(i)\n    return [memo[i] for i in range(1, n + 2)]", "prompt_tokens": 1133, "completion_tokens": 488, "duration": 13.340752601623535}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 773, "completion_tokens": 398, "duration": 15.006054162979126}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            top = stack.pop()\n            if not stack:\n                return True\n            stack.pop()\n    return False", "prompt_tokens": 1047, "completion_tokens": 538, "duration": 15.345388412475586}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    import math\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 1108, "completion_tokens": 517, "duration": 15.255875587463379}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    if len(txt) == 1 or txt[-2] == ' ':\n        return True\n    return False", "prompt_tokens": 871, "completion_tokens": 348, "duration": 9.93793249130249}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "prompt_tokens": 977, "completion_tokens": 515, "duration": 16.277135133743286}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 890, "completion_tokens": 399, "duration": 16.846132040023804}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            return float(x)\n        return x\n    \n    a_val = convert_to_float(a)\n    b_val = convert_to_float(b)\n    \n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None", "prompt_tokens": 1069, "completion_tokens": 574, "duration": 14.310602188110352}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:  # The smallest sum of 4 positive even numbers is 2+2+2+2=8\n        return False\n    return n % 2 == 0  # Any even number greater than or equal to 8 can be expressed as the sum of 4 even numbers", "prompt_tokens": 896, "completion_tokens": 516, "duration": 14.281515836715698}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial of a number.\"\"\"\n    if n == 1:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)\n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "prompt_tokens": 862, "completion_tokens": 452, "duration": 15.06934404373169}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    import re\n    text = re.sub(r' {2,}', '-', text)  # Replace 2 or more spaces with -\n    text = re.sub(r' ', '_', text)  # Replace single space with _\n    return text", "prompt_tokens": 815, "completion_tokens": 399, "duration": 18.94958782196045}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1057, "completion_tokens": 421, "duration": 11.987890481948853}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum", "prompt_tokens": 1082, "completion_tokens": 519, "duration": 15.62281346321106}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_length_words = [word for word in sentence.split() if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 1040, "completion_tokens": 533, "duration": 16.440360069274902}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    new_num = num1 * num2\n    new_denom = denom1 * denom2\n    \n    return new_denom == new_num", "prompt_tokens": 1047, "completion_tokens": 501, "duration": 10.481457710266113}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))", "prompt_tokens": 857, "completion_tokens": 357, "duration": 7.6557722091674805}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_first_last_digit(num):\n        num_str = str(abs(num))\n        return num_str[0] in '13579' and num_str[-1] in '13579'\n    \n    return sum(1 for num in nums if num > 10 and is_odd_first_last_digit(num))", "prompt_tokens": 826, "completion_tokens": 355, "duration": 7.918994903564453}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Create the array based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count of triples\n    count = 0\n    \n    # Iterate through all possible triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is divisible by 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count", "prompt_tokens": 1169, "completion_tokens": 777, "duration": 49.23412346839905}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])", "prompt_tokens": 1045, "completion_tokens": 437, "duration": 12.171064376831055}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list", "prompt_tokens": 1058, "completion_tokens": 457, "duration": 11.433750629425049}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 883, "completion_tokens": 484, "duration": 18.54719614982605}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x > 0)", "prompt_tokens": 894, "completion_tokens": 349, "duration": 9.908244609832764}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]", "prompt_tokens": 1089, "completion_tokens": 359, "duration": 10.082784652709961}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        return sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    \n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\"", "prompt_tokens": 1251, "completion_tokens": 462, "duration": 13.898334264755249}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    return b in (a + a)", "prompt_tokens": 1030, "completion_tokens": 519, "duration": 13.949844360351562}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num = abs(num)  # Make sure the number is positive\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)", "prompt_tokens": 765, "completion_tokens": 426, "duration": 13.213621616363525}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "prompt_tokens": 1028, "completion_tokens": 726, "duration": 28.86950373649597}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 957, "completion_tokens": 481, "duration": 12.949522972106934}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < result):\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 944, "completion_tokens": 468, "duration": 14.62570071220398}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    \"\"\"\n    Calculate the total number of eaten carrots and the remaining carrots after eating.\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "prompt_tokens": 1083, "completion_tokens": 285, "duration": 8.723084449768066}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n    \"\"\"\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 1072, "completion_tokens": 609, "duration": 20.463635444641113}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)", "prompt_tokens": 869, "completion_tokens": 408, "duration": 11.378406286239624}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash", "prompt_tokens": 808, "completion_tokens": 456, "duration": 12.196794033050537}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(min(a, b), max(a, b) + 1) if num % 2 == 0]", "prompt_tokens": 824, "completion_tokens": 354, "duration": 10.733821153640747}
