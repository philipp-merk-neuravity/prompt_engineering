{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 989, "completion_tokens": 489, "duration": 10.643630504608154, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 957, "completion_tokens": 524, "duration": 13.3411283493042, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 729, "completion_tokens": 275, "duration": 8.985285520553589, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 976, "completion_tokens": 475, "duration": 12.97597074508667, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 984, "completion_tokens": 494, "duration": 11.339627981185913, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 850, "completion_tokens": 402, "duration": 13.771612882614136, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            depths.append(current_depth)\n        elif char == ')':\n            depths.append(current_depth)\n            current_depth -= 1\n    return [max(depths[i:i+2]) for i in range(0, len(depths), 2)]", "prompt_tokens": 1009, "completion_tokens": 580, "duration": 20.148070335388184, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 789, "completion_tokens": 324, "duration": 8.262996912002563, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1 if 0 in numbers else eval('*'.join(map(str, numbers)))", "prompt_tokens": 773, "completion_tokens": 311, "duration": 7.801708936691284, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\nfrom collections import deque\n\ndef sliding_window_min(nums: List[int], k: int) -> List[int]:\n    if not nums:\n        return []\n    if k == 1:\n        return nums\n    \n    def clean_deque(i):\n        if deq and deq[0] == i - k:\n            deq.popleft()\n        while deq and nums[i] < nums[deq[-1]]:\n            deq.pop()\n    \n    deq = deque()\n    result = []\n    for i, num in enumerate(nums):\n        clean_deque(i)\n        deq.append(i)\n        if i >= k - 1:\n            result.append(nums[deq[0]])\n    return result", "prompt_tokens": 1333, "completion_tokens": 982, "duration": 21.22752547264099, "result": "failed: name 'rolling_max' is not defined", "passed": false}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 917, "completion_tokens": 351, "duration": 8.90116286277771, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 840, "completion_tokens": 426, "duration": 12.080811500549316, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)", "prompt_tokens": 812, "completion_tokens": 328, "duration": 8.065573453903198, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 821, "completion_tokens": 415, "duration": 9.447391748428345, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 810, "completion_tokens": 419, "duration": 11.633206844329834, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 778, "completion_tokens": 368, "duration": 9.035655975341797, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 736, "completion_tokens": 314, "duration": 7.7759740352630615, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 953, "completion_tokens": 357, "duration": 8.702027082443237, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 856, "completion_tokens": 440, "duration": 10.39275860786438, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 840, "completion_tokens": 434, "duration": 10.040448427200317, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 934, "completion_tokens": 377, "duration": 8.56130075454712, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [((x - min_val) / (max_val - min_val)) for x in numbers]", "prompt_tokens": 973, "completion_tokens": 469, "duration": 11.016731262207031, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values):\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 847, "completion_tokens": 384, "duration": 9.132070064544678, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 734, "completion_tokens": 361, "duration": 10.729250431060791, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 755, "completion_tokens": 395, "duration": 14.496598243713379, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 944, "completion_tokens": 461, "duration": 13.363150119781494, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 870, "completion_tokens": 442, "duration": 12.841086626052856, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 707, "completion_tokens": 337, "duration": 9.091126680374146, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 727, "completion_tokens": 322, "duration": 12.010756015777588, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 756, "completion_tokens": 311, "duration": 12.405932188034058, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 797, "completion_tokens": 291, "duration": 8.00901484489441, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 958, "completion_tokens": 511, "duration": 11.742121458053589, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "def find_all_zeros(xs):\n    roots = []\n    # Implement root-finding algorithm to find all roots\n    return roots", "prompt_tokens": 1188, "completion_tokens": 395, "duration": 9.394019365310669, "result": "failed: name 'find_zero' is not defined", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    return [sorted(l[i] for i in range(len(l)) if i % 3 == 0) if i % 3 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 1040, "completion_tokens": 488, "duration": 15.856414318084717, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 724, "completion_tokens": 286, "duration": 11.702666759490967, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 711, "completion_tokens": 258, "duration": 11.59186840057373, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 854, "completion_tokens": 436, "duration": 17.38982343673706, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indices.pop(0)\n    return result", "prompt_tokens": 989, "completion_tokens": 508, "duration": 13.326232671737671, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 927, "completion_tokens": 468, "duration": 11.91166615486145, "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        fib = [0, 1]\n        for i in range(2, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2])\n        return fib[n]\n\n    def sum_prime_fib(limit):\n        sum_primes = 0\n        a, b = 0, 1\n        while b <= limit:\n            if is_prime(b):\n                sum_primes += b\n            a, b = b, a + b\n        return sum_primes\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        while not is_prime(fibonacci(num)):\n            num += 1\n        count += 1\n    return fibonacci(num)", "prompt_tokens": 909, "completion_tokens": 638, "duration": 12.8480703830719, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1214, "completion_tokens": 692, "duration": 19.67566180229187, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "prompt_tokens": 917, "completion_tokens": 336, "duration": 11.391857862472534, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 793, "completion_tokens": 295, "duration": 9.155404567718506, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1111, "completion_tokens": 534, "duration": 16.29917073249817, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 749, "completion_tokens": 300, "duration": 9.199267148971558, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 729, "completion_tokens": 354, "duration": 31.383270025253296, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 2:\n        return n // 2\n    dp = [0] * (n + 1)\n    dp[1], dp[2] = 0, 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n\n# Test cases\nprint(fib4(5))  # Output should be 4\nprint(fib4(6))  # Output should be 8\nprint(fib4(7))  # Output should be 14", "prompt_tokens": 1093, "completion_tokens": 599, "duration": 13.860098600387573, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 787, "completion_tokens": 393, "duration": 14.128983497619629, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 809, "completion_tokens": 382, "duration": 12.70276927947998, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 1047, "completion_tokens": 557, "duration": 18.640700817108154, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 836, "completion_tokens": 433, "duration": 19.88097333908081, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 874, "completion_tokens": 361, "duration": 12.245177745819092, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 796, "completion_tokens": 368, "duration": 13.363399028778076, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y", "prompt_tokens": 651, "completion_tokens": 256, "duration": 10.130747556686401, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 968, "completion_tokens": 411, "duration": 13.4147310256958, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 793, "completion_tokens": 419, "duration": 9.599779605865479, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    mapping = {'>': '<'}\n    for char in brackets:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack", "prompt_tokens": 913, "completion_tokens": 496, "duration": 23.735671758651733, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 809, "completion_tokens": 388, "duration": 11.3267982006073, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 841, "completion_tokens": 333, "duration": 10.685585975646973, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 932, "completion_tokens": 549, "duration": 16.24510145187378, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 838, "completion_tokens": 367, "duration": 9.9142427444458, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 971, "completion_tokens": 551, "duration": 12.215317487716675, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))] if len(xs) > 1 else [0]", "prompt_tokens": 874, "completion_tokens": 386, "duration": 56.611441135406494, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 974, "completion_tokens": 438, "duration": 11.914036750793457, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    return sum(1 for char in s if char.lower() in 'aeiouy' or (char.lower() == 'y' and s.index(char) == len(s) - 1))", "prompt_tokens": 844, "completion_tokens": 337, "duration": 8.707589626312256, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 857, "completion_tokens": 426, "duration": 9.713032007217407, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 815, "completion_tokens": 310, "duration": 9.640681982040405, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1037, "completion_tokens": 349, "duration": 8.422786951065063, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    return [smallest_even, smallest_even_index]", "prompt_tokens": 1273, "completion_tokens": 433, "duration": 15.983891487121582, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, f in freq.items():\n        if num > 0 and f >= num:\n            result = max(result, num)\n    return result", "prompt_tokens": 931, "completion_tokens": 368, "duration": 10.692526578903198, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 831, "completion_tokens": 322, "duration": 7.957644939422607, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 979, "completion_tokens": 524, "duration": 11.570317506790161, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1175, "completion_tokens": 438, "duration": 11.603857517242432, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1342, "completion_tokens": 848, "duration": 21.12797784805298, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 997, "completion_tokens": 377, "duration": 8.546139478683472, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3", "prompt_tokens": 965, "completion_tokens": 674, "duration": 15.138406991958618, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(math.log(x, n)))", "prompt_tokens": 916, "completion_tokens": 353, "duration": 14.497020959854126, "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a**(1/3))**3 == a)", "prompt_tokens": 870, "completion_tokens": 376, "duration": 10.489331722259521, "result": "failed: Third test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 1280, "completion_tokens": 437, "duration": 14.012456893920898, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 997, "completion_tokens": 466, "duration": 13.183080911636353, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 955, "completion_tokens": 484, "duration": 13.933107137680054, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1158, "completion_tokens": 559, "duration": 13.481327772140503, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 911, "completion_tokens": 513, "duration": 16.183262586593628, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 817, "completion_tokens": 488, "duration": 11.837737083435059, "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 936, "completion_tokens": 390, "duration": 13.290141582489014, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 724, "completion_tokens": 347, "duration": 14.801262140274048, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "prompt_tokens": 969, "completion_tokens": 430, "duration": 18.905035972595215, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates)", "prompt_tokens": 1138, "completion_tokens": 380, "duration": 11.720065116882324, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "prompt_tokens": 1037, "completion_tokens": 377, "duration": 12.18366003036499, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr(ord(c) + 2 * 2) for c in s)", "prompt_tokens": 846, "completion_tokens": 349, "duration": 15.240096807479858, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(lst)\n    if len(sorted_lst) < 2 or sorted_lst[0] == sorted_lst[1]:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 898, "completion_tokens": 394, "duration": 12.156290531158447, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('. ')  # Split by period and space\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 874, "completion_tokens": 409, "duration": 14.36183762550354, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 884, "completion_tokens": 342, "duration": 12.729958295822144, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 923, "completion_tokens": 472, "duration": 10.799651145935059, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "import math\n\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)", "prompt_tokens": 1343, "completion_tokens": 591, "duration": 19.80013346672058, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower_keys = all(key.islower() for key in dict if isinstance(key, str))\n    upper_keys = all(key.isupper() for key in dict if isinstance(key, str))\n    return lower_keys or upper_keys", "prompt_tokens": 922, "completion_tokens": 344, "duration": 15.592636346817017, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "prompt_tokens": 1013, "completion_tokens": 510, "duration": 20.266180276870728, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 803, "completion_tokens": 327, "duration": 9.551588296890259, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = set('AEIOU')\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count", "prompt_tokens": 836, "completion_tokens": 449, "duration": 16.91014862060547, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1", "prompt_tokens": 950, "completion_tokens": 393, "duration": 15.587828397750854, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    stones = n\n    for i in range(n):\n        pile.append(stones)\n        stones += 2 if stones % 2 == 1 else 1\n    return pile", "prompt_tokens": 891, "completion_tokens": 376, "duration": 15.0780668258667, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 815, "completion_tokens": 299, "duration": 13.838181734085083, "result": "failed: name 're' is not defined", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 815, "completion_tokens": 377, "duration": 13.674150705337524, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    return bin(round(avg))", "prompt_tokens": 976, "completion_tokens": 439, "duration": 18.843306064605713, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 831, "completion_tokens": 359, "duration": 8.885880470275879, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[x] for x in reversed_arr]\n    return result", "prompt_tokens": 1159, "completion_tokens": 398, "duration": 9.589532375335693, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 908, "completion_tokens": 437, "duration": 18.123021841049194, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)", "prompt_tokens": 1168, "completion_tokens": 540, "duration": 14.684242963790894, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "prompt_tokens": 985, "completion_tokens": 480, "duration": 15.765564680099487, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    return any(arr == sorted_arr[-i:] + sorted_arr[:-i] for i in range(len(arr)))\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "prompt_tokens": 1250, "completion_tokens": 446, "duration": 13.078219890594482, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 != 0 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 957, "completion_tokens": 299, "duration": 10.15999460220337, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    hist = {}\n    for char in test.split():\n        hist[char] = hist.get(char, 0) + 1\n    max_count = max(hist.values(), default=0)\n    return {char: count for char, count in hist.items() if count == max_count}", "prompt_tokens": 1013, "completion_tokens": 473, "duration": 12.714956045150757, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1036, "completion_tokens": 444, "duration": 56.75335097312927, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{s.index(s)}ng {s.index(s)+1} of the {s.index(s)+1}nput.\" for s in lst]", "prompt_tokens": 964, "completion_tokens": 381, "duration": 7.784963607788086, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 992, "completion_tokens": 571, "duration": 15.18198037147522, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    if not grid:\n        return 0\n    \n    m, n = len(grid), len(grid[0])\n    operations = 0\n    \n    for j in range(n):\n        water_needed = 0\n        for i in range(m):\n            water_needed += grid[i][j]\n        \n        while water_needed > 0:\n            water_needed -= capacity\n            operations += 1\n    \n    return operations", "prompt_tokens": 1629, "completion_tokens": 773, "duration": 64.86523008346558, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 979, "completion_tokens": 362, "duration": 12.635354042053223, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 1003, "completion_tokens": 418, "duration": 12.138577222824097, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 932, "completion_tokens": 427, "duration": 11.406412124633789, "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s = ''.join(lst)\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 976, "completion_tokens": 398, "duration": 9.962462902069092, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1115, "completion_tokens": 398, "duration": 9.042818546295166, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 967, "completion_tokens": 506, "duration": 13.301832675933838, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 917, "completion_tokens": 387, "duration": 11.697346448898315, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz(num):\n        if num == 1:\n            return [1]\n        elif num % 2 == 0:\n            return [num] + collatz(num // 2)\n        else:\n            return [num] + collatz(3 * num + 1)\n    \n    collatz_seq = collatz(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])", "prompt_tokens": 1240, "completion_tokens": 574, "duration": 14.150069236755371, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1169, "completion_tokens": 569, "duration": 13.749550104141235, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 893, "completion_tokens": 368, "duration": 9.825686931610107, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "prompt_tokens": 1197, "completion_tokens": 434, "duration": 10.066436290740967, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"", "prompt_tokens": 1260, "completion_tokens": 530, "duration": 11.856262445449829, "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            sum_magnitudes += num\n        elif num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n    return product * sum_magnitudes", "prompt_tokens": 871, "completion_tokens": 408, "duration": 10.06496286392212, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(r, c, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dr, dc in directions:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n:\n                new_path = dfs(nr, nc, path + [grid[nr][nc]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        \n        return min_path\n    \n    return dfs(0, 0, [grid[0][0]])", "prompt_tokens": 1920, "completion_tokens": 999, "duration": 25.91216731071472, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        trib = [0, 1, 1]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i-1] + trib[i-2] + trib[i-3])\n        return trib", "prompt_tokens": 1136, "completion_tokens": 484, "duration": 11.113485336303711, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10\n    return product if has_odd_digit else 0", "prompt_tokens": 771, "completion_tokens": 399, "duration": 11.622425317764282, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2", "prompt_tokens": 917, "completion_tokens": 402, "duration": 8.795374393463135, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total", "prompt_tokens": 960, "completion_tokens": 381, "duration": 12.96390414237976, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha() and not last_char.isspace()", "prompt_tokens": 876, "completion_tokens": 344, "duration": 10.719257831573486, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 849, "completion_tokens": 391, "duration": 12.939344882965088, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_int = None\n    pos_int = None\n    for num in lst:\n        if num < 0 and (neg_int is None or num > neg_int):\n            neg_int = num\n        elif num > 0 and (pos_int is None or num < pos_int):\n            pos_int = num\n    return (neg_int, pos_int)", "prompt_tokens": 879, "completion_tokens": 385, "duration": 15.874270915985107, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return a if isinstance(a, (int, float)) else b", "prompt_tokens": 970, "completion_tokens": 448, "duration": 10.137616157531738, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                if i + j + k + k == n:\n                    return True\n    return False", "prompt_tokens": 889, "completion_tokens": 514, "duration": 11.680594444274902, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 896, "completion_tokens": 445, "duration": 18.61078929901123, "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result[:-2] + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            elif consecutive_spaces > 0:\n                result += '_'\n            result += char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result[:-2] + '-'\n    elif consecutive_spaces > 0:\n        result += '_'\n    return result", "prompt_tokens": 788, "completion_tokens": 405, "duration": 15.398704051971436, "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    if digits_count > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name_parts = file_name.split('.')\n    if not name_parts[0] or not name_parts[0][0].isalpha():\n        return 'No'\n    \n    valid_extensions = ['txt', 'exe', 'dll']\n    if name_parts[1] not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 1058, "completion_tokens": 452, "duration": 11.747482776641846, "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 1074, "completion_tokens": 497, "duration": 17.15322709083557, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_primes(n):\n        primes = []\n        for i in range(2, n+1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n\n    prime_lengths = get_primes(100)\n    words = sentence.split()\n    result = [word for word in words if len(word) in prime_lengths]\n    return ' '.join(result)", "prompt_tokens": 943, "completion_tokens": 485, "duration": 12.868694305419922, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "from math import gcd\n\ndef simplify(x, n):\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n\n    result_num = num1 * num2\n    result_denom = denom1 * denom2\n\n    return result_num % result_denom == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False", "prompt_tokens": 1153, "completion_tokens": 669, "duration": 14.42102336883545, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))", "prompt_tokens": 832, "completion_tokens": 328, "duration": 11.345720291137695, "result": "failed: invalid literal for int() with base 10: '-'", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 815, "completion_tokens": 339, "duration": 14.12954592704773, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1208, "completion_tokens": 672, "duration": 16.96114444732666, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))", "prompt_tokens": 1031, "completion_tokens": 468, "duration": 9.392906427383423, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 1081, "completion_tokens": 442, "duration": 15.75071120262146, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 887, "completion_tokens": 472, "duration": 15.732773065567017, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 879, "completion_tokens": 339, "duration": 9.392325639724731, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]", "prompt_tokens": 1086, "completion_tokens": 356, "duration": 15.290494918823242, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    return class_name + '.' + sorted(extensions, key=lambda x: x.count(x.upper()) - x.count(x.lower()))[0]", "prompt_tokens": 1208, "completion_tokens": 392, "duration": 12.55633544921875, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 876, "completion_tokens": 334, "duration": 11.106353282928467, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 718, "completion_tokens": 353, "duration": 12.657192468643188, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(roman_map.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 936, "completion_tokens": 563, "duration": 14.967551231384277, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 957, "completion_tokens": 484, "duration": 18.460315465927124, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 943, "completion_tokens": 490, "duration": 11.927796125411987, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    left_over = max(0, remaining - need)\n    return [total_eaten, left_over]", "prompt_tokens": 1129, "completion_tokens": 313, "duration": 15.043680906295776, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1089, "completion_tokens": 487, "duration": 14.367170333862305, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(char.swapcase() if char.isalpha() else char for char in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 853, "completion_tokens": 381, "duration": 13.100355863571167, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 776, "completion_tokens": 352, "duration": 9.419256448745728, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [int(digit) for digit in range(a, b+1) if int(digit) % 2 == 0]", "prompt_tokens": 824, "completion_tokens": 352, "duration": 13.840293407440186, "result": "failed: Test 1", "passed": false}
