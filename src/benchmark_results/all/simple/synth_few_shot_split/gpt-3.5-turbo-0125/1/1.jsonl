{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers, threshold):\n    return any(abs(numbers[i] - numbers[j]) < threshold for i in range(len(numbers)) for j in range(i+1, len(numbers)))", "prompt_tokens": 1091, "completion_tokens": 368, "duration": 11.535176992416382}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 956, "completion_tokens": 519, "duration": 18.224467992782593}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 757, "completion_tokens": 303, "duration": 10.282550811767578}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 960, "completion_tokens": 470, "duration": 11.944467067718506}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 975, "completion_tokens": 485, "duration": 12.125054597854614}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers, delimiter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 826, "completion_tokens": 387, "duration": 13.917896509170532}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths", "prompt_tokens": 1013, "completion_tokens": 578, "duration": 60.140124559402466}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 773, "completion_tokens": 308, "duration": 9.114753484725952}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), 1 if not numbers else 1 if 0 in numbers else eval('*'.join(map(str, numbers))))", "prompt_tokens": 1536, "completion_tokens": 468, "duration": 15.638824224472046}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = []\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] <= num:\n            window.pop()\n        window.append(i)\n        if i - window[0] >= len(numbers):\n            window.pop(0)\n        result.append(numbers[window[0]])\n    return result", "prompt_tokens": 1264, "completion_tokens": 850, "duration": 17.23457622528076}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 957, "completion_tokens": 391, "duration": 14.397509574890137}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "prompt_tokens": 800, "completion_tokens": 386, "duration": 11.044270992279053}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    longest_str = None\n    for s in strings:\n        if longest_str is None or len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 871, "completion_tokens": 409, "duration": 10.350977182388306}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 835, "completion_tokens": 422, "duration": 10.324591875076294}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 770, "completion_tokens": 379, "duration": 11.417704582214355}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 748, "completion_tokens": 338, "duration": 11.367178916931152}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 785, "completion_tokens": 363, "duration": 11.123750925064087}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    return [legend[note] for note in music_string.split()]", "prompt_tokens": 974, "completion_tokens": 378, "duration": 11.265218257904053}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 809, "completion_tokens": 393, "duration": 11.180368185043335}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_dict[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 799, "completion_tokens": 393, "duration": 11.941319465637207}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers):\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 903, "completion_tokens": 346, "duration": 8.803338289260864}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 896, "completion_tokens": 391, "duration": 12.222086906433105}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [val for val in values if isinstance(val, int)]", "prompt_tokens": 801, "completion_tokens": 352, "duration": 11.940566539764404}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 745, "completion_tokens": 372, "duration": 10.29225778579712}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 754, "completion_tokens": 394, "duration": 10.046852827072144}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 943, "completion_tokens": 465, "duration": 13.963402271270752}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers):\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "prompt_tokens": 859, "completion_tokens": 431, "duration": 11.730537176132202}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 711, "completion_tokens": 345, "duration": 9.208540439605713}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings):\n    return ''.join(strings)", "prompt_tokens": 704, "completion_tokens": 299, "duration": 7.77838134765625}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 757, "completion_tokens": 303, "duration": 8.165038824081421}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 821, "completion_tokens": 309, "duration": 8.075889587402344}
{"task_id": "HumanEval/31", "generated_code": "def is_twin_prime(n):\n    return is_prime(n) and (is_prime(n + 2) or is_prime(n - 2))", "prompt_tokens": 864, "completion_tokens": 395, "duration": 9.604608297348022}
{"task_id": "HumanEval/32", "generated_code": "def find_all_zeros(xs):\n    # Implement a method to find all zeros of a polynomial\n    pass", "prompt_tokens": 1123, "completion_tokens": 326, "duration": 8.87392544746399}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = sorted([l[i] for i in sorted_indices])\n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    return result", "prompt_tokens": 991, "completion_tokens": 472, "duration": 11.29898476600647}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 715, "completion_tokens": 281, "duration": 7.665740489959717}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l):\n    return max(l)", "prompt_tokens": 711, "completion_tokens": 256, "duration": 6.135815620422363}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)", "prompt_tokens": 836, "completion_tokens": 418, "duration": 11.750662803649902}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result", "prompt_tokens": 978, "completion_tokens": 496, "duration": 12.703321933746338}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 916, "completion_tokens": 457, "duration": 10.430645942687988}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef sum_prime_fibonacci(limit):\n    total = 0\n    a, b = 0, 1\n    while a <= limit:\n        if is_prime(a):\n            total += a\n        a, b = b, a + b\n    return total\n\ndef prime_fib(n):\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num) and is_prime(fibonacci(num)):\n            count += 1\n    return fibonacci(num)", "prompt_tokens": 906, "completion_tokens": 630, "duration": 14.595847368240356}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 1214, "completion_tokens": 692, "duration": 14.32471752166748}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n * n", "prompt_tokens": 1047, "completion_tokens": 458, "duration": 8.916181087493896}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 773, "completion_tokens": 275, "duration": 10.649078369140625}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 1010, "completion_tokens": 428, "duration": 10.153477430343628}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    return '' if x == 0 else change_base(x // base, base) + str(x % base)", "prompt_tokens": 749, "completion_tokens": 300, "duration": 9.007295608520508}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 808, "completion_tokens": 433, "duration": 12.606971263885498}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    dp = [0] * (n + 1)\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 1089, "completion_tokens": 548, "duration": 16.915452241897583}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 788, "completion_tokens": 401, "duration": 15.722981929779053}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    return text == text[::-1]", "prompt_tokens": 814, "completion_tokens": 387, "duration": 12.60149073600769}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 830, "completion_tokens": 340, "duration": 11.858964920043945}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 830, "completion_tokens": 427, "duration": 10.444095373153687}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 875, "completion_tokens": 362, "duration": 9.069708585739136}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 799, "completion_tokens": 371, "duration": 11.908783912658691}
{"task_id": "HumanEval/53", "generated_code": "def subtract(x, y):\n    return x - y", "prompt_tokens": 632, "completion_tokens": 237, "duration": 8.053292274475098}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "prompt_tokens": 952, "completion_tokens": 393, "duration": 12.321052312850952}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 769, "completion_tokens": 395, "duration": 13.304550886154175}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 933, "completion_tokens": 507, "duration": 13.42873740196228}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 804, "completion_tokens": 383, "duration": 11.291936874389648}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 835, "completion_tokens": 327, "duration": 9.779976844787598}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 882, "completion_tokens": 499, "duration": 11.639665365219116}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    return n*(n+1)//2", "prompt_tokens": 868, "completion_tokens": 397, "duration": 12.053994417190552}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':  # Opening bracket\n            stack.append(char)\n        elif char == ')' and stack:  # Closing bracket\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 1034, "completion_tokens": 619, "duration": 13.169827222824097}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 879, "completion_tokens": 384, "duration": 12.323729276657104}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "prompt_tokens": 944, "completion_tokens": 411, "duration": 9.461390733718872}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if s[i].lower() == 'y' and i != len(s) - 1:\n                continue\n            count += 1\n    return count", "prompt_tokens": 855, "completion_tokens": 372, "duration": 11.734678030014038}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 765, "completion_tokens": 334, "duration": 14.911582946777344}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 846, "completion_tokens": 341, "duration": 9.059864044189453}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 1057, "completion_tokens": 369, "duration": 13.117490768432617}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    even_values = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]\n    if not even_values:\n        return []\n    min_even_value = min(even_values, key=lambda x: (x[0], x[1]))\n    return [min_even_value[0], min_even_value[1]]", "prompt_tokens": 1220, "completion_tokens": 373, "duration": 10.442707538604736}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    for num, f in freq.items():\n        if num > 0 and f >= num:\n            return num\n    return -1", "prompt_tokens": 1014, "completion_tokens": 442, "duration": 9.98871898651123}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 923, "completion_tokens": 414, "duration": 10.313105344772339}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 902, "completion_tokens": 445, "duration": 11.966377258300781}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 1191, "completion_tokens": 454, "duration": 14.707014083862305}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "prompt_tokens": 1380, "completion_tokens": 886, "duration": 23.862552642822266}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2", "prompt_tokens": 1011, "completion_tokens": 363, "duration": 12.240779638290405}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(num):\n            count += 1\n        if count == 3:\n            break\n        num += 1\n\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0 and is_prime(i):\n            a //= i\n            for j in range(i, int(math.sqrt(a)) + 1):\n                if a % j == 0 and is_prime(j):\n                    a //= j\n                    if is_prime(a):\n                        return True\n    return False", "prompt_tokens": 974, "completion_tokens": 702, "duration": 18.642335176467896}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    return x == n ** int(round(math.log(x, n)))", "prompt_tokens": 919, "completion_tokens": 356, "duration": 11.344967603683472}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return round(a**(1/3))**3 == a", "prompt_tokens": 879, "completion_tokens": 380, "duration": 11.159240007400513}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    def is_prime_digit(digit):\n        primes = ['2', '3', '5', '7', 'B', 'D']\n        return digit in primes\n\n    count = 0\n    for digit in num:\n        if is_prime_digit(digit):\n            count += 1\n    return count", "prompt_tokens": 1290, "completion_tokens": 461, "duration": 11.28523302078247}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 897, "completion_tokens": 343, "duration": 10.928115606307983}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2]:\n            return True\n    return False", "prompt_tokens": 1048, "completion_tokens": 577, "duration": 18.18263006210327}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1169, "completion_tokens": 570, "duration": 44.91917085647583}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 841, "completion_tokens": 443, "duration": 11.712583303451538}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 863, "completion_tokens": 534, "duration": 13.052112340927124}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 920, "completion_tokens": 380, "duration": 9.215581893920898}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2))", "prompt_tokens": 926, "completion_tokens": 389, "duration": 11.573642253875732}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 886, "completion_tokens": 347, "duration": 22.024325847625732}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 1155, "completion_tokens": 403, "duration": 12.248486042022705}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)", "prompt_tokens": 1115, "completion_tokens": 459, "duration": 15.385607242584229}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    return ''.join(chr((ord(c) - 97 + 2 * 2) % 26 + 97) for c in s)", "prompt_tokens": 833, "completion_tokens": 347, "duration": 10.309009790420532}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    return None", "prompt_tokens": 877, "completion_tokens": 363, "duration": 12.770810604095459}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1", "prompt_tokens": 815, "completion_tokens": 378, "duration": 13.15876841545105}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    return (x == y + z) or (y == x + z) or (z == x + y) and all(isinstance(num, int) for num in [x, y, z])", "prompt_tokens": 904, "completion_tokens": 384, "duration": 10.859126091003418}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).upper()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 843, "completion_tokens": 415, "duration": 13.00873351097107}
{"task_id": "HumanEval/94", "generated_code": "import sympy\n\ndef largest_prime_digit_sum(lst):\n    primes = [num for num in lst if sympy.isprime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 1396, "completion_tokens": 583, "duration": 17.73967456817627}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(key.islower() for key in dict.keys())\n    uppercase_keys = all(key.isupper() for key in dict.keys())\n    return lowercase_keys or uppercase_keys", "prompt_tokens": 922, "completion_tokens": 336, "duration": 9.334267616271973}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    return primes", "prompt_tokens": 1002, "completion_tokens": 493, "duration": 17.04136562347412}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 820, "completion_tokens": 348, "duration": 10.841027736663818}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 777, "completion_tokens": 390, "duration": 9.085349798202515}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1", "prompt_tokens": 878, "completion_tokens": 321, "duration": 11.495670557022095}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    pile = []\n    stones = n\n    for i in range(n):\n        pile.append(stones)\n        stones += 2 if stones % 2 == 1 else 1\n    return pile", "prompt_tokens": 958, "completion_tokens": 443, "duration": 15.020147323608398}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return re.split(r'[,\\s]+', s)", "prompt_tokens": 805, "completion_tokens": 289, "duration": 10.492650270462036}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "prompt_tokens": 874, "completion_tokens": 436, "duration": 15.795220375061035}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)", "prompt_tokens": 957, "completion_tokens": 420, "duration": 10.210508584976196}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 839, "completion_tokens": 367, "duration": 12.02362608909607}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_names = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [x for x in arr if 0 < x < 10]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [digit_names[x] for x in reversed_arr]\n    return result", "prompt_tokens": 1161, "completion_tokens": 401, "duration": 12.58680009841919}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(num):\n        if num == 0:\n            return 1\n        return num * factorial(num - 1)\n    \n    def sum_numbers(num):\n        return sum(range(1, num + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    \n    return result", "prompt_tokens": 823, "completion_tokens": 374, "duration": 8.8652184009552}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 == 0)\n    odd_count = sum(1 for num in range(1, n+1) if is_palindrome(num) and num % 2 != 0)\n\n    return even_count, odd_count", "prompt_tokens": 1076, "completion_tokens": 453, "duration": 15.268946409225464}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return sum(sum(int(digit) for digit in str(num) if digit != '-') > 0 for num in arr)", "prompt_tokens": 1534, "completion_tokens": 1016, "duration": 20.65188193321228}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 1339, "completion_tokens": 503, "duration": 12.841891527175903}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= len(lst2) else \"NO\"", "prompt_tokens": 993, "completion_tokens": 335, "duration": 12.625274419784546}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    char_count = {}\n    for char in test.split():\n        char_count[char] = char_count.get(char, 0) + 1\n    max_count = max(char_count.values())\n    return {char: count for char, count in char_count.items() if count == max_count}", "prompt_tokens": 1003, "completion_tokens": 464, "duration": 15.063491821289062}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join(char for char in s if char not in c)\n    return s, s == s[::-1]", "prompt_tokens": 1443, "completion_tokens": 599, "duration": 15.658221960067749}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(int(d) % 2 != 0 for d in s), sum(int(d) % 2 != 0 for d in s), i, i) for i, s in enumerate(lst)]\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', '11111111']))", "prompt_tokens": 964, "completion_tokens": 411, "duration": 12.505405902862549}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 942, "completion_tokens": 521, "duration": 15.932789325714111}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    buckets = 0\n    for row in grid:\n        water = 0\n        for well in row:\n            water += well\n            if water >= capacity:\n                buckets += math.ceil(water / capacity)\n                water = water % capacity\n    return buckets", "prompt_tokens": 1425, "completion_tokens": 541, "duration": 12.030246019363403}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 975, "completion_tokens": 358, "duration": 9.624138832092285}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 998, "completion_tokens": 394, "duration": 11.18470287322998}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\"", "prompt_tokens": 923, "completion_tokens": 416, "duration": 9.765255689620972}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 1010, "completion_tokens": 439, "duration": 10.297455072402954}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 1068, "completion_tokens": 351, "duration": 8.561162948608398}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 933, "completion_tokens": 472, "duration": 13.015332698822021}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 <= num <= 99)", "prompt_tokens": 1071, "completion_tokens": 541, "duration": 12.910531520843506}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    def collatz_sequence(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    collatz_seq = collatz_sequence(n)\n    odd_numbers = sorted(list(set(collatz_seq) - set([x for x in collatz_seq if x % 2 == 0 and x != 1 and x != n and x != 4])))\n    return odd_numbers", "prompt_tokens": 1698, "completion_tokens": 743, "duration": 19.675389528274536}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month, day, year = parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True", "prompt_tokens": 1174, "completion_tokens": 574, "duration": 14.471991300582886}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 909, "completion_tokens": 384, "duration": 10.367501974105835}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            return False\n    return True", "prompt_tokens": 1196, "completion_tokens": 433, "duration": 9.888959169387817}
{"task_id": "HumanEval/127", "generated_code": "import math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"", "prompt_tokens": 1235, "completion_tokens": 555, "duration": 11.391775131225586}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            sign_product *= -1\n            magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum", "prompt_tokens": 1031, "completion_tokens": 571, "duration": 16.381632328033447}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    m = len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dx, dy in directions:\n            new_x, new_y = x + dx, y + dy\n            if 0 <= new_x < n and 0 <= new_y < m:\n                new_path = dfs(new_x, new_y, path + [grid[new_x][new_y]])\n                if new_path is not None:\n                    if min_path is None or new_path < min_path:\n                        min_path = new_path\n        \n        return min_path\n    \n    start_values = [grid[i][j] for i in range(n) for j in range(m)]\n    start_values.sort()\n    \n    for i in range(n):\n        for j in range(m):\n            if dfs(i, j, [grid[i][j]]) == start_values[:k]:\n                return [grid[i][j]] + dfs(i, j, [grid[i][j]])\n\n# Example usage\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk = 3\nprint(minPath(grid, k))\n\ngrid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk = 1\nprint(minPath(grid, k))", "prompt_tokens": 1943, "completion_tokens": 1188, "duration": 23.411717414855957}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 3]\n    else:\n        res = [0, 1, 3]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i-1] + res[i-2] + res[i-3])\n        return res", "prompt_tokens": 1114, "completion_tokens": 449, "duration": 13.151146650314331}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 750, "completion_tokens": 366, "duration": 8.233314275741577}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return True\n    return False", "prompt_tokens": 1028, "completion_tokens": 512, "duration": 10.787850618362427}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 946, "completion_tokens": 353, "duration": 8.651402235031128}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha() and not last_char.isspace()", "prompt_tokens": 864, "completion_tokens": 332, "duration": 6.663701772689819}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 874, "completion_tokens": 417, "duration": 11.300250768661499}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n    \n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 854, "completion_tokens": 363, "duration": 10.759469509124756}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 928, "completion_tokens": 379, "duration": 16.09155559539795}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                for l in range(k, n//2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False", "prompt_tokens": 846, "completion_tokens": 488, "duration": 12.867704153060913}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return n * special_factorial(n-1) * special_factorial(n-1)", "prompt_tokens": 835, "completion_tokens": 381, "duration": 10.044616460800171}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result = result.rstrip('_') + '-'\n        else:\n            if consecutive_spaces > 2:\n                result += '-'\n            result += '_' * consecutive_spaces + char\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result = result.rstrip('_') + '-'\n    else:\n        result += '_' * consecutive_spaces\n    return result", "prompt_tokens": 805, "completion_tokens": 412, "duration": 11.321007013320923}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 1054, "completion_tokens": 420, "duration": 10.785987615585327}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 983, "completion_tokens": 385, "duration": 8.850470066070557}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 1158, "completion_tokens": 653, "duration": 18.62609028816223}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    return result_num % result_den == 0", "prompt_tokens": 1082, "completion_tokens": 537, "duration": 14.373555421829224}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(x)), nums.index(x)))", "prompt_tokens": 964, "completion_tokens": 463, "duration": 9.904047966003418}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])", "prompt_tokens": 841, "completion_tokens": 365, "duration": 13.018687725067139}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 1203, "completion_tokens": 667, "duration": 15.963573932647705}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    return tuple(sorted(planets[start_idx+1:end_idx], key=planets.index))", "prompt_tokens": 1031, "completion_tokens": 429, "duration": 8.413811922073364}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 990, "completion_tokens": 351, "duration": 20.483814239501953}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "prompt_tokens": 869, "completion_tokens": 426, "duration": 11.118103265762329}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int))", "prompt_tokens": 879, "completion_tokens": 339, "duration": 12.561830282211304}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(score - g) if score != g else 0 for score, g in zip(game, guess)]", "prompt_tokens": 1084, "completion_tokens": 354, "duration": 10.026663064956665}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n    \n    strongest = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest}\"", "prompt_tokens": 1239, "completion_tokens": 456, "duration": 11.547680377960205}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    concat = a + a\n    return b in concat", "prompt_tokens": 949, "completion_tokens": 411, "duration": 9.691463232040405}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count", "prompt_tokens": 772, "completion_tokens": 417, "duration": 14.217610597610474}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value, numeral in sorted(roman_dict.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 913, "completion_tokens": 540, "duration": 14.928677558898926}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "prompt_tokens": 955, "completion_tokens": 482, "duration": 13.71418309211731}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 884, "completion_tokens": 431, "duration": 12.176745653152466}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 1075, "completion_tokens": 259, "duration": 7.754753351211548}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    result = operands[0]\n    for i in range(1, len(operands)):\n        if operators[i-1] == '+':\n            result += operands[i]\n        elif operators[i-1] == '-':\n            result -= operands[i]\n        elif operators[i-1] == '*':\n            result *= operands[i]\n        elif operators[i-1] == '//':\n            result //= operands[i]\n        elif operators[i-1] == '**':\n            result **= operands[i]\n    return result", "prompt_tokens": 1065, "completion_tokens": 463, "duration": 13.099981546401978}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 825, "completion_tokens": 361, "duration": 10.513184547424316}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 776, "completion_tokens": 352, "duration": 10.37358283996582}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [num for num in range(a, b+1) if num % 2 == 0]", "prompt_tokens": 882, "completion_tokens": 404, "duration": 10.2188720703125}
