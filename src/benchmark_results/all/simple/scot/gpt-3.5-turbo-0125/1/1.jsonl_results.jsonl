{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    close_elements = False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                close_elements = True\n                break\n        if close_elements:\n            break\n    return close_elements", "prompt_tokens": 650, "completion_tokens": 227, "duration": 7.636241912841797, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')' and current_group:\n            current_group += char\n            groups.append(current_group)\n            current_group = \"\"\n\n    return groups", "prompt_tokens": 640, "completion_tokens": 230, "duration": 12.286248207092285, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 501, "completion_tokens": 105, "duration": 6.146038293838501, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 585, "completion_tokens": 139, "duration": 5.20732855796814, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_of_absolute_diff = sum(abs(x - mean) for x in numbers)\n    mad = sum_of_absolute_diff / len(numbers)\n    return mad", "prompt_tokens": 665, "completion_tokens": 234, "duration": 7.067395210266113, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 5.2110865116119385, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 681, "completion_tokens": 306, "duration": 8.071154117584229, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 4.736690282821655, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = 0\n    product_result = 1\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 549, "completion_tokens": 149, "duration": 5.422275066375732, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list or num >= rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 592, "completion_tokens": 208, "duration": 6.049716472625732, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 4.027491331100464, "result": "failed: name 'make_palindrome' is not defined", "passed": false}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        if char_a != char_b:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 504, "completion_tokens": 153, "duration": 5.039609909057617, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n        elif len(string) == len(longest_str):\n            longest_str = string\n    \n    return longest_str", "prompt_tokens": 561, "completion_tokens": 180, "duration": 5.99396824836731, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 457, "completion_tokens": 102, "duration": 4.305207252502441, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes", "prompt_tokens": 460, "completion_tokens": 128, "duration": 7.935843229293823, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 450, "completion_tokens": 101, "duration": 3.9301886558532715, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)", "prompt_tokens": 485, "completion_tokens": 131, "duration": 5.0379908084869385, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 7.0894224643707275, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 144, "duration": 5.150713920593262, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 604, "completion_tokens": 251, "duration": 5.972887754440308, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 229, "duration": 10.57865285873413, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 621, "completion_tokens": 187, "duration": 10.11592960357666, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 510, "completion_tokens": 110, "duration": 10.427491426467896, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 401, "completion_tokens": 89, "duration": 9.780543327331543, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 420, "completion_tokens": 104, "duration": 8.10049557685852, "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 616, "completion_tokens": 173, "duration": 6.0610857009887695, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 494, "completion_tokens": 124, "duration": 8.723733901977539, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 434, "completion_tokens": 137, "duration": 10.933763980865479, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for s in strings:\n        concatenated_string += s\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 5.570288181304932, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 9.361964464187622, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 7.496353387832642, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 14.902210474014282, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0 or len(xs) == 0:\n        return None\n    \n    largest_non_zero = max([abs(coeff) for coeff in xs if coeff != 0])\n    zero_point = None\n    \n    for i in range(-1000, 1001):\n        if math.isclose(poly(xs, i), 0, abs_tol=0.0001):\n            zero_point = i\n            break\n    \n    return zero_point", "prompt_tokens": 926, "completion_tokens": 288, "duration": 13.28062653541565, "result": "failed: must be real number, not NoneType", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp = sorted(l[i:i+3])\n            result.extend(temp)\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 696, "completion_tokens": 197, "duration": 12.414626836776733, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 9.52782940864563, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 502, "completion_tokens": 122, "duration": 9.820783376693726, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 516, "completion_tokens": 167, "duration": 5.5785136222839355, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i:]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 620, "completion_tokens": 168, "duration": 8.515510082244873, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 674, "completion_tokens": 181, "duration": 11.943361759185791, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_list = [0, 1]\n    count = 2\n    num = 0\n\n    while count < n:\n        next_fib = fib_list[-1] + fib_list[-2]\n        fib_list.append(next_fib)\n        count += 1\n\n    for number in reversed(fib_list):\n        if is_prime(number):\n            num = number\n            break\n\n    return num", "prompt_tokens": 579, "completion_tokens": 275, "duration": 14.718818664550781, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 11.976781845092773, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for car in range(1, n+1):\n        collisions += car\n    return collisions", "prompt_tokens": 637, "completion_tokens": 113, "duration": 8.078869342803955, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [num + 1 for num in l]", "prompt_tokens": 533, "completion_tokens": 79, "duration": 13.897518634796143, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 7.781961679458618, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 537, "completion_tokens": 140, "duration": 11.554852962493896, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 394, "completion_tokens": 63, "duration": 8.945435523986816, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n+1):\n        next_element = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_element)\n\n    return fib4_list[n]", "prompt_tokens": 718, "completion_tokens": 220, "duration": 11.738199949264526, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 8.513085126876831, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 506, "completion_tokens": 131, "duration": 9.831171989440918, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent = exponent // 2\n    return result", "prompt_tokens": 587, "completion_tokens": 204, "duration": 9.95510983467102, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 649, "completion_tokens": 291, "duration": 16.00400161743164, "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 592, "completion_tokens": 129, "duration": 8.762891292572021, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 473, "completion_tokens": 80, "duration": 10.44282054901123, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    sum = x + y\n    return sum", "prompt_tokens": 394, "completion_tokens": 47, "duration": 8.039721488952637, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_count = {}\n    for ch in s0:\n        if ch not in char_count:\n            char_count[ch] = 1\n        else:\n            char_count[ch] += 1\n\n    for ch in s1:\n        if ch not in char_count:\n            return False\n        char_count[ch] -= 1\n\n    for count in char_count.values():\n        if count != 0:\n            return False\n\n    return True", "prompt_tokens": 733, "completion_tokens": 305, "duration": 12.540308713912964, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 9.502306938171387, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 169, "duration": 10.0171480178833, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    if not l:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            is_increasing = False\n        if l[i] > l[i-1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing", "prompt_tokens": 539, "completion_tokens": 190, "duration": 5.926368474960327, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 7.851364374160767, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 493, "completion_tokens": 175, "duration": 8.064033508300781, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 4.383606195449829, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 534, "completion_tokens": 158, "duration": 6.43527626991272, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 559, "completion_tokens": 109, "duration": 6.62450385093689, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 7.830201625823975, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i, c in enumerate(s):\n        if c in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if c == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 175, "duration": 7.221005201339722, "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "prompt_tokens": 545, "completion_tokens": 190, "duration": 8.502641201019287, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 4.18806004524231, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 780, "completion_tokens": 143, "duration": 7.204590559005737, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(smallest_index, i)\n        elif found_even and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1087, "completion_tokens": 344, "duration": 11.656763076782227, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > greatest_int and freq_map[key] >= key:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 710, "completion_tokens": 206, "duration": 7.854328155517578, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    result_lst = []\n    lst.sort()\n    while lst:\n        result_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            result_lst.append(lst.pop())\n        elif len(lst) == 1:\n            result_lst.append(lst.pop())\n    return result_lst", "prompt_tokens": 653, "completion_tokens": 213, "duration": 8.752094745635986, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 192, "duration": 6.035858154296875, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    is_palindrome = True\n    left, right = 0, len(q) - 1\n    \n    while left < right:\n        if q[left] != q[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    \n    if is_palindrome:\n        if sum(q) <= w:\n            return True\n        else:\n            return False\n    else:\n        return False", "prompt_tokens": 895, "completion_tokens": 278, "duration": 9.124573230743408, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 714, "completion_tokens": 211, "duration": 8.265111684799194, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 198, "duration": 8.421991109848022, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "import math\n\ndef is_multiply_prime(a):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    primes = []\n    for num in range(2, a):\n        if is_prime(num):\n            primes.append(num)\n            prime_count += 1\n        if prime_count == 3:\n            break\n\n    if prime_count == 3 and a == primes[0] * primes[1] * primes[2]:\n        return True\n    else:\n        return False", "prompt_tokens": 627, "completion_tokens": 357, "duration": 11.488771438598633, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    k = 0\n    while n ** k < x:\n        k += 1\n    return n ** k == x", "prompt_tokens": 610, "completion_tokens": 105, "duration": 9.192296266555786, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (abs(a) ** (1/3)).is_integer()", "prompt_tokens": 558, "completion_tokens": 102, "duration": 4.9674293994903564, "result": "failed: Fourth test error: False", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 7.765652418136597, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 675, "completion_tokens": 203, "duration": 5.214360237121582, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 12.953118562698364, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 531, "duration": 13.992117404937744, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 9.72582721710205, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 425, "completion_tokens": 140, "duration": 5.923169136047363, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    total_sum = sum(int(digit) for digit in str(N))\n    return bin(total_sum)[2:]", "prompt_tokens": 603, "completion_tokens": 107, "duration": 6.957442760467529, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 7.281226634979248, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 629, "completion_tokens": 167, "duration": 8.057013750076294, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, r in enumerate(lst):\n        if x in r:\n            for j, v in enumerate(r):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 930, "completion_tokens": 225, "duration": 8.62000298500061, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 760, "completion_tokens": 149, "duration": 7.311678171157837, "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 10.369039058685303, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[i-1]:\n            second_smallest = sorted_lst[i]\n            break\n    return second_smallest", "prompt_tokens": 618, "completion_tokens": 189, "duration": 5.570262670516968, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 6.149232625961304, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 592, "completion_tokens": 120, "duration": 3.282337188720703, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiou\"\n    for ch in message:\n        if ch.islower():\n            encoded_message += ch.upper()\n        elif ch.isupper():\n            encoded_message += ch.lower()\n        elif ch.lower() in vowels:\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 661, "completion_tokens": 302, "duration": 9.379799365997314, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 13.739085912704468, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 12.30231261253357, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 8.583178281784058, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 534, "completion_tokens": 107, "duration": 9.500287055969238, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 8.772554159164429, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = int(num) + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    \n    if diff_floor <= diff_ceil:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 677, "completion_tokens": 182, "duration": 9.807773351669312, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n    while n > 0:\n        stones_list.append(stones)\n        stones += 2 if n % 2 == 1 else 1\n        n -= 1\n    return stones_list", "prompt_tokens": 623, "completion_tokens": 161, "duration": 8.038863897323608, "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in (',', ' '):\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 627, "completion_tokens": 206, "duration": 6.538383483886719, "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 5.472800016403198, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n\n    for i in range(n, m+1):\n        total += i\n        count += 1\n\n    avg = round(total / count)\n    return bin(avg)", "prompt_tokens": 618, "completion_tokens": 146, "duration": 10.215388774871826, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 582, "completion_tokens": 190, "duration": 9.241924524307251, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 994, "completion_tokens": 352, "duration": 8.540511846542358, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 580, "completion_tokens": 153, "duration": 7.465546607971191, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 7.663469552993774, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= 1\n            num = abs(num)\n        while num > 0:\n            sum_digits += num % 10\n            num = num // 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 8.99301028251648, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[-min_idx:] + arr[:-min_idx]\n    return arr == sorted(arr)", "prompt_tokens": 956, "completion_tokens": 153, "duration": 5.212996482849121, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    count_even = 0\n\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n        else:\n            count_even += 1\n\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 783, "completion_tokens": 246, "duration": 8.950572967529297, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    max_count = 0\n    \n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n        \n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n    \n    max_letters = [key for key, value in hist_dict.items() if value == max_count]\n    result_dict = {key: value for key, value in hist_dict.items() if key in max_letters}\n    \n    return result_dict", "prompt_tokens": 762, "completion_tokens": 332, "duration": 13.558019876480103, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    left, right = 0, len(result) - 1\n    while left < right:\n        if result[left] != result[right]:\n            is_palindrome = False\n            break\n        left += 1\n        right -= 1\n    return (result, is_palindrome)", "prompt_tokens": 730, "completion_tokens": 247, "duration": 8.654846668243408, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for idx, string in enumerate(lst):\n        odd_count = sum(1 for char in string if char.isdigit() and int(char) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{idx+1}ng {string} of the {idx+1}nput.\")\n    return result_lst", "prompt_tokens": 732, "completion_tokens": 216, "duration": 7.908265829086304, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 538, "completion_tokens": 168, "duration": 5.4133875370025635, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well > 0:\n                times += math.ceil(well / capacity)\n    return times", "prompt_tokens": 1036, "completion_tokens": 183, "duration": 5.783042669296265, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 726, "completion_tokens": 169, "duration": 5.300309658050537, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        return sum(1 for letter in word if letter.lower() not in 'aeiou')\n\n    words = []\n    if not s:\n        return words\n\n    word_list = s.split()\n    for word in word_list:\n        if count_consonants(word) == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 748, "completion_tokens": 210, "duration": 7.4795897006988525, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    found_consonant = False\n    vowels = \"aeiouAEIOU\"\n    \n    for char in word[::-1]:\n        if char.isalpha() and char not in vowels:\n            found_consonant = True\n        elif found_consonant and char in vowels:\n            closest_vowel = char\n            break\n    \n    return closest_vowel", "prompt_tokens": 709, "completion_tokens": 242, "duration": 10.275469303131104, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 299, "duration": 9.838189125061035, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    res = []\n    for i in range(k):\n        res.append(arr[i])\n    return res", "prompt_tokens": 779, "completion_tokens": 122, "duration": 4.592054843902588, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 14.248966693878174, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 161, "duration": 9.585857629776001, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 835, "completion_tokens": 213, "duration": 5.490624666213989, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = map(int, parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    if year < 1:\n        return False\n    \n    return True", "prompt_tokens": 956, "completion_tokens": 338, "duration": 11.835674285888672, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' not in txt:\n        if ',' not in txt:\n            return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        else:\n            return txt.split(',')\n    else:\n        return txt.split()", "prompt_tokens": 666, "completion_tokens": 191, "duration": 7.435113430023193, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    sorted = True\n    \n    for num in lst:\n        if num == prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                sorted = False\n                break\n        elif num < prev:\n            sorted = False\n            break\n        prev = num\n    \n    return sorted", "prompt_tokens": 957, "completion_tokens": 283, "duration": 7.785253286361694, "result": "failed: '<' not supported between instances of 'int' and 'NoneType'", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n\n    if max_start > min_end:\n        return \"NO\"\n\n    length = min_end - max_start\n\n    if length <= 1:\n        return \"NO\"\n\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 988, "completion_tokens": 367, "duration": 13.494313478469849, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num) if num != 0 else 0\n        product_signs *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 659, "completion_tokens": 251, "duration": 8.714670658111572, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def isValidCell(row, col):\n        return 0 <= row < len(grid) and 0 <= col < len(grid[0])\n\n    def getNeighbors(row, col):\n        neighbors = []\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            new_row, new_col = row + dr, col + dc\n            if isValidCell(new_row, new_col):\n                neighbors.append((new_row, new_col))\n        return neighbors\n\n    def dfs(row, col, currPath):\n        currPath.append(grid[row][col])\n        visited[row][col] = True\n        if len(currPath) == k:\n            return currPath\n        for new_row, new_col in getNeighbors(row, col):\n            if not visited[new_row][new_col]:\n                res = dfs(new_row, new_col, currPath)\n                if res:\n                    return res\n        visited[row][col] = False\n        currPath.pop()\n\n    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]\n    path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res = dfs(i, j, [])\n            if res:\n                path = res\n                break\n    return path", "prompt_tokens": 1403, "completion_tokens": 642, "duration": 14.294860601425171, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n < 2:\n        return sequence[:n+1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence", "prompt_tokens": 871, "completion_tokens": 232, "duration": 12.16461706161499, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n != 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 150, "duration": 8.28550100326538, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 645, "completion_tokens": 172, "duration": 5.195101499557495, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 3.935558319091797, "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt == \"\":\n        return is_last_char_alphabetical\n    else:\n        txt = txt.rstrip()\n        last_char = txt[-1]\n        if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 667, "completion_tokens": 230, "duration": 55.148175954818726, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 541, "completion_tokens": 124, "duration": 9.200226545333862, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n    \n    largest_neg = None\n    smallest_pos = None\n    \n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 231, "duration": 8.124107122421265, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 11.049068927764893, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n            even_sum += i\n    return even_count == 4 and even_sum == n", "prompt_tokens": 542, "completion_tokens": 201, "duration": 10.317400217056274, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 13.22820520401001, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    modified_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                modified_text += \"-\"\n                count = 0\n        else:\n            if count > 0:\n                modified_text += \"-\" * count\n                count = 0\n            modified_text += ch\n    if count > 0:\n        modified_text += \"-\" * count\n    return modified_text", "prompt_tokens": 648, "completion_tokens": 282, "duration": 5.929140090942383, "result": "failed: This prints if this assert fails 2 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = 0\n    has_dot = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            count_digits += 1\n        elif ch == '.':\n            if not has_dot:\n                has_dot = True\n            else:\n                return 'No'\n        elif ch.isalpha():\n            if not has_dot:\n                valid_extension = True\n    \n    if count_digits > 3 or not has_dot or not valid_extension:\n        return 'No'\n    else:\n        return 'Yes'", "prompt_tokens": 889, "completion_tokens": 322, "duration": 8.903775215148926, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 10.983941316604614, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 667, "completion_tokens": 208, "duration": 12.362375736236572, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    product = x_num * n_num / (x_denom * n_denom)\n    return product.is_integer()", "prompt_tokens": 671, "completion_tokens": 164, "duration": 10.35833477973938, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {}\n    for i, num in enumerate(nums):\n        digit_sums[i] = sum(int(digit) for digit in str(abs(num)))\n    sorted_indices = sorted(digit_sums, key=lambda x: (digit_sums[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 642, "completion_tokens": 230, "duration": 10.151469469070435, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 9.614877939224243, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 8.88235354423523, "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 in planets and planet2 in planets:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        \n        if index1 < index2:\n            result = planets[index1+1:index2]\n        else:\n            result = planets[index2+1:index1]\n            result.reverse()\n        \n        return tuple(result)\n    else:\n        return ()", "prompt_tokens": 827, "completion_tokens": 275, "duration": 9.342929124832153, "result": "failed: Fourth test error: ('Uranus', 'Saturn', 'Jupiter', 'Mars', 'Earth')", "passed": false}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 718, "completion_tokens": 133, "duration": 5.548974990844727, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 114, "duration": 8.182518243789673, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 6.0880515575408936, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 7.0319297313690186, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength or strongest_extension is None:\n            strongest_extension = f\"{class_name}.{extension}\"\n            max_strength = strength\n    \n    return strongest_extension", "prompt_tokens": 960, "completion_tokens": 251, "duration": 5.339820623397827, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a_concat = a + a\n    for i in range(n):\n        if b in a_concat[i:i+n]:\n            return True\n    return False", "prompt_tokens": 652, "completion_tokens": 200, "duration": 10.543925523757935, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 13.368825435638428, "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n    \n    roman_numeral = ''\n    \n    for roman_symbol, value in roman_numerals.items():\n        while number >= value:\n            roman_numeral += roman_symbol\n            number -= value\n    \n    return roman_numeral.lower()", "prompt_tokens": 580, "completion_tokens": 265, "duration": 12.843071222305298, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 7.814193964004517, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word", "prompt_tokens": 600, "completion_tokens": 189, "duration": 10.65923261642456, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + need\n    if remaining >= total_eaten:\n        left_after_meals = remaining - total_eaten\n    else:\n        left_after_meals = 0\n    return [total_eaten, left_after_meals]", "prompt_tokens": 957, "completion_tokens": 208, "duration": 9.578108549118042, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 855, "completion_tokens": 293, "duration": 10.137277126312256, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 195, "duration": 5.571724891662598, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if not text:\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.146960020065308, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 605, "completion_tokens": 202, "duration": 9.886307954788208, "result": "failed: Test 1", "passed": false}
