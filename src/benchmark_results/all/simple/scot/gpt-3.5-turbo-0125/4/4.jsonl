{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 643, "completion_tokens": 208, "duration": 7.1863367557525635}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces_count = 0\n    \n    for ch in paren_string:\n        if ch == '(':\n            open_braces_count += 1\n        elif ch == ')':\n            open_braces_count -= 1\n        \n        current_group += ch\n        \n        if open_braces_count == 0:\n            groups.append(current_group)\n            current_group = \"\"\n    \n    return groups", "prompt_tokens": 638, "completion_tokens": 257, "duration": 10.099881887435913}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 7.600222826004028}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 565, "completion_tokens": 119, "duration": 5.1422717571258545}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(num - mean) for num in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 662, "completion_tokens": 230, "duration": 8.358785390853882}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "prompt_tokens": 531, "completion_tokens": 151, "duration": 7.9311089515686035}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 684, "completion_tokens": 309, "duration": 9.870965003967285}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 114, "duration": 7.2960426807403564}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    \n    if not numbers:\n        return (0, 1)\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 557, "completion_tokens": 157, "duration": 8.423580169677734}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    window = []\n    for num in numbers:\n        window.append(num)\n        if len(window) > 1:\n            rolling_max_list.append(max(window))\n            window.pop(0)\n        else:\n            rolling_max_list.append(num)\n    return rolling_max_list", "prompt_tokens": 594, "completion_tokens": 215, "duration": 7.231738805770874}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 626, "completion_tokens": 105, "duration": 7.501997709274292}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += '1'\n        else:\n            result += '0'\n    return result", "prompt_tokens": 520, "completion_tokens": 165, "duration": 5.090437889099121}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n    \n    return longest_str", "prompt_tokens": 584, "completion_tokens": 203, "duration": 7.085341930389404}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 4.764298677444458}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes", "prompt_tokens": 460, "completion_tokens": 128, "duration": 6.025387525558472}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n + 1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 110, "duration": 5.382046699523926}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set()\n    string = string.lower()\n    for ch in string:\n        if ch not in distinct_chars:\n            distinct_chars.add(ch)\n    return len(distinct_chars)", "prompt_tokens": 494, "completion_tokens": 148, "duration": 8.1400625705719}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 7.314988374710083}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 513, "completion_tokens": 140, "duration": 6.208975791931152}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 590, "completion_tokens": 237, "duration": 7.827008962631226}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 722, "completion_tokens": 230, "duration": 7.237698078155518}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 627, "completion_tokens": 193, "duration": 7.097811698913574}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = [value for value in values if isinstance(value, int)]\n    return integers", "prompt_tokens": 509, "completion_tokens": 109, "duration": 4.679324150085449}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for char in string:\n        length += 1\n    return length", "prompt_tokens": 400, "completion_tokens": 88, "duration": 5.208034992218018}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 438, "completion_tokens": 127, "duration": 5.329364776611328}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 611, "completion_tokens": 168, "duration": 6.0211021900177}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n    return result", "prompt_tokens": 485, "completion_tokens": 106, "duration": 4.843212842941284}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "prompt_tokens": 433, "completion_tokens": 136, "duration": 5.087981224060059}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 426, "completion_tokens": 92, "duration": 4.7413341999053955}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 103, "duration": 4.905332565307617}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 540, "completion_tokens": 93, "duration": 50.46303606033325}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 544, "completion_tokens": 170, "duration": 5.8821046352386475}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list):\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"Input list must have even number of coefficients and largest coefficient must be non-zero\"\n    \n    def poly(x):\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    zero_point = 0\n    step = 0.1\n    while poly(zero_point) != 0:\n        zero_point += step\n    return zero_point", "prompt_tokens": 888, "completion_tokens": 218, "duration": 7.245408058166504}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            temp.append(v)\n        else:\n            result.append(v)\n    temp.sort()\n    temp_index = 0\n    for i, v in enumerate(l):\n        if i % 3 == 0:\n            result.append(temp[temp_index])\n            temp_index += 1\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 742, "completion_tokens": 289, "duration": 8.165225505828857}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 4.745861768722534}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 502, "completion_tokens": 122, "duration": 4.105577230453491}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count", "prompt_tokens": 514, "completion_tokens": 155, "duration": 6.370019912719727}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    temp = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            temp.append(v)\n        else:\n            result.extend(sorted(temp))\n            result.append(v)\n            temp = []\n    if temp:\n        result.extend(sorted(temp))\n    return result", "prompt_tokens": 625, "completion_tokens": 194, "duration": 6.253677606582642}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 771, "completion_tokens": 357, "duration": 9.16826057434082}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(num):\n        a, b = 0, 1\n        while a <= num:\n            if a == num:\n                return True\n            a, b = b, a + b\n        return False\n\n    count = 0\n    num = 2\n\n    while count < n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n\n    return num - 1", "prompt_tokens": 625, "completion_tokens": 336, "duration": 9.693464756011963}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 7.813672780990601}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    return n", "prompt_tokens": 642, "completion_tokens": 95, "duration": 6.633951663970947}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 5.899710178375244}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 666, "completion_tokens": 136, "duration": 3.3458211421966553}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 541, "completion_tokens": 144, "duration": 5.778899192810059}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 2.5208914279937744}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n\n    if n < 4:\n        return fib4_list[n]\n\n    for i in range(4, n+1):\n        next_element = fib4_list[i-1] + fib4_list[i-2] + fib4_list[i-3] + fib4_list[i-4]\n        fib4_list.append(next_element)\n\n    return fib4_list[n]", "prompt_tokens": 718, "completion_tokens": 220, "duration": 9.476075172424316}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 4.760284185409546}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 487, "completion_tokens": 111, "duration": 7.637394428253174}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    exponent = n\n    modulus = p\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = (result * base) % modulus\n        base = (base * base) % modulus\n        exponent //= 2\n    return result", "prompt_tokens": 583, "completion_tokens": 198, "duration": 9.207738876342773}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    decoded_str = \"\"\n    for ch in s:\n        decoded_char = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n        decoded_str += decoded_char\n    return decoded_str", "prompt_tokens": 526, "completion_tokens": 146, "duration": 7.546562194824219}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 592, "completion_tokens": 129, "duration": 6.477876424789429}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 472, "completion_tokens": 83, "duration": 7.278936386108398}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 400, "completion_tokens": 53, "duration": 5.337862730026245}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str):\n    char_count = {}\n    for char in s0:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    \n    for char in s1:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n    \n    return all(count == 0 for count in char_count.values())", "prompt_tokens": 688, "completion_tokens": 247, "duration": 7.342388868331909}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a, b = 0, 1\n    i = 2\n\n    while i <= n:\n        result = a + b\n        a = b\n        b = result\n        i += 1\n\n    return result", "prompt_tokens": 459, "completion_tokens": 178, "duration": 8.39722204208374}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0", "prompt_tokens": 546, "completion_tokens": 165, "duration": 6.022414922714233}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            increasing = False\n        if l[i] < l[i+1]:\n            decreasing = False\n\n    return increasing or decreasing", "prompt_tokens": 522, "completion_tokens": 158, "duration": 9.418790340423584}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for e in l1:\n        if e in l2 and e not in common_elements:\n            common_elements.append(e)\n    return sorted(common_elements)", "prompt_tokens": 578, "completion_tokens": 142, "duration": 6.635000705718994}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 8.896092176437378}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 2.5211474895477295}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n            stack.append(ch)\n        elif ch == \")\" and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0", "prompt_tokens": 534, "completion_tokens": 158, "duration": 8.216063022613525}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "prompt_tokens": 585, "completion_tokens": 198, "duration": 6.777266263961792}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    return fibfib_list[n]", "prompt_tokens": 673, "completion_tokens": 224, "duration": 6.938176393508911}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Additional test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"Python\"))  # 1", "prompt_tokens": 606, "completion_tokens": 238, "duration": 7.61523699760437}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift > length:\n        shift = shift % length\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "prompt_tokens": 543, "completion_tokens": 188, "duration": 8.514194011688232}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    sum = 0\n    for ch in s:\n        if ch.isupper():\n            sum += ord(ch)\n    return sum", "prompt_tokens": 538, "completion_tokens": 90, "duration": 7.266876220703125}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [i for i in s.split() if i.isdigit()])\n    mango_count = n - apples - oranges\n    return mango_count", "prompt_tokens": 817, "completion_tokens": 182, "duration": 6.657498121261597}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = None\n    smallest_index = None\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and (smallest_value is None or node < smallest_value):\n            smallest_value = node\n            smallest_index = i\n    \n    if smallest_value is not None:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1005, "completion_tokens": 209, "duration": 6.826272964477539}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for num, freq in freq_map.items():\n        if num > 0 and freq >= num and num > greatest_int:\n            greatest_int = num\n\n    return greatest_int", "prompt_tokens": 730, "completion_tokens": 231, "duration": 6.772897720336914}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    sorted_lst = []\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if len(lst) > 1:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "prompt_tokens": 621, "completion_tokens": 165, "duration": 4.346675395965576}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 602, "completion_tokens": 190, "duration": 8.325601577758789}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 860, "completion_tokens": 178, "duration": 6.328081369400024}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 716, "completion_tokens": 212, "duration": 8.86632490158081}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 781, "completion_tokens": 221, "duration": 7.362746953964233}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for p in range(2, 100):\n        if is_prime(p) and a % p == 0:\n            a //= p\n            count += 1\n        if count == 3:\n            return True\n    return False", "prompt_tokens": 516, "completion_tokens": 217, "duration": 8.939244270324707}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "prompt_tokens": 621, "completion_tokens": 119, "duration": 6.852842092514038}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    cube_root = abs(a) ** (1/3)\n    return cube_root.is_integer()", "prompt_tokens": 563, "completion_tokens": 111, "duration": 7.623630523681641}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 8.113226413726807}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    binary_str += bin(decimal)[2:]\n    binary_str += \"db\"\n    return binary_str", "prompt_tokens": 631, "completion_tokens": 130, "duration": 7.695422887802124}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    return True", "prompt_tokens": 598, "completion_tokens": 171, "duration": 5.170654296875}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades", "prompt_tokens": 1087, "completion_tokens": 533, "duration": 11.68959927558899}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 549, "completion_tokens": 200, "duration": 8.678791046142578}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10**(n-1)\n        else:\n            count += 2 * 10**(n-2)\n    return count", "prompt_tokens": 425, "completion_tokens": 140, "duration": 8.160261154174805}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in bin(N)[2:]))[2:]\n    return binary_sum", "prompt_tokens": 611, "completion_tokens": 119, "duration": 7.339702129364014}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 5.401849746704102}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    return ' '.join(ordered_words)", "prompt_tokens": 620, "completion_tokens": 153, "duration": 3.522108316421509}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            for j, elem in enumerate(row):\n                if elem == x:\n                    result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result", "prompt_tokens": 929, "completion_tokens": 232, "duration": 7.318664789199829}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 762, "completion_tokens": 151, "duration": 8.317851543426514}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 8.848285675048828}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest", "prompt_tokens": 620, "completion_tokens": 211, "duration": 6.841436862945557}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 542, "completion_tokens": 124, "duration": 5.8042144775390625}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    total = x + y + z\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 634, "completion_tokens": 241, "duration": 43.43125319480896}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    for ch in message:\n        if ch.lower() in vowels:\n            index = alphabet.index(ch.lower())\n            new_index = (index + 2) % 26\n            new_ch = alphabet[new_index]\n            if ch.isupper():\n                new_ch = new_ch.upper()\n            encoded_message += new_ch\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    \n    return encoded_message", "prompt_tokens": 637, "completion_tokens": 281, "duration": 8.746306419372559}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 984, "completion_tokens": 285, "duration": 9.103149652481079}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict.keys():\n        if isinstance(key, str) and key.islower():\n            is_lower = True\n        elif isinstance(key, str) and key.isupper():\n            is_upper = True\n        \n        if is_lower and is_upper:\n            return False\n    \n    return is_lower or is_upper", "prompt_tokens": 739, "completion_tokens": 235, "duration": 8.172261953353882}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 6.499051094055176}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 545, "completion_tokens": 118, "duration": 5.471253156661987}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 5.382065534591675}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    floor_num = int(num)\n    ceil_num = floor_num + 1\n    diff_floor = num - floor_num\n    if diff_floor < 0.5:\n        return floor_num\n    else:\n        return ceil_num", "prompt_tokens": 670, "completion_tokens": 162, "duration": 6.3478991985321045}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if stones % 2 == 0:\n            stones += 1\n        else:\n            stones += 2\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 144, "duration": 5.534066915512085}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 619, "completion_tokens": 198, "duration": 6.014340162277222}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    biggest_even_num = -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            biggest_even_num = num\n            break\n    return biggest_even_num", "prompt_tokens": 503, "completion_tokens": 113, "duration": 5.38367223739624}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        total = 0\n        count = 0\n        for i in range(n, m+1):\n            total += i\n            count += 1\n        avg = round(total / count)\n        return bin(avg)", "prompt_tokens": 627, "completion_tokens": 158, "duration": 6.277146339416504}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        if any(int(ch) % 2 == 0 for ch in str(num)):\n            continue\n        result.append(num)\n    return sorted(result)", "prompt_tokens": 592, "completion_tokens": 177, "duration": 6.22663426399231}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    filtered_arr.sort()\n    filtered_arr.reverse()\n    result = []\n    for num in filtered_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 1000, "completion_tokens": 358, "duration": 9.929588556289673}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    res = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            res.append(fact)\n        else:\n            res.append(sum(range(1, i+1)))\n    return res", "prompt_tokens": 580, "completion_tokens": 153, "duration": 7.3743896484375}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 6.378926515579224}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= int(str(num)[1])\n            for digit in str(num)[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in str(num):\n                sum_digits += int(digit)\n        \n        if sum_digits > 0:\n            count += 1\n\n    return count", "prompt_tokens": 620, "completion_tokens": 210, "duration": 6.5658369064331055}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    \n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    \n    for _ in range(len(arr)):\n        arr.insert(0, arr.pop())\n        if arr[min_idx] != min_val or is_sorted(arr):\n            return True\n    \n    return False", "prompt_tokens": 993, "completion_tokens": 237, "duration": 7.9751856327056885}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 6.435474634170532}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    max_count = max(counts.values())\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    return result", "prompt_tokens": 938, "completion_tokens": 461, "duration": 12.692880868911743}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    is_palindrome = True\n    start_index = 0\n    end_index = len(result) - 1\n    while start_index < end_index:\n        if result[start_index] != result[end_index]:\n            is_palindrome = False\n            break\n        start_index += 1\n        end_index -= 1\n    return (result, is_palindrome)", "prompt_tokens": 736, "completion_tokens": 262, "duration": 8.575449466705322}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for index, s in enumerate(lst):\n        odd_count = sum(1 for c in s if c.isdigit() and int(c) % 2 != 0)\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{index+1}ng {s} of the {index+1}nput.\")\n    return result_lst", "prompt_tokens": 746, "completion_tokens": 230, "duration": 7.7008702754974365}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 538, "completion_tokens": 168, "duration": 5.548271417617798}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    count = 0\n    total_water = sum(sum(row) for row in grid)\n    count = math.ceil(total_water / capacity)\n    return count", "prompt_tokens": 1027, "completion_tokens": 169, "duration": 6.117479085922241}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def custom_sort(num):\n        return bin(num).count('1'), num\n\n    return sorted(arr, key=custom_sort)", "prompt_tokens": 707, "completion_tokens": 143, "duration": 5.065419912338257}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 747, "completion_tokens": 199, "duration": 6.583431720733643}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    last_consonant_index = -1\n    \n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() not in vowels:\n            last_consonant_index = i\n        elif word[i].lower() in vowels:\n            if last_consonant_index != -1:\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel", "prompt_tokens": 725, "completion_tokens": 286, "duration": 8.130143404006958}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for ch in s:\n            if ch == '(':\n                count += 1\n            elif ch == ')':\n                count -= 1\n            if count < 0:\n                return 'No'\n    return 'Yes'", "prompt_tokens": 702, "completion_tokens": 176, "duration": 6.231537342071533}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    max_list = []\n    for i in range(k):\n        max_list.append(arr[i])\n    return max_list", "prompt_tokens": 776, "completion_tokens": 122, "duration": 4.950530529022217}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 527, "completion_tokens": 130, "duration": 5.283867120742798}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 5.731473207473755}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    if n == 1:\n        odd_collatz_list.append(1)\n\n    return sorted(odd_collatz_list)", "prompt_tokens": 833, "completion_tokens": 211, "duration": 5.07850456237793}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if not date:\n        return False\n    \n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = date_parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 964, "completion_tokens": 383, "duration": 11.206176280975342}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words_list = []\n    if ' ' in txt:\n        words_list = txt.split()\n    elif ',' in txt:\n        words_list = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        return count if not words_list else words_list\n    return words_list", "prompt_tokens": 752, "completion_tokens": 297, "duration": 9.01018238067627}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if num <= prev:\n            duplicate_count += 1\n            if duplicate_count > 1:\n                return False\n        prev = num\n    return True", "prompt_tokens": 931, "completion_tokens": 234, "duration": 9.956166982650757}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    \n    if max_start > min_end:\n        return \"NO\"\n    \n    length = min_end - max_start + 1\n    \n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 993, "completion_tokens": 347, "duration": 7.566565275192261}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= 1 if num > 0 else (-1 if num < 0 else 0)\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 629, "completion_tokens": 212, "duration": 6.430676221847534}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def neighbors(i, j):\n        for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]):\n                yield x, y\n\n    def within_bounds(i, j):\n        return 0 <= i < len(grid) and 0 <= j < len(grid[0])\n\n    def find_min_path(i, j, visited, path):\n        if len(path) == k:\n            nonlocal min_path\n            if not min_path or path < min_path:\n                min_path = path\n            return\n\n        for x, y in neighbors(i, j):\n            if (x, y) not in visited:\n                find_min_path(x, y, visited | {(x, y)}, path + [grid[x][y]])\n\n    min_path = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            find_min_path(i, j, {(i, j)}, [grid[i][j]])\n\n    return min_path\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]", "prompt_tokens": 1235, "completion_tokens": 509, "duration": 10.757920503616333}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci_seq = []\n    \n    if n == 0:\n        tribonacci_seq.append(0)\n    elif n == 1:\n        tribonacci_seq.append(1)\n    elif n == 2:\n        tribonacci_seq.append(1)\n    else:\n        tribonacci_seq.extend([0, 1, 1])\n        \n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci_seq.append(1 + i // 2)\n            else:\n                tribonacci_seq.append(tribonacci_seq[i - 1] + tribonacci_seq[i - 2] + tribonacci_seq[i - 3])\n    \n    return tribonacci_seq", "prompt_tokens": 916, "completion_tokens": 341, "duration": 11.938744306564331}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 483, "completion_tokens": 149, "duration": 5.106475114822388}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 646, "completion_tokens": 173, "duration": 10.885280847549438}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 5.563434362411499}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_letter = False\n    if not txt:\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    if not last_word:\n        is_last_char_letter = False\n    else:\n        last_char = last_word[-1]\n        if last_char.isalpha():\n            is_last_char_letter = True\n    return is_last_char_letter", "prompt_tokens": 684, "completion_tokens": 242, "duration": 10.533076047897339}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 539, "completion_tokens": 122, "duration": 4.4377055168151855}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    if not lst:\n        return (None, None)\n\n    largest_neg = None\n    smallest_pos = None\n\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n\n    return (largest_neg, smallest_pos)", "prompt_tokens": 664, "completion_tokens": 230, "duration": 7.12514591217041}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None", "prompt_tokens": 749, "completion_tokens": 319, "duration": 12.707012176513672}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    even_count = 0\n    for i in range(2, n//2 + 1, 2):\n        even_count += 1\n        n -= i\n        if even_count == 4 and n == 0:\n            return True\n    return False", "prompt_tokens": 526, "completion_tokens": 181, "duration": 10.219085693359375}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        temp = 1\n        for j in range(i, 0, -1):\n            temp *= j\n        result *= temp\n    return result", "prompt_tokens": 512, "completion_tokens": 123, "duration": 7.295208930969238}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text = new_text.rstrip() + \"-\"\n        else:\n            if count > 2:\n                new_text = new_text.rstrip() + \"-\"\n                count = 0\n            new_text += ch.replace(\" \", \"_\")\n    return new_text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 624, "completion_tokens": 313, "duration": 9.642197132110596}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    digits_count = sum(1 for char in file_name if char.isdigit())\n    dot_index = file_name.find('.')\n    \n    if digits_count > 3 or dot_index == -1:\n        return 'No'\n    \n    file_name_parts = file_name.split('.')\n    if len(file_name_parts) != 2:\n        return 'No'\n    \n    before_dot = file_name_parts[0]\n    after_dot = file_name_parts[1]\n    \n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 835, "completion_tokens": 296, "duration": 9.320818185806274}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 699, "completion_tokens": 184, "duration": 6.368467092514038}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "prompt_tokens": 698, "completion_tokens": 238, "duration": 11.042498350143433}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_denom * n_denom)\n    \n    return product.is_integer()", "prompt_tokens": 689, "completion_tokens": 184, "duration": 10.131987810134888}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    digit_sums = {}\n    for i, num in enumerate(nums):\n        digit_sums[i] = sum(int(d) for d in str(abs(num)))\n    sorted_indices = sorted(digit_sums, key=lambda x: (digit_sums[x], x))\n    return [nums[i] for i in sorted_indices]", "prompt_tokens": 639, "completion_tokens": 226, "duration": 9.6255943775177}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 605, "completion_tokens": 197, "duration": 8.237301349639893}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 244, "duration": 10.636860370635986}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    result = planets[start_idx+1:end_idx]\n    result.sort(key=lambda x: planets.index(x))\n    \n    return tuple(result)", "prompt_tokens": 857, "completion_tokens": 312, "duration": 10.952355861663818}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 725, "completion_tokens": 140, "duration": 7.54311728477478}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return None\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        return x", "prompt_tokens": 497, "completion_tokens": 119, "duration": 7.59166407585144}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 612, "completion_tokens": 143, "duration": 9.757149934768677}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 807, "completion_tokens": 141, "duration": 6.296045541763306}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 944, "completion_tokens": 232, "duration": 8.77713131904602}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    a_concat = a + a\n    for i in range(n):\n        s = a_concat[i:i+n]\n        if b in s:\n            return True\n    return False", "prompt_tokens": 644, "completion_tokens": 182, "duration": 10.067538499832153}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 135, "duration": 7.996148586273193}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        'M': 1000, 'CM': 900, 'D': 500, 'CD': 400,\n        'C': 100, 'XC': 90, 'L': 50, 'XL': 40,\n        'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1\n    }\n    \n    roman_numeral = ''\n    roman_values = [('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n                    ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n                    ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)]\n    \n    for roman, value in roman_values:\n        while number >= value:\n            roman_numeral += roman\n            number -= value\n            \n    return roman_numeral.lower()", "prompt_tokens": 590, "completion_tokens": 356, "duration": 11.985436201095581}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 541, "completion_tokens": 120, "duration": 9.093063116073608}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word", "prompt_tokens": 600, "completion_tokens": 189, "duration": 9.191304683685303}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + remaining\n    remaining_carrots = remaining - (need - number)\n    if remaining_carrots < 0:\n        remaining_carrots = 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 933, "completion_tokens": 184, "duration": 7.134573698043823}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 856, "completion_tokens": 293, "duration": 12.856340408325195}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            has_letter = True\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 588, "completion_tokens": 196, "duration": 9.717358112335205}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    \n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.330049276351929}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    \n    if a > b:\n        a, b = b, a\n    \n    for num in range(a, b+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    \n    return even_digits", "prompt_tokens": 533, "completion_tokens": 130, "duration": 7.383793830871582}
