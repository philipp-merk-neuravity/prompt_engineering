{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 166, "completion_tokens": 61, "duration": 2.041238784790039}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string):\n    result = []\n    count = 0\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n            current_group += char\n        elif char == ')':\n            count -= 1\n            current_group += char\n            if count == 0:\n                result.append(current_group)\n                current_group = ''\n    \n    return result", "prompt_tokens": 157, "completion_tokens": 94, "duration": 6.619027614593506}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 127, "completion_tokens": 17, "duration": 2.924252510070801}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 161, "completion_tokens": 42, "duration": 1.8974435329437256}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 159, "completion_tokens": 54, "duration": 2.0728869438171387}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result", "prompt_tokens": 134, "completion_tokens": 58, "duration": 2.063060998916626}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n        if char == ' ':\n            depths.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n\n    depths.append(max_depth)\n\n    return depths", "prompt_tokens": 154, "completion_tokens": 123, "duration": 3.245798349380493}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]", "prompt_tokens": 135, "completion_tokens": 26, "duration": 1.3564040660858154}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    \n    return (total_sum, total_product)", "prompt_tokens": 152, "completion_tokens": 74, "duration": 2.2665319442749023}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_numbers = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        max_numbers.append(current_max)\n    \n    return max_numbers", "prompt_tokens": 142, "completion_tokens": 59, "duration": 1.9760565757751465}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]", "prompt_tokens": 184, "completion_tokens": 81, "duration": 2.542801856994629}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 118, "completion_tokens": 58, "duration": 2.0476551055908203}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings):\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)", "prompt_tokens": 144, "completion_tokens": 46, "duration": 1.7921550273895264}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 112, "completion_tokens": 32, "duration": 1.5982623100280762}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(1, len(string)+1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Test the function\nprint(all_prefixes('abc'))", "prompt_tokens": 101, "completion_tokens": 57, "duration": 1.7517979145050049}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n):\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 110, "completion_tokens": 18, "duration": 1.1918284893035889}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string):\n    return len(set(string.lower()))", "prompt_tokens": 112, "completion_tokens": 14, "duration": 1.116957187652588}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    result = [durations[note] for note in notes]\n    return result", "prompt_tokens": 214, "completion_tokens": 64, "duration": 1.969472885131836}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string, substring):\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # 0\nprint(how_many_times('aaa', 'a'))  # 3\nprint(how_many_times('aaaa', 'aa'))  # 3", "prompt_tokens": 130, "completion_tokens": 114, "duration": 4.549563884735107}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 147, "completion_tokens": 106, "duration": 2.635420799255371}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result", "prompt_tokens": 208, "completion_tokens": 98, "duration": 3.870863914489746}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers", "prompt_tokens": 165, "completion_tokens": 53, "duration": 1.8666603565216064}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]", "prompt_tokens": 133, "completion_tokens": 34, "duration": 3.0423641204833984}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string):\n    return len(string)", "prompt_tokens": 85, "completion_tokens": 9, "duration": 0.9205176830291748}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "prompt_tokens": 94, "completion_tokens": 43, "duration": 3.214182138442993}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 168, "completion_tokens": 70, "duration": 3.6401093006134033}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "prompt_tokens": 126, "completion_tokens": 25, "duration": 4.906565427780151}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])", "prompt_tokens": 90, "completion_tokens": 36, "duration": 5.093635559082031}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 99, "completion_tokens": 21, "duration": 4.815798044204712}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 129, "completion_tokens": 35, "duration": 2.8311758041381836}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l):\n    return [num for num in l if num > 0]", "prompt_tokens": 155, "completion_tokens": 19, "duration": 2.7483530044555664}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))  # False\nprint(is_prime(101))  # True\nprint(is_prime(11))  # True\nprint(is_prime(13441))  # True\nprint(is_prime(61))  # True\nprint(is_prime(4))  # False\nprint(is_prime(1))  # False", "prompt_tokens": 141, "completion_tokens": 172, "duration": 7.51648211479187}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    n = len(xs) - 1\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    if n == 2:\n        return -b / (2 * a)\n    elif n == 4:\n        D = b**2 - 4 * a * c\n        x1 = (-b + math.sqrt(D)) / (2 * a)\n        x2 = (-b - math.sqrt(D)) / (2 * a)\n        if poly(xs, x1) == 0:\n            return x1\n        else:\n            return x2", "prompt_tokens": 301, "completion_tokens": 166, "duration": 4.994085073471069}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    result = l.copy()\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    return result", "prompt_tokens": 192, "completion_tokens": 83, "duration": 5.820859909057617}
{"task_id": "HumanEval/34", "generated_code": "def unique(l):\n    return sorted(list(set(l)))", "prompt_tokens": 115, "completion_tokens": 11, "duration": 2.471740961074829}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l):\n    return max(l)", "prompt_tokens": 124, "completion_tokens": 10, "duration": 4.630750417709351}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n):\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3", "prompt_tokens": 121, "completion_tokens": 104, "duration": 3.6939027309417725}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]\n    return result", "prompt_tokens": 165, "completion_tokens": 67, "duration": 3.106982469558716}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 200, "completion_tokens": 162, "duration": 5.59640097618103}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    def is_fib(num):\n        a, b = 0, 1\n        while a < num:\n            a, b = b, a + b\n        return a == num\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_fib(num) and is_prime(num):\n            count += 1\n        num += 1\n    return num - 1", "prompt_tokens": 139, "completion_tokens": 148, "duration": 4.3569512367248535}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    n = len(l)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "prompt_tokens": 201, "completion_tokens": 70, "duration": 3.332827568054199}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n):\n    return n * (n - 1) // 2", "prompt_tokens": 193, "completion_tokens": 24, "duration": 4.729721784591675}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l):\n    return [x + 1 for x in l]", "prompt_tokens": 150, "completion_tokens": 21, "duration": 4.595485687255859}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 199, "completion_tokens": 37, "duration": 4.706484794616699}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result", "prompt_tokens": 133, "completion_tokens": 67, "duration": 3.3385682106018066}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h\n\n# Test the function\nprint(triangle_area(5, 3))", "prompt_tokens": 88, "completion_tokens": 33, "duration": 2.876875877380371}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d", "prompt_tokens": 213, "completion_tokens": 112, "duration": 3.1664130687713623}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]", "prompt_tokens": 117, "completion_tokens": 62, "duration": 5.71087908744812}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text):\n    return text == text[::-1]", "prompt_tokens": 113, "completion_tokens": 14, "duration": 3.004667043685913}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    return pow(2, n, p)", "prompt_tokens": 147, "completion_tokens": 21, "duration": 1.3828957080841064}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 132, "completion_tokens": 82, "duration": 4.463598012924194}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 164, "completion_tokens": 37, "duration": 3.462120294570923}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    return all(num < t for num in l)", "prompt_tokens": 121, "completion_tokens": 18, "duration": 1.3975417613983154}
{"task_id": "HumanEval/53", "generated_code": "def add(x, y):\n    return x + y\n\n# Test the function with given test cases\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12", "prompt_tokens": 95, "completion_tokens": 50, "duration": 3.5049500465393066}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0, s1):\n    return sorted(s0) == sorted(s1)", "prompt_tokens": 182, "completion_tokens": 20, "duration": 4.924475193023682}
{"task_id": "HumanEval/55", "generated_code": "def fib(n):\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)", "prompt_tokens": 94, "completion_tokens": 31, "duration": 1.6116836071014404}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False", "prompt_tokens": 134, "completion_tokens": 111, "duration": 2.9302213191986084}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 129, "completion_tokens": 52, "duration": 1.952636480331421}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 156, "completion_tokens": 21, "duration": 1.4572365283966064}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2", "prompt_tokens": 105, "completion_tokens": 84, "duration": 2.444626808166504}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n):\n    return n * (n + 1) // 2", "prompt_tokens": 136, "completion_tokens": 24, "duration": 1.4671282768249512}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False", "prompt_tokens": 131, "completion_tokens": 110, "duration": 6.288571119308472}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 150, "completion_tokens": 22, "duration": 1.1917903423309326}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24", "prompt_tokens": 191, "completion_tokens": 138, "duration": 6.655171632766724}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i > 0 and s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n# Add more test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"hello\"))  # 2\nprint(vowels_count(\"python\"))  # 1\nprint(vowels_count(\"programming\"))  # 3", "prompt_tokens": 168, "completion_tokens": 153, "duration": 3.640231132507324}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 124, "completion_tokens": 55, "duration": 1.964505910873413}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 154, "completion_tokens": 20, "duration": 1.391995906829834}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges", "prompt_tokens": 252, "completion_tokens": 32, "duration": 1.5210003852844238}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = float('inf')\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_index = i\n        elif arr[i] % 2 == 0 and arr[i] == smallest_even and i < smallest_index:\n            smallest_index = i\n    \n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]", "prompt_tokens": 354, "completion_tokens": 121, "duration": 3.653515338897705}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    max_val = -1\n    for num in set(lst):\n        if num > 0 and lst.count(num) >= num:\n            max_val = max(max_val, num)\n    return max_val", "prompt_tokens": 207, "completion_tokens": 46, "duration": 5.157603025436401}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 166, "completion_tokens": 44, "duration": 1.5915627479553223}
{"task_id": "HumanEval/71", "generated_code": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 163, "completion_tokens": 87, "duration": 2.8337771892547607}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False", "prompt_tokens": 272, "completion_tokens": 34, "duration": 1.345780611038208}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count", "prompt_tokens": 199, "completion_tokens": 55, "duration": 1.7828612327575684}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1", "prompt_tokens": 235, "completion_tokens": 88, "duration": 3.5840883255004883}
{"task_id": "HumanEval/75", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            count += 1\n    return count == 3\n\n# Test the function\nprint(is_multiply_prime(30))  # Output: True", "prompt_tokens": 121, "completion_tokens": 119, "duration": 6.6409337520599365}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return n == 1\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False", "prompt_tokens": 184, "completion_tokens": 137, "duration": 4.592908143997192}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)", "prompt_tokens": 152, "completion_tokens": 29, "duration": 4.859938144683838}
{"task_id": "HumanEval/78", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count", "prompt_tokens": 341, "completion_tokens": 111, "duration": 4.404857635498047}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "prompt_tokens": 181, "completion_tokens": 25, "duration": 4.44803786277771}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "prompt_tokens": 163, "completion_tokens": 71, "duration": 3.3626511096954346}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))", "prompt_tokens": 312, "completion_tokens": 274, "duration": 9.2228262424469}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False", "prompt_tokens": 123, "completion_tokens": 168, "duration": 6.49655556678772}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count", "prompt_tokens": 86, "completion_tokens": 59, "duration": 4.852344512939453}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    return bin(sum(int(digit) for digit in str(N)))[2:]", "prompt_tokens": 175, "completion_tokens": 21, "duration": 2.477517604827881}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 97, "completion_tokens": 34, "duration": 4.665067672729492}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "prompt_tokens": 172, "completion_tokens": 52, "duration": 2.936734199523926}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "prompt_tokens": 301, "completion_tokens": 68, "duration": 4.893145322799683}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 245, "completion_tokens": 57, "duration": 3.0181570053100586}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * ord(char) - 2\n            if char.islower():\n                result += chr((shift - ord('a')) % 26 + ord('a'))\n            else:\n                result += chr((shift - ord('A')) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "prompt_tokens": 152, "completion_tokens": 96, "duration": 3.7554492950439453}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]", "prompt_tokens": 166, "completion_tokens": 48, "duration": 2.773111343383789}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    \n    return count", "prompt_tokens": 149, "completion_tokens": 57, "duration": 4.7526092529296875}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "prompt_tokens": 177, "completion_tokens": 127, "duration": 3.5960543155670166}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2).swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    \n    return encoded_message\n\n# Test cases\nprint(encode('test'))\nprint(encode('This is a message'))", "prompt_tokens": 151, "completion_tokens": 99, "duration": 3.192171812057495}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime) if max_prime != 0 else 0", "prompt_tokens": 328, "completion_tokens": 130, "duration": 2.7862157821655273}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    lower_case_keys = all(key.islower() for key in dict.keys())\n    upper_case_keys = all(key.isupper() for key in dict.keys())\n    \n    return lower_case_keys or upper_case_keys", "prompt_tokens": 211, "completion_tokens": 57, "duration": 1.9312098026275635}
{"task_id": "HumanEval/96", "generated_code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 187, "completion_tokens": 92, "duration": 1.7518811225891113}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a % 10 * b % 10)", "prompt_tokens": 140, "completion_tokens": 19, "duration": 4.9748334884643555}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # 1\nprint(count_upper('abcdefg'))  # 0\nprint(count_upper('dBBE'))  # 0", "prompt_tokens": 114, "completion_tokens": 99, "duration": 2.8756725788116455}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "prompt_tokens": 198, "completion_tokens": 45, "duration": 1.0050673484802246}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 174, "completion_tokens": 60, "duration": 5.494632959365845}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = s.replace(\",\", \" \").split()\n    return words", "prompt_tokens": 158, "completion_tokens": 18, "duration": 1.359060287475586}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0 and i > max_even:\n            max_even = i\n    return max_even", "prompt_tokens": 136, "completion_tokens": 55, "duration": 5.413957834243774}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 182, "completion_tokens": 36, "duration": 1.4671196937561035}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    return sorted([num for num in x if not has_even_digit(num)])", "prompt_tokens": 144, "completion_tokens": 56, "duration": 1.8889164924621582}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered_arr = [num for num in arr if num in valid_nums]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = []\n    for num in reversed_arr:\n        if num == 1:\n            result.append(\"One\")\n        elif num == 2:\n            result.append(\"Two\")\n        elif num == 3:\n            result.append(\"Three\")\n        elif num == 4:\n            result.append(\"Four\")\n        elif num == 5:\n            result.append(\"Five\")\n        elif num == 6:\n            result.append(\"Six\")\n        elif num == 7:\n            result.append(\"Seven\")\n        elif num == 8:\n            result.append(\"Eight\")\n        elif num == 9:\n            result.append(\"Nine\")\n    return result", "prompt_tokens": 318, "completion_tokens": 200, "duration": 7.4983391761779785}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 166, "completion_tokens": 82, "duration": 5.629562616348267}
{"task_id": "HumanEval/107", "generated_code": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 253, "completion_tokens": 94, "duration": 2.6682238578796387}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 166, "completion_tokens": 60, "duration": 5.4169721603393555}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False", "prompt_tokens": 341, "completion_tokens": 67, "duration": 5.13474440574646}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    return \"YES\" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else \"NO\"", "prompt_tokens": 239, "completion_tokens": 47, "duration": 1.6370329856872559}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    counts = {}\n    max_count = 0\n    \n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n        max_count = max(max_count, counts[letter])\n    \n    result = {key: value for key, value in counts.items() if value == max_count}\n    \n    return result", "prompt_tokens": 193, "completion_tokens": 82, "duration": 5.444549322128296}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    return (s, s == s[::-1])", "prompt_tokens": 204, "completion_tokens": 35, "duration": 4.8039655685424805}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for string in lst:\n        count = sum(1 for digit in string if int(digit) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {string} of the {count}nput.\")\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', '11111111']))", "prompt_tokens": 215, "completion_tokens": 97, "duration": 2.4896321296691895}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 130, "completion_tokens": 60, "duration": 5.123589754104614}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 365, "completion_tokens": 33, "duration": 4.7323853969573975}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 212, "completion_tokens": 28, "duration": 1.3389818668365479}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for letter in word if letter in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result", "prompt_tokens": 223, "completion_tokens": 87, "duration": 5.723904848098755}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"", "prompt_tokens": 191, "completion_tokens": 94, "duration": 2.0830044746398926}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    count = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return 'No'\n                count -= 1\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 210, "completion_tokens": 78, "duration": 2.1592633724212646}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort()\n    return arr[-k:] if k > 0 else []", "prompt_tokens": 259, "completion_tokens": 23, "duration": 4.678934574127197}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)", "prompt_tokens": 139, "completion_tokens": 34, "duration": 1.800828218460083}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    total = 0\n    count = 0\n    for num in arr[:k]:\n        if 10 <= num <= 99:\n            total += num\n            count += 1\n    return total", "prompt_tokens": 170, "completion_tokens": 51, "duration": 1.5372388362884521}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 == 1:\n            result.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    result.append(1)\n    return sorted(result)", "prompt_tokens": 273, "completion_tokens": 69, "duration": 1.948305368423462}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True", "prompt_tokens": 305, "completion_tokens": 209, "duration": 4.241272449493408}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)", "prompt_tokens": 182, "completion_tokens": 60, "duration": 1.4163720607757568}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted(lst)", "prompt_tokens": 291, "completion_tokens": 26, "duration": 4.516952753067017}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start + 1\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 296, "completion_tokens": 201, "duration": 7.749656677246094}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes", "prompt_tokens": 164, "completion_tokens": 75, "duration": 1.7716648578643799}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        \n        visited.add((i, j))\n        next_cells = []\n        for dx, dy in directions:\n            x, y = i + dx, j + dy\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                next_cells.append((grid[x][y], x, y))\n        \n        next_cells.sort()\n        for val, x, y in next_cells:\n            res = dfs(x, y, path + [val])\n            if res:\n                return res\n        \n        visited.remove((i, j))\n    \n    for i in range(n):\n        for j in range(n):\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 438, "completion_tokens": 227, "duration": 8.110803604125977}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    tribonacci = [3]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i+1])\n    return tribonacci", "prompt_tokens": 277, "completion_tokens": 77, "duration": 1.6863276958465576}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    return product\n\n# Test cases\nprint(digits(1))  # 1\nprint(digits(4))  # 0\nprint(digits(235))  # 15", "prompt_tokens": 113, "completion_tokens": 95, "duration": 2.435901165008545}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack and stack[-1] == '[':\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "prompt_tokens": 175, "completion_tokens": 153, "duration": 6.744024753570557}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    return sum([int(x) ** 2 for x in lst])", "prompt_tokens": 199, "completion_tokens": 21, "duration": 4.443493127822876}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (len(txt) == 1 or txt[-2] == \" \"):\n        return True\n    else:\n        return False", "prompt_tokens": 179, "completion_tokens": 61, "duration": 1.8344612121582031}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index", "prompt_tokens": 145, "completion_tokens": 53, "duration": 1.094057321548462}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n    \n    largest_neg = None if len(neg_integers) == 0 else max(neg_integers)\n    smallest_pos = None if len(pos_integers) == 0 else min(pos_integers)\n    \n    return (largest_neg, smallest_pos)", "prompt_tokens": 180, "completion_tokens": 96, "duration": 5.534491777420044}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        return a if type(a) == str else b if type(b) == str else None\n\n# Test cases\nprint(compare_one(1, 2.5))\nprint(compare_one(1, \"2,3\"))\nprint(compare_one(\"5,1\", \"6\"))\nprint(compare_one(\"1\", 1))", "prompt_tokens": 183, "completion_tokens": 112, "duration": 2.5625991821289062}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n % 2 != 0:\n        return False\n    if n < 8:\n        return False\n    return True", "prompt_tokens": 119, "completion_tokens": 36, "duration": 1.245011568069458}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        result *= factorial\n    return result\n\n# Test the function\nprint(special_factorial(4))", "prompt_tokens": 137, "completion_tokens": 69, "duration": 2.1615118980407715}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = \"\"\n    count = 0\n    for char in text:\n        if char == \" \":\n            count += 1\n            if count > 2:\n                result = result[:-2] + \"-\"\n                count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            count = 0\n    return result\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "prompt_tokens": 148, "completion_tokens": 147, "duration": 3.3880553245544434}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if len(extension) != 3 or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    if sum(1 for char in name if char.isdigit()) > 3:\n        return 'No'\n    \n    return 'Yes'", "prompt_tokens": 256, "completion_tokens": 107, "duration": 2.549306631088257}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total", "prompt_tokens": 212, "completion_tokens": 68, "duration": 5.2288291454315186}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_word_length(word):\n        return len(word)\n\n    def filter_prime_length_words(words):\n        return [word for word in words if is_prime(get_word_length(word))]\n\n    words = sentence.split()\n    prime_length_words = filter_prime_length_words(words)\n    return ' '.join(prime_length_words)", "prompt_tokens": 189, "completion_tokens": 127, "duration": 3.306663751602173}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    result = x_num * n_num / (x_den * n_den)\n    \n    return result.is_integer()", "prompt_tokens": 197, "completion_tokens": 58, "duration": 2.9913558959960938}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 157, "completion_tokens": 32, "duration": 5.02574896812439}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(num):\n        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2", "prompt_tokens": 161, "completion_tokens": 129, "duration": 2.6415445804595947}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        for j in range(i+1, n+1):\n            a_j = j * j - j + 1\n            for k in range(j+1, n+1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 207, "completion_tokens": 123, "duration": 2.6316585540771484}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple(planet for planet in planets[start_idx+1:end_idx])", "prompt_tokens": 253, "completion_tokens": 125, "duration": 2.340679407119751}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))", "prompt_tokens": 229, "completion_tokens": 36, "duration": 4.688237905502319}
{"task_id": "HumanEval/150", "generated_code": "def x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 128, "completion_tokens": 57, "duration": 1.5983428955078125}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0) if lst else 0", "prompt_tokens": 179, "completion_tokens": 35, "duration": 1.232285737991333}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]", "prompt_tokens": 272, "completion_tokens": 35, "duration": 4.581358909606934}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest_extension = max(extensions, key=lambda x: (strength(x), extensions.index(x)))\n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 319, "completion_tokens": 77, "duration": 2.02058482170105}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    return b in double_a\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "prompt_tokens": 171, "completion_tokens": 133, "duration": 2.5308499336242676}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)", "prompt_tokens": 107, "completion_tokens": 85, "duration": 2.2014081478118896}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()", "prompt_tokens": 143, "completion_tokens": 138, "duration": 2.7517166137695312}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False", "prompt_tokens": 150, "completion_tokens": 54, "duration": 1.4316000938415527}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    \n    return max_word", "prompt_tokens": 162, "completion_tokens": 73, "duration": 2.205914258956909}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]", "prompt_tokens": 319, "completion_tokens": 47, "duration": 1.087475061416626}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)", "prompt_tokens": 249, "completion_tokens": 44, "duration": 4.902978420257568}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if result.isalpha():\n        return result.swapcase()\n    else:\n        return result[::-1]", "prompt_tokens": 149, "completion_tokens": 74, "duration": 4.968362331390381}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 118, "completion_tokens": 32, "duration": 1.0771212577819824}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []", "prompt_tokens": 146, "completion_tokens": 109, "duration": 5.906734228134155}
