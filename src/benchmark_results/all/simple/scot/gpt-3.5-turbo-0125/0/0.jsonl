{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    result = False\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            result = True\n            break\n    return result", "prompt_tokens": 639, "completion_tokens": 204, "duration": 7.653319358825684}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    current_group = \"\"\n    open_braces = 0\n    \n    for char in paren_string:\n        if char == '(':\n            open_braces += 1\n        elif char == ')' and open_braces > 0:\n            current_group += char\n            open_braces -= 1\n            if open_braces == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        elif char != ' ':\n            current_group += char\n    \n    return groups", "prompt_tokens": 685, "completion_tokens": 319, "duration": 11.11264157295227}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "prompt_tokens": 500, "completion_tokens": 104, "duration": 8.923077583312988}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 557, "completion_tokens": 111, "duration": 5.955758571624756}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    sum_abs_diff = sum(abs(num - mean) for num in numbers)\n    mad = sum_abs_diff / len(numbers)\n    return mad", "prompt_tokens": 659, "completion_tokens": 226, "duration": 13.061621904373169}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimiter)\n    return result", "prompt_tokens": 525, "completion_tokens": 144, "duration": 7.801002025604248}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    depths = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                max_depth = max(max_depth, current_depth)\n                current_depth -= 1\n        \n        depths.append(max_depth)\n    \n    return depths", "prompt_tokens": 683, "completion_tokens": 308, "duration": 9.801774978637695}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 506, "completion_tokens": 109, "duration": 8.894141435623169}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    \n    if not numbers:\n        return (sum_result, product_result)\n    \n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    \n    return (sum_result, product_result)", "prompt_tokens": 557, "completion_tokens": 158, "duration": 9.393227577209473}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    for num in numbers:\n        if not rolling_max_list:\n            rolling_max_list.append(num)\n        elif num >= rolling_max_list[-1]:\n            rolling_max_list.append(num)\n        else:\n            rolling_max_list.append(rolling_max_list[-1])\n    return rolling_max_list", "prompt_tokens": 592, "completion_tokens": 217, "duration": 6.775935411453247}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]", "prompt_tokens": 643, "completion_tokens": 122, "duration": 7.082467555999756}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result", "prompt_tokens": 502, "completion_tokens": 147, "duration": 10.335072994232178}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str) or (len(string) == len(longest_str) and string < longest_str):\n            longest_str = string\n\n    return longest_str", "prompt_tokens": 583, "completion_tokens": 202, "duration": 9.6154043674469}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 448, "completion_tokens": 90, "duration": 6.896856307983398}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes", "prompt_tokens": 460, "completion_tokens": 128, "duration": 7.603165149688721}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    sequence = \"\"\n    for i in range(n+1):\n        sequence += str(i)\n        if i != n:\n            sequence += \" \"\n    return sequence", "prompt_tokens": 458, "completion_tokens": 104, "duration": 5.102158784866333}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    unique_chars = set()\n    string = string.lower()\n    for char in string:\n        if char.isalpha():\n            unique_chars.add(char)\n    return len(unique_chars)", "prompt_tokens": 485, "completion_tokens": 136, "duration": 7.276201486587524}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_list = []\n    notes = music_string.split()\n    for note in notes:\n        if note == 'o':\n            beats_list.append(4)\n        elif note == 'o|':\n            beats_list.append(2)\n        elif note == '.|':\n            beats_list.append(1)\n    return beats_list", "prompt_tokens": 733, "completion_tokens": 216, "duration": 8.57606816291809}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 515, "completion_tokens": 142, "duration": 6.695943117141724}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    numeral_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_list = numbers.split()\n    sorted_numerals = sorted(numeral_list, key=lambda x: numeral_dict[x])\n    return ' '.join(sorted_numerals)", "prompt_tokens": 594, "completion_tokens": 241, "duration": 10.119523763656616}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i-1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i-1], numbers[i])\n    \n    return closest_pair", "prompt_tokens": 721, "completion_tokens": 230, "duration": 11.107863903045654}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_value = min(numbers)\n    max_value = max(numbers)\n    range_value = max_value - min_value\n    rescaled_numbers = [(num - min_value) / range_value for num in numbers]\n    return rescaled_numbers", "prompt_tokens": 624, "completion_tokens": 190, "duration": 8.277549028396606}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    integers = []\n    for value in values:\n        if isinstance(value, int):\n            integers.append(value)\n    return integers", "prompt_tokens": 498, "completion_tokens": 105, "duration": 7.032951593399048}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    length = 0\n    for ch in string:\n        length += 1\n    return length", "prompt_tokens": 403, "completion_tokens": 86, "duration": 7.394442319869995}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    divisor = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            divisor = i\n    return divisor", "prompt_tokens": 424, "completion_tokens": 114, "duration": 5.28584885597229}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "prompt_tokens": 621, "completion_tokens": 178, "duration": 9.652875185012817}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    result = []\n    seen = set()\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result", "prompt_tokens": 491, "completion_tokens": 121, "duration": 7.484042406082153}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    result = \"\"\n    for ch in string:\n        if ch.islower():\n            result += ch.upper()\n        elif ch.isupper():\n            result += ch.lower()\n        else:\n            result += ch\n    return result", "prompt_tokens": 438, "completion_tokens": 141, "duration": 5.820335626602173}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    concatenated_string = ''\n    for string in strings:\n        concatenated_string += string\n    return concatenated_string", "prompt_tokens": 425, "completion_tokens": 91, "duration": 7.462589740753174}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.startswith(prefix):\n            filtered_strings.append(string)\n    return filtered_strings", "prompt_tokens": 497, "completion_tokens": 116, "duration": 7.783781051635742}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    positive_nums = []\n    for num in l:\n        if num > 0:\n            positive_nums.append(num)\n    return positive_nums", "prompt_tokens": 538, "completion_tokens": 91, "duration": 4.38800048828125}
{"task_id": "HumanEval/31", "generated_code": "import math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "prompt_tokens": 547, "completion_tokens": 173, "duration": 8.66170620918274}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 0 and max(xs) != 0:\n        zero_point = None\n        for x in range(-1000, 1001):\n            if math.isclose(poly(xs, x), 0, abs_tol=1e-9):\n                zero_point = x\n                break\n        return zero_point", "prompt_tokens": 924, "completion_tokens": 262, "duration": 9.927770614624023}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 3 != 0:\n            result.append(v)\n        else:\n            temp = l[i:i+3]\n            temp.sort()\n            result.extend(temp)\n    return result", "prompt_tokens": 685, "completion_tokens": 189, "duration": 6.792464017868042}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    unique_list.sort()\n    return unique_list", "prompt_tokens": 459, "completion_tokens": 98, "duration": 6.324187755584717}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num", "prompt_tokens": 532, "completion_tokens": 150, "duration": 7.945382833480835}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            for ch in str(i):\n                if ch == '7':\n                    count += 1\n    return count", "prompt_tokens": 520, "completion_tokens": 171, "duration": 9.526409387588501}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    result = []\n    for i, v in enumerate(l):\n        if i % 2 == 0:\n            result.extend(sorted(l[i:]))\n        else:\n            result.append(v)\n    return result", "prompt_tokens": 620, "completion_tokens": 168, "duration": 9.511451005935669}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "prompt_tokens": 762, "completion_tokens": 269, "duration": 8.929079294204712}
{"task_id": "HumanEval/39", "generated_code": "def prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def calculate_next_fibonacci(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    num = 1\n\n    while count < n:\n        num = calculate_next_fibonacci(num)\n        if is_prime(num):\n            count += 1\n\n    return num", "prompt_tokens": 558, "completion_tokens": 254, "duration": 6.728445768356323}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 728, "completion_tokens": 253, "duration": 12.495534420013428}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int):\n    collisions = 0\n    for car in range(1, n+1):\n        collisions += car\n    return collisions", "prompt_tokens": 637, "completion_tokens": 113, "duration": 5.220685958862305}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    new_list = [num + 1 for num in l]\n    return new_list", "prompt_tokens": 533, "completion_tokens": 86, "duration": 4.373159170150757}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen_elements = set()\n    for num in l:\n        if -num in seen_elements:\n            return True\n        seen_elements.add(num)\n    return False", "prompt_tokens": 665, "completion_tokens": 135, "duration": 7.591595649719238}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int):\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result", "prompt_tokens": 544, "completion_tokens": 147, "duration": 8.771491765975952}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    area = 0.5 * a * h\n    return area", "prompt_tokens": 391, "completion_tokens": 60, "duration": 6.872464418411255}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    fib4_list = [0, 0, 2, 0]\n    if n < 4:\n        return fib4_list[n]\n    for i in range(4, n+1):\n        fib4_next = sum(fib4_list)\n        fib4_list.pop(0)\n        fib4_list.append(fib4_next)\n    return fib4_list[-1]", "prompt_tokens": 730, "completion_tokens": 219, "duration": 11.795117378234863}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 493, "completion_tokens": 146, "duration": 6.169332265853882}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str):\n    reversed_text = text[::-1]\n    return text == reversed_text", "prompt_tokens": 502, "completion_tokens": 127, "duration": 8.350511074066162}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int):\n    return pow(2, n, p)", "prompt_tokens": 505, "completion_tokens": 59, "duration": 6.608571529388428}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "prompt_tokens": 591, "completion_tokens": 232, "duration": 12.70852780342102}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    result = ''\n    for ch in text:\n        if ch not in 'aeiouAEIOU':\n            result += ch\n    return result", "prompt_tokens": 597, "completion_tokens": 134, "duration": 9.457629919052124}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int):\n    return all(num < t for num in l)", "prompt_tokens": 472, "completion_tokens": 79, "duration": 8.945974349975586}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int):\n    result = x + y\n    return result", "prompt_tokens": 398, "completion_tokens": 51, "duration": 8.314574003219604}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    char_freq = {}\n    \n    for char in s0:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char in s1:\n        if char not in char_freq:\n            return False\n        else:\n            char_freq[char] -= 1\n    \n    return all(value == 0 for value in char_freq.values())", "prompt_tokens": 696, "completion_tokens": 262, "duration": 10.29700756072998}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n+1):\n        result = a + b\n        a = b\n        b = result\n    \n    return result", "prompt_tokens": 444, "completion_tokens": 157, "duration": 7.7164528369903564}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str):\n    count = 0\n    for ch in brackets:\n        if ch == \"<\":\n            count += 1\n        elif ch == \">\" and count > 0:\n            count -= 1\n        else:\n            return False\n    return count == 0", "prompt_tokens": 545, "completion_tokens": 169, "duration": 10.068106174468994}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 497, "completion_tokens": 120, "duration": 4.901947975158691}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele not in common_elements:\n            common_elements.append(ele)\n    return sorted(common_elements)", "prompt_tokens": 580, "completion_tokens": 144, "duration": 9.295902490615845}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    largest_prime_factor = 2\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n            largest_prime_factor = factor\n        else:\n            factor += 1\n    return largest_prime_factor", "prompt_tokens": 491, "completion_tokens": 173, "duration": 12.522995233535767}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "prompt_tokens": 492, "completion_tokens": 82, "duration": 7.529205083847046}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str):\n    stack = []\n    for ch in brackets:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "prompt_tokens": 536, "completion_tokens": 163, "duration": 4.279392957687378}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 560, "completion_tokens": 111, "duration": 7.458081245422363}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n\n    for i in range(3, n+1):\n        next_fibfib = fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3]\n        fibfib_list.append(next_fibfib)\n\n    return fibfib_list[n]", "prompt_tokens": 682, "completion_tokens": 243, "duration": 10.01112675666809}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "prompt_tokens": 606, "completion_tokens": 178, "duration": 8.480590581893921}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    str_x = str(x)\n    len_x = len(str_x)\n    if shift > len_x:\n        shift = shift % len_x\n    if shift == 0:\n        return str_x\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n    return shifted_str", "prompt_tokens": 549, "completion_tokens": 197, "duration": 9.208586692810059}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 538, "completion_tokens": 77, "duration": 4.691108226776123}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])\n    return n - apples - oranges", "prompt_tokens": 780, "completion_tokens": 143, "duration": 7.9201507568359375}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_value = float('inf')\n    smallest_index = -1\n    found_even = False\n    \n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n            found_even = True\n        elif node % 2 == 0 and node == smallest_value:\n            smallest_index = min(i, smallest_index)\n    \n    if found_even:\n        return [smallest_value, smallest_index]\n    else:\n        return []", "prompt_tokens": 1055, "completion_tokens": 290, "duration": 9.87976861000061}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq_map = {}\n    for num in lst:\n        if num not in freq_map:\n            freq_map[num] = 1\n        else:\n            freq_map[num] += 1\n\n    greatest_int = -1\n\n    for key in freq_map:\n        if key > 0 and freq_map[key] >= key and key > greatest_int:\n            greatest_int = key\n\n    return greatest_int", "prompt_tokens": 715, "completion_tokens": 216, "duration": 10.070574045181274}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    min_lst = []\n    max_lst = []\n    \n    for num in lst:\n        if len(min_lst) < len(max_lst):\n            sorted_lst.append(min(lst))\n            min_lst.append(num)\n        else:\n            sorted_lst.append(max(lst))\n            max_lst.append(num)\n    \n    return sorted_lst", "prompt_tokens": 640, "completion_tokens": 213, "duration": 6.090453863143921}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 604, "completion_tokens": 192, "duration": 6.8395209312438965}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    reversed_q = q[::-1]\n    if q != reversed_q:\n        return False\n    \n    sum_elements = sum(q)\n    if sum_elements > w:\n        return False\n    \n    return True", "prompt_tokens": 874, "completion_tokens": 207, "duration": 9.187904596328735}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    min_changes = 0\n    \n    while left <= right:\n        if arr[left] != arr[right]:\n            min_changes += 1\n        left += 1\n        right -= 1\n    \n    return min_changes", "prompt_tokens": 714, "completion_tokens": 211, "duration": 7.44557785987854}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2 or total_chars_lst1 == total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 765, "completion_tokens": 198, "duration": 12.011239767074585}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 100:\n        prime_factors = []\n        count = 0\n        for prime in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]:\n            if a % prime == 0:\n                prime_factors.append(prime)\n                count += 1\n            if count == 3:\n                return True\n        return False\n    else:\n        return False", "prompt_tokens": 613, "completion_tokens": 301, "duration": 6.626539468765259}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1 and n != 1:\n        return True\n    if x == 1 and n == 1:\n        return False\n    if x != 1 and n == 1:\n        return False\n\n    power = 1\n    while n**power <= x:\n        if n**power == x:\n            return True\n        power += 1\n\n    return False", "prompt_tokens": 639, "completion_tokens": 190, "duration": 7.363580703735352}
{"task_id": "HumanEval/77", "generated_code": "def iscube(a):\n    a = abs(a)\n    cube_root = 0\n    while cube_root**3 <= a:\n        if cube_root**3 == a:\n            return True\n        cube_root += 1\n    return False", "prompt_tokens": 579, "completion_tokens": 154, "duration": 5.834869623184204}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    count = 0\n    for digit in num:\n        if digit in ['2', '3', '5', '7', 'B', 'D']:\n            count += 1\n    return count", "prompt_tokens": 927, "completion_tokens": 121, "duration": 7.0303871631622314}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = \"db\"\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_str = str(remainder) + binary_str\n        decimal = decimal // 2\n    binary_str = binary_str + \"db\"\n    return binary_str", "prompt_tokens": 680, "completion_tokens": 208, "duration": 8.515280723571777}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True", "prompt_tokens": 592, "completion_tokens": 165, "duration": 9.468051195144653}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 1085, "completion_tokens": 530, "duration": 14.910500764846802}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    if len(string) <= 1:\n        return False\n    if len(string) == 2:\n        return True\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True", "prompt_tokens": 550, "completion_tokens": 201, "duration": 9.92821478843689}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    count = 0\n    for i in range(1, 10):\n        if i == 1:\n            count += 10 ** (n - 1)\n        else:\n            count += 2 * 10 ** (n - 2)\n    return count", "prompt_tokens": 445, "completion_tokens": 164, "duration": 5.907684326171875}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum = 0\n    for digit in str(N):\n        sum += int(digit)\n    return bin(sum)[2:]", "prompt_tokens": 611, "completion_tokens": 119, "duration": 8.221273183822632}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    sum_even_odd_idx = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum_even_odd_idx += lst[i]\n    return sum_even_odd_idx", "prompt_tokens": 448, "completion_tokens": 136, "duration": 8.668696641921997}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    ordered_s = ' '.join(ordered_words)\n    return ordered_s", "prompt_tokens": 616, "completion_tokens": 154, "duration": 8.152419567108154}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, r in enumerate(lst):\n        if x in r:\n            for j, v in enumerate(r):\n                if v == x:\n                    result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result", "prompt_tokens": 918, "completion_tokens": 216, "duration": 7.17945671081543}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    sorted_array = array.copy()\n    if (array[0] + array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array", "prompt_tokens": 875, "completion_tokens": 264, "duration": 11.975048303604126}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for ch in s:\n        index = alphabet.index(ch)\n        new_index = (index + 2*2) % len(alphabet)\n        encrypted_s += alphabet[new_index]\n    return encrypted_s", "prompt_tokens": 619, "completion_tokens": 201, "duration": 9.581082344055176}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    \n    if sorted_lst[0] == sorted_lst[1]:\n        for num in sorted_lst[1:]:\n            if num != sorted_lst[0]:\n                return num\n    else:\n        return sorted_lst[1]", "prompt_tokens": 595, "completion_tokens": 162, "duration": 8.262855768203735}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count", "prompt_tokens": 543, "completion_tokens": 125, "duration": 7.372175931930542}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False", "prompt_tokens": 609, "completion_tokens": 137, "duration": 6.00080132484436}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = \"\"\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            index = ord(ch.lower()) - ord('a')\n            new_index = (index + 2) % 26\n            new_ch = chr(ord('a') + new_index)\n            encoded_message += new_ch.upper()\n        elif ch.isalpha():\n            encoded_message += ch.swapcase()\n        else:\n            encoded_message += ch\n    return encoded_message", "prompt_tokens": 637, "completion_tokens": 262, "duration": 7.354815721511841}
{"task_id": "HumanEval/94", "generated_code": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    sum_digits = 0\n    while largest_prime > 0:\n        sum_digits += largest_prime % 10\n        largest_prime //= 10\n\n    return sum_digits", "prompt_tokens": 983, "completion_tokens": 283, "duration": 10.232332706451416}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    is_lower = False\n    is_upper = False\n    \n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            is_lower = True\n        elif key.isupper():\n            is_upper = True\n    \n    return is_lower != is_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # True", "prompt_tokens": 767, "completion_tokens": 365, "duration": 10.312689065933228}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "prompt_tokens": 635, "completion_tokens": 156, "duration": 5.381364583969116}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10", "prompt_tokens": 533, "completion_tokens": 103, "duration": 6.366785526275635}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "prompt_tokens": 465, "completion_tokens": 115, "duration": 6.79272198677063}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    value = float(value)\n    floor_val = int(value)\n    ceil_val = int(value) + 1\n    diff_floor = value - floor_val\n    diff_ceil = ceil_val - value\n    \n    if diff_floor <= diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "prompt_tokens": 695, "completion_tokens": 197, "duration": 6.74984073638916}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones_list = []\n    stones = n\n\n    for i in range(n):\n        stones_list.append(stones)\n        \n        if n % 2 == 1:\n            stones = stones + 2\n        else:\n            stones = stones + 1\n\n    return stones_list", "prompt_tokens": 603, "completion_tokens": 148, "duration": 8.355011224746704}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    words = []\n    current_word = \"\"\n    for c in s:\n        if c not in [',', ' ']:\n            current_word += c\n        elif current_word:\n            words.append(current_word)\n            current_word = \"\"\n    if current_word:\n        words.append(current_word)\n    return words", "prompt_tokens": 621, "completion_tokens": 200, "duration": 7.618337631225586}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    if x > y:\n        return -1\n    else:\n        largest_even = -1\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                largest_even = num\n                break\n        return largest_even", "prompt_tokens": 529, "completion_tokens": 150, "duration": 5.474539518356323}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        sum = 0\n        count = 0\n        for i in range(n, m+1):\n            sum += i\n            count += 1\n        avg = round(sum / count)\n        binary_avg = bin(avg)\n        return binary_avg", "prompt_tokens": 633, "completion_tokens": 171, "duration": 7.0293684005737305}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    result = []\n    for num in x:\n        has_even_digit = False\n        for ch in str(num):\n            if int(ch) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    \n    return sorted(result)", "prompt_tokens": 572, "completion_tokens": 180, "duration": 7.856750249862671}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    result = []\n    for num in sorted(arr):\n        if 1 <= num <= 9:\n            result.append([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num-1])\n    return result[::-1]", "prompt_tokens": 972, "completion_tokens": 230, "duration": 7.029990196228027}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "prompt_tokens": 602, "completion_tokens": 175, "duration": 8.465790033340454}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if len(str(i)) % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 781, "completion_tokens": 187, "duration": 8.289279460906982}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        if num < 0:\n            sum_digits -= num % 10\n            num //= -10\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        if sum_digits > 0:\n            count += 1\n    return count", "prompt_tokens": 611, "completion_tokens": 192, "duration": 6.431185245513916}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    min_val = min(arr)\n    min_idx = arr.index(min_val)\n    arr = arr[min_idx:] + arr[:min_idx]\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))", "prompt_tokens": 980, "completion_tokens": 190, "duration": 8.85673975944519}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    count_odd = 0\n    for num in lst1:\n        if num % 2 != 0:\n            count_odd += 1\n    for num in lst2:\n        if num % 2 != 0:\n            count_odd += 1\n    if count_odd % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "prompt_tokens": 759, "completion_tokens": 196, "duration": 7.800534963607788}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    letters = test.split()\n    hist_dict = {}\n    max_count = 0\n\n    for letter in letters:\n        if letter in hist_dict:\n            hist_dict[letter] += 1\n        else:\n            hist_dict[letter] = 1\n\n        if hist_dict[letter] > max_count:\n            max_count = hist_dict[letter]\n\n    max_letters = [letter for letter, count in hist_dict.items() if count == max_count]\n    result_dict = {letter: count for letter, count in hist_dict.items() if letter in max_letters}\n\n    return result_dict", "prompt_tokens": 762, "completion_tokens": 330, "duration": 8.725205898284912}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result = \"\"\n    for ch in s:\n        if ch not in c:\n            result += ch\n    palindrome_check = result == result[::-1]\n    return (result, palindrome_check)", "prompt_tokens": 708, "completion_tokens": 175, "duration": 7.610992431640625}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result_lst = []\n    for s in lst:\n        odd_count = 0\n        for c in s:\n            if c.isdigit() and int(c) % 2 != 0:\n                odd_count += 1\n        result_lst.append(f\"the number of odd elements {odd_count}n the str{s}ng {s} of the {s}nput.\")\n    return result_lst", "prompt_tokens": 738, "completion_tokens": 224, "duration": 12.988120555877686}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = nums[0]\n    current_sum = 0\n\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum", "prompt_tokens": 529, "completion_tokens": 164, "duration": 5.484834909439087}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    times = 0\n    for row in grid:\n        for well in row:\n            if well == 1:\n                times_to_lower = math.ceil(well / capacity)\n                times += times_to_lower\n    return times", "prompt_tokens": 1033, "completion_tokens": 189, "duration": 8.931265830993652}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 730, "completion_tokens": 173, "duration": 7.214555025100708}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    words = []\n    if not s:\n        return words\n\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char.isalpha() and char.lower() not in 'aeiou')\n        if consonant_count == n:\n            words.append(word)\n\n    return words", "prompt_tokens": 752, "completion_tokens": 204, "duration": 9.290541172027588}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    closest_vowel = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] not in vowels and word[i-1] in vowels and word[i+1] in vowels:\n            closest_vowel = word[i]\n            break\n    \n    return closest_vowel", "prompt_tokens": 685, "completion_tokens": 221, "duration": 7.985430717468262}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    stack = []\n    for char in lst[0]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    for char in lst[1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'", "prompt_tokens": 772, "completion_tokens": 299, "duration": 9.798791646957397}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(k):\n        result.append(arr[i])\n    return result", "prompt_tokens": 775, "completion_tokens": 118, "duration": 4.726161479949951}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even += lst[i]\n    return sum_odd_even", "prompt_tokens": 529, "completion_tokens": 132, "duration": 6.651465892791748}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    count = 0\n\n    for i in range(k):\n        if 10 <= arr[i] <= 99:\n            sum += arr[i]\n            count += 1\n        if count == 2:\n            break\n\n    return sum", "prompt_tokens": 611, "completion_tokens": 162, "duration": 8.629206895828247}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_collatz_list = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_collatz_list.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_collatz_list.append(1)\n    return sorted(odd_collatz_list)", "prompt_tokens": 826, "completion_tokens": 197, "duration": 5.344106674194336}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n    \n    month, day, year = map(int, date_parts)\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    if year < 1:\n        return False\n    \n    if not date.startswith('0') and not date.startswith('1') and not date.startswith('2'):\n        return False\n    \n    if len(date_parts[0]) != 2 or len(date_parts[1]) != 2 or len(date_parts[2]) != 4:\n        return False\n    \n    return True", "prompt_tokens": 961, "completion_tokens": 408, "duration": 14.250528573989868}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    words = []\n    if ' ' in txt:\n        words = txt.split()\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = sum(1 for ch in txt if ch.islower() and ord(ch) % 2 != 0)\n        if count > 0:\n            return count\n    return words", "prompt_tokens": 751, "completion_tokens": 292, "duration": 12.72550344467163}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    prev = None\n    duplicate_count = 0\n    for num in lst:\n        if prev is not None:\n            if num <= prev:\n                return False\n            if num == prev:\n                duplicate_count += 1\n                if duplicate_count > 1:\n                    return False\n        prev = num\n    return True", "prompt_tokens": 942, "completion_tokens": 262, "duration": 7.2213828563690186}
{"task_id": "HumanEval/127", "generated_code": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start + 1\n    \n    if length <= 1:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\"", "prompt_tokens": 967, "completion_tokens": 315, "duration": 8.651549100875854}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n    \n    for num in arr:\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else (-1 if num < 0 else 0))\n    \n    return sum_magnitudes * product_signs", "prompt_tokens": 625, "completion_tokens": 208, "duration": 9.05311131477356}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def find_paths(i, j, path, visited):\n        if len(path) == k:\n            paths.append(path[:])\n            return\n        visited.add((i, j))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + dx, j + dy\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in visited:\n                find_paths(ni, nj, path + [grid[ni][nj]], visited)\n        visited.remove((i, j))\n\n    paths = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            find_paths(i, j, [grid[i][j]], set())\n\n    return min(paths)\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))", "prompt_tokens": 1250, "completion_tokens": 448, "duration": 9.695606231689453}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    sequence = [1, 3]\n    if n < 2:\n        return sequence[:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n    return sequence", "prompt_tokens": 894, "completion_tokens": 256, "duration": 8.649011135101318}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n        n //= 10\n    if product == 1:\n        return 0\n    else:\n        return product", "prompt_tokens": 484, "completion_tokens": 150, "duration": 8.689816951751709}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        elif ch == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)", "prompt_tokens": 659, "completion_tokens": 187, "duration": 7.697933912277222}
{"task_id": "HumanEval/133", "generated_code": "def sum_squares(lst):\n    sum_squares = 0\n    for num in lst:\n        rounded_num = round(num)\n        squared_num = rounded_num * rounded_num\n        sum_squares += squared_num\n    return sum_squares", "prompt_tokens": 643, "completion_tokens": 123, "duration": 7.561425685882568}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    is_last_char_alphabetical = False\n    if txt:\n        last_char = txt[-1]\n        if last_char.isalpha() and last_char != ' ':\n            is_last_char_alphabetical = True\n    return is_last_char_alphabetical", "prompt_tokens": 645, "completion_tokens": 179, "duration": 11.27053451538086}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i - 1\n    return max_index", "prompt_tokens": 555, "completion_tokens": 141, "duration": 6.269853830337524}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    a = None\n    b = None\n    for num in lst:\n        if num < 0 and (a is None or num > a):\n            a = num\n        if num > 0 and (b is None or num < b):\n            b = num\n    return (a, b)", "prompt_tokens": 644, "completion_tokens": 185, "duration": 11.506860256195068}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if type(a) != type(b):\n        return None\n    if isinstance(a, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str):\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n        except ValueError:\n            return None\n        if a > b:\n            return str(a).replace('.', ',')\n        elif b > a:\n            return str(b).replace('.', ',')\n        else:\n            return None", "prompt_tokens": 753, "completion_tokens": 344, "duration": 9.980252265930176}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    count = 0\n    for i in range(2, n//2 + 1):\n        if i % 2 == 0:\n            count += 1\n        if count == 4:\n            return True\n    return False", "prompt_tokens": 517, "completion_tokens": 177, "duration": 7.732035398483276}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n    return result", "prompt_tokens": 526, "completion_tokens": 137, "duration": 6.529810190200806}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    new_text = \"\"\n    count = 0\n    for ch in text:\n        if ch == \" \":\n            count += 1\n            if count > 2:\n                new_text += \"-\"\n            else:\n                new_text += \"_\"\n        else:\n            if count > 2:\n                new_text += \"-\"\n            new_text += ch\n            count = 0\n    return new_text", "prompt_tokens": 614, "completion_tokens": 233, "duration": 11.815377235412598}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    count_digits = 0\n    has_dot = False\n    valid_extension = False\n    \n    for ch in file_name:\n        if ch.isdigit():\n            count_digits += 1\n        elif ch == '.':\n            if not has_dot:\n                has_dot = True\n            else:\n                valid_extension = file_name[file_name.index('.')+1:] in ['txt', 'exe', 'dll']\n        elif ch.isalpha():\n            if not has_dot:\n                valid_extension = ch.isalpha()\n    \n    if count_digits <= 3 and has_dot and valid_extension:\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 912, "completion_tokens": 364, "duration": 10.348928689956665}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n        total += lst[i]\n    return total", "prompt_tokens": 698, "completion_tokens": 183, "duration": 9.98110842704773}
{"task_id": "HumanEval/143", "generated_code": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 661, "completion_tokens": 203, "duration": 6.410260915756226}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    product = x_num * n_num / (x_denom * n_denom)\n    \n    return product.is_integer()", "prompt_tokens": 646, "completion_tokens": 141, "duration": 6.21883225440979}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums", "prompt_tokens": 611, "completion_tokens": 173, "duration": 9.419751405715942}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = abs(num) // 10**(len(str(abs(num))) - 1)\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count = count + 1\n    return count", "prompt_tokens": 612, "completion_tokens": 204, "duration": 10.47207760810852}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    \n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count", "prompt_tokens": 731, "completion_tokens": 245, "duration": 6.084775924682617}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_positions = {planet: index for index, planet in enumerate(planets)}\n    \n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return ()\n    \n    start = min(planet_positions[planet1], planet_positions[planet2])\n    end = max(planet_positions[planet1], planet_positions[planet2])\n    \n    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]\n    \n    return tuple(result)", "prompt_tokens": 845, "completion_tokens": 315, "duration": 10.891563177108765}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    sorted_lst = [word for word in lst if len(word) % 2 == 0]\n    sorted_lst.sort(key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 736, "completion_tokens": 151, "duration": 7.172922611236572}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return None\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    \n    return x", "prompt_tokens": 495, "completion_tokens": 124, "duration": 3.483768939971924}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares", "prompt_tokens": 622, "completion_tokens": 153, "duration": 6.943317413330078}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff", "prompt_tokens": 806, "completion_tokens": 140, "duration": 6.789999723434448}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"", "prompt_tokens": 964, "completion_tokens": 252, "duration": 8.236284017562866}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    n = len(a)\n    m = len(b)\n    if m > n:\n        return False\n    a = a + a\n    for i in range(n):\n        if b in a[i:i+m]:\n            return True\n    return False", "prompt_tokens": 643, "completion_tokens": 189, "duration": 6.807376861572266}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)", "prompt_tokens": 458, "completion_tokens": 139, "duration": 5.703844785690308}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    \n    roman_numeral = ''\n    \n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    \n    return roman_numeral", "prompt_tokens": 614, "completion_tokens": 302, "duration": 7.161673545837402}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    a_squared = a * a\n    b_squared = b * b\n    c_squared = c * c\n\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n    else:\n        return False", "prompt_tokens": 608, "completion_tokens": 209, "duration": 8.252237319946289}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "prompt_tokens": 588, "completion_tokens": 164, "duration": 4.1987504959106445}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_eaten_carrots = number + need\n    remaining_carrots = remaining - total_eaten_carrots if remaining >= total_eaten_carrots else 0\n    return [total_eaten_carrots, remaining_carrots]", "prompt_tokens": 925, "completion_tokens": 171, "duration": 7.869205713272095}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "prompt_tokens": 839, "completion_tokens": 276, "duration": 12.110880136489868}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():\n            result += c.swapcase()\n            has_letter = True\n        else:\n            result += c\n    if not has_letter:\n        result = result[::-1]\n    return result", "prompt_tokens": 576, "completion_tokens": 169, "duration": 7.511706113815308}
{"task_id": "HumanEval/162", "generated_code": "def string_to_md5(text):\n    if text == '':\n        return None\n\n    import hashlib\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n\n    return md5_hash", "prompt_tokens": 466, "completion_tokens": 96, "duration": 5.96500039100647}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end+1):\n        if num % 2 == 0:\n            even_digits.append(num)\n    return even_digits", "prompt_tokens": 597, "completion_tokens": 193, "duration": 7.225747108459473}
