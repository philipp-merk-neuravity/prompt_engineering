{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 595, "duration": 19.401120901107788}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 517, "duration": 17.6999671459198}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 415, "duration": 14.88188099861145}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 716, "duration": 34.91376829147339}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)", "prompt_tokens": 697, "completion_tokens": 592, "duration": 30.820513248443604}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 694, "duration": 30.51874613761902}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 901, "duration": 42.648810386657715}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 446, "duration": 15.121785640716553}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = reduce(operator.mul, numbers, 1)\n    return (total_sum, total_product)", "prompt_tokens": 418, "completion_tokens": 495, "duration": 16.570273637771606}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 688, "duration": 36.23249936103821}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 840, "duration": 72.37640428543091}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        xor_result = str(int(char_a) ^ int(char_b))\n        result += xor_result\n    return result", "prompt_tokens": 384, "completion_tokens": 566, "duration": 41.92458486557007}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 589, "duration": 24.489551305770874}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 592, "duration": 19.3074369430542}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 557, "completion_tokens": 521, "duration": 33.6768844127655}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 387, "duration": 17.0786874294281}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 472, "duration": 23.7870876789093}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            beats.append(1)\n            i += 2\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 563, "duration": 39.4085214138031}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 443, "duration": 20.066141605377197}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 510, "duration": 22.340944528579712}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i] - numbers[i + 1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 660, "duration": 43.15614080429077}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 549, "duration": 20.928927659988403}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 622, "completion_tokens": 444, "duration": 20.52515411376953}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 393, "duration": 20.648695707321167}
{"task_id": "HumanEval/24", "generated_code": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return n // i if i != n else i\n    return 1", "prompt_tokens": 360, "completion_tokens": 655, "duration": 34.024493932724}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 682, "duration": 21.420806646347046}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 648, "duration": 42.61738705635071}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 419, "duration": 19.890612840652466}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 451, "duration": 14.216930627822876}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 442, "duration": 16.409554481506348}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 391, "duration": 14.427943706512451}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 664, "duration": 76.17814612388611}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        # Naive approach for demonstration\n        # For a more complex polynomial, use a numerical method like Newton-Raphson\n        return -xs[0] / xs[1]\n    else:\n        raise ValueError('Polynomial does not meet the specified conditions')", "prompt_tokens": 567, "completion_tokens": 686, "duration": 29.995285987854004}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    to_sort = [l[i] for i in range(2, len(l), 3)]\n    # Sort these elements\n    to_sort.sort()\n    # Reinsert sorted elements back into their original positions\n    for i, val in enumerate(range(2, len(l), 3)):\n        l[val] = to_sort[i]\n    return l", "prompt_tokens": 458, "completion_tokens": 607, "duration": 20.322439432144165}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 408, "duration": 12.166234731674194}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 351, "duration": 27.053691387176514}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 559, "duration": 17.716808557510376}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    # Extract even-indexed elements and sort them\n    even_indexed_elements = sorted([l[i] for i in range(0, len(l), 2)])\n    # Merge sorted even-indexed elements back into the list\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements.pop(0)\n    return l", "prompt_tokens": 431, "completion_tokens": 622, "duration": 68.86199402809143}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    # Split string into groups of 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 620, "duration": 22.253270626068115}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 623, "duration": 21.21246314048767}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 1007, "duration": 36.154388427734375}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 746, "duration": 32.717381715774536}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 405, "duration": 18.369704484939575}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 863, "duration": 32.38855767250061}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 399, "completion_tokens": 704, "duration": 27.940266132354736}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 410, "duration": 23.11407494544983}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 652, "duration": 28.524380922317505}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2.0\n    else:\n        return l[mid]", "prompt_tokens": 383, "completion_tokens": 486, "duration": 14.952437162399292}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 579, "duration": 19.81977891921997}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 413, "completion_tokens": 575, "duration": 42.15058135986328}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 624, "completion_tokens": 477, "duration": 26.883519411087036}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 430, "completion_tokens": 506, "duration": 16.094663381576538}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 492, "duration": 26.86095380783081}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 323, "duration": 10.215834617614746}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 413, "duration": 61.310704946517944}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 1\n    fib_nums = [0, 1] + [0] * (n-1)\n    for i in range(2, n+1):\n        fib_nums[i] = fib_nums[i-1] + fib_nums[i-2]\n    return fib_nums[n]", "prompt_tokens": 360, "completion_tokens": 591, "duration": 23.67288088798523}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            if counter == 0:\n                return False\n            counter -= 1\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 686, "duration": 21.229490280151367}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 528, "duration": 18.286877155303955}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))", "prompt_tokens": 422, "completion_tokens": 419, "duration": 17.71042776107788}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "prompt_tokens": 371, "completion_tokens": 630, "duration": 35.22242569923401}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 484, "duration": 23.699543952941895}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(': balance += 1\n        elif bracket == ')': balance -= 1\n        if balance < 0: return False\n    return balance == 0", "prompt_tokens": 397, "completion_tokens": 495, "duration": 20.059703588485718}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 532, "duration": 32.4816460609436}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 698, "duration": 23.36136555671692}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s[:-1] if char in 'aeiou')\n    if s and s[-1] in 'y':\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 535, "duration": 17.45174551010132}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    n = len(x_str)\n    if shift >= n:\n        return x_str[::-1]\n    shift = shift % n\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 627, "completion_tokens": 556, "duration": 32.98919868469238}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 469, "duration": 43.683173179626465}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 526, "duration": 17.192557096481323}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 520, "duration": 27.423964977264404}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, count in freq.items():\n        if num <= count:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 570, "duration": 30.665990352630615}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 700, "duration": 22.070834398269653}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 617, "duration": 27.86564016342163}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]", "prompt_tokens": 538, "completion_tokens": 408, "duration": 13.640094995498657}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 669, "duration": 21.17048954963684}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 462, "duration": 22.182241439819336}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 571, "duration": 18.299381256103516}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x <= 0 or n <= 0:\n        return False\n    exponent = math.log(x, n)\n    return exponent.is_integer()", "prompt_tokens": 450, "completion_tokens": 513, "duration": 40.7541229724884}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return int(round(cube_root)) ** 3 == a", "prompt_tokens": 418, "completion_tokens": 445, "duration": 13.9772367477417}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 633, "duration": 33.134300231933594}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 620, "duration": 19.46167302131653}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 630, "duration": 19.846198320388794}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 783, "duration": 24.521385669708252}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 680, "duration": 26.73396897315979}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 352, "completion_tokens": 628, "duration": 20.1782546043396}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N = N // 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 511, "duration": 23.61567735671997}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 488, "duration": 21.07439136505127}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 448, "duration": 66.60748076438904}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                positions.append((row_idx, col_idx))\n    return sorted(positions, key=lambda pos: (pos[0], -pos[1]))", "prompt_tokens": 567, "completion_tokens": 506, "duration": 15.758592128753662}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    return sorted(array, reverse=not is_odd)", "prompt_tokens": 511, "completion_tokens": 534, "duration": 29.980637311935425}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                encrypted = chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted = chr((ord(char) - 65 + shift) % 26 + 65)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 655, "duration": 19.58183741569519}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) >= 2:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 401, "duration": 20.771299362182617}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S: str) -> int:\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 415, "completion_tokens": 507, "duration": 19.922486305236816}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 611, "duration": 19.04130458831787}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    def encode_char(c):\n        if c in vowels:\n            return chr(((ord(c.lower()) - 97 + 2) % 26) + 97).upper() if c.isupper() else chr(((ord(c.lower()) - 97 + 2) % 26) + 97)\n        else:\n            return c\n    encoded_message = ''.join(encode_char(c) for c in message)\n    return encoded_message.swapcase()", "prompt_tokens": 417, "completion_tokens": 580, "duration": 20.748047590255737}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 565, "duration": 28.66945219039917}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 477, "completion_tokens": 508, "duration": 20.23232626914978}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    primes = []\n    for i in range(2, n):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 651, "duration": 20.001108646392822}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 441, "duration": 13.298794269561768}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 553, "duration": 29.182008028030396}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    decimal_part = num - int(num)\n    if abs(decimal_part) == 0.5:\n        return int(math.ceil(num) if num > 0 else math.floor(num))\n    else:\n        return round(num)", "prompt_tokens": 464, "completion_tokens": 458, "duration": 13.677918195724487}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2 * i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 469, "duration": 20.78115487098694}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s: str) -> list:\n    # Using regular expression to split by comma or space\n    return re.split(', | ', s)", "prompt_tokens": 424, "completion_tokens": 436, "duration": 12.377305269241333}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 565, "duration": 32.029118061065674}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)", "prompt_tokens": 448, "completion_tokens": 497, "duration": 27.509336709976196}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_all_odd_digits(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    result = [num for num in x if has_all_odd_digits(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 537, "duration": 23.679898977279663}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [num_to_word[x] for x in filtered_sorted]", "prompt_tokens": 584, "completion_tokens": 520, "duration": 17.469178676605225}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to_n(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 710, "duration": 37.634360790252686}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 669, "duration": 35.15516114234924}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 497, "duration": 29.982214212417603}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr or sorted(arr) == arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n            if count > 1:\n                return False\n    return True", "prompt_tokens": 607, "completion_tokens": 681, "duration": 26.489951133728027}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_count_lst1 <= even_count_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 875, "duration": 36.55255341529846}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    count = {}\n    for char in test.replace(' ', ''):\n        count[char] = count.get(char, 0) + 1\n    max_count = max(count.values(), default=0)\n    return {char: cnt for char, cnt in count.items() if cnt == max_count}", "prompt_tokens": 459, "completion_tokens": 537, "duration": 16.316579580307007}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove characters in 's' that are in 'c'\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 538, "duration": 16.147743701934814}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 464, "duration": 26.027291536331177}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_ending_here = min_so_far = nums[0]\n    for x in nums[1:]:\n        min_ending_here = min(x, min_ending_here + x)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 802, "duration": 72.59043073654175}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 631, "completion_tokens": 683, "duration": 33.004000186920166}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 550, "duration": 18.449373960494995}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n\n    def consonant_count(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    words = s.split()\n    return [word for word in words if consonant_count(word) == n]", "prompt_tokens": 489, "completion_tokens": 523, "duration": 34.09549522399902}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            consonant_found = True\n        elif consonant_found and i != 0 and word[i-1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 582, "duration": 37.950350522994995}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(') - lst[0].count(')')\n    second_open = lst[1].count('(') - lst[1].count(')')\n    if first_open < 0 and second_open < 0:\n        return 'No'\n    if first_open > 0 and second_open > 0:\n        return 'No'\n    if first_open >= 0 and lst[0].find(')') < lst[0].rfind('(') and second_open < 0:\n        return 'No'\n    if second_open >= 0 and lst[1].find(')') < lst[1].rfind('(') and first_open < 0:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 936, "duration": 27.832698345184326}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 448, "duration": 23.105948209762573}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 470, "duration": 31.659786701202393}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 414, "duration": 28.0235812664032}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 760, "duration": 32.641884565353394}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if '-' not in date or len(date.split('-')) != 3:\n        return False\n    month, day, year = date.split('-')\n    try:\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12 or day < 1 or year < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 623, "duration": 74.18961906433105}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\nprint(split_words('abcdef'))", "prompt_tokens": 448, "completion_tokens": 546, "duration": 18.93216872215271}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst: return True\n    seen = {}\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        if lst[i] in seen:\n            seen[lst[i]] += 1\n            if seen[lst[i]] > 1:\n                return False\n        else:\n            seen[lst[i]] = 1\n    return True", "prompt_tokens": 557, "completion_tokens": 525, "duration": 16.49070167541504}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 657, "duration": 23.04464292526245}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product = 0\n            break\n        abs_sum += abs(num)\n    return sign_product * abs_sum", "prompt_tokens": 430, "completion_tokens": 602, "duration": 21.96671724319458}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    min_path = [float('inf')] * k\n    def dfs(x, y, path, steps):\n        nonlocal min_path\n        if steps == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, steps + 1)\n                path.pop()\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    return min_path", "prompt_tokens": 704, "completion_tokens": 1180, "duration": 39.29986357688904}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={1: 3}):\n    if n in memo:\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            tri(n + 1, memo)\n        memo[n] = tri(n - 1, memo) + tri(n - 2, memo) + memo[n + 1]\n    return memo[n]\n\ndef generate_tribonacci(n):\n    tribonacci_sequence = [tri(i) for i in range(1, n + 2)]\n    return tribonacci_sequence", "prompt_tokens": 543, "completion_tokens": 757, "duration": 26.825717449188232}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 467, "duration": 30.630692720413208}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if len(stack) > 1:\n                return True\n            stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 756, "duration": 89.96165370941162}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 384, "duration": 25.979134798049927}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    return txt[-1].isalpha()", "prompt_tokens": 445, "completion_tokens": 442, "duration": 18.579537868499756}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 654, "duration": 23.443341493606567}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 529, "duration": 16.759658575057983}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n    \n    a_float, b_float = convert_to_float(a), convert_to_float(b)\n    if a_float == b_float:\n        return None\n    return a if a_float > b_float else b", "prompt_tokens": 449, "completion_tokens": 477, "duration": 16.57232689857483}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 525, "duration": 20.356220245361328}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 580, "duration": 33.5467369556427}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            space_count = 0\n            result.append(char)\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 640, "duration": 35.101579427719116}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name[0].isalpha() or not len([c for c in name if c.isdigit()]) <= 3 or len(name) == 0:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 414, "duration": 14.300153255462646}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 553, "duration": 24.341021060943604}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 639, "duration": 34.29851698875427}
{"task_id": "HumanEval/144", "generated_code": "from math import gcd\n\ndef simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    \n    # Multiply numerators and denominators\n    num_result = num1 * num2\n    den_result = den1 * den2\n    \n    # Find GCD to simplify the fraction\n    greatest_cd = gcd(num_result, den_result)\n    \n    # Simplify\n    num_result //= greatest_cd\n    den_result //= greatest_cd\n    \n    return den_result == 1", "prompt_tokens": 463, "completion_tokens": 595, "duration": 24.658660411834717}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 499, "duration": 15.222848892211914}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n\n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        last_digit = abs(num) % 10\n        while abs(num) >= 10:\n            num //= 10\n        first_digit = abs(num)\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n\n    return sum(1 for num in nums if meets_criteria(num))", "prompt_tokens": 427, "completion_tokens": 571, "duration": 29.04700493812561}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    rem = [0, 0, 0]\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        rem[a_i % 3] += 1\n    # Case 1: All elements have a remainder of 0\n    case1 = rem[0] * (rem[0] - 1) * (rem[0] - 2) // 6\n    # Case 2: One element from each remainder category\n    case2 = rem[0] * rem[1] * rem[2]\n    return case1 + case2", "prompt_tokens": 473, "completion_tokens": 747, "duration": 43.88170599937439}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    try:\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n    except ValueError:\n        return ()\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])", "prompt_tokens": 519, "completion_tokens": 552, "duration": 19.428903818130493}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by their length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 492, "duration": 29.387216329574585}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 603, "duration": 35.422966718673706}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 448, "duration": 13.96985936164856}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - gs) for g, gs in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 417, "duration": 32.805684089660645}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 565, "duration": 25.412524223327637}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 465, "duration": 21.599456310272217}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num = abs(num)  # Handle negative numbers\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10  # Move to the next digit\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 521, "duration": 28.89602494239807}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 743, "completion_tokens": 881, "duration": 36.75040054321289}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 668, "duration": 36.04391598701477}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    words_sorted = sorted([(len(set(word)), word) for word in words], key=lambda x: (-x[0], x[1]))\n    return words_sorted[0][1] if words_sorted else ''", "prompt_tokens": 428, "completion_tokens": 684, "duration": 23.38472890853882}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 476, "duration": 20.95760488510132}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i, op in enumerate(operators):\n        expression += ' ' + op + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 439, "duration": 19.385745763778687}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)", "prompt_tokens": 676, "completion_tokens": 528, "duration": 20.498457670211792}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 507, "duration": 15.138422727584839}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 534, "duration": 16.810960292816162}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 545, "duration": 26.70133328437805}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 829, "duration": 29.878633975982666}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 388, "duration": 32.1689076423645}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 404, "duration": 34.66206669807434}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(x - mean) for x in numbers]\n    return sum(abs_diff) / len(numbers)", "prompt_tokens": 694, "completion_tokens": 605, "duration": 84.51422595977783}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 601, "duration": 33.96262550354004}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(': current_depth += 1\n            elif char == ')': current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 916, "duration": 88.15201187133789}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 557, "duration": 30.283446073532104}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 465, "duration": 34.617955446243286}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 594, "duration": 25.52462911605835}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return ''", "prompt_tokens": 778, "completion_tokens": 897, "duration": 139.36926174163818}
{"task_id": "HumanEval/11", "generated_code": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return bin(int(a, 2) ^ int(b, 2))[2:]", "prompt_tokens": 384, "completion_tokens": 456, "duration": 31.38654851913452}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 571, "duration": 46.04458284378052}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 490, "duration": 29.145437479019165}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 452, "duration": 19.755840301513672}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(x) for x in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 426, "duration": 31.436249256134033}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 468, "duration": 21.885483026504517}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i] == '.':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(1)\n                i += 2\n            else:\n                i += 1\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 836, "duration": 44.703646659851074}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 643, "completion_tokens": 509, "duration": 25.41382670402527}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 575, "duration": 32.26516366004944}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i+1] - numbers[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 645, "duration": 27.472697973251343}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 431, "completion_tokens": 519, "duration": 22.95896625518799}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 622, "completion_tokens": 431, "duration": 20.68378710746765}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 505, "completion_tokens": 440, "duration": 30.390820264816284}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 360, "completion_tokens": 562, "duration": 28.05157971382141}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 700, "duration": 84.08911752700806}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 630, "duration": 81.08215999603271}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 421, "duration": 29.04737424850464}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 410, "duration": 72.0808322429657}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 425, "duration": 26.609750747680664}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 382, "duration": 29.863850355148315}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 618, "duration": 71.29167461395264}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    def derivative(xs):\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def newtons_method(f, df, x0, tolerance=1e-7):\n        while True:\n            x1 = x0 - f(x0) / sum([coeff * math.pow(x0, i) for i, coeff in enumerate(df)])\n            if abs(x1 - x0) < tolerance:\n                return x1\n            x0 = x1\n\n    return newtons_method(lambda x: poly(xs, x), derivative(xs), 0)", "prompt_tokens": 567, "completion_tokens": 754, "duration": 26.779361724853516}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3 (0-based indexing means we adjust by adding 1 to the index)\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements_sorted = sorted(divisible_by_three_elements)\n    # Reinsert sorted elements back into their original positions\n    for i in range(len(l)):\n        if (i + 1) % 3 == 0:\n            l[i] = divisible_by_three_elements_sorted.pop(0)\n    return l", "prompt_tokens": 458, "completion_tokens": 669, "duration": 23.78741765022278}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 409, "duration": 30.628377199172974}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 342, "duration": 12.629795551300049}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count_sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_sevens += str(i).count('7')\n    return count_sevens", "prompt_tokens": 387, "completion_tokens": 658, "duration": 40.65035152435303}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    even_indices_values = sorted(l[::2])  # Extract and sort even-index elements\n    result = l.copy()  # Copy the original list to preserve odd-index elements\n    result[::2] = even_indices_values  # Merge sorted even-index elements\n    return result", "prompt_tokens": 431, "completion_tokens": 631, "duration": 22.32574725151062}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 510, "duration": 30.069994688034058}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 621, "duration": 73.94659304618835}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 559, "duration": 26.102484226226807}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 462, "duration": 16.961243867874146}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 399, "duration": 26.278728723526}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 794, "duration": 28.098935842514038}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x:\n        digits += str(x % base)\n        x //= base\n    return digits[::-1]", "prompt_tokens": 399, "completion_tokens": 463, "duration": 23.416338443756104}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 416, "duration": 20.778486728668213}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 662, "duration": 35.9788761138916}
{"task_id": "HumanEval/47", "generated_code": "def median(l):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2", "prompt_tokens": 383, "completion_tokens": 539, "duration": 38.71988916397095}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 556, "duration": 19.292786836624146}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 413, "completion_tokens": 566, "duration": 40.23353886604309}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 546, "duration": 32.07944869995117}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 683, "completion_tokens": 531, "duration": 21.874675989151}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 476, "duration": 30.426961183547974}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 351, "duration": 26.832633018493652}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 454, "duration": 15.785088539123535}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 622, "duration": 29.9677312374115}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            if counter == 0:\n                return False\n            counter -= 1\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 771, "duration": 91.46831560134888}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))", "prompt_tokens": 395, "completion_tokens": 593, "duration": 27.38136100769043}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 424, "duration": 17.006118059158325}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int):\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor", "prompt_tokens": 371, "completion_tokens": 617, "duration": 25.733397722244263}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 480, "duration": 29.350945949554443}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '(': counter += 1\n        elif bracket == ')': counter -= 1\n        if counter < 0: return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 789, "duration": 31.98778200149536}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 531, "duration": 22.615533590316772}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 627, "duration": 88.10979557037354}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s: str) -> int:\n    s = s.lower()\n    count = sum(1 for char in s if char in 'aeiou')\n    if s.endswith('y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 535, "duration": 18.45996379852295}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    n = len(x_str)\n    shift = shift % n\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 487, "duration": 18.987211227416992}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 378, "duration": 20.31993269920349}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 874, "completion_tokens": 458, "duration": 17.7206974029541}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 538, "duration": 41.41665601730347}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    result = -1\n    for num, freq in frequency.items():\n        if num <= freq and num > result:\n            result = num\n    return result", "prompt_tokens": 473, "completion_tokens": 552, "duration": 30.170307397842407}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(sorted_lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(sorted_lst[i])\n        else:\n            result.append(sorted_lst[i])\n            result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 432, "completion_tokens": 704, "duration": 28.27611494064331}
{"task_id": "HumanEval/71", "generated_code": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 682, "duration": 81.28883767127991}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 432, "duration": 18.534428119659424}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 785, "duration": 44.398943185806274}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2 or total1 == total2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 501, "completion_tokens": 636, "duration": 24.826162815093994}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 655, "duration": 69.49601006507874}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x == 0 or n == 0:\n        return False\n    exponent = math.log(x, n)\n    return exponent.is_integer() or math.isclose(exponent, round(exponent))", "prompt_tokens": 450, "completion_tokens": 550, "duration": 22.958186149597168}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return round(cube_root) ** 3 == a", "prompt_tokens": 418, "completion_tokens": 448, "duration": 25.83980679512024}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for char in num if char in prime_hex_digits)", "prompt_tokens": 1049, "completion_tokens": 544, "duration": 112.12132167816162}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 'db0db'\n    binary_str = ''\n    while decimal > 0:\n        binary_str = str(decimal % 2) + binary_str\n        decimal //= 2\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 657, "duration": 25.89272928237915}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 689, "duration": 39.7625777721405}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 741, "duration": 35.001877784729004}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 726, "duration": 86.74571514129639}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Edge case: Only '1' satisfies the condition\n    return 2 * (10 ** (n - 1)) - (10 ** (n - 2))", "prompt_tokens": 352, "completion_tokens": 662, "duration": 26.168692111968994}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 476, "duration": 81.40767812728882}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(value for index, value in enumerate(lst) if index % 2 != 0 and value % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 477, "duration": 19.09364151954651}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 449, "duration": 17.326561212539673}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                positions.append((i, j))\n    return sorted(positions, key=lambda pos: (pos[0], -pos[1]))", "prompt_tokens": 567, "completion_tokens": 693, "duration": 41.156702280044556}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if len(array) <= 1:\n        return array\n    else:\n        sort_descending = (array[0] + array[-1]) % 2 == 0\n        return sorted(array, reverse=sort_descending)", "prompt_tokens": 511, "completion_tokens": 612, "duration": 26.941539764404297}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            encrypted = chr((ord(char) + shift - 97) % 26 + 97)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 606, "duration": 24.11680245399475}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) >= 2:\n        return unique_sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 400, "duration": 23.132160663604736}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    # Splitting the string into sentences based on '.', '?', '!' delimiters\n    sentences = re.split('[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Stripping leading and trailing spaces and checking if it starts with 'I'\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 488, "duration": 25.640835523605347}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y", "prompt_tokens": 443, "completion_tokens": 515, "duration": 29.07211995124817}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_shift:\n            encoded_message += vowel_shift[char]\n        else:\n            encoded_message += char\n    return encoded_message.swapcase()", "prompt_tokens": 741, "completion_tokens": 728, "duration": 30.144867181777954}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 574, "duration": 30.865046739578247}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    lower_case_seen = False\n    upper_case_seen = False\n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case_seen = True\n        elif key.isupper():\n            upper_case_seen = True\n        if lower_case_seen and upper_case_seen:\n            return False\n    return True", "prompt_tokens": 477, "completion_tokens": 571, "duration": 22.10794711112976}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 707, "duration": 75.07466268539429}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 442, "duration": 16.998171091079712}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum(1 for i in range(0, len(s), 2) if s[i] in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 552, "duration": 23.45590353012085}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    number = float(value)\n    fractional_part = number - int(number)\n    if abs(fractional_part) == 0.5:\n        return int(math.ceil(number) if number > 0 else math.floor(number))\n    else:\n        return round(number)", "prompt_tokens": 464, "completion_tokens": 468, "duration": 27.68211817741394}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 432, "duration": 18.30649995803833}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s: str) -> list:\n    s = s.replace(',', ' ')\n    words = s.split()\n    return [word for word in words if word]", "prompt_tokens": 424, "completion_tokens": 480, "duration": 27.101423978805542}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 477, "duration": 28.63391947746277}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 510, "duration": 31.165247201919556}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(digit not in '02468' for digit in str(n))\n    \n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 533, "duration": 25.10488510131836}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_arr = filtered_sorted[::-1]\n    return [num_to_word[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 553, "duration": 25.26931667327881}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 705, "duration": 33.71201777458191}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 588, "duration": 23.527870893478394}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return sum(int(digit) for digit in str(n)[1:]) - 2*int(str(n)[1])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 485, "duration": 50.69055151939392}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    decrease_count = 0\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            decrease_count += 1\n        if decrease_count > 1:\n            return False\n    return True", "prompt_tokens": 607, "completion_tokens": 641, "duration": 83.36780405044556}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_lst1 = [x for x in lst1 if x % 2 == 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n    if len(even_lst1) + len(even_lst2) >= len(lst1):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 799, "duration": 43.211334228515625}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    if not test.strip():\n        return {}\n    count = Counter(test.replace(' ', ''))\n    max_count = max(count.values())\n    return {letter: cnt for letter, cnt in count.items() if cnt == max_count}", "prompt_tokens": 459, "completion_tokens": 563, "duration": 33.60560202598572}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> tuple:\n    result_string = ''.join(char for char in s if char not in c)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 495, "duration": 32.062601804733276}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        output_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count)\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 24.834005117416382}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_so_far = nums[0]\n    curr_min = nums[0]\n    for i in range(1, len(nums)):\n        curr_min = min(nums[i], curr_min + nums[i])\n        min_so_far = min(min_so_far, curr_min)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 744, "duration": 29.77484393119812}
{"task_id": "HumanEval/115", "generated_code": "import math\ndef max_fill(grid, capacity):\n    total_water = sum(cell == 1 for row in grid for cell in row)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 554, "duration": 67.77504301071167}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 519, "duration": 31.50426483154297}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    vowels = set('aeiouAEIOU')\n    result = []\n    words = s.split()\n    for word in words:\n        consonants_count = sum(1 for char in word if char not in vowels)\n        if consonants_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 845, "completion_tokens": 721, "duration": 24.160403966903687}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 503, "duration": 23.68436551094055}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1, s2 = lst\n    open1, close1 = s1.count('('), s1.count(')')\n    open2, close2 = s2.count('('), s2.count(')')\n\n    if open1 + open2 != close1 + close2:\n        return 'No'\n\n    if close1 > open1 or close2 > open2:\n        return 'No'\n\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 535, "duration": 19.055375576019287}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 548, "duration": 34.274391889572144}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 439, "duration": 26.940101146697998}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 405, "duration": 27.04401159286499}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last element\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 697, "duration": 32.71293330192566}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 623, "duration": 23.554447889328003}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n", "prompt_tokens": 448, "completion_tokens": 493, "duration": 19.40253758430481}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    seen = set()\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in seen and lst[i] == lst[i + 1]:\n            return False\n        seen.add(lst[i])\n    if lst[-1] in seen and len(lst) > 1 and lst[-2] == lst[-1]:\n        return False\n    return True", "prompt_tokens": 557, "completion_tokens": 609, "duration": 24.627598762512207}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 594, "duration": 24.361804962158203}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:  # num == 0\n            sign_product = 0\n            break  # No need to continue if we find a zero\n        magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 598, "duration": 24.034713983535767}
{"task_id": "HumanEval/129", "generated_code": "from typing import List\n\ndef dfs(grid, x, y, k, path, visited, min_path):\n    if k == 0:\n        if not min_path[0] or path < min_path[0]:\n            min_path[0] = path.copy()\n        return\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n            path.append(grid[nx][ny])\n            dfs(grid, nx, ny, k-1, path, visited, min_path)\n            path.pop()\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    min_path = [None]\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(grid, i, j, k-1, [grid[i][j]], set(), min_path)\n    return min_path[0]", "prompt_tokens": 704, "completion_tokens": 776, "duration": 125.61706805229187}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    memo = {1: 3}\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x % 2 == 0:\n            memo[x] = 1 + x // 2\n        else:\n            if x + 1 <= n:\n                memo[x] = helper(x-1) + helper(x-2) + helper(x+1)\n            else:\n                memo[x] = helper(x-1) + helper(x-2) + 3 # tri(1) is 3\n        return memo[x]\n\n    for i in range(1, n+1):\n        helper(i)\n    return [memo[i] for i in range(1, n+1)]", "prompt_tokens": 543, "completion_tokens": 748, "duration": 138.45387434959412}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 441, "duration": 30.8308584690094}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "prompt_tokens": 441, "completion_tokens": 764, "duration": 43.03781485557556}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 413, "duration": 25.152656078338623}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if not txt or txt[-1].isspace():\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())", "prompt_tokens": 445, "completion_tokens": 451, "duration": 26.841750383377075}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 605, "duration": 35.69617509841919}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 442, "duration": 18.92013120651245}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_if_str(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n    \n    a_converted = convert_if_str(a)\n    b_converted = convert_if_str(b)\n    \n    if a_converted > b_converted:\n        return a\n    elif a_converted < b_converted:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 470, "duration": 26.84101629257202}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 459, "duration": 33.32765340805054}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    factorial = 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 576, "duration": 23.41653609275818}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    consecutive_spaces = 0\n    for char in text:\n        if char == ' ':\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 2:\n                result.append('-')\n            elif consecutive_spaces > 0:\n                result.extend(['_'] * min(consecutive_spaces, 2))\n            result.append(char)\n            consecutive_spaces = 0\n    if consecutive_spaces > 2:\n        result.append('-')\n    elif consecutive_spaces > 0:\n        result.extend(['_'] * min(consecutive_spaces, 2))\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 530, "duration": 32.12507724761963}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,3}\\.+(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 522, "completion_tokens": 604, "duration": 30.486740350723267}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 493, "duration": 39.867647647857666}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 645, "duration": 81.7871425151825}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1", "prompt_tokens": 463, "completion_tokens": 489, "duration": 20.55755305290222}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 564, "duration": 32.22522497177124}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n\n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        str_num = str(abs(num))  # Convert to string and remove sign if negative\n        first_digit, last_digit = int(str_num[0]), int(str_num[-1])\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n\n    return sum(1 for num in nums if meets_criteria(num))", "prompt_tokens": 427, "completion_tokens": 551, "duration": 25.053738832473755}
{"task_id": "HumanEval/147", "generated_code": "from math import comb\n\ndef get_max_triples(n):\n    count = [0, 0, 0]\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        count[value % 3] += 1\n    return comb(count[0], 3) + comb(count[1], 1) * comb(count[2], 1) * comb(count[0], 1)", "prompt_tokens": 473, "completion_tokens": 659, "duration": 39.13525605201721}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "prompt_tokens": 519, "completion_tokens": 564, "duration": 34.03454351425171}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 495, "completion_tokens": 421, "duration": 16.051963806152344}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 670, "duration": 36.022331953048706}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 438, "duration": 16.221714973449707}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 555, "duration": 31.832390785217285}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest = ''\n    max_strength = float('-inf')\n    for ext in extensions:\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            strongest = ext\n            max_strength = strength\n    return f'{class_name}.{strongest}'", "prompt_tokens": 585, "completion_tokens": 570, "duration": 21.73551630973816}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 433, "duration": 16.804295539855957}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 517, "duration": 33.63970184326172}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    num_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman = ''\n    for value, symbol in num_map:\n        while number >= value:\n            number -= value\n            roman += symbol\n    return roman", "prompt_tokens": 737, "completion_tokens": 661, "duration": 46.625003814697266}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 607, "duration": 25.38196563720703}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = ''\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n    return result", "prompt_tokens": 428, "completion_tokens": 598, "duration": 32.42237305641174}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 477, "duration": 28.705174922943115}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += ' ' + operators[i] + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 642, "duration": 28.849361181259155}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if any(char.isalpha() for char in s):\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        return s[::-1]", "prompt_tokens": 415, "completion_tokens": 554, "duration": 20.61321234703064}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 507, "duration": 19.36422085762024}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 585, "duration": 21.66367816925049}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 574, "duration": 29.44079875946045}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 917, "duration": 29.378828287124634}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 391, "duration": 21.58025550842285}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 734, "duration": 26.924010038375854}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 554, "duration": 18.908098220825195}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 669, "completion_tokens": 677, "duration": 23.603050231933594}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth != 0:\n                results.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth != 0:  # For the last group if not followed by space\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 901, "duration": 28.32577109336853}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 518, "duration": 20.774691581726074}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 452, "duration": 28.264812231063843}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 408, "completion_tokens": 605, "duration": 68.11879992485046}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 450, "completion_tokens": 840, "duration": 130.31749653816223}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 384, "completion_tokens": 498, "duration": 27.031465768814087}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 414, "duration": 15.696354389190674}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 590, "duration": 36.94187355041504}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 467, "duration": 16.05317711830139}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 376, "completion_tokens": 439, "duration": 15.219866037368774}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 474, "duration": 18.741151332855225}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 480, "completion_tokens": 518, "duration": 32.263473987579346}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 506, "duration": 18.635699033737183}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words.sort(key=lambda word: num_map[word])\n    return ' '.join(words)", "prompt_tokens": 413, "completion_tokens": 499, "duration": 17.982134342193604}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 680, "duration": 26.386043071746826}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 543, "duration": 20.48940372467041}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 404, "duration": 15.94588327407837}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 380, "duration": 14.470732688903809}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(int(n**0.5), 0, -1):\n        if n % i == 0:\n            return n // i\n    return 1", "prompt_tokens": 360, "completion_tokens": 621, "duration": 71.81143116950989}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 644, "duration": 21.60187339782715}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            if number in result:\n                result.remove(number)\n        else:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 649, "duration": 45.16115427017212}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 356, "completion_tokens": 481, "duration": 24.399415731430054}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 445, "duration": 26.83950114250183}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 623, "duration": 38.80025935173035}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 442, "duration": 18.3669855594635}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 658, "duration": 30.382752180099487}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    x0 = 0.0\n    for _ in range(100):\n        x1 = x0 - poly(xs, x0) / poly([i * coeff for i, coeff in enumerate(xs)][1:], x0)\n        if abs(x0 - x1) < 1e-6:\n            return x1\n        x0 = x1\n    return x0", "prompt_tokens": 567, "completion_tokens": 618, "duration": 23.745519161224365}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by three\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements.sort()\n    # Reinsert sorted elements back into their positions\n    for i, val in enumerate(divisible_by_three_elements):\n        l[i * 3] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 673, "duration": 35.138890504837036}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 408, "duration": 19.66162919998169}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 406, "duration": 28.082844734191895}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 715, "duration": 74.64900279045105}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 559, "duration": 39.809067487716675}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    # Split string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Rotate each group to the left unless the group has fewer than 3 characters\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 591, "duration": 33.76112198829651}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 639, "duration": 35.64905381202698}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 1001, "duration": 130.13228249549866}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 373, "duration": 68.2137439250946}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 400, "duration": 16.627710819244385}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 795, "duration": 42.87032437324524}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0: return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 649, "completion_tokens": 684, "duration": 24.957388639450073}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 412, "duration": 37.279215812683105}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 767, "duration": 43.1378960609436}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 383, "completion_tokens": 429, "duration": 24.05561590194702}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 679, "duration": 32.53753900527954}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 413, "completion_tokens": 655, "duration": 39.615023612976074}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 528, "duration": 22.514854669570923}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 430, "completion_tokens": 471, "duration": 20.169069528579712}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 492, "duration": 34.61532807350159}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 324, "duration": 20.094030141830444}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 516, "duration": 31.91549515724182}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 643, "duration": 26.30361843109131}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        else:\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 805, "duration": 73.39305305480957}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing", "prompt_tokens": 395, "completion_tokens": 527, "duration": 26.475609302520752}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 425, "duration": 20.612189292907715}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor", "prompt_tokens": 371, "completion_tokens": 547, "duration": 18.73544454574585}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 490, "duration": 18.25605058670044}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '(': counter += 1\n        elif bracket == ')': counter -= 1\n        if counter < 0: return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 738, "duration": 30.370806455612183}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 574, "duration": 33.281742572784424}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 690, "duration": 28.352945804595947}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s.lower() if char in 'aeiou')\n    if s and (s[-1].lower() == 'y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 510, "duration": 75.43524551391602}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 498, "duration": 16.923402070999146}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 649, "completion_tokens": 524, "duration": 19.283090353012085}
{"task_id": "HumanEval/67", "generated_code": "import re\ndef fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = map(int, re.findall('\\d+', s))\n    # Calculate the number of mangoes\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 453, "duration": 26.872657299041748}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even, index_of_smallest_even = val, i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 548, "duration": 42.03740572929382}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num <= count:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 671, "duration": 24.598708391189575}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 583, "duration": 21.177229404449463}
{"task_id": "HumanEval/71", "generated_code": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 708, "duration": 27.089107513427734}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 466, "duration": 25.938480615615845}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 526, "duration": 32.81622099876404}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 627, "duration": 34.72306847572327}
{"task_id": "HumanEval/75", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_count += 1\n            while a % i == 0:\n                a //= i\n    return prime_count == 3", "prompt_tokens": 387, "completion_tokens": 748, "duration": 27.41276478767395}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 450, "completion_tokens": 529, "duration": 29.445319414138794}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = pow(abs(a), 1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 418, "completion_tokens": 493, "duration": 19.383870840072632}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 746, "duration": 27.33376979827881}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "prompt_tokens": 447, "completion_tokens": 488, "duration": 27.59486746788025}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 703, "completion_tokens": 681, "duration": 25.17585277557373}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 763, "duration": 39.02901220321655}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 557, "duration": 18.832213401794434}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Edge case: Only '1' fits the criteria\n    start_with_1 = 10**(n-1)\n    end_with_1 = 10**(n-1)\n    both = 10**(n-2) if n > 2 else 1  # For n=2, there's only one number: 11\n    return start_with_1 + end_with_1 - both", "prompt_tokens": 352, "completion_tokens": 657, "duration": 42.85323524475098}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 441, "completion_tokens": 536, "duration": 37.64639139175415}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 434, "duration": 22.09685516357422}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 560, "duration": 19.20440983772278}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                positions.append((i, j))\n    # Sort by row in ascending order, then by column in descending order within each row\n    positions.sort(key=lambda pos: (pos[0], -pos[1]))\n    return positions", "prompt_tokens": 567, "completion_tokens": 521, "duration": 33.673399925231934}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    # Return a sorted copy of the array\n    return sorted(array, reverse=not is_odd)", "prompt_tokens": 511, "completion_tokens": 665, "duration": 85.62567710876465}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift_amount = 4\n            if char.islower():\n                result += chr((ord(char) + shift_amount - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + shift_amount - 65) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 721, "duration": 30.97022294998169}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for x in lst:\n        if x < smallest:\n            second_smallest, smallest = smallest, x\n        elif smallest < x < second_smallest:\n            second_smallest = x\n    return None if second_smallest == float('inf') else second_smallest", "prompt_tokens": 432, "completion_tokens": 595, "duration": 71.01539349555969}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Splitting the string into sentences based on the delimiters\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    boredom_count = 0\n    for sentence in sentences:\n        # Stripping leading and trailing spaces and checking if it starts with 'I'\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 489, "duration": 33.31384587287903}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    return False", "prompt_tokens": 443, "completion_tokens": 424, "duration": 25.218459606170654}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 578, "duration": 23.1387140750885}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 594, "completion_tokens": 519, "duration": 69.15348625183105}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(key, str) and key.islower() for key in d):\n        return True\n    if all(isinstance(key, str) and key.isupper() for key in d):\n        return True\n    return False", "prompt_tokens": 477, "completion_tokens": 505, "duration": 22.68067479133606}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 731, "duration": 31.513646841049194}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 438, "duration": 19.633016347885132}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 521, "duration": 21.037617444992065}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    decimal_part = num - math.floor(num)\n    if num > 0:\n        if decimal_part >= 0.5:\n            return math.ceil(num)\n        else:\n            return math.floor(num)\n    else:\n        if decimal_part > 0.5:\n            return math.floor(num)\n        else:\n            return math.ceil(num)", "prompt_tokens": 464, "completion_tokens": 547, "duration": 83.5919497013092}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 570, "duration": 23.1369686126709}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s):\n    return re.split(r'[\\s,]+', s)", "prompt_tokens": 424, "completion_tokens": 427, "duration": 43.24448871612549}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 616, "duration": 32.89472436904907}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2.0)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 474, "duration": 28.58178734779358}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 510, "duration": 25.050081968307495}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    filtered_sorted.reverse()\n    return [digit_to_word[x] for x in filtered_sorted]", "prompt_tokens": 584, "completion_tokens": 551, "duration": 23.76912760734558}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 647, "duration": 40.93769693374634}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 613, "duration": 73.98416829109192}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n        else:\n            return sum(int(d) for d in str(n))\n\n    return sum(1 for x in arr if sum_of_digits(x) > 0)", "prompt_tokens": 432, "completion_tokens": 567, "duration": 31.316420555114746}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    break_points = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            break_points += 1\n    if break_points > 1:\n        return False\n    return True", "prompt_tokens": 607, "completion_tokens": 488, "duration": 18.8490731716156}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return 'YES' if odd_count_lst1 <= even_count_lst2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 551, "duration": 37.103777170181274}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}", "prompt_tokens": 459, "completion_tokens": 641, "duration": 28.255399465560913}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join(char for char in s if char not in c)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 694, "duration": 27.56727933883667}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 513, "duration": 34.13279151916504}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_so_far = nums[0]\n    min_ending_here = nums[0]\n    for i in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 769, "duration": 28.061727285385132}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 498, "duration": 65.08308148384094}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Function to count the number of 1s in binary representation\n    def count_ones(x):\n        return bin(x).count('1')\n    \n    # Sort the array based on the count of 1s and then by the number itself\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 478, "completion_tokens": 560, "duration": 38.168238162994385}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    words = s.split()\n    return [word for word in words if consonant_count(word) == n]", "prompt_tokens": 489, "completion_tokens": 509, "duration": 19.355960845947266}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels and not consonant_found:\n            consonant_found = True\n        elif word[i] in vowels and consonant_found:\n            if i - 1 >= 0 and word[i - 1] not in vowels:\n                return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 565, "duration": 36.44777774810791}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1, s2 = lst\n    if s1[0] == ')' or s2[-1] == '(':\n        return 'No'\n    if s2[0] == ')' or s1[-1] == '(':\n        return 'No'\n    if s1.count('(') + s2.count('(') != s1.count(')') + s2.count(')'):\n        return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 749, "duration": 27.516960859298706}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 525, "completion_tokens": 522, "duration": 33.38066506385803}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 405, "completion_tokens": 554, "duration": 67.55481386184692}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 436, "completion_tokens": 485, "duration": 29.016871690750122}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 678, "duration": 86.22738885879517}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 676, "duration": 37.36283898353577}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\nprint(split_words('abcdef'))", "prompt_tokens": 448, "completion_tokens": 525, "duration": 28.601768255233765}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if i > 0 and lst[i] == lst[i-1] and lst[i] == lst[i+1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 463, "duration": 17.116153478622437}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 650, "duration": 41.722405672073364}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product = 0\n            break\n        abs_sum += abs(num)\n    return sign_product * abs_sum", "prompt_tokens": 430, "completion_tokens": 580, "duration": 33.684540033340454}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path, steps):\n        if steps == k:\n            nonlocal min_path\n            min_path = min(min_path, path)\n            return\n        for dx, dy in [(0,1), (1,0), (0,-1), (-1,0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                dfs(nx, ny, path + [grid[nx][ny]], steps + 1)\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], 1)\n\n    return min_path", "prompt_tokens": 704, "completion_tokens": 780, "duration": 89.0199511051178}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={1: 3}):\n    if n in memo:\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            memo[n+1] = tri(n-1, memo) + tri(n-2, memo) + 1 + (n+1) // 2\n        memo[n] = tri(n-1, memo) + tri(n-2, memo) + memo[n+1]\n    return [tri(i, memo) for i in range(1, n+2)]", "prompt_tokens": 543, "completion_tokens": 775, "duration": 28.168296575546265}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 471, "duration": 17.26024842262268}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if not stack or stack[-1] == ']':\n                    return True\n            else:\n                return False\n    return False", "prompt_tokens": 441, "completion_tokens": 780, "duration": 33.521596908569336}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 451, "duration": 24.549000024795532}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after removing spaces\n        return False\n    return txt[-1].isalpha() and txt[-1] != ' '", "prompt_tokens": 445, "completion_tokens": 460, "duration": 24.57705068588257}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 606, "duration": 23.225147247314453}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 516, "duration": 18.433351039886475}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    if a == b:\n        return None\n    else:\n        float_a, float_b = to_float(a), to_float(b)\n        if float_a > float_b:\n            return a\n        else:\n            return b", "prompt_tokens": 449, "completion_tokens": 514, "duration": 81.58686852455139}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8", "prompt_tokens": 385, "completion_tokens": 593, "duration": 21.458543300628662}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 576, "duration": 24.68200993537903}
{"task_id": "HumanEval/140", "generated_code": "import re\ndef fix_spaces(text):\n    text = re.sub(r' {3,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text", "prompt_tokens": 414, "completion_tokens": 549, "duration": 20.759172916412354}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name: str) -> str:\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z]{0,}\\.((txt)|(exe)|(dll))$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 522, "completion_tokens": 616, "duration": 24.14133071899414}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val ** 2\n        elif i % 4 == 0:\n            total += val ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 617, "duration": 22.263928174972534}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 626, "duration": 33.98056983947754}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 463, "completion_tokens": 424, "duration": 24.66281294822693}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 533, "duration": 19.13859486579895}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if str_num[0] in {'1', '3', '5', '7', '9'} and str_num[-1] in {'1', '3', '5', '7', '9'}:\n                count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 570, "duration": 30.40548872947693}
{"task_id": "HumanEval/147", "generated_code": "from math import comb\n\ndef get_max_triples(n):\n    mod_0, mod_1, mod_2 = 0, 0, 0\n    for i in range(1, n + 1):\n        val = i * i - i + 1\n        if val % 3 == 0:\n            mod_0 += 1\n        elif val % 3 == 1:\n            mod_1 += 1\n        else:\n            mod_2 += 1\n    # Calculate the number of valid triples\n    return comb(mod_0, 3) + comb(mod_1, 3) + comb(mod_2, 3) + (mod_0 * mod_1 * mod_2)\n", "prompt_tokens": 473, "completion_tokens": 524, "duration": 77.52326583862305}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets_order = {'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4, 'Jupiter': 5, 'Saturn': 6, 'Uranus': 7, 'Neptune': 8}\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    start, end = sorted([planets_order[planet1], planets_order[planet2]])\n    return tuple(planet for planet, order in planets_order.items() if start < order < end)", "prompt_tokens": 519, "completion_tokens": 545, "duration": 83.84579563140869}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 495, "completion_tokens": 516, "duration": 21.677828788757324}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 582, "duration": 20.637694835662842}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if x % 2 != 0 and x > 0])", "prompt_tokens": 445, "completion_tokens": 438, "duration": 23.729891061782837}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 420, "duration": 25.612104654312134}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_ext = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    return f'{class_name}.{strongest_ext}'", "prompt_tokens": 585, "completion_tokens": 716, "duration": 25.892120361328125}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 466, "duration": 32.3748824596405}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 512, "duration": 42.54193115234375}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n        (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'),\n        (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 409, "completion_tokens": 778, "duration": 90.97172141075134}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 665, "duration": 44.94022536277771}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = ''\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n        elif unique_chars == max_unique:\n            result = min(result, word)\n    return result", "prompt_tokens": 428, "completion_tokens": 733, "duration": 27.63376021385193}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 585, "completion_tokens": 492, "duration": 28.32283878326416}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i, op in enumerate(operators):\n        expression += ' ' + op + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 500, "duration": 26.35711169242859}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])", "prompt_tokens": 415, "completion_tokens": 549, "duration": 19.197702407836914}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 519, "duration": 18.37871789932251}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = sorted([a, b])\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 529, "duration": 30.939693689346313}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 582, "duration": 73.12806987762451}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 873, "duration": 129.47258973121643}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 389, "duration": 22.854718446731567}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 635, "duration": 30.5906925201416}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad", "prompt_tokens": 425, "completion_tokens": 588, "duration": 28.442662477493286}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimiter)\n    return result", "prompt_tokens": 400, "completion_tokens": 615, "duration": 28.36995768547058}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "prompt_tokens": 420, "completion_tokens": 914, "duration": 79.1457028388977}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 489, "duration": 37.724178314208984}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 486, "duration": 23.753905296325684}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 408, "completion_tokens": 674, "duration": 29.14225697517395}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string + string[::-1]", "prompt_tokens": 783, "completion_tokens": 900, "duration": 123.14074206352234}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 384, "completion_tokens": 499, "duration": 22.499871730804443}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 627, "duration": 46.54503631591797}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 580, "duration": 46.270872831344604}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "prompt_tokens": 367, "completion_tokens": 558, "duration": 41.791126012802124}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 363, "duration": 20.236966609954834}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 564, "completion_tokens": 522, "duration": 23.229331016540527}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i+1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            beats.append(1)\n            i += 2\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 772, "duration": 33.477105140686035}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 457, "duration": 33.001728773117065}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 425, "duration": 36.7900025844574}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i] - numbers[i+1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 624, "duration": 72.9529938697815}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "prompt_tokens": 431, "completion_tokens": 500, "duration": 37.17247295379639}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 410, "duration": 74.31723141670227}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 382, "duration": 22.769689083099365}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(int(n**0.5), 0, -1):\n        if n % i == 0:\n            if i == n // i or i == 1:\n                continue\n            else:\n                return max(i, n // i)\n    return 1", "prompt_tokens": 360, "completion_tokens": 640, "duration": 27.056397438049316}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 604, "duration": 37.17877960205078}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return [number for number in numbers if number in seen and not seen.remove(number)]", "prompt_tokens": 392, "completion_tokens": 605, "duration": 27.88911485671997}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 356, "completion_tokens": 391, "duration": 24.919374704360962}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 431, "duration": 24.033150672912598}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 411, "duration": 18.719492197036743}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 410, "duration": 36.69818353652954}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 572, "duration": 29.356581449508667}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    def f(x):\n        return poly(xs, x)\n\n    a, b = -1000, 1000  # Assuming root lies within these bounds\n    while b - a > 1e-5:\n        midpoint = (a + b) / 2\n        if f(midpoint) == 0 or abs(b - a) < 1e-5:\n            return midpoint\n        elif f(a) * f(midpoint) < 0:\n            b = midpoint\n        else:\n            a = midpoint\n    return (a + b) / 2", "prompt_tokens": 567, "completion_tokens": 797, "duration": 37.6578426361084}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    to_sort.sort()\n    # Reinsert sorted elements into their original positions\n    for i, val in enumerate(to_sort):\n        l[i * 3] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 619, "duration": 38.01281380653381}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 412, "duration": 22.922128915786743}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 339, "duration": 13.68628454208374}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 585, "duration": 23.92470669746399}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list):\n    # Extract elements at even indices\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the extracted elements\n    sorted_even_elements = sorted(even_elements)\n    # Place the sorted elements back into their original positions\n    for i in range(0, len(l), 2):\n        l[i] = sorted_even_elements[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 588, "duration": 40.105767011642456}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-2:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 538, "duration": 39.76198720932007}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 638, "duration": 38.58192467689514}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list) -> bool:\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 599, "duration": 76.15626120567322}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since each car moving in one direction will collide with each car moving in the opposite direction,\n    # the total number of collisions is simply n * n (or n squared).\n    return n * n", "prompt_tokens": 459, "completion_tokens": 587, "duration": 25.93928360939026}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 394, "duration": 18.281541347503662}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 790, "duration": 39.77330040931702}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 399, "completion_tokens": 587, "duration": 37.22907876968384}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 419, "duration": 37.188969373703}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 0\n    elif n == 2: return 2\n    elif n == 3: return 0\n    dp = [0, 0, 2, 0] + [0] * (n-3)\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 816, "duration": 36.687888860702515}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2", "prompt_tokens": 383, "completion_tokens": 434, "duration": 18.154234886169434}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 616, "duration": 71.01084184646606}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 413, "completion_tokens": 411, "duration": 66.23600912094116}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 446, "duration": 18.140313386917114}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 685, "completion_tokens": 443, "duration": 18.04438328742981}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 485, "duration": 34.9872682094574}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 315, "duration": 25.986027717590332}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 438, "duration": 27.825968980789185}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    fib_numbers = [0, 1]\n    for i in range(2, n+1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    return fib_numbers[n]", "prompt_tokens": 360, "completion_tokens": 658, "duration": 28.67386269569397}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack or stack[-1] != '<':\n                return False\n            stack.pop()\n    return not stack", "prompt_tokens": 400, "completion_tokens": 816, "duration": 123.50051927566528}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            decreasing = False\n        elif l[i] > l[i + 1]:\n            increasing = False\n    return increasing or decreasing", "prompt_tokens": 395, "completion_tokens": 553, "duration": 28.000593662261963}
{"task_id": "HumanEval/58", "generated_code": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 422, "completion_tokens": 412, "duration": 18.48502016067505}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    # Divide by 2 to make n odd\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n    # n must be odd at this point, so skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n    return max_prime", "prompt_tokens": 371, "completion_tokens": 764, "duration": 30.274919509887695}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 518, "duration": 36.19392704963684}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for char in brackets:\n        if char == '(':\n            counter += 1\n        elif char == ')':\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 847, "duration": 38.37091326713562}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 482, "duration": 26.616785049438477}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib_values = [0, 0, 1]\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3]\n        fibfib_values.append(next_value)\n    return fibfib_values[n]", "prompt_tokens": 457, "completion_tokens": 682, "duration": 29.64024519920349}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Adding more test cases\nimport doctest\ndoctest.testmod()", "prompt_tokens": 434, "completion_tokens": 563, "duration": 41.48677897453308}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 584, "duration": 29.45300841331482}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 405, "duration": 21.392109870910645}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 474, "duration": 18.934900760650635}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 557, "duration": 32.79575037956238}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    valid_integers = [num for num, count in freq.items() if count >= num]\n    return max(valid_integers) if valid_integers else -1", "prompt_tokens": 473, "completion_tokens": 555, "duration": 38.87366962432861}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    i, j = 0, len(lst) - 1\n    while i <= j:\n        if i == j:\n            result.append(sorted_lst[i])\n            break\n        result.append(sorted_lst[i])\n        result.append(sorted_lst[j])\n        i += 1\n        j -= 1\n    return result", "prompt_tokens": 432, "completion_tokens": 542, "duration": 23.019097805023193}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 658, "duration": 35.65148901939392}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 421, "duration": 32.310200691223145}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 785, "completion_tokens": 634, "duration": 24.143728494644165}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 536, "duration": 23.337363719940186}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_count = 0\n    for i in range(2, a + 1):\n        if a % i == 0:\n            prime_count += 1\n            while a % i == 0:\n                a //= i\n    return prime_count == 3", "prompt_tokens": 387, "completion_tokens": 644, "duration": 80.29540419578552}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 450, "completion_tokens": 506, "duration": 82.21682143211365}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    return pow(abs(a), 1/3).is_integer()", "prompt_tokens": 418, "completion_tokens": 466, "duration": 41.83850049972534}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 562, "duration": 69.0916817188263}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary = ''\n    if decimal == 0:\n        return 'db0db'\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 724, "duration": 43.27964425086975}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 698, "duration": 81.89998316764832}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 750, "duration": 38.57353138923645}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)", "prompt_tokens": 389, "completion_tokens": 573, "duration": 40.49971151351929}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    else:\n        return 2 * (9 ** (n - 1))", "prompt_tokens": 352, "completion_tokens": 625, "duration": 27.03964352607727}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 509, "duration": 89.95108079910278}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 509, "duration": 37.22802519798279}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 703, "completion_tokens": 599, "duration": 31.001346111297607}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda k: (k[0], -k[1]))", "prompt_tokens": 567, "completion_tokens": 512, "duration": 30.26460337638855}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order\n    sort_descending = (array[0] + array[-1]) % 2 == 0\n    return sorted(array, reverse=sort_descending)", "prompt_tokens": 511, "completion_tokens": 603, "duration": 41.454784631729126}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = ord(char) + 4\n            if char.islower() and shift > ord('z'):\n                shift -= 26\n            elif char.isupper() and shift > ord('Z'):\n                shift -= 26\n            result += chr(shift)\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 673, "duration": 45.24045205116272}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_lst = sorted(set(lst))\n    if len(unique_sorted_lst) < 2:\n        return None\n    else:\n        return unique_sorted_lst[1]", "prompt_tokens": 432, "completion_tokens": 510, "duration": 28.676250457763672}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split(r'[.?!]+', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I '):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 509, "duration": 31.24899649620056}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 449, "duration": 19.13377094268799}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'A': 'C', 'e': 'g', 'E': 'G', 'i': 'k', 'I': 'K', 'o': 'q', 'O': 'Q', 'u': 'w', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_char = replacements[char]\n        else:\n            encoded_char = char\n        if encoded_char.islower():\n            encoded_message += encoded_char.upper()\n        else:\n            encoded_message += encoded_char.lower()\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 624, "duration": 127.48014664649963}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 524, "duration": 19.892363786697388}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    keys_are_strings = all(isinstance(key, str) for key in d)\n    if not keys_are_strings:\n        return False\n    all_lower = all(key.islower() for key in d if isinstance(key, str))\n    all_upper = all(key.isupper() for key in d if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 477, "completion_tokens": 549, "duration": 30.34707760810852}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 717, "duration": 118.7529182434082}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 439, "duration": 29.372121572494507}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count", "prompt_tokens": 609, "completion_tokens": 622, "duration": 32.68149256706238}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    num = float(value)\n    if num - int(num) == 0.5 or num - int(num) == -0.5:\n        if num > 0:\n            return int(num) + 1\n        else:\n            return int(num) - 1\n    else:\n        return round(num)", "prompt_tokens": 464, "completion_tokens": 444, "duration": 19.942836046218872}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = n\n    levels = []\n    for _ in range(n):\n        levels.append(stones)\n        stones += 2\n    return levels", "prompt_tokens": 440, "completion_tokens": 592, "duration": 28.569324731826782}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.replace(',', ' ').split()", "prompt_tokens": 651, "completion_tokens": 480, "duration": 45.50597882270813}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 575, "duration": 39.17285132408142}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(((m - n + 1) * (n + m)) / (2 * (m - n + 1)))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 511, "duration": 68.49666213989258}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    \n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 606, "duration": 41.222352266311646}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    valid_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_arr = valid_sorted[::-1]\n    return [num_words[x] for x in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 555, "duration": 27.274611949920654}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 633, "duration": 33.82626533508301}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 608, "duration": 29.629982709884644}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(d) if n >= 0 else -int(d) for d in str(abs(n)))\n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 459, "duration": 43.23492407798767}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr:\n        return True\n    breaks = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            breaks += 1\n            if breaks > 1:\n                return False\n    if breaks == 1 and arr[-1] > arr[0]:\n        return False\n    return True", "prompt_tokens": 607, "completion_tokens": 709, "duration": 45.37879300117493}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    even_count = sum(x % 2 == 0 for x in lst1) + sum(x % 2 == 0 for x in lst2)\n    if even_count >= len(lst1):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 623, "duration": 24.914501428604126}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    words = test.split()\n    count = {}\n    for word in words:\n        count[word] = count.get(word, 0) + 1\n    max_count = max(count.values(), default=0)\n    return {k: v for k, v in count.items() if v == max_count}", "prompt_tokens": 459, "completion_tokens": 640, "duration": 39.372191429138184}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 485, "duration": 81.98359036445618}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 23.691269636154175}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_ending_here = min_so_far = nums[0]\n    for x in nums[1:]:\n        min_ending_here = min(x, min_ending_here + x)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 711, "duration": 33.637680530548096}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 499, "duration": 18.402822256088257}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 673, "duration": 24.8833167552948}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n    \n    result = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            result.append(word)\n    return result", "prompt_tokens": 863, "completion_tokens": 682, "duration": 23.459362983703613}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    length = len(word)\n    for i in range(length - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 586, "duration": 40.57107162475586}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(')\n    first_close = lst[0].count(')')\n    second_open = lst[1].count('(')\n    second_close = lst[1].count(')')\n\n    if first_open >= second_close and first_close <= second_open:\n        return 'Yes'\n    return 'No'", "prompt_tokens": 476, "completion_tokens": 890, "duration": 32.58477187156677}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 608, "duration": 29.306353330612183}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 441, "duration": 25.991697549819946}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "prompt_tokens": 436, "completion_tokens": 448, "duration": 19.34130048751831}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last odd number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 680, "duration": 89.15484809875488}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    try:\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    else:\n        return True\n    return True", "prompt_tokens": 571, "completion_tokens": 716, "duration": 45.70235085487366}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)", "prompt_tokens": 753, "completion_tokens": 561, "duration": 31.280596494674683}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 2:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 466, "duration": 32.49850845336914}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    return 'YES' if is_prime(length) else 'NO'", "prompt_tokens": 562, "completion_tokens": 679, "duration": 24.877826690673828}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            return 0\n        abs_sum += abs(num)\n    return abs_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 610, "duration": 80.98651385307312}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    paths = []\n    \n    def dfs(x, y, path, steps):\n        if steps == k:\n            paths.append(path[:])\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, steps + 1)\n                path.pop()\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    \n    paths.sort()\n    return paths[0]\n", "prompt_tokens": 704, "completion_tokens": 951, "duration": 81.03901863098145}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return [1, 3]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            memo[n + 1] = tri(n + 1, memo)[-1]\n        memo[n] = tri(n - 1, memo)[-1] + tri(n - 2, memo)[-1] + memo[n + 1]\n    sequence = tri(n - 1, memo)\n    sequence.append(memo[n])\n    return sequence", "prompt_tokens": 543, "completion_tokens": 742, "duration": 32.82233428955078}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 456, "duration": 29.971847772598267}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                return True\n            elif stack:\n                stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 764, "duration": 87.83840131759644}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(num)**2 for num in lst])", "prompt_tokens": 465, "completion_tokens": 376, "duration": 18.506399154663086}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after removing spaces\n        return False\n    return txt[-1].isalpha()", "prompt_tokens": 445, "completion_tokens": 444, "duration": 17.26814341545105}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 594, "duration": 44.22862982749939}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 586, "duration": 119.14481592178345}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_float, b_float = to_float(a), to_float(b)\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 533, "duration": 23.586581707000732}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8", "prompt_tokens": 385, "completion_tokens": 633, "duration": 45.22355508804321}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 569, "duration": 30.88971257209778}
{"task_id": "HumanEval/140", "generated_code": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r' {3,}', '-', text)  # Replace 3 or more spaces with '-'\n    text = text.replace(' ', '_')  # Replace remaining spaces with '_'\n    return text", "prompt_tokens": 414, "completion_tokens": 397, "duration": 15.924029350280762}
{"task_id": "HumanEval/141", "generated_code": "import re\n\ndef file_name_check(file_name: str) -> str:\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z0-9]*\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 522, "completion_tokens": 528, "duration": 44.97209072113037}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 503, "duration": 21.899796962738037}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 682, "duration": 75.02668404579163}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 463, "completion_tokens": 442, "duration": 25.907989740371704}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 579, "duration": 85.75348782539368}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n    \n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        last_digit = abs(num) % 10\n        while abs(num) >= 10:\n            num //= 10\n        first_digit = abs(num)\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n    \n    return sum(meets_criteria(num) for num in nums)", "prompt_tokens": 427, "completion_tokens": 630, "duration": 31.79008936882019}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    counts = [0, 0, 0]\n    for i in range(1, n + 1):\n        value = i * i - i + 1\n        counts[value % 3] += 1\n    # Count triples where all elements are divisible by 3\n    triples = counts[0] * (counts[0] - 1) * (counts[0] - 2) // 6\n    # Count triples forming a complete residue system modulo 3\n    triples += counts[0] * counts[1] * counts[2]\n    return triples", "prompt_tokens": 473, "completion_tokens": 628, "duration": 34.097389459609985}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets_order = {'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4, 'Jupiter': 5, 'Saturn': 6, 'Uranus': 7, 'Neptune': 8}\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    start, end = sorted([planets_order[planet1], planets_order[planet2]])\n    return tuple(planet for planet, order in planets_order.items() if start < order < end)", "prompt_tokens": 519, "completion_tokens": 655, "duration": 26.2103054523468}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by their length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 444, "duration": 18.892921447753906}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 394, "completion_tokens": 518, "duration": 24.78222632408142}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 420, "duration": 21.136291980743408}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 428, "duration": 18.428203344345093}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        upper = sum(1 for char in extension if char.isupper())\n        lower = sum(1 for char in extension if char.islower())\n        return upper - lower\n\n    strongest = max(extensions, key=strength)\n    return f'{class_name}.{strongest}'", "prompt_tokens": 585, "completion_tokens": 600, "duration": 84.96140742301941}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 431, "duration": 34.94899797439575}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 462, "duration": 18.221860647201538}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    symbols = [\n        'M', 'CM', 'D', 'CD',\n        'C', 'XC', 'L', 'XL',\n        'X', 'IX', 'V', 'IV',\n        'I'\n    ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // value[i]):\n            roman_numeral += symbols[i]\n            number -= value[i]\n        i += 1\n    return roman_numeral.lower()", "prompt_tokens": 409, "completion_tokens": 725, "duration": 90.6230103969574}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 649, "duration": 35.25020170211792}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    # Sort words based on the number of unique characters and lexicographically\n    sorted_words = sorted(words, key=lambda x: (-len(set(x)), x))\n    # Return the first word in the sorted list\n    return sorted_words[0] if sorted_words else ''", "prompt_tokens": 428, "completion_tokens": 616, "duration": 22.3786141872406}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 482, "duration": 70.91357922554016}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i in range(len(operators)):\n        expression += ' ' + operators[i] + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 461, "duration": 32.254793882369995}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.lower() if char.isupper() else char.upper() if char.isalpha() else char for char in s)", "prompt_tokens": 415, "completion_tokens": 496, "duration": 42.24144887924194}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 489, "duration": 21.071240663528442}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = sorted([a, b])\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 550, "duration": 72.26275277137756}
{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 579, "duration": 82.78903436660767}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 942, "duration": 40.223639488220215}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 592, "completion_tokens": 410, "duration": 36.039976835250854}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 604, "duration": 70.09414076805115}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 546, "duration": 67.4154486656189}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 618, "duration": 41.55720233917236}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(': current_depth += 1\n            elif char == ')': current_depth -= 1\n            max_depth = max(max_depth, current_depth)\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 661, "duration": 73.04290461540222}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 429, "duration": 24.450811624526978}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 537, "duration": 18.28750252723694}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 685, "duration": 31.003080129623413}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 450, "completion_tokens": 725, "duration": 28.71273183822632}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])", "prompt_tokens": 384, "completion_tokens": 485, "duration": 64.75700283050537}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 614, "duration": 24.83997392654419}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)", "prompt_tokens": 378, "completion_tokens": 463, "duration": 38.9187331199646}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 479, "duration": 23.649794340133667}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))", "prompt_tokens": 376, "completion_tokens": 419, "duration": 15.458023309707642}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 468, "duration": 30.54957938194275}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                notes.append(2)\n                i += 2\n            else:\n                notes.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            notes.append(1)\n            i += 2\n        else:\n            i += 1\n    return notes", "prompt_tokens": 480, "completion_tokens": 557, "duration": 31.65362048149109}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 574, "duration": 22.22815752029419}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda word: word_to_num[word])\n    return ' '.join(sorted_nums)", "prompt_tokens": 413, "completion_tokens": 539, "duration": 21.293503999710083}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 657, "duration": 24.813708305358887}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "prompt_tokens": 431, "completion_tokens": 547, "duration": 73.8611843585968}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 382, "duration": 17.737287759780884}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 505, "completion_tokens": 345, "duration": 65.90253376960754}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1", "prompt_tokens": 360, "completion_tokens": 593, "duration": 19.526294469833374}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 654, "duration": 39.1523871421814}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [number for number in numbers if counts[number] == 1]", "prompt_tokens": 392, "completion_tokens": 589, "duration": 35.03164529800415}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 452, "duration": 26.523991584777832}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 445, "duration": 19.30939507484436}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 615, "completion_tokens": 480, "duration": 16.27217149734497}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 379, "duration": 71.9998230934143}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 648, "duration": 36.624977350234985}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 0:\n        return -xs[0] / xs[1]\n    else:\n        raise ValueError('Polynomial does not meet the requirements')\n", "prompt_tokens": 567, "completion_tokens": 644, "duration": 34.15007758140564}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    # Place sorted elements back\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three_sorted.pop(0)\n    return l", "prompt_tokens": 458, "completion_tokens": 776, "duration": 34.48160409927368}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(set(l))", "prompt_tokens": 381, "completion_tokens": 387, "duration": 31.32554841041565}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 390, "duration": 13.296844482421875}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count_sevens = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_sevens += str(i).count('7')\n    return count_sevens", "prompt_tokens": 387, "completion_tokens": 658, "duration": 38.724018812179565}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    # Extract even-indexed elements and sort them\n    even_indexed_elements = sorted(l[::2])\n    # Merge sorted even-indexed elements with the original odd-indexed elements\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 594, "duration": 46.644744634628296}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 1138, "completion_tokens": 784, "duration": 28.085933208465576}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 636, "duration": 35.08618664741516}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 626, "duration": 41.89808106422424}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    # Since each car moving left to right will eventually collide with each car moving right to left,\n    # and there are n cars in each direction, the total number of collisions is simply n squared.\n    return n * n", "prompt_tokens": 459, "completion_tokens": 525, "duration": 112.83833885192871}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 386, "duration": 19.609238147735596}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 623, "duration": 24.657707929611206}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x //= base\n    return digits", "prompt_tokens": 399, "completion_tokens": 618, "duration": 76.66829657554626}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 417, "duration": 43.06126928329468}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 788, "duration": 77.72838926315308}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 383, "completion_tokens": 668, "duration": 39.73780679702759}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 559, "duration": 34.14937162399292}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result", "prompt_tokens": 413, "completion_tokens": 609, "duration": 38.28444480895996}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 490, "duration": 26.629928588867188}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(c for c in text if c not in vowels)", "prompt_tokens": 430, "completion_tokens": 386, "duration": 14.14510989189148}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int) -> bool:\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 494, "duration": 27.01296830177307}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 530, "completion_tokens": 346, "duration": 25.928038597106934}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 497, "duration": 37.34336018562317}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    fib_numbers = [0, 1]\n    for i in range(2, n + 1):\n        fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2])\n    return fib_numbers[n]", "prompt_tokens": 360, "completion_tokens": 568, "duration": 30.528981685638428}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        else:  # bracket == '>'\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 669, "duration": 20.454776525497437}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 570, "duration": 20.456392288208008}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "prompt_tokens": 422, "completion_tokens": 412, "duration": 24.0839102268219}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while n > 1:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n    return factor - 1", "prompt_tokens": 371, "completion_tokens": 639, "duration": 85.99951386451721}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n*(n+1)//2", "prompt_tokens": 402, "completion_tokens": 441, "duration": 19.890563249588013}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':  # Opening bracket\n            stack.append(bracket)\n        elif bracket == ')':  # Closing bracket\n            if not stack:  # No matching opening bracket\n                return False\n            stack.pop()\n    return not stack  # True if stack is empty, False otherwise", "prompt_tokens": 397, "completion_tokens": 815, "duration": 43.751548767089844}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list) -> list:\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 476, "duration": 30.76542854309082}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={0: 0, 1: 0, 2: 1}):\n    if n in memo:\n        return memo[n]\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 740, "duration": 23.533791303634644}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 551, "duration": 19.48038339614868}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift %= len(x_str)\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 443, "duration": 62.014878034591675}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 459, "duration": 29.822038888931274}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 448, "duration": 16.230868339538574}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index]", "prompt_tokens": 620, "completion_tokens": 506, "duration": 29.75989031791687}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    valid_integers = [num for num, count in freq.items() if num <= count]\n    return max(valid_integers) if valid_integers else -1", "prompt_tokens": 473, "completion_tokens": 599, "duration": 70.68722343444824}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 616, "duration": 23.747435808181763}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 790, "duration": 29.58902072906494}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 432, "duration": 29.006826162338257}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 548, "duration": 31.8156795501709}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2", "prompt_tokens": 501, "completion_tokens": 607, "duration": 22.116077423095703}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        divisor = 2\n        while n > 1:\n            while n % divisor == 0:\n                factors.append(divisor)\n                n //= divisor\n            divisor += 1\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 3 and all(is_prime(f) for f in factors)", "prompt_tokens": 387, "completion_tokens": 648, "duration": 19.583738803863525}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    root = x ** (1/n)\n    return root.is_integer()", "prompt_tokens": 450, "completion_tokens": 534, "duration": 20.514871835708618}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    cube_root = round(abs(a) ** (1/3))\n    return cube_root ** 3 == abs(a)", "prompt_tokens": 661, "completion_tokens": 560, "duration": 44.33244514465332}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "prompt_tokens": 607, "completion_tokens": 499, "duration": 68.12497973442078}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 452, "duration": 16.153071641921997}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2] or s[i-1] == s[i-2]:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 583, "duration": 23.05859112739563}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 765, "duration": 27.225261926651}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 389, "completion_tokens": 700, "duration": 42.17287755012512}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Special case, only '1' fits the criteria\n    return 2 * (9 ** (n - 1)) - (9 ** (n - 2))", "prompt_tokens": 352, "completion_tokens": 619, "duration": 22.79075789451599}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N = N // 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 495, "duration": 16.628312587738037}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 510, "duration": 27.697826623916626}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 461, "duration": 16.058791637420654}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))", "prompt_tokens": 567, "completion_tokens": 495, "duration": 19.35885739326477}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_even = (array[0] + array[-1]) % 2 == 0\n    # Sort the array in ascending order if the sum is odd, or in descending order if it's even\n    return sorted(array, reverse=is_even)", "prompt_tokens": 511, "completion_tokens": 610, "duration": 118.73963975906372}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                encrypted = chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted = chr((ord(char) - 65 + shift) % 26 + 65)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 651, "duration": 25.22613787651062}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_sorted_list = sorted(set(lst))\n    return unique_sorted_list[1] if len(unique_sorted_list) >= 2 else None", "prompt_tokens": 432, "completion_tokens": 467, "duration": 23.61453652381897}
{"task_id": "HumanEval/91", "generated_code": "import re\n\ndef is_bored(S):\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 679, "completion_tokens": 508, "duration": 66.24199056625366}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x + y == z or x + z == y or y + z == x\n    return False", "prompt_tokens": 443, "completion_tokens": 488, "duration": 32.62764120101929}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 742, "completion_tokens": 724, "duration": 44.81511616706848}
{"task_id": "HumanEval/94", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 581, "duration": 24.40108871459961}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(key, str) for key in d):\n        keys = list(d.keys())\n        return all(key.islower() for key in keys) or all(key.isupper() for key in keys)\n    return False", "prompt_tokens": 477, "completion_tokens": 525, "duration": 21.809435844421387}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return [i for i in range(n) if sieve[i]]", "prompt_tokens": 453, "completion_tokens": 715, "duration": 26.51054358482361}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "prompt_tokens": 406, "completion_tokens": 409, "duration": 22.34373140335083}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 538, "duration": 25.199167013168335}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    lower = math.floor(num)\n    higher = math.ceil(num)\n    if num - lower < higher - num:\n        return lower\n    elif higher - num < num - lower:\n        return higher\n    else: # Equidistant case\n        return higher if num > 0 else lower", "prompt_tokens": 464, "completion_tokens": 544, "duration": 32.71407389640808}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2 * i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 540, "duration": 21.655031204223633}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s):\n    # Split the string by comma or space, filter out empty strings\n    words = re.split(', | ', s)\n    return [word for word in words if word]", "prompt_tokens": 424, "completion_tokens": 447, "duration": 18.604540824890137}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 579, "duration": 32.62807559967041}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(((m - n + 1) * (n + m)) / (2 * (m - n + 1)))\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 494, "duration": 29.82085156440735}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_no_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return False\n        return True\n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 546, "duration": 21.19992184638977}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_list = filtered_sorted[::-1]\n    return [num_to_word[x] for x in reversed_list]", "prompt_tokens": 584, "completion_tokens": 522, "duration": 21.039918184280396}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x-1)\n\n    def arithmetic_sum(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(arithmetic_sum(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 694, "duration": 34.8931725025177}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 600, "duration": 37.63356328010559}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return sum(int(d) for d in str(n)[1:]) - 2*int(str(n)[1])\n        else:\n            return sum(int(d) for d in str(n))\n    \n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count", "prompt_tokens": 756, "completion_tokens": 698, "duration": 26.0217604637146}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr: return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            count += 1\n    return count <= 1", "prompt_tokens": 607, "completion_tokens": 583, "duration": 27.302852153778076}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if even_count_lst2 >= odd_count_lst1:\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 734, "duration": 45.39931774139404}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    from collections import Counter\n    # Count occurrences of each letter\n    letter_counts = Counter(test.replace(' ', ''))\n    if not letter_counts:\n        return {}\n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    # Filter and return letters with the maximum count\n    return {letter: count for letter, count in letter_counts.items() if count == max_count}", "prompt_tokens": 459, "completion_tokens": 569, "duration": 27.650439500808716}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove characters in 'c' from 's'\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 503, "duration": 18.768311262130737}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "prompt_tokens": 481, "completion_tokens": 527, "duration": 21.03805708885193}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num) if current_sum > 0 else current_sum + num\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 736, "duration": 27.040428638458252}
{"task_id": "HumanEval/115", "generated_code": "import math\ndef max_fill(grid, capacity):\n    total_lowerings = 0\n    for row in grid:\n        water_units = sum(row)\n        lowerings_for_row = math.ceil(water_units / capacity)\n        total_lowerings += lowerings_for_row\n    return total_lowerings", "prompt_tokens": 631, "completion_tokens": 630, "duration": 31.064011812210083}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 611, "duration": 22.48595356941223}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiou'\n        return sum(1 for char in word.lower() if char not in vowels and char.isalpha())\n    \n    words = s.split()\n    return [word for word in words if count_consonants(word) == n]", "prompt_tokens": 489, "completion_tokens": 563, "duration": 26.659265756607056}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for char in reversed(word):\n        if char not in vowels:\n            consonant_found = True\n        elif consonant_found:\n            return char\n    return ''", "prompt_tokens": 457, "completion_tokens": 606, "duration": 28.854593515396118}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first, second = lst\n    balance = 0\n    for char in first:\n        if char == '(': balance += 1\n        else: balance -= 1\n        if balance < 0: return 'No'\n    for char in second:\n        if char == '(': balance += 1\n        else: balance -= 1\n    return 'Yes' if balance == 0 else 'No'", "prompt_tokens": 476, "completion_tokens": 489, "duration": 20.36885690689087}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 412, "duration": 14.93563175201416}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 516, "duration": 27.487852811813354}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -10 < x < 10 or 10 <= abs(x) < 100)", "prompt_tokens": 436, "completion_tokens": 443, "duration": 17.27942705154419}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 673, "duration": 30.544094800949097}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 634, "duration": 32.8087375164032}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n\n# Example usage\nprint(split_words('Hello world!'))  # ['Hello', 'world!']\nprint(split_words('Hello,world!'))  # ['Hello', 'world!']\nprint(split_words('abcdef'))  # 3", "prompt_tokens": 803, "completion_tokens": 643, "duration": 25.11430811882019}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst: return True\n    count = {}\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] in count:\n            count[lst[i]] += 1\n            if count[lst[i]] > 1:\n                return False\n        else:\n            count[lst[i]] = 1\n    if lst[-1] in count and count[lst[-1]] > 0:\n        return False\n    return True", "prompt_tokens": 557, "completion_tokens": 570, "duration": 29.652622938156128}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 674, "duration": 83.22533631324768}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        else:\n            sign_product *= -1 if num < 0 else 1\n            magnitude_sum += abs(num)\n    return magnitude_sum * sign_product", "prompt_tokens": 430, "completion_tokens": 591, "duration": 89.69924592971802}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            nonlocal min_path\n            if path < min_path:\n                min_path = path.copy()\n            return\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "prompt_tokens": 704, "completion_tokens": 644, "duration": 23.836650848388672}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return 3\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        memo[n] = tri(n-1, memo) + tri(n-2, memo) + tri(n+1, memo)\n    return memo[n]\n\n# Function to return the first n + 1 numbers of the Tribonacci sequence\ndef tribonacci_sequence(n):\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(tri(i))\n    return sequence\n\n# Example usage\nprint(tribonacci_sequence(3))", "prompt_tokens": 543, "completion_tokens": 633, "duration": 28.776148319244385}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 485, "duration": 30.837610721588135}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                return True\n            elif stack:\n                stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 737, "duration": 35.19056558609009}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 392, "duration": 23.69193172454834}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after stripping\n        return False\n    if txt[-1].isalpha():  # Check if the last character is alphabetical\n        if len(txt) == 1 or txt[-2] == ' ':  # Check if it's not part of a word\n            return True\n    return False", "prompt_tokens": 776, "completion_tokens": 689, "duration": 24.155927896499634}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1", "prompt_tokens": 411, "completion_tokens": 656, "duration": 41.32010817527771}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 679, "duration": 29.2068772315979}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def normalize(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    a_norm = normalize(a)\n    b_norm = normalize(b)\n\n    if a_norm > b_norm:\n        return a\n    elif b_norm > a_norm:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 515, "duration": 19.073912382125854}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 548, "duration": 35.57645845413208}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    brazilian_factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        brazilian_factorial *= factorial\n    return brazilian_factorial", "prompt_tokens": 403, "completion_tokens": 588, "duration": 33.527610301971436}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 0:\n                if space_count > 2:\n                    result.append('-')\n                else:\n                    result.extend(['_'] * space_count)\n                space_count = 0\n            result.append(char)\n    if space_count > 0:\n        if space_count > 2:\n            result.append('-')\n        else:\n            result.extend(['_'] * space_count)\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 524, "duration": 29.398537158966064}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$'\n    return 'Yes' if re.match(pattern, file_name) else 'No'", "prompt_tokens": 522, "completion_tokens": 623, "duration": 35.723912715911865}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)", "prompt_tokens": 478, "completion_tokens": 545, "duration": 39.53205108642578}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 618, "duration": 22.47854971885681}
{"task_id": "HumanEval/144", "generated_code": "from fractions import Fraction\n\ndef simplify(x, n):\n    product = Fraction(x) * Fraction(n)\n    return product.denominator == 1", "prompt_tokens": 463, "completion_tokens": 446, "duration": 20.210899591445923}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 684, "duration": 27.23704433441162}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if str_num[0] in '13579' and str_num[-1] in '13579':\n                count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 591, "duration": 25.58625602722168}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    remainder_counts = [0, 0, 0]\n    for i in range(1, n+1):\n        val = i * i - i + 1\n        remainder_counts[val % 3] += 1\n    return (remainder_counts[0] * (remainder_counts[0] - 1) * (remainder_counts[0] - 2) // 6) + (remainder_counts[1] * remainder_counts[2] * (remainder_counts[1] - 1) // 2) + (remainder_counts[1] * remainder_counts[2] * (remainder_counts[2] - 1) // 2) + (remainder_counts[0] * remainder_counts[1] * remainder_counts[2])", "prompt_tokens": 473, "completion_tokens": 619, "duration": 23.2762131690979}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "prompt_tokens": 519, "completion_tokens": 585, "duration": 77.93836688995361}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort by length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 446, "duration": 30.27372717857361}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 664, "duration": 24.460087060928345}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 439, "duration": 19.356759071350098}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 438, "duration": 20.938475847244263}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 1065, "completion_tokens": 697, "duration": 24.081733465194702}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 467, "duration": 23.310242652893066}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 442, "duration": 25.225305557250977}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "prompt_tokens": 409, "completion_tokens": 561, "duration": 21.566035985946655}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 550, "duration": 34.565340518951416}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    words.sort(key=lambda x: (-len(set(x)), x))\n    return words[0]", "prompt_tokens": 428, "completion_tokens": 621, "duration": 28.597230434417725}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining < need:\n        # Not enough carrots, eat all remaining\n        total_eaten = number + remaining\n        remaining = 0\n    else:\n        # Enough carrots, eat only what is needed\n        total_eaten = number + need\n        remaining -= need\n    return [total_eaten, remaining]", "prompt_tokens": 585, "completion_tokens": 586, "duration": 29.98072862625122}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 515, "completion_tokens": 510, "duration": 18.49283766746521}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    has_letters = any(char.isalpha() for char in s)\n    if not has_letters:\n        return s[::-1]\n    else:\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)", "prompt_tokens": 415, "completion_tokens": 524, "duration": 23.895162105560303}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 515, "duration": 18.617260217666626}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 553, "duration": 41.9588942527771}
