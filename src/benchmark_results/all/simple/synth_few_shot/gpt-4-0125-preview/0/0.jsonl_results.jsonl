{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 595, "duration": 19.401120901107788, "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 517, "duration": 17.6999671459198, "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 415, "duration": 14.88188099861145, "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 716, "duration": 34.91376829147339, "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)", "prompt_tokens": 697, "completion_tokens": 592, "duration": 30.820513248443604, "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check to avoid adding delimiter after the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 400, "completion_tokens": 694, "duration": 30.51874613761902, "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 901, "duration": 42.648810386657715, "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 446, "duration": 15.121785640716553, "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = reduce(operator.mul, numbers, 1)\n    return (total_sum, total_product)", "prompt_tokens": 418, "completion_tokens": 495, "duration": 16.570273637771606, "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "generated_code": "def rolling_max(numbers):\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    return result", "prompt_tokens": 408, "completion_tokens": 688, "duration": 36.23249936103821, "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string", "prompt_tokens": 450, "completion_tokens": 840, "duration": 72.37640428543091, "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for char_a, char_b in zip(a, b):\n        xor_result = str(int(char_a) ^ int(char_b))\n        result += xor_result\n    return result", "prompt_tokens": 384, "completion_tokens": 566, "duration": 41.92458486557007, "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 677, "completion_tokens": 589, "duration": 24.489551305770874, "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 592, "duration": 19.3074369430542, "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 557, "completion_tokens": 521, "duration": 33.6768844127655, "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "prompt_tokens": 376, "completion_tokens": 387, "duration": 17.0786874294281, "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 472, "duration": 23.7870876789093, "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(4)\n                i += 1\n        elif music_string[i:i+2] == '.|':\n            beats.append(1)\n            i += 2\n        else:\n            i += 1\n    return beats", "prompt_tokens": 480, "completion_tokens": 563, "duration": 39.4085214138031, "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 443, "duration": 20.066141605377197, "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)", "prompt_tokens": 413, "completion_tokens": 510, "duration": 22.340944528579712, "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        current_diff = abs(numbers[i] - numbers[i + 1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 660, "duration": 43.15614080429077, "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 549, "duration": 20.928927659988403, "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 622, "completion_tokens": 444, "duration": 20.52515411376953, "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 393, "duration": 20.648695707321167, "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "generated_code": "import math\n\ndef largest_divisor(n: int) -> int:\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            return n // i if i != n else i\n    return 1", "prompt_tokens": 360, "completion_tokens": 655, "duration": 34.024493932724, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 682, "duration": 21.420806646347046, "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 648, "duration": 42.61738705635071, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 517, "completion_tokens": 419, "duration": 19.890612840652466, "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 451, "duration": 14.216930627822876, "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 442, "duration": 16.409554481506348, "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 391, "duration": 14.427943706512451, "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 664, "duration": 76.17814612388611, "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        # Naive approach for demonstration\n        # For a more complex polynomial, use a numerical method like Newton-Raphson\n        return -xs[0] / xs[1]\n    else:\n        raise ValueError('Polynomial does not meet the specified conditions')", "prompt_tokens": 567, "completion_tokens": 686, "duration": 29.995285987854004, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l):\n    # Extract elements at indices divisible by 3\n    to_sort = [l[i] for i in range(2, len(l), 3)]\n    # Sort these elements\n    to_sort.sort()\n    # Reinsert sorted elements back into their original positions\n    for i, val in enumerate(range(2, len(l), 3)):\n        l[val] = to_sort[i]\n    return l", "prompt_tokens": 458, "completion_tokens": 607, "duration": 20.322439432144165, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 408, "duration": 12.166234731674194, "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 351, "duration": 27.053691387176514, "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 559, "duration": 17.716808557510376, "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    # Extract even-indexed elements and sort them\n    even_indexed_elements = sorted([l[i] for i in range(0, len(l), 2)])\n    # Merge sorted even-indexed elements back into the list\n    for i in range(0, len(l), 2):\n        l[i] = even_indexed_elements.pop(0)\n    return l", "prompt_tokens": 431, "completion_tokens": 622, "duration": 68.86199402809143, "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    # Split string into groups of 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 620, "duration": 22.253270626068115, "result": "failed: name 'encode_cyclic' is not defined", "passed": false}
{"task_id": "HumanEval/39", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 623, "duration": 21.21246314048767, "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 1007, "duration": 36.154388427734375, "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 746, "duration": 32.717381715774536, "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 405, "duration": 18.369704484939575, "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 863, "duration": 32.38855767250061, "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x, base):\n    if x == 0:\n        return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 399, "completion_tokens": 704, "duration": 27.940266132354736, "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 410, "duration": 23.11407494544983, "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 652, "duration": 28.524380922317505, "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2.0\n    else:\n        return l[mid]", "prompt_tokens": 383, "completion_tokens": 486, "duration": 14.952437162399292, "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 579, "duration": 19.81977891921997, "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result", "prompt_tokens": 413, "completion_tokens": 575, "duration": 42.15058135986328, "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 624, "completion_tokens": 477, "duration": 26.883519411087036, "result": "failed: name 'encode_shift' is not defined", "passed": false}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join([char for char in text if char not in vowels])", "prompt_tokens": 430, "completion_tokens": 506, "duration": 16.094663381576538, "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 492, "duration": 26.86095380783081, "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 323, "duration": 10.215834617614746, "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 413, "duration": 61.310704946517944, "result": "passed", "passed": true}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n == 0: return 0\n    elif n == 1: return 1\n    fib_nums = [0, 1] + [0] * (n-1)\n    for i in range(2, n+1):\n        fib_nums[i] = fib_nums[i-1] + fib_nums[i-2]\n    return fib_nums[n]", "prompt_tokens": 360, "completion_tokens": 591, "duration": 23.67288088798523, "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            if counter == 0:\n                return False\n            counter -= 1\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 686, "duration": 21.229490280151367, "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 528, "duration": 18.286877155303955, "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))", "prompt_tokens": 422, "completion_tokens": 419, "duration": 17.71042776107788, "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "prompt_tokens": 371, "completion_tokens": 630, "duration": 35.22242569923401, "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 484, "duration": 23.699543952941895, "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(': balance += 1\n        elif bracket == ')': balance -= 1\n        if balance < 0: return False\n    return balance == 0", "prompt_tokens": 397, "completion_tokens": 495, "duration": 20.059703588485718, "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 532, "duration": 32.4816460609436, "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 698, "duration": 23.36136555671692, "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s[:-1] if char in 'aeiou')\n    if s and s[-1] in 'y':\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 535, "duration": 17.45174551010132, "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    n = len(x_str)\n    if shift >= n:\n        return x_str[::-1]\n    shift = shift % n\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 627, "completion_tokens": 556, "duration": 32.98919868469238, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 420, "completion_tokens": 469, "duration": 43.683173179626465, "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    mangoes = n - apples - oranges\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 526, "duration": 17.192557096481323, "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 520, "duration": 27.423964977264404, "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    result = -1\n    for num, count in freq.items():\n        if num <= count:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 570, "duration": 30.665990352630615, "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 700, "duration": 22.070834398269653, "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "generated_code": "from math import sqrt\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 617, "duration": 27.86564016342163, "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return sum(q) <= w and q == q[::-1]", "prompt_tokens": 538, "completion_tokens": 408, "duration": 13.640094995498657, "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 669, "duration": 21.17048954963684, "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 462, "duration": 22.182241439819336, "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "generated_code": "def is_multiply_prime(a):\n    if a < 2:\n        return False\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 3", "prompt_tokens": 387, "completion_tokens": 571, "duration": 18.299381256103516, "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "generated_code": "import math\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    if x <= 0 or n <= 0:\n        return False\n    exponent = math.log(x, n)\n    return exponent.is_integer()", "prompt_tokens": 450, "completion_tokens": 513, "duration": 40.7541229724884, "result": "passed", "passed": true}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return int(round(cube_root)) ** 3 == a", "prompt_tokens": 418, "completion_tokens": 445, "duration": 13.9772367477417, "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 633, "duration": 33.134300231933594, "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return 'db' + binary_str + 'db'", "prompt_tokens": 447, "completion_tokens": 620, "duration": 19.46167302131653, "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 630, "duration": 19.846198320388794, "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 783, "duration": 24.521385669708252, "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "generated_code": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 680, "duration": 26.73396897315979, "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "prompt_tokens": 352, "completion_tokens": 628, "duration": 20.1782546043396, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N = N // 10\n    return bin(sum_of_digits)[2:]", "prompt_tokens": 441, "completion_tokens": 511, "duration": 23.61567735671997, "result": "passed", "passed": true}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 488, "duration": 21.07439136505127, "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 448, "duration": 66.60748076438904, "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                positions.append((row_idx, col_idx))\n    return sorted(positions, key=lambda pos: (pos[0], -pos[1]))", "prompt_tokens": 567, "completion_tokens": 506, "duration": 15.758592128753662, "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    return sorted(array, reverse=not is_odd)", "prompt_tokens": 511, "completion_tokens": 534, "duration": 29.980637311935425, "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                encrypted = chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted = chr((ord(char) - 65 + shift) % 26 + 65)\n            result += encrypted\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 655, "duration": 19.58183741569519, "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) >= 2:\n        return unique_elements[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 401, "duration": 20.771299362182617, "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S: str) -> int:\n    sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count", "prompt_tokens": 415, "completion_tokens": 507, "duration": 19.922486305236816, "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if all(isinstance(i, int) for i in [x, y, z]):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 611, "duration": 19.04130458831787, "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    def encode_char(c):\n        if c in vowels:\n            return chr(((ord(c.lower()) - 97 + 2) % 26) + 97).upper() if c.isupper() else chr(((ord(c.lower()) - 97 + 2) % 26) + 97)\n        else:\n            return c\n    encoded_message = ''.join(encode_char(c) for c in message)\n    return encoded_message.swapcase()", "prompt_tokens": 417, "completion_tokens": 580, "duration": 20.748047590255737, "result": "passed", "passed": true}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)", "prompt_tokens": 594, "completion_tokens": 565, "duration": 28.66945219039917, "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(key.islower() for key in dict if isinstance(key, str))\n    all_upper = all(key.isupper() for key in dict if isinstance(key, str))\n    return all_lower or all_upper", "prompt_tokens": 477, "completion_tokens": 508, "duration": 20.23232626914978, "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n <= 2:\n        return []\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    primes = []\n    for i in range(2, n):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 651, "duration": 20.001108646392822, "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 441, "duration": 13.298794269561768, "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum(1 for i, char in enumerate(s) if i % 2 == 0 and char in uppercase_vowels)", "prompt_tokens": 380, "completion_tokens": 553, "duration": 29.182008028030396, "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "generated_code": "import math\ndef closest_integer(value):\n    num = float(value)\n    decimal_part = num - int(num)\n    if abs(decimal_part) == 0.5:\n        return int(math.ceil(num) if num > 0 else math.floor(num))\n    else:\n        return round(num)", "prompt_tokens": 464, "completion_tokens": 458, "duration": 13.677918195724487, "result": "passed", "passed": true}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2 * i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 469, "duration": 20.78115487098694, "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s: str) -> list:\n    # Using regular expression to split by comma or space\n    return re.split(', | ', s)", "prompt_tokens": 424, "completion_tokens": 436, "duration": 12.377305269241333, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 565, "duration": 32.029118061065674, "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)", "prompt_tokens": 448, "completion_tokens": 497, "duration": 27.509336709976196, "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    def has_all_odd_digits(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    result = [num for num in x if has_all_odd_digits(num)]\n    return sorted(result)", "prompt_tokens": 410, "completion_tokens": 537, "duration": 23.679898977279663, "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [num_to_word[x] for x in filtered_sorted]", "prompt_tokens": 584, "completion_tokens": 520, "duration": 17.469178676605225, "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to_n(x):\n        return x * (x + 1) // 2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 710, "duration": 37.634360790252686, "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 669, "duration": 35.15516114234924, "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def digit_sum(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if digit_sum(num) > 0)", "prompt_tokens": 432, "completion_tokens": 497, "duration": 29.982214212417603, "result": "passed", "passed": true}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    if not arr or sorted(arr) == arr:\n        return True\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n            if count > 1:\n                return False\n    return True", "prompt_tokens": 607, "completion_tokens": 681, "duration": 26.489951133728027, "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    if odd_count_lst1 <= even_count_lst2:\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 505, "completion_tokens": 875, "duration": 36.55255341529846, "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    count = {}\n    for char in test.replace(' ', ''):\n        count[char] = count.get(char, 0) + 1\n    max_count = max(count.values(), default=0)\n    return {char: cnt for char, cnt in count.items() if cnt == max_count}", "prompt_tokens": 459, "completion_tokens": 537, "duration": 16.316579580307007, "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    # Remove characters in 's' that are in 'c'\n    result_string = ''.join([char for char in s if char not in c])\n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 538, "duration": 16.147743701934814, "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 464, "duration": 26.027291536331177, "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_ending_here = min_so_far = nums[0]\n    for x in nums[1:]:\n        min_ending_here = min(x, min_ending_here + x)\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 802, "duration": 72.59043073654175, "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    import math\n    total_units = sum(row.count(1) for row in grid)\n    return math.ceil(total_units / capacity)", "prompt_tokens": 631, "completion_tokens": 683, "duration": 33.004000186920166, "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "prompt_tokens": 478, "completion_tokens": 550, "duration": 18.449373960494995, "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() not in 'aeiou' and char.isalpha()\n\n    def consonant_count(word):\n        return sum(1 for char in word if is_consonant(char))\n\n    words = s.split()\n    return [word for word in words if consonant_count(word) == n]", "prompt_tokens": 489, "completion_tokens": 523, "duration": 34.09549522399902, "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            consonant_found = True\n        elif consonant_found and i != 0 and word[i-1] not in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 582, "duration": 37.950350522994995, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    first_open = lst[0].count('(') - lst[0].count(')')\n    second_open = lst[1].count('(') - lst[1].count(')')\n    if first_open < 0 and second_open < 0:\n        return 'No'\n    if first_open > 0 and second_open > 0:\n        return 'No'\n    if first_open >= 0 and lst[0].find(')') < lst[0].rfind('(') and second_open < 0:\n        return 'No'\n    if second_open >= 0 and lst[1].find(')') < lst[1].rfind('(') and first_open < 0:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 936, "duration": 27.832698345184326, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "prompt_tokens": 525, "completion_tokens": 448, "duration": 23.105948209762573, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)", "prompt_tokens": 405, "completion_tokens": 470, "duration": 31.659786701202393, "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if x < 100)", "prompt_tokens": 436, "completion_tokens": 414, "duration": 28.0235812664032, "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 760, "duration": 32.641884565353394, "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if '-' not in date or len(date.split('-')) != 3:\n        return False\n    month, day, year = date.split('-')\n    try:\n        month, day, year = int(month), int(day), int(year)\n    except ValueError:\n        return False\n    if month < 1 or month > 12 or day < 1 or year < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 623, "duration": 74.18961906433105, "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\nprint(split_words('abcdef'))", "prompt_tokens": 448, "completion_tokens": 546, "duration": 18.93216872215271, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    if not lst: return True\n    seen = {}\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n        if lst[i] in seen:\n            seen[lst[i]] += 1\n            if seen[lst[i]] > 1:\n                return False\n        else:\n            seen[lst[i]] = 1\n    return True", "prompt_tokens": 557, "completion_tokens": 525, "duration": 16.49070167541504, "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 657, "duration": 23.04464292526245, "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product = 0\n            break\n        abs_sum += abs(num)\n    return sign_product * abs_sum", "prompt_tokens": 430, "completion_tokens": 602, "duration": 21.96671724319458, "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    N = len(grid)\n    min_path = [float('inf')] * k\n    def dfs(x, y, path, steps):\n        nonlocal min_path\n        if steps == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, steps + 1)\n                path.pop()\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    return min_path", "prompt_tokens": 704, "completion_tokens": 1180, "duration": 39.29986357688904, "result": "passed", "passed": true}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={1: 3}):\n    if n in memo:\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            tri(n + 1, memo)\n        memo[n] = tri(n - 1, memo) + tri(n - 2, memo) + memo[n + 1]\n    return memo[n]\n\ndef generate_tribonacci(n):\n    tribonacci_sequence = [tri(i) for i in range(1, n + 2)]\n    return tribonacci_sequence", "prompt_tokens": 543, "completion_tokens": 757, "duration": 26.825717449188232, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 467, "duration": 30.630692720413208, "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if len(stack) > 1:\n                return True\n            stack.pop()\n    return False", "prompt_tokens": 441, "completion_tokens": 756, "duration": 89.96165370941162, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 384, "duration": 25.979134798049927, "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    return txt[-1].isalpha()", "prompt_tokens": 445, "completion_tokens": 442, "duration": 18.579537868499756, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 654, "duration": 23.443341493606567, "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 529, "duration": 16.759658575057983, "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def convert_to_float(x):\n        if isinstance(x, str):\n            return float(x.replace(',', '.'))\n        return x\n    \n    a_float, b_float = convert_to_float(a), convert_to_float(b)\n    if a_float == b_float:\n        return None\n    return a if a_float > b_float else b", "prompt_tokens": 449, "completion_tokens": 477, "duration": 16.57232689857483, "result": "passed", "passed": true}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "prompt_tokens": 385, "completion_tokens": 525, "duration": 20.356220245361328, "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    factorial = 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 580, "duration": 33.5467369556427, "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            space_count = 0\n            result.append(char)\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n    return ''.join(result)", "prompt_tokens": 414, "completion_tokens": 640, "duration": 35.101579427719116, "result": "passed", "passed": true}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name[0].isalpha() or not len([c for c in name if c.isdigit()]) <= 3 or len(name) == 0:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 414, "duration": 14.300153255462646, "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total", "prompt_tokens": 478, "completion_tokens": 553, "duration": 24.341021060943604, "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 639, "duration": 34.29851698875427, "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "generated_code": "from math import gcd\n\ndef simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    \n    # Multiply numerators and denominators\n    num_result = num1 * num2\n    den_result = den1 * den2\n    \n    # Find GCD to simplify the fraction\n    greatest_cd = gcd(num_result, den_result)\n    \n    # Simplify\n    num_result //= greatest_cd\n    den_result //= greatest_cd\n    \n    return den_result == 1", "prompt_tokens": 463, "completion_tokens": 595, "duration": 24.658660411834717, "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 499, "duration": 15.222848892211914, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    def is_odd_digit(n):\n        return n % 2 != 0\n\n    def meets_criteria(num):\n        if num <= 10:\n            return False\n        last_digit = abs(num) % 10\n        while abs(num) >= 10:\n            num //= 10\n        first_digit = abs(num)\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n\n    return sum(1 for num in nums if meets_criteria(num))", "prompt_tokens": 427, "completion_tokens": 571, "duration": 29.04700493812561, "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    rem = [0, 0, 0]\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        rem[a_i % 3] += 1\n    # Case 1: All elements have a remainder of 0\n    case1 = rem[0] * (rem[0] - 1) * (rem[0] - 2) // 6\n    # Case 2: One element from each remainder category\n    case2 = rem[0] * rem[1] * rem[2]\n    return case1 + case2", "prompt_tokens": 473, "completion_tokens": 747, "duration": 43.88170599937439, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    try:\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n    except ValueError:\n        return ()\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])", "prompt_tokens": 519, "completion_tokens": 552, "duration": 19.428903818130493, "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by their length, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings", "prompt_tokens": 495, "completion_tokens": 492, "duration": 29.387216329574585, "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 603, "duration": 35.422966718673706, "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 448, "duration": 13.96985936164856, "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - gs) for g, gs in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 417, "duration": 32.805684089660645, "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = ''\n    max_strength = float('-inf')\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 565, "duration": 25.412524223327637, "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in a+a", "prompt_tokens": 437, "completion_tokens": 465, "duration": 21.599456310272217, "result": "failed: test #3", "passed": false}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num = abs(num)  # Handle negative numbers\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10  # Move to the next digit\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 521, "duration": 28.89602494239807, "result": "failed: ", "passed": false}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 743, "completion_tokens": 881, "duration": 36.75040054321289, "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 668, "duration": 36.04391598701477, "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    words_sorted = sorted([(len(set(word)), word) for word in words], key=lambda x: (-x[0], x[1]))\n    return words_sorted[0][1] if words_sorted else ''", "prompt_tokens": 428, "completion_tokens": 684, "duration": 23.38472890853882, "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        number += need\n        remaining -= need\n    else:\n        number += remaining\n        remaining = 0\n    return [number, remaining]", "prompt_tokens": 585, "completion_tokens": 476, "duration": 20.95760488510132, "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i, op in enumerate(operators):\n        expression += ' ' + op + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 439, "duration": 19.385745763778687, "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)", "prompt_tokens": 676, "completion_tokens": 528, "duration": 20.498457670211792, "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 507, "duration": 15.138422727584839, "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [x for x in range(a, b+1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 534, "duration": 16.810960292816162, "result": "failed: Test 1", "passed": false}
