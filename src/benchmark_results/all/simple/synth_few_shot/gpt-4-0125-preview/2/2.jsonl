{"task_id": "HumanEval/0", "generated_code": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "prompt_tokens": 432, "completion_tokens": 574, "duration": 29.44079875946045}
{"task_id": "HumanEval/1", "generated_code": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result", "prompt_tokens": 423, "completion_tokens": 917, "duration": 29.378828287124634}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 391, "duration": 21.58025550842285}
{"task_id": "HumanEval/3", "generated_code": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 734, "duration": 26.924010038375854}
{"task_id": "HumanEval/4", "generated_code": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 554, "duration": 18.908098220825195}
{"task_id": "HumanEval/5", "generated_code": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimeter)\n    return result", "prompt_tokens": 669, "completion_tokens": 677, "duration": 23.603050231933594}
{"task_id": "HumanEval/6", "generated_code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    results = []\n    current_depth = 0\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth != 0:\n                results.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth != 0:  # For the last group if not followed by space\n        results.append(max_depth)\n    return results", "prompt_tokens": 420, "completion_tokens": 901, "duration": 28.32577109336853}
{"task_id": "HumanEval/7", "generated_code": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 628, "completion_tokens": 518, "duration": 20.774691581726074}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    product = 1\n    for number in numbers:\n        product *= number\n    return (sum(numbers), product)", "prompt_tokens": 418, "completion_tokens": 452, "duration": 28.264812231063843}
{"task_id": "HumanEval/9", "generated_code": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = numbers[0]\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result", "prompt_tokens": 408, "completion_tokens": 605, "duration": 68.11879992485046}
{"task_id": "HumanEval/10", "generated_code": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n    return string + string[:-1][::-1]", "prompt_tokens": 450, "completion_tokens": 840, "duration": 130.31749653816223}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "prompt_tokens": 384, "completion_tokens": 498, "duration": 27.031465768814087}
{"task_id": "HumanEval/12", "generated_code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 414, "duration": 15.696354389190674}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 590, "duration": 36.94187355041504}
{"task_id": "HumanEval/14", "generated_code": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]", "prompt_tokens": 367, "completion_tokens": 467, "duration": 16.05317711830139}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 376, "completion_tokens": 439, "duration": 15.219866037368774}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 474, "duration": 18.741151332855225}
{"task_id": "HumanEval/17", "generated_code": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "prompt_tokens": 480, "completion_tokens": 518, "duration": 32.263473987579346}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 506, "duration": 18.635699033737183}
{"task_id": "HumanEval/19", "generated_code": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words.sort(key=lambda word: num_map[word])\n    return ' '.join(words)", "prompt_tokens": 413, "completion_tokens": 499, "duration": 17.982134342193604}
{"task_id": "HumanEval/20", "generated_code": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "prompt_tokens": 474, "completion_tokens": 680, "duration": 26.386043071746826}
{"task_id": "HumanEval/21", "generated_code": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 543, "duration": 20.48940372467041}
{"task_id": "HumanEval/22", "generated_code": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "prompt_tokens": 399, "completion_tokens": 404, "duration": 15.94588327407837}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int:\n    return len(string)", "prompt_tokens": 351, "completion_tokens": 380, "duration": 14.470732688903809}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    for i in range(int(n**0.5), 0, -1):\n        if n % i == 0:\n            return n // i\n    return 1", "prompt_tokens": 360, "completion_tokens": 621, "duration": 71.81143116950989}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "prompt_tokens": 434, "completion_tokens": 644, "duration": 21.60187339782715}
{"task_id": "HumanEval/26", "generated_code": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            if number in result:\n                result.remove(number)\n        else:\n            seen.add(number)\n            result.append(number)\n    return result", "prompt_tokens": 392, "completion_tokens": 649, "duration": 45.16115427017212}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "prompt_tokens": 356, "completion_tokens": 481, "duration": 24.399415731430054}
{"task_id": "HumanEval/28", "generated_code": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 445, "duration": 26.83950114250183}
{"task_id": "HumanEval/29", "generated_code": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 623, "duration": 38.80025935173035}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]", "prompt_tokens": 421, "completion_tokens": 442, "duration": 18.3669855594635}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 658, "duration": 30.382752180099487}
{"task_id": "HumanEval/32", "generated_code": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs):\n    x0 = 0.0\n    for _ in range(100):\n        x1 = x0 - poly(xs, x0) / poly([i * coeff for i, coeff in enumerate(xs)][1:], x0)\n        if abs(x0 - x1) < 1e-6:\n            return x1\n        x0 = x1\n    return x0", "prompt_tokens": 567, "completion_tokens": 618, "duration": 23.745519161224365}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list):\n    # Extract elements at indices divisible by three\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    divisible_by_three_elements.sort()\n    # Reinsert sorted elements back into their positions\n    for i, val in enumerate(divisible_by_three_elements):\n        l[i * 3] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 673, "duration": 35.138890504837036}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 408, "duration": 19.66162919998169}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list):\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 406, "duration": 28.082844734191895}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "prompt_tokens": 387, "completion_tokens": 715, "duration": 74.64900279045105}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l):\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l", "prompt_tokens": 431, "completion_tokens": 559, "duration": 39.809067487716675}
{"task_id": "HumanEval/38", "generated_code": "def decode_cyclic(s: str) -> str:\n    # Split string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Rotate each group to the left unless the group has fewer than 3 characters\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 591, "duration": 33.76112198829651}
{"task_id": "HumanEval/39", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n        a, b = b, a + b", "prompt_tokens": 405, "completion_tokens": 639, "duration": 35.64905381202698}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "prompt_tokens": 467, "completion_tokens": 1001, "duration": 130.13228249549866}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n * n", "prompt_tokens": 459, "completion_tokens": 373, "duration": 68.2137439250946}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 416, "completion_tokens": 400, "duration": 16.627710819244385}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 795, "duration": 42.87032437324524}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0: return '0'\n    digits = ''\n    while x > 0:\n        digits = str(x % base) + digits\n        x = x // base\n    return digits", "prompt_tokens": 649, "completion_tokens": 684, "duration": 24.957388639450073}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return (a * h) / 2", "prompt_tokens": 354, "completion_tokens": 412, "duration": 37.279215812683105}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int) -> int:\n    if n == 0: return 0\n    if n == 1: return 0\n    if n == 2: return 2\n    if n == 3: return 0\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "prompt_tokens": 479, "completion_tokens": 767, "duration": 43.1378960609436}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0", "prompt_tokens": 383, "completion_tokens": 429, "duration": 24.05561590194702}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 679, "duration": 32.53753900527954}
{"task_id": "HumanEval/49", "generated_code": "def modp(n, p):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result", "prompt_tokens": 413, "completion_tokens": 655, "duration": 39.615023612976074}
{"task_id": "HumanEval/50", "generated_code": "def decode_shift(s: str) -> str:\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 528, "duration": 22.514854669570923}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "prompt_tokens": 430, "completion_tokens": 471, "duration": 20.169069528579712}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l, t):\n    for num in l:\n        if num >= t:\n            return False\n    return True", "prompt_tokens": 387, "completion_tokens": 492, "duration": 34.61532807350159}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 324, "duration": 20.094030141830444}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 516, "duration": 31.91549515724182}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 643, "duration": 26.30361843109131}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        else:\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0", "prompt_tokens": 400, "completion_tokens": 805, "duration": 73.39305305480957}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing", "prompt_tokens": 395, "completion_tokens": 527, "duration": 26.475609302520752}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 425, "duration": 20.612189292907715}
{"task_id": "HumanEval/59", "generated_code": "def largest_prime_factor(n: int) -> int:\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor", "prompt_tokens": 371, "completion_tokens": 547, "duration": 18.73544454574585}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 490, "duration": 18.25605058670044}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '(': counter += 1\n        elif bracket == ')': counter -= 1\n        if counter < 0: return False\n    return counter == 0", "prompt_tokens": 397, "completion_tokens": 738, "duration": 30.370806455612183}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs):\n    return [i * xs[i] for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 574, "duration": 33.281742572784424}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]", "prompt_tokens": 457, "completion_tokens": 690, "duration": 28.352945804595947}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    count = sum(1 for char in s.lower() if char in 'aeiou')\n    if s and (s[-1].lower() == 'y'):\n        count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 510, "duration": 75.43524551391602}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    len_x = len(x_str)\n    shift %= len_x\n    if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 498, "duration": 16.923402070999146}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "prompt_tokens": 649, "completion_tokens": 524, "duration": 19.283090353012085}
{"task_id": "HumanEval/67", "generated_code": "import re\ndef fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = map(int, re.findall('\\d+', s))\n    # Calculate the number of mangoes\n    mangoes = n - sum(numbers)\n    return mangoes", "prompt_tokens": 518, "completion_tokens": 453, "duration": 26.872657299041748}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n            smallest_even, index_of_smallest_even = val, i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, index_of_smallest_even]", "prompt_tokens": 620, "completion_tokens": 548, "duration": 42.03740572929382}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    from collections import Counter\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num <= count:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 671, "duration": 24.598708391189575}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "prompt_tokens": 432, "completion_tokens": 583, "duration": 21.177229404449463}
{"task_id": "HumanEval/71", "generated_code": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 708, "duration": 27.089107513427734}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 466, "duration": 25.938480615615845}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 526, "duration": 32.81622099876404}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "prompt_tokens": 501, "completion_tokens": 627, "duration": 34.72306847572327}
{"task_id": "HumanEval/75", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    prime_count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_count += 1\n            while a % i == 0:\n                a //= i\n    return prime_count == 3", "prompt_tokens": 387, "completion_tokens": 748, "duration": 27.41276478767395}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "prompt_tokens": 450, "completion_tokens": 529, "duration": 29.445319414138794}
{"task_id": "HumanEval/77", "generated_code": "import math\ndef iscube(a):\n    cube_root = pow(abs(a), 1/3)\n    return round(cube_root) ** 3 == abs(a)", "prompt_tokens": 418, "completion_tokens": 493, "duration": 19.383870840072632}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 746, "duration": 27.33376979827881}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal):\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "prompt_tokens": 447, "completion_tokens": 488, "duration": 27.59486746788025}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 703, "completion_tokens": 681, "duration": 25.17585277557373}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 763, "duration": 39.02901220321655}
{"task_id": "HumanEval/82", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))", "prompt_tokens": 389, "completion_tokens": 557, "duration": 18.832213401794434}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n):\n    if n == 1:\n        return 1  # Edge case: Only '1' fits the criteria\n    start_with_1 = 10**(n-1)\n    end_with_1 = 10**(n-1)\n    both = 10**(n-2) if n > 2 else 1  # For n=2, there's only one number: 11\n    return start_with_1 + end_with_1 - both", "prompt_tokens": 352, "completion_tokens": 657, "duration": 42.85323524475098}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    binary_representation = bin(sum_of_digits)[2:]\n    return binary_representation", "prompt_tokens": 441, "completion_tokens": 536, "duration": 37.64639139175415}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 434, "duration": 22.09685516357422}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "prompt_tokens": 438, "completion_tokens": 560, "duration": 19.20440983772278}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    positions = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                positions.append((i, j))\n    # Sort by row in ascending order, then by column in descending order within each row\n    positions.sort(key=lambda pos: (pos[0], -pos[1]))\n    return positions", "prompt_tokens": 567, "completion_tokens": 521, "duration": 33.673399925231934}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    if not array:  # Check if the array is empty\n        return []\n    # Determine sorting order based on the sum of the first and last elements\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    # Return a sorted copy of the array\n    return sorted(array, reverse=not is_odd)", "prompt_tokens": 511, "completion_tokens": 665, "duration": 85.62567710876465}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            shift_amount = 4\n            if char.islower():\n                result += chr((ord(char) + shift_amount - 97) % 26 + 97)\n            else:\n                result += chr((ord(char) + shift_amount - 65) % 26 + 65)\n        else:\n            result += char\n    return result", "prompt_tokens": 418, "completion_tokens": 721, "duration": 30.97022294998169}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for x in lst:\n        if x < smallest:\n            second_smallest, smallest = smallest, x\n        elif smallest < x < second_smallest:\n            second_smallest = x\n    return None if second_smallest == float('inf') else second_smallest", "prompt_tokens": 432, "completion_tokens": 595, "duration": 71.01539349555969}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    # Splitting the string into sentences based on the delimiters\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    boredom_count = 0\n    for sentence in sentences:\n        # Stripping leading and trailing spaces and checking if it starts with 'I'\n        if sentence.strip().startswith('I'):\n            boredom_count += 1\n    return boredom_count", "prompt_tokens": 415, "completion_tokens": 489, "duration": 33.31384587287903}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    return False", "prompt_tokens": 443, "completion_tokens": 424, "duration": 25.218459606170654}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 's', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'S'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_map:\n            encoded_message += vowel_map[char]\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 578, "duration": 23.1387140750885}
{"task_id": "HumanEval/94", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))", "prompt_tokens": 594, "completion_tokens": 519, "duration": 69.15348625183105}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(key, str) and key.islower() for key in d):\n        return True\n    if all(isinstance(key, str) and key.isupper() for key in d):\n        return True\n    return False", "prompt_tokens": 477, "completion_tokens": 505, "duration": 22.68067479133606}
{"task_id": "HumanEval/96", "generated_code": "def count_up_to(n):\n    if n < 2:\n        return []\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    primes = []\n    for i in range(2, n):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    return primes", "prompt_tokens": 453, "completion_tokens": 731, "duration": 31.513646841049194}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    return unit_digit_a * unit_digit_b", "prompt_tokens": 406, "completion_tokens": 438, "duration": 19.633016347885132}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 521, "duration": 21.037617444992065}
{"task_id": "HumanEval/99", "generated_code": "import math\n\ndef closest_integer(value):\n    num = float(value)\n    decimal_part = num - math.floor(num)\n    if num > 0:\n        if decimal_part >= 0.5:\n            return math.ceil(num)\n        else:\n            return math.floor(num)\n    else:\n        if decimal_part > 0.5:\n            return math.floor(num)\n        else:\n            return math.ceil(num)", "prompt_tokens": 464, "completion_tokens": 547, "duration": 83.5919497013092}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    return [n + 2*i for i in range(n)]", "prompt_tokens": 440, "completion_tokens": 570, "duration": 23.1369686126709}
{"task_id": "HumanEval/101", "generated_code": "import re\n\ndef words_string(s):\n    return re.split(r'[\\s,]+', s)", "prompt_tokens": 424, "completion_tokens": 427, "duration": 43.24448871612549}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "prompt_tokens": 402, "completion_tokens": 616, "duration": 32.89472436904907}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2.0)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 474, "duration": 28.58178734779358}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 510, "duration": 25.050081968307495}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    digit_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    filtered_sorted.reverse()\n    return [digit_to_word[x] for x in filtered_sorted]", "prompt_tokens": 584, "completion_tokens": 551, "duration": 23.76912760734558}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(i * (i + 1) // 2)\n    return result", "prompt_tokens": 432, "completion_tokens": 647, "duration": 40.93769693374634}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 519, "completion_tokens": 613, "duration": 73.98416829109192}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    def sum_of_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(d) for d in str(n)[2:])\n        else:\n            return sum(int(d) for d in str(n))\n\n    return sum(1 for x in arr if sum_of_digits(x) > 0)", "prompt_tokens": 432, "completion_tokens": 567, "duration": 31.316420555114746}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    break_points = 0\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            break_points += 1\n    if break_points > 1:\n        return False\n    return True", "prompt_tokens": 607, "completion_tokens": 488, "duration": 18.8490731716156}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    return 'YES' if odd_count_lst1 <= even_count_lst2 else 'NO'", "prompt_tokens": 505, "completion_tokens": 551, "duration": 37.103777170181274}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    if not test:\n        return {}\n    letters = test.split()\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}", "prompt_tokens": 459, "completion_tokens": 641, "duration": 28.255399465560913}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s, c):\n    result_string = ''.join(char for char in s if char not in c)\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "prompt_tokens": 470, "completion_tokens": 694, "duration": 27.56727933883667}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_string)\n    return result", "prompt_tokens": 481, "completion_tokens": 513, "duration": 34.13279151916504}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_so_far = nums[0]\n    min_ending_here = nums[0]\n    for i in range(1, len(nums)):\n        min_ending_here = min(nums[i], min_ending_here + nums[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "prompt_tokens": 396, "completion_tokens": 769, "duration": 28.061727285385132}
{"task_id": "HumanEval/115", "generated_code": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "prompt_tokens": 631, "completion_tokens": 498, "duration": 65.08308148384094}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    # Function to count the number of 1s in binary representation\n    def count_ones(x):\n        return bin(x).count('1')\n    \n    # Sort the array based on the count of 1s and then by the number itself\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 478, "completion_tokens": 560, "duration": 38.168238162994385}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    def consonant_count(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char not in vowels and char.isalpha())\n\n    words = s.split()\n    return [word for word in words if consonant_count(word) == n]", "prompt_tokens": 489, "completion_tokens": 509, "duration": 19.355960845947266}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    consonant_found = False\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels and not consonant_found:\n            consonant_found = True\n        elif word[i] in vowels and consonant_found:\n            if i - 1 >= 0 and word[i - 1] not in vowels:\n                return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 565, "duration": 36.44777774810791}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    s1, s2 = lst\n    if s1[0] == ')' or s2[-1] == '(':\n        return 'No'\n    if s2[0] == ')' or s1[-1] == '(':\n        return 'No'\n    if s1.count('(') + s2.count('(') != s1.count(')') + s2.count(')'):\n        return 'No'\n    return 'Yes'", "prompt_tokens": 476, "completion_tokens": 749, "duration": 27.516960859298706}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "prompt_tokens": 525, "completion_tokens": 522, "duration": 33.38066506385803}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    sum_odd_even_pos = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum_odd_even_pos += lst[i]\n    return sum_odd_even_pos", "prompt_tokens": 405, "completion_tokens": 554, "duration": 67.55481386184692}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    sum = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n    return sum", "prompt_tokens": 436, "completion_tokens": 485, "duration": 29.016871690750122}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # Adding 1 as it's always the last number in the sequence\n    return sorted(odd_numbers)", "prompt_tokens": 539, "completion_tokens": 678, "duration": 86.22738885879517}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True", "prompt_tokens": 571, "completion_tokens": 676, "duration": 37.36283898353577}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Example usage\nprint(split_words('Hello world!'))\nprint(split_words('Hello,world!'))\nprint(split_words('abcdef'))", "prompt_tokens": 448, "completion_tokens": 525, "duration": 28.601768255233765}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        if i > 0 and lst[i] == lst[i-1] and lst[i] == lst[i+1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 463, "duration": 17.116153478622437}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return 'NO'\n    length = end - start\n    if is_prime(length):\n        return 'YES'\n    else:\n        return 'NO'", "prompt_tokens": 562, "completion_tokens": 650, "duration": 41.722405672073364}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    abs_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product = 0\n            break\n        abs_sum += abs(num)\n    return sign_product * abs_sum", "prompt_tokens": 430, "completion_tokens": 580, "duration": 33.684540033340454}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    n = len(grid)\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path, steps):\n        if steps == k:\n            nonlocal min_path\n            min_path = min(min_path, path)\n            return\n        for dx, dy in [(0,1), (1,0), (0,-1), (-1,0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                dfs(nx, ny, path + [grid[nx][ny]], steps + 1)\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], 1)\n\n    return min_path", "prompt_tokens": 704, "completion_tokens": 780, "duration": 89.0199511051178}
{"task_id": "HumanEval/130", "generated_code": "def tri(n, memo={1: 3}):\n    if n in memo:\n        return memo[n]\n    if n % 2 == 0:\n        memo[n] = 1 + n // 2\n    else:\n        if n + 1 not in memo:\n            memo[n+1] = tri(n-1, memo) + tri(n-2, memo) + 1 + (n+1) // 2\n        memo[n] = tri(n-1, memo) + tri(n-2, memo) + memo[n+1]\n    return [tri(i, memo) for i in range(1, n+2)]", "prompt_tokens": 543, "completion_tokens": 775, "duration": 28.168296575546265}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 471, "duration": 17.26024842262268}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if not stack or stack[-1] == ']':\n                    return True\n            else:\n                return False\n    return False", "prompt_tokens": 441, "completion_tokens": 780, "duration": 33.521596908569336}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])", "prompt_tokens": 465, "completion_tokens": 451, "duration": 24.549000024795532}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()  # Remove trailing spaces\n    if not txt:  # Check if the string is empty after removing spaces\n        return False\n    return txt[-1].isalpha() and txt[-1] != ' '", "prompt_tokens": 445, "completion_tokens": 460, "duration": 24.57705068588257}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index", "prompt_tokens": 411, "completion_tokens": 606, "duration": 23.225147247314453}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "prompt_tokens": 446, "completion_tokens": 516, "duration": 18.433351039886475}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    def to_float(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n        return float(x)\n\n    if a == b:\n        return None\n    else:\n        float_a, float_b = to_float(a), to_float(b)\n        if float_a > float_b:\n            return a\n        else:\n            return b", "prompt_tokens": 449, "completion_tokens": 514, "duration": 81.58686852455139}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    return n >= 8", "prompt_tokens": 385, "completion_tokens": 593, "duration": 21.458543300628662}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n    return result", "prompt_tokens": 403, "completion_tokens": 576, "duration": 24.68200993537903}
{"task_id": "HumanEval/140", "generated_code": "import re\ndef fix_spaces(text):\n    text = re.sub(r' {3,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text", "prompt_tokens": 414, "completion_tokens": 549, "duration": 20.759172916412354}
{"task_id": "HumanEval/141", "generated_code": "import re\ndef file_name_check(file_name: str) -> str:\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}[a-zA-Z]{0,}\\.((txt)|(exe)|(dll))$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'", "prompt_tokens": 522, "completion_tokens": 616, "duration": 24.14133071899414}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    total = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            total += val ** 2\n        elif i % 4 == 0:\n            total += val ** 3\n    return total", "prompt_tokens": 478, "completion_tokens": 617, "duration": 22.263928174972534}
{"task_id": "HumanEval/143", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 626, "duration": 33.98056983947754}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    from fractions import Fraction\n    result = Fraction(x) * Fraction(n)\n    return result.denominator == 1", "prompt_tokens": 463, "completion_tokens": 424, "duration": 24.66281294822693}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 533, "duration": 19.13859486579895}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if str_num[0] in {'1', '3', '5', '7', '9'} and str_num[-1] in {'1', '3', '5', '7', '9'}:\n                count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 570, "duration": 30.40548872947693}
{"task_id": "HumanEval/147", "generated_code": "from math import comb\n\ndef get_max_triples(n):\n    mod_0, mod_1, mod_2 = 0, 0, 0\n    for i in range(1, n + 1):\n        val = i * i - i + 1\n        if val % 3 == 0:\n            mod_0 += 1\n        elif val % 3 == 1:\n            mod_1 += 1\n        else:\n            mod_2 += 1\n    # Calculate the number of valid triples\n    return comb(mod_0, 3) + comb(mod_1, 3) + comb(mod_2, 3) + (mod_0 * mod_1 * mod_2)\n", "prompt_tokens": 473, "completion_tokens": 524, "duration": 77.52326583862305}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets_order = {'Mercury': 1, 'Venus': 2, 'Earth': 3, 'Mars': 4, 'Jupiter': 5, 'Saturn': 6, 'Uranus': 7, 'Neptune': 8}\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    start, end = sorted([planets_order[planet1], planets_order[planet2]])\n    return tuple(planet for planet, order in planets_order.items() if start < order < end)", "prompt_tokens": 519, "completion_tokens": 545, "duration": 83.84579563140869}
{"task_id": "HumanEval/149", "generated_code": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    return sorted_lst", "prompt_tokens": 495, "completion_tokens": 516, "duration": 21.677828788757324}
{"task_id": "HumanEval/150", "generated_code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y", "prompt_tokens": 394, "completion_tokens": 582, "duration": 20.637694835662842}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if x % 2 != 0 and x > 0])", "prompt_tokens": 445, "completion_tokens": 438, "duration": 23.729891061782837}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(g - s) for g, s in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 420, "duration": 25.612104654312134}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')\n    strongest_ext = ''\n    for ext in extensions:\n        cap = sum(1 for char in ext if char.isupper())\n        sm = sum(1 for char in ext if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_ext = ext\n    return f'{class_name}.{strongest_ext}'", "prompt_tokens": 585, "completion_tokens": 716, "duration": 25.892120361328125}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 466, "duration": 32.3748824596405}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num):\n    num_str = str(abs(num))\n    even_count, odd_count = 0, 0\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "prompt_tokens": 373, "completion_tokens": 512, "duration": 42.54193115234375}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    value_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'),\n        (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'),\n        (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = ''\n    for value, numeral in value_map:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n    return roman_numeral", "prompt_tokens": 409, "completion_tokens": 778, "duration": 90.97172141075134}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2", "prompt_tokens": 416, "completion_tokens": 665, "duration": 44.94022536277771}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    max_unique = 0\n    result = ''\n    for word in sorted(words):\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            result = word\n        elif unique_chars == max_unique:\n            result = min(result, word)\n    return result", "prompt_tokens": 428, "completion_tokens": 733, "duration": 27.63376021385193}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "prompt_tokens": 585, "completion_tokens": 492, "duration": 28.32283878326416}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for i, op in enumerate(operators):\n        expression += ' ' + op + ' ' + str(operands[i + 1])\n    return eval(expression)", "prompt_tokens": 515, "completion_tokens": 500, "duration": 26.35711169242859}
{"task_id": "HumanEval/161", "generated_code": "def solve(s: str) -> str:\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.swapcase() if c.isalpha() else c for c in s])", "prompt_tokens": 415, "completion_tokens": 549, "duration": 19.197702407836914}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text: str):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "prompt_tokens": 384, "completion_tokens": 519, "duration": 18.37871789932251}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    start, end = sorted([a, b])\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 529, "duration": 30.939693689346313}
