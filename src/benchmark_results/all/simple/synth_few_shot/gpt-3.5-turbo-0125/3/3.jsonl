{"task_id": "HumanEval/0", "generated_code": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i-1]) < threshold:\n            return True\n    return False", "prompt_tokens": 432, "completion_tokens": 615, "duration": 95.0331494808197}
{"task_id": "HumanEval/1", "generated_code": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':  # Start of a new group\n            stack.append('(')\n        elif char == ')':  # End of a group\n            stack.pop()\n            current_group += char\n            if not stack:  # Group complete\n                result.append(current_group)\n                current_group = ''\n        else:  # Inside a group\n            current_group += char\n    return result", "prompt_tokens": 423, "completion_tokens": 794, "duration": 95.02177810668945}
{"task_id": "HumanEval/2", "generated_code": "def truncate_number(number: float) -> float:\n    return number - int(number)", "prompt_tokens": 393, "completion_tokens": 355, "duration": 10.140805006027222}
{"task_id": "HumanEval/3", "generated_code": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "prompt_tokens": 427, "completion_tokens": 658, "duration": 94.9656491279602}
{"task_id": "HumanEval/4", "generated_code": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "prompt_tokens": 425, "completion_tokens": 590, "duration": 94.89605450630188}
{"task_id": "HumanEval/5", "generated_code": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for num in numbers[:-1]:\n        result.extend([num, delimiter])\n    if numbers:\n        result.append(numbers[-1])\n    return result", "prompt_tokens": 400, "completion_tokens": 414, "duration": 10.100605726242065}
{"task_id": "HumanEval/6", "generated_code": "def parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    for char in paren_string:\n        if char == '(':  \n            max_depth += 1\n        elif char == ')':\n            depths.append(max_depth)\n            max_depth -= 1\n    return depths", "prompt_tokens": 420, "completion_tokens": 780, "duration": 94.9491069316864}
{"task_id": "HumanEval/7", "generated_code": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "prompt_tokens": 401, "completion_tokens": 452, "duration": 94.85551643371582}
{"task_id": "HumanEval/8", "generated_code": "from typing import List, Tuple\nfrom functools import reduce\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), reduce(lambda x, y: x*y, numbers, 1))", "prompt_tokens": 418, "completion_tokens": 406, "duration": 9.580802917480469}
{"task_id": "HumanEval/9", "generated_code": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    deq = deque()\n    result = []\n    \n    for i, num in enumerate(numbers):\n        if deq and deq[0] == i - len(numbers):\n            deq.popleft()\n        while deq and numbers[deq[-1]] < num:\n            deq.pop()\n        deq.append(i)\n        result.append(numbers[deq[0]])\n    \n    return result", "prompt_tokens": 408, "completion_tokens": 967, "duration": 94.93873858451843}
{"task_id": "HumanEval/10", "generated_code": "def make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i][::-1]", "prompt_tokens": 450, "completion_tokens": 494, "duration": 94.81457805633545}
{"task_id": "HumanEval/11", "generated_code": "def string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += '1' if a[i] != b[i] else '0'\n    return result", "prompt_tokens": 384, "completion_tokens": 409, "duration": 9.636582136154175}
{"task_id": "HumanEval/12", "generated_code": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "prompt_tokens": 410, "completion_tokens": 476, "duration": 94.81222152709961}
{"task_id": "HumanEval/13", "generated_code": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "prompt_tokens": 378, "completion_tokens": 434, "duration": 10.564385175704956}
{"task_id": "HumanEval/14", "generated_code": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))] ", "prompt_tokens": 367, "completion_tokens": 414, "duration": 9.951574325561523}
{"task_id": "HumanEval/15", "generated_code": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n+1)))", "prompt_tokens": 376, "completion_tokens": 350, "duration": 9.584103107452393}
{"task_id": "HumanEval/16", "generated_code": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "prompt_tokens": 378, "completion_tokens": 371, "duration": 7.643634557723999}
{"task_id": "HumanEval/17", "generated_code": "def parse_music(music_string: str) -> List[int]:\n    durations = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    for note in music_string.split():\n        result.append(durations.get(note, 0))\n    return result", "prompt_tokens": 480, "completion_tokens": 611, "duration": 94.76315450668335}
{"task_id": "HumanEval/18", "generated_code": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count", "prompt_tokens": 396, "completion_tokens": 442, "duration": 9.407156229019165}
{"task_id": "HumanEval/19", "generated_code": "def sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_map = {word: i for i, word in enumerate(number_words)}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)", "prompt_tokens": 413, "completion_tokens": 465, "duration": 94.69065880775452}
{"task_id": "HumanEval/20", "generated_code": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result", "prompt_tokens": 474, "completion_tokens": 573, "duration": 94.69553756713867}
{"task_id": "HumanEval/21", "generated_code": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]", "prompt_tokens": 431, "completion_tokens": 427, "duration": 94.65548396110535}
{"task_id": "HumanEval/22", "generated_code": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "prompt_tokens": 399, "completion_tokens": 478, "duration": 94.65473484992981}
{"task_id": "HumanEval/23", "generated_code": "def strlen(string: str) -> int: \n    return len(string)", "prompt_tokens": 351, "completion_tokens": 323, "duration": 7.0786120891571045}
{"task_id": "HumanEval/24", "generated_code": "def largest_divisor(n: int) -> int:\n    largest = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            largest = i\n    return largest", "prompt_tokens": 360, "completion_tokens": 484, "duration": 94.59769940376282}
{"task_id": "HumanEval/25", "generated_code": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors", "prompt_tokens": 434, "completion_tokens": 770, "duration": 94.63858366012573}
{"task_id": "HumanEval/26", "generated_code": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "prompt_tokens": 392, "completion_tokens": 455, "duration": 94.60275483131409}
{"task_id": "HumanEval/27", "generated_code": "def flip_case(string: str) -> str:\n    return string.swapcase()", "prompt_tokens": 356, "completion_tokens": 373, "duration": 7.830528497695923}
{"task_id": "HumanEval/28", "generated_code": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "prompt_tokens": 365, "completion_tokens": 385, "duration": 9.085394382476807}
{"task_id": "HumanEval/29", "generated_code": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "prompt_tokens": 395, "completion_tokens": 423, "duration": 9.670520544052124}
{"task_id": "HumanEval/30", "generated_code": "def get_positive(l: list):\n    return [num for num in l if num > 0]", "prompt_tokens": 652, "completion_tokens": 402, "duration": 9.86955714225769}
{"task_id": "HumanEval/31", "generated_code": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "prompt_tokens": 407, "completion_tokens": 515, "duration": 94.50450825691223}
{"task_id": "HumanEval/32", "generated_code": "def find_zero(xs: list) -> float:\n    return optimize.newton(lambda x: poly(xs, x), x0=0)", "prompt_tokens": 567, "completion_tokens": 401, "duration": 91.4115424156189}
{"task_id": "HumanEval/33", "generated_code": "def sort_third(l: list) -> list:\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    for i, val in zip(sorted_indices, sorted_values):\n        l[i] = val\n    return l", "prompt_tokens": 458, "completion_tokens": 508, "duration": 94.48160696029663}
{"task_id": "HumanEval/34", "generated_code": "def unique(l: list):\n    return sorted(list(set(l)))", "prompt_tokens": 381, "completion_tokens": 332, "duration": 8.064234972000122}
{"task_id": "HumanEval/35", "generated_code": "def max_element(l: list) -> int:\n    return max(l)", "prompt_tokens": 390, "completion_tokens": 328, "duration": 95.32754111289978}
{"task_id": "HumanEval/36", "generated_code": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):\n            count += 1\n    return count", "prompt_tokens": 387, "completion_tokens": 551, "duration": 94.44125413894653}
{"task_id": "HumanEval/37", "generated_code": "def sort_even(l: list) -> list:\n    even_indices = sorted(l[::2])\n    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]", "prompt_tokens": 431, "completion_tokens": 410, "duration": 10.378270864486694}
{"task_id": "HumanEval/38", "generated_code": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "prompt_tokens": 466, "completion_tokens": 665, "duration": 94.44684100151062}
{"task_id": "HumanEval/39", "generated_code": "import math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def generate_fibonacci():\n        fib = [0, 1]\n        i = 2\n        while True:\n            fib.append(fib[i-1] + fib[i-2])\n            if is_prime(fib[i]):\n                yield fib[i]\n            i += 1\n    fib_gen = generate_fibonacci()\n    for _ in range(n):\n        result = next(fib_gen)\n    return result", "prompt_tokens": 405, "completion_tokens": 567, "duration": 87.03630828857422}
{"task_id": "HumanEval/40", "generated_code": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "prompt_tokens": 467, "completion_tokens": 957, "duration": 109.59963274002075}
{"task_id": "HumanEval/41", "generated_code": "def car_race_collision(n: int) -> int:\n    return n*(n-1)//2", "prompt_tokens": 459, "completion_tokens": 475, "duration": 85.18871545791626}
{"task_id": "HumanEval/42", "generated_code": "def incr_list(l: list):\n    return [x + 1 for x in l]", "prompt_tokens": 640, "completion_tokens": 328, "duration": 9.645086526870728}
{"task_id": "HumanEval/43", "generated_code": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "prompt_tokens": 465, "completion_tokens": 559, "duration": 84.933114528656}
{"task_id": "HumanEval/44", "generated_code": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    converted = ''\n    while x > 0:\n        converted = str(x % base) + converted\n        x //= base\n    return converted", "prompt_tokens": 399, "completion_tokens": 552, "duration": 98.55554556846619}
{"task_id": "HumanEval/45", "generated_code": "def triangle_area(a, h):\n    return 0.5 * a * h", "prompt_tokens": 354, "completion_tokens": 325, "duration": 88.13789653778076}
{"task_id": "HumanEval/46", "generated_code": "def fib4(n: int):\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    dp[4] = 0\n    for i in range(5, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]", "prompt_tokens": 479, "completion_tokens": 701, "duration": 98.96997046470642}
{"task_id": "HumanEval/47", "generated_code": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]", "prompt_tokens": 383, "completion_tokens": 416, "duration": 10.057092666625977}
{"task_id": "HumanEval/48", "generated_code": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "prompt_tokens": 379, "completion_tokens": 462, "duration": 86.55112218856812}
{"task_id": "HumanEval/49", "generated_code": "def modp(n: int, p: int): \n    if n == 0: \n        return 1 \n    result = 1 \n    base = 2 \n    n = n % (p - 1) \n    while n > 0: \n        if n % 2 == 1: \n            result = (result * base) % p \n        n = n // 2 \n        base = (base * base) % p \n    return result", "prompt_tokens": 413, "completion_tokens": 535, "duration": 12.523919820785522}
{"task_id": "HumanEval/50", "generated_code": "def encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\ndef decode_shift(s: str):\n    return ''.join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])", "prompt_tokens": 398, "completion_tokens": 472, "duration": 92.02562713623047}
{"task_id": "HumanEval/51", "generated_code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "prompt_tokens": 430, "completion_tokens": 588, "duration": 97.41363835334778}
{"task_id": "HumanEval/52", "generated_code": "def below_threshold(l: list, t: int): \n    return all(x < t for x in l)", "prompt_tokens": 387, "completion_tokens": 360, "duration": 91.97729825973511}
{"task_id": "HumanEval/53", "generated_code": "def add(x: int, y: int) -> int:\n    return x + y", "prompt_tokens": 361, "completion_tokens": 273, "duration": 91.41113948822021}
{"task_id": "HumanEval/54", "generated_code": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "prompt_tokens": 448, "completion_tokens": 418, "duration": 92.35412263870239}
{"task_id": "HumanEval/55", "generated_code": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "prompt_tokens": 360, "completion_tokens": 577, "duration": 85.700754404068}
{"task_id": "HumanEval/56", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>' and stack:\n            stack.pop()\n        else:\n            return False\n    return not stack", "prompt_tokens": 400, "completion_tokens": 693, "duration": 94.48309969902039}
{"task_id": "HumanEval/57", "generated_code": "def monotonic(l: list) -> bool:\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "prompt_tokens": 395, "completion_tokens": 404, "duration": 93.56815433502197}
{"task_id": "HumanEval/58", "generated_code": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))", "prompt_tokens": 422, "completion_tokens": 358, "duration": 91.32581162452698}
{"task_id": "HumanEval/59", "generated_code": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "prompt_tokens": 371, "completion_tokens": 567, "duration": 89.42254590988159}
{"task_id": "HumanEval/60", "generated_code": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "prompt_tokens": 402, "completion_tokens": 457, "duration": 93.67304563522339}
{"task_id": "HumanEval/61", "generated_code": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(': \n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != '(': \n                return False\n    return len(stack) == 0", "prompt_tokens": 397, "completion_tokens": 771, "duration": 89.54104852676392}
{"task_id": "HumanEval/62", "generated_code": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]", "prompt_tokens": 416, "completion_tokens": 404, "duration": 94.12092113494873}
{"task_id": "HumanEval/63", "generated_code": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    return dp[n]", "prompt_tokens": 457, "completion_tokens": 594, "duration": 85.15907192230225}
{"task_id": "HumanEval/64", "generated_code": "def vowels_count(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels or (char.lower() == 'y' and i == len(s)-1):\n            count += 1\n    return count", "prompt_tokens": 434, "completion_tokens": 504, "duration": 85.29214572906494}
{"task_id": "HumanEval/65", "generated_code": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]", "prompt_tokens": 390, "completion_tokens": 446, "duration": 85.73229265213013}
{"task_id": "HumanEval/66", "generated_code": "def digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())", "prompt_tokens": 420, "completion_tokens": 440, "duration": 97.17689347267151}
{"task_id": "HumanEval/67", "generated_code": "def fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    return n - apples - oranges", "prompt_tokens": 518, "completion_tokens": 389, "duration": 85.55018711090088}
{"task_id": "HumanEval/68", "generated_code": "def pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    return [smallest_even, smallest_even_index]", "prompt_tokens": 620, "completion_tokens": 551, "duration": 86.75526833534241}
{"task_id": "HumanEval/69", "generated_code": "def search(lst):\n    freq = {}\n    result = -1\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n        if freq[num] >= num:\n            result = max(result, num)\n    return result", "prompt_tokens": 473, "completion_tokens": 552, "duration": 98.58549451828003}
{"task_id": "HumanEval/70", "generated_code": "def strange_sort_list(lst):\n    lst.sort()\n    res = []\n    i, j = 0, len(lst)-1\n    while i <= j:\n        if i == j:\n            res.append(lst[i])\n        else:\n            res.extend([lst[i], lst[j]])\n        i += 1\n        j -= 1\n    return res", "prompt_tokens": 432, "completion_tokens": 605, "duration": 97.28765869140625}
{"task_id": "HumanEval/71", "generated_code": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "prompt_tokens": 429, "completion_tokens": 567, "duration": 89.75924134254456}
{"task_id": "HumanEval/72", "generated_code": "def will_it_fly(q, w):\n    return is_palindrome(q) and calculate_sum(q) <= w", "prompt_tokens": 538, "completion_tokens": 350, "duration": 93.99655556678772}
{"task_id": "HumanEval/73", "generated_code": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n            if arr[left] < arr[right]:\n                arr[left] = arr[right]\n            else:\n                arr[right] = arr[left]\n        left += 1\n        right -= 1\n    return changes", "prompt_tokens": 465, "completion_tokens": 833, "duration": 89.50566911697388}
{"task_id": "HumanEval/74", "generated_code": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    return lst1 if total_chars_lst1 < total_chars_lst2 else lst2 if total_chars_lst1 > total_chars_lst2 else lst1", "prompt_tokens": 501, "completion_tokens": 516, "duration": 85.2379982471466}
{"task_id": "HumanEval/75", "generated_code": "from itertools import combinations\nimport math\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    return False", "prompt_tokens": 387, "completion_tokens": 615, "duration": 93.87414646148682}
{"task_id": "HumanEval/76", "generated_code": "def is_simple_power(x, n):\n    import math\n    return math.log(x, n).is_integer()", "prompt_tokens": 450, "completion_tokens": 383, "duration": 94.47149324417114}
{"task_id": "HumanEval/77", "generated_code": "import math\n\ndef iscube(a):\n    root = a**(1/3)\n    return root.is_integer()", "prompt_tokens": 418, "completion_tokens": 357, "duration": 87.463210105896}
{"task_id": "HumanEval/78", "generated_code": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count", "prompt_tokens": 607, "completion_tokens": 512, "duration": 94.71137881278992}
{"task_id": "HumanEval/79", "generated_code": "def decimal_to_binary(decimal): \n    binary = '' \n    while decimal > 0: \n        binary = str(decimal % 2) + binary \n        decimal = decimal // 2 \n    return 'db' + binary + 'db'", "prompt_tokens": 447, "completion_tokens": 401, "duration": 93.79404950141907}
{"task_id": "HumanEval/80", "generated_code": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True", "prompt_tokens": 429, "completion_tokens": 500, "duration": 85.90674805641174}
{"task_id": "HumanEval/81", "generated_code": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "prompt_tokens": 578, "completion_tokens": 690, "duration": 94.37037396430969}
{"task_id": "HumanEval/82", "generated_code": "import math\n\ndef prime_length(string):\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n            return False\n    return True", "prompt_tokens": 389, "completion_tokens": 569, "duration": 96.77244973182678}
{"task_id": "HumanEval/83", "generated_code": "def starts_one_ends(n): \n    return 2 * 9 ** (n-1) + 9 ** n", "prompt_tokens": 352, "completion_tokens": 455, "duration": 95.02846384048462}
{"task_id": "HumanEval/84", "generated_code": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]", "prompt_tokens": 441, "completion_tokens": 414, "duration": 136.18108463287354}
{"task_id": "HumanEval/85", "generated_code": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "prompt_tokens": 363, "completion_tokens": 372, "duration": 92.49782395362854}
{"task_id": "HumanEval/86", "generated_code": "def anti_shuffle(s): \n    return ' '.join([''.join(sorted(word)) for word in s.split()])", "prompt_tokens": 438, "completion_tokens": 406, "duration": 11.222667217254639}
{"task_id": "HumanEval/87", "generated_code": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "prompt_tokens": 567, "completion_tokens": 449, "duration": 10.353066205978394}
{"task_id": "HumanEval/88", "generated_code": "def sort_array(array):\n    return sorted(array, reverse=(sum(array[0], array[-1]) % 2 == 0))", "prompt_tokens": 511, "completion_tokens": 393, "duration": 9.857656955718994}
{"task_id": "HumanEval/89", "generated_code": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 2 * 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            else:\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted", "prompt_tokens": 418, "completion_tokens": 763, "duration": 15.026149988174438}
{"task_id": "HumanEval/90", "generated_code": "def next_smallest(lst):\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) > 1:\n        return sorted_lst[1]\n    else:\n        return None", "prompt_tokens": 432, "completion_tokens": 458, "duration": 9.924462795257568}
{"task_id": "HumanEval/91", "generated_code": "def is_bored(S):\n    sentences = [sentence.strip() for sentence in re.split('[.!?]', S) if sentence.strip()]\n    return sum(1 for sentence in sentences if sentence.startswith('I'))", "prompt_tokens": 415, "completion_tokens": 411, "duration": 8.945995569229126}
{"task_id": "HumanEval/92", "generated_code": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False", "prompt_tokens": 443, "completion_tokens": 532, "duration": 13.455046892166138}
{"task_id": "HumanEval/93", "generated_code": "def encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "prompt_tokens": 417, "completion_tokens": 479, "duration": 8.874763011932373}
{"task_id": "HumanEval/94", "generated_code": "def sum_of_prime_digits(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    max_sum = 0\n    for num in lst:\n        if is_prime(num):\n            digit_sum = sum_of_digits(num)\n            max_sum = max(max_sum, digit_sum)\n    return max_sum", "prompt_tokens": 594, "completion_tokens": 640, "duration": 13.326565027236938}
{"task_id": "HumanEval/95", "generated_code": "def check_dict_case(dict):\n    if not dict:\n        return False\n    return all(key.islower() for key in dict.keys()) or all(key.isupper() for key in dict.keys())", "prompt_tokens": 477, "completion_tokens": 378, "duration": 7.472055435180664}
{"task_id": "HumanEval/96", "generated_code": "import math\n\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "prompt_tokens": 453, "completion_tokens": 575, "duration": 15.18004059791565}
{"task_id": "HumanEval/97", "generated_code": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "prompt_tokens": 406, "completion_tokens": 370, "duration": 8.70408034324646}
{"task_id": "HumanEval/98", "generated_code": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n            count += 1\n    return count", "prompt_tokens": 380, "completion_tokens": 450, "duration": 9.375584125518799}
{"task_id": "HumanEval/99", "generated_code": "def closest_integer(value):\n    return int(round(float(value) + 0.5))", "prompt_tokens": 464, "completion_tokens": 361, "duration": 11.073428630828857}
{"task_id": "HumanEval/100", "generated_code": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2\n        else:\n            n += 1\n        stones.append(n)\n    return stones", "prompt_tokens": 440, "completion_tokens": 466, "duration": 8.707528352737427}
{"task_id": "HumanEval/101", "generated_code": "def words_string(s):\n    return s.split(', ') if ', ' in s else s.split()", "prompt_tokens": 424, "completion_tokens": 353, "duration": 9.420200109481812}
{"task_id": "HumanEval/102", "generated_code": "def choose_num(x, y):\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1", "prompt_tokens": 402, "completion_tokens": 504, "duration": 10.51486873626709}
{"task_id": "HumanEval/103", "generated_code": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "prompt_tokens": 448, "completion_tokens": 469, "duration": 14.252433061599731}
{"task_id": "HumanEval/104", "generated_code": "def unique_digits(x):\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])", "prompt_tokens": 410, "completion_tokens": 496, "duration": 9.850858211517334}
{"task_id": "HumanEval/105", "generated_code": "def by_length(arr):\n    num_to_name = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    return [num_to_name[num] for num in reversed_arr]", "prompt_tokens": 584, "completion_tokens": 457, "duration": 10.214165210723877}
{"task_id": "HumanEval/106", "generated_code": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result", "prompt_tokens": 432, "completion_tokens": 458, "duration": 9.467700481414795}
{"task_id": "HumanEval/107", "generated_code": "def even_odd_palindrome(n: int) -> Tuple[int, int]:\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count", "prompt_tokens": 519, "completion_tokens": 640, "duration": 11.426195859909058}
{"task_id": "HumanEval/108", "generated_code": "def count_nums(arr):\n    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])", "prompt_tokens": 432, "completion_tokens": 424, "duration": 8.559468269348145}
{"task_id": "HumanEval/109", "generated_code": "def move_one_ball(arr):\n    min_index = arr.index(min(arr))\n    return arr[min_index:] + arr[:min_index] == sorted(arr)", "prompt_tokens": 607, "completion_tokens": 525, "duration": 11.678086757659912}
{"task_id": "HumanEval/110", "generated_code": "def exchange(lst1, lst2):\n    sum_odd = sum(x for x in lst1 if x % 2 != 0)\n    sum_even = sum(x for x in lst2 if x % 2 == 0)\n    return 'YES' if sum_odd <= sum_even else 'NO'", "prompt_tokens": 505, "completion_tokens": 770, "duration": 18.65662169456482}
{"task_id": "HumanEval/111", "generated_code": "def histogram(test):\n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    max_count = max(counts.values()) if counts else 0\n    return {key: value for key, value in counts.items() if value == max_count}", "prompt_tokens": 459, "completion_tokens": 568, "duration": 12.442359447479248}
{"task_id": "HumanEval/112", "generated_code": "def reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    new_s = ''.join(char for char in s if char not in c)\n    return new_s, new_s == new_s[::-1]", "prompt_tokens": 470, "completion_tokens": 902, "duration": 16.143261671066284}
{"task_id": "HumanEval/113", "generated_code": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f'the number of odd elements {odd_count}n the str{odd_count}ng {s} of the {s}nput.')\n    return result", "prompt_tokens": 481, "completion_tokens": 450, "duration": 11.406415462493896}
{"task_id": "HumanEval/114", "generated_code": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "prompt_tokens": 396, "completion_tokens": 551, "duration": 10.646397113800049}
{"task_id": "HumanEval/115", "generated_code": "def max_fill(grid, capacity):\n    total_operations = 0\n    for row in grid:\n        operations = 0\n        for well in row:\n            if well == 1:\n                operations += math.ceil(1 / capacity)\n        total_operations += operations\n    return total_operations", "prompt_tokens": 631, "completion_tokens": 992, "duration": 18.645736694335938}
{"task_id": "HumanEval/116", "generated_code": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "prompt_tokens": 478, "completion_tokens": 462, "duration": 8.346378087997437}
{"task_id": "HumanEval/117", "generated_code": "def select_words(s, n):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for word in s.split():\n        if sum(1 for char in word if char in consonants) == n:\n            result.append(word)\n    return result", "prompt_tokens": 489, "completion_tokens": 448, "duration": 8.171553134918213}
{"task_id": "HumanEval/118", "generated_code": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] in vowels:\n            return word[i]\n    return ''", "prompt_tokens": 457, "completion_tokens": 617, "duration": 10.894774198532104}
{"task_id": "HumanEval/119", "generated_code": "def match_parens(lst):\n    def is_balanced(s: str) -> bool:\n        stack = []\n        mapping = {')': '('}\n        for char in s:\n            if char in mapping:\n                top_element = stack.pop() if stack else '#'\n                if mapping[char] != top_element:\n                    return False\n            elif char in {'(', ')'}:\n                stack.append(char)\n        return not stack\n\n    concatenated = ''.join(lst)\n    return 'Yes' if is_balanced(concatenated) else 'No'", "prompt_tokens": 476, "completion_tokens": 692, "duration": 15.162785530090332}
{"task_id": "HumanEval/120", "generated_code": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "prompt_tokens": 525, "completion_tokens": 384, "duration": 8.516645669937134}
{"task_id": "HumanEval/121", "generated_code": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 != 0 and i % 2 == 0)", "prompt_tokens": 405, "completion_tokens": 460, "duration": 9.618844747543335}
{"task_id": "HumanEval/122", "generated_code": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)", "prompt_tokens": 436, "completion_tokens": 380, "duration": 7.918127059936523}
{"task_id": "HumanEval/123", "generated_code": "def get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    return sorted([num for num in collatz_seq if num % 2 != 0])", "prompt_tokens": 539, "completion_tokens": 577, "duration": 11.796014547348022}
{"task_id": "HumanEval/124", "generated_code": "def valid_date(date):\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 1 <= day <= 29\n        else:\n            return 1 <= day <= 28\n    return False", "prompt_tokens": 571, "completion_tokens": 632, "duration": 13.363496541976929}
{"task_id": "HumanEval/125", "generated_code": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)", "prompt_tokens": 448, "completion_tokens": 421, "duration": 12.13048505783081}
{"task_id": "HumanEval/126", "generated_code": "def is_sorted(lst):\n    count = {}\n    for num in lst:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > 1:\n            return False\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True", "prompt_tokens": 557, "completion_tokens": 504, "duration": 8.899420022964478}
{"task_id": "HumanEval/127", "generated_code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \n\n\ndef intersection(interval1, interval2): \n    start = max(interval1[0], interval2[0]) \n    end = min(interval1[1], interval2[1]) \n    length = end - start \n    if length <= 0: \n        return 'NO' \n    if is_prime(length): \n        return 'YES' \n    return 'NO'", "prompt_tokens": 562, "completion_tokens": 512, "duration": 15.604897499084473}
{"task_id": "HumanEval/128", "generated_code": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        sign = 1 if num > 0 else -1 if num < 0 else 0\n        sign_product *= sign\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "prompt_tokens": 430, "completion_tokens": 455, "duration": 11.693083047866821}
{"task_id": "HumanEval/129", "generated_code": "def minPath(grid, k):\n    def dfs(row, col, path):\n        if len(path) == k:\n            return path\n        \n        neighbors = []\n        if row > 0:\n            neighbors.append((row-1, col))\n        if row < len(grid) - 1:\n            neighbors.append((row+1, col))\n        if col > 0:\n            neighbors.append((row, col-1))\n        if col < len(grid[0]) - 1:\n            neighbors.append((row, col+1))\n        \n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        \n        for neighbor in neighbors:\n            new_row, new_col = neighbor\n            if (new_row, new_col) not in visited:\n                visited.add((new_row, new_col))\n                res = dfs(new_row, new_col, path + [grid[new_row][new_col]])\n                if res:\n                    return res\n        \n        return None\n    \n    visited = set()\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            visited.add((i, j))\n            res = dfs(i, j, [grid[i][j]])\n            if res:\n                return res", "prompt_tokens": 1443, "completion_tokens": 1524, "duration": 39.437400817871094}
{"task_id": "HumanEval/130", "generated_code": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n+1):\n            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])\n        return tribonacci", "prompt_tokens": 543, "completion_tokens": 483, "duration": 12.357060194015503}
{"task_id": "HumanEval/131", "generated_code": "def digits(n):\n    product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 != 0:\n            product *= int(d)\n            has_odd = True\n    return product if has_odd else 0", "prompt_tokens": 379, "completion_tokens": 493, "duration": 10.01212739944458}
{"task_id": "HumanEval/132", "generated_code": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n    return bool(stack)", "prompt_tokens": 441, "completion_tokens": 692, "duration": 14.291762113571167}
{"task_id": "HumanEval/133", "generated_code": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)", "prompt_tokens": 465, "completion_tokens": 465, "duration": 10.887598991394043}
{"task_id": "HumanEval/134", "generated_code": "def check_if_last_char_is_a_letter(txt):\n    if txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()):\n        return True\n    return False", "prompt_tokens": 445, "completion_tokens": 402, "duration": 8.158817052841187}
{"task_id": "HumanEval/135", "generated_code": "def can_arrange(arr): \n    result = -1 \n    for i in range(1, len(arr)): \n        if arr[i] < arr[i-1]: \n            result = i-1 \n    return result", "prompt_tokens": 411, "completion_tokens": 588, "duration": 11.817037343978882}
{"task_id": "HumanEval/136", "generated_code": "def largest_smallest_integers(lst):\n    max_neg = None\n    min_pos = None\n    for num in lst:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n        elif num > 0 and (min_pos is None or num < min_pos):\n            min_pos = num\n    return (max_neg, min_pos)", "prompt_tokens": 446, "completion_tokens": 458, "duration": 8.461699962615967}
{"task_id": "HumanEval/137", "generated_code": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "prompt_tokens": 449, "completion_tokens": 513, "duration": 12.143389463424683}
{"task_id": "HumanEval/138", "generated_code": "def is_equal_to_sum_even(n):\n    for i in range(1, n//2 + 1):\n        if i % 2 == 0 and (n - i) % 2 == 0:\n            return True\n    return False", "prompt_tokens": 614, "completion_tokens": 652, "duration": 12.257891178131104}
{"task_id": "HumanEval/139", "generated_code": "def special_factorial(n):\n    if n == 1:\n        return 1\n    return factorial(n) * special_factorial(n-1)", "prompt_tokens": 403, "completion_tokens": 400, "duration": 6.837999582290649}
{"task_id": "HumanEval/140", "generated_code": "def fix_spaces(text):\n    result = ''\n    count = 0\n    for char in text:\n        if char == ' ':\n            count += 1\n            if count > 2:\n                result = result[:-2] + '-'\n                count = 1\n            else:\n                result += '_'\n        else:\n            result += char\n            count = 0\n    return result", "prompt_tokens": 414, "completion_tokens": 420, "duration": 8.1464684009552}
{"task_id": "HumanEval/141", "generated_code": "def file_name_check(file_name):\n    if len([char for char in file_name if char.isdigit()]) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    file_parts = file_name.split('.')\n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "prompt_tokens": 522, "completion_tokens": 459, "duration": 12.95468020439148}
{"task_id": "HumanEval/142", "generated_code": "def sum_squares(lst):\n    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])", "prompt_tokens": 478, "completion_tokens": 539, "duration": 11.849300861358643}
{"task_id": "HumanEval/143", "generated_code": "from math import sqrt\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "prompt_tokens": 455, "completion_tokens": 504, "duration": 8.551858186721802}
{"task_id": "HumanEval/144", "generated_code": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0", "prompt_tokens": 463, "completion_tokens": 536, "duration": 11.206235408782959}
{"task_id": "HumanEval/145", "generated_code": "def order_by_points(nums):\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(abs(num)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "prompt_tokens": 423, "completion_tokens": 455, "duration": 14.163499355316162}
{"task_id": "HumanEval/146", "generated_code": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if len(str(abs(num))) > 1 and int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0 and abs(num) > 10:\n            count += 1\n    return count", "prompt_tokens": 427, "completion_tokens": 544, "duration": 10.867447853088379}
{"task_id": "HumanEval/147", "generated_code": "def get_max_triples(n):\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "prompt_tokens": 473, "completion_tokens": 752, "duration": 19.65212059020996}
{"task_id": "HumanEval/148", "generated_code": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    return tuple(sorted(planets[min(start, end)+1:max(start, end)]))", "prompt_tokens": 519, "completion_tokens": 492, "duration": 8.057710409164429}
{"task_id": "HumanEval/149", "generated_code": "def list_sort(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))", "prompt_tokens": 495, "completion_tokens": 490, "duration": 11.465475082397461}
{"task_id": "HumanEval/150", "generated_code": "import math\n\ndef x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return y\n    return x", "prompt_tokens": 394, "completion_tokens": 508, "duration": 14.516713857650757}
{"task_id": "HumanEval/151", "generated_code": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)", "prompt_tokens": 445, "completion_tokens": 470, "duration": 8.220178365707397}
{"task_id": "HumanEval/152", "generated_code": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "prompt_tokens": 538, "completion_tokens": 368, "duration": 9.60893964767456}
{"task_id": "HumanEval/153", "generated_code": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')\n    for ext in extensions:\n        strength = sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return f'{class_name}.{strongest_extension}'", "prompt_tokens": 585, "completion_tokens": 677, "duration": 13.324948072433472}
{"task_id": "HumanEval/154", "generated_code": "def cycpattern_check(a, b):\n    return b in (a + a)", "prompt_tokens": 437, "completion_tokens": 645, "duration": 11.919705867767334}
{"task_id": "HumanEval/155", "generated_code": "def even_odd_count(num: int) -> tuple:\n    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)\n    return even_count, odd_count", "prompt_tokens": 373, "completion_tokens": 451, "duration": 12.323066473007202}
{"task_id": "HumanEval/156", "generated_code": "def int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result", "prompt_tokens": 409, "completion_tokens": 745, "duration": 13.01288914680481}
{"task_id": "HumanEval/157", "generated_code": "def right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2", "prompt_tokens": 416, "completion_tokens": 511, "duration": 14.927648305892944}
{"task_id": "HumanEval/158", "generated_code": "def find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n    max_word = ''\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n    return max_word", "prompt_tokens": 428, "completion_tokens": 568, "duration": 12.679579019546509}
{"task_id": "HumanEval/159", "generated_code": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if total_carrots <= remaining:\n        return [total_carrots, remaining - total_carrots]\n    else:\n        return [total_carrots + remaining, 0]", "prompt_tokens": 585, "completion_tokens": 552, "duration": 11.915721416473389}
{"task_id": "HumanEval/160", "generated_code": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result", "prompt_tokens": 515, "completion_tokens": 682, "duration": 12.95475172996521}
{"task_id": "HumanEval/161", "generated_code": "def solve(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s) if any(char.isalpha() for char in s) else s[::-1]", "prompt_tokens": 415, "completion_tokens": 395, "duration": 10.66045618057251}
{"task_id": "HumanEval/162", "generated_code": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()", "prompt_tokens": 384, "completion_tokens": 498, "duration": 10.787477493286133}
{"task_id": "HumanEval/163", "generated_code": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "prompt_tokens": 412, "completion_tokens": 410, "duration": 8.212275981903076}
